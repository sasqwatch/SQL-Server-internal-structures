/*
 * PDB file: .\sqldk.pdb\4C6932DE817A494FB495414434B778312\sqldk.pdb
 * Image architecture: AMD64 (0x8664)
 *
 * Dumped by pdbex tool v0.11, by wbenny
 */

struct StaticStorage<1024>;
enum POWER_ACTION;
enum _TAG_UNNAMED_1;
class TSinglyLinkedList<XE_DeferredEvent>;
enum tagHITRESULT;
union tagCY;
struct tagDEC;
struct _wireVARIANT;
enum XEEngineDiagnosticLevel;
enum _TAG_UNNAMED_2;
enum _TAG_UNNAMED_3;
enum _TAG_UNNAMED_4;
enum _TAG_UNNAMED_5;
class Spinlock<270,1,1>;
enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;
struct __vc_attributes::helper_attributes::v1_alttypeAttribute;
enum tagTYPEFLAGS;
struct IServiceProvider;
enum _TAG_UNNAMED_6;
class CAutoRefc<IXMLDOMNodeList>;
class CAutoRefc<IXMLDOMNode>;
struct _GUID;
class XE_XMLConfiguredSessionEnumerator;
enum POWER_INFORMATION_LEVEL;
class InterruptTicks<unsigned __int64>;
class SOS_Ticks<InterruptTicks<unsigned __int64>,-3>;
class CostInfo;
class MemObjCache<CMemThread<CMemDbg<CMemFixed> > >;
enum TCacheStore<CacheProbabilisticAlgorithm>::HashBucketAction;
struct XE_TArray<XEPredicateSource *,11>;
enum _TAG_UNNAMED_7;
enum XeSqlPkg::allocation_ring_buffer_recorded::CustomizableSlots;
enum WELL_KNOWN_SID_TYPE;
enum _TAG_UNNAMED_8;
class XE_AutoP<XE_FileSet>;
enum WbemErrorEnum;
struct tagPANOSE;
enum _TAG_UNNAMED_9;
enum _TAG_UNNAMED_10;
enum _TAG_UNNAMED_11;
struct IRootStorage;
enum _TAG_UNNAMED_12;
struct tagTYPEDESC;
struct tagIDLDESC;
struct tagPARAMDESC;
struct tagELEMDESC;
enum tagVARKIND;
struct tagVARDESC;
struct XERelativeObjectId;
struct XEStaticAttribute;
struct XE_TArray<XEStaticAttribute,4>;
struct XE_TArray<XECustomizableAttribute,0>;
struct XEDataAttribute;
struct XE_TArray<XEDataAttribute,17>;
struct XEObject;
struct XEEvent;
struct XE_TEvent<4,0,17>;
struct SListBase::Elem;
struct SListBase;
struct SESList<XESessionContext,56>;
struct XE_SessionContextList;
class XeSqlPkg::broker_message_undeliverable;
enum WbemComparisonFlagEnum;
struct _UNICODE_STRING;
struct _PLUGPLAY_CONTROL_STATUS_DATA;
enum _TAG_UNNAMED_13;
struct _SYSTEM_POOLTAG;
enum VARENUM;
class CXColumn<unsigned __int64>;
enum _TAG_UNNAMED_14;
struct _LIST_ENTRY;
enum ABORT_AND_LCK_EXCEPTIONS;
enum _TAG_UNNAMED_15;
enum XeSqlPkg::file_written_to_replica::CustomizableSlots;
union XE_PublishedDescriptor::DataSource::Data;
enum XERWMode;
struct tagSCROLLINFO;
struct _PAGEDIR_INFORMATION;
enum _TAG_UNNAMED_16;
enum _TAG_UNNAMED_17;
class XE_AutoRg<unsigned char>;
class XE_MetadataSerializer;
struct IDirectWriterLock;
enum URLIS;
enum _TAG_UNNAMED_18;
struct XEPackage0::ActivityIdAction;
enum tagMSHLFLAGS;
struct XE_TArray<XEDataAttribute,7>;
struct XE_TEvent<4,0,7>;
class XeSqlPkg::logreader_process_text_ptr;
enum EFormatType;
struct IFont;
enum _TAG_UNNAMED_19;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A;
enum _TAG_UNNAMED_20;
struct POWERBROADCAST_SETTING;
enum XEErrorStates;
struct IXMLDOMDocument;
enum XEBaseTypes;
struct ISynchronize;
enum _TAG_UNNAMED_21;
enum _TAG_UNNAMED_22;
enum _TAG_UNNAMED_23;
enum _TAG_UNNAMED_24;
enum _TAG_UNNAMED_25;
enum _TAG_UNNAMED_26;
enum tag_WBEMSTATUS;
enum _TAG_UNNAMED_27;
enum _TAG_UNNAMED_28;
enum _tagQUERYOPTION;
class AutoSpinlockHolder<259,1,1>;
struct IGlobalInterfaceTable;
enum MemoryNode::FAILURES;
enum _TAG_UNNAMED_29;
struct DLGTEMPLATE;
enum WMIDPREQUESTCODE;
struct IEnumString;
struct _xml_error;
enum SHGLOBALCOUNTER;
struct _UNWIND_HISTORY_TABLE_ENTRY;
enum MemoryNotificationType;
enum _TAG_UNNAMED_30;
enum _TAG_UNNAMED_31;
enum _TAG_UNNAMED_32;
enum _TAG_UNNAMED_33;
struct XE_ETWActionMetadata;
enum WbemImpersonationLevelEnum;
enum SYSGEOTYPE;
enum _TAG_UNNAMED_34;
struct _MIDL_STUB_MESSAGE;
enum _TAG_UNNAMED_35;
struct SrvProcSLock;
struct __vc_attributes::cpp_quoteAttribute;
enum _tagPARSEACTION;
struct IGlobalOptions;
class ExDumpTriggers;
enum ReplacesCorHdrNumericDefines;
enum XECustomizableAttrAggregation;
enum XECustomizableAttrCapabilities;
struct XECustomizableAttribute;
struct XE_TArray<XECustomizableAttribute,2>;
struct XE_TArray<XEDataAttribute,10>;
struct XE_TEvent<4,2,10>;
class XeSqlPkg::sp_statement_starting;
enum _TAG_UNNAMED_36;
enum _TAG_UNNAMED_37;
class XE_ResolvedObjectXML<XEPredicateSource>;
enum _TAG_UNNAMED_38;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
class CAutoP<XEPackage0::RingTarget::PackageEntry>;
enum _TAG_UNNAMED_39;
struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL;
enum _TAG_UNNAMED_40;
enum WbemPrivilegeEnum;
struct CXFileHeader;
class XE_AutoP<void>;
class CXFile;
struct __vc_attributes::helper_attributes::default_valueAttribute;
class CAutoP<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > >;
enum _TAG_UNNAMED_41;
struct XE_TArray<XECustomizableAttribute,1>;
struct XE_TArray<XEDataAttribute,14>;
struct XE_TEvent<4,1,14>;
class XeSqlPkg::preconnect_completed;
enum WbemCimtypeEnum;
struct _s__RTTIBaseClassArray;
enum _TAG_UNNAMED_42;
enum AllocOptions;
struct __vc_attributes::lcidAttribute;
enum __MIDL_IInternetSecurityManager_0001;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
enum PROXY_PHASE;
enum _TAG_UNNAMED_43;
enum _TAG_UNNAMED_44;
class Spinlock<289,1,1>;
struct std::_Pair_base<XE_FileSet::Entry *,XE_FileSet::Entry *>;
enum SOSHOST_IOTYPE;
union _LARGE_INTEGER;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _IO_COUNTERS;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
enum _TAG_UNNAMED_45;
enum _TAG_UNNAMED_46;
enum _TAG_UNNAMED_47;
class TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
enum _IDL_CS_CONVERT;
struct tagMULTI_QI;
enum CAutoSetupExecContextsForInternalTasks::EStartupErrorHandling;
class CAutoBase<XE_BufferMap>;
enum ASSOCDATA;
struct _SERVICE_STATUS;
struct _FILETIME;
class CMallocSpy;
class CMemDbg<CMemObj>;
enum _TAG_UNNAMED_48;
struct _KEY_NAME_INFORMATION;
enum _TAG_UNNAMED_49;
struct XEMapEntry;
enum tagSTGC;
enum _TAG_UNNAMED_50;
enum SYSTEM_POWER_CONDITION;
enum _TAG_UNNAMED_51;
enum _TAG_UNNAMED_52;
enum DISTRIBUTED_CACHEID;
enum _TAG_UNNAMED_53;
struct IBindCallbackRedirect;
enum _TAG_UNNAMED_54;
struct AsyncIPipeDouble;
enum _TAG_UNNAMED_55;
enum _TRACE_QUERY_INFO_CLASS;
struct tagRMTPACK;
enum _TAG_UNNAMED_56;
enum _TAG_UNNAMED_57;
enum _PROCESSOR_CACHE_TYPE;
struct _CACHE_DESCRIPTOR;
enum _TAG_UNNAMED_58;
enum tagTYPEKIND;
enum _TAG_UNNAMED_59;
enum _TAG_UNNAMED_60;
class PeriodicTimer<120000>::AutoCheck;
enum tagBINDSTATUS;
enum _TAG_UNNAMED_61;
class SOS_MemoryBlockAllocatorFinalizer;
enum SHREGDEL_FLAGS;
enum AllocationFailMode;
struct tagLOGFONTW;
struct tagENUMLOGFONTEXW;
struct tagDESIGNVECTOR;
struct tagENUMLOGFONTEXDVW;
struct XSAVE_CPU_INFO;
struct _XSAVE_SUPPORTED_CPU;
struct _XSAVE_VENDOR;
enum _TAG_UNNAMED_62;
enum _TAG_UNNAMED_63;
class XE_ErrorContext;
enum XeSqlPkg::module_start::CustomizableSlots;
enum DBSORTENUM;
struct IWbemShutdown;
enum tag_WBEM_CONDITION_FLAG_TYPE;
class AutoSpinlockHolder<321,1,1>;
class XE_AutoP<XEAction>;
enum tagOLERENDER;
enum _TAG_UNNAMED_64;
enum SOS_SYNC_WAIT_OPTIONS;
enum tagMKREDUCE;
enum _TAG_UNNAMED_65;
enum _tagINTERNETFEATURELIST;
struct XESessionNotificationPayload;
enum _TAG_UNNAMED_66;
enum _TAG_UNNAMED_67;
struct XE_TArray<XEDataAttribute,20>;
enum IMPORTANCE;
enum _TAG_UNNAMED_68;
struct _IMAGE_RESOURCE_DIRECTORY;
enum _TAG_UNNAMED_69;
struct _DOCINFOA;
enum __MIDL_IBindStatusCallback_0006;
enum XE_FormatMessageError;
class XE_AutoP<ColumnTransformRule>;
enum _TAG_UNNAMED_70;
enum _TAG_UNNAMED_71;
struct IXMLDOMParseError;
struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionWithActive;
enum _TAG_UNNAMED_72;
enum tag_WBEM_SECURITY_FLAGS;
enum _TAG_UNNAMED_73;
struct tagEMR;
struct _RECTL;
struct _POINTL;
struct tagEMRPOLYDRAW;
enum tagBINDSTRING;
struct _LUID;
struct _TOKEN_SOURCE;
struct _TOKEN_CONTROL;
enum _TAG_UNNAMED_74;
enum _TAG_UNNAMED_75;
enum _TAG_UNNAMED_76;
class XE_AutoRg<XMLActionTransformRule>;
enum _TAG_UNNAMED_77;
class CAutoP<XEPackage0::BucketizingTarget>;
enum tagLIBFLAGS;
struct XE_TArray<XEDataAttribute,13>;
struct XE_TEvent<4,0,13>;
class XeSqlPkg::latch_promoted;
enum _TAG_UNNAMED_78;
enum _TOKEN_INFORMATION_CLASS;
enum DispatcherConfigPoint;
enum _TAG_UNNAMED_79;
enum _RPC_HTTP_REDIRECTOR_STAGE;
enum PartitioningType;
struct tagRAWINPUTHEADER;
enum _TAG_UNNAMED_80;
struct _ZONEATTRIBUTES;
enum tagMKSYS;
struct IDropTarget;
struct QueryStorePlanCompAggSLock;
struct IMAGE_LOAD_CONFIG_DIRECTORY64;
enum XEObjectNameIndexes;
enum _TAG_UNNAMED_81;
struct tagIMEMENUITEMINFOW;
enum _TAG_UNNAMED_82;
enum SOS_EVENT_SIGNAL_OPTIONS;
struct std::is_error_code_enum<unsigned short const *>;
enum _TAG_UNNAMED_83;
struct _SID_IDENTIFIER_AUTHORITY;
struct _SID;
struct _FILE_GET_QUOTA_INFORMATION;
enum _TAG_UNNAMED_84;
enum _TAG_UNNAMED_85;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
enum _TAG_UNNAMED_86;
enum tagMSHCTX;
class CAutoP<XEPackage0::CounterTarget::PackageEntry>;
enum _TAG_UNNAMED_87;
enum tagCOINIT;
struct _SYSTEM_SYSTEM_DISK_INFORMATION;
enum _TAG_UNNAMED_88;
enum _TAG_UNNAMED_89;
enum SOS_Task::TASK_CALLBACK_TYPE;
enum _DEVICE_POWER_STATE;
enum _SYSTEM_POWER_STATE;
struct CM_Power_Data_s;
struct IWbemPropertyProvider;
enum XEEngineNotification;
struct tagCREATESTRUCTW;
enum _TAG_UNNAMED_90;
struct _CHAR_INFO;
struct tagEMRARC;
struct XEPredicateValueStream;
enum URL_SCHEME;
enum _TAG_UNNAMED_91;
struct IEnumVARIANT;
struct CXFrontendLookupTable<2,unsigned __int64,10240>::LookupEntry;
class CXFrontendLookupTable<2,unsigned __int64,10240>;
class CXLRUHashTable<2,unsigned __int64,65536>;
struct DictionaryStats;
class XE_CXRollingDictionary<2,unsigned __int64,10240,65536,1,1>;
enum _TAG_UNNAMED_92;
enum _TAG_UNNAMED_93;
enum XEMandatoryStaticAttributes_v0;
enum _TAG_UNNAMED_94;
enum tagURLTEMPLATE;
enum XEPackage0::BucketizingTarget::Source::Type;
struct XEPackage0::BucketizingTarget::Source;
class XE_AutoRg<XE_AutoP<XEPackage0::BucketizingTarget::Entry> >;
class XE_Auto;
class XEPackage0::BucketizingTarget;
enum XEErrorMinorCodes;
enum SOSHOST_TASK_FLAG;
struct _VIDEOPARAMETERS;
struct _IO_COMPLETION_BASIC_INFORMATION;
enum XeSqlPkg::promote_tran_starting::CustomizableSlots;
struct IWbemObjectAccess;
enum XELargeSessionBufferPolicy;
struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
enum XEWaitResult;
enum _TAG_UNNAMED_95;
enum _TAG_UNNAMED_96;
class XE_OneTimeInit;
class XE_XMLConfig;
enum _TAG_UNNAMED_97;
enum _TAG_UNNAMED_98;
enum _TAG_UNNAMED_99;
union _SLIST_HEADER;
enum UcsTrace::UCS_TRACE_FLAGS;
enum _JOBOBJECTINFOCLASS;
class XE_AutoRg<XMLEventTransformRule>;
struct XE_CXHistoryTargetConfig;
struct tagFORMATETC;
struct tagSTATDATA;
struct _SOSKSYSTEM_TIME;
enum XeSqlPkg::sp_cache_hit::CustomizableSlots;
enum _COMPUTER_NAME_FORMAT;
enum DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc::PageDescState;
struct _PROCESSOR_GROUP_INFO;
enum _TAG_UNNAMED_100;
struct SessionSLock;
struct ICreateTypeLib2;
enum tagPROPBAG2_TYPE;
class SpinlockHolder<26,19,1>;
struct _TP_POOL;
enum ASSOCSTR;
struct _API_SET_NAMESPACE_ENTRY;
class Spinlock<69,16,1>;
enum _TAG_UNNAMED_101;
enum _TAG_UNNAMED_102;
class CXBaseColumn;
enum TaskEnqueueOptions;
struct _nlsversioninfoex;
enum WORKER_CTRL_FLAGS;
struct IViewRowset;
enum _TAG_UNNAMED_103;
enum XeSqlPkg::BrokerAckType;
class SEListElem;
class ListBase;
class SEList<SOS_RingBuffer,0>;
enum _TAG_UNNAMED_104;
class XE_AutoP<XE_CXHistoryTargetConfig>;
enum tagVARFLAGS;
struct _LONG_SIZEDARR;
enum _TAG_UNNAMED_105;
struct SESList<XE_CompressionCache::MemBlock,0>;
class XE_AutoResource<void *,136>;
class XE_CompressionCache;
enum XEPackageCapabilities;
struct IPersistFile;
enum _TAG_UNNAMED_106;
enum _TAG_UNNAMED_107;
class SpinlockHolder<242,1,1>;
enum tag_WBEM_LOGIN_TYPE;
struct TListSLock;
class TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock>;
struct XE_TArray<XEDataAttribute,3>;
struct XE_TEvent<4,0,3>;
class XeCloudMinPkg::ping_send_complete;
enum XeSqlPkg::database_suspect_data_page::CustomizableSlots;
enum _TAG_UNNAMED_108;
enum _TAG_UNNAMED_109;
struct tagRemFORMATETC;
class SpinlockHolder<332,0,0>;
enum __MIDL_IBindStatusCallback_0002;
class Spinlock<249,1,1>;
struct _ACTRL_ACCESS_INFOA;
enum _TAG_UNNAMED_110;
enum _TAG_UNNAMED_111;
enum _TAG_UNNAMED_112;
enum _TAG_UNNAMED_113;
struct _tagStartParam;
enum _TAG_UNNAMED_114;
struct tagNEWTEXTMETRICA;
struct tagFONTSIGNATURE;
struct tagNEWTEXTMETRICEXA;
enum _TAG_UNNAMED_115;
enum tag_WMI_OBJ_TEXT;
enum _TAG_UNNAMED_116;
enum _TAG_UNNAMED_117;
enum _TAG_UNNAMED_118;
struct XcbSLock;
enum _SC_STATUS_TYPE;
enum tagQACONTAINERFLAGS;
enum _TAG_UNNAMED_119;
enum _TAG_UNNAMED_120;
enum _CM_SERVICE_NODE_TYPE;
struct _heapinfo;
enum _TAG_UNNAMED_121;
struct tagWNDCLASSEXA;
struct SEReplCheckpointQueuesSLock;
enum WbemAuthenticationLevelEnum;
enum _TAG_UNNAMED_122;
enum _TAG_UNNAMED_123;
enum _APTTYPE;
enum _CM_SERVICE_LOAD_TYPE;
enum _TAG_UNNAMED_124;
struct tagXFORM;
class XeSqlPkg::distribution_db_policy_change;
enum WbemChangeFlagEnum;
struct _SECTION_IMAGE_INFORMATION32;
enum _TAG_UNNAMED_125;
enum _THREAD_INFORMATION_CLASS;
class CAutoBase<ColumnTransformRule>;
enum _TAG_UNNAMED_126;
enum _TAG_UNNAMED_127;
struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionWithActive;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,4194304,16777216,4,0> >;
class TMemoryBlockAllocator<0,4194304,16777216,4,0>;
enum _SID_NAME_USE;
struct _SHARE_INFO_1501;
enum _TAG_UNNAMED_128;
enum tag_CIMTYPE_ENUMERATION;
struct IInternetThreadSwitch;
struct ITransaction2;
enum _TAG_UNNAMED_129;
enum _TAG_UNNAMED_130;
struct IExternalConnection;
enum tagFUNCFLAGS;
enum _TAG_UNNAMED_131;
struct __vc_attributes::importAttribute;
struct std::pair<XEPackage0::BucketizingTarget::Entry * *,XEPackage0::BucketizingTarget::Entry * *>;
enum tagOLEMISC;
enum tag_WBEM_COMPILER_OPTIONS;
enum _TAG_UNNAMED_132;
enum _TAG_UNNAMED_133;
enum _TAG_UNNAMED_134;
enum URL_PART;
struct tagRemHENHMETAFILE;
enum _TAG_UNNAMED_135;
enum tagGLOBALOPT_EH_VALUES;
enum _TAG_UNNAMED_136;
enum _TAG_UNNAMED_137;
struct __vc_attributes::bindableAttribute;
enum _TAG_UNNAMED_138;
enum ASSERTLEVEL;
enum tagSHCOLSTATE;
struct IRecordInfo;
enum _TAG_UNNAMED_139;
enum _TAG_UNNAMED_140;
struct IRpcChannelBuffer3;
enum tag_WBEM_UNSECAPP_FLAG_TYPE;
struct tagSIZE;
struct tagEMRFRAMERGN;
enum tagXMLEMEM_TYPE;
struct _EISA_IRQ_DESCRIPTOR;
enum _TAG_UNNAMED_141;
enum tagDVASPECT2;
enum _TAG_UNNAMED_142;
enum _TAG_UNNAMED_143;
struct IPropertyNotifySink;
enum tag_WBEM_GENERIC_FLAG_TYPE;
struct tagMULTIKEYHELPW;
enum _TAG_UNNAMED_144;
struct __vc_attributes::vi_progidAttribute;
class SEList<SOS_ParentBlockDescriptor,0>;
enum _tagPI_FLAGS;
enum IMPORT_OBJECT_NAME_TYPE;
class CAutoBase<ActionTransformRule>;
enum _TAG_UNNAMED_145;
struct POWER_ACTION_POLICY;
struct SYSTEM_POWER_LEVEL;
enum _TAG_UNNAMED_146;
enum _TAG_UNNAMED_147;
class XeSqlPkg::filegroup_name_change;
enum XLAT_SIDE;
enum _TAG_UNNAMED_148;
enum std::_Iosb<int>::_Fmtflags;
enum std::_Iosb<int>::_Iostate;
enum std::_Iosb<int>::_Openmode;
enum std::_Iosb<int>::_Seekdir;
class std::_Iosb<int>;
enum _TAG_UNNAMED_149;
struct XEStorageId;
enum _TAG_UNNAMED_150;
struct _UNLOAD_DLL_DEBUG_INFO;
enum _TAG_UNNAMED_151;
struct _IMAGE_FUNCTION_ENTRY;
enum XEHandleType;
struct _SMALL_RECT;
enum _TAG_UNNAMED_152;
struct __vc_attributes::helpstringdllAttribute;
class Spinlock<333,0,1>;
class CXFileReaderInterfaceFactory;
enum SchedulerManager::SCHEDTYPE;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::List;
struct _SYSTEMTIME;
struct _TIME_ZONE_INFORMATION;
struct _TRACE_LOGFILE_HEADER;
enum _TAG_UNNAMED_153;
enum _TRANSACTIONMANAGER_INFORMATION_CLASS;
struct IOleContainer;
enum _TAG_UNNAMED_154;
enum __MIDL_IBindStatusCallback_0003;
struct tagEXTLOGPEN32;
enum __enative_startup_state;
enum _TAG_UNNAMED_155;
enum _TAG_UNNAMED_156;
enum tagCOWAIT_FLAGS;
enum _AUDIT_EVENT_TYPE;
enum _TAG_UNNAMED_157;
class XE_ILogRWMessageHandler;
enum EVENT_STATE;
enum _TAG_UNNAMED_158;
struct _NDR_ASYNC_MESSAGE;
enum _TAG_UNNAMED_159;
struct _TRIVERTEX;
enum _TAG_UNNAMED_160;
enum tagDOMNodeType;
enum _TAG_UNNAMED_161;
enum _TAG_UNNAMED_162;
enum _TRANSACTION_INFORMATION_CLASS;
enum std::_Iosb<int>::_Dummy_enum;
enum _TAG_UNNAMED_163;
class CAutoRefc<IXMLDOMParseError>;
struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionWithoutActive;
enum tagCALLCONV;
struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionWithoutActive;
enum tagSTATFLAG;
struct XE_TArray<XEStaticAttribute,3>;
struct XE_TArray<XEDataAttribute,4>;
struct XE_TEvent<3,0,4>;
class XeCloudMinPkg::serepl_background_exception;
enum _TAG_UNNAMED_164;
enum _TAG_UNNAMED_165;
enum std::errc::errc;
enum _SC_ACTION_TYPE;
struct _SC_ACTION;
enum _TAG_UNNAMED_166;
struct XE_TArray<XEDataAttribute,9>;
struct XE_TEvent<4,1,9>;
class XeSqlPkg::file_read_throttled;
enum _TAG_UNNAMED_167;
enum _TAG_UNNAMED_168;
enum _TAG_UNNAMED_169;
class XE_Metadata;
enum _TAPE_DRIVE_PROBLEM_TYPE;
struct IClientSecurity;
enum _TAG_UNNAMED_170;
class SEList<PageHeapPageInfo,40>;
enum _ACTIVATION_CONTEXT_INFO_CLASS;
enum _TAG_UNNAMED_171;
struct _SYSTEM_POOL_ENTRY;
enum _TAG_UNNAMED_172;
struct BlockAllocPartialListSLock;
struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionBase;
enum __MIDL_ICodeInstall_0001;
enum __MIDL_IBindStatusCallback_0005;
struct _WNF_STATE_NAME;
struct _WNF_TYPE_ID;
struct _WNF_DELIVERY_DESCRIPTOR;
enum _TAG_UNNAMED_173;
class DmpPointer<SOS_Scheduler>;
enum _TAG_UNNAMED_174;
struct XE_TArray<XEDataAttribute,2>;
struct XE_TEvent<4,0,2>;
class XeSqlPkg::log_buffer_freed;
enum _TAG_UNNAMED_175;
class Spinlock<269,1,1>;
enum _TAG_UNNAMED_176;
enum _TAG_UNNAMED_177;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>;
enum tagPERCEIVED;
enum _TAG_UNNAMED_178;
enum _PROCESS_MITIGATION_POLICY;
enum XESessionBufferPolicy;
struct XEConfigMapping<enum XESessionBufferPolicy>;
enum _TAG_UNNAMED_179;
enum _TAG_UNNAMED_180;
class EventAutoInternal<SuspendQueueSLock>;
class SOS_UnfairMutexPair;
class SOS_WaitInfo;
class CMemThread<PageHeapMemObj>;
struct _DEVICE_FLAGS;
struct _CM_COMPONENT_INFORMATION;
enum _TAG_UNNAMED_181;
enum tagXFORMCOORDS;
enum _TAG_UNNAMED_182;
union _userHENHMETAFILE::__MIDL_IWinTypes_0006;
struct _userHENHMETAFILE;
enum _TAG_UNNAMED_183;
enum _TAG_UNNAMED_184;
class SEList<XE_IMetadata,32>;
class XE_MetadataStore;
struct _OLESTREAM;
struct IOleUndoManager;
enum _TAG_UNNAMED_185;
struct _ACL_SIZE_INFORMATION;
class CAutoBase<XE_XMLObjectString>;
enum _DEP_SYSTEM_POLICY_TYPE;
struct __vc_attributes::atl::aggregatesAttribute;
enum TimeUnit;
struct _M128A;
enum _TAG_UNNAMED_186;
enum XEDataAttributeCapabilities;
struct tagEMRPOLYPOLYLINE;
enum _TAG_UNNAMED_187;
enum _TAG_UNNAMED_188;
enum _TAG_UNNAMED_189;
struct IEnumSTATDATA;
enum XEMandatoryStaticAttributes;
struct IXMLDOMDocumentFragment;
enum _TAG_UNNAMED_190;
enum IExecSql::EParamInitAttributes;
struct XEMap;
struct XE_TMap<9>;
enum _TAG_UNNAMED_191;
enum _TAG_UNNAMED_192;
enum tagEOLE_AUTHENTICATION_CAPABILITIES;
enum _TAG_UNNAMED_193;
enum _TAG_UNNAMED_194;
struct __vc_attributes::entryAttribute;
enum _TAG_UNNAMED_195;
enum tagPROPPAGESTATUS;
enum _TAG_UNNAMED_196;
struct _SID_AND_ATTRIBUTES;
struct _TOKEN_MANDATORY_LABEL;
enum __MIDL_IBindStatusCallbackEx_0001;
class XeSqlPkg::security_authentication_perf_find_login;
enum _TAG_UNNAMED_197;
enum XeSqlPkg::sp_cache_remove::CustomizableSlots;
struct PPM_IDLE_STATE_ACCOUNTING;
enum _KTMOBJECT_TYPE;
enum _TAG_UNNAMED_198;
struct _LOCALGROUP_INFO_0;
enum _TAG_UNNAMED_199;
enum _TAG_UNNAMED_200;
enum _TAG_UNNAMED_201;
enum _TAG_UNNAMED_202;
enum _RTL_UMS_SCHEDULER_REASON;
enum _TAG_UNNAMED_203;
enum XE_XmlOptions;
struct XE_StandardFormatter::MapEntry;
class XE_StandardFormatter;
class XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig>;
class XE_ParserFactory<XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >;
class XE_AutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> >;
class XE_Xml<XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >;
enum SHREGENUM_FLAGS;
class XeSqlPkg::remote_dmv_stream_open_client;
enum _TAG_UNNAMED_204;
enum _TAG_UNNAMED_205;
struct tagBIND_OPTS3;
enum tagFUNCKIND;
enum tagINVOKEKIND;
struct tagFUNCDESC;
enum _TAG_UNNAMED_206;
struct IInternetSecurityMgrSite;
enum _SE_LEARNING_MODE_DATA_TYPE;
struct _BYTE_BLOB;
enum _TAG_UNNAMED_207;
struct __vc_attributes::caseAttribute;
enum tagSTRRET_TYPE;
enum _TAG_UNNAMED_208;
class CAutoP<XE_LoadedLibrary>;
enum _TAG_UNNAMED_209;
struct _OLESTREAMVTBL;
enum _TAG_UNNAMED_210;
enum _TAG_UNNAMED_211;
enum tagUASFLAGS;
enum _TAG_UNNAMED_212;
enum _TAG_UNNAMED_213;
enum _TAG_UNNAMED_214;
enum _TAG_UNNAMED_215;
struct tagRemSNB;
enum RESOBJECT_ACTION;
enum _TAG_UNNAMED_216;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<0>;
struct ICodeInstall;
enum tagCLSCTX;
struct tagEXTLOGFONTW;
struct __vc_attributes::emitidlAttribute;
class SEHashTableGrow<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>;
enum _TAG_UNNAMED_217;
class AutoSpinlockHolder<249,1,1>;
enum tagOLECLOSE;
enum cache_type;
class XeSqlPkg::exchange_spill;
enum _TAG_UNNAMED_218;
class SQLFatalHandlers;
enum _TAG_UNNAMED_219;
enum tagExtendedErrorParamTypes;
struct tagSTGMEDIUM;
enum __MIDL_IInternetZoneManager_0002;
struct IOleItemContainer;
enum _TAG_UNNAMED_220;
enum _TAG_UNNAMED_221;
class XeCloudMinPkg::warmup_partition;
enum _TAG_UNNAMED_222;
struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionWithoutActive;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,16384,524288,8,1> >;
class TMemoryBlockAllocator<0,16384,524288,8,1>;
enum _FINDEX_SEARCH_OPS;
class AutoSpinlockHolder<236,1,1>;
enum tagOLEDCFLAGS;
class XeCloudMinPkg::ping_dispatch_received;
enum _TAG_UNNAMED_223;
class AutoSpinlockHolder<178,3,1>;
enum _TAG_UNNAMED_224;
enum SQLDUMPER_ERRORS;
enum TCacheStore<CacheProbabilisticAlgorithm>::InsertOptions;
class Spinlock<318,1,1>;
enum _TAG_UNNAMED_225;
enum _TAG_UNNAMED_226;
struct HRSRC__;
enum _TAG_UNNAMED_227;
enum tagSYSKIND;
struct _KAFFINITY_EX;
enum _TAG_UNNAMED_228;
class AutoSpinlockHolder<274,4,1>;
enum _PROCESS_INFORMATION_CLASS;
enum _TAG_UNNAMED_229;
class SEList<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>,0>;
class XE_AutoP<TSinglyLinkedList<XE_ConfigCrc> >;
enum tagApplicationType;
struct IXMLDOMNodeList;
enum __MIDL_IAuthenticateEx_0001;
enum _TAG_UNNAMED_230;
enum _TAG_UNNAMED_231;
enum _TAG_UNNAMED_232;
class CAutoBase<XE_ConfigCrc>;
enum tag_WBEM_TIMEOUT_TYPE;
struct IWbemQualifierSet;
enum _TAG_UNNAMED_233;
struct _ldiv_t;
enum tagDESCKIND;
class SpinlockHolder<143,4,1>;
struct XPRESS9_DECODER_T;
enum tag_WBEM_REFRESHER_FLAGS;
struct XEAPI;
struct XEEngineClientAPI;
struct _USER_MODALS_INFO_1005;
enum _TAG_UNNAMED_234;
class ThreadScheduler;
enum tagPENDINGTYPE;
enum _TAG_UNNAMED_235;
struct tagHARDWAREINPUT;
enum _TAG_UNNAMED_236;
enum _MANDATORY_LEVEL;
enum tagCOINITBASE;
enum _TAG_UNNAMED_237;
enum _TAG_UNNAMED_238;
struct _HEAP_SUMMARY;
enum tag_WBEM_FLAVOR_TYPE;
enum _TAG_UNNAMED_239;
struct XE_LogDefaultMetadataHeader;
struct _HREGREADBATCHREPLY;
enum _TAG_UNNAMED_240;
enum XESessionFlags;
struct _SHITEMID;
struct _ITEMIDLIST;
class DmpPointer<_FIBER>;
enum _TAG_UNNAMED_241;
class XeSqlPkg::oledb_call;
enum tagPictureAttributes;
enum _TAG_UNNAMED_242;
enum _TAG_UNNAMED_243;
enum tag_WBEM_QUERY_FLAG_TYPE;
enum tagGLOBALOPT_PROPERTIES;
struct tagCOLORCORRECTPALETTE;
enum ESqlGlobalSKU;
enum LATENCY_TIME;
enum _TAG_UNNAMED_244;
enum _TAG_UNNAMED_245;
enum _TAG_UNNAMED_246;
class XE_AutoP<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > >;
enum __MIDL_IInternetSecurityManager_0002;
struct _FILE_COMPLETION_INFORMATION;
enum _TAG_UNNAMED_247;
enum _TAG_UNNAMED_248;
enum __MIDL_IBindStatusCallback_0004;
struct XEBufferHeader;
enum _TAG_UNNAMED_249;
enum _TAG_UNNAMED_250;
struct __vc_attributes::helper_attributes::v1_earlyAttribute;
enum STUB_PHASE;
enum _TAG_UNNAMED_251;
struct TClassName<unsigned short,1,0>;
enum _TAG_UNNAMED_252;
struct XE_TArray<XEDataAttribute,1>;
struct XE_TEvent<4,0,1>;
class XeSqlPkg::checkpoint_end;
enum IMPORT_OBJECT_TYPE;
enum _TAG_UNNAMED_253;
enum XEObjectStorageFlags;
struct _TRANSACTION_ENLISTMENT_PAIR;
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
struct _tagCODEBASEHOLD;
enum _TAG_UNNAMED_254;
struct tagRECT;
struct tagTITLEBARINFO;
enum _TAG_UNNAMED_255;
struct PROCESSOR_IDLESTATE_INFO;
enum _TAG_UNNAMED_256;
enum tag_WBEM_CHANGE_FLAG_TYPE;
enum _TAG_UNNAMED_257;
enum _TAG_UNNAMED_258;
enum tag_WBEM_INFORMATION_FLAG_TYPE;
enum XeSqlPkg::execution_warning::CustomizableSlots;
struct __vc_attributes::v1_enumAttribute;
enum _TRANSACTION_OUTCOME;
enum tagADVF;
enum _TAG_UNNAMED_259;
enum _TAG_UNNAMED_260;
enum XE_ConfiguredSession::XECreateSessionOptions;
struct _MOF_FIELD;
enum _TAG_UNNAMED_261;
class type_info;
struct IPropertyStorage;
struct IXMLDOMText;
enum _TAG_UNNAMED_262;
struct RPC_CLIENT_INFORMATION1;
enum tagSTGTY;
enum tagShutdownType;
struct _SYSTEM_CONSOLE_INFORMATION;
enum _TAG_UNNAMED_263;
enum __vc_attributes::helper_attributes::usageAttribute::usage_e;
enum tagDATADIR;
enum _TAG_UNNAMED_264;
enum _TAG_UNNAMED_265;
struct IPersistMoniker;
enum _TAG_UNNAMED_266;
enum _APTTYPEQUALIFIER;
class AutoSpinlockHolder<93,11,1>;
enum __vc_attributes::threadingAttribute::threading_e;
struct tagEMRROUNDRECT;
class XEPackage0::XE_LiveEncoder;
class XE_CompressionEncoder<XEPackage0::XE_LiveEncoder>;
class XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> >;
class XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > >;
enum _TAG_UNNAMED_267;
enum _PLUGPLAY_EVENT_CATEGORY;
enum _PNP_VETO_TYPE;
struct _PLUGPLAY_EVENT_BLOCK;
enum _TAG_UNNAMED_268;
enum _FINDEX_INFO_LEVELS;
struct StaticStorage<8>;
struct XBitmap<StaticStorage<8> >;
enum _TAG_UNNAMED_269;
struct __vc_attributes::importidlAttribute;
enum _TAG_UNNAMED_270;
struct XETicksConfig;
class XE_TicksUtil;
class AutoSpinlockHolder<170,3,1>;
enum tagTYMED;
enum XE_PublishedDescriptor::Flavor;
class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem> >;
enum _TAG_UNNAMED_271;
enum _SECURITY_IMPERSONATION_LEVEL;
enum _TAG_UNNAMED_272;
enum _TAG_UNNAMED_273;
enum _TAG_UNNAMED_274;
struct _WNODE_HEADER;
struct OFFSETINSTANCEDATAANDLENGTH;
struct tagWNODE_ALL_DATA;
class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,2>,1>;
enum tag_WBEM_EXTRA_RETURN_CODES;
struct _s__RTTIClassHierarchyDescriptor;
enum __vc_attributes::event_sourceAttribute::optimize_e;
struct _IMAGE_FILE_HEADER;
enum _TAG_UNNAMED_275;
enum _TAG_UNNAMED_276;
enum _TAG_UNNAMED_277;
enum _TAG_UNNAMED_278;
struct __vc_attributes::licensedAttribute;
enum _CM_ERROR_CONTROL_TYPE;
struct _IMAGE_THUNK_DATA64;
enum _TOKEN_ELEVATION_TYPE;
enum _TAG_UNNAMED_279;
enum _TAG_UNNAMED_280;
struct _IMAGE_IMPORT_DESCRIPTOR;
enum XE_FileProcessor::State;
class TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>;
class Spinlock<207,3,1>;
enum tagUSERCLASSTYPE;
enum tagSF_TYPE;
class XE_AutoP<XE_DeserializedMetadata>;
enum _TAG_UNNAMED_281;
enum _TAG_UNNAMED_282;
enum _TAG_UNNAMED_283;
enum _TAG_UNNAMED_284;
enum _TAG_UNNAMED_285;
enum _TAG_UNNAMED_286;
enum ASSOCKEY;
enum _TAG_UNNAMED_287;
enum XeSqlPkg::filestream_file_io_response::CustomizableSlots;
class BitEnum<unsigned int>;
enum _RESOURCEMANAGER_INFORMATION_CLASS;
class DmpPointer<SOS_WaitInfo>;
enum _TAG_UNNAMED_288;
enum __vc_attributes::aggregatableAttribute::type_e;
class XeSqlPkg::hadr_db_manager_test_point;
enum _TAG_UNNAMED_289;
enum tagSTGMOVE;
enum _TAG_UNNAMED_290;
class CAutoP<XEAction>;
enum WbemFlagEnum;
struct _SE_SECURITY_DESCRIPTOR;
enum XE_LogBufferType;
class XeSqlPkg::data_initialize_lock_request;
class MemObjCache<CMemDbg<CMemProc> >;
class DmpPointer<SEList<CFixedInfo,16> >;
enum XeSqlPkg::sql_batch_completed::CustomizableSlots;
enum _GET_FILEEX_INFO_LEVELS;
struct HRAWINPUT__;
struct XE_TArray<XEDataAttribute,6>;
struct XE_TEvent<3,0,6>;
class XeCloudMinPkg::perfobject_resource_pools;
enum _TAG_UNNAMED_291;
enum _TAG_UNNAMED_292;
class AutoSpinlockHolder<107,9,1>;
enum tagACTIVATEFLAGS;
enum _TAG_UNNAMED_293;
class Spinlock<222,2,1>;
enum XEObjectType;
enum _TAG_UNNAMED_294;
enum _TAG_UNNAMED_295;
enum _tagOIBDG_FLAGS;
enum _TAG_UNNAMED_296;
struct ANON_OBJECT_HEADER_BIGOBJ;
enum _TAG_UNNAMED_297;
struct tagPOINT;
struct tagDROPSTRUCT;
enum AllocatorType;
class CMemPartitioned<CMemThread<CMemDbg<CMemProc> > >;
enum XE_DecoderType;
class Spinlock<252,1,1>;
class DumpSEListIterator<SEList<SOS_RingBuffer,0>,512>;
enum _TAG_UNNAMED_298;
class SOS_CacheStoreBase::Statistic;
enum _TAG_UNNAMED_299;
struct IInternalUnknown;
enum _TAG_UNNAMED_300;
struct HDC__;
struct XE_TArray<XEDataAttribute,8>;
struct XE_TEvent<4,0,8>;
class XeSqlPkg::hadr_dump_vlf_header;
enum _TP_CALLBACK_PRIORITY;
struct _FILE_QUOTA_INFORMATION;
enum _TAG_UNNAMED_301;
enum WbemConnectOptionsEnum;
enum _TAG_UNNAMED_302;
enum _ALPC_MESSAGE_INFORMATION_CLASS;
enum _TAG_UNNAMED_303;
enum _TAG_UNNAMED_304;
enum _TAG_UNNAMED_305;
class Spinlock<23,19,1>;
enum tagURLZONE;
enum XESessionLocality;
struct tagHIGHCONTRASTW;
enum _TAG_UNNAMED_306;
enum _TAG_UNNAMED_307;
enum _TAG_UNNAMED_308;
enum XeSqlPkg::preconnect_completed::CustomizableSlots;
struct IWinInetHttpTimeouts;
enum tagDVASPECT;
struct __vc_attributes::switch_isAttribute;
enum POWER_USER_PRESENCE_TYPE;
enum _TAG_UNNAMED_309;
enum _TAG_UNNAMED_310;
enum _RPC_ASYNC_EVENT;
enum _TAG_UNNAMED_311;
struct __m256d;
enum _TAG_UNNAMED_312;
enum tagTYSPEC;
class AutoSpinlockHolder<19,19,1>;
enum tagREADYSTATE;
enum _TAG_UNNAMED_313;
enum _TAG_UNNAMED_314;
enum tag_WBEM_LIMITS;
class XE_AutoRg<XEPackage0::OrphanEntry>;
class XEPackage0::OrphanTempStorage;
enum _RTL_UMS_THREAD_INFO_CLASS;
struct XE_TArray<XEDataAttribute,18>;
struct XE_TEvent<4,2,18>;
class XeSqlPkg::lock_escalation;
enum _TAG_UNNAMED_315;
enum _TAG_UNNAMED_316;
struct HCOLORSPACE__;
struct StaticStorage<16>;
struct XBitmap<StaticStorage<16> >;
class XEPackage0::XE_ETWBufferDispenser;
enum _POWER_PLATFORM_ROLE;
enum _ACCESS_REASON_TYPE;
enum _TAG_UNNAMED_317;
enum tagLOCKTYPE;
struct XE_TEvent<4,0,4>;
class XeSqlPkg::db_lock_released_from_cache;
enum _TAG_UNNAMED_318;
enum _TAG_UNNAMED_319;
struct IWbemConfigureRefresher;
enum _TAG_UNNAMED_320;
enum PIDMSI_STATUS_VALUE;
enum __MIDL_IMonikerProp_0001;
class XE_AutoP<XE_PackageFilter>;
enum _TAG_UNNAMED_321;
struct tagALTTABINFO;
enum _TAG_UNNAMED_322;
struct AsyncIAdviseSink2;
enum _USER_MARSHAL_CB_TYPE;
enum _TAG_UNNAMED_323;
enum _TAG_UNNAMED_324;
enum _TAG_UNNAMED_325;
enum tag_WBEM_PROVIDER_REQUIREMENTS_TYPE;
struct _TypeDescriptor;
enum _TAG_UNNAMED_326;
struct XMLDOMDocumentEvents;
class TMemoryWorkSpace<0,8>;
enum XEObjectCapabilities;
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
class SpinlockHolder<5,19,1>;
enum SYSGEOCLASS;
struct _WKSTA_INFO_1044;
enum _TAG_UNNAMED_327;
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
enum tagCOMSD;
class CAutoBase<XE_FileReaderDefaultPolicy>;
enum _TAG_UNNAMED_328;
enum _TAG_UNNAMED_329;
enum _TAG_UNNAMED_330;
class TMemoryBlockAllocatorFinalizer<0>::AllocatorHierarchy;
class TMemoryBlockAllocatorFinalizer<0>;
enum tagGLOBALOPT_RPCTP_VALUES;
struct XE_TArray<XEDataAttribute,12>;
struct XE_TEvent<4,0,12>;
class XeCloudMinPkg::remove_secondary;
enum _TAG_UNNAMED_331;
enum _TAG_UNNAMED_332;
struct IVariantChangeType;
enum _TAG_UNNAMED_333;
enum XEPredicateNodeType;
enum _TAG_UNNAMED_334;
struct IStdMarshalInfo;
enum _WNF_STATE_NAME_INFORMATION;
class AutoSpinlockHolder<242,1,1>;
enum tagGLOBALOPT_RO_FLAGS;
class SOS_InterlockedList<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc,16>;
struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::FragmentDesc;
class PerCPUData<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition>;
struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::NodePartition;
class DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>;
class SOS_InterlockedList<SOS_TopLevelBlockDescriptor,0>;
class SOS_RecursiveMutex;
class SOS_MemoryTopLevelBlockAllocator;
class Spinlock<287,1,1>;
class CAutoP<XE_CXHistoryTargetConfig>;
enum RPC_ADDRESS_CHANGE_TYPE;
enum _TAG_UNNAMED_335;
struct _EVENTLOGRECORD;
struct _EVENTSFORLOGFILE;
enum _TAG_UNNAMED_336;
enum _TAG_UNNAMED_337;
enum _TAG_UNNAMED_338;
class XE_ResolvedObjectXML<XETarget>;
enum _LOGICAL_PROCESSOR_RELATIONSHIP;
enum EPageType;
class TVarPageMgr<1>;
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
enum XETypeCapabilities;
enum _TAG_UNNAMED_339;
enum _TAG_UNNAMED_340;
struct _OVERLAPPED;
struct CXFilePage;
enum SCHED_STATE;
struct ISWbemPrivilegeSet;
enum CWMO_FLAGS;
struct XE_TArray<XEDataAttribute,22>;
class PerCPUDataBase<SOS_MemoryWorkSpace::WSCpuPart>::Enum;
struct _SERVER_INFO_1524;
enum _TAG_UNNAMED_341;
enum _TAG_UNNAMED_342;
struct AsyncIPipeLong;
enum XEMapCapabilities;
enum _TAG_UNNAMED_343;
struct IParseDisplayName;
enum SOS_CALLRESULT_TYPE;
enum _TAG_UNNAMED_344;
enum _TAG_UNNAMED_345;
enum _TAG_UNNAMED_346;
enum tagCHANGEKIND;
struct XEObjectCollection;
struct XE_TArray<XETarget *,8>;
struct XE_TObjects<XETarget,8>;
enum _TAG_UNNAMED_347;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<3>;
enum _TAG_UNNAMED_348;
enum __MIDL_IBindStatusCallback_0001;
enum _TAG_UNNAMED_349;
enum _TAG_UNNAMED_350;
struct XE_TEvent<4,1,13>;
class XeSqlPkg::auto_stats;
enum SPINLOCK_TYPE;
enum _TAG_UNNAMED_351;
enum SYM_TYPE;
struct tagPROCESSENTRY32;
class SEListEnum<IORGHashTableEntry,248>;
enum RWLockMode;
struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
enum _TAG_UNNAMED_352;
enum _TAG_UNNAMED_353;
enum _TAG_UNNAMED_354;
enum _TAG_UNNAMED_355;
struct XEPackage0::GetLastErrorAction;
enum tag_WBEM_SHUTDOWN_FLAGS;
struct tagGCP_RESULTSW;
enum _TAG_UNNAMED_356;
struct tagLAYERPLANEDESCRIPTOR;
enum TASK_LOAD_TYPE;
struct XEParameter;
struct XELogMessage;
class XE_LogMessage;
enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
struct _QUERY_SERVICE_CONFIGW;
enum _TAG_UNNAMED_357;
class XeSqlPkg::fulltext_test_access_point;
enum tagBINDSPEED;
class BitEnum<unsigned __int64>;
class SystemAffinityEnum;
enum _TAG_UNNAMED_358;
enum _TAG_UNNAMED_359;
struct _MEMORYSTATUSEX;
enum _TAG_UNNAMED_360;
struct ISynchronizeEvent;
enum _TAG_UNNAMED_361;
struct _RTL_MODULE_BASIC_INFO;
struct _RTL_MODULE_EXTENDED_INFO;
enum _TAG_UNNAMED_362;
class XE_AutoP<XEPackage0::XE_LiveTarget>;
enum _TAG_UNNAMED_363;
enum _USER_ACTIVITY_PRESENCE;
enum _TAG_UNNAMED_364;
enum TASK_FLAGS;
class Spinlock<96,11,1>;
enum XEThreadType;
struct _TP_CALLBACK_INSTANCE;
enum tag_WBEM_PROVIDER_FLAGS;
enum std::io_errc::io_errc;
union _userHPALETTE::__MIDL_IWinTypes_0008;
enum _TAG_UNNAMED_365;
enum _TAG_UNNAMED_366;
class XE_AutoP<XE_LogDeserializedPackage>;
enum _TAG_UNNAMED_367;
struct tagCHARSETINFO;
enum tag_WBEM_LOCKING;
enum _TAG_UNNAMED_368;
enum _TAG_UNNAMED_369;
struct IUrlMon;
enum tagSTDMSHLFLAGS;
struct _GENERIC_MAPPING;
struct _SYSTEM_OBJECTTYPE_INFORMATION;
enum WakeUpReason;
struct XE_TArray<XEDataAttribute,15>;
struct XE_TEvent<4,0,15>;
class XeSqlPkg::hobt_schema_mgr_allocation_unit;
enum _TAG_UNNAMED_370;
enum _TAG_UNNAMED_371;
struct _PROCESS_MITIGATION_ASLR_POLICY;
enum tagOLEWHICHMK;
enum _TAG_UNNAMED_372;
enum _TAG_UNNAMED_373;
enum tag_WBEM_STATUS_TYPE;
enum _TAG_UNNAMED_374;
struct _COORD;
struct _CONSOLE_SELECTION_INFO;
enum TraceFlagsSizes;
struct tagPALETTEENTRY;
enum _TAG_UNNAMED_375;
struct tagLASTINPUTINFO;
class XE_StreamCompare<char,XEPackage0::StringCompare<char,2>,1>;
enum _TAG_UNNAMED_376;
enum XEGetAPIOption;
struct std::_Pair_base<unsigned __int64 *,unsigned __int64 *>;
struct _M128;
struct tagSOUNDSENTRYW;
enum MemoryWorkSpaces;
struct SOS_MemoryManager::AddressInfo;
enum XEEngineCustomizationFlags;
struct XE_TArray<XEDataAttribute,16>;
struct XE_TEvent<4,2,16>;
class XeSqlPkg::lock_redo_blocked;
enum _TAG_UNNAMED_377;
enum SchedEnumType;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;
enum _TAG_UNNAMED_378;
enum _TAG_UNNAMED_379;
enum _TAG_UNNAMED_380;
struct tagEMRGRADIENTFILL;
enum tagRPCOPT_PROPERTIES;
class XE_MetadataFilter;
class XE_SessionMetadata;
class XE_MetadataTracker;
class XEPackage0::XE_FileTarget;
enum _EXCEPTION_DISPOSITION;
struct XE_TArray<XEDataAttribute,5>;
struct XE_TEvent<4,0,5>;
class XeSqlPkg::ioaff_scan_start;
struct tagEXTLOGPEN;
enum _TAG_UNNAMED_381;
struct tagHANDLETABLE;
enum WORKER_TYPE;
enum _TAG_UNNAMED_382;
enum _TAG_UNNAMED_383;
enum _TAG_UNNAMED_384;
class Spinlock<136,4,1>;
enum tag_WBEM_BATCH_TYPE;
struct _IMAGE_THUNK_DATA32;
enum _TAG_UNNAMED_385;
struct IWbemDecoupledBasicEventProvider;
enum SOSHOST_IOCHECK;
struct IAsyncManager;
enum CallStackHashTable::StackHashPersistMode;
class CallStackHashTable;
enum XEGetAPIResult;
enum tagSTREAM_SEEK;
class AESCheck;
enum _TAG_UNNAMED_386;
struct _SERVICE_RUNLEVEL_INFO;
enum _TAG_UNNAMED_387;
struct tagUPDATELAYEREDWINDOWINFO;
enum _TAG_UNNAMED_388;
enum _TAG_UNNAMED_389;
enum _TAG_UNNAMED_390;
struct AsyncIMultiQI;
enum _TAG_UNNAMED_391;
enum WbemTextFlagEnum;
enum tagCALLTYPE;
enum _TAG_UNNAMED_392;
enum SOSHOST_CAPABILITIES;
enum _STREAM_INFO_LEVELS;
enum _tagPSUACTION;
struct _ACE_HEADER;
struct _SYSTEM_SCOPED_POLICY_ID_ACE;
class DumpTListIterator<PoolList,512>;
enum _TAG_UNNAMED_393;
class MemObjCache<CMemObj>;
enum SOS_WaitInfo::Reporting;
class XeSqlPkg::process_invalidate_cache_logrec;
enum DBEVENTPHASEENUM;
struct _FILE_INTEGRITY_STREAM_INFORMATION;
enum _TAG_UNNAMED_394;
class DumpSEListIterator<SEList<SOS_ResourcePool,0>,512>;
enum XeSqlPkg::scan_started::CustomizableSlots;
class CAutoRefc<IXMLDOMNamedNodeMap>;
enum _ENLISTMENT_INFORMATION_CLASS;
struct ITypeComp;
struct SEReplCSNSLock;
enum tagOLEGETMONIKER;
struct TFormatterTypesPolicy<CMemBufFormatter>;
enum _TAG_UNNAMED_395;
enum _TAG_UNNAMED_396;
struct std::pair<XE_FileSet::Entry *,XE_FileSet::Entry *>;
enum tagOLEVERBATTRIB;
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
enum ACTCTX_REQUESTED_RUN_LEVEL;
enum _TAG_UNNAMED_397;
enum _TAG_UNNAMED_398;
enum _TAG_UNNAMED_399;
enum _HARDWARE_COUNTER_TYPE;
class MemObjCache<CMemDbg<CMemObj> >;
enum WORKER_STATE;
struct IGetRow;
enum XeSqlPkg::query_post_execution_showplan::CustomizableSlots;
class Spinlock<15,19,1>;
struct IAuthenticate;
enum _JOURNAL_CHANGE_INFORMATION_CLASS;
struct _JOURNAL_RENAME_KEY_INFORMATION;
enum _TAG_UNNAMED_400;
enum _TAG_UNNAMED_401;
struct tagACCEL;
class XeSqlPkg::broker_conversation_group;
enum tagExtentMode;
enum _TAG_UNNAMED_402;
class XE_ResolvedObject<XEEvent>;
enum tagREGKIND;
enum _TAG_UNNAMED_403;
enum _TAG_UNNAMED_404;
enum SOS_WaitInfo::Group;
class TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
enum tagOLECONTF;
enum _TAG_UNNAMED_405;
class XE_AutoRg<XE_FileSet::Entry>;
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE;
struct HMETAFILE__;
enum _TAG_UNNAMED_406;
enum _TAG_UNNAMED_407;
enum OSF_Tracing::OSF_TRACE_FLAGS;
enum XEEventCapabilities;
struct tagAXISINFOA;
struct XEErrorContext;
class XE_AutoErrorContext;
enum tagCTRLINFO;
enum _THDTYPE;
struct _SE_LEARNING_MODE_USER_OBJECT_DATA;
enum _TAG_UNNAMED_408;
struct _PDH_RAW_COUNTER;
struct _IMAGE_SECTION_HEADER;
enum tagVIEWSTATUS;
struct tagRemHMETAFILEPICT;
enum _TAG_UNNAMED_409;
enum XETargetCapabilities;
enum _TAG_UNNAMED_410;
struct _MIDL_SERVER_INFO_;
enum tag_WBEM_LIMITATION_FLAG_TYPE;
struct tagLOGFONTA;
struct TransmitterConnectSLock;
enum DBPOSITIONFLAGSENUM;
struct ISWbemEventSource;
enum _TAG_UNNAMED_411;
enum _HEAP_INFORMATION_CLASS;
enum _TAG_UNNAMED_412;
class SpinlockHolder<198,3,1>;
enum tag_WBEM_BACKUP_RESTORE_FLAGS;
enum _TAG_UNNAMED_413;
struct tagEMRTEXT;
enum _TAG_UNNAMED_414;
enum tag_WBEM_CONNECT_OPTIONS;
enum XEBufferPartitionOption;
struct _ACCESS_REASONS;
class PackageProperty;
class XEPackage0::XE_ETWTarget;
enum tagEXTCONN;
enum _TAG_UNNAMED_415;
struct tagBSTRBLOB;
enum _POWER_REQUEST_TYPE;
struct threadmbcinfostruct;
enum _TAG_UNNAMED_416;
class std::numeric_limits<char>;
struct tagBLOB;
struct XEPackage0::DividesByPredicateComparator;
enum tagAspectInfoFlag;
struct XE_TArray<XEDataAttribute,11>;
struct XE_TEvent<4,0,11>;
class XeSqlPkg::hadr_transport_dump_message;
enum _TAG_UNNAMED_417;
enum _TAG_UNNAMED_418;
class XE_StreamReader;
enum tagREGCLS;
struct _PROCESSOR_POWER_POLICY_INFO;
enum FILEITEM_CREATION_FLAGS;
enum _TAG_UNNAMED_419;
struct _MENU_EVENT_RECORD;
enum tag_WBEM_COMPARISON_FLAG;
struct _LUID_AND_ATTRIBUTES;
struct _PRIVILEGE_SET;
class TTemplateInfo<2400,1024>;
enum _TAG_UNNAMED_420;
enum _TAG_UNNAMED_421;
enum _RPC_NOTIFICATION_TYPES;
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE;
enum CSerializeContext<CMemBufFormatter>::EMBEDDED_MODES;
enum _TAG_UNNAMED_422;
enum SYSNLS_FUNCTION;
struct IMalloc;
enum IMAGE_AUX_SYMBOL_TYPE;
enum _TAG_UNNAMED_423;
enum _FIRMWARE_TYPE;
enum _TAG_UNNAMED_424;
struct tagEMRSTRETCHDIBITS;
enum _TAG_UNNAMED_425;
struct ISWbemQualifierSet;
enum _TAG_UNNAMED_426;
enum tagRPCOPT_SERVER_LOCALITY_VALUES;
struct _PROCESSOR_POWER_POLICY;
enum tag_WBEM_GENUS_TYPE;
struct tagCAC;
struct IMAGE_AUX_SYMBOL_TOKEN_DEF;
union _IMAGE_AUX_SYMBOL_EX;
enum _TAG_UNNAMED_427;
enum _TAG_UNNAMED_428;
class DmpPointer<TList<SchedulerManager,Worker,16,TListSLock> >;
enum _TAG_UNNAMED_429;
enum _TAG_UNNAMED_430;
struct tagACTCTX_SECTION_KEYED_DATA_2600;
enum _ACL_INFORMATION_CLASS;
struct _RTL_CONDITION_VARIABLE;
class FiberScheduler;
enum XEPredicateResult;
enum _TAG_UNNAMED_431;
struct BitOrdinal<1>;
enum _TAG_UNNAMED_432;
enum tagSERVERCALL;
struct IWbemObjectSink;
enum _MONITOR_DISPLAY_STATE;
enum _TAG_UNNAMED_433;
struct SC_HANDLE__;
class ExtIntCodeProtector<0>;
enum WbemQueryFlagEnum;
enum _TAG_UNNAMED_434;
enum CGlobalTraceFlags::FlagKind;
enum _TAG_UNNAMED_435;
struct tagAXISINFOW;
enum _TAG_UNNAMED_436;
enum tagBIND_FLAGS;
class TCallbackListBase<TCallback<void,SOS_Task *,NullType,NullType,NullType> >;
struct IClassFactory2;
enum tagOLEUPDATE;
enum _TAG_UNNAMED_437;
enum XEPredicateSourceCapabilities;
enum tagGUIDKIND;
enum _TAG_UNNAMED_438;
enum _TAG_UNNAMED_439;
enum CLUSTER_CONTROL_OBJECT;
enum _TAG_UNNAMED_440;
class Spinlock<226,2,1>;
struct IOleInPlaceUIWindow;
enum WbemTimeout;
struct tagTYPEATTR;
enum _TAG_UNNAMED_441;
enum _TOKEN_TYPE;
enum XeSqlPkg::rpc_completed::CustomizableSlots;
class XE_AutoRg<XMLColumnTransformRule>;
enum _TAG_UNNAMED_442;
class XeSqlPkg::query_scan_cache;
enum tag_WBEM_TEXT_FLAG_TYPE;
struct _FILE_PIPE_LOCAL_INFORMATION;
enum _TAG_UNNAMED_443;
class StreamCDATAReader<unsigned short,XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >;
class ReturnValueHolder<long>;
enum tagOLELINKBIND;
enum CLUSTER_RESOURCE_TYPE_ENUM;
struct XE_TCollection<1,0>::TCol<0>;
struct tagMOUSEINPUT;
struct tagKEYBDINPUT;
struct tagINPUT;
enum __MIDL_IInternetSecurityManager_0003;
enum _TAG_UNNAMED_444;
enum _TAG_UNNAMED_445;
struct IOleParentUndoUnit;
enum WbemObjectTextFormatEnum;
struct tagEXTLOGFONTA;
enum CLCTL_CODES;
enum _TAG_UNNAMED_446;
enum _TAG_UNNAMED_447;
enum _URLZONEREG;
enum _TAG_UNNAMED_448;
struct _DRAWPATRECT;
enum tagDCOM_CALL_STATE;
enum _TAG_UNNAMED_449;
enum _TAG_UNNAMED_450;
enum DkParameterMatchResult;
struct _SERVER_INFO_1599;
enum __MIDL_IInternetZoneManager_0001;
struct _SERVICE_TABLE_ENTRYA;
enum PIPE_ATTRIBUTE_TYPE;
struct tagLC_ID;
struct threadlocaleinfostruct;
class DumpTListIterator<SchedulerManagerList,512>;
enum DkParameterFlags;
class XeSqlPkg::change_based_metadata_cache_refresh;
enum _TAG_UNNAMED_451;
enum tagPENDINGMSG;
struct _QUERY_SERVICE_LOCK_STATUSW;
struct _SERVICE_DESCRIPTIONA;
enum tag_WBEMSTATUS_FORMAT;
struct IDataAdviseHolder;
enum SOS_MemoryBlockAllocator::PartitionMode;
enum _TAG_UNNAMED_452;
enum _TAG_UNNAMED_453;
class CAutoP<unsigned short>;
enum tagMEMCTX;
struct _ADMINISTRATOR_POWER_POLICY;
enum _TRANSACTION_STATE;
enum _TAG_UNNAMED_454;
enum _TAG_UNNAMED_455;
struct BATTERY_REPORTING_SCALE;
enum CLUSTER_NODE_ENUM;
struct _POINTFLOAT;
struct _GLYPHMETRICSFLOAT;
struct XEActionDataDescriptor_v0;
enum tagDISCARDCACHE;
class XE_BufferWalker<XE_LiveSessionMetadata>;
enum _TAG_UNNAMED_456;
enum _SC_ENUM_TYPE;
struct _TEB_ACTIVE_FRAME_CONTEXT;
enum _TAG_UNNAMED_457;
enum _TAG_UNNAMED_458;
struct _SERVICE_DESCRIPTIONW;
enum XeSqlPkg::file_read::CustomizableSlots;
enum SOS_LargeCacheStore::test_configuration_enum;
struct tagSTATPROPSTG;
enum tagPOINTERINACTIVE;
union _RemotableHandle::__MIDL_IWinTypes_0009;
enum ASSOCENUM;
enum _TAG_UNNAMED_459;
struct XE_LogDefaultMetadataPackageHeader;
struct XEPackageMetadata;
class SEList<XE_LogDeserializedPackage::Chunk,0>;
class XE_LogDeserializedPackage;
enum _TAG_UNNAMED_460;
enum XEventAutoEngineLoad::InitFailureReasons;
enum XE_BaseAllocator::Component;
enum _TAG_UNNAMED_461;
enum _TAG_UNNAMED_462;
struct IWbemClassObject;
enum _IRQ_DEVICE_POLICY;
enum _IRQ_PRIORITY;
class XeSqlPkg::hadr_db_manager_db_restart;
enum _TAG_UNNAMED_463;
enum _TAG_UNNAMED_464;
struct ISWbemObjectPath;
enum __vc_attributes::pointer_defaultAttribute::type_e;
struct IXMLDOMNode;
struct XE_TArray<XEAction *,11>;
struct XE_TObjects<XEAction,11>;
enum SOS_MemoryBlockAllocator::FromWhere;
struct _PROCESS_EXCEPTION_PORT;
enum _TAG_UNNAMED_465;
enum _TAG_UNNAMED_466;
struct tagGUITHREADINFO;
enum __vc_attributes::event_receiverAttribute::type_e;
class Spinlock<169,3,1>;
enum _TAG_UNNAMED_467;
enum _CLUSTER_SETUP_PHASE_TYPE;
struct _MIDL_STUBLESS_PROXY_INFO;
enum _TAG_UNNAMED_468;
enum OomFactor;
class CAutoRg<XE_FileSet::Entry>;
enum __vc_attributes::event_sourceAttribute::type_e;
struct tagCWPRETSTRUCT;
enum _TAG_UNNAMED_469;
struct IOleInPlaceSiteWindowless;
enum _TAG_UNNAMED_470;
enum _TAG_UNNAMED_471;
enum _TAG_UNNAMED_472;
enum __vc_attributes::moduleAttribute::type_e;
struct _COMPATIBILITY_CONTEXT_ELEMENT;
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
enum _TAG_UNNAMED_473;
struct _RGNDATAHEADER;
struct _RGNDATA;
enum _TAG_UNNAMED_474;
enum _TAG_UNNAMED_475;
class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc,16>;
struct tagTHREADENTRY32;
struct IOleControlSite;
class std::collate<char>;
struct ISWbemDateTime;
enum _TAG_UNNAMED_476;
class TCounter<__int64>;
struct _SHARE_INFO_503;
enum NoExceptionPmoAllocator::Component;
struct _CLUSTER_VALIDATE_NETNAME;
enum _TAG_UNNAMED_477;
class XE_AutoRg<XEPackage0::BucketizingTarget::Entry *>;
enum _TAG_UNNAMED_478;
class SystemAffinity;
enum _TAG_UNNAMED_479;
class CXFileReaderInterface;
enum XE_FilePositionDisposition;
struct _SERVICE_FAILURE_ACTIONSW;
class MethodCallBinder_0<void,ISOSHost_RWLockImpl,void (__cdecl ISOSHost_RWLockImpl::*)(void)>;
enum DeserializePackageAddResult;
struct _SYSTEM_SESSION_POOLTAG_INFORMATION;
enum _TAG_UNNAMED_480;
enum _TAG_UNNAMED_481;
struct tagLOGBRUSH;
enum _TAG_UNNAMED_482;
struct tagDRAWTEXTPARAMS;
enum _TAG_UNNAMED_483;
enum _TAG_UNNAMED_484;
enum _TAG_UNNAMED_485;
struct CLUSPROP_SZ;
struct CLUSPROP_LIST;
enum XeCloudMinPkg::async_transport_message_content::CustomizableSlots;
class MemObjCache<CMemThread<CMemProc> >;
enum _TAG_UNNAMED_486;
enum _TAG_UNNAMED_487;
enum XE_BufferMap::SortOptions;
enum _TAG_UNNAMED_488;
enum std::pointer_safety::pointer_safety;
enum _TAG_UNNAMED_489;
struct ISimpleFrameSite;
enum std::float_round_style;
struct IBindStatusCallbackEx;
enum _TAG_UNNAMED_490;
struct IWbemProviderIdentity;
class MemObjCache<CMemProc>;
enum std::float_denorm_style;
enum _TAG_UNNAMED_491;
enum _TAG_UNNAMED_492;
enum _TAG_UNNAMED_493;
enum _TAG_UNNAMED_494;
enum _TAG_UNNAMED_495;
struct XE_TEvent<3,0,2>;
class XeSqlPkg::sql_exit_invoked;
enum _TAG_UNNAMED_496;
struct IDBDataSourceAdmin;
enum _TAG_UNNAMED_497;
enum std::_Uninitialized;
class TypeListNode<NullType,NullType>;
enum _TAG_UNNAMED_498;
enum _TAG_UNNAMED_499;
class CAutoRefc<ResourceClerk>;
enum _TAG_UNNAMED_500;
struct _TRIPLE_LIST_ENTRY;
enum _TAG_UNNAMED_501;
enum _TAG_UNNAMED_502;
enum _TAG_UNNAMED_503;
enum _TAG_UNNAMED_504;
struct ICatalogFileInfo;
enum _TAG_UNNAMED_505;
union _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
enum _TAG_UNNAMED_506;
enum _WOW64_FUNCTION_CODE64;
enum _TAG_UNNAMED_507;
struct ISWbemServices;
union _RPC_ASYNC_NOTIFICATION_INFO;
enum _TAG_UNNAMED_508;
enum EX_ORIGINS;
enum _TAG_UNNAMED_509;
enum _TAG_UNNAMED_510;
struct _REMSECURITY_ATTRIBUTES;
struct _tagRemBINDINFO;
struct XESessionContextRecord;
enum DictionaryType;
enum TransformRuleTitle;
enum _TAG_UNNAMED_511;
enum XeSqlPkg::feature_extension::CustomizableSlots;
enum _SCHEMAPROCESSCONTENTS;
enum _SCHEMACONTENTTYPE;
struct _SERVER_INFO_1018;
enum _TAG_UNNAMED_512;
enum _SCHEMAUSE;
enum _TAG_UNNAMED_513;
enum MCA_EXCEPTION_TYPE;
enum _SXH_SERVER_CERT_OPTION;
struct tagEMRSELECTPALETTE;
enum _TAG_UNNAMED_514;
struct _WIN32_STREAM_ID;
enum _SERVERXMLHTTP_OPTION;
enum PWAIT_indexes;
struct XE_TEvent<4,1,11>;
enum _TAG_UNNAMED_515;
struct IWbemObjectTextSrc;
enum _TAG_UNNAMED_516;
union _RTL_RUN_ONCE;
enum SOSHOST_MEMORYCLERK_TYPE;
union _GDI_OBJECT::__MIDL_IAdviseSink_0002;
struct _GDI_OBJECT;
enum _TAG_UNNAMED_517;
enum WORKER_STATUS;
enum _TAG_UNNAMED_518;
enum SOS_ERROR_CODES;
struct CLUSPROP_DWORD;
enum _TAG_UNNAMED_519;
enum _TAG_UNNAMED_520;
enum _TAG_UNNAMED_521;
enum SOSHOST_MEMOBJCAPABILITIES;
enum _TAG_UNNAMED_522;
struct ISWbemPrivilege;
enum StackDumpOptions;
enum _TAG_UNNAMED_523;
class CAutoBase<XE_FileProcessor>;
class TEnumerator<TList<GroupList,SOS_ResourceGroup,16,TListSLock> >;
enum SOS_QUEUE_PLACE;
enum SOS_OS::enum_debugflags;
class XeSqlPkg::collect_all_Init;
enum _TAG_UNNAMED_524;
class TTemplateInfo<1333,1024>;
enum _TAG_UNNAMED_525;
enum _TAG_UNNAMED_526;
struct tagMENUINFO;
enum OOM_EXCEPTIONS;
struct _HNODE;
enum _TAG_UNNAMED_527;
class SEListEnum<XListEnumerator<SOS_DispatcherBase>,0>;
enum _TAG_UNNAMED_528;
enum _TAG_UNNAMED_529;
enum ResourceMonitor::notification_states;
class UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >;
enum entry_state;
enum _TAG_UNNAMED_530;
enum MemoryBrokerType;
enum _TAG_UNNAMED_531;
enum _TAG_UNNAMED_532;
struct IViewObjectEx;
struct IInternetProtocolSink;
struct ITypeInfo;
enum _TAG_UNNAMED_533;
struct IRowsetBookmark;
enum ChangeCPUIdSequence;
enum ntTagTypes;
union _userHBITMAP::__MIDL_IWinTypes_0007;
enum _TAG_UNNAMED_534;
enum _TAG_UNNAMED_535;
enum _TAG_UNNAMED_536;
struct XECollectedEvent;
enum eXcursionAction;
union _DL_EUI48;
enum _TAG_UNNAMED_537;
enum XListOperation;
class XeSqlPkg::object_deleted;
enum _TAG_UNNAMED_538;
enum _TAG_UNNAMED_539;
struct HUMPD__;
enum _TAG_UNNAMED_540;
enum MemoryNode::MemoryPhase;
enum _TAG_UNNAMED_541;
enum _TAG_UNNAMED_542;
struct _SE_ACCESS_REQUEST;
enum SOSHOST_TASK_CALLBACK_TYPE;
enum SOS_OS::OS_AFFINITY;
enum _TAG_UNNAMED_543;
struct _PROCESS_MEMORY_COUNTERS;
enum _TAG_UNNAMED_544;
struct _SERVICE_TIMECHANGE_INFO;
enum _TAG_UNNAMED_545;
class SpinlockHolder<216,2,1>;
enum SOS_WaitInfo::Reason;
struct _tagSOFTDISTINFO;
struct _LDR_RESLOADER_RET;
enum DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc::PageDescState;
class CAutoBase<XMLActionTransformRule>;
struct _USER_MODALS_INFO_1006;
enum _TAG_UNNAMED_546;
enum SOS_WaitInfo::SpinlockOper;
struct _OSVERSIONINFOEXW;
enum _TAG_UNNAMED_547;
enum _TAG_UNNAMED_548;
class SpinlockHolder<301,1,1>;
enum PWAIT_enum;
union _RATE_QUOTA_LIMIT;
struct _QUOTA_LIMITS_EX;
enum _TAG_UNNAMED_549;
enum _TAG_UNNAMED_550;
union __m128i;
enum _TAG_UNNAMED_551;
enum resource_idx;
enum _TAG_UNNAMED_552;
struct std::tr1::_Is_integral<bool>;
class CMemPartitioned<CMemThread<CMemDbg<CMemLargePageObj> > >;
enum SOSHOST_RWLOCKMODE;
enum IMemObj::status;
enum _TAG_UNNAMED_553;
class CAutoP<XE_FileBufferEnum>;
enum destroy_type;
class CAutoRg<XMLActionTransformRule>;
struct _MEMORY_RANGE_ENTRY;
enum _TAG_UNNAMED_554;
class CMemThread<CMemObj>;
enum eXcursionEntryType;
enum _TAG_UNNAMED_555;
class CAutoBase<unsigned __int64>;
enum SOS_MemoryBroker::NOTIFICATION;
struct ITypeMarshal;
enum SOSHOST_MEMOBJ_ID;
enum _TAG_UNNAMED_556;
enum _TAG_UNNAMED_557;
enum _TAG_UNNAMED_558;
enum _TAG_UNNAMED_559;
enum _TAG_UNNAMED_560;
struct IDispError;
enum _TAG_UNNAMED_561;
enum CostModelCombiner::CombineOption;
class CAutoBase<XEPackage0::XE_LiveTarget>;
enum XEPackage0::Messages;
enum _TAG_UNNAMED_562;
enum _TAG_UNNAMED_563;
enum resource_notification;
struct IWbemEventProvider;
struct _UNIVERSAL_NAME_INFOA;
enum CMallocSpy::SpyResult;
struct SERVICE_TRIGGER_CUSTOM_STATE_ID;
struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
enum _TAG_UNNAMED_564;
enum _TAG_UNNAMED_565;
enum UMSWorkerState;
enum _TAG_UNNAMED_566;
enum XeSosPkg::LargeCacheEntryState;
struct tagPROPBAG2;
enum _TAG_UNNAMED_567;
struct IPersist;
struct tagMENUBARINFO;
struct _SYSTEM_POWER_STATUS;
enum _TAG_UNNAMED_568;
struct tagOleMenuGroupWidths;
enum SOS_EVENT_TYPE;
enum SOS_TIMERRESULT;
struct tagRAWMOUSE;
struct tagRAWKEYBOARD;
struct tagRAWHID;
enum _TAG_UNNAMED_569;
class DmpPointer<unsigned __int64>;
enum Worker::SuspendExpectation;
class XeSqlPkg::metadata_cache_miss;
enum _TAG_UNNAMED_570;
enum _TAG_UNNAMED_571;
enum _TAG_UNNAMED_572;
struct _WOW64_LDT_ENTRY;
struct _WOW64_DESCRIPTOR_TABLE_ENTRY;
enum _TAG_UNNAMED_573;
enum _TAG_UNNAMED_574;
enum _TAG_UNNAMED_575;
enum _TAG_UNNAMED_576;
enum _TAG_UNNAMED_577;
enum _TAG_UNNAMED_578;
enum _TAG_UNNAMED_579;
enum Worker::CallbackType;
struct _SECURITY_ATTRIBUTES;
struct _tagBINDINFO;
class TSyncHashTable_EntryAccessor<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>;
enum _TAG_UNNAMED_580;
struct _ACTRL_ACCESS_ENTRY_LISTW;
enum _TAG_UNNAMED_581;
enum _TAG_UNNAMED_582;
enum _TAG_UNNAMED_583;
enum _TAG_UNNAMED_584;
enum _TAG_UNNAMED_585;
enum XeSqlPkg::lock_timeout_greater_than_0::CustomizableSlots;
enum _TAG_UNNAMED_586;
enum _TAG_UNNAMED_587;
struct _LOAD_ASDATA_TABLE;
enum _TAG_UNNAMED_588;
enum _TAG_UNNAMED_589;
struct __vc_attributes::hookAttribute;
struct SOS_DebugBreakHookMgr::Hook::Sequence;
enum _TAG_UNNAMED_590;
enum _TAG_UNNAMED_591;
enum _TAG_UNNAMED_592;
class XEPackage0::XE_LiveWriter::LiveClientEntry;
enum _TAG_UNNAMED_593;
enum _TAG_UNNAMED_594;
enum _TAG_UNNAMED_595;
struct _NDR_CS_ROUTINES;
class XeSqlPkg::broker_transmission_acksm_event_end;
enum _TAG_UNNAMED_596;
struct _SYSTEM_SPECIAL_POOL_INFORMATION;
enum _TAG_UNNAMED_597;
enum _TAG_UNNAMED_598;
enum _TAG_UNNAMED_599;
enum SOS_DebugBreakHookMgr::HookPoint;
struct SOS_DebugBreakHookMgr::Hook;
struct SOS_DebugHookSLock;
class SOS_DebugBreakHookMgr;
enum _TAG_UNNAMED_600;
enum _TAG_UNNAMED_601;
enum _TAG_UNNAMED_602;
enum ClockHand::CLOCKHAND_STATE;
enum _TAG_UNNAMED_603;
enum _TAG_UNNAMED_604;
struct IWbemUnboundObjectSink;
enum ClockAlgorithm::CLOCK_HANDS;
struct tagTEXTMETRICA;
enum _TAG_UNNAMED_605;
struct tagFILTERKEYS;
enum _TAG_UNNAMED_606;
struct tagMETAHEADER;
enum _TAG_UNNAMED_607;
enum _TAG_UNNAMED_608;
enum SOSHOST_CACHESTORE_TYPE;
enum _TAG_UNNAMED_609;
struct IWrappedProtocol;
enum _TAG_UNNAMED_610;
enum _TAG_UNNAMED_611;
struct _MEMORY_WORKING_SET_EX_BLOCK;
enum _TAG_UNNAMED_612;
struct CLUS_NETNAME_VS_TOKEN_INFO;
enum _TAG_UNNAMED_613;
enum _TAG_UNNAMED_614;
struct tagDELETEITEMSTRUCT;
enum _TAG_UNNAMED_615;
struct _SERVICE_STATUS_PROCESS;
class XEPackage0::Wrapper_XE_StreamReader;
enum DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc::PageDescState;
class XeSqlPkg::query_cache_removal_statistics;
enum _TAG_UNNAMED_616;
enum _TAG_UNNAMED_617;
class XE_AutoEnum;
struct FlushRecord;
enum MemoryClerkInternal::TYPE;
enum MemoryBrokerClerk::PeriodicAction;
enum _TAG_UNNAMED_618;
enum _TAG_UNNAMED_619;
struct tagVARIANT;
class XeSqlPkg::database_segment_local_creation_end;
enum _TAG_UNNAMED_620;
enum _TAG_UNNAMED_621;
struct __vc_attributes::nonbrowsableAttribute;
enum _TAG_UNNAMED_622;
enum SOSHOST_TIMERRESULT;
enum DBGSTRM_ERR_TYPE;
enum _TAG_UNNAMED_623;
struct _XSAVE_FORMAT;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_AREA;
enum _TAG_UNNAMED_624;
struct __vc_attributes::defaultvalueAttribute;
enum SPINLOCK_ALGORITHM;
enum _TAG_UNNAMED_625;
struct IUnknown;
enum _TAG_UNNAMED_626;
enum _TAG_UNNAMED_627;
enum _TAG_UNNAMED_628;
struct __vc_attributes::dualAttribute;
enum MemoryUtilizationEffects::Effects;
struct _RPC_VERSION;
struct _RPC_SYNTAX_IDENTIFIER;
struct _MIDL_SYNTAX_INFO;
enum _TAG_UNNAMED_629;
class SinglyLinkedListBase;
class SOS_StateProtectors<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>;
enum MemoryUtilizationEffects::UtilizationState;
class CMemThread<CMemProc>;
enum MemoryUtilizationEffects::Effect::UpdateResult;
struct _NTFS_STATISTICS;
enum _TAG_UNNAMED_630;
enum _TAG_UNNAMED_631;
enum _TAG_UNNAMED_632;
enum _TAG_UNNAMED_633;
struct XE_ConfigCrc;
enum _TAG_UNNAMED_634;
enum _TAG_UNNAMED_635;
enum _TAG_UNNAMED_636;
enum SOS_Scheduler::IOType;
enum XeSqlPkg::commit_tran_completed::CustomizableSlots;
enum _TAG_UNNAMED_637;
class XE_PackageEnumerator;
enum SOS_Scheduler::Transition;
enum _TAG_UNNAMED_638;
struct _currencyfmtA;
enum _TAG_UNNAMED_639;
struct _NETRESOURCEW;
class FunctionCallBinder_1<void,void (__cdecl*)(SOSHost_IOCompRequest *),SOSHost_IOCompRequest *>;
enum IOQueue::IOCheck;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>;
enum _TAG_UNNAMED_640;
enum _TAG_UNNAMED_641;
enum _TAG_UNNAMED_642;
struct CXFileWriterStats;
class XE_CXFileWriter;
struct IWinInetHttpInfo;
class XeSqlPkg::buffer_pool_extension_pages_read;
struct _ACCESS_INFO_1;
enum _TAG_UNNAMED_643;
enum _TAG_UNNAMED_644;
enum _TAG_UNNAMED_645;
enum _TAG_UNNAMED_646;
enum _TAG_UNNAMED_647;
enum XeSqlPkg::app_domain_ring_buffer_recorded::CustomizableSlots;
enum XeSosPkg::memory_broker_ring_buffer_recorded::CustomizableSlots;
struct _PROCESS_DISK_COUNTERS;
struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION;
enum _TAG_UNNAMED_648;
enum _TAG_UNNAMED_649;
struct tagMENUGETOBJECTINFO;
enum _TAG_UNNAMED_650;
enum _TAG_UNNAMED_651;
enum XeSosPkg::scheduler_ring_buffer_recorded::CustomizableSlots;
struct tagCAUL;
enum _TAG_UNNAMED_652;
class XeSqlPkg::security_authentication_perf_create_logintoken;
enum _TAG_UNNAMED_653;
class XE_AutoP<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > >;
enum _TAG_UNNAMED_654;
struct std::is_error_condition_enum<enum std::errc::errc>;
class XE_CustomizableAttributes;
enum SOS_MemoryBroker::BrokerPressureType;
class XE_LogSpecs::LogSpec;
enum _TAG_UNNAMED_655;
struct IXTLRuntime;
enum _TAG_UNNAMED_656;
enum _TAG_UNNAMED_657;
struct _FIXED;
struct _MAT2;
enum _TAG_UNNAMED_658;
struct __vc_attributes::atl::db_paramAttribute;
class DmpPointer<ExcHandler>;
enum _TAG_UNNAMED_659;
class CAutoBase<TSinglyLinkedList<XE_ConfigCrc> >;
struct _ACCESS_ALLOWED_ACE;
struct IAdviseSink2;
enum _TAG_UNNAMED_660;
enum _TAG_UNNAMED_661;
struct _OUTPUT_DEBUG_STRING_INFO;
enum _TAG_UNNAMED_662;
struct __vc_attributes::atl::synchronizeAttribute;
enum _TAG_UNNAMED_663;
enum HardwareCheckResult;
class Spinlock<28,19,1>;
struct _SERVICE_SID_INFO;
enum std::ios_base::event;
class CMemPartitioned<CMemThread<CMemDbg<PageHeapMemObj> > >;
enum _TAG_UNNAMED_664;
enum _TAG_UNNAMED_665;
enum _TAG_UNNAMED_666;
enum XeSqlPkg::lock_cancel::CustomizableSlots;
enum UsedbPrintAccessErrorBehavior;
enum _TAG_UNNAMED_667;
enum _TAG_UNNAMED_668;
struct _WKSTA_INFO_1054;
enum _TAG_UNNAMED_669;
struct IRowset;
enum _TAG_UNNAMED_670;
class CAutoBase<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > >;
enum _TAG_UNNAMED_671;
enum SOS_CacheStoreBase::RemoveOptions;
enum TCacheStore<CacheProbabilisticAlgorithm>::InitOption;
enum _TAG_UNNAMED_672;
class std::tr1::_Ref_count_base;
struct _MEMORY_WORKING_SET_BLOCK;
enum _TAG_UNNAMED_673;
enum indicators_bits;
struct _ACL;
class XeSqlPkg::query_driver_sending_activation;
enum SOS_ResourceManager::ReconfigureFailReason;
class MemObjCache<CMemThread<CMemFixed> >;
enum SOS_ResourceManager::UnitOfFairness;
enum _TAG_UNNAMED_674;
enum _TAG_UNNAMED_675;
struct IThumbnailExtractor;
enum XeSqlPkg::sp_statement_completed::CustomizableSlots;
struct tagEVENTMSG;
enum _TAG_UNNAMED_676;
enum SOS_OS::enum_action;
enum _TAG_UNNAMED_677;
struct std::identity<std::istrstream>;
struct tagCREATESTRUCTA;
enum _TAG_UNNAMED_678;
struct _IMAGE_DATA_DIRECTORY;
class AutoSpinlockHolder<257,1,1>;
struct IBinding;
enum _TAG_UNNAMED_679;
enum SQLDUMPER_FLAGS;
enum DISPATCHERPOOL_TYPE;
enum _TAG_UNNAMED_680;
class MemObjCache<CMemDbg<CMemFixed> >;
enum _TAG_UNNAMED_681;
enum _TAG_UNNAMED_682;
struct _RPC_SECURITY_QOS_V2_A;
enum _TAG_UNNAMED_683;
struct IXMLDOMNamedNodeMap;
struct ISWbemQualifier;
struct _SINGLE_LIST_ENTRY32;
enum _TAG_UNNAMED_684;
class XeSqlPkg::databases_data_file_size_changed;
enum _TAG_UNNAMED_685;
enum _TAG_UNNAMED_686;
struct _REPARSE_GUID_DATA_BUFFER;
enum _TAG_UNNAMED_687;
enum SOS_Task::TASK_STATE;
enum XeSqlPkg::lock_deadlock::CustomizableSlots;
enum _TAG_UNNAMED_688;
class XE_ResolvedObjectXML<XEEvent>;
struct _PROCESSOR_NUMBER;
struct _ICONINFO;
enum _TAG_UNNAMED_689;
struct HPEN__;
enum _TAG_UNNAMED_690;
enum TraceLine::OutputType;
enum _TAG_UNNAMED_691;
enum CacheProbabilisticAlgorithm::ShouldEntryBeCachedOption;
class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,1>,1>;
enum _TAG_UNNAMED_692;
enum _TAG_UNNAMED_693;
enum ExternalCache::PressureAction;
enum SchedulerMonitor::Track::WorkerUtilization;
class DmpListIterator<PageHeapPageInfo,8,40,SEList<PageHeapPageInfo,40>,8,512>;
enum PageAllocator::QUOTA_CONTROLLER_ID;
enum _TAG_UNNAMED_694;
struct _wireSAFEARR_DISPATCH;
enum XE_Session::ForEachListAction;
enum _TAG_UNNAMED_695;
enum _TAG_UNNAMED_696;
class CAutoRg<unsigned int>;
enum _TAG_UNNAMED_697;
struct _TOKEN_USER;
enum SOS_MemoryTopLevelBlockAllocator::BlockState;
class Spinlock<194,3,1>;
enum _TAG_UNNAMED_698;
struct OffRowActionData;
enum _TAG_UNNAMED_699;
enum _TAG_UNNAMED_700;
class SEList<XE_LogDeserializedPackage,0>;
enum SOS_MemoryModel;
enum _ACCESS_MODE;
enum _TAG_UNNAMED_701;
enum _TAG_UNNAMED_702;
enum _TAG_UNNAMED_703;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
enum _TAG_UNNAMED_704;
enum _TAG_UNNAMED_705;
enum _TAG_UNNAMED_706;
enum SOSHOST_CLIENTID;
struct ISWbemMethod;
enum _DMA_SPEED;
class TCallbackListBase<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >;
enum SOS_Task::TASK_STATUS;
enum _TAG_UNNAMED_707;
enum _TAG_UNNAMED_708;
enum SOS_Task::TASK_DEADLOCK_PRIORITY;
struct tagDVTARGETDEVICE;
struct _numberfmtA;
enum _TAG_UNNAMED_709;
class DmpPointer<CMemFixed>;
enum SOS_Task::TASK_QUEUE_STATE;
class XeSqlPkg::broker_transmission_deliverysm_event_end;
enum _TAG_UNNAMED_710;
enum _TAG_UNNAMED_711;
struct IEnumUnknown;
enum SOS_Task::TASK_ABORT_TYPE;
class XE_StreamCompare<char,XEPackage0::StringCompare<char,1>,1>;
enum _TAG_UNNAMED_712;
enum XeSqlPkg::sql_statement_starting::CustomizableSlots;
enum _TAG_UNNAMED_713;
struct __vc_attributes::helper_attributes::attributeAttribute;
enum SOS_Task::enum_stack;
struct XE_SessionMgrSLock;
enum _TAG_UNNAMED_714;
enum DBCONSTRAINTTYPEENUM;
enum _TAG_UNNAMED_715;
enum _TAG_UNNAMED_716;
struct IAdviseSinkEx;
enum _TAG_UNNAMED_717;
enum _TAG_UNNAMED_718;
enum _TAG_UNNAMED_719;
struct tagCLIENTCREATESTRUCT;
struct __vc_attributes::transmit_asAttribute;
enum RINGBUFFER_TYPE;
enum _TAG_UNNAMED_720;
struct tagEMRSETICMPROFILE;
enum _TAG_UNNAMED_721;
enum _TAG_UNNAMED_722;
class AutoSpinlockHolder<154,3,1>;
struct tagEMRFORMAT;
enum _TAG_UNNAMED_723;
enum _TAG_UNNAMED_724;
class XE_IBufferWriter;
enum XEPackage0::MinMaxType;
struct IDataFilter;
class Spinlock<178,3,1>;
enum CACHE_ENTRY_CONTROL;
class XeSqlPkg::spatial_guess;
enum _TAG_UNNAMED_725;
class CAutoBase<XE_FileBufferEnum>;
struct _RTL_HEAP_INFORMATION;
enum _TAG_UNNAMED_726;
enum _TAG_UNNAMED_727;
struct _SERVER_INFO_1509;
enum _WNF_STATE_NAME_LIFETIME;
struct _FILE_ATTRIBUTE_CACHE_VALUE;
struct _FILE_ATTRIBUTE_CACHE_PAIR;
struct _FILE_ATTRIBUTE_CACHE_VALUES;
enum _TAG_UNNAMED_728;
struct IWbemDecoupledRegistrar;
enum _TAG_UNNAMED_729;
enum _TAG_UNNAMED_730;
class XeSosPkg::ex_terminator_called;
struct tagCWPSTRUCT;
enum _TAG_UNNAMED_731;
enum _TAG_UNNAMED_732;
enum _TAG_UNNAMED_733;
class Spinlock<220,2,1>;
enum _TAG_UNNAMED_734;
struct _USE_INFO_2;
enum _TAG_UNNAMED_735;
struct XEPackage0::SourceAction;
enum _TAG_UNNAMED_736;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
enum _TAG_UNNAMED_737;
struct tagCACY;
enum _TAG_UNNAMED_738;
enum _TAG_UNNAMED_739;
enum XEPackage0::RingTarget::Mode;
struct _wireSAFEARR_BSTR;
enum _TAG_UNNAMED_740;
enum _TAG_UNNAMED_741;
enum _TAG_UNNAMED_742;
enum DkParameter::DkParameterStatus;
enum _TAG_UNNAMED_743;
enum DBLITERALENUM20;
struct _OBJECTID;
enum _TAG_UNNAMED_744;
enum _TAG_UNNAMED_745;
class Spinlock<106,9,1>;
enum _TAG_UNNAMED_746;
struct ITrusteeAdmin;
enum _TAG_UNNAMED_747;
enum _TAG_UNNAMED_748;
struct tagRemHPALETTE;
struct _SERVER_INFO_1556;
enum _TAG_UNNAMED_749;
class SpinlockHolder<159,3,1>;
enum _TAG_UNNAMED_750;
enum _TAG_UNNAMED_751;
enum _TAG_UNNAMED_752;
class Spinlock<121,8,1>;
enum _TAG_UNNAMED_753;
struct IWbemLocator;
class Spinlock<176,3,1>;
enum _TAG_UNNAMED_754;
enum _TAG_UNNAMED_755;
class SEList<XEPackage0::SourceColumn,0>;
class SEList<XEPackage0::SourceAction,0>;
struct XEPackage0::Source;
class XE_LiveSessionMetadata;
struct XEPackage0::PairingTargetStats;
class XEPackage0::PairingTarget;
enum _TAG_UNNAMED_756;
struct _REMOTE_LINK_TRACKING_INFORMATION_;
enum CLUSTER_RESOURCE_CREATE_FLAGS;
enum XeSqlPkg::security_error_ring_buffer_recorded::CustomizableSlots;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>::FuncPtr<void,NullType,NullType,NullType,NullType>;
enum _TAG_UNNAMED_757;
enum _TAG_UNNAMED_758;
struct MgrCacheSLock;
enum _TAG_UNNAMED_759;
enum _TAG_UNNAMED_760;
struct ICreateErrorInfo;
enum CLUSTER_RESOURCE_CLASS;
struct tagCIEXYZ;
struct tagICEXYZTRIPLE;
struct tagLOGCOLORSPACEA;
struct tagEMRCREATECOLORSPACE;
enum _TAG_UNNAMED_761;
enum CLUSTER_RESOURCE_ENUM;
enum _TAG_UNNAMED_762;
enum _TAG_UNNAMED_763;
struct _TOKEN_ELEVATION;
enum Worker::StackSize;
enum _TAG_UNNAMED_764;
struct tagMODULEENTRY32;
enum _TAG_UNNAMED_765;
enum _TAG_UNNAMED_766;
enum _TAG_UNNAMED_767;
enum _TAG_UNNAMED_768;
struct tagWNODE_SINGLE_ITEM;
enum _SYSTEM_INFORMATION_CLASS;
enum _TAG_UNNAMED_769;
struct ILayoutStorage;
enum _TAG_UNNAMED_770;
enum CSerializeContext<RPCStream>::EMBEDDED_MODES;
class AutoSpinlockHolder<275,1,1>;
enum _TAG_UNNAMED_771;
struct XEHostProperties;
enum _TAG_UNNAMED_772;
struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
enum _PROC_THREAD_ATTRIBUTE_NUM;
enum _TAG_UNNAMED_773;
struct XE_TEvent<4,0,6>;
class XeSqlPkg::hadr_db_manager_suspend_resume;
enum _TAG_UNNAMED_774;
class XE_AutoP<PackageEntry>;
class HistoryTargetTables;
enum ResourceClerk::TYPE;
enum _TAG_UNNAMED_775;
struct _SECURITY_DESCRIPTOR;
enum _TAG_UNNAMED_776;
struct IEncodingFilterFactory;
struct BitOrdinal<2048>;
enum CCompatLevel::compatibilitylevel;
struct _CREATE_THREAD_DEBUG_INFO;
struct tagEMRSETCOLORSPACE;
enum _TAG_UNNAMED_777;
enum _TAG_UNNAMED_778;
enum _TAG_UNNAMED_779;
enum _TAG_UNNAMED_780;
struct IOleInPlaceSite;
enum _TAG_UNNAMED_781;
enum DequeueResult;
struct ColumnTransformRule;
enum _TAG_UNNAMED_782;
enum _TAG_UNNAMED_783;
enum _TAG_UNNAMED_784;
enum _TAG_UNNAMED_785;
enum EVENT_DEBUG_FLAGS;
enum _TAG_UNNAMED_786;
enum DBLITERALENUM;
enum _TAG_UNNAMED_787;
struct AsyncIPipeByte;
enum _TAG_UNNAMED_788;
class SpinlockHolder<282,1,1>;
enum _TAG_UNNAMED_789;
struct IProvideClassInfo;
struct tagAXESLISTA;
struct tagENUMTEXTMETRICA;
enum _TAG_UNNAMED_790;
class XeSqlPkg::session_footprint_lifecycle_event;
class Spinlock<196,3,1>;
union _UNWIND_CODE;
enum _TAG_UNNAMED_791;
enum _RTC_ErrorNumber;
enum _TAG_UNNAMED_792;
enum _TAG_UNNAMED_793;
enum _TAG_UNNAMED_794;
struct _TOKEN_GROUPS_AND_PRIVILEGES;
class UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >::Elem;
enum _TAG_UNNAMED_795;
enum _TAG_UNNAMED_796;
struct IOpenRowset;
enum _TAG_UNNAMED_797;
enum _TAG_UNNAMED_798;
enum XE_StreamCompOperation;
enum _TAG_UNNAMED_799;
struct _s__CatchableTypeArray;
enum XeSqlPkg::QNParameterTableActivity;
struct LockNotificationSLock;
enum _TAG_UNNAMED_800;
struct tagDBID;
struct tagDBCOLUMNDESC;
enum _CLUSTER_CSV_VOLUME_FAULT_STATE;
enum _TAG_UNNAMED_801;
class TCallbackListBase<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >;
enum _TAG_UNNAMED_802;
enum _TAG_UNNAMED_803;
enum _TAG_UNNAMED_804;
struct _COMM_FAULT_OFFSETS;
enum _TAG_UNNAMED_805;
enum _TAG_UNNAMED_806;
enum _TAG_UNNAMED_807;
struct IOplockStorage;
enum _TAG_UNNAMED_808;
struct _RASTERIZER_STATUS;
enum _TAG_UNNAMED_809;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W;
struct _PDH_DATA_ITEM_PATH_ELEMENTS_A;
struct _PDH_COUNTER_PATH_ELEMENTS_A;
struct _PDH_COUNTER_INFO_A;
enum SchedulerManager::SchedCreateOptions;
enum DBCOMMANDPERSISTFLAGENUM21;
enum _TAG_UNNAMED_810;
enum SchedulerManager::SchedulerList::HoldLock;
enum _TAG_UNNAMED_811;
struct XEPredicateValue;
enum _TAG_UNNAMED_812;
enum _TAG_UNNAMED_813;
enum _TAG_UNNAMED_814;
enum _TAG_UNNAMED_815;
enum _TAG_UNNAMED_816;
enum CLUSTER_SHARED_VOLUME_STATE;
class AutoSpinlockHolder<164,3,1>;
enum _TAG_UNNAMED_817;
enum _TAG_UNNAMED_818;
enum _TAG_UNNAMED_819;
enum _TAG_UNNAMED_820;
enum _TAG_UNNAMED_821;
struct __vc_attributes::aggregatableAttribute;
enum _TAG_UNNAMED_822;
enum _TAG_UNNAMED_823;
struct tagEMRRESIZEPALETTE;
class DmpPointer<SOS_ResourceManager>;
enum _TAG_UNNAMED_824;
enum _TAG_UNNAMED_825;
enum _TAG_UNNAMED_826;
enum CLUSCTL_CLUSTER_CODES;
enum _TAG_UNNAMED_827;
class SList;
enum _TAG_UNNAMED_828;
enum _TAG_UNNAMED_829;
enum _TAG_UNNAMED_830;
enum _TAG_UNNAMED_831;
enum DBBINDURLSTATUSENUM;
struct tagTPMPARAMS;
enum _TAG_UNNAMED_832;
enum SOS_PARTITIONEDHEAP;
enum PARTITIONING_TYPE;
enum XeSqlPkg::scan_stopped::CustomizableSlots;
enum _TAG_UNNAMED_833;
struct IRpcHelper;
enum DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc::PageDescState;
class DmpPointer<SEList<SOS_ResourceGroup,16> >;
enum _TAG_UNNAMED_834;
class XeCloudMinPkg::set_partition_prepare_full_commit_mode;
enum XeSqlPkg::object_deleted::CustomizableSlots;
enum _TAG_UNNAMED_835;
enum _TAG_UNNAMED_836;
enum CLUSCTL_NETWORK_CODES;
struct IXMLElement;
enum _TAG_UNNAMED_837;
enum XeSqlPkg::sql_statement_recompile::CustomizableSlots;
struct IPointerInactive;
class Spinlock<101,10,1>;
enum _TAG_UNNAMED_838;
enum XeSosPkg::resource_monitor_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_839;
struct XEPackage0::HistoryTargetParams;
enum _TAG_UNNAMED_840;
class AtomicBits<unsigned long>;
class Indicator;
class TSimpleStateMachine<6,8>;
class ResourceClerkList;
class MemoryBrokerClerkList;
class ExternalCacheList;
class MemoryUtilizationEffects::Effect;
class MemoryUtilizationEffects;
class SOS_Mutex;
class PeriodicTimer<5000>;
class CAutoRg<double>;
class CAutoRg<DynInterval *>;
class CostModelCombiner;
class ResourceMonitor;
enum XeSqlPkg::background_job_error::CustomizableSlots;
class XE_AutoRg<CXFilePageForRead>;
class XE_CXFileReader;
enum _TAG_UNNAMED_841;
enum _TAG_UNNAMED_842;
enum DBSTATUSENUM26;
struct _PROCESS_STACK_ALLOCATION_INFORMATION;
struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX;
enum _TAG_UNNAMED_843;
enum _TAG_UNNAMED_844;
struct _IMAGE_IMPORT_BY_NAME;
enum _TAG_UNNAMED_845;
class XeSosPkg::page_heap_memory_freed;
struct IWbemClientTransport;
enum _TAG_UNNAMED_846;
class HostedResourceGroupData;
struct tagMOUSEHOOKSTRUCT;
enum _TAG_UNNAMED_847;
enum _TAG_UNNAMED_848;
enum _TAG_UNNAMED_849;
struct IRowsetView;
enum _TAG_UNNAMED_850;
enum _TAG_UNNAMED_851;
enum CLUSPROP_PIFLAGS;
enum XeSosPkg::EventOpcode;
enum _TAG_UNNAMED_852;
enum _TAG_UNNAMED_853;
enum _THREADINFOCLASS;
struct tagRID_DEVICE_INFO_MOUSE;
struct tagRID_DEVICE_INFO_KEYBOARD;
struct tagRID_DEVICE_INFO_HID;
struct tagRID_DEVICE_INFO;
enum _TAG_UNNAMED_854;
enum _TAG_UNNAMED_855;
enum _TAG_UNNAMED_856;
struct __vc_attributes::wire_marshalAttribute;
enum _TAG_UNNAMED_857;
enum _TAG_UNNAMED_858;
enum _TAG_UNNAMED_859;
enum DBCOLUMNFLAGSENUM20;
enum _TAG_UNNAMED_860;
enum _TAG_UNNAMED_861;
enum _TAG_UNNAMED_862;
class Spinlock<231,2,1>;
enum _TAG_UNNAMED_863;
enum _TAG_UNNAMED_864;
struct BitmapWord;
enum _TAG_UNNAMED_865;
struct _SINGLE_LIST_ENTRY;
class SpinlockHolder<170,3,1>;
enum _TAG_UNNAMED_866;
struct _RTL_BALANCED_LINKS;
struct _RTL_AVL_TABLE;
enum _TAG_UNNAMED_867;
enum _TAG_UNNAMED_868;
enum _TAG_UNNAMED_869;
enum _TAG_UNNAMED_870;
class std::numeric_limits<signed char>;
enum _TAG_UNNAMED_871;
struct IStorage;
enum _THREAD_UMS_INFORMATION_COMMAND;
struct SEReplPrefetchStatsSLock;
enum _TAG_UNNAMED_872;
struct XE_StaticPackage<1>::LocaleEntry;
class XE_StaticPackage<1>;
enum _TAG_UNNAMED_873;
class XeSqlPkg::stack_trace;
enum _TAG_UNNAMED_874;
class Spinlock<82,13,1>;
enum XeSosPkg::memory_node_oom_ring_buffer_recorded::CustomizableSlots;
struct _RTL_PROCESS_MODULE_INFORMATION;
struct _RTL_PROCESS_MODULES;
enum _TAG_UNNAMED_875;
class Spinlock<20,19,1>;
enum _TAG_UNNAMED_876;
class XeSqlPkg::buffer_pool_page_allocated;
enum _TAG_UNNAMED_877;
enum _TAG_UNNAMED_878;
enum _TAG_UNNAMED_879;
enum XeSqlPkg::BrokerRouteType;
enum XeSosPkg::memory_broker_clerks_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_880;
enum _TAG_UNNAMED_881;
enum _TAG_UNNAMED_882;
enum _TAG_UNNAMED_883;
struct IXMLDOMEntityReference;
struct IEnumWbemClassObject;
enum _TAG_UNNAMED_884;
enum _TAG_UNNAMED_885;
enum XeSosPkg::exception_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_886;
enum _TAG_UNNAMED_887;
enum DBCOMPAREOPSENUM20;
enum WaitForGraphEdge::WaitForGraphEdgeState;
enum _TAG_UNNAMED_888;
enum _TAG_UNNAMED_889;
enum _TAG_UNNAMED_890;
enum _TAG_UNNAMED_891;
struct XESessionBufferProperties;
struct XESessionProperties;
class XE_SessionObjectEnumerator;
enum _TAG_UNNAMED_892;
enum XeSqlPkg::ESpCacheRemoveMethod;
struct IInternetProtocol;
enum _TAG_UNNAMED_893;
enum _TAG_UNNAMED_894;
enum _TAG_UNNAMED_895;
class XeSqlPkg::database_poll_segment_state;
enum _TAG_UNNAMED_896;
enum _TAG_UNNAMED_897;
class XeSqlPkg::producer_receive_correlated_params;
enum _TAG_UNNAMED_898;
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
enum _TAG_UNNAMED_899;
struct IMarshal;
enum _TAG_UNNAMED_900;
enum _TAG_UNNAMED_901;
struct tagENHMETARECORD;
enum _TAG_UNNAMED_902;
class DmpPointer<StackFrames<40> >;
enum _TAG_UNNAMED_903;
struct XE_TEvent<3,0,1>;
class XeSqlPkg::failed_hresult;
enum _TAG_UNNAMED_904;
enum DBACCESSORFLAGSENUM;
class XE_TCollection<0,0>;
enum PostCatchActions;
enum _TAG_UNNAMED_905;
struct XE_BufferMap::SortByBufferIndex;
enum _TAG_UNNAMED_906;
enum _TAG_UNNAMED_907;
struct IWbemEventConsumerProvider;
enum SOS_MemoryPool::AllocationOptions;
enum _TAG_UNNAMED_908;
class CAutoBase<XE_DeserializedMetadata>;
enum _TAG_UNNAMED_909;
enum _TAG_UNNAMED_910;
enum CLUSTER_QUORUM_TYPE;
enum _TAG_UNNAMED_911;
enum _TAG_UNNAMED_912;
class SpinlockHolder<261,1,1>;
struct PPM_WMI_LEGACY_PERFSTATE;
enum SOS_SchedulerRingRecord::scheduler_action;
struct IInternetProtocolRoot;
enum XeSosPkg::scheduler_monitor_stalled_dispatcher_ring_buffer_recorded::CustomizableSlots;
struct IWbemCallResult;
enum _TAG_UNNAMED_913;
class AutoSpinlockHolder<133,4,1>;
enum _TAG_UNNAMED_914;
enum _TAG_UNNAMED_915;
enum _TAG_UNNAMED_916;
enum _TAG_UNNAMED_917;
struct tagCAPROPVARIANT;
enum DBSOURCETYPEENUM20;
enum _TAG_UNNAMED_918;
class SpinlockHolder<204,3,1>;
enum _TAG_UNNAMED_919;
enum _TAG_UNNAMED_920;
enum _TAG_UNNAMED_921;
enum _TAG_UNNAMED_922;
class AutoSpinlockHolder<34,18,1>;
enum SchedulerPoolData::MAX_SUM_USAGE;
enum _TAG_UNNAMED_923;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<0>;
struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION;
enum XeSqlPkg::SortSubEventId;
struct CSerializeContext<RPCStream>::ClassSerializer;
struct TransmitterPendingTransportUsersSLock;
enum _TAG_UNNAMED_924;
enum _TAG_UNNAMED_925;
enum _TAG_UNNAMED_926;
enum _TAG_UNNAMED_927;
class SpinlockHolder<128,7,1>;
class XE_IMetadata;
enum _TAG_UNNAMED_928;
struct DelayedPartitionedStackSLock;
struct IPropertyPageSite;
enum _TAG_UNNAMED_929;
enum _TAG_UNNAMED_930;
struct PROCESSOR_IDLESTATE_POLICY;
enum WORKER_QUEUE_TYPE;
class std::tr1::bad_weak_ptr;
struct _FILE_SFIO_RESERVE_INFORMATION;
enum _TAG_UNNAMED_931;
class SpinlockHolder<201,3,1>;
enum _TAG_UNNAMED_932;
enum _TAG_UNNAMED_933;
enum XeSqlPkg::HekatonSlowParamPassReason;
struct tagHELPINFO;
enum _TAG_UNNAMED_934;
enum _TAG_UNNAMED_935;
class CAutoBase<XEPackage0::PairingTarget>;
enum _TAG_UNNAMED_936;
class XeSqlPkg::query_rpc_prepare_to_delete;
enum _TAG_UNNAMED_937;
class RefCountImpl<XE_ConfiguredSessionEnumerator>;
struct XE_TArray<XEDataAttribute,19>;
struct XE_TEvent<4,0,19>;
enum _TAG_UNNAMED_938;
enum _TAG_UNNAMED_939;
enum _TAG_UNNAMED_940;
enum XeSqlPkg::AlterDBOptionType;
enum SOS_MemoryBlockAllocator::CheckNuma;
class SpinlockHolder<283,1,1>;
enum _TAG_UNNAMED_941;
enum _TAG_UNNAMED_942;
struct _RPC_SECURITY_QOS_V3_A;
class XeCloudMinPkg::dummy_transaction;
enum _TAG_UNNAMED_943;
enum _TAG_UNNAMED_944;
enum _TAG_UNNAMED_945;
enum _TAG_UNNAMED_946;
struct __vc_attributes::helper_attributes::help_stringAttribute;
enum SOS_MemoryBlockAllocator::CommitResult;
enum _TAG_UNNAMED_947;
struct IWbemBackupRestore;
enum _TAG_UNNAMED_948;
enum _TAG_UNNAMED_949;
enum _TAG_UNNAMED_950;
enum XE_ConstantElimination<char,4096>::STREAM_STATE;
class XE_ConstantElimination<char,4096>;
enum NLSIndex;
struct _INHERITED_FROMA;
enum _TAG_UNNAMED_951;
enum _TAG_UNNAMED_952;
struct tagSOLE_AUTHENTICATION_SERVICE;
enum _TAG_UNNAMED_953;
enum _TAG_UNNAMED_954;
enum _TAG_UNNAMED_955;
enum _TAG_UNNAMED_956;
enum XeSqlPkg::statistic_object_type;
struct _ACTIVATION_CONTEXT_QUERY_INDEX;
enum _TAG_UNNAMED_957;
enum _TAG_UNNAMED_958;
struct _SERVICE_NOTIFY_1;
enum _TAG_UNNAMED_959;
enum _TAG_UNNAMED_960;
enum _TAG_UNNAMED_961;
class CAutoBase<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > >;
enum _TAG_UNNAMED_962;
enum _TAG_UNNAMED_963;
class XeCloudMinPkg::async_transport_stream_status_change;
enum _TAG_UNNAMED_964;
enum _TAG_UNNAMED_965;
enum XeSqlPkg::query_post_compilation_showplan::CustomizableSlots;
class Spinlock<25,19,1>;
struct IDropSourceNotify;
enum _TAG_UNNAMED_966;
enum DBTYPEENUM20;
enum _TAG_UNNAMED_967;
enum ResourceInventory::usage_type;
enum _TAG_UNNAMED_968;
struct XEEventDataDescriptor;
enum _TAG_UNNAMED_969;
class Spinlock<16,19,1>;
enum _TAG_UNNAMED_970;
enum _TAG_UNNAMED_971;
enum _TAG_UNNAMED_972;
enum XeSqlPkg::XACT_STATE;
struct IWbemProviderInitSink;
struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
enum _TAG_UNNAMED_973;
enum _TAG_UNNAMED_974;
struct MENUITEMTEMPLATEHEADER;
struct XE_TArray<XEPredicateCompare *,0>;
struct XE_TObjects<XEPredicateCompare,0>;
enum _TAG_UNNAMED_975;
enum _TAG_UNNAMED_976;
class CXRLEZeroColumn<unsigned char>;
enum _TAG_UNNAMED_977;
struct tagENUMLOGFONTA;
enum _TAG_UNNAMED_978;
enum _TAG_UNNAMED_979;
class Spinlock<71,16,1>;
enum _TAG_UNNAMED_980;
struct _CLUS_CHKDSK_INFO;
enum _TAG_UNNAMED_981;
enum _TAG_UNNAMED_982;
enum _TAG_UNNAMED_983;
enum _TAG_UNNAMED_984;
struct IXMLDOMEntity;
enum _TAG_UNNAMED_985;
enum _COVERAGE_REQUEST_CODES;
class CAutoBase<XEPackage0::CounterTarget>;
enum _TAG_UNNAMED_986;
enum _TAG_UNNAMED_987;
class XeSqlPkg::hadr_db_commit_mgr_harden;
enum _TAG_UNNAMED_988;
enum _TAG_UNNAMED_989;
struct __vc_attributes::noncreatableAttribute;
enum SOS_ParentBlockDescriptor::DescState;
enum XeSqlPkg::HadrAvailabilityReplicaStatus;
enum _TAG_UNNAMED_990;
enum _TAG_UNNAMED_991;
struct XE_TEvent<4,1,1>;
class XeSqlPkg::sql_batch_starting;
class XE_AutoP<XEPackage0::XE_FileTarget>;
enum _TAG_UNNAMED_992;
enum _TAG_UNNAMED_993;
struct ExternalStorage;
struct XBitmap<ExternalStorage>;
class XE_AutoRg<unsigned int>;
struct XE_PackageFilter::FilterHolder;
class XE_PackageFilter;
enum _TAG_UNNAMED_994;
enum _TAG_UNNAMED_995;
struct _WKSTA_INFO_1032;
enum _TAG_UNNAMED_996;
enum _TAG_UNNAMED_997;
class Spinlock<67,16,1>;
enum SOS_TraceFlagSizes;
enum _TAG_UNNAMED_998;
class CAutoRg<unsigned __int64>;
enum _TAG_UNNAMED_999;
struct _TAPE_CREATE_PARTITION;
struct tagGCP_RESULTSA;
enum _TAG_UNNAMED_1000;
enum _IRQ_GROUP_POLICY;
enum _TAG_UNNAMED_1001;
enum _TAG_UNNAMED_1002;
enum _TAG_UNNAMED_1003;
enum _TAG_UNNAMED_1004;
enum _TAG_UNNAMED_1005;
enum _TAG_UNNAMED_1006;
enum DBCOMMANDPERSISTFLAGENUM;
class AutoSpinlockHolder<283,1,1>;
enum MemoryObjectFactory::CreationOptions;
enum MemoryObjectFactory::WrappingOptions;
struct _XMIT_ROUTINE_QUINTUPLE;
enum _TAG_UNNAMED_1007;
enum _TAG_UNNAMED_1008;
enum _TAG_UNNAMED_1009;
enum _TAG_UNNAMED_1010;
struct ISWbemPropertySet;
enum SOSHOST_OBJECTSTORE_TYPE;
enum _TAG_UNNAMED_1011;
struct XEEngineAPISet;
enum _TAG_UNNAMED_1012;
enum _RTL_STACK_TRACE_DATABASE_CONTROL;
enum SOS_Node::NodeFlags;
enum _TAG_UNNAMED_1013;
class CAutoBase<XE_AutoRg<unsigned short> >;
enum _TAG_UNNAMED_1014;
enum SOS_Node::NodeIdleState;
class SpinlockHolder<248,1,1>;
struct _DMA_CONFIGURATION_BYTE1;
enum _TAG_UNNAMED_1015;
enum _SECTION_INHERIT;
enum _TAG_UNNAMED_1016;
struct XE_TMap<14>;
enum _TAG_UNNAMED_1017;
class XeSqlPkg::glm_lock_acquire_end;
enum _TAG_UNNAMED_1018;
enum _TAG_UNNAMED_1019;
struct _POWER_PLATFORM_INFORMATION;
enum _TAG_UNNAMED_1020;
enum _TAG_UNNAMED_1021;
enum _TAG_UNNAMED_1022;
enum _TAG_UNNAMED_1023;
class XeSqlPkg::cursor_unprepare;
enum _TAG_UNNAMED_1024;
enum CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE;
struct IWbemObjectSinkEx;
enum _TAG_UNNAMED_1025;
enum SOS_WaitableAddress::WaitableState;
struct tagHEAPENTRY32;
enum _TAG_UNNAMED_1026;
struct _FILEMUIINFO;
enum _TAG_UNNAMED_1027;
struct tagSTATPROPSETSTG;
enum _TAG_UNNAMED_1028;
enum SOS_SchedulerMonitorRecord::EventType;
enum _TAG_UNNAMED_1029;
enum CLUSPROP_IPADDR_ENABLENETBIOS;
enum _TAG_UNNAMED_1030;
struct QITAB;
enum _TAG_UNNAMED_1031;
enum _TAG_UNNAMED_1032;
struct IRpcChannelBuffer2;
class Spinlock<37,18,1>;
enum _TAG_UNNAMED_1033;
class AutoSpinlockHolder<42,18,1>;
enum _TAG_UNNAMED_1034;
struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR;
enum _TAG_UNNAMED_1035;
enum SQLError::ERROR_ORIGIN;
enum _TAG_UNNAMED_1036;
enum SYSTHREAD_DISPATCH_TYPE;
struct ITypeFactory;
enum _TAG_UNNAMED_1037;
enum _CLUSTER_REG_COMMAND;
enum _TAG_UNNAMED_1038;
class SpinlockHolder<325,1,1>;
enum GenericEvent::PublishResult;
struct _RTL_DYNAMIC_HASH_TABLE;
enum _TAG_UNNAMED_1039;
enum _TAG_UNNAMED_1040;
struct IOleAdviseHolder;
enum _TAG_UNNAMED_1041;
enum _TAG_UNNAMED_1042;
enum _TAG_UNNAMED_1043;
struct _TRANSACTION_BASIC_INFORMATION;
enum _TAG_UNNAMED_1044;
struct XESessionStats;
class UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >;
enum ResourceMonitor::IdleHelperFlags;
class CAutoBase<SOS_ResourceGroup>;
enum _TAG_UNNAMED_1045;
struct IDispatchEx;
enum _TAG_UNNAMED_1046;
struct _wfinddata32_t;
class XE_CompressionBufferRefCount;
enum _TAG_UNNAMED_1047;
enum _TAG_UNNAMED_1048;
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
enum _TAG_UNNAMED_1049;
class XE_PublishedDescriptor::DataSource;
enum ResourceMonitor::Const;
enum _TAG_UNNAMED_1050;
enum SOSHOST_USERSTORE_TYPE;
struct XE_TEvent<4,1,6>;
class XeSqlPkg::preconnect_starting;
class Spinlock<331,0,1>;
enum _TAG_UNNAMED_1051;
enum _TAG_UNNAMED_1052;
enum _TAG_UNNAMED_1053;
enum _TAG_UNNAMED_1054;
class XE_AutoP<XE_FileMemoryMap>;
class XE_AutoP<XE_FileReaderDefaultPolicy>;
class XE_FileBufferEnum;
enum _TAG_UNNAMED_1055;
enum DBPROPFLAGSENUM25;
struct tagStorageLayout;
enum _TAG_UNNAMED_1056;
enum XEPackage0::CompareDiscriminant;
class XeSqlPkg::broker_transmission_lazyflusher_processing_end;
enum _TAG_UNNAMED_1057;
enum DBPROPSTATUSENUM21;
class ClockAlgorithm::ControlInfo;
enum _TAG_UNNAMED_1058;
enum _TAG_UNNAMED_1059;
enum _TAG_UNNAMED_1060;
enum _TAG_UNNAMED_1061;
struct XE_SessionEventMgrSLock;
enum _TAG_UNNAMED_1062;
struct IColumnsInfo;
enum _TAG_UNNAMED_1063;
enum _TAG_UNNAMED_1064;
class XE_AutoRg<unsigned short>;
struct XE_LoadedLibrary;
enum SOS_Tracing::OS_TRACE_FLAGS;
struct _NDR_CS_SIZE_CONVERT_ROUTINES;
enum _TAG_UNNAMED_1065;
struct IProvideClassInfo2;
enum _TAG_UNNAMED_1066;
struct tagCURSORINFO;
struct _SYSTEM_POWER_POLICY;
enum TCacheStore<CacheClockAlgorithm>::HashBucketAction;
struct IWbemEventProviderSecurity;
enum TCacheStore<CacheClockAlgorithm>::InitOption;
enum _TAG_UNNAMED_1067;
struct _SYSDBG_MSR;
enum _TAG_UNNAMED_1068;
struct _SYSTEM_BIGPOOL_ENTRY;
enum _TRUSTEE_TYPE;
struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING;
enum TCacheStore<CacheClockAlgorithm>::InsertOptions;
class Spinlock<93,11,1>;
enum XELiveTargetClientAPI::ForcedUnregisterReason;
enum _TAG_UNNAMED_1069;
enum _TAG_UNNAMED_1070;
enum SOS_OS::enum_statusflags;
class XeSqlPkg::memory_manager_total_server_memory;
enum SOS_OS::OS_STATS_FLAGS;
enum _TAG_UNNAMED_1071;
enum _TAG_UNNAMED_1072;
enum SOS_OS::OS_OPTION_FLAGS;
struct _TRACE_GUID_PROPERTIES;
enum _TAG_UNNAMED_1073;
struct _FILE_LINK_ENTRY_INFORMATION;
struct _FILE_LINKS_INFORMATION;
enum _TAG_UNNAMED_1074;
enum _TAG_UNNAMED_1075;
enum SOS_OS::HOT_ADD_CPU_UNSUPPORTED_REASON;
enum _TAG_UNNAMED_1076;
struct __vc_attributes::objectAttribute;
enum SOS_OS::MaxWorkersConfigType;
enum _TAG_UNNAMED_1077;
struct IEnumSTATSTG;
enum _TAG_UNNAMED_1078;
enum NODE_CLUSTER_STATE;
enum _TAG_UNNAMED_1079;
enum SOS_DBG_BUFFER_TYPE;
enum _TAG_UNNAMED_1080;
class CAutoBase<XE_LogSpecs>;
enum _TAG_UNNAMED_1081;
enum XEPackage0::HistoryTargetFailureInterface::FailureCategories;
class Spinlock<213,2,1>;
enum _TAG_UNNAMED_1082;
class XeSqlPkg::glm_local_brick_undo_request;
enum _TAG_UNNAMED_1083;
enum _TAG_UNNAMED_1084;
struct __vc_attributes::readonlyAttribute;
enum _TAG_UNNAMED_1085;
struct tagDISPPARAMS;
enum _TAG_UNNAMED_1086;
struct ITypeLib;
enum _TAG_UNNAMED_1087;
class SESinglyLinkedStruct<WaitForGraphVertex,24>;
enum SOS_CacheStoreBase::configuration_flags;
class XeSqlPkg::query_rpc_server_runtime_wake_up;
enum _TAG_UNNAMED_1088;
enum _TAG_UNNAMED_1089;
class CAutoBase<ColumnDescriptor>;
enum _TAG_UNNAMED_1090;
struct tagPOINTS;
enum _TAG_UNNAMED_1091;
struct SEReplPartitionVersionSLock;
enum MemoryNode::MemoryNodeOptions;
enum _TAG_UNNAMED_1092;
struct ICreateTypeInfo;
enum _TAG_UNNAMED_1093;
enum MemoryNode::MemStatusFlags;
struct _REMOTE_NAME_INFOA;
enum CLUSTER_NETWORK_ROLE;
struct _XMM_SAVE_AREA32;
enum _TAG_UNNAMED_1094;
struct tagPELARRAY;
enum _TAG_UNNAMED_1095;
enum _TAG_UNNAMED_1096;
struct _TRANSACTION_LIST_ENTRY;
struct _TRANSACTION_LIST_INFORMATION;
enum _TAG_UNNAMED_1097;
struct ITimeAndNoticeControl;
struct std::_Pair_base<XEPackage0::BucketizingTarget::Entry * *,XEPackage0::BucketizingTarget::Entry * *>;
enum _TAG_UNNAMED_1098;
struct XactLockInfoTaskSLock;
enum _TAG_UNNAMED_1099;
class std::numeric_limits<int>;
enum _TAG_UNNAMED_1100;
union _GDI_NONREMOTE::__MIDL_IWinTypes_0002;
struct _GDI_NONREMOTE;
enum DBASYNCHPHASEENUM;
struct IWbemLevel1Login;
class TypeList<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>;
enum _TAG_UNNAMED_1101;
enum _TAG_UNNAMED_1102;
enum _TAG_UNNAMED_1103;
enum _TAG_UNNAMED_1104;
class SpinlockHolder<37,18,1>;
enum _TAG_UNNAMED_1105;
struct _USER_INFO_10;
enum XeSqlPkg::filestream_file_io_request::CustomizableSlots;
struct XidArraySLock;
enum _MEMORY_WORKING_SET_EX_LOCATION;
struct _PROFILE_SOURCE_INFO;
enum _TAG_UNNAMED_1106;
enum SOS_UserStore::configuration_flags;
enum _TAG_UNNAMED_1107;
enum _TAG_UNNAMED_1108;
enum _TAG_UNNAMED_1109;
enum _TAG_UNNAMED_1110;
enum XeSosPkg::ASSERT_TYPE;
class Spinlock<84,13,1>;
enum _TAG_UNNAMED_1111;
enum _TAG_UNNAMED_1112;
enum CLUSTER_NETWORK_ENUM;
enum _TAG_UNNAMED_1113;
enum _TAG_UNNAMED_1114;
enum _TAG_UNNAMED_1115;
class XeSqlPkg::flush_file_buffers;
enum _TAG_UNNAMED_1116;
struct tagWNODE_EVENT_ITEM;
struct tagLOCALESIGNATURE;
enum CLUSTER_PROPERTY_TYPE;
struct tagCADWORD;
enum TLSIndex;
enum _TAG_UNNAMED_1117;
class CAutoP<ColumnDescriptor>;
enum DBCOMPAREENUM;
enum _WNF_DATA_SCOPE;
enum SERIALIZE_EXCEPTIONS;
enum _TAG_UNNAMED_1118;
enum _TAG_UNNAMED_1119;
enum DBINDEX_COL_ORDERENUM;
class Spinlock<264,1,1>;
enum DBREASONENUM;
struct XE_TCollection<0,0>::TCol<0>;
enum DBREASONENUM15;
enum _TAG_UNNAMED_1120;
struct _PMD;
struct _s__RTTIBaseClassDescriptor2;
enum CSerializeContext<CMemBufFormatter>::DESERIALIZE_MODES;
class DmpPointer<SEList<SOS_Node,16> >;
enum CLUSTER_ENUM;
enum _TAG_UNNAMED_1121;
struct __vc_attributes::atl::com_interface_entryAttribute;
enum CLUSTER_PROPERTY_FORMAT;
struct _CONSOLE_SCREEN_BUFFER_INFO;
enum CLUSTER_GROUP_ENUM;
class CAutoP<XEPackage0::HistoryTarget>;
enum _KEY_VALUE_INFORMATION_CLASS;
enum XeSqlPkg::auto_stats::CustomizableSlots;
enum ISOFLAG;
enum DBKINDENUM;
class std::bad_alloc;
enum _TAG_UNNAMED_1122;
struct HIMC__;
enum ClassIdEnum;
enum _TAG_UNNAMED_1123;
enum _TAG_UNNAMED_1124;
struct __vc_attributes::atl::request_handlerAttribute;
enum XeSqlPkg::RpcReturnResult;
enum CLUSTER_CHANGE;
struct _CONNECTDLGSTRUCTW;
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION;
enum CGlobalTraceFlags::FlagUsage;
enum FileIdEnum;
enum _TAG_UNNAMED_1125;
enum _TAG_UNNAMED_1126;
class CAutoBase<EventTransformer *>;
enum _TAG_UNNAMED_1127;
struct RpcChannelPoolSLock;
enum DBPROPENUM20;
struct IAlterTable;
enum XeSqlPkg::file_write_completed::CustomizableSlots;
enum DkParametersProcessor::BOMtype;
class Spinlock<259,1,1>;
enum SESSION_KILL_EXCEPTIONS;
class XeSqlPkg::backup_restore_before_filestream;
enum _TAG_UNNAMED_1128;
enum DkParameterErrorEnum;
enum XeSqlPkg::query_plan_type;
struct tagWNODE_SINGLE_INSTANCE;
enum _TAG_UNNAMED_1129;
enum _TAG_UNNAMED_1130;
enum _TAG_UNNAMED_1131;
struct SubLatchSLock;
struct IOleInPlaceSiteEx;
enum EMDVisitorState;
enum _TAG_UNNAMED_1132;
enum _TAG_UNNAMED_1133;
enum _TAG_UNNAMED_1134;
enum RPCStream::BufferType;
class SpinlockHolder<163,3,1>;
enum _TAG_UNNAMED_1135;
enum _TAG_UNNAMED_1136;
struct IMonikerProp;
enum tagDBBOOKMARK;
enum _TAG_UNNAMED_1137;
struct WMIREGGUIDW;
enum DkParametersEnum::EnumFilter;
enum CGlobalTraceFlags::FlagScope;
struct CSessionTraceFlags::ClassName;
enum _TAG_UNNAMED_1138;
enum _TAG_UNNAMED_1139;
enum _TAG_UNNAMED_1140;
enum _TAG_UNNAMED_1141;
class Spinlock<128,7,1>;
enum _TAG_UNNAMED_1142;
struct _COMPOUND_ACCESS_ALLOWED_ACE;
enum _TAG_UNNAMED_1143;
class Spinlock<56,16,1>;
enum _TAG_UNNAMED_1144;
enum _TAG_UNNAMED_1145;
enum _TAG_UNNAMED_1146;
struct __vc_attributes::localAttribute;
enum _TAG_UNNAMED_1147;
class TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> >;
enum _TAG_UNNAMED_1148;
enum _TAG_UNNAMED_1149;
struct __vc_attributes::call_asAttribute;
struct IXMLDOMProcessingInstruction;
enum _TAG_UNNAMED_1150;
struct sConstNameAndLength;
struct _EVENT_FILTER_DESCRIPTOR;
enum _TAG_UNNAMED_1151;
class Spinlock<159,3,1>;
class UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >;
enum _TAG_UNNAMED_1152;
struct _FILE_REPARSE_POINT_INFORMATION;
enum _TAG_UNNAMED_1153;
struct _PS_ATTRIBUTE;
enum _TAG_UNNAMED_1154;
enum _TAG_UNNAMED_1155;
enum _TAG_UNNAMED_1156;
enum _TAG_UNNAMED_1157;
struct _EVENT_TRACE_HEADER;
struct _ETW_BUFFER_CONTEXT;
struct _EVENT_TRACE;
struct _EVENT_TRACE_LOGFILEW;
enum _TAG_UNNAMED_1158;
struct IPicture;
enum _TAG_UNNAMED_1159;
enum _TAG_UNNAMED_1160;
enum _TAG_UNNAMED_1161;
enum _TAG_UNNAMED_1162;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
enum _TAG_UNNAMED_1163;
enum _TAG_UNNAMED_1164;
enum _TAG_UNNAMED_1165;
enum _TAG_UNNAMED_1166;
enum _TAG_UNNAMED_1167;
enum _TAG_UNNAMED_1168;
class XeSqlPkg::oledb_query_interface;
enum _TAG_UNNAMED_1169;
enum _TAG_UNNAMED_1170;
enum _TAG_UNNAMED_1171;
class CAutoBase<XE_FileMemoryMap>;
enum _TAG_UNNAMED_1172;
enum _TAG_UNNAMED_1173;
class Spinlock<323,1,1>;
enum _TAG_UNNAMED_1174;
struct XE_TEvent<3,0,9>;
enum _TAG_UNNAMED_1175;
enum _TAG_UNNAMED_1176;
struct _SHARE_INFO_2;
enum _TAG_UNNAMED_1177;
enum _TAG_UNNAMED_1178;
struct tagRemHBITMAP;
enum _TAG_UNNAMED_1179;
enum _TAG_UNNAMED_1180;
struct IWinInetInfo;
class RollingDictionaryInterface;
enum _TAG_UNNAMED_1181;
enum _TAG_UNNAMED_1182;
enum _TAG_UNNAMED_1183;
enum _TAG_UNNAMED_1184;
enum _TAG_UNNAMED_1185;
enum _TAG_UNNAMED_1186;
enum _TAG_UNNAMED_1187;
enum _TAG_UNNAMED_1188;
enum _TAG_UNNAMED_1189;
enum _TAG_UNNAMED_1190;
struct tagLOGPALETTE;
struct tagEMRCREATEPALETTE;
enum _TAG_UNNAMED_1191;
enum _TAG_UNNAMED_1192;
enum _TAG_UNNAMED_1193;
enum _TAG_UNNAMED_1194;
enum _TAG_UNNAMED_1195;
struct _REASON_CONTEXT;
enum _TAG_UNNAMED_1196;
class XE_AutoRg<unsigned __int64>;
class XEPackage0::CounterTarget::Counters;
enum _TAG_UNNAMED_1197;
struct XETarget;
struct XE_TTarget<2>;
enum _TAG_UNNAMED_1198;
enum _TAG_UNNAMED_1199;
enum _TAG_UNNAMED_1200;
enum _TAG_UNNAMED_1201;
struct tagCALPOLESTR;
enum _TAG_UNNAMED_1202;
struct XEPackageAPI;
enum _TAG_UNNAMED_1203;
struct IOleCacheControl;
class Spinlock<62,16,1>;
enum _TAG_UNNAMED_1204;
enum _TAG_UNNAMED_1205;
class CAutoP<XE_FileSetMemoryMap>;
enum _TAG_UNNAMED_1206;
union _ULARGE_INTEGER;
struct tagSTATSTG;
enum _TAG_UNNAMED_1207;
enum _TAG_UNNAMED_1208;
enum _TAG_UNNAMED_1209;
struct IPropertyBag;
enum _TAG_UNNAMED_1210;
enum _TAG_UNNAMED_1211;
enum _TAG_UNNAMED_1212;
enum _TAG_UNNAMED_1213;
enum _TAG_UNNAMED_1214;
enum _TAG_UNNAMED_1215;
enum _TAG_UNNAMED_1216;
enum XeSqlPkg::filestream_file_io_trace::CustomizableSlots;
struct IWbemUnsecuredApartment;
struct LockFreelistSLock;
enum _TAG_UNNAMED_1217;
struct _CLIENT_ID;
struct _PORT_MESSAGE;
struct _HARDERROR_MSG;
enum _TAG_UNNAMED_1218;
class TypeListSize<TypeListNode<void *,TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > > > >;
enum _TAG_UNNAMED_1219;
enum _TAG_UNNAMED_1220;
enum _TAG_UNNAMED_1221;
enum _TAG_UNNAMED_1222;
enum _TAG_UNNAMED_1223;
enum _TAG_UNNAMED_1224;
enum _TAG_UNNAMED_1225;
struct _KEY_CACHED_INFORMATION;
enum _TAG_UNNAMED_1226;
enum _TAG_UNNAMED_1227;
struct _WIN32_FIND_DATAA;
enum _TAG_UNNAMED_1228;
enum _TAG_UNNAMED_1229;
enum _TAG_UNNAMED_1230;
enum _TAG_UNNAMED_1231;
struct _WKSTA_INFO_1053;
enum _TAG_UNNAMED_1232;
class AutoSpinlockHolder<180,3,1>;
enum _TAG_UNNAMED_1233;
struct _KEY_VALUE_FULL_INFORMATION;
enum CLUSCTL_RESOURCE_CODES;
class SEList<SOS_Task,16>;
class Spinlock<135,4,1>;
enum _TAG_UNNAMED_1234;
struct _SYSTEM_VERIFIER_TRIAGE_INFORMATION;
enum _TAG_UNNAMED_1235;
enum _TAG_UNNAMED_1236;
enum _TAG_UNNAMED_1237;
enum _DPFLTR_TYPE;
enum _TAG_UNNAMED_1238;
enum _TAG_UNNAMED_1239;
enum _TAG_UNNAMED_1240;
enum _SYSTEM_VA_TYPE;
enum DkParameter::ExecutionResult;
enum CSerializeContext<RPCStream>::DESERIALIZE_MODES;
enum _TAG_UNNAMED_1241;
enum DefBaseAllocator::Component;
enum XeSqlPkg::existing_connection::CustomizableSlots;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<2>;
enum WFMERROR;
enum _TAG_UNNAMED_1242;
enum DBBINDSTATUSENUM;
enum indicator_types;
enum XListReturnedElementSemantics;
struct _RTL_SRWLOCK;
struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION;
enum _TAG_UNNAMED_1243;
enum _TAG_UNNAMED_1244;
struct _GROUP_AFFINITY;
class GroupAffinity;
class SOS_MemoryNodeInfo;
enum SOS_DBGCLERK_DEBUGTYPE;
enum _TAG_UNNAMED_1245;
struct XStringBuilder::Marker;
enum SOS_DBG_BUFFSIZE;
enum _TAG_UNNAMED_1246;
enum PO_FIXED_WAKE_SOURCE_TYPE;
class AutoSpinlockHolder<308,1,1>;
enum _TAG_UNNAMED_1247;
enum _TAG_UNNAMED_1248;
struct _ASSEMBLY_FILE_DETAILED_INFORMATION;
enum _TAG_UNNAMED_1249;
enum _TAG_UNNAMED_1250;
enum _TAG_UNNAMED_1251;
enum _TAG_UNNAMED_1252;
struct tagWNDCLASSA;
enum _TAG_UNNAMED_1253;
enum _TAG_UNNAMED_1254;
struct IEnumOleUndoUnits;
enum _TAG_UNNAMED_1255;
enum _TAG_UNNAMED_1256;
enum CallStackHashTable::CSHTPersistStates;
enum _TAG_UNNAMED_1257;
enum _TAG_UNNAMED_1258;
struct __vc_attributes::displaybindAttribute;
enum _TAG_UNNAMED_1259;
enum _TAG_UNNAMED_1260;
class Spinlock<199,3,1>;
enum DLAttr;
enum _TAG_UNNAMED_1261;
enum _BOOT_ENTROPY_SOURCE_ID;
enum _TAG_UNNAMED_1262;
class CHdrFileInfo;
enum _TAG_UNNAMED_1263;
struct _PROCESS_ACCESS_TOKEN;
enum _TAG_UNNAMED_1264;
enum _TAG_UNNAMED_1265;
struct __vc_attributes::defaultAttribute;
struct BitOrdinal<16384>;
enum SPINLOCK_REPORT_OPTIONS;
enum ControlledResources;
enum _TAG_UNNAMED_1266;
enum XeSosPkg::TaskAbortState;
struct _TP_ALPC;
enum _TAG_UNNAMED_1267;
enum _TAG_UNNAMED_1268;
struct CONFIRMSAFETY;
enum _TAG_UNNAMED_1269;
enum _TAG_UNNAMED_1270;
enum _TAG_UNNAMED_1271;
class XE_FileSet;
enum _TAG_UNNAMED_1272;
struct ILockBytes;
enum _TAG_UNNAMED_1273;
struct tagMENUITEMINFOW;
enum _TAG_UNNAMED_1274;
enum _TAG_UNNAMED_1275;
enum _TAG_UNNAMED_1276;
enum ResQueueBase::SignalMode;
enum _TAG_UNNAMED_1277;
struct tagAspectInfo;
enum _TAG_UNNAMED_1278;
enum _TAG_UNNAMED_1279;
struct IWbemHiPerfEnum;
struct _COMMPROP;
class ISOSHost_RecursiveMutexImpl;
enum _TAG_UNNAMED_1280;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
enum _TAG_UNNAMED_1281;
struct _RTL_BITMAP;
enum _TAG_UNNAMED_1282;
enum _TAG_UNNAMED_1283;
enum _TAG_UNNAMED_1284;
enum _TAG_UNNAMED_1285;
enum _TAG_UNNAMED_1286;
enum _TAG_UNNAMED_1287;
enum _TAG_UNNAMED_1288;
class Spinlock<189,3,1>;
enum _TAG_UNNAMED_1289;
enum _TAG_UNNAMED_1290;
enum _TAG_UNNAMED_1291;
struct IAddrExclusionControl;
enum _TAG_UNNAMED_1292;
enum _TAG_UNNAMED_1293;
enum _TAG_UNNAMED_1294;
enum _TAG_UNNAMED_1295;
class AutoSpinlockHolder<287,1,1>;
enum _TAG_UNNAMED_1296;
enum _TAG_UNNAMED_1297;
class XeSqlPkg::glm_release_table_lock_exception;
class Spinlock<217,2,1>;
struct _STAT_WORKSTATION_0;
enum _TAG_UNNAMED_1298;
enum _TAG_UNNAMED_1299;
enum XeSqlPkg::progress_report_online_index_operation::CustomizableSlots;
enum _TAG_UNNAMED_1300;
struct provider_info;
enum _TAG_UNNAMED_1301;
enum _TAG_UNNAMED_1302;
struct tagBITMAP;
enum _TAG_UNNAMED_1303;
enum _TAG_UNNAMED_1304;
enum _TAG_UNNAMED_1305;
class AutoSpinlockHolder<17,19,1>;
enum _TAG_UNNAMED_1306;
enum _TAG_UNNAMED_1307;
enum _TAG_UNNAMED_1308;
enum _TAG_UNNAMED_1309;
class Spinlock<262,1,1>;
enum XeSosPkg::scheduler_monitor_deadlock_ring_buffer_recorded::CustomizableSlots;
struct CLUSPROP_PARTITION_INFO;
enum _TAG_UNNAMED_1310;
enum _TAG_UNNAMED_1311;
enum _TAG_UNNAMED_1312;
class SEList<SystemThread,144>;
struct IHttpNegotiate2;
enum _TAG_UNNAMED_1313;
enum _TAG_UNNAMED_1314;
enum _TAG_UNNAMED_1315;
enum _TAG_UNNAMED_1316;
enum _TAG_UNNAMED_1317;
enum MetadataRecordType;
enum _TAG_UNNAMED_1318;
enum _TAG_UNNAMED_1319;
enum _TAG_UNNAMED_1320;
class Spinlock<114,9,1>;
class XE_BufferMap;
enum _TAG_UNNAMED_1321;
enum _TAG_UNNAMED_1322;
struct IEnumMoniker;
enum _TAG_UNNAMED_1323;
enum _TAG_UNNAMED_1324;
enum _TAG_UNNAMED_1325;
struct tagENUMUILANG;
struct _SERVER_INFO_1572;
enum _TAG_UNNAMED_1326;
class XeSqlPkg::query_store_failed_to_capture_query;
enum _TAG_UNNAMED_1327;
class CMemCopy;
struct XEActivityId;
struct XE_ETWMof0;
enum _TAG_UNNAMED_1328;
enum _TAG_UNNAMED_1329;
struct ISpecifyPropertyPages;
enum ITaskProxy::_TaskProxyStates;
enum _TAG_UNNAMED_1330;
enum _TAG_UNNAMED_1331;
class AutoSpinlockHolder<253,1,1>;
enum _TAG_UNNAMED_1332;
enum _TAG_UNNAMED_1333;
enum _TAG_UNNAMED_1334;
union _PSAPI_WORKING_SET_EX_BLOCK;
enum _TAG_UNNAMED_1335;
struct _HARDWARE_COUNTER_DATA;
class CAutoRefc<IXMLDOMDocumentFragment>;
enum _TAG_UNNAMED_1336;
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION;
enum _TAG_UNNAMED_1337;
enum _TAG_UNNAMED_1338;
enum _TAG_UNNAMED_1339;
enum _TAG_UNNAMED_1340;
class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>;
enum _TAG_UNNAMED_1341;
class TSList<XE_DeferredEvent>;
enum _TAG_UNNAMED_1342;
class XBitmapEnum<XBitmap<StaticStorage<1024> > >;
enum _TAG_UNNAMED_1343;
enum _TAG_UNNAMED_1344;
class SEList<XListElem<SOS_DispatcherBase>,0>;
class SEList<XListEnumerator<SOS_DispatcherBase>,0>;
struct DispatcherListSLock;
class XList<SOS_DispatcherBase>;
struct XE_LogBufferHeader;
enum _TAG_UNNAMED_1345;
class RefCountImpl<CRefCounterAutoDelete>;
class XEPackage0::XE_ETWMofEntry;
enum _TAG_UNNAMED_1346;
struct _HNETWORKENUM;
enum _TAG_UNNAMED_1347;
class XE_FileSetMemoryMap;
enum _TAG_UNNAMED_1348;
class XE_AutoP<XE_IDecoder>;
class XE_IDecoder;
enum _TAG_UNNAMED_1349;
struct _XSTATE_FEATURE;
enum XeSosPkg::scheduler_monitor_system_health_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_1350;
enum _TAG_UNNAMED_1351;
struct _CRT_FLOAT;
enum _TAG_UNNAMED_1352;
enum _TAG_UNNAMED_1353;
struct IPropertyBag2;
enum _TAG_UNNAMED_1354;
struct _RUNTIME_FUNCTION;
enum XeSosPkg::wait_completed::CustomizableSlots;
enum _TAG_UNNAMED_1355;
enum _TAG_UNNAMED_1356;
enum _TAG_UNNAMED_1357;
enum _TAG_UNNAMED_1358;
enum _TAG_UNNAMED_1359;
class XE_AutoP<XEPackage0::BucketizingTarget>;
enum _TAG_UNNAMED_1360;
class XeSqlPkg::metadata_change_notification_subscriber;
enum XeSqlPkg::lock_released::CustomizableSlots;
class XE_AutoRg<XEPackage0::EventTraceQueryProperties>;
enum _TAG_UNNAMED_1361;
enum _TAG_UNNAMED_1362;
struct IInternetSession;
enum XeSosPkg::scheduler_monitor_non_yielding_rm_ring_buffer_recorded::CustomizableSlots;
struct _SERVICE_TABLE_ENTRYW;
enum _TAG_UNNAMED_1363;
enum XE_Buffer::State;
struct IEnumOLEVERB;
enum _TAG_UNNAMED_1364;
enum XeSosPkg::scheduler_monitor_non_yielding_iocp_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_1365;
enum _TAG_UNNAMED_1366;
struct HICON__;
enum _TAG_UNNAMED_1367;
enum _TAG_UNNAMED_1368;
struct XE_TEvent<4,0,10>;
class XeCloudMinPkg::async_transport_receive_message;
enum _TAG_UNNAMED_1369;
enum _TAG_UNNAMED_1370;
enum _TAG_UNNAMED_1371;
enum _TAG_UNNAMED_1372;
enum _TAG_UNNAMED_1373;
class Spinlock<22,19,1>;
class XE_AutoP<XE_AutoCustomizableAttributes>;
enum XeSosPkg::scheduler_monitor_non_yielding_ring_buffer_recorded::CustomizableSlots;
struct tag_CompileStatusInfo;
enum _TAG_UNNAMED_1374;
union _userHGLOBAL::__MIDL_IWinTypes_0003;
struct _userHGLOBAL;
enum _TAG_UNNAMED_1375;
enum _TAG_UNNAMED_1376;
enum _TAG_UNNAMED_1377;
class Spinlock<212,2,1>;
struct tagWINDOWPOS;
enum _TAG_UNNAMED_1378;
struct tagMETARECORD;
class XE_ResolvedObject<XETarget>;
enum _TAG_UNNAMED_1379;
struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
enum _TAG_UNNAMED_1380;
enum _TAG_UNNAMED_1381;
enum _TAG_UNNAMED_1382;
enum _TAG_UNNAMED_1383;
enum XE_TargetEntry::Type;
enum _TAG_UNNAMED_1384;
struct _IMAGE_OS2_HEADER;
class AutoSpinlockHolder<77,14,1>;
enum _TAG_UNNAMED_1385;
union __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005;
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001;
enum _TAG_UNNAMED_1386;
struct XSAVE_CPU_ERRATA;
class XE_AutoP<XEPackage0::CounterTarget::PackageEntry>;
class XEPackage0::CounterTarget;
struct XPortSLock;
enum _TAG_UNNAMED_1387;
enum _TAG_UNNAMED_1388;
struct IEnumSTATPROPSTG;
enum _TAG_UNNAMED_1389;
struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
class CAutoRg<XEPackage0::BucketizingTarget::Entry *>;
enum _TAG_UNNAMED_1390;
struct SysThreadDispatcherSLock;
class XeSqlPkg::hadr_db_manager_undo;
enum _TAG_UNNAMED_1391;
enum _TAG_UNNAMED_1392;
enum _TAG_UNNAMED_1393;
enum _TAG_UNNAMED_1394;
enum _TAG_UNNAMED_1395;
struct _CONTRACT_DESCRIPTION;
enum _TAG_UNNAMED_1396;
struct _SERVICE_PRESHUTDOWN_INFO;
enum _TAG_UNNAMED_1397;
enum _TAG_UNNAMED_1398;
enum _TAG_UNNAMED_1399;
enum _TAG_UNNAMED_1400;
enum _TAG_UNNAMED_1401;
struct _SE_IMPERSONATION_STATE;
struct _NDR_CORRELATION_INFO;
struct XEPackage0::IsAnyOnPredicateComparator;
enum _TAG_UNNAMED_1402;
enum _TAG_UNNAMED_1403;
class XE_ResolvedObject<XEObject>;
enum _TAG_UNNAMED_1404;
enum _TAG_UNNAMED_1405;
class XeSqlPkg::query_rx_release_buffers;
enum _TAG_UNNAMED_1406;
enum _TAG_UNNAMED_1407;
class XeSqlPkg::save_tran_starting;
enum _TAG_UNNAMED_1408;
enum _TAG_UNNAMED_1409;
struct tagWINDOWPLACEMENT;
class XeSqlPkg::xtp_storage_table_create;
enum DISPLAYCONFIG_SCANLINE_ORDERING;
enum _TAG_UNNAMED_1410;
enum _TAG_UNNAMED_1411;
enum XeSqlPkg::lock_escalation::CustomizableSlots;
struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionWithActive;
enum _TAG_UNNAMED_1412;
enum _TAG_UNNAMED_1413;
enum _TAG_UNNAMED_1414;
struct _RPC_TRANSFER_SYNTAX;
enum _TAG_UNNAMED_1415;
enum _TAG_UNNAMED_1416;
enum _TAG_UNNAMED_1417;
enum _TAG_UNNAMED_1418;
struct _MODEMDEVCAPS;
enum _TAG_UNNAMED_1419;
enum _TAG_UNNAMED_1420;
enum _TAG_UNNAMED_1421;
struct tagMENUITEMINFOA;
enum _TAG_UNNAMED_1422;
class XeSqlPkg::query_execution_range_elimination_map_build;
enum _TAG_UNNAMED_1423;
enum _TAG_UNNAMED_1424;
enum _TAG_UNNAMED_1425;
enum _TAG_UNNAMED_1426;
enum _TAG_UNNAMED_1427;
class std::_Mutex;
enum _TAG_UNNAMED_1428;
struct tagEMRBITBLT;
enum XeSqlPkg::file_write_throttled::CustomizableSlots;
class std::_Exception_ptr;
enum _TAG_UNNAMED_1429;
struct tagEMRINVERTRGN;
enum _TAG_UNNAMED_1430;
enum _TAG_UNNAMED_1431;
struct _TRANSACTION_ENLISTMENTS_INFORMATION;
enum _TAG_UNNAMED_1432;
enum _TAG_UNNAMED_1433;
struct _wireSAFEARR_BRECORD;
class XeSqlPkg::hadr_transport_replica_before_sending_build_replica_message_on_primary;
enum _TAG_UNNAMED_1434;
enum _TAG_UNNAMED_1435;
enum _TAG_UNNAMED_1436;
enum _TAG_UNNAMED_1437;
class CAutoBase<char>;
enum _TAG_UNNAMED_1438;
enum _TAG_UNNAMED_1439;
enum _TAG_UNNAMED_1440;
class CAutoP<XE_XMLObjectString>;
class XE_AutoP<XEPackage0::OrphanEntry>;
enum CallStackHashTable::INIT_STATUS;
struct XE_TEvent<4,1,8>;
class XeSqlPkg::file_read;
enum _TAG_UNNAMED_1441;
enum _TAG_UNNAMED_1442;
class std::numeric_limits<long double>;
enum _TAG_UNNAMED_1443;
struct IStream;
enum _TAG_UNNAMED_1444;
enum _TAG_UNNAMED_1445;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
class XeSqlPkg::mixed_extent_deallocation;
enum _TAG_UNNAMED_1446;
enum _TAG_UNNAMED_1447;
enum _TAG_UNNAMED_1448;
enum _TAG_UNNAMED_1449;
enum _TAG_UNNAMED_1450;
struct _ENUM_SERVICE_STATUSA;
enum _TAG_UNNAMED_1451;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,65536,524288,8,1> >;
enum _TAG_UNNAMED_1452;
enum _TAG_UNNAMED_1453;
enum _TAG_UNNAMED_1454;
enum _TAG_UNNAMED_1455;
class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
enum _TAG_UNNAMED_1456;
struct _OSVERSIONINFOA;
enum _TAG_UNNAMED_1457;
enum _TAG_UNNAMED_1458;
class XeSqlPkg::hadr_sql_instance_to_node_map_entry_created_updated;
enum _TAG_UNNAMED_1459;
class XE_BaseAllocator;
struct IsElementalHelper<CSessionTraceFlags>;
enum _TAG_UNNAMED_1460;
enum _TAG_UNNAMED_1461;
struct ISOSHost_EventManual_Prev0;
struct IXMLDSOControl;
enum _TAG_UNNAMED_1462;
struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionBase;
class XeCloudMinPkg::secondary_send_rollback_ack;
enum _TAG_UNNAMED_1463;
class XE_ILogWriteMessageHandler;
enum _TAG_UNNAMED_1464;
struct std::_Container_base0;
struct ISWbemSink;
enum _TAG_UNNAMED_1465;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<1>;
struct std::_Iterator_base12;
enum _TAG_UNNAMED_1466;
struct tagEMRSETWORLDTRANSFORM;
class Spinlock<314,1,1>;
enum SqlDkHost_ITraceFlag::ETraceFlags_Action;
struct XE_LogDefaultPolicyHeader_v0;
enum SOS_DebugBreakHookMgr::Action;
struct PPM_IDLE_STATE_BUCKET_EX;
struct PPM_IDLE_STATE_ACCOUNTING_EX;
struct XE_TEvent<4,1,3>;
class XeSqlPkg::save_tran_completed;
enum _TAG_UNNAMED_1467;
enum cpuid_results;
enum _TAG_UNNAMED_1468;
class SEHashIter<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator>;
enum _TAG_UNNAMED_1469;
class XeSqlPkg::change_tracking_cleanup;
enum XeSqlPkg::full_text_crawl_started::CustomizableSlots;
struct TxfRmReplSLock;
enum _TAG_UNNAMED_1470;
class TSList<XE_ConfigCrc>;
enum _TAG_UNNAMED_1471;
enum _TAG_UNNAMED_1472;
enum _TAG_UNNAMED_1473;
class CRefCount;
enum _TAG_UNNAMED_1474;
struct _EXCEPTION_RECORD;
enum _TAG_UNNAMED_1475;
enum _TAG_UNNAMED_1476;
enum SqlDkHost_ITraceFlag::ETraceFlags_Scope;
class CAutoP<XE_FileSet>;
enum _TAG_UNNAMED_1477;
class XeSqlPkg::query_rpc_locate_and_delete_row;
enum _TAG_UNNAMED_1478;
class XE_StreamCompare<char,XEPackage0::StringCompare<char,2>,0>;
enum _TAG_UNNAMED_1479;
enum _TAG_UNNAMED_1480;
union XECollectedEventData::DataSource;
struct XECollectedEventData;
struct __vc_attributes::varargAttribute;
class XeSqlPkg::lock_request_priority_state;
enum WaitForGraphVertex::WaitForGraphVertexColour;
struct IContinue;
enum WaitForGraph::DeadlockVictimSelectionResult;
class XeSqlPkg::query_rpc_process_cmd_fetch_data;
enum _TAG_UNNAMED_1481;
class Spinlock<76,15,1>;
enum WaitForGraphVertex::WaitForGraphVertexState;
class XeSqlPkg::log_flush_requested;
enum _TAG_UNNAMED_1482;
class CAutoRefc<IXMLDOMElement>;
enum WaitForGraph::WaitForGraphReductionResult;
enum _TAG_UNNAMED_1483;
enum WaitForGraph::DeadlockResolutionPreparationStatus;
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
enum _TAG_UNNAMED_1484;
struct StaticStorage<64>;
enum _TAG_UNNAMED_1485;
enum _TAG_UNNAMED_1486;
enum _TAG_UNNAMED_1487;
enum _TAG_UNNAMED_1488;
enum _TAG_UNNAMED_1489;
enum _TAG_UNNAMED_1490;
enum _TAG_UNNAMED_1491;
enum _TAG_UNNAMED_1492;
enum _TAG_UNNAMED_1493;
struct _SERVICE_TRIGGER;
class XeSqlPkg::sort_add_run_tracing;
enum thread_type;
enum _TAG_UNNAMED_1494;
struct tagEMRELLIPSE;
enum _TAG_UNNAMED_1495;
enum _TAG_UNNAMED_1496;
struct tagPOINTFX;
enum _TAG_UNNAMED_1497;
class CAutoHandleInternal<-1,&FindClose>;
class XE_StreamCompare<char,XEPackage0::StringCompare<char,1>,2>;
enum _TAG_UNNAMED_1498;
enum _TAG_UNNAMED_1499;
class XE_AutoP<XE_FileSetMemoryMap>;
enum _TAG_UNNAMED_1500;
enum _TAG_UNNAMED_1501;
enum _TAG_UNNAMED_1502;
enum _TAG_UNNAMED_1503;
struct XEPackage0::SourceColumn;
enum _TAG_UNNAMED_1504;
class XeSqlPkg::database_agent_local_operation_begin;
enum _TAG_UNNAMED_1505;
enum _TAG_UNNAMED_1506;
enum _TAG_UNNAMED_1507;
enum _TAG_UNNAMED_1508;
enum _TAG_UNNAMED_1509;
class CAutoRefc<XE_XMLConfiguredSession>;
enum _TAG_UNNAMED_1510;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
enum _TAG_UNNAMED_1511;
enum _TAG_UNNAMED_1512;
enum _TAG_UNNAMED_1513;
class XeSqlPkg::replica_create_reply;
enum _TAG_UNNAMED_1514;
enum XE_EngineLocator::ENGINE_SEARCH_TYPE;
class XE_AutoP<XE_Log>;
enum _TAG_UNNAMED_1515;
enum _TAG_UNNAMED_1516;
struct _CRT_DOUBLE;
enum _TAG_UNNAMED_1517;
class XeSqlPkg::hadr_wsfc_bring_ag_listener_online;
enum _TAG_UNNAMED_1518;
struct ISWbemMethodSet;
enum _TAG_UNNAMED_1519;
enum _TAG_UNNAMED_1520;
enum XeSqlPkg::sp_cache_insert::CustomizableSlots;
enum _TAG_UNNAMED_1521;
enum _TAG_UNNAMED_1522;
class CAutoP<XE_AutoCustomizableAttributes>;
enum _TAG_UNNAMED_1523;
struct _IMAGE_BASE_RELOCATION;
enum _TAG_UNNAMED_1524;
class XE_AutoRg<XE_LogSpecs::LogSpec>;
class XE_LogSpecs;
enum _TAG_UNNAMED_1525;
struct tagMODULEENTRY32W;
enum _TAG_UNNAMED_1526;
enum _TAG_UNNAMED_1527;
enum _TAG_UNNAMED_1528;
class SESListEnum<XEPackage0::XE_LiveWriter::MetadataBlockEntry,8>;
enum _TAG_UNNAMED_1529;
class XeSqlPkg::plan_guide_unsuccessful;
enum _TAG_UNNAMED_1530;
struct XeCloudMinPauseSLock;
enum XEPackage0::PairingTarget::CustomizableAttrIndex;
struct _FILE_INFO_3;
enum _TAG_UNNAMED_1531;
enum _TAG_UNNAMED_1532;
class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition>::Enum;
struct _ENUM_PAGE_FILE_INFORMATION;
enum XEPackage0::XE_FileTarget::FailureCategories;
enum XEPackage0::XE_FileTarget::CustomizableAttrIndex;
struct _FLAGGED_WORD_BLOB;
enum _TAG_UNNAMED_1533;
enum XEPackage0::HistoryTarget::HistoryTargetIndexes;
struct _ABC;
class XeCloudMinPkg::serepl_api_call;
enum _TAG_UNNAMED_1534;
enum _TAG_UNNAMED_1535;
struct tagRGBQUAD;
class XE_AutoP<XE_LogSpecs>;
enum XEPackage0::RingTarget::RingTargetIndexes;
enum _TAG_UNNAMED_1536;
class CAutoBase<unsigned char>;
enum XEPackage0::RingTarget::DeleteStopReason;
struct _devicemodeW;
enum _TAG_UNNAMED_1537;
class XE_BufferWalker<XE_IMetadata>;
class CAutoBase<XEPackage0::BucketizingTarget::Entry>;
enum _TAG_UNNAMED_1538;
struct HMENU__;
class XEPackage0::StringCompare<char,1>;
enum XEPackage0::BucketizingTarget::BucketizerTargetIndexes;
class XeSqlPkg::metadata_cache_update;
enum _TAG_UNNAMED_1539;
enum _TAG_UNNAMED_1540;
enum _TAG_UNNAMED_1541;
class XE_ResolvedObject<XEType>;
enum XEPackage0::XE_ETWMofBlock::AddResult;
class XeSqlPkg::remote_dmv_stream_get_rows_client;
enum _TAG_UNNAMED_1542;
enum _TAG_UNNAMED_1543;
class XE_ResolvedObjectXML<XEPredicateCompare>;
struct _wireSAFEARR_UNKNOWN;
struct _wireSAFEARR_VARIANT;
struct _wireSAFEARR_HAVEIID;
struct _BYTE_SIZEDARR;
struct _SHORT_SIZEDARR;
struct _HYPER_SIZEDARR;
union _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001;
enum _TAG_UNNAMED_1544;
enum XEPackage0::XE_ETWEventStream::Phase;
struct MatrixOpSLock;
enum _TAG_UNNAMED_1545;
enum _TAG_UNNAMED_1546;
enum _TAG_UNNAMED_1547;
struct tagRemHGLOBAL;
enum _TAG_UNNAMED_1548;
enum _TAG_UNNAMED_1549;
enum XE_ConstantElimination<unsigned short,4096>::STREAM_STATE;
struct _PROTOGON_STATISTICS;
class XeSqlPkg::check_message_reply;
enum _TAG_UNNAMED_1550;
enum HistoryTargetVersion;
enum DBPROPENUM21;
enum _TAG_UNNAMED_1551;
enum _TAG_UNNAMED_1552;
struct __vc_attributes::propputAttribute;
enum _TRUSTEE_FORM;
class Spinlock<184,3,1>;
enum _SYSDBG_COMMAND;
enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION;
struct _EVENT_INSTANCE_HEADER;
enum ISOLATIONLEVEL;
struct tagACCESSTIMEOUT;
enum DBCOLUMNFLAGSENUM;
struct _DRIVER_VERIFIER_THUNK_PAIRS;
enum _TAG_UNNAMED_1553;
struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionBase;
enum _TAG_UNNAMED_1554;
enum _TAG_UNNAMED_1555;
class CXRLEZeroColumn<unsigned short>;
enum XACTSTAT;
class Spinlock<332,0,0>;
class std::bad_array_new_length;
enum DBPROPENUM15;
enum DBPROPENUM;
enum ESbEndpointType;
enum _TAG_UNNAMED_1556;
enum _SE_OBJECT_TYPE;
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
enum _TAG_UNNAMED_1557;
enum _TAG_UNNAMED_1558;
enum _PROCESSINFOCLASS;
enum _PS_ATTRIBUTE_NUM;
class XEPackage0::CompareMinMax;
enum CLUSGROUP_TYPE;
struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION;
enum _TAG_UNNAMED_1559;
enum _TAG_UNNAMED_1560;
class CAutoRg<char>;
enum _PLUGPLAY_CONTROL_CLASS;
struct _MESSAGE_RESOURCE_ENTRY;
class SpinlockHolder<61,16,1>;
struct _WKSTA_INFO_1049;
enum _TAG_UNNAMED_1561;
class Spinlock<2,19,1>;
enum _INTERFACE_TYPE;
enum _KPROFILE_SOURCE;
struct XEPackage0::DictionaryPartition;
struct MasterMetadataRecord;
struct CXTimelineEntry;
class XEPackage0::HistoryTargetMetadataHelper;
struct XEPackage0::HistoryTargetStats;
class XEPackage0::HistoryTarget;
enum CLUSTER_RESOURCE_STATE_CHANGE_REASON;
enum _TAG_UNNAMED_1562;
struct _GROUP_RELATIONSHIP;
enum _TAG_UNNAMED_1563;
enum FSDBNonTransactedAccessEnum;
class TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> >;
enum _BUS_DATA_TYPE;
enum _WORKER_FACTORY_CALLBACK_CLASS;
struct tagHW_PROFILE_INFOA;
enum ACCESS_MASKENUM;
enum _TAG_UNNAMED_1564;
enum _RTL_PATH_TYPE;
struct _STRRET;
struct XEEventBufferHeader;
enum _MUTANT_INFORMATION_CLASS;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<0>;
struct XESessionContext;
enum XACTTC;
enum _TAG_UNNAMED_1565;
enum _NET_COMPUTER_NAME_TYPE;
struct __vc_attributes::length_isAttribute;
enum CLUS_CHARACTERISTICS;
struct IInternetProtocolSinkStackable;
class XE_AutoP<XEPackage0::RingTarget::PackageEntry>;
enum POWER_STATE_HANDLER_TYPE;
struct XE_TEvent<4,0,16>;
class XeSqlPkg::latch_suspend_end;
enum _TAG_UNNAMED_1566;
enum XeSqlPkg::begin_tran_completed::CustomizableSlots;
struct __vc_attributes::atl::perf_objectAttribute;
enum _CLUSTER_SETUP_PHASE;
struct _SHELLDETAILS;
enum _TP_TRACE_TYPE;
class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;
enum _DMA_WIDTH;
class SpinlockHolder<208,3,1>;
class std::numeric_limits<short>;
enum DBTYPEENUM;
struct IWbemStatusCodeText;
enum _TAG_UNNAMED_1567;
enum CLUSCTL_RESOURCE_TYPE_CODES;
enum _TAG_UNNAMED_1568;
struct XEPackage0::RingTarget::Stats;
enum DBSTATUSENUM25;
enum _FP_IEEE_OPERATION_CODE;
class SpinlockHolder<184,3,1>;
enum EErrorReportingFlags;
class AutoStateProtectors<SOSHost_CallInternalTraits>::ProtectorInitializer<SOSHost_CallInternalTraits>;
enum DBSTATUSENUM;
struct _RTL_PROCESS_BACKTRACE_INFORMATION;
struct _RTL_PROCESS_BACKTRACES;
enum _TAG_UNNAMED_1569;
enum DBMEMOWNERENUM;
enum _TAG_UNNAMED_1570;
class XE_ConfiguredSessionEnumerator;
struct tagBinaryParam;
struct std::_Container_proxy;
enum _RTL_RXACT_OPERATION;
struct IDataObject;
enum EUcsOperationStage;
enum _SE_AUDIT_OPERATION;
enum _TAG_UNNAMED_1571;
struct std::_Container_base12;
enum _MSA_INFO_STATE;
class CAutoBase<XE_AutoP<XE_Log> >;
enum CLUSCTL_NETINTERFACE_CODES;
class XeSqlPkg::hadr_db_commit_mgr_harden_still_waiting;
enum _TAG_UNNAMED_1572;
enum _SUITE_TYPE;
enum _TAG_UNNAMED_1573;
struct tagSAFEARRAYBOUND;
enum _TAG_UNNAMED_1574;
enum _TIMER_INFORMATION_CLASS;
class CSerializeContext<RPCStream>::LocalStorage<16>;
class CSerializeContext<RPCStream>;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;
enum _WNF_USER_DELIVERY_STATE;
struct _EXIT_PROCESS_DEBUG_INFO;
enum DBPROPFLAGSENUM21;
enum _TAG_UNNAMED_1575;
class SpinlockHolder<205,3,1>;
struct IPictureDisp;
enum _OBJECT_INFORMATION_CLASS;
struct tagEMRMODIFYWORLDTRANSFORM;
enum _TAG_UNNAMED_1576;
enum _IO_SESSION_STATE;
enum _TAG_UNNAMED_1577;
struct tagWCRANGE;
struct IInternetBindInfoEx;
class XeCloudMinPkg::start_copy_from_primary;
enum _CLUSTER_CSV_SWPRV_EVENT;
struct _KSYSTEM_TIME;
enum _TAG_UNNAMED_1578;
struct _EFI_DRIVER_ENTRY;
enum CLUSCTL_NODE_CODES;
enum _IO_SESSION_EVENT;
struct tagCSPLATFORM;
struct tagQUERYCONTEXT;
enum _TAG_UNNAMED_1579;
enum _PNP_QUERY_RELATION;
enum _TAG_UNNAMED_1580;
class CMemPartitioned<CMemThread<CMemObj> >;
enum _FILE_INFORMATION_CLASS;
enum _TAG_UNNAMED_1581;
enum _TAG_UNNAMED_1582;
enum _ALPC_PORT_INFORMATION_CLASS;
struct std::_Num_int_base;
enum DBPROPSTATUSENUM;
struct IChannelHook;
enum _TAG_UNNAMED_1583;
enum _TAG_UNNAMED_1584;
enum CLUSTER_NETWORK_STATE;
enum _TAG_UNNAMED_1585;
class CAutoP<ColumnTransformRule>;
enum _FP__IEEE_FORMAT;
struct IOleWindow;
struct XPRESS9_ENCODER_T;
enum CLUSTER_PROPERTY_SYNTAX;
struct IErrorInfo;
class SOS_CallResult<void>;
enum CLUSCTL_GROUP_CODES;
enum _LEARNING_MODE_LOG_LEVEL;
class AutoSpinlockHolder<58,16,1>;
enum ErrorCategory;
struct tagEMREOF;
struct _PROCESS_HEAP_INFORMATION;
struct _HEAP_INFORMATION;
struct _HEAP_EXTENDED_INFORMATION;
enum DBCOLUMNDESCFLAGSENUM;
struct _USER_INFO_1003;
enum _TAG_UNNAMED_1586;
struct IInternetZoneManagerEx;
enum DBMOVEFLAGSENUM;
struct ISynchronizeHandle;
struct tagOLEVERB;
enum DBROWSTATUSENUM;
struct _TAPE_ERASE;
enum DBBINDURLFLAGENUM;
enum _TAG_UNNAMED_1587;
enum _TAG_UNNAMED_1588;
struct IQueryAssociations;
enum DBPARTENUM;
enum _TAG_UNNAMED_1589;
struct __vc_attributes::exportAttribute;
enum DBPROPENUM25;
struct lconv;
enum _MEMORY_INFORMATION_CLASS;
enum _TAG_UNNAMED_1590;
enum EErrorDestTypes;
enum _TAG_UNNAMED_1591;
enum DBMATCHTYPEENUM;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,131072,524288,8,1> >;
class TMemoryBlockAllocator<0,131072,524288,8,1>;
enum _TAG_UNNAMED_1592;
enum DBCOMPAREOPSENUM;
class XeSqlPkg::database_stopped;
enum _TAG_UNNAMED_1593;
enum _SECTION_INFORMATION_CLASS;
struct _IMAGE_LINENUMBER;
enum DBPROPFLAGSENUM;
struct tagBIND_OPTS;
class XeSqlPkg::database_transaction_end;
struct ISWbemNamedValue;
enum _TAG_UNNAMED_1594;
struct tagLOGCOLORSPACEW;
struct tagEMRCREATECOLORSPACEW;
enum _NT_PRODUCT_TYPE;
enum _TAG_UNNAMED_1595;
struct __vc_attributes::helpstringcontextAttribute;
enum _CLUSTER_SHARED_VOLUME_BACKUP_STATE;
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA;
enum _RTL_GENERIC_COMPARE_RESULTS;
enum DBSEEKENUM;
struct tagCUSTDATAITEM;
enum _TAG_UNNAMED_1596;
class FunctionCallBinder_4<void,void (__cdecl*)(void *,SOSHost_Node *,unsigned __int64,unsigned __int64),void *,SOSHost_Node *,unsigned __int64,unsigned __int64>;
struct _FILE_MOVE_CLUSTER_INFORMATION;
enum _TAG_UNNAMED_1597;
enum _PROGRESS_INVOKE_SETTING;
enum _TAG_UNNAMED_1598;
enum _TAG_UNNAMED_1599;
struct XEConfigMapping<enum XESessionLocality>;
enum XACTHEURISTIC;
struct tagEMRPOLYPOLYLINE16;
class XeSqlPkg::catalog_metadata_cache_entry_removed;
enum _LDR_DDAG_STATE;
enum _TAG_UNNAMED_1600;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
enum _TAG_UNNAMED_1601;
enum _SYSTEM_MEMORY_LIST_COMMAND;
enum _TAG_UNNAMED_1602;
class _bstr_t;
class NullType;
enum _FSINFOCLASS;
struct tagIMEMENUITEMINFOA;
struct CXFilePageForRead;
enum _WORKERFACTORYINFOCLASS;
struct tagHW_PROFILE_INFOW;
enum _WATCHDOG_HANDLER_ACTION;
enum PO_WAKE_SOURCE_TYPE;
struct _TOKEN_MANDATORY_POLICY;
struct _TOKEN_ACCESS_INFORMATION;
enum DBPARAMIOENUM;
struct IRunnableObject;
enum _KEY_SET_INFORMATION_CLASS;
enum _TAG_UNNAMED_1603;
struct IMAGE_COR20_HEADER;
enum VERIFIER_MODE;
struct PPM_WMI_PERF_STATE;
class XeSosPkg::scheduler_destroyed;
class CAutoComBstr;
enum _TABLE_SEARCH_RESULT;
class AutoSpinlockHolder<207,3,1>;
struct _IMAGE_EXPORT_DIRECTORY;
enum DBCONVERTFLAGSENUM;
struct CXFrontendLookupTable<2,unsigned __int64,1024>::LookupEntry;
struct HadrTransportControlSLock;
enum _TAG_UNNAMED_1604;
enum _TAG_UNNAMED_1605;
enum _SHUTDOWN_ACTION;
class ClockHand::Statistic;
class ClockHand;
struct tagEMRPOLYLINE;
enum _PORT_INFORMATION_CLASS;
struct ClockAlgInternodeSyncSLock;
class ClockAlgorithm::InterNodeControlInfo;
struct XE_TEvent<3,0,3>;
class XeSqlPkg::user_event;
enum _TAG_UNNAMED_1606;
enum _TAG_UNNAMED_1607;
enum _HARDERROR_RESPONSE_OPTION;
enum _TAG_UNNAMED_1608;
enum _TAG_UNNAMED_1609;
class SOS_Ticks<QueryPerfCounterTicks,-3>;
enum _SYSTEM_PIXEL_FORMAT;
enum PLSIndex;
enum _TAG_UNNAMED_1610;
enum _TAG_UNNAMED_1611;
struct IMarshal2;
enum XeTCMPkg::tcm_map_xact_state_transition;
struct RPC_DISPATCH_TABLE;
enum _TAG_UNNAMED_1612;
struct _TAPE_GET_DRIVE_PARAMETERS;
struct ISWbemObjectEx;
class XE_ConstantElimination<unsigned short,4096>;
enum _NETSETUP_JOIN_STATUS;
enum DBPENDINGSTATUSENUM;
enum _TAG_UNNAMED_1613;
struct IPerPropertyBrowsing;
enum DBASYNCHOPENUM;
struct tagDBBINDEXT;
enum _TAG_UNNAMED_1614;
struct _STRING64;
enum _KEY_INFORMATION_CLASS;
enum _TAG_UNNAMED_1615;
enum CLUSTER_RESOURCE_RESTART_ACTION;
struct _KEY_EVENT_RECORD;
struct _LDR_DLL_LOADED_NOTIFICATION_DATA;
enum _TAG_UNNAMED_1616;
enum _TAG_UNNAMED_1617;
class XE_LogDefaultMetadataDecoder;
enum _REG_ACTION;
enum _TAG_UNNAMED_1618;
struct MENUITEMTEMPLATE;
class CacheClockHand<CacheClockAlgorithm,ClockInfo>::Fuse;
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE;
enum _TAG_UNNAMED_1619;
class CXRLEZeroColumn<unsigned int>;
enum _NET_VALIDATE_PASSWORD_TYPE;
enum _TAG_UNNAMED_1620;
enum ERROR_CONTROL;
enum _TAG_UNNAMED_1621;
enum _CM_SHARE_DISPOSITION;
struct IXMLDOMDocumentType;
enum _TAG_UNNAMED_1622;
enum _TAG_UNNAMED_1623;
class CAutoP<void>;
enum _DEBUG_CONTROL_SPACE_ITEM;
enum _IO_PRIORITY_HINT;
struct _FILE_STANDARD_INFORMATION;
enum _TAG_UNNAMED_1624;
enum _HARDERROR_RESPONSE;
enum _TAG_UNNAMED_1625;
enum _TAG_UNNAMED_1626;
class CAutoComVariant;
struct _WKSTA_INFO_102;
enum _TIMER_SET_INFORMATION_CLASS;
enum _TAG_UNNAMED_1627;
struct tagHARDWAREHOOKSTRUCT;
enum DBSTATUSENUM21;
enum _TAG_UNNAMED_1628;
struct IProcessLock;
enum RTL_BSD_ITEM_TYPE;
enum _TAG_UNNAMED_1629;
enum _PS_WAKE_REASON;
enum DBSTATUSENUM20;
enum _TAG_UNNAMED_1630;
enum _FP_IEEE_COMPARE_RESULT;
struct _RPC_ASYNC_STATE;
struct _ACTIVATION_CONTEXT_ASSEMBLY_DATA;
enum _TAG_UNNAMED_1631;
enum PS_CREATE_STATE;
enum _TAG_UNNAMED_1632;
enum _TAG_UNNAMED_1633;
enum _TAG_UNNAMED_1634;
enum DBRANGEENUM;
enum _TAG_UNNAMED_1635;
struct _SERVER_INFO_1571;
enum EMDFileType;
struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION;
enum DBCOLUMNFLAGSENUM21;
class XeSqlPkg::broker_dialog_transmission_queue_enqueue;
enum _TAG_UNNAMED_1636;
enum _TAG_UNNAMED_1637;
struct HHOOK__;
enum _JOURNAL_INFORMATION_CLASS;
enum _TAG_UNNAMED_1638;
struct AsyncIAdviseSink;
enum DBTABLESTATISTICSTYPE26;
enum _NETSETUP_NAME_TYPE;
struct _SYSTEM_ALARM_ACE;
struct _SERVER_TRANSPORT_INFO_2;
enum _TAG_UNNAMED_1639;
enum COMPARTMENT_ID;
enum _TAG_UNNAMED_1640;
enum _UNWIND_OP_CODES;
enum XeSqlPkg::file_written::CustomizableSlots;
enum SLSIndex;
struct _RPC_PROTSEQ_ENDPOINT;
enum _TAG_UNNAMED_1641;
enum _TAG_UNNAMED_1642;
class TAutoRWLock<SOS_RWLock>;
enum _EVENT_INFORMATION_CLASS;
enum _TAG_UNNAMED_1643;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
enum _TAG_UNNAMED_1644;
enum _PS_STD_HANDLE_STATE;
enum _TAG_UNNAMED_1645;
enum CLUS_RESSUBCLASS_NETWORK;
class XeSqlPkg::object_created;
enum _TAG_UNNAMED_1646;
enum DBTYPEENUM15;
enum XeSqlPkg::log_io_complete::CustomizableSlots;
struct XEObjectStorageDescriptor;
struct XEPredicateCompare;
enum XeSqlPkg::transaction_log::CustomizableSlots;
struct XMLEventTransformRule;
enum DBPARAMFLAGSENUM;
struct _TAPE_GET_MEDIA_PARAMETERS;
enum _TP_LOG_LEVEL;
enum _TAG_UNNAMED_1647;
class CAutoP<SOS_ResourcePool>;
enum DBCOPYFLAGSENUM;
struct _COVERAGE_MODULE_INFO;
enum _TAG_UNNAMED_1648;
enum _TAG_UNNAMED_1649;
struct IWinInetFileStream;
enum CLUSTER_TASK_TYPE;
enum _TAG_UNNAMED_1650;
struct IZoneIdentifier;
enum CLUSTER_GROUP_STATE;
struct IWbemClientConnectionTransport;
enum _TAG_UNNAMED_1651;
struct OneProcSimNodeContextListSLock;
struct TGuardMask<0>;
enum CLUSTER_RESOURCE_STATE;
struct tagEMRCREATEMONOBRUSH;
class CAutoBase<XECustomizableAttribute>;
class LegacyNumaConfig;
enum _TAG_UNNAMED_1652;
enum _MEMORY_RESERVE_TYPE;
union __m256i;
class XeSqlPkg::oiblob_cleanup_begin;
enum _TAG_UNNAMED_1653;
enum _FUNCTION_TABLE_TYPE;
enum _TAG_UNNAMED_1654;
struct tagGLYPHSET;
enum _TAG_UNNAMED_1655;
struct _CONTEXT;
class IsArray<int>;
enum _EVENT_TYPE;
class XeSqlPkg::drop_file_committed;
enum _TAG_UNNAMED_1656;
enum _TAG_UNNAMED_1657;
enum _TAG_UNNAMED_1658;
enum _CLUSTER_SETUP_PHASE_SEVERITY;
enum _TAG_UNNAMED_1659;
class Spinlock<236,1,1>;
enum _ERROR_SEVERITY_VALUE;
enum _TAG_UNNAMED_1660;
struct tagI_RpcProxyCallbackInterface;
enum CLUSTER_GROUP_PRIORITY;
enum _TAG_UNNAMED_1661;
enum CLUSTER_NETINTERFACE_STATE;
class XeSqlPkg::xtp_offline_checkpoint_bfc_update;
enum _TAG_UNNAMED_1662;
struct CLUS_CSV_MAINTENANCE_MODE_INFO;
enum DBDEFERRABILITYENUM;
enum _MAINTENANCE_MODE_TYPE_ENUM;
enum _TAG_UNNAMED_1663;
struct _IMAGE_DEBUG_MISC;
struct _SYSTEM_BIGPOOL_INFORMATION;
enum _TAG_UNNAMED_1664;
enum DBPARAMFLAGSENUM20;
struct IInternetProtocolInfo;
enum _LINK_TRACKING_INFORMATION_TYPE;
enum _TAG_UNNAMED_1665;
struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition;
enum _TIMER_TYPE;
struct _USER_OTHER_INFO;
enum _TAG_UNNAMED_1666;
enum _TAG_UNNAMED_1667;
enum DBCONVERTFLAGSENUM20;
enum _TAG_UNNAMED_1668;
enum CLUSTER_NODE_STATE;
struct ITypeChangeEvents;
enum _TAG_UNNAMED_1669;
enum _TAG_UNNAMED_1670;
enum CLUSTER_GROUP_AUTOFAILBACK_TYPE;
enum _MSA_INFO_LEVEL;
enum _TAG_UNNAMED_1671;
enum _SE_SIGNING_LEVEL;
enum _TAG_UNNAMED_1672;
enum _TAG_UNNAMED_1673;
class XE_AutoP<unsigned short>;
enum _PROCESS_TLS_INFORMATION_TYPE;
enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;
struct IAdviseSink;
struct _RTL_HEAP_WALK_ENTRY;
enum _TAG_UNNAMED_1674;
enum DBCOLUMNFLAGS15ENUM;
enum _TAG_UNNAMED_1675;
enum _TAG_UNNAMED_1676;
struct PPM_WMI_IDLE_STATE;
enum _EXCEPTION_LOG_TYPE;
struct _IMAGE_SYMBOL_EX;
enum _TAG_UNNAMED_1677;
struct IOleInPlaceObjectWindowless;
class CAutoP<XEPackage0::XE_LiveTarget>;
enum _TAG_UNNAMED_1678;
enum _TAG_UNNAMED_1679;
struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::AutoReset;
enum _FILESHARE_CHANGE_ENUM;
enum _TAG_UNNAMED_1680;
struct IHttpNegotiate;
enum DBDELETEFLAGSENUM;
struct tagBITMAPCOREHEADER;
struct tagRGBTRIPLE;
struct tagBITMAPCOREINFO;
enum DBRANGEENUM20;
enum _TAG_UNNAMED_1681;
enum _FP__IEEE_ROUNDING_MODE;
struct StaticStorage<14>;
struct XBitmap<StaticStorage<14> >;
enum _TAG_UNNAMED_1682;
enum XeSqlPkg::file_read_throttled::CustomizableSlots;
enum XeCMPkg::cma_map_enlistment_state;
enum _TAG_UNNAMED_1683;
enum _TAG_UNNAMED_1684;
class XStringXmlBuilder;
enum XeCMPkg::cm_map_enlistment_state;
enum _TAG_UNNAMED_1685;
enum _SEMAPHORE_INFORMATION_CLASS;
enum _POWER_STATE_TYPE;
class XeSqlPkg::database_uncontained_usage;
enum _TAG_UNNAMED_1686;
enum _TAG_UNNAMED_1687;
enum DBUPDELRULEENUM;
enum XeSqlPkg::rollback_tran_starting::CustomizableSlots;
enum DBPROPENUM26;
struct _SERVER_ALIAS_INFO_0;
enum XACTRM;
struct _AUDIT_ENTRY;
enum _TAG_UNNAMED_1688;
enum _WATCHDOG_INFORMATION_CLASS;
struct _TRACE_PROFILE_INTERVAL;
enum _TAG_UNNAMED_1689;
enum CLUSTER_QUORUM_VALUE;
enum _TAG_UNNAMED_1690;
enum DBPROPFLAGSENUM26;
enum _TAG_UNNAMED_1691;
enum _TAG_UNNAMED_1692;
enum GLSIndex;
struct tagMSGBOXPARAMSW;
enum _TAG_UNNAMED_1693;
enum DBBINDFLAGENUM;
enum _TAG_UNNAMED_1694;
class CAutoP<EventTransformer *>;
enum _TAG_UNNAMED_1695;
enum XeSqlPkg::EStatsUpdateStatus;
class XE_AutoP<XEPackage0::HistoryTarget>;
enum XeSqlPkg::HadrDDLFailoverExecState;
class XeSqlPkg::mbr_lmd_read_backup_config_type;
enum _TAG_UNNAMED_1696;
class WaitInfoDescription;
enum XeSqlPkg::ChangeTrackingEventId;
struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION;
enum _TAG_UNNAMED_1697;
enum _TAG_UNNAMED_1698;
class _bstr_t::Data_t;
class MemObjCache<CMemThread<CMemDbg<CMemProc> > >;
enum XeSqlPkg::ETrcFulltextRecompileReason;
enum XeSqlPkg::EQueryVmContextName;
struct IBindProtocol;
enum _TAG_UNNAMED_1699;
enum XeSqlPkg::ETrcRecompileCause;
struct _PS_CPU_QUOTA_QUERY_ENTRY;
enum _TAG_UNNAMED_1700;
enum _TAG_UNNAMED_1701;
enum XeSqlPkg::BrokerConvAction;
struct _ENLISTMENT_BASIC_INFORMATION;
enum _TAG_UNNAMED_1702;
enum XeSqlPkg::TransactionActivity;
enum _TAG_UNNAMED_1703;
enum XeSqlPkg::DDLType;
enum _TAG_UNNAMED_1704;
struct _ENCRYPTED_DATA_INFO;
enum XeSqlPkg::HadrCriticalSectionEntryState;
struct XEError;
class XE_SteamConstantElimination<unsigned short,4096>;
enum XeSqlPkg::QNTemplateActivity;
class XeSqlPkg::glm_lock_release_begin;
enum _TAG_UNNAMED_1705;
enum XeSqlPkg::OibLobCleanupResult;
enum _TAG_UNNAMED_1706;
enum _TAG_UNNAMED_1707;
struct _SERVER_INFO_1575;
enum XeSqlPkg::query_scan_shutdown_state;
class XeSqlPkg::log_flush_complete;
enum _TAG_UNNAMED_1708;
enum _TAG_UNNAMED_1709;
enum _TAG_UNNAMED_1710;
enum XeSqlPkg::AbortAfterWait;
struct NonYieldAnalysisSLock;
struct tagWNODE_EVENT_REFERENCE;
enum XeSqlPkg::BrokerActivationState;
class SOS_RingBuffer;
class CRefCounterAutoDelete;
enum _TAG_UNNAMED_1711;
struct _ENABLE_TRACE_PARAMETERS;
enum XeSqlPkg::PageCompressionFailure;
class SEListEnum<SOS_RingBuffer,0>;
class QueryPerfCounterTicks;
enum XeSqlPkg::dml_change_process_stage;
enum _TAG_UNNAMED_1712;
enum XeSqlPkg::DOPCalculationStage;
struct _PHYSICAL_CHANNEL_RUN;
struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION;
class XeSqlPkg::xtp_offline_checkpoint_before_log_record;
enum _TAG_UNNAMED_1713;
enum XeSqlPkg::EOnlineIndexBuildStage;
enum XeSqlPkg::EDOPStatementType;
enum _TAG_UNNAMED_1714;
enum _TAG_UNNAMED_1715;
union _userHMETAFILEPICT::__MIDL_IWinTypes_0005;
enum XeSqlPkg::EStmtStartingState;
class CMemThread<CMemDbg<PageHeapMemObj> >;
enum XeSqlPkg::EThreadCacheContextDiffType;
class CXRLEZeroColumn<unsigned __int64>;
enum XeSqlPkg::BrokerConvGroupAction;
struct IOleInPlaceObject;
enum XeSqlPkg::OptimizerTimeoutType;
struct _SERVICE_PREFERRED_NODE_INFO;
enum XeSqlPkg::QNBackgroundThreadActivity;
struct __PUBLIC_OBJECT_TYPE_INFORMATION;
enum _TAG_UNNAMED_1716;
class TObjectPool<TMRUContainer<Worker,0>,ObjectPoolSLock>;
enum XeSqlPkg::login::CustomizableSlots;
enum XeSqlPkg::QNSubscriptionActivity;
class Spinlock<99,11,1>;
enum XeSqlPkg::RWMode;
struct tagNEWTEXTMETRICW;
enum XeSqlPkg::query_optimizer_tree_id;
enum XeSqlPkg::LockPriorityState;
enum _TAG_UNNAMED_1717;
enum XeSqlPkg::HadrWsfcChangeNotifierStatus;
struct IEnumConnections;
enum _TAG_UNNAMED_1718;
enum _TAG_UNNAMED_1719;
enum XeSqlPkg::ConnectivityTraceTdsFlag;
struct ISWbemSecurity;
enum XeSqlPkg::PlanAffectingConvertType;
struct IMultiQI;
struct _CM_PARTIAL_RESOURCE_DESCRIPTOR;
enum XeSqlPkg::DBSQLStmtType;
enum _TAG_UNNAMED_1720;
enum _TAG_UNNAMED_1721;
class XE_DeserializedMetadata;
enum XeSqlPkg::BrokerMessageType;
class MemObjCache<CMemThread<CMemDbg<PageHeapMemObj> > >;
enum XeSqlPkg::ELockEscalationCause;
enum _TAG_UNNAMED_1722;
struct std::_DebugHeapTag_t;
struct PPM_THERMAL_POLICY_EVENT;
enum XeSqlPkg::HadrMutexAcquisitionState;
enum XeSqlPkg::TraceFlgType;
enum XeSqlPkg::EServerStartStopOperation;
enum _TAG_UNNAMED_1723;
enum _TAG_UNNAMED_1724;
enum XeSqlPkg::EDatabaseFileType;
class CXColumn<unsigned short>;
enum XeSqlPkg::HekatonAPIs;
struct tagEMRPLGBLT;
enum XeSqlPkg::TRC_XACT_EVT_XACT_TYPE;
enum XeSqlPkg::ESortWarningType;
struct tagARRAYDESC;
enum _TAG_UNNAMED_1725;
class XE_AutoEngineRWLock;
enum XeSqlPkg::PageLocation;
struct _IMAGE_OPTIONAL_HEADER64;
struct _BOOT_ENTROPY_SOURCE_NT_RESULT;
enum XeSqlPkg::AlwaysOnDDLOpcode;
class UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >;
enum _TAG_UNNAMED_1726;
enum XeSqlPkg::BrokerMessageSource;
enum _TAG_UNNAMED_1727;
struct _EVENT_BASIC_INFORMATION;
enum XeSqlPkg::ServerMemoryChange;
enum _TAG_UNNAMED_1728;
struct IXMLHttpRequest;
enum XeSqlPkg::AlwaysOnDDLAction;
enum XeSqlPkg::BrokerMirrorRouteState;
class XeSqlPkg::broker_transmission_timer_reset;
enum _TAG_UNNAMED_1729;
enum _TAG_UNNAMED_1730;
struct _STARTUPINFOW;
enum XeSqlPkg::GroupCommitFlushReason;
struct IOleControl;
enum XeSqlPkg::ESendOrReceive;
class XE_CXTimelineFile;
enum XeSqlPkg::LogBlkAllocType;
union _FILE_SEGMENT_ELEMENT;
struct SXTPSLock;
enum XeSqlPkg::IndexRebuildPhase;
enum _TAG_UNNAMED_1731;
enum XeSqlPkg::MessageOpCode;
enum _TAG_UNNAMED_1732;
enum XeSqlPkg::DDLOpcode;
enum XeSqlPkg::EPreconnectType;
class CMemDbg<CMemLargePageObj>;
enum XeSqlPkg::EHashWarningType;
class MemObjCache<CMemThread<CMemLargePageObj> >;
enum XeSqlPkg::FileIoMode;
struct _RTL_BALANCED_NODE;
struct _LDR_DATA_TABLE_ENTRY;
enum _TAG_UNNAMED_1733;
enum XeSqlPkg::EQPJobFailureType;
struct _JOB_SET_ARRAY;
enum _TAG_UNNAMED_1734;
enum _TAG_UNNAMED_1735;
class CAutoBase<XE_PackageFilter>;
enum DBRESULTFLAGENUM;
struct _SID_AND_ATTRIBUTES_HASH;
enum _ATOM_INFORMATION_CLASS;
enum DBSOURCETYPEENUM;
enum _TAG_UNNAMED_1736;
enum _SYSTEM_FIRMWARE_TABLE_ACTION;
enum _TAG_UNNAMED_1737;
enum _TAG_UNNAMED_1738;
struct IPersistStream;
enum _WAIT_TYPE;
struct _HREGBATCH;
enum XACTCONST;
struct XE_TEvent<4,2,9>;
class XeSqlPkg::file_write_enqueued;
enum _TAG_UNNAMED_1739;
class Spinlock<200,3,1>;
enum _TP_DEBUG_CLASS;
enum _TAG_UNNAMED_1740;
enum _TAG_UNNAMED_1741;
enum DBCOLUMNFLAGSENUM26;
struct EventTypeEntry;
struct _div_t;
enum XeCloudMinPkg::OperationState;
enum _TAG_UNNAMED_1742;
enum DBPROPOPTIONSENUM;
class Spinlock<112,9,1>;
enum DBROWSTATUSENUM20;
enum _TAG_UNNAMED_1743;
struct __vc_attributes::last_isAttribute;
enum XeDvmPkg::DvmEventLocation;
enum _TAG_UNNAMED_1744;
struct PPM_IDLESTATE_EVENT;
enum DBLITERALENUM21;
struct _s__RTTICompleteObjectLocator2;
enum _IO_COMPLETION_INFORMATION_CLASS;
struct XE_TArray<XEDataAttribute,0>;
struct XE_TEvent<4,0,0>;
class XeSqlPkg::query_rpc_server_cache_flush;
enum _TAG_UNNAMED_1745;
class SpinlockHolder<25,19,1>;
class DmpPointer<SEList<PageHeapPageInfo,40> >;
enum CLUS_RESSUBCLASS;
enum CLUS_RESSUBCLASS_STORAGE;
struct _SERVICE_DELAYED_AUTO_START_INFO;
enum _TAG_UNNAMED_1746;
enum DBSOURCETYPEENUM25;
enum EGlobalDbIdSpecial;
class SEListEnum<TCallback<void,int *,NullType,NullType,NullType>,0>;
enum TX_MISC_CONSTANTS;
class XeCloudMinPkg::start_new_epoch;
enum _TAG_UNNAMED_1747;
enum IExecSql::EParamAttributes;
class CAutoP<XE_FileMemoryMap>;
enum _MULTIPLE_TRUSTEE_OPERATION;
enum CLUS_FLAGS;
struct IPropertyPage2;
enum _TAG_UNNAMED_1748;
enum _TAG_UNNAMED_1749;
enum _TAG_UNNAMED_1750;
enum EDatabaseIdsSpecial;
class BitManip<unsigned __int64>;
enum _TAG_UNNAMED_1751;
struct _CACHE_RELATIONSHIP;
struct IRpcChannelBuffer;
class CAutoP<XE_IDecoder>;
enum _TAG_UNNAMED_1752;
struct val_context;
struct CloudPartitionCopyStatsSLock;
enum _TAG_UNNAMED_1753;
enum _TAG_UNNAMED_1754;
class Spinlock<193,3,1>;
enum _TAG_UNNAMED_1755;
class DmpPointer<SystemThread>;
enum _TAG_UNNAMED_1756;
enum _TAG_UNNAMED_1757;
enum _TAG_UNNAMED_1758;
struct tagPIXELFORMATDESCRIPTOR;
struct tagEMRPIXELFORMAT;
class CAutoBase<XE_LoadedLibrary>;
enum _TAG_UNNAMED_1759;
struct _ENUM_SERVICE_STATUS_PROCESSA;
enum _TAG_UNNAMED_1760;
enum _TAG_UNNAMED_1761;
enum XE_Buffer::ReservationResult;
struct IXMLDOMCDATASection;
enum _TAG_UNNAMED_1762;
enum _TAG_UNNAMED_1763;
struct ISynchronizeContainer;
enum _TAG_UNNAMED_1764;
enum _TAG_UNNAMED_1765;
enum EFeatureSwitches;
enum _TAG_UNNAMED_1766;
enum _TAG_UNNAMED_1767;
enum _TAG_UNNAMED_1768;
class SpinlockHolder<319,1,1>;
enum ESessionKillReason;
class DmpPointer<__int64>;
enum _TAG_UNNAMED_1769;
class XeSqlPkg::add_file_in_master;
enum _TAG_UNNAMED_1770;
class DmpListIterator<SystemThread,8,160,SEList<SystemThread,160>,8,65535>;
enum _TAG_UNNAMED_1771;
enum _TAG_UNNAMED_1772;
class AutoSpinlockHolder<169,3,1>;
struct __vc_attributes::library_blockAttribute;
enum _TAG_UNNAMED_1773;
class DmpPointer<TList<SOS_Node,SystemThread,160,TListSLock> >;
enum _TAG_UNNAMED_1774;
enum _TAG_UNNAMED_1775;
struct UDATE;
enum _TAG_UNNAMED_1776;
enum _TAG_UNNAMED_1777;
enum _TAG_UNNAMED_1778;
enum _TAG_UNNAMED_1779;
struct _QUOTA_LIMITS;
enum _TAG_UNNAMED_1780;
class Spinlock<88,12,1>;
enum _TAG_UNNAMED_1781;
struct _SYSTEM_PROCESS_ID_INFORMATION;
enum _TAG_UNNAMED_1782;
enum _TAG_UNNAMED_1783;
enum _TAG_UNNAMED_1784;
enum _TAG_UNNAMED_1785;
enum _TAG_UNNAMED_1786;
class AutoSpinlockHolder<61,16,1>;
enum _TAG_UNNAMED_1787;
struct _TOKEN_LINKED_TOKEN;
enum _TAG_UNNAMED_1788;
enum _TAG_UNNAMED_1789;
enum _TAG_UNNAMED_1790;
enum XE_TargetEntry::CreateFlags;
class CAutoBase<XE_LogSpecs::LogSpec>;
enum _TAG_UNNAMED_1791;
struct _RPC_SECURITY_QOS_V2_W;
enum _TAG_UNNAMED_1792;
enum _TAG_UNNAMED_1793;
class SpinlockHolder<70,16,1>;
enum _TAG_UNNAMED_1794;
class XE_ResolvedObject<XEPredicateCompare>;
enum _TAG_UNNAMED_1795;
struct IInternetZoneManager;
enum _TAG_UNNAMED_1796;
enum _TAG_UNNAMED_1797;
enum _TAG_UNNAMED_1798;
struct IViewObject2;
class SpinlockHolder<155,3,1>;
class XE_ResolvedObject<XEPredicateSource>;
enum _TAG_UNNAMED_1799;
struct _FIBER;
enum _TAG_UNNAMED_1800;
class XeDvmPkg::dvm_work_item_enqueued;
class SESimpleObjectPoolStats;
class CMemPartitioned<CMemThread<CMemDbg<CMemObj> > >;
enum _TAG_UNNAMED_1801;
enum _TAG_UNNAMED_1802;
struct tagDRAWITEMSTRUCT;
enum _TAG_UNNAMED_1803;
union std::_String_val<char,std::allocator<char> >::_Bxty;
class std::allocator<char>;
class std::_String_val<char,std::allocator<char> >;
class DmpPointer<SEList<SOS_RingBuffer,0> >;
enum _TAG_UNNAMED_1804;
struct std::unary_function<std::error_condition,unsigned __int64>;
class XeSqlPkg::latch_demoted;
enum BMLFailures;
enum _TAG_UNNAMED_1805;
enum _TAG_UNNAMED_1806;
enum _TAG_UNNAMED_1807;
enum _TAG_UNNAMED_1808;
struct __vc_attributes::satypeAttribute;
enum _TAG_UNNAMED_1809;
enum _TAG_UNNAMED_1810;
enum _TAG_UNNAMED_1811;
enum _TAG_UNNAMED_1812;
class SpinlockBase;
enum _TAG_UNNAMED_1813;
enum _TAG_UNNAMED_1814;
struct XE_StaticPackage<64>::LocaleEntry;
class XE_StaticPackage<64>;
enum _TAG_UNNAMED_1815;
enum _TAG_UNNAMED_1816;
enum _TAG_UNNAMED_1817;
struct _MALLOC_FREE_STRUCT;
enum _TAG_UNNAMED_1818;
struct XE_TArray<XECustomizableAttribute,3>;
struct XE_TEvent<4,3,12>;
enum _TAG_UNNAMED_1819;
class DumpTListIterator<GroupList,512>;
enum _TAG_UNNAMED_1820;
class XeSqlPkg::hadr_scan_state;
enum XeSqlPkg::preconnect_starting::CustomizableSlots;
enum _TAG_UNNAMED_1821;
struct IInternet;
enum _TAG_UNNAMED_1822;
enum _TAG_UNNAMED_1823;
enum _TAG_UNNAMED_1824;
class TSinglyLinkedList<XE_ConfigCrc>;
class IfNullTypeZeroElseOne<SystemAffinity>;
enum _TAG_UNNAMED_1825;
enum _TAG_UNNAMED_1826;
class XE_SessionMetadata::PackageEnumerator;
enum _TAG_UNNAMED_1827;
struct IBindCtx;
enum _TAG_UNNAMED_1828;
enum _TAG_UNNAMED_1829;
enum _TAG_UNNAMED_1830;
enum _TAG_UNNAMED_1831;
enum vc_attributes::AccessType;
enum _TAG_UNNAMED_1832;
class std::numeric_limits<unsigned short>;
enum _TAG_UNNAMED_1833;
struct tagCAUB;
struct tagCAI;
struct tagCAUI;
struct tagCAL;
struct tagCAH;
struct tagCAUH;
struct tagCAFLT;
struct tagCADBL;
struct tagCABOOL;
struct tagCASCODE;
struct tagCADATE;
struct tagCAFILETIME;
struct tagCACLSID;
struct tagCACLIPDATA;
struct tagCABSTR;
struct tagCABSTRBLOB;
struct tagCALPSTR;
struct tagCALPWSTR;
struct tagPROPVARIANT;
struct ColumnStoreHashtableSLock;
enum _TAG_UNNAMED_1834;
class XeSqlPkg::batch_hash_table_build_bailout;
enum _TAG_UNNAMED_1835;
enum _TAG_UNNAMED_1836;
enum _TAG_UNNAMED_1837;
enum _TAG_UNNAMED_1838;
enum _TAG_UNNAMED_1839;
enum _TAG_UNNAMED_1840;
class SOS_BlockersEnumeratorCreator;
enum _TAG_UNNAMED_1841;
struct IProvideRuntimeContext;
enum _TAG_UNNAMED_1842;
enum _TAG_UNNAMED_1843;
enum _TAG_UNNAMED_1844;
enum _TAG_UNNAMED_1845;
enum _TAG_UNNAMED_1846;
enum _TAG_UNNAMED_1847;
struct XEPredicateCompareValidate;
class XeSqlPkg::database_option_change;
enum _TAG_UNNAMED_1848;
enum _TAG_UNNAMED_1849;
enum _TAG_UNNAMED_1850;
enum SA_AttrTarget;
struct ActionTransformRule;
struct XMLActionTransformRule;
enum _TAG_UNNAMED_1851;
enum _TAG_UNNAMED_1852;
struct __vc_attributes::atl::soap_headerAttribute;
class DmpPointer<_NT_TIB>;
enum _TAG_UNNAMED_1853;
class DumpTListIterator<TList<SchedulerManager,Worker,16,TListSLock>,2048>;
enum _TAG_UNNAMED_1854;
struct XE_TEvent<4,1,4>;
class XeSqlPkg::feature_extension;
enum _TAG_UNNAMED_1855;
enum _TAG_UNNAMED_1856;
class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
enum _TAG_UNNAMED_1857;
enum _TAG_UNNAMED_1858;
struct tagMSGBOXPARAMSA;
enum _TAG_UNNAMED_1859;
enum _TAG_UNNAMED_1860;
struct XE_TEvent<4,0,9>;
class XeSqlPkg::recovery_skip_checkpoint;
enum _TAG_UNNAMED_1861;
enum _TAG_UNNAMED_1862;
enum _TAG_UNNAMED_1863;
enum _TAG_UNNAMED_1864;
enum _TAG_UNNAMED_1865;
enum _TAG_UNNAMED_1866;
enum _TAG_UNNAMED_1867;
class Spinlock<122,7,1>;
enum _TAG_UNNAMED_1868;
enum _TAG_UNNAMED_1869;
struct IXMLDOMSchemaCollection;
enum _TAG_UNNAMED_1870;
enum _TAG_UNNAMED_1871;
class std::numeric_limits<double>;
enum _TAG_UNNAMED_1872;
enum _TAG_UNNAMED_1873;
enum _TAG_UNNAMED_1874;
class XeSqlPkg::query_rpc_process_cmd_lob_action;
enum _TAG_UNNAMED_1875;
struct _KERNEL_USER_TIMES;
struct IRpcOptions;
enum _TAG_UNNAMED_1876;
enum _TAG_UNNAMED_1877;
enum _TAG_UNNAMED_1878;
enum _TAG_UNNAMED_1879;
enum _TAG_UNNAMED_1880;
enum _TAG_UNNAMED_1881;
enum _TAG_UNNAMED_1882;
class XE_AutoP<XE_ConfigCrc>;
enum _TAG_UNNAMED_1883;
enum _TAG_UNNAMED_1884;
enum _TAG_UNNAMED_1885;
enum _TAG_UNNAMED_1886;
class AutoSpinlockHolder<62,16,1>;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >;
enum _TAG_UNNAMED_1887;
enum _TAG_UNNAMED_1888;
class DumpTListIterator<MemObjProxyLinkList,4194304>;
enum _TAG_UNNAMED_1889;
struct IWbemContext;
class XeSqlPkg::database_open;
enum _TAG_UNNAMED_1890;
enum _TAG_UNNAMED_1891;
enum _TAG_UNNAMED_1892;
struct PPM_PERFSTATE_EVENT;
enum _TAG_UNNAMED_1893;
class DmpListIterator<MemObjProxy,8,0,SEList<MemObjProxy,0>,8,4194304>;
enum _TAG_UNNAMED_1894;
class XeSqlPkg::fulltext_reorganize_phase1_source_fragment;
enum _TAG_UNNAMED_1895;
struct _BrowseDlgConfig_HA;
enum _TAG_UNNAMED_1896;
enum _TAG_UNNAMED_1897;
class AutoSpinlockHolder<155,3,1>;
struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute;
enum _TAG_UNNAMED_1898;
enum _TAG_UNNAMED_1899;
struct __vc_attributes::stringAttribute;
enum _TAG_UNNAMED_1900;
struct XEStorage;
enum _TAG_UNNAMED_1901;
enum _TAG_UNNAMED_1902;
class XeSqlPkg::query_rpc_fetch_next_row;
struct XEActionDataDescriptor;
struct XECollectedActionData;
class DmpPointer<MemObjProxy>;
enum _TAG_UNNAMED_1903;
enum _TAG_UNNAMED_1904;
enum _TAG_UNNAMED_1905;
struct _TOKEN_DEVICE_CLAIMS;
class XeSqlPkg::metadata_create_global_temp_object;
enum _TAG_UNNAMED_1906;
enum _TAG_UNNAMED_1907;
enum _TAG_UNNAMED_1908;
class XeSqlPkg::glm_local_brick_undo_response;
enum _TAG_UNNAMED_1909;
class Spinlock<4,19,1>;
enum _TAG_UNNAMED_1910;
class XeSqlPkg::security_authentication_perf_login;
enum _TAG_UNNAMED_1911;
enum _TAG_UNNAMED_1912;
enum _TAG_UNNAMED_1913;
enum _TAG_UNNAMED_1914;
struct IComThreadingInfo;
enum IExecSql::EExchangeParameterType;
enum _TAG_UNNAMED_1915;
enum _TAG_UNNAMED_1916;
enum _TAG_UNNAMED_1917;
enum _TAG_UNNAMED_1918;
enum EDBRefType;
enum _TAG_UNNAMED_1919;
enum _TAG_UNNAMED_1920;
struct XE_TEvent<4,1,2>;
class XeSqlPkg::rollback_tran_starting;
enum _TAG_UNNAMED_1921;
enum _TAG_UNNAMED_1922;
enum EEngineSku;
enum _TAG_UNNAMED_1923;
enum _TAG_UNNAMED_1924;
enum _TAG_UNNAMED_1925;
class Spinlock<242,1,1>;
struct XE_TArray<XEType *,0>;
enum _TAG_UNNAMED_1926;
enum _TAG_UNNAMED_1927;
class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::List;
struct TransmitterThrottledConnectSLock;
enum _TAG_UNNAMED_1928;
enum _TAG_UNNAMED_1929;
enum _TAG_UNNAMED_1930;
enum _TAG_UNNAMED_1931;
struct HINSTANCE__;
enum _TAG_UNNAMED_1932;
class XeSqlPkg::latch_suspend_warning;
enum _TAG_UNNAMED_1933;
enum _TAG_UNNAMED_1934;
enum _TAG_UNNAMED_1935;
enum ShutdownOption;
enum _TAG_UNNAMED_1936;
struct XEPackage;
struct __vc_attributes::ms_unionAttribute;
enum _TAG_UNNAMED_1937;
enum _TAG_UNNAMED_1938;
class XeSqlPkg::column_store_index_build_throttle;
enum _TAG_UNNAMED_1939;
enum _TAG_UNNAMED_1940;
class SOSExceptionTranslatorSetter<SOSExceptionNoTranslatorSetter>;
struct XE_TMap<324>;
enum _TAG_UNNAMED_1941;
enum SOS_CacheUserExtensionBase::getentry_options;
struct _tagHIT_LOGGING_INFO;
enum _TAG_UNNAMED_1942;
enum _TAG_UNNAMED_1943;
class XeSqlPkg::consumer_send_correlated_params;
enum _TAG_UNNAMED_1944;
enum _TAG_UNNAMED_1945;
struct _WOW64_FLOATING_SAVE_AREA;
enum _TAG_UNNAMED_1946;
enum _TAG_UNNAMED_1947;
enum _TAG_UNNAMED_1948;
enum _TAG_UNNAMED_1949;
enum _TAG_UNNAMED_1950;
enum _TAG_UNNAMED_1951;
enum _TAG_UNNAMED_1952;
enum _TAG_UNNAMED_1953;
enum _TAG_UNNAMED_1954;
enum _TAG_UNNAMED_1955;
enum _TAG_UNNAMED_1956;
enum _TAG_UNNAMED_1957;
class XeSqlPkg::plan_affecting_convert;
class SpinlockHolder<68,16,1>;
enum _TAG_UNNAMED_1958;
struct _LDR_ENUM_RESOURCE_ENTRY;
enum _TAG_UNNAMED_1959;
class CAutoP<XE_LogDeserializedPackage>;
struct BackupContextSLock;
enum _TAG_UNNAMED_1960;
enum _TAG_UNNAMED_1961;
enum _TAG_UNNAMED_1962;
enum _TAG_UNNAMED_1963;
struct _MIDL_STUB_DESC;
struct ITableCreation;
enum _TAG_UNNAMED_1964;
enum _TAG_UNNAMED_1965;
struct _TP_TIMER;
enum _TAG_UNNAMED_1966;
enum _TAG_UNNAMED_1967;
enum _TAG_UNNAMED_1968;
class SEList<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>,0>;
enum _TAG_UNNAMED_1969;
union _userCLIPFORMAT::__MIDL_IWinTypes_0001;
struct _userCLIPFORMAT;
enum _TAG_UNNAMED_1970;
class DmpPointer<SOS_RingBuffer>;
enum _TAG_UNNAMED_1971;
enum _TAG_UNNAMED_1972;
class XeSqlPkg::after_snipping_some_log;
enum _TAG_UNNAMED_1973;
enum _TAG_UNNAMED_1974;
enum _TAG_UNNAMED_1975;
enum _TAG_UNNAMED_1976;
class DmpPointer<StackFrames<16> >;
enum _TAG_UNNAMED_1977;
class XeSqlPkg::database_agent_request_end;
enum _TAG_UNNAMED_1978;
struct __GENERIC_BINDING_INFO;
enum _TAG_UNNAMED_1979;
enum _TAG_UNNAMED_1980;
class Spinlock<205,3,1>;
struct IInternetSecurityManagerEx;
enum _TAG_UNNAMED_1981;
enum _TAG_UNNAMED_1982;
enum _TAG_UNNAMED_1983;
class TCacheStore<CacheClockAlgorithm>::CacheEntryProxy;
enum _TAG_UNNAMED_1984;
enum _TAG_UNNAMED_1985;
enum _TAG_UNNAMED_1986;
struct _FILE_GET_EA_INFORMATION;
enum _TAG_UNNAMED_1987;
enum _TAG_UNNAMED_1988;
enum _TAG_UNNAMED_1989;
enum _TAG_UNNAMED_1990;
struct IOleLink;
enum _TAG_UNNAMED_1991;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>;
enum _TAG_UNNAMED_1992;
enum _TAG_UNNAMED_1993;
enum _TAG_UNNAMED_1994;
enum _TAG_UNNAMED_1995;
struct _PROCESS_KEEPALIVE_COUNT_INFORMATION;
enum XeSqlPkg::commit_tran_starting::CustomizableSlots;
class Spinlock<34,18,1>;
enum _TAG_UNNAMED_1996;
enum _TAG_UNNAMED_1997;
class GroupNumaConfig;
class StackFrames<16>;
enum _TAG_UNNAMED_1998;
enum _TAG_UNNAMED_1999;
enum _TAG_UNNAMED_2000;
enum vc_attributes::YesNoMaybe;
enum _TAG_UNNAMED_2001;
enum XeSqlPkg::alwayson_ddl_executed::CustomizableSlots;
struct IPersistMemory;
class CAutoBase<PackageEntry>;
enum _TAG_UNNAMED_2002;
class PageHeapPageInfo;
enum _TAG_UNNAMED_2003;
struct IWbemConnectorLogin;
class SESimpleObjectPool<WaitForGraphEdge>;
class SESimpleObjectPool<WaitForGraphStronglyConnectedComponent>;
class WaitForGraphObjectAllocator;
enum _TAG_UNNAMED_2004;
enum _TAG_UNNAMED_2005;
enum _TAG_UNNAMED_2006;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
enum _TAG_UNNAMED_2007;
struct ITransaction;
enum _TAG_UNNAMED_2008;
class XeSqlPkg::databases_bulk_insert_throughput;
struct SOSHOST_CACHESTORE_COOKIE__;
enum _TAG_UNNAMED_2009;
enum _TAG_UNNAMED_2010;
class WaitForGraphVertex;
enum _TAG_UNNAMED_2011;
enum _TAG_UNNAMED_2012;
enum _TAG_UNNAMED_2013;
class std::bad_exception;
enum _TAG_UNNAMED_2014;
enum _TAG_UNNAMED_2015;
enum _TAG_UNNAMED_2016;
struct __vc_attributes::retvalAttribute;
enum _TAG_UNNAMED_2017;
class PmoDumpHelper;
enum _TAG_UNNAMED_2018;
enum _TAG_UNNAMED_2019;
enum XeSqlPkg::lock_redo_blocked::CustomizableSlots;
struct _IMAGE_DOS_HEADER;
struct _PROCESSOR_IDLE_STATE;
enum _TAG_UNNAMED_2020;
enum _TAG_UNNAMED_2021;
enum _TAG_UNNAMED_2022;
class DmpPointer<enum SOS_TIMERRESULT __cdecl(void *,unsigned long *,unsigned long *)>;
enum _TAG_UNNAMED_2023;
class XeSqlPkg::cursor_recompile;
struct XEAction;
enum _TAG_UNNAMED_2024;
struct IFillLockBytes;
enum _TAG_UNNAMED_2025;
enum _TAG_UNNAMED_2026;
struct tagEMRFILLPATH;
struct std::tr1::_Nil;
enum _TAG_UNNAMED_2027;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
enum _TAG_UNNAMED_2028;
enum XeSqlPkg::sp_statement_starting::CustomizableSlots;
enum _TAG_UNNAMED_2029;
class DmpPointer<enum SOS_TIMERRESULT (__cdecl*)(void *,unsigned long *,unsigned long *)>;
enum _TAG_UNNAMED_2030;
enum _TAG_UNNAMED_2031;
struct _NDR_EXPR_DESC;
class AutoSpinlockHolder<269,1,1>;
enum _TAG_UNNAMED_2032;
class SpinlockHolder<14,19,1>;
enum _TAG_UNNAMED_2033;
struct _SERVER_INFO_599;
enum _TAG_UNNAMED_2034;
struct _NDR_PROC_CONTEXT;
enum _TAG_UNNAMED_2035;
struct HKL__;
class XE_EventLocation;
enum _TAG_UNNAMED_2036;
class TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > >;
enum _TAG_UNNAMED_2037;
struct ISynchronizeMutex;
enum _TAG_UNNAMED_2038;
enum _TAG_UNNAMED_2039;
enum _TAG_UNNAMED_2040;
enum _TAG_UNNAMED_2041;
enum _TAG_UNNAMED_2042;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >;
enum _TAG_UNNAMED_2043;
class DmpPointer<MemObjProxyLinkList>;
enum _TAG_UNNAMED_2044;
class XeSqlPkg::hadr_filestream_message_dir_create;
struct MemoryObjectFactory::MemObjUsesFree<CMemObj>;
enum _TAG_UNNAMED_2045;
enum _TAG_UNNAMED_2046;
enum _TAG_UNNAMED_2047;
class EventManualInternal<PaddedSpinlock<SuspendQueueSLock> >;
struct std::_Iterator_base0;
enum _TAG_UNNAMED_2048;
enum _TAG_UNNAMED_2049;
enum _TAG_UNNAMED_2050;
enum _TAG_UNNAMED_2051;
struct std::_Num_base;
enum _TAG_UNNAMED_2052;
enum _TAG_UNNAMED_2053;
enum _TAG_UNNAMED_2054;
enum _TAG_UNNAMED_2055;
enum _TAG_UNNAMED_2056;
struct tagHELPWININFOA;
struct _REPARSE_POINT_INFORMATION;
enum _TAG_UNNAMED_2057;
class XeSqlPkg::thread_cache_cache_event;
enum _TAG_UNNAMED_2058;
enum _TAG_UNNAMED_2059;
enum XeSqlPkg::lock_deadlock_chain::CustomizableSlots;
struct IMoniker;
enum _TAG_UNNAMED_2060;
struct _wireBRECORD;
enum _TAG_UNNAMED_2061;
enum _TAG_UNNAMED_2062;
class AutoSpinlockHolder<63,16,1>;
enum _TAG_UNNAMED_2063;
class XeDvmPkg::dvm_work_item_dequeued;
enum _TAG_UNNAMED_2064;
enum _TAG_UNNAMED_2065;
enum _TAG_UNNAMED_2066;
struct _RESOURCEMANAGER_BASIC_INFORMATION;
enum _TAG_UNNAMED_2067;
enum _TAG_UNNAMED_2068;
enum _TAG_UNNAMED_2069;
enum _TAG_UNNAMED_2070;
enum _TAG_UNNAMED_2071;
struct BITMAPV4HEADER;
enum _TAG_UNNAMED_2072;
struct ISWbemObject;
struct IWinInetCacheHints;
enum _TAG_UNNAMED_2073;
struct tagENUMLOGFONTEXA;
struct tagENUMLOGFONTEXDVA;
class AutoSpinlockHolder<326,1,1>;
enum _TAG_UNNAMED_2074;
enum _TAG_UNNAMED_2075;
class Spinlock<307,1,1>;
enum _TAG_UNNAMED_2076;
class CAutoRegKey;
enum _TAG_UNNAMED_2077;
class XeDvmPkg::dvm_quiesced;
enum _TAG_UNNAMED_2078;
struct XEPredicateSource;
class XE_XMLObjectString;
enum _TAG_UNNAMED_2079;
struct IDummyHICONIncluder;
class CMD5Hash;
class Hash128;
enum _TAG_UNNAMED_2080;
enum _TAG_UNNAMED_2081;
enum _TAG_UNNAMED_2082;
enum _TAG_UNNAMED_2083;
struct tagLOGBRUSH32;
enum _TAG_UNNAMED_2084;
enum _TAG_UNNAMED_2085;
struct ISWbemLocator;
enum _TAG_UNNAMED_2086;
enum _TAG_UNNAMED_2087;
enum _TAG_UNNAMED_2088;
enum _TAG_UNNAMED_2089;
enum _TAG_UNNAMED_2090;
enum _TAG_UNNAMED_2091;
class SpinlockHolder<255,1,1>;
enum _TAG_UNNAMED_2092;
enum _TAG_UNNAMED_2093;
enum _TAG_UNNAMED_2094;
enum _TAG_UNNAMED_2095;
enum _TAG_UNNAMED_2096;
class SEList<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>,0>;
enum _TAG_UNNAMED_2097;
enum _TAG_UNNAMED_2098;
enum _TAG_UNNAMED_2099;
struct IXMLDocument;
enum _TAG_UNNAMED_2100;
enum _TAG_UNNAMED_2101;
enum _TAG_UNNAMED_2102;
enum _TAG_UNNAMED_2103;
enum _TAG_UNNAMED_2104;
class Spinlock<294,1,1>;
enum _TAG_UNNAMED_2105;
struct _PORT_VIEW;
enum _TAG_UNNAMED_2106;
enum _TAG_UNNAMED_2107;
enum _TAG_UNNAMED_2108;
enum _TAG_UNNAMED_2109;
enum _TAG_UNNAMED_2110;
struct tagBIND_OPTS2;
struct ThrottlingSettingByNameSLock;
struct HSTR__;
enum _TAG_UNNAMED_2111;
union _userHMETAFILE::__MIDL_IWinTypes_0004;
struct _userHMETAFILE;
enum _TAG_UNNAMED_2112;
enum _TAG_UNNAMED_2113;
enum _TAG_UNNAMED_2114;
enum _TAG_UNNAMED_2115;
class CAutoBase<void>;
struct PPM_IDLE_ACCOUNTING_EX;
enum _TAG_UNNAMED_2116;
struct tagEMRSTRETCHBLT;
struct tagCANDIDATELIST;
enum _TAG_UNNAMED_2117;
enum _TAG_UNNAMED_2118;
class TypeListNode<enum WakeUpReason,TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
enum _TAG_UNNAMED_2119;
enum _TAG_UNNAMED_2120;
struct IWbemHiPerfProvider;
enum _TAG_UNNAMED_2121;
enum _TAG_UNNAMED_2122;
enum _TAG_UNNAMED_2123;
struct RmtSessCacheSLock;
enum _TAG_UNNAMED_2124;
class SpinlockHolder<173,3,1>;
struct tagEMREXCLUDECLIPRECT;
enum _TAG_UNNAMED_2125;
class XeCloudMinPkg::async_transport_message_content;
struct StaticStorage<1>;
struct XBitmap<StaticStorage<1> >;
class SpinlockHolder<253,1,1>;
enum _TAG_UNNAMED_2126;
enum _TAG_UNNAMED_2127;
struct ISurrogateService;
enum _TAG_UNNAMED_2128;
enum _TAG_UNNAMED_2129;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<4>;
struct _HOTPATCH_HOOK_DESCRIPTOR;
struct _SYSTEM_HOTPATCH_CODE_INFORMATION;
enum _TAG_UNNAMED_2130;
enum _TAG_UNNAMED_2131;
enum _TAG_UNNAMED_2132;
enum _TAG_UNNAMED_2133;
enum _TAG_UNNAMED_2134;
enum _TAG_UNNAMED_2135;
enum _TAG_UNNAMED_2136;
enum _TAG_UNNAMED_2137;
enum _TAG_UNNAMED_2138;
enum _TAG_UNNAMED_2139;
enum _TAG_UNNAMED_2140;
struct IWbemProviderInit;
enum _TAG_UNNAMED_2141;
enum _TAG_UNNAMED_2142;
enum _TAG_UNNAMED_2143;
struct IOleInPlaceActiveObject;
enum _TAG_UNNAMED_2144;
class XeSqlPkg::fulltext_reorganize_start;
enum XeSqlPkg::sp_cache_miss::CustomizableSlots;
enum _TAG_UNNAMED_2145;
class XeSqlPkg::hadr_dump_log_block;
enum XeSqlPkg::module_end::CustomizableSlots;
enum _TAG_UNNAMED_2146;
class XeSqlPkg::query_rx_allocating_buffers;
enum _TAG_UNNAMED_2147;
enum _TAG_UNNAMED_2148;
struct _MESSAGE_RESOURCE_BLOCK;
enum _TAG_UNNAMED_2149;
enum _TAG_UNNAMED_2150;
class Spinlock<138,4,1>;
enum _TAG_UNNAMED_2151;
enum _TAG_UNNAMED_2152;
struct tagSERIALKEYSA;
enum _TAG_UNNAMED_2153;
enum _TAG_UNNAMED_2154;
struct ISWbemSinkEvents;
enum _TAG_UNNAMED_2155;
enum _TAG_UNNAMED_2156;
enum _TAG_UNNAMED_2157;
enum _TAG_UNNAMED_2158;
enum _TAG_UNNAMED_2159;
class XE_PublishedDescriptor;
enum _TAG_UNNAMED_2160;
enum _TAG_UNNAMED_2161;
struct IXMLError;
enum _TAG_UNNAMED_2162;
struct HadrArDbrMgrSLock;
enum _TAG_UNNAMED_2163;
class XeSqlPkg::recovery_unit_new_dbsegment_id_set;
enum _TAG_UNNAMED_2164;
enum _TAG_UNNAMED_2165;
enum _TAG_UNNAMED_2166;
enum _TAG_UNNAMED_2167;
class CAutoBase<XE_AutoP<XEPackage0::BucketizingTarget::Entry> >;
enum _TAG_UNNAMED_2168;
enum _TAG_UNNAMED_2169;
class CXColumn<unsigned char>;
enum _TAG_UNNAMED_2170;
struct _PSINJECTDATA;
enum _TAG_UNNAMED_2171;
enum _TAG_UNNAMED_2172;
struct IRpcProxyBuffer;
enum _TAG_UNNAMED_2173;
class CAutoP<XE_DeserializedMetadata>;
enum _TAG_UNNAMED_2174;
enum _TAG_UNNAMED_2175;
enum _TAG_UNNAMED_2176;
enum _TAG_UNNAMED_2177;
class XeSqlPkg::logreader_start_scan;
enum _TAG_UNNAMED_2178;
enum _TAG_UNNAMED_2179;
enum _TAG_UNNAMED_2180;
enum _TAG_UNNAMED_2181;
enum _TAG_UNNAMED_2182;
enum _TAG_UNNAMED_2183;
enum _TAG_UNNAMED_2184;
struct _CONSOLE_CURSOR_INFO;
class RefCountImpl<XEPackage0::XE_LiveWriter>;
enum _TAG_UNNAMED_2185;
enum _TAG_UNNAMED_2186;
enum _TAG_UNNAMED_2187;
enum _TAG_UNNAMED_2188;
enum _TAG_UNNAMED_2189;
enum _TAG_UNNAMED_2190;
enum _TAG_UNNAMED_2191;
enum _TAG_UNNAMED_2192;
struct _IMAGE_VXD_HEADER;
class XeSqlPkg::database_segment_state_change_notification;
enum _TAG_UNNAMED_2193;
enum _TAG_UNNAMED_2194;
enum _TAG_UNNAMED_2195;
enum _TAG_UNNAMED_2196;
enum _TAG_UNNAMED_2197;
enum _TAG_UNNAMED_2198;
class CAutoRg<XE_AutoRg<unsigned short> >;
enum _TAG_UNNAMED_2199;
enum _TAG_UNNAMED_2200;
struct tagRAWINPUTDEVICE;
class SpinlockHolder<289,1,1>;
enum _TAG_UNNAMED_2201;
enum _TAG_UNNAMED_2202;
enum _TAG_UNNAMED_2203;
enum _TAG_UNNAMED_2204;
struct XEMessage;
enum XeSqlPkg::begin_tran_starting::CustomizableSlots;
struct _OSVERSIONINFOEXA;
enum _TAG_UNNAMED_2205;
enum _TAG_UNNAMED_2206;
struct _RTL_LFG_RNG_STATE;
enum _TAG_UNNAMED_2207;
enum _TAG_UNNAMED_2208;
union _MCI_STATS;
enum _TAG_UNNAMED_2209;
struct _s__CatchableType;
enum _TAG_UNNAMED_2210;
struct IPropertySetStorage;
enum _TAG_UNNAMED_2211;
struct _IMAGE_SYMBOL;
enum _TAG_UNNAMED_2212;
enum _TAG_UNNAMED_2213;
class AutoSpinlockHolder<47,18,1>;
enum _TAG_UNNAMED_2214;
struct _WKSTA_INFO_1062;
enum _TAG_UNNAMED_2215;
enum _TAG_UNNAMED_2216;
enum _TAG_UNNAMED_2217;
enum _TAG_UNNAMED_2218;
class XE_CXTimelineReader;
enum _TAG_UNNAMED_2219;
struct ISWbemLastError;
enum _TAG_UNNAMED_2220;
enum _TAG_UNNAMED_2221;
struct tagMINIMIZEDMETRICS;
class XE_AutoP<XE_FileBufferEnum>;
enum _TAG_UNNAMED_2222;
class XEPackage0::OrphanKey;
class XEPackage0::OrphanEntry;
enum _TAG_UNNAMED_2223;
struct IOleClientSite;
enum _TAG_UNNAMED_2224;
enum _TAG_UNNAMED_2225;
enum _TAG_UNNAMED_2226;
enum _TAG_UNNAMED_2227;
enum _TAG_UNNAMED_2228;
struct _RTL_RXACT_CONTEXT;
enum _TAG_UNNAMED_2229;
class AutoSpinlockHolder<88,12,1>;
enum _TAG_UNNAMED_2230;
enum _TAG_UNNAMED_2231;
enum _TAG_UNNAMED_2232;
enum _TAG_UNNAMED_2233;
struct std::tr1::_Get_align<short>;
enum _TAG_UNNAMED_2234;
enum _TAG_UNNAMED_2235;
struct IErrorLog;
enum _TAG_UNNAMED_2236;
enum _TAG_UNNAMED_2237;
class XE_AutoP<ColumnDescriptor>;
enum XeSqlPkg::query_pre_execution_showplan::CustomizableSlots;
struct _PROCESS_WS_WATCH_INFORMATION;
enum _TAG_UNNAMED_2238;
class CAutoBase<XEPackage0::OrphanEntry>;
enum _TAG_UNNAMED_2239;
enum _TAG_UNNAMED_2240;
enum _TAG_UNNAMED_2241;
class XeSqlPkg::recovery_in_rollback;
enum _TAG_UNNAMED_2242;
enum _TAG_UNNAMED_2243;
struct _EXCEPTION_DEBUG_INFO;
enum _TAG_UNNAMED_2244;
struct XE_TArray<XECustomizableAttribute,6>;
struct XE_TEvent<4,6,6>;
class XeSqlPkg::filestream_file_io_request;
enum _TAG_UNNAMED_2245;
enum XeSqlPkg::full_text_crawl_stopped::CustomizableSlots;
class XeSqlPkg::dtc_transaction;
enum _TAG_UNNAMED_2246;
enum _TAG_UNNAMED_2247;
struct IXMLElementCollection;
enum _TAG_UNNAMED_2248;
struct IPSFactoryBuffer;
enum _TAG_UNNAMED_2249;
enum _TAG_UNNAMED_2250;
struct _SYSTEM_AUDIT_CALLBACK_ACE;
enum _TAG_UNNAMED_2251;
enum _TAG_UNNAMED_2252;
enum _TAG_UNNAMED_2253;
enum _TAG_UNNAMED_2254;
enum _TAG_UNNAMED_2255;
enum _TAG_UNNAMED_2256;
enum _TAG_UNNAMED_2257;
enum _TAG_UNNAMED_2258;
enum _TAG_UNNAMED_2259;
enum _TAG_UNNAMED_2260;
struct IXMLElement2;
class XeSqlPkg::collect_all_UDFInvokeExternal;
enum _TAG_UNNAMED_2261;
enum _TAG_UNNAMED_2262;
enum _TAG_UNNAMED_2263;
enum _TAG_UNNAMED_2264;
enum XeSqlPkg::sp_server_diagnostics_component_result::CustomizableSlots;
struct __vc_attributes::async_uuidAttribute;
enum _TAG_UNNAMED_2265;
class CAutoP<PackageEntry>;
class TChildEnumerator<GlobalSchedulerEnum,SOS_Scheduler,TEnumerator<TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock> >,MemObjProxy>;
enum _TAG_UNNAMED_2266;
enum _TAG_UNNAMED_2267;
class CAutoP<ActionTransformRule>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<4>;
enum _TAG_UNNAMED_2268;
enum _TAG_UNNAMED_2269;
class AESFastHash128;
enum _TAG_UNNAMED_2270;
enum _TAG_UNNAMED_2271;
enum _TAG_UNNAMED_2272;
struct TClassName<double,1,0>;
enum _TAG_UNNAMED_2273;
class XeSqlPkg::oledb_provider_information;
enum _TAG_UNNAMED_2274;
enum _TAG_UNNAMED_2275;
enum _TAG_UNNAMED_2276;
enum _TAG_UNNAMED_2277;
enum _TAG_UNNAMED_2278;
class CAutoRg<unsigned short>;
enum _TAG_UNNAMED_2279;
enum _TAG_UNNAMED_2280;
struct EVENT_INSTANCE_INFO;
enum _TAG_UNNAMED_2281;
enum _TAG_UNNAMED_2282;
struct _SHARE_INFO_0;
enum _TAG_UNNAMED_2283;
enum _TAG_UNNAMED_2284;
struct BitOrdinal<4096>;
enum _TAG_UNNAMED_2285;
enum _TAG_UNNAMED_2286;
enum XeSqlPkg::broker_queue_disabled::CustomizableSlots;
struct ISourcesRowset;
enum _TAG_UNNAMED_2287;
class XeSqlPkg::hadr_wsfc_change_notifier_status;
enum _TAG_UNNAMED_2288;
enum _TAG_UNNAMED_2289;
struct IFontDisp;
enum _TAG_UNNAMED_2290;
enum _TAG_UNNAMED_2291;
enum _TAG_UNNAMED_2292;
enum _TAG_UNNAMED_2293;
enum _TAG_UNNAMED_2294;
enum _TAG_UNNAMED_2295;
struct IWbemEventSink;
enum _TAG_UNNAMED_2296;
enum _TAG_UNNAMED_2297;
enum _TAG_UNNAMED_2298;
struct IProcessInitControl;
enum _TAG_UNNAMED_2299;
enum _TAG_UNNAMED_2300;
enum _TAG_UNNAMED_2301;
struct BitOrdinal<16>;
enum _TAG_UNNAMED_2302;
enum _TAG_UNNAMED_2303;
enum _TAG_UNNAMED_2304;
enum _TAG_UNNAMED_2305;
enum _TAG_UNNAMED_2306;
class CAutoBase<XE_Log>;
enum _TAG_UNNAMED_2307;
enum _TAG_UNNAMED_2308;
struct _KCRM_PROTOCOL_BLOB;
enum _TAG_UNNAMED_2309;
enum _TAG_UNNAMED_2310;
enum _TAG_UNNAMED_2311;
enum _TAG_UNNAMED_2312;
enum _TAG_UNNAMED_2313;
struct __vc_attributes::atl::perfmonAttribute;
enum _TAG_UNNAMED_2314;
class CXFileReaderInterfaceNative;
enum XeSqlPkg::lock_timeout::CustomizableSlots;
enum _TAG_UNNAMED_2315;
enum _TAG_UNNAMED_2316;
struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
enum _TAG_UNNAMED_2317;
class CAutoRefc<XEPackage0::XE_LiveWriter>;
enum _TAG_UNNAMED_2318;
enum _TAG_UNNAMED_2319;
struct tagDBOBJECT;
enum _TAG_UNNAMED_2320;
enum _TAG_UNNAMED_2321;
enum _TAG_UNNAMED_2322;
enum _TAG_UNNAMED_2323;
enum _TAG_UNNAMED_2324;
enum _TAG_UNNAMED_2325;
enum _TAG_UNNAMED_2326;
enum _TAG_UNNAMED_2327;
enum _TAG_UNNAMED_2328;
struct std::identity<std::strstreambuf>;
struct tagMONITORINFOEXW;
enum _TAG_UNNAMED_2329;
enum _TAG_UNNAMED_2330;
struct tagIMECHARPOSITION;
enum _TAG_UNNAMED_2331;
enum _TAG_UNNAMED_2332;
enum _TAG_UNNAMED_2333;
enum _TAG_UNNAMED_2334;
struct _RTL_PROCESS_LOCK_INFORMATION;
enum _TAG_UNNAMED_2335;
enum XeSqlPkg::save_tran_starting::CustomizableSlots;
enum _TAG_UNNAMED_2336;
enum _TAG_UNNAMED_2337;
enum _TAG_UNNAMED_2338;
struct HSPRITE__;
enum _TAG_UNNAMED_2339;
class AutoSpinlockHolder<18,19,1>;
enum _TAG_UNNAMED_2340;
struct IXMLDOMImplementation;
enum _TAG_UNNAMED_2341;
enum _TAG_UNNAMED_2342;
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
enum _TAG_UNNAMED_2343;
struct _STAT_SERVER_0;
enum _TAG_UNNAMED_2344;
class SpinlockHolder<137,4,1>;
enum _TAG_UNNAMED_2345;
enum _TAG_UNNAMED_2346;
class AutoSpinlockHolder<112,9,1>;
enum _TAG_UNNAMED_2347;
enum _TAG_UNNAMED_2348;
enum _TAG_UNNAMED_2349;
enum _TAG_UNNAMED_2350;
enum _TAG_UNNAMED_2351;
class XE_AutoFormatOSError;
enum _TAG_UNNAMED_2352;
enum _TAG_UNNAMED_2353;
struct _MESSAGE_RESOURCE_DATA;
enum _TAG_UNNAMED_2354;
enum _TAG_UNNAMED_2355;
struct __vc_attributes::helper_attributes::multi_valueAttribute;
struct XE_TArray<XECustomizableAttribute,8>;
struct XE_TTarget<8>;
enum _TAG_UNNAMED_2356;
struct _OBJECT_ATTRIBUTES;
enum _TAG_UNNAMED_2357;
enum _TAG_UNNAMED_2358;
struct _TRACE_LOGFILE_HEADER32;
enum _TAG_UNNAMED_2359;
class Spinlock<233,1,1>;
enum _TAG_UNNAMED_2360;
enum _TAG_UNNAMED_2361;
class SOS_CacheStoreBase::ExtendedStatistic;
enum _TAG_UNNAMED_2362;
enum _TAG_UNNAMED_2363;
enum _TAG_UNNAMED_2364;
enum _TAG_UNNAMED_2365;
enum _TAG_UNNAMED_2366;
enum _TAG_UNNAMED_2367;
struct IROTData;
enum _TAG_UNNAMED_2368;
struct _WIN32_FIND_DATAW;
enum _TAG_UNNAMED_2369;
struct SERVICE_STATUS_HANDLE__;
enum _TAG_UNNAMED_2370;
enum _TAG_UNNAMED_2371;
enum _TAG_UNNAMED_2372;
enum _TAG_UNNAMED_2373;
struct XPipeDemandSLock;
enum _TAG_UNNAMED_2374;
enum _TAG_UNNAMED_2375;
enum _TAG_UNNAMED_2376;
struct _EISA_MEMORY_TYPE;
enum _TAG_UNNAMED_2377;
enum _TAG_UNNAMED_2378;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
enum _TAG_UNNAMED_2379;
struct tagSCROLLBARINFO;
enum _TAG_UNNAMED_2380;
struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT;
enum _TAG_UNNAMED_2381;
enum _TAG_UNNAMED_2382;
struct _TRANSACTION_NOTIFICATION;
enum _TAG_UNNAMED_2383;
enum _TAG_UNNAMED_2384;
struct tagCOMPOSITIONFORM;
enum _TAG_UNNAMED_2385;
struct _TAPE_SET_POSITION;
struct CXFilePageBase;
enum _TAG_UNNAMED_2386;
enum _TAG_UNNAMED_2387;
enum _TAG_UNNAMED_2388;
enum _TAG_UNNAMED_2389;
struct XE_TArray<XECustomizableAttribute,5>;
enum _TAG_UNNAMED_2390;
enum _TAG_UNNAMED_2391;
struct tagEMRSETARCDIRECTION;
class Spinlock<72,16,1>;
enum _TAG_UNNAMED_2392;
class SpinlockHolder<9,19,1>;
enum _TAG_UNNAMED_2393;
struct _SYSTEM_SET_TIME_ADJUST_INFORMATION;
enum _TAG_UNNAMED_2394;
enum _TAG_UNNAMED_2395;
struct IMofCompiler;
enum _TAG_UNNAMED_2396;
enum _TAG_UNNAMED_2397;
class WcsSafeFakeType2;
enum _TAG_UNNAMED_2398;
struct _CONNECTDLGSTRUCTA;
class XE_AutoP<ActionTransformRule>;
enum _TAG_UNNAMED_2399;
struct IPersistStorage;
enum _TAG_UNNAMED_2400;
enum _TAG_UNNAMED_2401;
enum XeSqlPkg::object_altered::CustomizableSlots;
enum XeSqlPkg::lock_redo_unblocked::CustomizableSlots;
enum _TAG_UNNAMED_2402;
class XE_AutoP<EventTransformer *>;
enum _TAG_UNNAMED_2403;
struct OldestEntry;
enum _TAG_UNNAMED_2404;
struct IViewSort;
enum _TAG_UNNAMED_2405;
class AutoSpinlockHolder<102,10,1>;
enum _TAG_UNNAMED_2406;
enum _TAG_UNNAMED_2407;
enum _TAG_UNNAMED_2408;
enum _TAG_UNNAMED_2409;
struct std::iterator_traits<signed char>;
struct IXMLAttribute;
enum _TAG_UNNAMED_2410;
enum _TAG_UNNAMED_2411;
enum _TAG_UNNAMED_2412;
enum _TAG_UNNAMED_2413;
enum FederatedType;
enum _TAG_UNNAMED_2414;
struct _CONSOLE_SCREEN_BUFFER_INFOEX;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO;
struct _SYSTEM_HANDLE_INFORMATION;
enum _TAG_UNNAMED_2415;
enum _TAG_UNNAMED_2416;
struct _UNIVERSAL_NAME_INFOW;
class CAutoP<XE_BufferMap>;
enum _TAG_UNNAMED_2417;
enum _TAG_UNNAMED_2418;
enum _TAG_UNNAMED_2419;
enum _TAG_UNNAMED_2420;
struct _TRACE_GUID_INFO;
struct _PDH_FMT_COUNTERVALUE;
class CPerfmonCounter;
enum _TAG_UNNAMED_2421;
struct value_entW;
enum _TAG_UNNAMED_2422;
class XeSqlPkg::query_rpc_set_data;
enum XE_PredicateExpr::PredicateType;
enum _TAG_UNNAMED_2423;
enum _TAG_UNNAMED_2424;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
enum XeSqlPkg::connectivity_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_2425;
class CAutoBase<CXFilePageForRead>;
enum _TAG_UNNAMED_2426;
class XeSosPkg::worker_state_callback_executed;
union tagBINDPTR;
struct IDBSchemaRowset;
enum _TAG_UNNAMED_2427;
enum _TAG_UNNAMED_2428;
enum _TAG_UNNAMED_2429;
class CAutoP<XE_LogSpecs>;
enum _TAG_UNNAMED_2430;
enum _TAG_UNNAMED_2431;
enum _TAG_UNNAMED_2432;
class XeSosPkg::scheduler_ring_buffer_recorded;
class RefCountImpl<XE_CompressionBufferRefCount>;
enum _TAG_UNNAMED_2433;
struct _SETJMP_FLOAT128;
struct _JUMP_BUFFER;
enum _TAG_UNNAMED_2434;
class XeSqlPkg::log_flush_start;
enum _TAG_UNNAMED_2435;
enum _TAG_UNNAMED_2436;
struct tagPROPSPEC;
class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition>;
enum _TAG_UNNAMED_2437;
struct IWbemEventProviderQuerySink;
enum _TAG_UNNAMED_2438;
enum _TAG_UNNAMED_2439;
enum _TAG_UNNAMED_2440;
struct _PROC_THREAD_ATTRIBUTE;
struct _PROC_THREAD_ATTRIBUTE_LIST;
class ResourcePoolData;
struct _CM_SERIAL_DEVICE_DATA;
enum _TAG_UNNAMED_2441;
struct BaseXactHashSLock;
enum _TAG_UNNAMED_2442;
struct tagMONITORINFOEXA;
enum _TAG_UNNAMED_2443;
struct _CLUS_SNAPSHOT_DIFF_PROP;
enum _TAG_UNNAMED_2444;
class Spinlock<65,16,1>;
enum _TAG_UNNAMED_2445;
enum _TAG_UNNAMED_2446;
struct IWbemRefresher;
enum ETaskSpecialization;
struct _SERVER_INFO_1570;
enum _TAG_UNNAMED_2447;
class SpinlockHolder<80,13,1>;
class AutoSwitchNonPreemptive;
class SOSHost_TaskAutoSwitchNonPreemptive;
enum _TAG_UNNAMED_2448;
struct _NT_TIB32;
enum _TAG_UNNAMED_2449;
enum _TAG_UNNAMED_2450;
struct InterlockedTraits<2>;
enum _TAG_UNNAMED_2451;
class AutoSpinlockHolder<176,3,1>;
enum _TAG_UNNAMED_2452;
class SEList<CFixedInfo,16>;
struct _CREATE_PROCESS_DEBUG_INFO;
struct _EXIT_THREAD_DEBUG_INFO;
struct _LOAD_DLL_DEBUG_INFO;
struct _RIP_INFO;
enum _TAG_UNNAMED_2453;
class XeSqlPkg::recovery_unit_metadata_truncate_data_drop;
enum _TAG_UNNAMED_2454;
enum _TAG_UNNAMED_2455;
enum _TAG_UNNAMED_2456;
struct XELiveTargetAPI;
enum _TAG_UNNAMED_2457;
class RefCountImpl<IMemObj>;
class XeSqlPkg::recovery_indirect_checkpoint;
enum _TAG_UNNAMED_2458;
enum _TAG_UNNAMED_2459;
enum _TAG_UNNAMED_2460;
class std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
enum _TAG_UNNAMED_2461;
enum _TAG_UNNAMED_2462;
enum _TAG_UNNAMED_2463;
class TListElem<TList<NodeManager,SOS_Node,16,TListSLock> >;
enum _TAG_UNNAMED_2464;
enum _TAG_UNNAMED_2465;
class XE_AutoRg<EventTypeEntry>;
class PackageEntry;
enum _TAG_UNNAMED_2466;
struct IDropSource;
enum _TAG_UNNAMED_2467;
enum _TAG_UNNAMED_2468;
enum _TAG_UNNAMED_2469;
struct XEEngineRegisterAPI;
enum _TAG_UNNAMED_2470;
enum _TAG_UNNAMED_2471;
struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
class XE_AutoResource<void *,168>;
enum _TAG_UNNAMED_2472;
enum _TAG_UNNAMED_2473;
struct AsyncIUnknown;
class Spinlock<241,1,1>;
enum _TAG_UNNAMED_2474;
enum _TAG_UNNAMED_2475;
enum XeSqlPkg::object_created::CustomizableSlots;
struct _SERVICE_TRIGGER_INFO;
class XeSqlPkg::dq_session_cache_miss;
enum _TAG_UNNAMED_2476;
enum _TAG_UNNAMED_2477;
struct _FOCUS_EVENT_RECORD;
enum _TAG_UNNAMED_2478;
class CAutoHandleInternal<-1,&CloseHandle>;
class XE_FileMemoryMap;
enum _TAG_UNNAMED_2479;
struct IMPORT_OBJECT_HEADER;
enum _TAG_UNNAMED_2480;
class Worker::TaskAutoOnFlags;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
enum _TAG_UNNAMED_2481;
enum _TAG_UNNAMED_2482;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>;
enum _TAG_UNNAMED_2483;
enum _TAG_UNNAMED_2484;
enum _TAG_UNNAMED_2485;
enum _TAG_UNNAMED_2486;
struct XEType;
enum _TAG_UNNAMED_2487;
enum _TAG_UNNAMED_2488;
struct _TP_CALLBACK_ENVIRON_V1;
enum _TAG_UNNAMED_2489;
struct _POWER_IDLE_RESILIENCY;
class XeSqlPkg::database_agent_create_filegroup;
enum XeSqlPkg::host_task_ring_buffer_recorded::CustomizableSlots;
enum _TAG_UNNAMED_2490;
enum _TAG_UNNAMED_2491;
class SListHead;
class std::basic_iostream<unsigned short,std::char_traits<unsigned short> >;
class XE_XMLHistoryTargetConfig;
enum _TAG_UNNAMED_2492;
struct IUnsecuredApartment;
struct _HEAP_BLOCK_INFORMATION;
enum _TAG_UNNAMED_2493;
struct _VARIABLE_NAME_AND_VALUE;
enum _TAG_UNNAMED_2494;
enum _TAG_UNNAMED_2495;
struct IPipeByte;
enum _TAG_UNNAMED_2496;
class XeCloudMinPkg::physical_seeding_start_copy_to_secondary;
enum _TAG_UNNAMED_2497;
enum _TAG_UNNAMED_2498;
enum _TAG_UNNAMED_2499;
class HostedResourceGroupStats;
struct tagMETAFILEPICT;
enum _TAG_UNNAMED_2500;
enum _TAG_UNNAMED_2501;
enum _TAG_UNNAMED_2502;
class XE_AutoResource<void *,200>;
enum _TAG_UNNAMED_2503;
struct _TRANSACTIONMANAGER_LOG_INFORMATION;
enum _TAG_UNNAMED_2504;
enum _TAG_UNNAMED_2505;
class SmallBitmap;
struct tagNMHDR;
struct IEnumFORMATETC;
enum _TAG_UNNAMED_2506;
struct SET_POWER_SETTING_VALUE;
enum _TAG_UNNAMED_2507;
class XeSqlPkg::xquery_static_type;
enum _TAG_UNNAMED_2508;
enum _TAG_UNNAMED_2509;
struct tagACTCTX_SECTION_KEYED_DATA;
class _variant_t;
enum XeSqlPkg::EventOpcode;
enum _TAG_UNNAMED_2510;
enum _TAG_UNNAMED_2511;
enum _TAG_UNNAMED_2512;
struct IWbemBackupRestoreEx;
struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA;
enum _TAG_UNNAMED_2513;
class AutoSpinlockHolder<234,1,1>;
enum _TAG_UNNAMED_2514;
struct SHELLHOOKINFO;
enum _TAG_UNNAMED_2515;
class XeCloudMinPkg::kill_secondary;
enum _TAG_UNNAMED_2516;
class Spinlock<42,18,1>;
enum _TAG_UNNAMED_2517;
enum _TAG_UNNAMED_2518;
struct ICreateTypeInfo2;
enum _TAG_UNNAMED_2519;
struct _NETLOGON_INFO_2;
enum _TAG_UNNAMED_2520;
class Spinlock<208,3,1>;
enum _TAG_UNNAMED_2521;
class TCacheSimulation<CacheClockAlgorithm>;
enum _TAG_UNNAMED_2522;
struct tagNCCALCSIZE_PARAMS;
enum _TAG_UNNAMED_2523;
enum _TAG_UNNAMED_2524;
enum _TAG_UNNAMED_2525;
enum _TAG_UNNAMED_2526;
struct _MOUSE_EVENT_RECORD;
struct _WINDOW_BUFFER_SIZE_RECORD;
struct _INPUT_RECORD;
enum _TAG_UNNAMED_2527;
enum XeSqlPkg::file_read_enqueued::CustomizableSlots;
enum _TAG_UNNAMED_2528;
class SEListEnum<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>,0>;
enum XeSqlPkg::rpc_starting::CustomizableSlots;
class SEList<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>,0>;
enum _TAG_UNNAMED_2529;
class XeSqlPkg::server_start_stop;
enum _TAG_UNNAMED_2530;
struct tagEMROFFSETCLIPRGN;
struct IOleCache;
enum _TAG_UNNAMED_2531;
enum _TAG_UNNAMED_2532;
struct _CM_PARTIAL_RESOURCE_LIST;
struct _CM_FULL_RESOURCE_DESCRIPTOR;
enum _TAG_UNNAMED_2533;
class SEList<SystemThread,160>;
struct _USER_INFO_1053;
enum _TAG_UNNAMED_2534;
enum _TAG_UNNAMED_2535;
enum _TAG_UNNAMED_2536;
enum _TAG_UNNAMED_2537;
class SEListEnum<XE_IMetadata,32>;
enum _TAG_UNNAMED_2538;
struct tagNEWTEXTMETRICEXW;
struct tagAXESLISTW;
struct tagENUMTEXTMETRICW;
enum _TAG_UNNAMED_2539;
class CAutoBase<XEAction>;
enum _TAG_UNNAMED_2540;
struct _AE_CONNREJ;
enum _TAG_UNNAMED_2541;
enum _TAG_UNNAMED_2542;
struct __s_GUID;
enum _TAG_UNNAMED_2543;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
enum _TAG_UNNAMED_2544;
enum _TAG_UNNAMED_2545;
enum _TAG_UNNAMED_2546;
class CAutoRg<XEAction>;
struct IInternetPriority;
enum XeSqlPkg::filestream_file_io_failure::CustomizableSlots;
enum _TAG_UNNAMED_2547;
struct IQuickActivate;
struct IClassFactory;
enum _TAG_UNNAMED_2548;
enum _TAG_UNNAMED_2549;
class CacheClockAlgorithm;
enum _TAG_UNNAMED_2550;
enum _TAG_UNNAMED_2551;
enum _TAG_UNNAMED_2552;
enum _TAG_UNNAMED_2553;
struct HDESK__;
class XeSqlPkg::ghost_cleanup_task_packet_enqueue;
enum XeSqlPkg::rollback_tran_completed::CustomizableSlots;
enum _TAG_UNNAMED_2554;
struct tagWNODE_TOO_SMALL;
enum _TAG_UNNAMED_2555;
enum _TAG_UNNAMED_2556;
enum _TAG_UNNAMED_2557;
struct _MIDL_FORMAT_STRING;
enum _TAG_UNNAMED_2558;
struct BlockDescriptorBucketSLock;
enum _TAG_UNNAMED_2559;
enum _TAG_UNNAMED_2560;
struct ISWbemObjectSet;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >;
struct _OFSTRUCT;
enum _TAG_UNNAMED_2561;
enum _TAG_UNNAMED_2562;
enum _TAG_UNNAMED_2563;
enum _TAG_UNNAMED_2564;
struct tagACTCTXW;
struct CLUS_DNN_LEADER_STATUS;
enum _TAG_UNNAMED_2565;
enum _TAG_UNNAMED_2566;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
enum _TAG_UNNAMED_2567;
struct _TRUSTEE_A;
struct _EXPLICIT_ACCESS_A;
enum _TAG_UNNAMED_2568;
enum _TAG_UNNAMED_2569;
enum _TAG_UNNAMED_2570;
struct tagEMRNAMEDESCAPE;
class CAutoBase<XE_FileSetMemoryMap>;
enum _TAG_UNNAMED_2571;
struct _PROCESSOR_RELATIONSHIP;
struct _NUMA_NODE_RELATIONSHIP;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
class DmpPointer<SEList<SystemThread,160> >;
enum _TAG_UNNAMED_2572;
class XeSqlPkg::parallel_scan_stuck_read_ahead;
enum _TAG_UNNAMED_2573;
enum _TAG_UNNAMED_2574;
struct ITypeInfo2;
enum _TAG_UNNAMED_2575;
enum XeSqlPkg::broker_queue_activation_alert::CustomizableSlots;
enum _TAG_UNNAMED_2576;
struct RPC_IMPORT_CONTEXT_P;
enum _TAG_UNNAMED_2577;
struct SYSTEM_POWER_CAPABILITIES;
class SOS_OS::QpcInitializer;
struct tagPARSEDURLA;
struct _AE_SESSLOGOFF;
enum XeSqlPkg::file_write_enqueued::CustomizableSlots;
enum _TAG_UNNAMED_2578;
enum _TAG_UNNAMED_2579;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;
enum _TAG_UNNAMED_2580;
enum _TAG_UNNAMED_2581;
enum _TAG_UNNAMED_2582;
struct IPersistPropertyBag2;
struct SOS_OS::CacheLimitsReferenceTable::SingleReference;
class SOS_OS::CacheLimitsReferenceTable;
class CAutoBase<XE_CXHistoryTargetConfig>;
enum _TAG_UNNAMED_2583;
enum _TAG_UNNAMED_2584;
enum _TAG_UNNAMED_2585;
enum _TAG_UNNAMED_2586;
union _IMAGE_AUX_SYMBOL;
enum _TAG_UNNAMED_2587;
struct tagMSLLHOOKSTRUCT;
enum _TAG_UNNAMED_2588;
enum _TAG_UNNAMED_2589;
enum _TAG_UNNAMED_2590;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
enum _TAG_UNNAMED_2591;
class Spinlock<334,0,257>;
enum _TAG_UNNAMED_2592;
struct _POWER_SESSION_CONNECT;
enum _TAG_UNNAMED_2593;
enum _TAG_UNNAMED_2594;
class MethodCallBinder_4<long,ISOSHostImpl,long (__cdecl ISOSHostImpl::*)(void * (__cdecl*)(void *),void *,unsigned long,ISOSHost_Task * *),void * (__cdecl*)(void *),void *,unsigned long,ISOSHost_Task * *>;
enum _TAG_UNNAMED_2595;
enum _TAG_UNNAMED_2596;
struct __vc_attributes::threadingAttribute;
enum _TAG_UNNAMED_2597;
struct _POWER_SESSION_WINLOGON;
enum _TAG_UNNAMED_2598;
class CMemDbg<PageHeapMemObj>;
enum _TAG_UNNAMED_2599;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >;
enum _TAG_UNNAMED_2600;
struct _IMAGE_BOUND_FORWARDER_REF;
enum _TAG_UNNAMED_2601;
enum _TAG_UNNAMED_2602;
enum _TAG_UNNAMED_2603;
enum _TAG_UNNAMED_2604;
class XE_PredCompForwarder;
enum _TAG_UNNAMED_2605;
struct IRowsetCurrentIndex;
enum _TAG_UNNAMED_2606;
class XeSosPkg::thread_detached;
enum _TAG_UNNAMED_2607;
struct IPipeLong;
class RefCountImpl<SOS_StoreAndClockAlgorithmControlInterface>;
struct HENHMETAFILE__;
enum _TAG_UNNAMED_2608;
struct StaticStorage<402>;
enum _TAG_UNNAMED_2609;
enum _TAG_UNNAMED_2610;
enum XeSqlPkg::lock_acquired::CustomizableSlots;
struct tagCOLORADJUSTMENT;
struct tagSTYLESTRUCT;
class SESinglyLinkedStruct<WaitForGraphVertex,8>;
class SESinglyLinkedStruct<WaitForGraphVertex,16>;
class WaitForGraph;
enum _TAG_UNNAMED_2611;
class ConfigIOData;
class XeSqlPkg::hadr_worker_pool_before_schedule_task;
enum _TAG_UNNAMED_2612;
enum _TAG_UNNAMED_2613;
enum _TAG_UNNAMED_2614;
struct tagNONCLIENTMETRICSW;
class Spinlock<302,1,1>;
enum _TAG_UNNAMED_2615;
enum _TAG_UNNAMED_2616;
enum _TAG_UNNAMED_2617;
struct ISOSHost;
enum _TAG_UNNAMED_2618;
struct _TRUSTEE_W;
enum _TAG_UNNAMED_2619;
enum _TAG_UNNAMED_2620;
class TSList<XE_LoadedLibrary>;
enum _TAG_UNNAMED_2621;
enum _TAG_UNNAMED_2622;
struct tagEMRPOLYDRAW16;
enum _TAG_UNNAMED_2623;
enum _TAG_UNNAMED_2624;
class CAutoRg<XECustomizableAttribute>;
struct IOleUndoUnit;
enum _TAG_UNNAMED_2625;
enum _TAG_UNNAMED_2626;
struct IXMLDOMDocument2;
enum _TAG_UNNAMED_2627;
enum _TAG_UNNAMED_2628;
struct IOleCache2;
enum _TAG_UNNAMED_2629;
enum _TAG_UNNAMED_2630;
struct _RTL_SPLAY_LINKS;
struct _UNICODE_PREFIX_TABLE_ENTRY;
enum _TAG_UNNAMED_2631;
enum _TAG_UNNAMED_2632;
struct _IMAGE_NT_HEADERS64;
struct _FLS_CALLBACK_INFO;
enum _TAG_UNNAMED_2633;
struct tagRPC_CALL_ATTRIBUTES_V1_W;
class XE_ILogReadMessageHandler;
enum _TAG_UNNAMED_2634;
enum _TAG_UNNAMED_2635;
enum _TAG_UNNAMED_2636;
class XE_ConfigurationStore;
enum _TAG_UNNAMED_2637;
enum _TAG_UNNAMED_2638;
class SOS_ObjectStore::ObjectClockHand;
class TClockAlgorithm<SOS_ObjectStore::ObjectClockHand>;
enum _TAG_UNNAMED_2639;
enum _TAG_UNNAMED_2640;
class SEList<ExternalCache,8>;
enum XeSqlPkg::file_read_completed::CustomizableSlots;
enum _TAG_UNNAMED_2641;
enum _TAG_UNNAMED_2642;
class CAutoRg<XMLColumnTransformRule>;
enum _TAG_UNNAMED_2643;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_NT_HEADERS;
struct _SCOPE_TABLE;
enum _TAG_UNNAMED_2644;
enum _TAG_UNNAMED_2645;
struct _PROCESS_MITIGATION_STACKCHECK_POLICY;
class CAutoBase<EventTypeEntry>;
enum _TAG_UNNAMED_2646;
struct _IMAGE_DELAYLOAD_DESCRIPTOR;
class XeSqlPkg::database_agent_drop_filegroup;
enum _TAG_UNNAMED_2647;
enum _TAG_UNNAMED_2648;
enum _TAG_UNNAMED_2649;
class ClockAlgorithm;
class XStringBuilder;
enum _TAG_UNNAMED_2650;
struct IPersistPropertyBag;
enum _TAG_UNNAMED_2651;
class XeSqlPkg::query_rpc_process_cmd_set_marker;
enum _TAG_UNNAMED_2652;
enum XeSqlPkg::save_tran_completed::CustomizableSlots;
struct IRpcStubBuffer;
struct _PROCESS_HEAP_ENTRY;
enum _TAG_UNNAMED_2653;
struct _INHERITED_FROMW;
enum _TAG_UNNAMED_2654;
enum _TAG_UNNAMED_2655;
class std::numeric_limits<unsigned __int64>;
enum _TAG_UNNAMED_2656;
class std::numeric_limits<unsigned char>;
class PerCPUDataImpl;
struct _USER_MODALS_INFO_1002;
enum _TAG_UNNAMED_2657;
enum _TAG_UNNAMED_2658;
enum _TAG_UNNAMED_2659;
class CXFileReaderInterfaceFactoryNative;
enum _TAG_UNNAMED_2660;
class XE_AutoRg<XE_AutoRg<unsigned short> >;
enum _TAG_UNNAMED_2661;
enum _TAG_UNNAMED_2662;
class AutoPermanentTaskLeakDetection;
enum _TAG_UNNAMED_2663;
struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
enum _TAG_UNNAMED_2664;
class XeSqlPkg::ddl_with_wait_at_low_priority;
enum _TAG_UNNAMED_2665;
enum _TAG_UNNAMED_2666;
class CAutoBase<unsigned int>;
enum _TAG_UNNAMED_2667;
enum _TAG_UNNAMED_2668;
enum _TAG_UNNAMED_2669;
enum _TAG_UNNAMED_2670;
struct __vc_attributes::helper_attributes::usageAttribute;
struct NodeSLock;
enum _TAG_UNNAMED_2671;
class Spinlock<286,1,1>;
enum _TAG_UNNAMED_2672;
struct _iobuf;
enum _TAG_UNNAMED_2673;
struct _UNWIND_HISTORY_TABLE;
struct _WKSTA_INFO_1058;
enum _TAG_UNNAMED_2674;
enum _TAG_UNNAMED_2675;
enum _TAG_UNNAMED_2676;
enum _TAG_UNNAMED_2677;
struct _CLAIM_SECURITY_ATTRIBUTE_V1;
enum _TAG_UNNAMED_2678;
class AutoSpinlockHolder<181,3,1>;
enum _TAG_UNNAMED_2679;
enum _TAG_UNNAMED_2680;
struct __vc_attributes::usesgetlasterrorAttribute;
enum _TAG_UNNAMED_2681;
enum _TAG_UNNAMED_2682;
enum _TAG_UNNAMED_2683;
enum _TAG_UNNAMED_2684;
struct __vc_attributes::atl::soap_handlerAttribute;
enum _TAG_UNNAMED_2685;
struct tagTOGGLEKEYS;
enum _TAG_UNNAMED_2686;
class Spinlock<317,1,1>;
enum _TAG_UNNAMED_2687;
class SpinlockHolder<56,16,1>;
class std::allocator<void>;
class ISOSHost_OSThreadCreateDestroyCallbackImpl;
enum _TAG_UNNAMED_2688;
class XeSqlPkg::query_optimizer_force_both_cardinality_estimation_behaviors;
enum _TAG_UNNAMED_2689;
class CAutoBase<XE_LogDeserializedPackage>;
enum _TAG_UNNAMED_2690;
struct __vc_attributes::helper_attributes::process_earlyAttribute;
enum _TAG_UNNAMED_2691;
struct __vc_attributes::helper_attributes::as_stringAttribute;
struct _DCB;
struct _COMMCONFIG;
struct XE_TEvent<3,0,0>;
enum _TAG_UNNAMED_2692;
class OsNumaConfig;
class XeSqlPkg::server_memory_change;
enum _TAG_UNNAMED_2693;
enum _TAG_UNNAMED_2694;
enum _TAG_UNNAMED_2695;
struct __vc_attributes::helper_attributes::notify_atlprovAttribute;
class TypeListNode<NullType,TypeListNode<NullType,NullType> >;
enum _TAG_UNNAMED_2696;
struct IXMLDOMNotation;
enum _TAG_UNNAMED_2697;
struct tagEMRSETDIBITSTODEVICE;
enum _TAG_UNNAMED_2698;
class SOS_IOResourceManager;
enum _TAG_UNNAMED_2699;
enum _TAG_UNNAMED_2700;
enum _TAG_UNNAMED_2701;
class SESListEnum<XE_CompressionCache::MemBlock,0>;
enum _TAG_UNNAMED_2702;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_ROM_HEADERS;
enum XeSqlPkg::database_file_size_change::CustomizableSlots;
struct __vc_attributes::first_isAttribute;
enum _TAG_UNNAMED_2703;
enum _TAG_UNNAMED_2704;
struct LIST_ENTRY32;
struct XE_TArray<XECustomizableAttribute,4>;
enum _TAG_UNNAMED_2705;
enum _TAG_UNNAMED_2706;
class CAutoP<XE_FileProcessor>;
enum _TAG_UNNAMED_2707;
enum _TAG_UNNAMED_2708;
struct __vc_attributes::includelibAttribute;
class SOSQueueCounted<Worker,0>;
class SOSQueueCounted<SOS_Task,0>;
struct SuspendQueueSLock;
class WorkDispatcher;
enum _TAG_UNNAMED_2709;
enum _TAG_UNNAMED_2710;
struct _API_SET_VALUE_ENTRY;
enum _TAG_UNNAMED_2711;
enum _TAG_UNNAMED_2712;
struct tagEMRGDICOMMENT;
class XeSqlPkg::hadr_filestream_message_block_end;
enum _TAG_UNNAMED_2713;
struct IInternetBindInfo;
enum _TAG_UNNAMED_2714;
enum _TAG_UNNAMED_2715;
enum _TAG_UNNAMED_2716;
class CAutoP<XE_PackageFilter>;
enum _TAG_UNNAMED_2717;
enum _TAG_UNNAMED_2718;
struct tagRECONVERTSTRING;
class SEList<eXcursionEntry,16>;
enum _TAG_UNNAMED_2719;
enum _TAG_UNNAMED_2720;
struct IFontEventsDisp;
struct ISOSHost_EventManual;
struct XE_TEvent<4,6,8>;
class XeSqlPkg::filestream_file_io_response;
enum _TAG_UNNAMED_2721;
enum _TAG_UNNAMED_2722;
class CXColumn<unsigned int>;
enum _TAG_UNNAMED_2723;
struct IXMLDOMElement;
struct _ACCESS_ALLOWED_CALLBACK_ACE;
struct XE_TEvent<4,3,7>;
enum _TAG_UNNAMED_2724;
enum _TAG_UNNAMED_2725;
enum _TAG_UNNAMED_2726;
enum _TAG_UNNAMED_2727;
enum _TAG_UNNAMED_2728;
struct _KNONVOLATILE_CONTEXT_POINTERS;
enum _TAG_UNNAMED_2729;
class XeSqlPkg::remote_dmv_stream_release_resources_server;
enum _TAG_UNNAMED_2730;
enum _TAG_UNNAMED_2731;
struct IConnectionPointContainer;
enum _TAG_UNNAMED_2732;
class ISOSHost_MemObjImpl;
class XeSqlPkg::hadr_xrf_updateXrf_partialUpdate;
enum _TAG_UNNAMED_2733;
enum _TAG_UNNAMED_2734;
enum _TAG_UNNAMED_2735;
enum _TAG_UNNAMED_2736;
struct EventTransformer;
struct SOS_OomCheckSLock;
class OomIndicator;
struct tagRPC_EE_INFO_PARAM;
enum _TAG_UNNAMED_2737;
struct IPersistStreamInit;
enum _TAG_UNNAMED_2738;
struct _SERVER_INFO_1540;
enum _TAG_UNNAMED_2739;
enum _TAG_UNNAMED_2740;
struct _NETRESOURCEA;
struct _TAPE_SET_MEDIA_PARAMETERS;
enum _TAG_UNNAMED_2741;
struct tagREGISTERWORDA;
enum _TAG_UNNAMED_2742;
class FPUProtector;
class XeSqlPkg::hash_warning;
enum XeSqlPkg::sql_batch_starting::CustomizableSlots;
class XeSqlPkg::recovery_in_physical;
enum _TAG_UNNAMED_2743;
class TListElem<TList<SOS_Scheduler,SOS_Task,16,TListSLock> >;
enum _TAG_UNNAMED_2744;
class SOS_UserStore;
class IfNullTypeZeroElseOne<NullType>;
struct _cpinfoexW;
enum _TAG_UNNAMED_2745;
struct _SYSTEM_SESSION_PROCESS_INFORMATION;
enum _TAG_UNNAMED_2746;
enum _TAG_UNNAMED_2747;
struct std::_Num_float_base;
struct IXMLDOMComment;
struct __vc_attributes::requesteditAttribute;
enum _TAG_UNNAMED_2748;
struct std::pair<unsigned __int64 *,unsigned __int64 *>;
enum _TAG_UNNAMED_2749;
enum _TAG_UNNAMED_2750;
struct XEEventBufferHeader_v0;
class SOS_CacheStoreEnum;
enum _TAG_UNNAMED_2751;
struct HKEY__;
enum _TAG_UNNAMED_2752;
struct _TP_CLEANUP_GROUP;
enum _TAG_UNNAMED_2753;
class CAutoBase<unsigned short>;
enum _TAG_UNNAMED_2754;
class XeSqlPkg::availability_replica_manager_state_change;
enum _TAG_UNNAMED_2755;
enum _TAG_UNNAMED_2756;
struct _TAPE_GET_POSITION;
enum _TAG_UNNAMED_2757;
enum _TAG_UNNAMED_2758;
struct tagExtentInfo;
class SpinlockHolder<39,18,1>;
enum _TAG_UNNAMED_2759;
enum _TAG_UNNAMED_2760;
enum _TAG_UNNAMED_2761;
struct tagCUSTDATA;
struct __vc_attributes::atl::soap_namespaceAttribute;
enum _TAG_UNNAMED_2762;
class MemObjEnumerator;
class XeSqlPkg::extent_activation_cache_overflow;
enum _TAG_UNNAMED_2763;
enum _TAG_UNNAMED_2764;
struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA;
enum _TAG_UNNAMED_2765;
struct _TAPE_WRITE_MARKS;
enum _TAG_UNNAMED_2766;
enum _TAG_UNNAMED_2767;
enum _TAG_UNNAMED_2768;
class SEList<XListEnumerator<ProbCostData>,0>;
enum _TAG_UNNAMED_2769;
enum _TAG_UNNAMED_2770;
class RefCountImpl<XE_ConfiguredSession>;
class std::ostreambuf_iterator<char,std::char_traits<char> >;
class XeSqlPkg::hadr_db_commit_mgr_update_harden;
enum _TAG_UNNAMED_2771;
enum _TAG_UNNAMED_2772;
struct HWINEVENTHOOK__;
enum _TAG_UNNAMED_2773;
struct _nlsversioninfo;
struct __vc_attributes::publicAttribute;
class XeCloudMinPkg::mark_partition_for_delete;
enum _TAG_UNNAMED_2774;
enum _TAG_UNNAMED_2775;
enum _TAG_UNNAMED_2776;
class TypeListNode<unsigned __int64,NullType>;
class SystemThreadPool::PoolAutoLock;
class WcsSafeFakeType1;
enum _TAG_UNNAMED_2777;
enum XeSqlPkg::sql_statement_completed::CustomizableSlots;
class SOSCallbackEvent;
enum _TAG_UNNAMED_2778;
class XeSqlPkg::hadr_xrf_updateXrf_before_recoveryLsn_update;
enum XeSqlPkg::missing_column_statistics::CustomizableSlots;
enum _TAG_UNNAMED_2779;
struct IOleObject;
enum _TAG_UNNAMED_2780;
struct tagSERIALIZEDPROPERTYVALUE;
class CThreadTimes;
class SchedulerMonitor::Track;
struct SchedulerMonitor::SchedStats;
class XeSqlPkg::query_rpc_locate_and_update_row;
enum _TAG_UNNAMED_2781;
enum _TAG_UNNAMED_2782;
enum _TAG_UNNAMED_2783;
enum _TAG_UNNAMED_2784;
class SEShortStack<SOS_ExternalAutoWait,6>;
struct tagCANDIDATEFORM;
enum _TAG_UNNAMED_2785;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >;
struct ICancelMethodCalls;
struct tagWNDCLASSW;
enum _TAG_UNNAMED_2786;
class XeCloudMinPkg::primary_start_replicated_transaction;
enum _TAG_UNNAMED_2787;
enum _TAG_UNNAMED_2788;
struct ARRAY_INFO;
struct _EXCEPTION_RECORD64;
enum _TAG_UNNAMED_2789;
struct _CONSOLE_READCONSOLE_CONTROL;
enum _TAG_UNNAMED_2790;
struct _CURDIR;
struct _STRING;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _RTL_USER_PROCESS_PARAMETERS;
class CIncInfo::CIncSizeBlock;
class CIncInfo;
class XeSqlPkg::hadr_ag_wsfc_resource_state;
enum _TAG_UNNAMED_2791;
struct ClrSpinLockSLock;
class XeSqlPkg::broker_conversation;
enum _TAG_UNNAMED_2792;
struct CRefCount::SerializableVersionInternal<CRefCount>;
enum _TAG_UNNAMED_2793;
class SOS_TraceStream;
enum _TAG_UNNAMED_2794;
enum _TAG_UNNAMED_2795;
enum _TAG_UNNAMED_2796;
struct ISWbemNamedValueSet;
enum _TAG_UNNAMED_2797;
class CAutoP<TSinglyLinkedList<XE_ConfigCrc> >;
enum _TAG_UNNAMED_2798;
enum _TAG_UNNAMED_2799;
class SOSExceptionTranslatorSetter<SOSExceptionStandardTranslatorSetter>;
struct _ACCESS_ALLOWED_OBJECT_ACE;
enum _TAG_UNNAMED_2800;
struct tagQACONTROL;
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
enum _TAG_UNNAMED_2801;
enum _TAG_UNNAMED_2802;
struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
union _CLIENT_CALL_RETURN;
enum _TAG_UNNAMED_2803;
struct XE_TEvent<4,1,16>;
class XeSqlPkg::query_post_compilation_showplan;
enum _TAG_UNNAMED_2804;
enum _TAG_UNNAMED_2805;
class XE_AutoRg<XEAction>;
class XE_XMLConfiguredSession;
enum _TAG_UNNAMED_2806;
enum _TAG_UNNAMED_2807;
class CMemDbg<CMemFixed>;
enum _TAG_UNNAMED_2808;
enum _TAG_UNNAMED_2809;
enum _TAG_UNNAMED_2810;
struct tagCAUUID;
enum _TAG_UNNAMED_2811;
class XE_ResolvedObjectXML<XEAction>;
class XeSqlPkg::metadata_remove_from_cache_tracing;
enum _TAG_UNNAMED_2812;
enum _TAG_UNNAMED_2813;
struct _ERROR_LOG;
enum _TAG_UNNAMED_2814;
struct IPropertyPage;
enum _TAG_UNNAMED_2815;
struct tagTRACKMOUSEEVENT;
enum _TAG_UNNAMED_2816;
enum _TAG_UNNAMED_2817;
class CAutoBase<XE_AutoCustomizableAttributes>;
struct HBRUSH__;
enum _TAG_UNNAMED_2818;
enum _TAG_UNNAMED_2819;
struct IOleInPlaceFrame;
struct _USER_INFO_1017;
enum _TAG_UNNAMED_2820;
enum _TAG_UNNAMED_2821;
struct tagEXCEPINFO;
enum _TAG_UNNAMED_2822;
struct _DLLVERSIONINFO;
struct _DLLVERSIONINFO2;
struct IRpcSyntaxNegotiate;
struct ITransactionLocal;
enum _TAG_UNNAMED_2823;
enum _TAG_UNNAMED_2824;
enum _TAG_UNNAMED_2825;
struct ISOSHost_Node;
struct tagEMREXTTEXTOUTA;
enum _TAG_UNNAMED_2826;
enum _TAG_UNNAMED_2827;
struct ISoftDistExt;
enum _TAG_UNNAMED_2828;
enum _TAG_UNNAMED_2829;
enum _TAG_UNNAMED_2830;
struct tagTLIBATTR;
enum _TAG_UNNAMED_2831;
class SEList<MemoryNode,0>;
struct _FP_32;
struct _FP_64;
struct _FP_80;
struct _FP_128;
struct _FP_IEEE_VALUE;
struct _FP_IEEE_RECORD;
enum _TAG_UNNAMED_2832;
enum _TAG_UNNAMED_2833;
enum _TAG_UNNAMED_2834;
enum _TAG_UNNAMED_2835;
struct IHttpNegotiate3;
class VolumeIORGUnit;
enum _TAG_UNNAMED_2836;
class XEventAutoEngineLoad;
struct IWbemAddressResolution;
enum _TAG_UNNAMED_2837;
struct _ENCRYPTION_BUFFER;
enum _TAG_UNNAMED_2838;
enum _TAG_UNNAMED_2839;
struct tagLOGPEN;
struct _SERVICE_FAILURE_ACTIONS_FLAG;
enum _TAG_UNNAMED_2840;
enum _TAG_UNNAMED_2841;
class std::domain_error;
class SEListEnum<CFixedInfo,16>;
struct _NETLOGON_INFO_4;
enum _TAG_UNNAMED_2842;
class Spinlock<152,3,1>;
struct _LAST_EXCEPTION_LOG;
enum _TAG_UNNAMED_2843;
struct std::tr1::_Is_floating_point<float>;
enum _TAG_UNNAMED_2844;
struct std::tr1::_Remove_reference<std::basic_ostream<char,std::char_traits<char> > * &>;
struct _OBJECT_TYPE_LIST;
class SEListSized<SOS_ResourceGroup,0>;
enum _TAG_UNNAMED_2845;
enum _TAG_UNNAMED_2846;
enum _TAG_UNNAMED_2847;
enum _TAG_UNNAMED_2848;
struct IInitializeSpy;
struct _DEBUG_EVENT;
enum _TAG_UNNAMED_2849;
enum _TAG_UNNAMED_2850;
struct ISWbemServicesEx;
enum _TAG_UNNAMED_2851;
struct __vc_attributes::iid_isAttribute;
enum _TAG_UNNAMED_2852;
enum _TAG_UNNAMED_2853;
struct WaitableAddressHashBucketSLock;
enum _TAG_UNNAMED_2854;
struct _ACTRL_PROPERTY_ENTRYW;
enum _TAG_UNNAMED_2855;
enum _TAG_UNNAMED_2856;
struct IClassActivator;
enum _TAG_UNNAMED_2857;
enum _TAG_UNNAMED_2858;
struct _RPC_PROTSEQ_VECTORA;
class Spinlock<197,3,1>;
enum _TAG_UNNAMED_2859;
enum _TAG_UNNAMED_2860;
enum _TAG_UNNAMED_2861;
struct _RPC_BINDING_VECTOR;
enum _TAG_UNNAMED_2862;
struct NOTIFY_USER_POWER_SETTING;
class ExceptionBackout;
struct XEEngineServicesAPI;
struct StaticStorage<83>;
enum _TAG_UNNAMED_2863;
enum _TAG_UNNAMED_2864;
class XE_SessionObjectAttrEnumerator;
struct _TRACE_ENABLE_INFO;
enum _TAG_UNNAMED_2865;
struct __vc_attributes::atl::perf_counterAttribute;
enum _TAG_UNNAMED_2866;
enum _TAG_UNNAMED_2867;
enum _TAG_UNNAMED_2868;
union __m64;
class ISOSHost_CacheStoreHashBucketUserDataEnumHelper;
enum _TAG_UNNAMED_2869;
enum _TAG_UNNAMED_2870;
struct _userSTGMEDIUM;
struct _userFLAG_STGMEDIUM;
class XeSqlPkg::hadr_wsfc_update_ag_listener_dependency;
enum _TAG_UNNAMED_2871;
enum _TAG_UNNAMED_2872;
class std::exception;
enum _TAG_UNNAMED_2873;
struct tagMDINEXTMENU;
enum _TAG_UNNAMED_2874;
enum _TAG_UNNAMED_2875;
enum _TAG_UNNAMED_2876;
class MethodCallBinder_0<unsigned long,SOSClient_MemoryNotificationCallback,unsigned long (__cdecl SOSClient_MemoryNotificationCallback::*)(void)>;
struct _SYSTEM_AUDIT_OBJECT_ACE;
enum _TAG_UNNAMED_2877;
enum _TAG_UNNAMED_2878;
class std::numeric_limits<unsigned long>;
struct tagSTYLEBUFW;
enum _TAG_UNNAMED_2879;
class XeSqlPkg::hadr_transport_replica_before_sending_primary_info;
enum _TAG_UNNAMED_2880;
enum _TAG_UNNAMED_2881;
struct _DISCDLGSTRUCTW;
struct tagMULTIKEYHELPA;
enum _TAG_UNNAMED_2882;
struct tagEMRGLSRECORD;
struct std::input_iterator_tag;
class XeSqlPkg::object_altered;
enum _TAG_UNNAMED_2883;
enum _TAG_UNNAMED_2884;
enum _TAG_UNNAMED_2885;
class std::locale::id;
struct _Cvtvec;
class std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
enum _TAG_UNNAMED_2886;
struct _TOKEN_DEFAULT_DACL;
enum _TAG_UNNAMED_2887;
enum _TAG_UNNAMED_2888;
enum _TAG_UNNAMED_2889;
struct _ImageArchitectureEntry;
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
struct __vc_attributes::coclassAttribute;
enum _TAG_UNNAMED_2890;
enum _TAG_UNNAMED_2891;
class TypeListNode<void *,TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class SEListEnum<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>,0>;
enum _TAG_UNNAMED_2892;
struct _stat64;
class XeSqlPkg::xtp_recover_done;
class Spinlock<129,7,1>;
class std::hash<std::error_code>;
struct _SERVER_INFO_1538;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct HBITMAP__;
struct XEActionValidate;
struct ISWbemProperty;
struct __vc_attributes::helpcontextAttribute;
struct SchedulerSLock;
class SOSQueue<Worker,0>;
class PercentileQueue<Worker,0,64>;
class SEListSized<SOS_Task,0>;
class SEList<SOS_Task,0>;
struct TaskSLock;
class SEList<TimerRequest,8>;
class SOS_Scheduler::Timer;
struct AbortTaskSLock;
class SOSQueue<SOS_Task,320>;
class IOQueue;
class NodeAffinity;
class SOS_IOCompRequestList;
struct _SLIST_ENTRY;
class SOS_ExceptionRingRecord;
class WorkerTimerRequest;
class TCallbackList<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >;
class FPUCache;
class TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>;
class Worker::ProfilingCPUTicks;
class SQLError;
struct WaitStatsSLock;
struct SOS_WaitRow;
struct SOS_WaitStats::WaitStatsLink;
class SOS_WaitStats;
class Worker;
struct WaitRow;
class SOS_Scheduler;
struct _ENUM_SERVICE_STATUSW;
class XeSqlPkg::hadr_filestream_file_set_eof;
struct _SYSTEM_INFO;
struct __vc_attributes::versionAttribute;
class SOS_SoftNumaUtil;
struct IWindowForBindingUI;
struct ISupportErrorInfo;
class FreePageElem;
class XeSqlPkg::broker_remote_message_acknowledgement;
struct _TRACE_GUID_REGISTRATION;
struct IRunningObjectTable;
class SEListSized<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0>;
struct CacheStoreSLock;
class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket;
struct __vc_attributes::ptrAttribute;
struct DkParameterMetadata;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
class SpinlockHolder<34,18,1>;
struct std::output_iterator_tag;
struct __vc_attributes::restrictedAttribute;
class SEList<TCallback<void,int *,NullType,NullType,NullType>,0>;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
struct IServerSecurity;
class Spinlock<250,1,1>;
class Spinlock<105,9,1>;
struct _PSFEATURE_CUSTPAPER;
class std::istreambuf_iterator<char,std::char_traits<char> >;
class SOS_MemoryNodeRingRecord;
class SpinlockHolder<23,19,1>;
struct __vc_attributes::sourceAttribute;
struct CXFilePageHeader;
struct __vc_attributes::refAttribute;
class SpinlockHolder<303,1,1>;
struct __vc_attributes::customAttribute;
struct std::_Bool_struct;
class std::codecvt_base;
union std::_String_val<unsigned short,std::allocator<unsigned short> >::_Bxty;
class std::allocator<unsigned short>;
class std::_String_val<unsigned short,std::allocator<unsigned short> >;
class IfNullTypeZeroElseOne<void *>;
struct _NETCONNECTINFOSTRUCT;
class TSentinel<1130458178,1684366178>;
class AutoSpinlockHolder<108,9,1>;
struct IInternetSecurityManager;
class CRTSEHNoTranslatorSetter;
struct tagCBT_CREATEWNDA;
class SEList<SOS_Node,0>;
class SpinlockHolder<55,16,1>;
class SEList<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0>;
class Spinlock<202,3,1>;
struct IEnumConnectionPoints;
class DmpPointer<unsigned char>;
class std::basic_istream<char,std::char_traits<char> >::_Sentry_base;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
class XeSqlPkg::plan_cache_cache_hit;
struct _EVENT_TRACE_PROPERTIES;
struct __vc_attributes::providerAttribute;
struct BitManipTraits<unsigned int,4>;
struct _GLYPHMETRICS;
class SpinlockHolder<42,18,1>;
class TSinglyLinkedList<XE_LoadedLibrary>;
struct _Ctypevec;
class std::ctype<unsigned short>;
class XE_ILiveSessionMetadata;
class IfNullTypeZeroElseOne<unsigned __int64>;
class SEListEnum<SOS_Task,320>;
struct __vc_attributes::unhookAttribute;
class XE_API;
struct __vc_attributes::atl::db_columnAttribute;
class AutoSpinlockHolder<323,1,1>;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct tagENUMLOGFONTW;
struct __vc_attributes::atl::db_commandAttribute;
struct _FLAG_STGMEDIUM;
class SpinlockHolder<62,16,1>;
struct __vc_attributes::atl::db_tableAttribute;
class std::strstreambuf;
class std::ostrstream;
class SpinlockHolder<86,13,1>;
class std::out_of_range;
class AutoSpinlockHolder<188,3,1>;
struct tagSTGOPTIONS;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
class TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>;
struct __vc_attributes::atl::support_error_infoAttribute;
class SOS_MemoryBrokerClerkRingRecord;
struct __vc_attributes::implementsAttribute;
struct DiagObjectSLock;
class std::basic_ios<unsigned short,std::char_traits<unsigned short> >;
struct __vc_attributes::event_sourceAttribute;
class XeSqlPkg::ghost_cleanup_task_process_packet;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<4>;
struct _PROCESS_MITIGATION_DEP_POLICY;
struct tagDBCOLUMNACCESS;
struct CCompatLevel::ClassName;
struct __vc_attributes::helper_attributes::v1_nameAttribute;
class TSQLUtil;
struct FLASHWINFO;
class MutexEnumCreator;
class XE_AutoRg<XECustomizableAttribute>;
class XE_AutoCustomizableAttributes;
class XE_IPackage;
class XE_PackageMetadata;
class SpinlockHolder<334,0,257>;
struct _WGLSWAP;
struct tagEMREXTFLOODFILL;
struct CpuChangeCallbackList;
class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
struct __vc_attributes::helpfileAttribute;
struct tagEMRSETPIXELV;
class XE_AutoP<XE_FileProcessor>;
class Spinlock<119,8,1>;
class AutoSpinlockHolder<195,3,1>;
struct _LONGDOUBLE;
class AutoSpinlockHolder<140,4,1>;
struct _numberfmtW;
class ClockInfo;
class SpinlockHolder<240,1,1>;
struct _EVENTLOG_FULL_INFORMATION;
struct TestTeamExponentialSLock;
struct _CLASSIC_EVENT_ID;
struct PoolData;
class TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> >;
struct XE_LogFileHeader;
class std::codecvt<unsigned short,char,int>;
class Spinlock<209,3,1>;
class std::basic_istream<char,std::char_traits<char> >::sentry;
struct AppendOnlyStorageSLock;
struct HRGN__;
class Spinlock<46,18,1>;
class SEListEnum<SOS_Task,0>;
struct _SYSTEM_PERFORMANCE_INFORMATION;
class XeSosPkg::process_killed;
class AutoSpinlockHolder<113,9,1>;
struct std::_Nonscalar_ptr_iterator_tag;
struct ObjectStoreSLock;
class TSinglyLinkedList<SList>;
class SOS_ObjectStore::ObjectSubStore;
struct tagSOLE_AUTHENTICATION_LIST;
struct SOS_Scheduler::PerfStats;
class StackFramesStore;
class SOS_MemoryBroker;
class SOS_MemoryPool;
class MemoryPoolManager;
struct std::forward_iterator_tag;
class Spinlock<127,7,1>;
class std::_Yarn<char>;
struct tagMEASUREITEMSTRUCT;
struct CurSqlSLock;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
class SOSQueue<SOS_Task,0>;
struct MatrixDvmWorkItemListSLock;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<4>;
class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct _RemotableHandle;
struct tagEMRSETPALETTEENTRIES;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>;
struct IForegroundTransfer;
class Worker::TaskAutoOffFlags;
class std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;
class SOS_HostEnum;
struct tagCURSORSHAPE;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
class Spinlock<192,3,1>;
class UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >::Elem;
struct tagEMRSETVIEWPORTORGEX;
class TCallbackListBase<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >;
struct std::_Scalar_ptr_iterator_tag;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,unsigned long,NullType,NullType,NullType>;
class SOS_CacheStore;
struct ISOSHost_OSThreadCreateDestroyCallback;
class TypeListSize<TypeListNode<unsigned __int64,NullType> >;
class CIncPageMgr;
class CAutoBase<DynInterval *>;
class Spinlock<228,1,1>;
struct IObjectIdentity;
class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem;
class XE_ITarget;
class Spinlock<73,16,1>;
struct _REMOTE_NAME_INFOW;
struct MemoryUtilizationInfo;
class TCallbackList<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >;
class AutoSpinlockHolder<288,1,1>;
struct SOS_OS::RegistryOSVersion;
class Spinlock<49,18,1>;
class CMallocSpy::CDebugData;
struct tagCBT_CREATEWNDW;
struct pvalueW;
class SOS_CallProtectorTraitsDefault;
struct tagTTPOLYCURVE;
class Spinlock<51,17,1>;
struct std::iterator_traits<int>;
struct SESList<XEPackage0::XE_LiveWriter::LiveClientEntry,0>;
struct SESList<XEPackage0::XE_LiveWriter::MetadataBlockEntry,8>;
class XEPackage0::XE_LiveWriter;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<2>;
struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
class AutoCPUId;
struct tagICONMETRICSW;
struct RPCStream::CurrentBuffer;
class RPCStream;
class XE_FileReaderDefaultPolicy;
class AlignedSmallPageAllocator::PageInfo;
struct CSerializeContext<CMemBufFormatter>::CharTypeFormatter;
struct tagRAWINPUTDEVICELIST;
struct ISWbemRefresher;
struct _SERVICE_START_REASON;
class Spinlock<110,9,1>;
struct _SYSTEM_AUDIT_ACE;
class SOS_Time;
class AutoSpinlockHolder<7,19,1>;
struct _TOKEN_ORIGIN;
struct ISOSHost_MemoryClerk;
struct _TAPE_WMI_OPERATIONS;
class SpinlockHolder<247,1,1>;
struct std::is_error_code_enum<SOS_Scheduler *>;
struct _SECURITY_QUALITY_OF_SERVICE;
class AutoSpinlockHolder<162,3,1>;
struct _TRACE_PROVIDER_INSTANCE_INFO;
struct _wireSAFEARRAY_UNION;
struct IndexCreateSLock;
struct ISOSHost_CacheStore;
struct _PROCESS_BASIC_INFORMATION;
struct _PROCESS_EXTENDED_BASIC_INFORMATION;
struct SNINodePendingIOQueueSLock;
class CRTSEHSOSTranslatorSetter;
struct _SCONTEXT_QUEUE;
class SQLMemoryReportWriter;
class SOS_InterlockedList<SOS_MemoryFragmentDescriptor,0>;
struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc;
class GroupList;
struct XETargetStatus;
struct _EXCEPTION_RECORD32;
class TListElem<TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock> >;
struct _cpinfo;
class SpinlockHolder<48,18,1>;
struct __vc_attributes::inAttribute;
class XE_AutoRg<char>;
struct tagCOMPAREITEMSTRUCT;
class XE_XMLConfigBase;
class XeSqlPkg::memory_manager_stolen_server_memory;
struct IDmpCustomizeCallback;
class XE_FindSessionGuidComparer;
struct TransportMessageQueuePagesSLock;
struct tagEMRRESTOREDC;
struct _FILE_NOTIFY_INFORMATION;
struct _TRANSACTION_PROPERTIES_INFORMATION;
struct __vc_attributes::defaultbindAttribute;
struct std::tr1::add_reference<void volatile >;
struct __vc_attributes::controlAttribute;
class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base;
class XeSosPkg::task_aborted;
struct __vc_attributes::uuidAttribute;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<2>;
class Spinlock<181,3,1>;
struct _s__ThrowInfo;
struct TClassName<short,1,0>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>;
struct std::identity<std::ostrstream>;
struct __vc_attributes::switch_typeAttribute;
class AutoSpinlockHolder<332,0,0>;
class SEList<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0>;
class ISOSHost_OSAffinityChangeCallbackImpl;
class XeSqlPkg::sql_transaction_commit_single_phase;
struct TestTeamSLock;
class SOSHost_Semaphore;
struct tagEMRMASKBLT;
class AutoSpinlockHolder<138,4,1>;
class UnhandledExceptionFilterProtector;
class Spinlock<203,3,1>;
class SOS_CacheStoreHashBucketUserDataEnum;
class SEListSized<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0>;
class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket;
struct ISurrogate;
struct LogPoolSizePerResourcePoolSLock;
class std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >;
struct tagPROCESSENTRY32W;
class CacheWideStats;
struct _POWER_SESSION_RIT_STATE;
struct tagSOUNDSENTRYA;
struct DynInterval;
class CallResultWithoutReturnValue;
struct _PDH_FMT_COUNTERVALUE_ITEM_A;
struct tagINTERFACEDATA;
class SystemTimerRequest;
struct tagWNDCLASSEXW;
struct ConnectionMgrSLock;
struct IProvideMultipleClassInfo;
struct ResManagerHashSLock;
class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>::Bucket;
struct XETargetAPI;
class SpinlockHolder<218,2,1>;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
class TSinglyLinkedList<SystemThreadPool::SystemThreadBlock>;
struct XEBuffer;
class SpinlockHolder<160,3,1>;
struct ISOSHost_Semaphore;
class TSyncHashTable<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>;
class SOS_WaitableAddressManager;
class TCallbackListBase<TCallback<void,int *,NullType,NullType,NullType> >;
struct __vc_attributes::appobjectAttribute;
struct tagEMRANGLEARC;
class Spinlock<50,17,1>;
struct __vc_attributes::optionalAttribute;
struct IProgressNotify;
struct HFONT__;
class AutoSpinlockHolder<279,1,1>;
struct tagOIFI;
class AutoSpinlockHolder<147,4,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>;
class AutoSpinlockHolder<90,12,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<1>;
struct tagEMRTRANSPARENTBLT;
struct tagEMRSELECTCLIPPATH;
class IXmlGraphWriter;
struct __vc_attributes::event_receiverAttribute;
struct FCBReplicaSyncSLock;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
struct _TAPE_SET_DRIVE_PARAMETERS;
struct SOS_WaitStats::WaitStatsPage;
struct tagCBTACTIVATESTRUCT;
class CAutoP<XEPackage0::BucketizingTarget::Entry>;
struct IAuthenticateEx;
class SOS_ResourcePool;
struct HWND__;
class Spinlock<316,1,1>;
struct IXMLDocument2;
struct _DWORD_BLOB;
struct IEnumSTATPROPSETSTG;
class SpinlockHolder<78,14,1>;
struct _ACTIVATION_CONTEXT;
class SpinlockHolder<241,1,1>;
struct __vc_attributes::odlAttribute;
class TSimpleHashTable_EntryAccessor<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>;
struct HPALETTE__;
class SpinlockHolder<256,1,1>;
struct tagMETHODDATA;
struct tagPARAMDATA;
struct _COSERVERINFO;
class SpinlockHolder<76,15,1>;
struct IBindHost;
struct _MEMORY_BASIC_INFORMATION64;
class SEList<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>,0>;
class LongTermSchedulerEnum;
class NodeMemoryNotification;
struct __vc_attributes::defaultcollelemAttribute;
struct _SE_ACCESS_REPLY;
struct XE_LogBufferPosition;
class CAutoTraceLock;
struct __vc_attributes::helpstringAttribute;
class SOS_TRingBufferRecordEnum<SOS_MemoryNodeRingRecord>;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct IWbemTransport;
struct _FULL_PTR_XLAT_TABLES;
struct SNISLock;
struct PPM_WMI_PERF_STATES_EX;
class TCallbackListBase<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType> >;
struct IBindStatusCallback;
class XeSqlPkg::hadr_transport_replica_before_build_replica_response_processing_on_primary;
class Spinlock<204,3,1>;
struct RWSLock;
class SEList<SOS_RWLock::RWLockWaiter,0>;
class SOS_RWLock;
struct _GROUP_INFO_3;
struct XE_TypeTraits<XEPredicateSource>;
struct _currencyfmtW;
struct tagEMREXTCREATEFONTINDIRECTW;
struct tagEMREXTESCAPE;
class SpinlockHolder<46,18,1>;
class SOS_GenericDescriptor;
struct ISOSHostPrev1;
class Spinlock<40,18,1>;
struct tagRPC_CALL_ATTRIBUTES_V1_A;
struct PPM_PERFSTATE_DOMAIN_EVENT;
struct IMAGE_LOAD_CONFIG_DIRECTORY32;
struct tagREGISTERWORDW;
struct _KCRM_MARSHAL_HEADER;
class AutoSpinlockHolder<193,3,1>;
struct XE_FileSetMemoryMap::Coordinate;
struct tagPOLYTEXTA;
struct _TRANSACTIONMANAGER_BASIC_INFORMATION;
struct tagMINMAXINFO;
struct _STARTUPINFOA;
struct _STARTUPINFOEXA;
class AutoSpinlockHolder<329,1,1>;
struct LockResourceIdSLock;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct tagEMRSETMAPPERFLAGS;
struct tagDEBUGHOOKINFO;
struct _IMAGE_RELOCATION;
struct IHttpSecurity;
struct DestroyedTempTablesSLock;
struct NUMPARSE;
class XE_VersionConfig;
struct BlockerEnumSLock;
class CAutoRg<unsigned char>;
struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
struct tagABORTPATH;
class SpinlockHolder<31,19,1>;
class XE_AutoEngineMutex;
struct ICanHandleException;
class AutoSpinlockHolder<235,1,1>;
struct _LDBL12;
class Spinlock<117,8,1>;
struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
struct ISOSHost_RWLock_Prev0;
class CFixedInfo::CFixedSlot;
struct _TP_IO;
struct tagCONTROLINFO;
class XeSqlPkg::logout;
class AutoSpinlockHolder<203,3,1>;
class SpinlockHolder<311,1,1>;
class NonPreemptiveSetter;
struct HACCEL__;
struct _TIME_DYNAMIC_ZONE_INFORMATION;
struct BpWorkfileSLock;
class Spinlock<133,4,1>;
struct std::char_traits<char>;
class SOS_InterlockedList<SOS_MemoryFreeBlock,0>;
struct tagEMREXTSELECTCLIPRGN;
class AutoSpinlockHolder<209,3,1>;
class CSqlProfGuard;
struct HGLRC__;
struct _OSVERSIONINFOW;
struct tagUSEROBJECTFLAGS;
struct _NON_PAGED_DEBUG_INFO;
class TypeListSize<NullType>;
struct LargePageAllocatorSLock;
class SEList<FreePageElem,0>;
class LargePageAllocator;
class SOS_Task::Param;
class GroupNumaConfig::LogicalProcessorInfoEnum;
class AutoXcursionScope;
class TSimpleHashTable_EntryAccessor<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>;
struct tagSTICKYKEYS;
class Spinlock<246,1,1>;
class StackUsageInfo;
class ResourceDescriptor;
struct _tagpropertykey;
struct std::tr1::_Get_align<char>;
class AutoSpinlockHolder<75,16,1>;
struct DescriptorInfo::UsageInfo;
struct _JOBOBJECT_JOBSET_INFORMATION;
struct CloudPartitionUsageSLock;
class TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>;
struct tagRAWINPUT;
class SEList<ClockInfo,64>;
struct tagANIMATIONINFO;
struct _EVENT_RECORD;
class AutoSpinlockHolder<216,2,1>;
struct _NDR_USER_MARSHAL_INFO_LEVEL1;
struct _NDR_USER_MARSHAL_INFO;
class ResManagerIOEntity;
class AutoSpinlockHolder<240,1,1>;
struct _QUERY_SERVICE_CONFIGA;
class std::numeric_limits<unsigned int>;
class XeSqlPkg::catalog_metadata_cache_entry_pinned;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
class CSlotHdr;
struct _FLOAT128;
class TVarPageMgr<0>;
struct _LDT_ENTRY;
class ErrMsg;
struct tagEMRFILLRGN;
struct _SERVICE_NOTIFY_2A;
struct MatrixPrismStateSLock;
class IOStats;
struct HIMCC__;
struct _MEMORY_BASIC_INFORMATION32;
class AutoSpinlockHolder<213,2,1>;
struct __type_info_node;
class SOS_ObjectStore::ObjectClockAlgorithm;
struct IDispatch;
struct _XSTATE_CONTEXT;
struct tagSAFEARRAY;
class TEnumerator<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >;
class Spinlock<179,3,1>;
class DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::Iterator;
struct _MUILANGUAGES;
class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::List;
struct std::is_error_condition_enum<int>;
struct _USER_MARSHAL_CB;
struct std::is_error_code_enum<unsigned long>;
struct IAddrTrackingControl;
struct _ACTIVATION_CONTEXT_DATA;
struct _RDR_CALLOUT_STATE;
struct ANON_OBJECT_HEADER_V2;
class SpinlockHolder<277,1,1>;
struct _TOKEN_OWNER;
class SOS_InterlockedList<SOS_ParentBlockDescriptor,0>;
struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc;
struct IWaitMultiple;
struct _TAPE_PREPARE;
struct _IMAGE_FUNCTION_ENTRY64;
struct IMessageFilter;
class Spinlock<57,16,1>;
struct tagSTYLEBUFA;
struct tagPARAMDESCEX;
struct _WORD_BLOB;
class CAutoP<XE_Log>;
struct XchngTraceSLock;
struct _WOW64_CONTEXT;
struct tagEMRSETVIEWPORTEXTEX;
struct tagCOMBOBOXINFO;
struct _SEC_WINNT_AUTH_IDENTITY_A;
class ISOSHost_NodeAffinityChangeCallbackImpl;
class Spinlock<120,8,1>;
struct IBlockingLock;
struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::NodePartition;
class XeSqlPkg::full_update_instead_of_partial_update;
struct _BY_HANDLE_FILE_INFORMATION;
struct _SE_PACKAGE_CAPABILITY_INFO;
struct std::tr1::_Or<0,0>;
struct tagTEXTMETRICW;
struct std::tr1::integral_constant<unsigned __int64,0>;
struct WMIREGINFOW;
class SEListEnum<MiniSOSThreadResources,0>;
struct SChannelHookCallInfo;
class Spinlock<304,1,1>;
struct _NT_TIB;
struct _tagPROTOCOLDATA;
struct _IMAGE_TLS_DIRECTORY64;
struct localeinfo_struct;
struct std::tr1::integral_constant<bool,0>;
union __m256;
class TSyncHashTableBase<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>;
struct __lc_time_data;
class XE_TCollection<0,1>;
struct _PROCESS_MEMORY_COUNTERS_EX;
struct std::tr1::add_rvalue_reference<void volatile >;
struct __vc_attributes::immediatebindAttribute;
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>;
struct __vc_attributes::importlibAttribute;
struct IConnectionPoint;
struct tagEMRLINETO;
class CAutoInAssert;
class XE_MemoryStream;
struct tagRemBRUSH;
class DbgDataBuff;
class CacheEvictionAlgorithmCommon<CacheProbabilisticAlgorithm>;
class ISOSHost_TaskImpl;
class XeSqlPkg::catalog_metadata_cache_entry_unpinned;
class XE_ActionForwarder;
struct tagKBDLLHOOKSTRUCT;
struct tagRPC_EXTENDED_ERROR_INFO;
class SEList<CMemBufFormatter::CSinglePageBuffer,8>;
struct _ENLISTMENT_CRM_INFORMATION;
class SpinlockHolder<322,1,1>;
struct _NETINFOSTRUCT;
struct _RPC_CLIENT_INTERFACE;
class SEList<SOSHost,0>;
class NodeManager;
class XeSqlPkg::broker_transmission_exception;
class Spinlock<293,1,1>;
class SpinlockHolder<178,3,1>;
class SEListEnum<XE_LogDeserializedPackage::Chunk,0>;
struct _TRACE_LOGFILE_HEADER64;
struct _RPC_MESSAGE;
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
struct tagRPCOLEMESSAGE;
struct _OVERLAPPED_ENTRY;
class SpinlockHolder<152,3,1>;
class SpinlockHolder<108,9,1>;
class AutoMakeMicroSOSThread;
class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc,16>;
struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::NodePartition;
class SOS_SchedulerRingRecord;
struct IViewObject;
class SOSResourcePoolData;
class AutoSpinlockHolder<100,10,1>;
class SOS_BlockersEnumerator;
struct _userHBITMAP;
struct _userBITMAP;
class CAutoBase<XE_IDecoder>;
struct _userHPALETTE;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<1>;
class TokenPostReverter;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct _FLAGGED_BYTE_BLOB;
class SEListEnum<XE_LogDeserializedPackage,0>;
struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
class TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>;
class CFixedPageMgr;
class CMemFixed;
struct std::_Arithmetic_traits<float>;
class SEList<Worker,16>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<2>;
class std::basic_ostream<char,std::char_traits<char> >;
class std::error_code;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<1>;
class XE_AutoP<XE_LoadedLibrary>;
class XE_ResolvedObject<XEAction>;
struct _PSAPI_WORKING_SET_EX_INFORMATION;
class AutoSpinlockHolder<148,4,1>;
class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>;
class LocalStorage;
struct ImgDelayDescr;
class std::numpunct<char>;
struct NDR_POINTER_QUEUE_STATE;
class std::underflow_error;
class TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
class AutoSpinlockHolder<116,8,1>;
class XE_FileProcessor;
class ISOSHost_SemaphoreImpl;
struct XdesHashSLock;
class SEListSized<IORGHashTableEntry,248>;
class XE_AutoResource<void *,256>;
class XE_Log;
struct MatrixDvmAgentPriorityQueueSLock;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>;
struct XE_CompressionCache::MemBlock;
class AutoSpinlockHolder<168,3,1>;
class std::range_error;
class SpinlockHolder<151,3,1>;
struct ISOSClient_ResourceInfo;
class ISOSHost_EventManualImpl;
class std::numeric_limits<__int64>;
class CAutoP<XE_ConfigCrc>;
struct XDBRemoteUriCacheSLock;
class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >;
class XE_LogDeserializedPackage::Chunk;
struct _FILE_NETWORK_OPEN_INFORMATION;
class MemoryClerk;
struct _SYSTEM_ALARM_CALLBACK_ACE;
class SpinlockHolder<125,7,1>;
struct ISOSHostPrev2;
class CAutoBase<XE_FileSet::Entry>;
struct tagACTCTXA;
struct tagOBJECTDESCRIPTOR;
class XE_AutoP<XE_BufferMap>;
struct IXMLDOMAttribute;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>;
struct DLGITEMTEMPLATE;
class TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>;
struct std::is_error_code_enum<std::istreambuf_iterator<char,std::char_traits<char> > >;
class Spinlock<48,18,1>;
struct _SERVICE_USERMODEREBOOT_INFO;
class Spinlock<327,1,1>;
struct tagSERIALKEYSW;
class Spinlock<21,19,1>;
class SOS_UserDescriptor;
struct tagMDICREATESTRUCTA;
class SpinlockHolder<102,10,1>;
struct tm;
class BitManip<unsigned int>;
struct _SEC_WINNT_AUTH_IDENTITY_W;
struct SOS_DispatcherStats;
struct _OUTLINETEXTMETRICA;
class SOS_TRingBufferRecordEnum<SOS_RingBufferRecord>;
class SOS_RingBufferRecordSerializingEnum;
struct tagEMRPOLYTEXTOUTA;
class std::reverse_iterator<std::_String_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >;
struct HLSURF__;
class SEListEnum<SOS_Task,16>;
struct tagBITMAPINFOHEADER;
class XeSqlPkg::catalog_metadata_cache_entry_added;
class SEList<eXcursionEntry,0>;
struct TaskTracker;
class XeSqlPkg::memory_manager_target_server_memory;
class SOS_CacheEntryTokenExposed;
struct tagCLIPDATA;
class PerCPUDataBase<SOS_MemoryWorkSpace::WSCpuPart>;
class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>;
class ResManagerIOData;
struct std::char_traits<unsigned short>;
struct tagVersionedStream;
struct std::tr1::_Remove_reference<std::locale * &>;
union _Dconst;
class SEList<AlignedSmallPageAllocator::PageInfo,16>;
class TypeListSize<TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base;
class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
struct PPM_WMI_PERF_STATES;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>;
class XE_DeserializedBuffer;
class XListElem<ProbCostData>;
struct ISOSHost_OSAffinityChangeCallback;
struct _MEMORY_BASIC_INFORMATION;
struct _OUTLINETEXTMETRICW;
class TypeListSize<TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >;
class TCacheStore<CacheClockAlgorithm>::CacheEntryDescriptor;
struct _BLENDFUNCTION;
struct PPM_WMI_IDLE_STATES_EX;
struct _RPC_PROTSEQ_VECTORW;
class CDStream;
class XE_TargetStringBuilder;
class ISOSHost_AutoMutex;
struct _TRANSACTION_BIND_INFORMATION;
struct ColumnDescriptor;
class std::codecvt<char,char,int>;
class AutoSpinlockHolder<151,3,1>;
class WcsSafeFakeType3;
class CMemLargePageObj;
struct _SERVICE_NOTIFY_2W;
struct tagEMRCREATEDIBPATTERNBRUSHPT;
struct _PERFORMANCE_INFORMATION;
struct ISOSHost_Task_Prev0;
struct tagRemSTGMEDIUM;
struct _KTMOBJECT_CURSOR;
struct tagLICINFO;
struct CMEnlistmentSLock;
class XeSosPkg::malloc_spy_corrupted_memory_detected;
struct tagMSG;
class Spinlock<60,16,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
struct _SERVICE_FAILURE_ACTIONSA;
struct tagPAINTSTRUCT;
struct _DISCDLGSTRUCTA;
struct _RESOURCEMANAGER_COMPLETION_INFORMATION;
struct _RPC_SECURITY_QOS_V3_W;
struct BSMINFO;
class SpinlockHolder<244,1,1>;
class SOSResourceGroupData;
struct _GRADIENT_TRIANGLE;
struct _MODEMSETTINGS;
struct IPicture2;
struct _IMAGE_DEBUG_DIRECTORY;
struct XE_NotificationCallbackListSLock;
struct IAsyncRpcChannelBuffer;
class Spinlock<297,1,1>;
struct _SYSTEM_MANDATORY_LABEL_ACE;
struct _ACCESS_DENIED_ACE;
class Spinlock<187,3,1>;
struct _TOKEN_USER_CLAIMS;
struct _POWER_USER_PRESENCE;
struct IInternetHostSecurityManager;
struct _HGROUPENUM;
struct XE_BufferMgrSLock;
class CAutoRg<XMLEventTransformRule>;
struct tagCOPYDATASTRUCT;
class SpinlockHolder<130,7,1>;
struct std::ctype_base;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
struct BITMAPV5HEADER;
struct IPipeDouble;
class TypeListSize<TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > > >;
class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct _ImageArchitectureHeader;
struct _QUERY_SERVICE_LOCK_STATUSA;
class Spinlock<321,1,1>;
class SpinlockHolder<324,1,1>;
struct _RPC_IF_ID;
class XeSosPkg::nonpreemptive_long_syncio;
class EventManualInternal<SuspendQueueSLock>;
class SOS_WaitableAddress;
struct _COAUTHINFO;
struct std::_Arithmetic_traits<long double>;
struct _COAUTHIDENTITY;
struct tagMOUSEKEYS;
class AutoSpinlockHolder<56,16,1>;
struct PPM_WMI_IDLE_STATES;
struct _RPC_POLICY;
struct _ACCESS_DENIED_CALLBACK_ACE;
struct _TOKEN_GROUPS;
class XeSosPkg::deadlock_scheduler_callback_executed;
class CAutoBase<DkParameter>;
struct _TOKEN_PRIVILEGES;
class Spinlock<90,12,1>;
struct ISOSHost_Mutex;
struct ANON_OBJECT_HEADER;
class IPointerRelease;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _RTL_CRITICAL_SECTION;
struct _PSFEATURE_OUTPUT;
class SOS_CacheStoreBase;
struct MemoryUtilizationEffects::EffectInfo;
class SOS_ResourceMonitorRingRecord;
class SOSQueue<SystemThread,144>;
class SystemThreadDispatcher;
class RefCountImpl<SOS_PartitionedHeap>;
class AutoSpinlockHolder<182,3,1>;
class SOSHost_CacheStoreHashBucketUserDataEnum;
struct tagMONITORINFO;
struct tagPROPPAGEINFO;
struct _WIN32_FILE_ATTRIBUTE_DATA;
class TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryDescriptor;
struct _DOCINFOW;
class std::bad_typeid;
struct _RTL_BARRIER;
struct tagEMRGLSBOUNDEDRECORD;
struct tagEMRPOLYLINE16;
struct OneProcSimNodeContextSLock;
struct ISWbemRefreshableItem;
class CAutoRefc<XE_XMLConfiguredSessionEnumerator>;
class SpinlockHolder<215,2,1>;
class CFnHashNames;
struct _DISPLAY_DEVICEA;
struct _remoteMETAFILEPICT;
struct _tagPROTOCOL_ARGUMENT;
class Spinlock<131,6,1>;
struct __vc_attributes::helper_attributes::repeatableAttribute;
class ExcHandler;
struct tagEMRSCALEVIEWPORTEXTEX;
struct tagENHMETAHEADER;
class Spinlock<172,3,1>;
struct XE_DeferredEvent;
struct QExecSLock;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<3>;
struct tagMOUSEMOVEPOINT;
class ISOSHost_SharedMemoryImpl;
struct _cpinfoexA;
struct _JIT_DEBUG_INFO;
class SpinlockHolder<92,11,1>;
struct ITypeLib2;
class Spinlock<251,1,1>;
struct SecuritySLock;
class ContextUMSProxy;
class Spinlock<39,18,1>;
struct _wireSAFEARRAY;
struct tagEMRSETCOLORADJUSTMENT;
class Spinlock<175,3,1>;
struct __vc_attributes::nonextensibleAttribute;
class AutoSpinlockHolder<298,1,1>;
struct XMLColumnTransformRule;
struct tagPOLYTEXTW;
struct tagSOLE_AUTHENTICATION_INFO;
struct DroppedAllocUnitSLock;
struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::FragmentDesc;
class PerCPUData<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition>;
class DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>;
struct __vc_attributes::atl::tag_nameAttribute;
struct tagHELPWININFOW;
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
struct __vc_attributes::idAttribute;
class AutoSpinlockHolder<129,7,1>;
class SOS_IOCompRequest;
struct SOS_IOCompRequestEnum::Element;
class MutexBlockerEnumerator;
struct MatrixMemTableStateSLock;
struct _PERFORMANCE_DATA;
struct XE_TArray<XEPackage *,2>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
struct _devicemodeA;
class UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >;
struct _CONSOLE_FONT_INFOEX;
struct _PACKEDEVENTINFO;
class SpinlockHolder<17,19,1>;
class CAutoRg<XE_LogSpecs::LogSpec>;
class SEListEnum<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>,0>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
struct ISOSHost_RWLock;
class Spinlock<155,3,1>;
class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;
struct _WIN32_FIND_STREAM_DATA;
struct HTASK__;
class SpinlockHolder<323,1,1>;
struct $_TypeDescriptor$_extraBytes_26;
struct tagRPC_ERROR_ENUM_HANDLE;
class Spinlock<130,7,1>;
class ISOSHost_TaskAutoSwitchNonPreemptiveHelper;
struct _UUID_VECTOR;
class TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>;
struct std::_Arithmetic_traits<double>;
class AbortTaskListEntry;
struct HWINSTA__;
struct tagWINDOWINFO;
class SchedulerManagerList;
class SchedulerManager::SchedulerList;
class SchedulerManager;
struct SpinlockStat::Entry;
class SpinlockStat;
class CSystemTimes;
class SchedulerMonitor::ProcessTrack;
class SchedulerMonitor;
class SOS_Node;
class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct IMallocSpy;
struct std::tr1::add_reference<void const >;
struct tagVS_FIXEDFILEINFO;
class AutoSpinlockHolder<131,6,1>;
struct SDetailedMemObjInfo;
struct _TP_WORK;
class Spinlock<315,1,1>;
struct tagEMREXTCREATEPEN;
class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct tagWTSSESSION_NOTIFICATION;
class std::numeric_limits<long>;
struct IXMLDOMCharacterData;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;
class CAutoShrink;
struct tagEMRALPHABLEND;
struct tagWNODE_METHOD_ITEM;
class ISOSHostImpl;
struct MemMgrSLock;
class FreePagePool;
struct ICallFactory;
class IContextHandleImpl;
class std::numeric_limits<float>;
struct _DISPLAY_DEVICEW;
class SpinlockHolder<179,3,1>;
class TList<SchedulerManager,Worker,16,TListSLock>;
struct ISOSHostPrev0;
struct _UMS_CREATE_THREAD_ATTRIBUTES;
struct value_entA;
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
struct XE_TEvent<3,0,13>;
class SpinlockHolder<99,11,1>;
struct _EXCEPTION_POINTERS;
class SpinlockHolder<223,2,1>;
struct _FPO_DATA;
union DescriptorInfo::ClockAtomicInfo;
class DescriptorInfo;
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
struct BatchSLock;
struct LIST_ENTRY64;
class SEList<SOS_Node,16>;
struct HMONITOR__;
struct XE_TCollection<1,0>::TCol<1>;
struct _MEMORYSTATUS;
struct IWbemServices;
struct _CONSOLE_FONT_INFO;
class AutoSpinlockHolder<156,3,1>;
struct CXReaderPosition;
class ResourceGroupData;
union __m128;
class SEListEnum<SOS_ResourceGroup,16>;
struct ResourceClerkListSLock;
class TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock>;
struct tagCLEANLOCALSTORAGE;
class XeSqlPkg::databases_log_shrink;
class CSlotGroup;
struct _TOKEN_APPCONTAINER_INFORMATION;
struct tagTTPOLYGONHEADER;
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW;
class std::basic_streambuf<char,std::char_traits<char> >;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
class Spinlock<216,2,1>;
class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem> >;
struct SEQueueSizeThreadSafeSLock;
class SOS_StateProtectors<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost;
struct _lldiv_t;
class SEListEnum<PageHeapPageInfo,40>;
struct __vc_attributes::helper_attributes::requires_valueAttribute;
struct XE_TEvent<3,0,12>;
class XeSosPkg::large_cache_memory_pressure;
struct tagDIBSECTION;
class TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>;
struct tagICONMETRICSA;
class Spinlock<61,16,1>;
struct _ASSEMBLY_STORAGE_MAP;
struct _tagAUTHENTICATEINFO;
struct XE_TCollection<0,1>::TCol<0>;
class AutoSpinlockHolder<29,19,1>;
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>;
class CAutoRg<CXFilePageForRead>;
struct tagHIGHCONTRASTA;
class IMemoryAllocator;
class XE_ConfiguredSession;
class SpinlockHolder<330,1,1>;
class TypeList<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>;
struct _SECURITY_DESCRIPTOR_RELATIVE;
class TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > >;
struct _TOKEN_STATISTICS;
class CAutoBase<XMLColumnTransformRule>;
class XeSosPkg::crt_out_of_memory_routine_executed;
struct tagEMRSETMITERLIMIT;
class SOS_CacheStore::ConfigurationInfo;
struct _GRADIENT_RECT;
struct __vc_attributes::progidAttribute;
class XeSosPkg::thread_attached;
class XeSqlPkg::databases_log_file_used_size_changed;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct tagHEAPLIST32;
class TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>;
class CAutoMalloc<DkParameter *>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<3>;
struct _COMSTAT;
struct __vc_attributes::dispinterfaceAttribute;
class Spinlock<118,8,1>;
struct __vc_attributes::atl::soap_methodAttribute;
class ISOSHost_TaskCallbackImpl;
struct _ENUM_SERVICE_STATUS_PROCESSW;
class SOSHost_Node;
struct tagKERNINGPAIR;
class AutoSpinlockHolder<132,5,1>;
struct tagCOLORMATCHTOTARGET;
class AutoSpinlockHolder<177,3,1>;
class SOS_MemoryFragmentDescriptor;
struct tagEMRCREATEPEN;
struct ISequentialStream;
struct _BrowseDlgConfig_HW;
struct __vc_attributes::moduleAttribute;
struct _EVENT_TRACE_LOGFILEA;
struct std::is_error_code_enum<char const *>;
struct ISOSHostPrev3;
class std::_Winit;
struct $_TypeDescriptor$_extraBytes_19;
class PreemptiveSetter;
struct CXFileDirectoryEntry;
struct _RPC_SECURITY_QOS;
struct OSAffinityChangeCallbackList;
struct _CONSOLE_HISTORY_INFO;
struct _PDH_RAW_LOG_RECORD;
class SEListEnum<SOS_ResourcePool,0>;
class XE_TCollection<1,0>;
struct _RPC_SERVER_INTERFACE;
struct __vc_attributes::hiddenAttribute;
struct ObjectPoolSLock;
struct _NT_TIB64;
struct _ABCFLOAT;
struct _POWER_SESSION_TIMEOUTS;
class SpinlockHolder<116,8,1>;
class CAutoBase<XMLEventTransformRule>;
class SOS_CPUInfo;
struct IReleaseMarshalBuffers;
struct _userSTGMEDIUM::_STGMEDIUM_UNION;
struct _userHMETAFILEPICT;
struct BufLinkSLock;
class Spinlock<198,3,1>;
class SEList<TCallback<void,SOS_Task *,NullType,NullType,NullType>,0>;
class GlobalSchedulerList;
struct _SUPPORTED_OS_INFO;
class Spinlock<206,3,1>;
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA;
class Spinlock<19,19,1>;
struct InterlockedTraits<4>;
struct _ACCESS_DENIED_OBJECT_ACE;
struct tagEMRSELECTOBJECT;
class StackHashCallStack;
union _SOSTICKCOUNT64;
struct std::tr1::_Is_integral<signed char>;
class SEList<ErrMsg,24>;
class Spinlock<234,1,1>;
struct tagEMRSETTEXTCOLOR;
class CMemDbg<CMemProc>;
struct std::is_error_condition_enum<std::error_code>;
struct _PROCESS_INFORMATION;
struct _PROCESS_WS_WATCH_INFORMATION_EX;
class Spinlock<261,1,1>;
struct tagNONCLIENTMETRICSA;
struct tagMDICREATESTRUCTW;
class Spinlock<309,1,1>;
class XMLCXTargetConfigHelper;
struct _KCRM_TRANSACTION_BLOB;
class SEList<ArmedWaypoint,0>;
class eXcursionManager;
struct _XSTATE_CONFIGURATION;
struct std::tr1::_Cat_base<1>;
struct __vc_attributes::size_isAttribute;
struct __vc_attributes::rangeAttribute;
class SOS_NoForceRemoveStoreController;
struct __vc_attributes::uidefaultAttribute;
struct std::tr1::_Or<0,1>;
struct __vc_attributes::outAttribute;
class XeSosPkg::cpu_config_changed;
struct __vc_attributes::pointer_defaultAttribute;
struct __vc_attributes::idl_moduleAttribute;
struct __vc_attributes::max_isAttribute;
struct __vc_attributes::propgetAttribute;
class AutoSpinlockHolder<310,1,1>;
struct __vc_attributes::idl_quoteAttribute;
class Spinlock<324,1,1>;
struct __vc_attributes::pragmaAttribute;
struct __vc_attributes::propputrefAttribute;
class SpinlockHolder<121,8,1>;
class CXFixedTable;
struct __vc_attributes::oleautomationAttribute;
struct __vc_attributes::atl::db_sourceAttribute;
class SpinlockHolder<187,3,1>;
struct __vc_attributes::atl::implements_categoryAttribute;
class AutoSpinlockHolder<291,1,1>;
struct __vc_attributes::atl::requires_categoryAttribute;
struct __vc_attributes::atl::rdxAttribute;
struct __vc_attributes::atl::db_accessorAttribute;
struct __vc_attributes::atl::registration_scriptAttribute;
class SpinlockHolder<58,16,1>;
struct __vc_attributes::no_injected_textAttribute;
struct __vc_attributes::defaultvtableAttribute;
struct __vc_attributes::includeAttribute;
class XeSqlPkg::checkpoint_begin;
struct _PDH_DATA_ITEM_PATH_ELEMENTS_W;
struct _PDH_COUNTER_PATH_ELEMENTS_W;
struct _PDH_COUNTER_INFO_W;
class Spinlock<139,4,1>;
struct __vc_attributes::uniqueAttribute;
class Spinlock<14,19,1>;
struct SessionMgrPriorityQueueSLock;
struct tagMOUSEHOOKSTRUCTEX;
struct XPRESS9_STATUS_T;
class XeSqlPkg::allocation_ring_buffer_recorded;
struct _tagPROTOCOLFILTERDATA;
class AutoSpinlockHolder<336,0,1>;
struct tagBITMAPFILEHEADER;
struct ScriptDeploymentWorkersSLock;
class TTemplateInfo<1231,1024>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>;
class SpinlockHolder<59,16,1>;
class ReduceTypeListNode<ExtIntCodeProtector<1>,TypeList<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType> >;
class AutoSpinlockHolder<143,4,1>;
struct tagCONNECTDATA;
struct _TP_WAIT;
struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
struct _TP_POOL_STACK_INFORMATION;
class Spinlock<145,4,1>;
struct CM_FMConfigSLock;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>;
struct tagEMRCREATEBRUSHINDIRECT;
class SEListEnum<DkParameter,0>;
struct pvalueA;
class CPvArrayAllocator;
struct _SECURITY_CAPABILITIES;
struct tagBITMAPINFO;
struct _COMMTIMEOUTS;
struct _TOKEN_PRIMARY_GROUP;
struct RemoteBatchStatsListSLock;
class XeSqlPkg::file_written;
struct ISOSHost_NodeAffinityChangeCallback;
class XeSqlPkg::broker_activation_task_limit_reached;
struct tagPOINTF;
class CAutoBase<XE_FileSet>;
class XeSqlPkg::database_started;
class CClassInfo;
class AutoSpinlockHolder<53,16,1>;
struct _EXCEPTION_REGISTRATION_RECORD;
class SEListEnum<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>,0>;
class SOS_MemoryFragmentManager;
struct IObjectWithSite;
struct $_TypeDescriptor$_extraBytes_15;
struct _APPLICATIONLAUNCH_SETTING_VALUE;
class std::numeric_limits<bool>;
class XeSosPkg::assert_fired;
class Spinlock<168,3,1>;
struct _tagDATAINFO;
class Spinlock<183,3,1>;
struct _POWER_MONITOR_INVOCATION;
class AutoSpinlockHolder<124,7,1>;
struct ICreateTypeLib;
class SpinlockHolder<321,1,1>;
class XE_PredicateResult;
class SEList<SOS_ResourceGroup,16>;
struct tagQACONTAINER;
class SpinlockHolder<10,19,1>;
class SEList<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>,0>;
class XE_FindSessionNameComparer;
struct tagPARSEDURLW;
struct _IMAGE_TLS_DIRECTORY32;
class SpinlockHolder<77,14,1>;
class XeSqlPkg::xtp_matgen;
struct CCompatLevel::SerializableVersionInternal<CCompatLevel>;
class std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
struct _TOKEN_AUDIT_POLICY;
struct XdesSLock;
struct ProgressReportSLock;
struct PPM_IDLE_ACCOUNTING;
class XeSqlPkg::query_rpc_get_data;
class Spinlock<45,18,1>;
struct PPM_THERMALCHANGE_EVENT;
class XeSosPkg::context_switch_callback_executed;
struct _ACL_REVISION_INFORMATION;
class XE_SteamConstantElimination<char,4096>;
class ResourceClerk;
struct PROCESSOR_PERFSTATE_POLICY;
struct SYSTEM_BATTERY_STATE;
struct RPC_STATS_VECTOR;
class TCallbackList<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >;
struct RPC_IF_ID_VECTOR;
struct _LDOUBLE;
struct _BEM_REFERENCE;
class TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
class SpinlockHolder<103,10,1>;
class XE_SessionEnumerator;
struct InterlockedTraits<8>;
class AutoSpinlockHolder<331,0,1>;
struct tagINTERFACEINFO;
class Spinlock<111,9,1>;
struct TdsTvpSLock;
struct stat;
struct __m128d;
struct _LOCALGROUP_MEMBERS_INFO_0;
class XeSosPkg::large_cache_entry_value_change;
class AutoSpinlockHolder<98,11,1>;
struct std::tr1::add_rvalue_reference<void>;
struct IWbemConstructClassObject;
struct std::_Iterator012<std::random_access_iterator_tag,unsigned short,__int64,unsigned short const *,unsigned short const &,std::_Iterator_base0>;
struct std::iterator_traits<__int64>;
struct CM_FMHistorySLock;
class TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>;
class AutoSpinlockHolder<267,1,1>;
class AutoSpinlockHolder<165,3,1>;
class XE_FileSet::Entry;
class Spinlock<173,3,1>;
struct _PO_WAKE_SOURCE_INFO;
class Spinlock<283,1,1>;
class Spinlock<330,1,1>;
class SpinlockHolder<129,7,1>;
class CacheClockHand<CacheProbabilisticAlgorithm,ProbCostData>;
class CacheCostModelBuilder;
class CacheProbabilisticAlgorithm;
class SpinlockHolder<174,3,1>;
class SpinlockHolder<66,16,1>;
class AutoSpinlockHolder<105,9,1>;
class SpinlockHolder<107,9,1>;
class CAutoP<XE_FileReaderDefaultPolicy>;
class ReduceTypeListNode<NullType,NullType>;
struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION;
class AutoSpinlockHolder<198,3,1>;
class CAutoRg<EventTypeEntry>;
struct XPRESS9_ENCODER_PARAMS_T;
struct IDmpDump;
struct FgcbPrpFillSLock;
class AutoSpinlockHolder<225,2,1>;
class AutoSpinlockHolder<46,18,1>;
struct _exception;
class CAutoRefc<IXMLDOMDocument2>;
class SpinlockHolder<168,3,1>;
struct _FSCTL_QUERY_FAT_BPB_BUFFER;
class Spinlock<149,4,1>;
class WCharKey;
class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct XE_TObjects<XEPackage,2>;
class Spinlock<230,1,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<0>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
struct XE_TArray<XEDataAttribute,25>;
class SpinlockHolder<105,9,1>;
struct ColumnStoreBuildStateListSLock;
class SpinlockHolder<291,1,1>;
class SEListSized<SOS_Scheduler,3224>;
class SEList<XE_XMLObjectString,0>;
class PageHeapMemObj;
class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,1>,0>;
class CRTSEHTranslatorSetter<CRTSEHSOSTranslatorSetter>;
class XeSqlPkg::all_database_segment_files_attach;
struct XE_TEvent<4,1,25>;
class SESListEnum<XESessionContext,56>;
class PerCPUDataBase<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition>;
struct XBitmap<StaticStorage<1024> >;
class PerCPUDataBase<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition>::Enum;
class Spinlock<18,19,1>;
class Spinlock<248,1,1>;
class TAutoMutex<SOS_RecursiveMutex,4294967295>;
class SEList<SOS_Scheduler,3224>;
class IMemObj;
class XeSqlPkg::xtp_create_table;
class MemObjProxy;
class QuotaController;
class PageAllocator;
class XEPackage0::XE_ETWEventStream;
class Spinlock<146,4,1>;
class AutoSpinlockHolder<45,18,1>;
struct XEPackage0::EventTraceQueryProperties;
class XEPackage0::XE_ETWMofBlock;
class XeSqlPkg::hadr_thread_pool_worker_start;
class TEnumerator<TList<ExternalCacheList,ExternalCache,8,TListSLock> >;
class TAutoMutex<UnfairRecursiveMutexInternal<SuspendQueueSLock,0>,4294967295>;
class Spinlock<235,1,1>;
struct _SHARE_INFO_1005;
class CAutoBase<CAutoRefc<XList<XE_TargetEntry> > >;
class PeriodicTimer<100>::AutoCheck;
class XeSqlPkg::broker_queue_activation_alert;
class SOS_ResourceGroup;
class CAutoRefc<XE_PredicateExpr>;
class SEListEnum<XE_XMLObjectString,0>;
class XeSosPkg::large_cache_caching_decision;
struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionBase;
class AggregatedStats;
class SOS_Task;
class XeSqlPkg::promote_tran_starting;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,16777216,0,2,0> >;
class AutoSpinlockHolder<135,4,1>;
struct RangeGenerationSLock;
class SOS_NodeInfo;
struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionWithActive;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,524288,4194304,4,0> >;
class TMemoryBlockAllocator<0,524288,4194304,4,0>;
class UnfairRecursiveMutexInternal<SuspendQueueSLock,0>;
class PhysicalPageCache;
class PeriodicTimer<100>;
class PeriodicTimer<120000>;
struct VmLowSLock;
struct VMResourceControl;
class SOS_Atomic<_MEMORYSTATUSEX>;
class MemoryNode;
class SpinlockHolder<243,1,1>;
class XeSqlPkg::query_rpc_server_collection_cache_hit;
class CAutoP<XEPackage0::PairingTarget>;
class SpinlockHolder<110,9,1>;
class Spinlock<12,19,1>;
struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionWithActive;
struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionWithoutActive;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,32768,524288,8,1> >;
class TMemoryBlockAllocator<0,32768,524288,8,1>;
class AutoSpinlockHolder<1,19,1>;
class Spinlock<281,1,1>;
struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionWithActive;
class XeSqlPkg::query_driver_sent_rows_affected;
class SOS_RingBufferRecord;
class SpinlockHolder<236,1,1>;
class XE_FileTargetParams;
class XeSosPkg::node_created;
class XeSosPkg::dump_exception_routine_executed;
class TSimpleHashTable_EntryAccessor<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>;
class AutoSpinlockHolder<20,19,1>;
class AutoSpinlockHolder<221,2,1>;
class SpinlockHolder<191,3,1>;
struct AsyncStatsListSLock;
class SpinlockHolder<6,19,1>;
struct TlsSlotInfo;
class SystemThreadPool;
struct SysThreadSLock;
class SystemThread;
class Spinlock<94,11,1>;
class XeSqlPkg::hadr_db_manager_scan_control;
class XE_StreamCompare<char,XEPackage0::StringCompare<char,2>,2>;
class XeSqlPkg::query_execution_batch_processing_bitmap_build;
class SEListEnum<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>,0>;
class SpinlockHolder<212,2,1>;
class SpinlockHolder<74,16,1>;
class Spinlock<54,16,1>;
struct LockHashSLock;
class StackFrames<40>;
class SpinlockHolder<96,11,1>;
struct ChannelForceCloseManagerSLock;
class SpinlockHolder<7,19,1>;
class Spinlock<41,1,1>;
class XeSqlPkg::qn_dynamics;
class Spinlock<165,3,1>;
class TMemoryBlockAllocator<0,16777216,0,2,0>;
class XeSqlPkg::query_rx_allocate_buffers;
class Spinlock<98,11,1>;
struct RpcPackageSLock;
class SpinlockHolder<222,2,1>;
class SOSHost;
class SpinlockHolder<113,9,1>;
class CAutoP<IAutoSimpleXact>;
class AutoSimpleXact;
class AutoSpinlockHolder<286,1,1>;
struct XE_TypeTraits<XEType>;
class XeSosPkg::multiple_tasks_enqueued;
class XeSqlPkg::hadr_dump_primary_progress;
class AutoSpinlockHolder<27,19,1>;
class XEPackage0::HistoryTargetFailureInterface;
class XeSqlPkg::dbtable_options_refresh;
struct XE_TEvent<3,0,11>;
class XeSosPkg::large_cache_state_change;
class SpinlockHolder<224,2,1>;
class SESListSized<XEPackage0::RingTarget::EventEntry,0>;
class SortedList<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>;
class XEPackage0::RingTarget;
class SpinlockHolder<232,2,1>;
class XEPackage0::RingTarget::EventTypeEntry;
class SpinlockHolder<194,3,1>;
struct DeferredWFExtDropSLock;
class Spinlock<160,3,1>;
class SOS_StateProtectors<ExtIntCodeProtector<0>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost;
class AutoSpinlockHolder<320,1,1>;
class SOS_ExternalAutoWait;
class XeSqlPkg::hadr_db_manager_redo;
class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>;
class PerCPUData<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition>;
class XeSqlPkg::xfcb_failed_request;
struct XE_TEvent<4,1,5>;
class XeSosPkg::wait_completed;
class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition>;
class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition>::Enum;
class SpinlockHolder<299,1,1>;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem;
class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
class XeSqlPkg::broker_transmission_acksm_event_begin;
class SEListSized<DynInterval,0>;
class SEListEnum<SOS_Scheduler,3224>;
class Spinlock<278,1,1>;
class Spinlock<292,1,1>;
class SpinlockHolder<21,19,1>;
class SEList<SOS_WaitableAddress,48>;
class TSyncHashTableBase<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>::Bucket;
class PeriodicTimer<5000>::AutoCheck;
class XeSqlPkg::xtp_offline_checkpoint_scan_start;
class TypeListNode<void *,TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > > >;
class TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
struct _HEAP_REGION_INFORMATION;
struct _HEAP_RANGE_INFORMATION;
struct _HEAP_PERFORMANCE_COUNTERS_INFORMATION;
struct _HEAP_INFORMATION_ITEM;
class CRTSEHTranslatorSetter<CRTSEHNoTranslatorSetter>;
struct _PROCESS_FOREGROUND_BACKGROUND;
class SEList<TCallback<void,NullType,NullType,NullType,NullType>,0>;
class TCallback<void,NullType,NullType,NullType,NullType>;
struct SesSecContextSLock;
struct _BOOT_ENTRY;
struct _BOOT_ENTRY_LIST;
class XeSqlPkg::query_driver_sent_activation;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<4>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<4>::FuncPtr<void,void *,SOS_Node *,unsigned __int64,unsigned __int64>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<2>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<1>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<0>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>;
class SEList<XListElem<ProbCostData>,0>;
class XeSqlPkg::hadr_partner_updated_lsns;
class FunctionCallBinder_1<void,void (__cdecl*)(ISOSHost_IOCompRequest *),ISOSHost_IOCompRequestImpl *>;
struct CacheStoreClockSLock;
class XList<ProbCostData>;
class CAutoP<SOSHost_OSThreadCreateDestroyCallback>;
class FunctionCallBinder_4<void,void (__cdecl*)(void *,ISOSHost_Node *,unsigned __int64,unsigned __int64),void *,ISOSHost_NodeImpl *,unsigned __int64,unsigned __int64>;
class SEListEnum<XListElem<ProbCostData>,0>;
class XeSqlPkg::hadr_db_manager_page_request;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >;
struct _GROUP_USERS_INFO_0;
class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem> >;
struct tagDBPARAMS;
class TypeListNode<MemoryUtilizationInfo const * const,TypeListNode<enum MemoryUtilizationEffects::Effects,TypeListNode<MemoryUtilizationEffects::EffectInfo const * const,TypeListNode<NullType,NullType> > > >;
class StackHashControl;
class XeSqlPkg::logconsolidation_defunct_cleanup_complete;
class SOS_TopLevelBlockDescriptor;
struct TraceFlagMapping;
class TEnumerator<TList<PoolList,SOS_ResourcePool,0,TListSLock> >;
struct _PERF_COUNTER_DEFINITION;
class AutoSpinlockHolder<25,19,1>;
class TEnumerator<TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock> >;
class XeSqlPkg::query_memory_grant_requested;
struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc;
struct CLUSPROP_PARTITION_INFO_EX;
struct _SYSTEM_VERIFIER_ISSUE;
class Spinlock<290,1,1>;
class SpinlockHolder<29,19,1>;
class TCallbackListBase<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >;
struct SEReplSecondaryWorkerListSLock;
struct _CLUSTER_VALIDATE_DIRECTORY;
struct _SESSION_INFO_10;
class TSimpleHashTable_EntryAccessor<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>;
struct XE_TEvent<4,2,8>;
class TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>;
class TMRUContainer<MiniSOSThreadResources,0>;
class TObjectPool<TMRUContainer<MiniSOSThreadResources,0>,ObjectPoolSLock>;
struct MiniThreadSLock;
class SEList<MiniSOSThreadResources,0>;
class MiniSOSThreadResourcesMgr;
class CAutoBase<SOS_ResourcePool>;
class TypeListSize<TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > >;
class TSinglyLinkedList<void>;
class Spinlock<89,12,1>;
class SEList<ResQueueWaiter,0>;
class SOS_DispatcherPoolBase;
class AutoSpinlockHolder<301,1,1>;
class TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock>;
class SEList<ContextUMSProxy,16>;
class SOS_InterlockedList<ContextUMSProxy,0>;
class UMSControl;
class XeSqlPkg::hadr_db_manager_status_change;
struct _UMS_SCHEDULER_STARTUP_INFO;
class MemObjCache<CMemThread<CMemObj> >;
struct _ACTRL_ACCESS_ENTRYA;
struct XE_TArray<XEEvent *,83>;
class AutoSpinlockHolder<324,1,1>;
class SpinlockHolder<28,19,1>;
class CMemPartitioned<CMemThread<CMemLargePageObj> >;
class CAutoBase<XEPackage0::RingTarget>;
class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,8192,524288,16,1> >;
class Spinlock<142,4,1>;
struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition;
struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::AutoReset;
struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition;
class AutoSpinlockHolder<223,2,1>;
struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::AutoReset;
class CXFrontendLookupTable<2,unsigned __int64,1024>;
class SpinlockHolder<211,2,1>;
class XeSqlPkg::broker_transmission_acksm_action_fire;
class Spinlock<211,2,1>;
struct SEReplSubtypeVersionSLock;
class TEnumerator<TList<HostManager,SOSHost,0,TListSLock> >;
class XE_CXRollingDictionary<2,unsigned __int64,1024,65536,1,0>;
class TList<HostManager,SOSHost,0,TListSLock>;
class CAutoBase<XEPackage0::HistoryTarget>;
struct _PDH_RAW_COUNTER_ITEM_A;
class SEListEnum<ErrMsg,24>;
class CSlotPageMgr;
class CMemObj;
class StackFrames<20>;
class CVariableInfo;
struct HttpEndpointSLock;
class CSlotInfo;
class CFreeSlot;
class Spinlock<273,3,1>;
class XeSqlPkg::logreader_add_compensation_range;
struct MemoryObjectFactory::MemObjUsesFree<CMemFixed>;
class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>;
class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem;
class XeSqlPkg::logreader_add_tran_info;
struct SqlTraceFileBufferSLock;
struct MemoryObjectFactory::MemObjUsesFree<CMemLargePageObj>;
class MiniSOSThreadResources;
class XeSqlPkg::metadata_manager_lock_object;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<2>;
struct _ACTIVATION_CONTEXT_STACK;
struct _GDI_TEB_BATCH;
struct _Wx86ThreadState;
struct _TEB;
class XE_EngineObjectFactory;
struct _PLUGPLAY_CONTROL_CONFLICT_DATA;
struct _PEB;
struct _PEB_LDR_DATA;
struct XE_BufferAlloc;
class MemObjCache<PageHeapMemObj>;
class CMemPartitioned<CMemThread<PageHeapMemObj> >;
class MemObjCache<CMemDbg<PageHeapMemObj> >;
struct _PEB_FREE_BLOCK;
class Spinlock<275,1,1>;
class XeSqlPkg::availability_group_lease_expired;
class XeSqlPkg::hadr_ag_database_api_call;
class AutoSpinlockHolder<282,1,1>;
class MemObjCache<CMemThread<PageHeapMemObj> >;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
class SpinlockHolder<280,1,1>;
struct _TEB_ACTIVE_FRAME;
class CMemThread<CMemLargePageObj>;
class CMemPartitioned<CMemThread<CMemFixed> >;
class SOSHost_CacheStore;
struct CMRosterSLock;
class MemObjCache<CMemLargePageObj>;
class DescriptorAllocator<SOS_MemoryFreeBlock,0>::Iterator;
class Spinlock<310,1,1>;
struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::FragmentDesc;
class DescriptorAllocator<SOS_MemoryFreeBlock,0>;
class XeSqlPkg::database_bootpage_sync;
class MemObjCache<CMemDbg<CMemLargePageObj> >;
struct _finddata64i32_t;
class XeSqlPkg::hobt_schema_mgr_hobt_page;
class SOS_MemoryFreeBlock;
class Spinlock<150,4,1>;
struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc;
class CMemThread<CMemDbg<CMemLargePageObj> >;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
class MemoryClerkInternal;
class MemoryClerkInternal::NotificationInterface;
class DmpPointer<SEList<MemObjProxy,0> >;
class SOS_GlobalMemoryRecord;
struct _WKSTA_INFO_1043;
struct SOS_MemoryConfig;
class AutoSpinlockHolder<26,19,1>;
class MemoryBrokerClerk;
class Spinlock<156,3,1>;
class SOSHost_SharedMemory;
class XE_PackageManagerUtilities;
class CDumpStream;
struct RemoteDiagListSLock;
class IfNullTypeZeroElseOne<SystemAffinity const &>;
class XTListElem<ProbCostData>;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
struct _FILE_INTERNAL_INFORMATION;
struct SequencedObjectSLock;
class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class DmpPointer<SOS_Task>;
class TlsDumpHelper;
class DmpPointer<PageHeapPageInfo>;
class CacheClockHand<CacheClockAlgorithm,ClockInfo>;
class TClockAlgorithm<CacheClockHand<CacheClockAlgorithm,ClockInfo> >;
class Spinlock<8,19,1>;
struct _wfinddata64_t;
class SpinlockHolder<176,3,1>;
class TCacheStore<CacheClockAlgorithm>;
class SpinlockHolder<52,16,1>;
class Spinlock<132,5,1>;
class Spinlock<182,3,1>;
class XeSqlPkg::database_segment_state_change;
struct SyncPointSLock;
class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>;
class DmpPointer<XE_SingletonTargetManager *>;
struct _DETOUR_SECTION_HEADER;
class SOS_StoreAndClockAlgorithmControlInterface;
class Spinlock<64,16,1>;
class SEListEnum<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0>;
class SEListEnum<TCallback<void,SOS_Task *,NullType,NullType,NullType>,0>;
class Spinlock<161,3,1>;
struct _CLUS_MAINTENANCE_MODE_INFOEX;
class Spinlock<272,3,1>;
class EventInternal<SuspendQueueSLock>;
class Spinlock<174,3,1>;
class SEList<SOS_IOCompRequest,40>;
class SpinlockHolder<309,1,1>;
class AutoSpinlockHolder<97,11,1>;
class SEListEnum<SOS_IOCompRequest,40>;
class AutoSpinlockHolder<197,3,1>;
class SpinlockHolder<250,1,1>;
class SOS_CacheEntryToken;
class SpinlockHolder<104,10,1>;
struct std::bidirectional_iterator_tag;
struct std::random_access_iterator_tag;
struct CursorSLock;
class std::length_error;
class std::basic_string<char,std::char_traits<char>,std::allocator<char> >;
class std::runtime_error;
class std::ctype<char>;
class SpinlockHolder<297,1,1>;
class AutoSpinlockHolder<122,7,1>;
class DumpSEListIterator<SEList<Worker,16>,2048>;
class std::_Lockit;
class std::_Locinfo;
struct FTInitSLock;
class std::locale::facet;
class std::locale;
class std::locale::_Locimp;
struct _stat32;
class AutoSpinlockHolder<262,1,1>;
struct FsDeletedFolderCleanupSLock;
class std::ctype_byname<char>;
class SpinlockHolder<238,1,1>;
class SpinlockHolder<197,3,1>;
class std::basic_istream<unsigned short,std::char_traits<unsigned short> >;
class AutoSpinlockHolder<318,1,1>;
class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry;
class AutoSpinlockHolder<210,2,1>;
class Spinlock<148,4,1>;
class DumpSEListIterator<SEList<MemObjProxy,0>,4194304>;
class DmpPointer<SOSHost>;
struct XE_TEvent<4,1,15>;
class std::error_category;
struct XE_TArray<XEMessage *,0>;
struct XE_TObjects<XEMessage,0>;
struct std::allocator<char>::rebind<char>;
class std::basic_ios<char,std::char_traits<char> >;
class AutoSpinlockHolder<273,3,1>;
struct ResQueueSLock;
class ResQueueBase;
struct DiagManagerSLock;
struct std::iterator<std::input_iterator_tag,char,__int64,char *,char &>;
class AutoSpinlockHolder<99,11,1>;
class std::basic_ostream<char,std::char_traits<char> >::sentry;
class std::basic_ostream<char,std::char_traits<char> >::_Sentry_base;
class Spinlock<240,1,1>;
class Spinlock<124,7,1>;
struct std::_Iterator012<std::random_access_iterator_tag,char,__int64,char const *,char const &,std::_Iterator_base0>;
class TypeListSize<TypeListNode<NullType,NullType> >;
class std::bad_cast;
struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA;
union _LDR_DLL_NOTIFICATION_DATA;
class std::system_error;
struct XE_TArray<XEMap *,21>;
struct _XSAVE_FEATURE;
struct _XSAVE_POLICY;
struct _SYSTEM_PROCESSOR_POLICY_INFORMATION;
class std::invalid_argument;
class Spinlock<53,16,1>;
class AutoSpinlockHolder<87,12,1>;
struct XE_TObjects<XEMap,21>;
class Spinlock<325,1,1>;
class UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >::Elem;
struct std::_Outit;
struct XE_TMap<7>;
class std::basic_iostream<char,std::char_traits<char> >;
struct RpcResponderContextSLock;
class std::istrstream;
class AutoSpinlockHolder<333,0,1>;
class AutoSpinlockHolder<35,19,1>;
struct XVBcsnSLock;
struct SubpDescSLock;
struct std::iterator<std::output_iterator_tag,void,void,void,void>;
struct XE_TypeTraits<XEEvent>;
class std::logic_error;
struct _TIME_FIELDS;
class std::basic_istream<char,std::char_traits<char> >;
struct OptInfoMgrSLock;
class AutoSpinlockHolder<214,2,1>;
struct ITransactionDispenser;
struct XTSMgrSLock;
class SpinlockHolder<273,3,1>;
class std::error_condition;
class XeSqlPkg::validate_file;
class SpinlockHolder<302,1,1>;
class AutoSpinlockHolder<217,2,1>;
class SEListEnum<XE_SessionSrv,1400>;
class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >;
class WaitForGraphEdge;
class std::_String_const_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
class CAutoRefc<XE_DAttrExpr>;
struct std::_Allocator_base<unsigned short>;
class AutoSpinlockHolder<280,1,1>;
struct std::_Allocator_base<char>;
class std::overflow_error;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
class std::hash<std::error_condition>;
class AutoSpinlockHolder<38,18,1>;
struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
struct std::iterator<std::input_iterator_tag,unsigned short,__int64,unsigned short *,unsigned short &>;
class std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> >;
struct CSIBuildMemSLock;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
class std::numpunct<unsigned short>;
class DmpPointer<IMemObj>;
class SEListEnum<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>,0>;
struct std::nothrow_t;
class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType> >;
struct std::allocator<unsigned short>::rebind<unsigned short>;
class Spinlock<167,3,1>;
struct std::unary_function<std::error_code,unsigned __int64>;
class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >;
struct IODispenserPauseSLock;
struct LCSLock;
class SpinlockHolder<118,8,1>;
class std::fpos<int>;
class Spinlock<100,10,1>;
struct StaticStorage<206>;
struct XBitmap<StaticStorage<206> >;
class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >;
class Spinlock<7,19,1>;
class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >;
class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >;
struct _SERVER_INFO_1017;
class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >;
class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >;
class Spinlock<313,1,1>;
class AutoSpinlockHolder<127,7,1>;
class std::strstream;
class std::_Timevec;
class TypeListNode<ExtIntCodeProtector<1>,NullType>;
class std::_String_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
class XeSqlPkg::query_rx_sending_activation;
class std::reverse_iterator<std::_String_const_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >;
struct DataPortSourceInfoCreditSLock;
struct PageCopierSLock;
class std::ios_base;
class Spinlock<36,19,1>;
class AutoSpinlockHolder<125,7,1>;
struct std::ios_base::_Iosarray;
class Spinlock<322,1,1>;
class Spinlock<260,1,1>;
struct std::ios_base::_Fnarray;
class AutoSpinlockHolder<201,3,1>;
class XeSqlPkg::hadr_undo_manager_test_point;
class std::ios_base::Init;
class std::ios_base::failure;
class std::_Locbase<int>;
class Spinlock<1,19,1>;
class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry;
class AutoSpinlockHolder<312,1,1>;
struct SEReplPartitionByKeySLock;
class XeSqlPkg::query_rpc_server_runtime_create;
class UsageInfo;
class TSList<SystemThreadPool::SystemThreadBlock>;
struct XE_TypeTraits<XEObject>;
class SpinlockHolder<166,3,1>;
struct XE_TArray<XEDataAttribute,24>;
class SpinlockHolder<314,1,1>;
class DDRecursiveMutexBlockerEnumerator;
class XeSqlPkg::redo_worker_entry;
class SEList<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>,0>;
struct SOS_DispatcherSchedmonInfo;
class XE_TCollection<1,1>;
class XeSqlPkg::hadr_db_manager_db_queue_restart;
class SOS_HiddenWorkerEnum;
struct XE_TTarget<3>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>;
struct TransmitterMessageQueuesSLock;
struct TFormatterTypesPolicy<RPCStream>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<4>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,void *,SystemAffinity,SystemAffinity,NullType>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<1>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<0>;
class XeSqlPkg::page_compression_attempt_failed;
class SpinlockHolder<91,11,1>;
class SEList<MemoryBrokerClerk,8>;
class SpinlockHolder<279,1,1>;
class SEListEnum<MemoryBrokerClerk,8>;
class SpinlockHolder<131,6,1>;
class Spinlock<256,1,1>;
class Spinlock<186,3,1>;
class TCacheSimulation<CacheProbabilisticAlgorithm>;
class TCacheStore<CacheProbabilisticAlgorithm>;
class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>;
struct IoreqSLock;
struct XE_TEvent<4,0,18>;
class XeSqlPkg::deadlock_monitor_mem_stats;
class AutoSpinlockHolder<271,1,1>;
class ProbCostData;
class TypeListSize<TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class XE_StreamCompare<unsigned char,XEPackage0::BinaryCompare<unsigned char,0>,0>;
class CAutoRg<XEPackage0::OrphanEntry>;
struct SOSHost_CacheStoreHashTableDescriptor;
class SpinlockHolder<145,4,1>;
class XeSqlPkg::hadr_db_manager_redo_control;
class TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy;
struct ClrHostTaskSLock;
class SEList<SOS_TraceStream,8>;
class Spinlock<171,3,1>;
class SpinlockHolder<47,18,1>;
class Spinlock<303,1,1>;
class PoolList;
class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>;
class SOS_ResourceManager;
class SpinlockHolder<89,12,1>;
class Spinlock<296,1,1>;
class XeSqlPkg::hadr_db_manager_lsn_sync_msg;
class Spinlock<74,16,1>;
class XE_AutoRg<XEPackage0::RingTarget::EventTypeEntry>;
class XEPackage0::RingTarget::PackageEntry;
class SOS_ResourceManager::AutoSwitchSystemGroup;
struct BufWriteLogSLock;
class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
class ExcHandlerIterator;
class SOSResourceGroupStats;
class TChildEnumerator<GlobalSchedulerEnum,SOS_Scheduler,TEnumerator<TList<SOS_Scheduler,SOS_Task,16,TListSLock> >,SOS_Task>;
class TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > >;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>;
class AutoSpinlockHolder<211,2,1>;
class XeSqlPkg::glm_local_brick_release_request;
class UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >;
struct TClassName<unsigned int,1,0>;
class XeSqlPkg::buffer_pool_page_freed;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::List;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem;
struct BitOrdinal<524288>;
struct TClassName<unsigned long,1,0>;
class PageMap;
class PageAllocatorForSinglePartition;
struct RemoteSessionListSLock;
struct PartitionedHeapFreeListSLock;
class SOS_PartitionedHeap;
struct BitOrdinal<32768>;
struct SOS_PartitionedHeap::Partition;
class SOS_MemoryNodeEnum;
class TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock>;
class AutoSpinlockHolder<295,1,1>;
class XeSqlPkg::column_store_rowgroup_read_issued;
class SOSHost_AutoRecursiveMutex;
class SOSHost_RecursiveMutex;
struct SOS_DispatcherPoolStats;
class XeSqlPkg::query_rpc_close;
struct _PSAPI_WS_WATCH_INFORMATION;
struct _PSAPI_WS_WATCH_INFORMATION_EX;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,void *,SystemAffinity const &,SystemAffinity const &,NullType>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<1>;
class XeSqlPkg::column_store_object_pool_miss;
class TypeListNode<int *,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<0>;
class TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>;
class TCallbackList<TCallback<void,NullType,NullType,NullType,NullType> >;
class SOS_SchedulerEnum;
struct XdesMgrSLock;
class PerCPUData<SOS_MemoryWorkSpace::WSCpuPart>;
struct LZ77_MTF_STATE_T;
struct LZ77_IR_STATE_T;
class Spinlock<116,8,1>;
class TCallbackListBase<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64> >;
class AlignedSmallPageAllocator;
class AutoSpinlockHolder<114,9,1>;
class XeSqlPkg::selective_xml_index_path_not_supported;
class XeSqlPkg::sort_warning;
class CAutoRefc<SOS_Task>;
class SOS_DispatcherBase;
class Spinlock<103,10,1>;
struct XE_TArray<XEAction *,10>;
struct XE_TArray<XEPredicateCompare *,63>;
class Spinlock<247,1,1>;
class ExternalCache;
class SpinlockHolder<210,2,1>;
class TList<ExternalCacheList,ExternalCache,8,TListSLock>;
class AutoSpinlockHolder<84,13,1>;
struct XE_TObjects<XEPredicateCompare,63>;
class TAutoMutex<UnfairRecursiveMutexInternal<PaddedSpinlock<SuspendQueueSLock>,0>,4294967295>;
class SEListEnum<FreePageElem,0>;
class TListElem<TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock> >;
class TAutoMutex<UnfairRecursiveMutexInternal<SuspendQueueSLock,1>,4294967295>;
class SEListEnum<MemoryNode,0>;
class AutoSpinlockHolder<277,1,1>;
class SOS_CacheStoreEntriesEnum;
class Spinlock<3,19,1>;
class TCallbackListBase<TCallback<void,NullType,NullType,NullType,NullType> >;
class AutoSpinlockHolder<315,1,1>;
class TraceLine;
class SOS_CallResult<unsigned long>;
class IfNullTypeZeroElseOne<SOS_Node *>;
class AutoCallPrePostNode<TypeListNode<ExtIntCodeProtector<1>,NullType> >;
class SOSClient_MemoryNotificationCallback;
class CAutoBase<XEPackage0::RingTarget::PackageEntry>;
class XeSqlPkg::hadr_filestream_message_file_request;
class TEnumerator<TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock> >;
struct LastSLock;
class AutoSpinlockHolder<24,19,1>;
class TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock>;
struct std::_Arithmetic_traits<unsigned short>;
class CAutoBase<double>;
class Spinlock<265,1,1>;
struct BitManipTraits<unsigned __int64,0>;
class SOS_UnfairRecursiveMutexExtendedGuarantee;
class XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>;
class XE_AutoRg<XE_AutoP<XE_Log> >;
class XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker>;
class XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> >;
class AssertSingleTaskAccess;
struct _ALPC_PORT_ATTRIBUTES;
class CAutoP<XEPackage0::XE_FileTarget>;
struct XEPackage0::ActivityIdXferAction;
class SOSListElem;
struct std::is_error_code_enum<unsigned char const *>;
struct XE_TEvent<4,1,24>;
class SpinlockHolder<265,1,1>;
class RefCountImpl<ISOSHost_MemObjImpl>;
class CAutoBase<XEPackage0::XE_FileTarget>;
struct _TRUSTEE_ACCESSW;
class ETWSessionController;
class AutoSpinlockHolder<252,1,1>;
class Spinlock<158,3,1>;
struct TestTeamTastasSLock;
class TAutoMutex<SOS_Mutex,1>;
struct ISOSHost_Mutex_Prev0;
class SpinlockHolder<252,1,1>;
class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >;
class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >::Elem;
struct _INVERTED_FUNCTION_TABLE_ENTRY;
class XE_Aggregator<1>;
class SOS_DDRecursiveMutex;
class CAutoBase<XEPackage0::EventTraceQueryProperties>;
class SOS_MemoryNodeOOMRingRecord;
class CAutoBase<XEPackage0::BucketizingTarget>;
struct WPRSLock;
class CAutoBase<XEPackage0::BucketizingTarget::Entry *>;
class XE_Xml<XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >;
struct $_TypeDescriptor$_extraBytes_27;
struct _FILE_IS_REMOTE_DEVICE_INFORMATION;
struct $_s__CatchableTypeArray$_extraBytes_16;
class Spinlock<238,1,1>;
class AutoSpinlockHolder<91,11,1>;
struct _RTL_UNLOAD_EVENT_TRACE32;
struct std::tr1::_Cat_base<0>;
struct ArmedWaypoint;
struct std::tr1::_Remove_reference<void * (__cdecl*&)(unsigned __int64)>;
struct eXcursionEntry;
class XeDvmPkg::dvm_agent_work_item_enqueued;
class MemObjProxyLinkList;
class XE_IStream;
class StreamCDATAReader<char,XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >;
class Spinlock<170,3,1>;
class SpinlockHolder<109,9,1>;
class Spinlock<305,1,1>;
class XE_AutoP<XEPackage0::PairingTarget>;
class SEListEnum<XEPackage0::SourceAction,0>;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
struct SOS_RWLock::RWLockWaiter;
class SEListEnum<SOS_RWLock::RWLockWaiter,0>;
struct GlobalSchedulerListSLock;
class RefCountImpl<PageAllocatorForSinglePartition>;
class SpinlockHolder<257,1,1>;
class TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>;
class SOS_SharedMemory;
class XE_AutoP<XE_XMLObjectString>;
class AutoRaiseDeadlockPriority;
struct _SERVER_INFO_1547;
class SOS_Task::AutoSwitchPreemptive;
class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem> >;
class CAutoP<XEPackage0::OrphanEntry>;
struct ActiveDescriptorSLock;
class Spinlock<137,4,1>;
class Spinlock<237,1,1>;
class UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >::Elem;
class XE_AutoP<XEPackage0::RingTarget>;
class CAutoP<XEPackage0::CounterTarget>;
class CMemProc;
class Spinlock<86,13,1>;
struct _SYSTEM_VERIFIER_INFORMATION;
struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION;
class AutoSpinlockHolder<251,1,1>;
class PageAllocator::PageIdStruct;
class SpinlockHolder<249,1,1>;
struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionWithActive;
class std::basic_filebuf<unsigned short,std::char_traits<unsigned short> >;
class TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>;
class SEList<IORGHashTableEntry,248>;
class Spinlock<154,3,1>;
class ISOSHost_CacheStoreImpl;
class SEListEnum<ContextUMSProxy,16>;
struct DatasetFreeListSLock;
struct $_TypeDescriptor$_extraBytes_24;
struct XE_LogBufferHeader_v0;
class CPageInfo;
class PerCPUDataBase<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition>;
class PerCPUDataBase<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition>::Enum;
class SEListEnum<XListEnumerator<ProbCostData>,0>;
class CAutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> >;
struct std::_Arithmetic_traits<unsigned __int64>;
struct _CLUS_STORAGE_SET_DRIVELETTER;
class XListEnumerator<ProbCostData>;
class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,1>,2>;
class TCallbackListBase<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType> >;
class XTListEnumerator<ProbCostData>;
struct std::_Facetptr<std::numpunct<unsigned short> >;
class ISOSHost_RWLockImpl;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>;
class SpinlockHolder<88,12,1>;
class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>;
struct std::is_error_code_enum<unsigned char>;
class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,2>,0>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>;
class SEHashTable<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>;
class XEPackage0::OrphanTempManager;
class CAutoRg<XE_AutoP<XE_Log> >;
class std::basic_filebuf<char,std::char_traits<char> >;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<4>;
class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,2>,2>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<2>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<0>;
class TEnumerator<TList<SOS_Node,SystemThread,160,TListSLock> >;
struct std::is_error_code_enum<char>;
struct _IO_RESOURCE_DESCRIPTOR;
class TList<SOS_Node,SystemThread,160,TListSLock>;
class TCallbackBaseWithParam<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>;
struct XEPackage0::StreamPartition;
class SOS_MemoryBrokerRingRecord;
class XE_ISerializedEvent<XE_LiveSessionMetadata>;
struct SQLMRRow;
class AutoSpinlockHolder<64,16,1>;
class TEnumerator<TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock> >;
union _MCI_ADDR;
struct _MCA_EXCEPTION;
struct FsAgentSLock;
class XeSqlPkg::hadr_wsfc_rollback_ag_listener_change;
class SpinlockHolder<36,19,1>;
struct XEPackage0::GetLastErrorPredicateSource;
class SEListEnum<ExternalCache,8>;
class XEPackage0::StringCompare<unsigned short,2>;
class XeSqlPkg::hadr_undo_of_redo_log_scan;
class SEListSizedSLock<SOS_Scheduler,3224,GlobalSchedulerListSLock>;
struct XEPackage0::CallStackAction;
struct XEPackage0::CollectFileTimeAction;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem;
struct std::tr1::_Is_integral<unsigned short>;
struct SOSHost_VersionInfo;
struct _NET_VALIDATE_PERSISTED_FIELDS;
struct _NET_VALIDATE_AUTHENTICATION_INPUT_ARG;
struct CVarPageMgr;
struct OneProcSimServicePartitionSLock;
class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem> >;
struct _ACTRL_ACCESS_INFOW;
struct std::tr1::add_rvalue_reference<void const >;
class XEPackage0::StringCompare<char,2>;
class Spinlock<280,1,1>;
class Spinlock<201,3,1>;
class HostedResourcePoolData;
struct std::tr1::_Get_align<int>;
class DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::Iterator;
class XE_Aggregator<0>;
struct XEPackage0::CountingPredicateSource;
class TimerRequest;
struct std::tr1::_Is_integral<unsigned long>;
class SEListEnum<TimerRequest,8>;
struct XEPackage0::GenerateEventSequenceNumber;
class XEPackage0::BucketizingTarget::Entry;
class std::__non_rtti_object;
struct _HREGBATCHNOTIFICATION;
class CMallocSpy::CGuardBytes;
struct XBitmap<StaticStorage<64> >;
struct XE_TArray<XEEvent *,14>;
struct std::iterator_traits<unsigned int>;
class CExceptSetTrans;
class SpinlockHolder<45,18,1>;
struct ISOSHost_IOCompRequest;
class MemObjCache<CMemThread<CMemDbg<CMemObj> > >;
class CMemThread<CMemDbg<CMemObj> >;
class SOS_HiddenSchedulerEnum;
class SOS_WorkerEnum;
struct _UNWIND_INFO;
struct _Collvec;
class XeCloudMinPkg::start_copy_to_secondary;
class ISOSHost_AutoShrink;
struct ISOSHost_MemObj;
class XE_BufferCollector;
class SpinlockHolder<60,16,1>;
struct XE_TEvent<4,1,12>;
struct ISOSHost_TaskCallback;
struct _SERVER_INFO_1520;
class XeCloudMinPkg::add_secondary;
class ISOSHost_TaskAutoSwitchPreemptiveHelper;
class TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class SOS_StateProtectors<ExtIntCodeProtector<0>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>;
class SOS_LargeCacheStoreEntriesEnum;
class SOS_NodeEnumIncludeUninitializedNodes;
class Spinlock<81,13,1>;
class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XlistEmptyFlightRecorder;
struct tagDBIMPLICITSESSION;
class AutoDisableThreadSwitchOut;
class SEList<Worker,0>;
struct _NET_DISPLAY_USER;
class SEListEnum<Worker,0>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>;
class TBaseSafeCallbackList<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType> >;
struct _RTL_DEBUG_INFORMATION32;
struct _FILE_MAILSLOT_QUERY_INFORMATION;
class XeCMPkg::cma_config_filename;
class TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock>;
class XeCloudMinPkg::persisted_catchup_to_secondary_complete;
class SEListEnum<SystemThread,160>;
class XeCMPkg::cm_release_manager;
class TListElem<TList<SOS_Node,SystemThread,160,TListSLock> >;
class SOSHost_TaskAutoOffFlags;
class CacheClockHand<CacheProbabilisticAlgorithm,ProbCostData>::Fuse;
class SpinlockHolder<217,2,1>;
struct ISOSHost_Task;
struct _SYSTEM_POOLTAG_INFORMATION;
class XeCloudMinPkg::become_primary;
class MemoryNodeList;
struct _SERVER_INFO_1503;
class AutoSwitchPreemptive;
struct _VARIABLE_NAME;
struct _JOURNAL_SET_KEY_SECURITY_INFORMATION;
class SEListEnum<SOSHost,0>;
struct _QUERY_PERFORMANCE_COUNTER_FLAGS;
class SOSResourcePoolStats;
struct IKernelTransaction;
struct RingBufferRecordSLock;
class CAutoSaveWin32Error;
class SOS_LargeCacheEntry;
class SEList<MemObjProxy,0>;
class SEListEnum<MemObjProxy,0>;
class SpinlockHolder<275,1,1>;
class IORGHashTableKey;
class TypeListNode<ResourceClerk const *,TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,NullType> > >;
class SEList<SOS_ResourcePool,0>;
class XListEnumerator<SOS_DispatcherBase>;
class TList<PoolList,SOS_ResourcePool,0,TListSLock>;
struct _FILE_FS_DRIVER_PATH_INFORMATION;
class DescriptorAllocator<SOS_ParentBlockDescriptor,0>::Iterator;
class SOS_InterlockedList<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc,16>;
struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::FragmentDesc;
class PerCPUData<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition>;
struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::NodePartition;
class DescriptorAllocator<SOS_ParentBlockDescriptor,0>;
class XeCloudMinPkg::start_persisted_catchup_to_secondary;
struct _AE_NETLOGOFF;
struct _RTL_HEAP_ENTRY;
class XE_VersionConfig_v0;
class SpinlockHolder<122,7,1>;
class SOS_ParentBlockDescriptor;
struct _FINDFIRSTACTIVATIONCONTEXTSECTION;
class SOS_MemoryBlockAllocator;
struct _PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA;
class SOS_MemoryWorkSpace;
class XeCloudMinPkg::async_transport_connect;
class SEList<SOS_ParentBlockDescriptor,16>;
class SOS_MemoryWorkSpace::BlockDescriptorBucket;
struct _DYNAMIC_FUNCTION_TABLE;
class SEQueue<SOS_Task,0>;
class CFixedInfo;
class DispatcherWorkSample;
struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionWithoutActive;
class DispatcherQueueSample;
class SEList<SOS_DispatcherPoolBase,8>;
class SEListEnum<SOS_DispatcherPoolBase,8>;
struct _SYSTEM_SESSION_BIGPOOL_INFORMATION;
class TMemoryBlockAllocator<0,8192,524288,16,1>;
class SEListEnum<SOS_Node,0>;
class TypeListSize<TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > > >;
class SOSExceptionNoTranslatorSetter;
class SOSHost_OSThreadCreateDestroyCallback;
class TListElem<TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock> >;
class SEQueue<SystemThread,144>;
class AutoSpinlockHolder<69,16,1>;
class HostedResourcePoolStats;
class PmoAllocator;
class CAutoRefc<XE_CompressionBufferRefCount>;
class SEListEnum<ClockInfo,64>;
class SpinlockHolder<245,1,1>;
class SEListEnum<SOS_Node,16>;
class TListElem<TList<MemoryNodeList,MemoryNode,0,TListSLock> >;
struct QryScanSLock;
class SEList<ResourceClerk,8>;
class SEListEnum<ResourceClerk,8>;
class AutoSpinlockHolder<245,1,1>;
union _PSAPI_WORKING_SET_BLOCK;
class GlobalNodeEnum;
struct CXLRUHashTable<2,unsigned __int64,65536>::LookupEntry;
class ISOSHost_MemoryClerkImpl;
class SOS_SpinlockBackoffRecord;
class SpinlockHolder<65,16,1>;
class TypeListNode<void *,TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > > >;
class XEPackage0::BufferedReader;
class XE_CollectedEvent<XE_LiveSessionMetadata>;
struct TableFlushRecord;
class SOSHost_NodeAffinityChangeCallback;
class AutoSpinlockHolder<81,13,1>;
struct _USER_INFO_1025;
struct SerializeControl<CMemBufFormatter,1>;
class SOSHost_RWLock;
class AutoSpinlockHolder<153,3,1>;
class StateProtectorNode<NullType>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<1>;
class TypeListNode<void *,TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class CacheEvictionAlgorithmCommon<CacheClockAlgorithm>;
class CMemPartitioned<CMemThread<CMemProc> >;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >;
struct IRowsetChapterMember;
struct ISOSHost_Semaphore_Prev0;
class TCacheEntry<CacheProbabilisticAlgorithm>;
class XListInvalidLock;
struct XPipeSLock;
struct ISOSHost_MemObjPrev0;
struct _LPC_UNREGISTER_PROCESS_MSG;
class MemObjCache<CMemFixed>;
struct _PROCESS_PRIORITY_CLASS;
class Spinlock<24,19,1>;
struct HashTableStatistic;
class SEList<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>,0>;
class CMemThread<CMemFixed>;
class Spinlock<80,13,1>;
class XeSosPkg::task_completed;
class XeSosPkg::resource_monitor_ring_buffer_recorded;
struct _MEMORY_FRAME_INFORMATION;
struct _FILEOFFSET_INFORMATION;
struct _UNIQUE_PROCESS_INFORMATION;
struct _MMPFN_IDENTITY;
struct _MM_COMBINEDPAGE_IDENTITY;
class XeSosPkg::page_freed;
class AutoSpinlockHolder<290,1,1>;
class XeSosPkg::task_started;
class XeSosPkg::security_handler_routine_executed;
struct _Wx86TIB;
class XeSosPkg::memory_node_oom_ring_buffer_recorded;
class Spinlock<29,19,1>;
class XeSosPkg::memory_broker_clerks_ring_buffer_recorded;
struct StaticStorage<0>;
class XeSosPkg::exception_ring_buffer_recorded;
struct _IO_STATUS_BLOCK;
class XeSosPkg::memory_broker_ring_buffer_recorded;
class XeSosPkg::scheduler_online_state_changed;
struct _PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA;
class TList<GroupList,SOS_ResourceGroup,16,TListSLock>;
class ISOSHost_NodeImpl;
struct _FILE_IO_COMPLETION_INFORMATION;
class MemoryNodeManager;
class CSerializeContext<CMemBufFormatter>::LocalStorage<16>;
class CSerializeContext<CMemBufFormatter>;
class SOS_CacheEntry;
class EventAutoInternal<PaddedSpinlock<SuspendQueueSLock> >;
class AutoSpinlockHolder<313,1,1>;
class TCallbackListBase<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >;
class TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
struct _SYSTEM_ACPI_AUDIT_INFORMATION;
class DmpPointer<CFixedInfo>;
class SOSHost_OSAffinityChangeCallback;
struct CSerializeContext<CMemBufFormatter>::NativeTypeFormatter;
class DumpSEListIterator<SEList<PageHeapPageInfo,40>,512>;
class DmpPointer<PageHeapMemObj>;
struct _CLUSTER_READ_BATCH_COMMAND;
class PerCPUDataBase<SOS_MemoryBlockAllocator::ActivePartition>;
class IfNullTypeZeroElseOne<SOS_DispatcherBase const * const>;
class PerCPUDataBase<SOS_MemoryBlockAllocator::ActivePartition>::Enum;
struct IdentitySLock;
class LocalStorageCache;
class OSF_Tracing;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>;
class DkParametersEnum;
class AutoSpinlockHolder<85,13,1>;
class DmpPointer<Worker>;
struct _FILESHARE_CHANGE;
class SchedulerPoolData;
class SOS_NodeEnum;
class DumpCallbackSOSBase;
class ISOSHost_TaskAutoSwitchLazyPreemptiveHelper;
struct GlobalTraceFlagsSLock;
struct CGlobalTraceFlags::DeclaredFlag;
class CGlobalTraceFlags;
class AutoCallPrePostNode<NullType>;
class DmpPointer<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >;
class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct _FILE_PIPE_INFORMATION;
class DmpPointer<TlsSlotInfo>;
class SEListEnum<eXcursionEntry,16>;
struct _USE_INFO_3;
class SEListEnum<SOS_ParentBlockDescriptor,16>;
class SpinlockHolder<138,4,1>;
struct _EX_ATTRIBUTE_INFORMATION_REGISTRATION;
class DispatcherConfigSample;
class UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >::Elem;
class AutoSpinlockHolder<28,19,1>;
struct SharableSessionObjectsSLock;
struct IoRgVolumeHashTableSLock;
class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>::Bucket;
class DmpPointer<PoolList>;
struct XE_TArray<XEMap *,6>;
class DmpPointer<SOS_ResourcePool>;
struct SOS_MemoryBlockAllocator::ActivePartition;
class IElementVisitor;
class DmpPointer<MemoryNode>;
class DumpSEListIterator<SEList<SOS_ResourceGroup,16>,512>;
class SOSHost_IOCompRequest;
struct _SECTION_IMAGE_INFORMATION;
struct _RTL_USER_PROCESS_INFORMATION;
class SOS_LargeCacheStore;
class Spinlock<92,11,1>;
class SEList<SOS_Task,320>;
class SEQueue<SOS_Task,320>;
class AutoSpinlockHolder<74,16,1>;
class SOS_NodeEnumFromMemNode;
class CallProtectorImpl;
class XeSqlPkg::cursor_manager_cursor_plan_end;
class XeSqlPkg::databases_log_cache_read;
class SOS_ObjectStoreDescriptorList;
struct LogonTriggerCacheSLock;
class SEListEnum<AlignedSmallPageAllocator::PageInfo,16>;
class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>;
class DmpListIterator<Worker,8,16,SEList<Worker,16>,8,2048>;
class TList<MemoryNodeList,MemoryNode,0,TListSLock>;
class ErrMsgsBase;
class DmpPointer<unsigned short>;
class SOS_AutoEnableThreadPriorityBoost;
class XeSqlPkg::user_settable;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>;
class XeSqlPkg::cursor_manager_cursor_worktable_use_begin;
class DmpPointer<SEShortStack<SOS_ExternalAutoWait,6> >;
class DmpPointer<SOS_Task::Param>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<2>;
struct _CM_EISA_SLOT_INFORMATION;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<long,void *,enum Worker::CallbackType,NullType,NullType>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<1>;
class DmpPointer<void>;
class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<0>;
class SpinlockHolder<140,4,1>;
class Spinlock<47,18,1>;
class CAutoBase<DkParameter *>;
class AutoSpinlockHolder<246,1,1>;
class CIncInfo::CIncSizeBlock::Enum;
class AutoSpinlockHolder<80,13,1>;
class CFnCompNames;
class ResourceInventory;
class TListElem<TList<SchedulerManager,Worker,16,TListSLock> >;
class DmpPointer<SEList<SOS_Scheduler,8> >;
class TListElem<TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock> >;
class SpinlockHolder<41,1,1>;
class TListElem<TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock> >;
class SEListEnum<SOS_Scheduler,8>;
class TList<SOS_Node,SOS_RingBuffer,0,TListSLock>;
struct ISOSHost_EventAuto_Prev0;
class SOSExceptionStandardTranslatorSetter;
class SEQueue<Worker,0>;
class TListElem<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >;
class SEListEnum<Worker,16>;
class TCacheStoreEntriesEnum<CacheProbabilisticAlgorithm>;
struct HttpSLock;
class SpinlockBase::SpinInfo;
class XTList<ProbCostData>;
struct SMemObjInfo;
class TListElem<TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock> >;
struct BackupSLock;
class AutoSpinlockHolder<48,18,1>;
struct $_TypeDescriptor$_extraBytes_23;
class AutoCallThis<TypeListNode<ExtIntCodeProtector<1>,NullType> >;
struct TransmitterTransportUsersSLock;
class StateProtectorNode<TypeListNode<ExtIntCodeProtector<1>,NullType> >;
class TCacheStoreEntriesEnum<CacheClockAlgorithm>;
struct XE_TMap<3>;
class TEnumerator<TList<NodeManager,SOS_Node,16,TListSLock> >;
class TList<NodeManager,SOS_Node,16,TListSLock>;
struct WorkerExceptInfo;
class TCallbackBaseWithParam<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>;
class ISOSHost_IOCompRequestImpl;
class CVariableInfo::CVarBlock;
struct XE_TArray<XEEvent *,402>;
class ShortStackException;
class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >;
class DmpPointer<MemoryPoolManager>;
class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >::Elem;
struct XE_TMap<4>;
struct _PROCESSOR_IDLE_STATES;
class DumpTListIterator<TList<SOS_Node,SOS_RingBuffer,0,TListSLock>,512>;
struct ICommand;
struct MatrixDvmPriorityQueueSLock;
class WaitForGraphStronglyConnectedComponent::CostingProperties;
class WaitForGraphStronglyConnectedComponent;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>::FuncPtr<void,NullType,NullType,NullType,NullType>;
class IORGHashTableEntry;
struct ISOSHost_SharedMemory;
class CAutoMalloc<unsigned short>;
class DkParameter;
struct _MUILANGCFGLIST;
class SOSHost_Task;
class IfNullTypeZeroElseOne<unsigned long>;
class Spinlock<255,1,1>;
class SystemThreadPool::SystemThreadBlock;
struct $_TypeDescriptor$_extraBytes_20;
class Spinlock<329,1,1>;
class AutoSpinlockHolder<233,1,1>;
class NoExceptionPmoAllocator;
class TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>;
class AutoSwitchLazyPreemptive;
class SOSHost_TaskAutoSwitchLazyPreemptive;
class DmpListIterator<SOS_Node,8,16,SEList<SOS_Node,16>,8,512>;
class HostManager;
class MemoryObjectFactory;
struct MemoryObjectFactory::MemObjUsesFree<CMemProc>;
class DumpSEListIterator<SEList<SOS_Node,16>,512>;
class DumpSEListIterator<SEList<SOS_Scheduler,8>,512>;
class Spinlock<291,1,1>;
struct ISOSHostPrev4;
struct _RTL_PROCESS_VERIFIER_OPTIONS;
class Spinlock<253,1,1>;
class DmpPointer<SchedulerManagerList>;
class MemObjControlFlags;
struct HoBtDroppedListSLock;
class SOS_ObjectStore;
class Spinlock<43,18,1>;
class DmpPointer<SOS_Node>;
class SpinlockHolder<167,3,1>;
struct SEReplQueueCommitListSLock;
class Spinlock<271,1,1>;
struct tagDBLITERALINFO;
struct SOS_ObjectStore::SubStoreDescriptor;
class TCacheEntry<CacheClockAlgorithm>;
struct XELiveTargetClientAPI;
class TListElem<TList<HostManager,SOSHost,0,TListSLock> >;
class SEList<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>,0>;
class Spinlock<78,14,1>;
class AutoSpinlockHolder<247,1,1>;
class ReturnValueHolder<unsigned long>;
struct _SERVER_INFO_102;
class SpinlockHolder<251,1,1>;
class Spinlock<288,1,1>;
class AutoSpinlockHolder<196,3,1>;
class VolumeIOData;
class TypeListSize<TypeListNode<void *,TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > > > >;
class ISOSHost_TaskAutoOnFlagsHelper;
class SpinlockHolder<185,3,1>;
class AutoSpinlockHolder<145,4,1>;
class NoLock;
class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class SOSHost_TaskCallback;
class AutoSpinlockHolder<238,1,1>;
class TList<SOS_Scheduler,SOS_Task,16,TListSLock>;
class XeCloudMinPkg::set_partition_lock_mode;
struct IRowsetChange;
class SOS_SchedulerMonitorRecord;
struct If<0,CSerializeContext<RPCStream>::ElementalSerializer,CSerializeContext<RPCStream>::ClassSerializer>;
class CCompatLevel;
class SpinlockHolder<126,7,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
struct CRefCount::ClassName;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
struct _MUICCENTRY;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
class XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > >;
class SOSHost_TaskAutoOnFlags;
class SEListEnum<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<4>;
struct ISOSHost_EventAuto;
class Spinlock<52,16,1>;
class RefCountImpl<XList<ProbCostData> >;
class XEPackage0::CounterTarget::PackageEntry;
class AutoChangeDeadlockPriority;
struct _FILE_FS_VOLUME_FLAGS_INFORMATION;
class SOSHost_MemoryClerk;
class GenericEvent;
class Spinlock<70,16,1>;
class Spinlock<219,2,1>;
class SEListSized<SOS_IOCompRequest,40>;
class SOS_AutoReleaseResourceGroup;
class AutoSpinlockHolder<335,0,1>;
class Spinlock<239,1,1>;
class AutoSpinlockHolder<226,2,1>;
class SOSHost_TaskAutoSwitchPreemptive;
struct _SERVER_INFO_1594;
class Spinlock<68,16,1>;
class SpinlockHolder<177,3,1>;
class ETWProviderSnapshot;
class TListElem<TList<GroupList,SOS_ResourceGroup,16,TListSLock> >;
class TypeListNode<SOS_DispatcherBase const * const,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class AutoTraceLock;
class AutoSpinlockHolder<73,16,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
class SOS_AutoAllowNonyield;
class TypeListNode<unsigned short,TypeListNode<unsigned int,TypeListNode<SchedulerMonitor::ProcessTrack const *,TypeListNode<NullType,NullType> > > >;
class SOS_Semaphore;
struct HadrTransportListSLock;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
class SOS_StackHashingControl;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
struct BitOrdinal<512>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
class XeSqlPkg::memory_node_foreign_node_memory;
class SOS_Tracing;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>;
struct BitOrdinal<32>;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::List;
struct TClassName<float,1,0>;
class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
struct TClassName<int,1,0>;
class TEnumerator<TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock> >;
class XeSqlPkg::broker_activation_stored_procedure_invoked;
struct TClassName<unsigned char,1,0>;
class AutoSpinlockHolder<325,1,1>;
class SOS_UserStoreEntriesEnum;
class XeSqlPkg::catalog_metadata_cache_hit;
struct TClassName<long,1,0>;
class SOS_SystemThreadEnum;
class SEListEnum<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>,0>;
class SpinlockHolder<57,16,1>;
class WParseName;
class TEnumerator<TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock> >;
class TTemplateInfo<1348,1024>;
class MemoryBrokerConstants;
struct NodeAffinityChangeCallbackList;
struct MaxWorkerThreadsChangeCallbackList;
class TCallbackList<TCallback<void,SOS_Task *,NullType,NullType,NullType> >;
class TCallbackList<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >;
class TCallbackList<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >;
class TCallbackList<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >;
class TCallbackList<TCallback<void,int *,NullType,NullType,NullType> >;
class TCallbackList<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >;
class TCallbackList<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >;
class TCallbackList<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >;
class SOS_PublicGlobals;
class TEnumerator<TList<SchedulerManager,Worker,16,TListSLock> >;
struct TClassName<char,1,0>;
class ExtIntCodeProtector<1>;
struct BitOrdinal<2>;
class CTraceWstr;
class YourFormatterTemplate;
struct BitOrdinal<65536>;
class TTemplateInfo<1234,1024>;
class ContextHandle;
class SOS_OS::OSInitializer;
class SOS_OS;
struct _PUBLIC_OBJECT_BASIC_INFORMATION;
struct IsElemental<_GUID>;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;
class TChildEnumerator<GlobalNodeEnum,SOS_Node,TEnumerator<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >,SOS_RingBuffer>;
class TTemplateInfo<1224,1024>;
class XeGDMPkg::gdma_lwfg_buffer_publish_lwfg;
class XeGDMPkg::gdma_activated;
struct XE_TArray<XEMap *,3>;
struct XE_TObjects<XEMap,3>;
struct XE_TArray<XEPredicateSource *,4>;
union _BUF_PSAPI_WORKING_SET_EX_BLOCK;
struct _BUF_PSAPI_WORKING_SET_EX_INFORMATION;
struct _AE_SERVICESTAT;
struct XE_TObjects<XEPredicateSource,4>;
struct SEReplSecondaryRowsetMetadataSLock;
class AutoSpinlockHolder<316,1,1>;
class TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,NullType> >;
struct XE_TArray<XEEvent *,1>;
struct XE_TObjects<XEEvent,1>;
class TypeListNode<MemoryUtilizationEffects::EffectInfo const * const,TypeListNode<NullType,NullType> >;
struct XE_TArray<XEType *,28>;
struct SESList<XEPackage0::RingTarget::EventEntry,0>;
struct SOS_OS::HypervisorInfo;
class Spinlock<104,10,1>;
struct XE_PackageManager::PackageMapEntry;
class XE_PackageManager;
class AutoSpinlockHolder<14,19,1>;
class XEPackage0::RingTarget::EventEntry;
class SEList<SOS_Scheduler,8>;
class TEnumerator<TList<MemoryNodeList,MemoryNode,0,TListSLock> >;
class XeSqlPkg::query_rpc_wake_up;
class XeSqlPkg::check_message_request;
class SOS_StateProtectors<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>;
struct _REPL_IDIR_INFO_1;
class SOS_StateProtectors<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost;
class CAutoHandleInternal<0,&CloseHandle>;
class TListElem<TList<ExternalCacheList,ExternalCache,8,TListSLock> >;
class SOS_OnlineNodeEnum;
struct _RTL_AVL_TREE;
struct _SEMAPHORE_BASIC_INFORMATION;
union _PROCESS_MEMORY_ALLOCATION_MODE;
class TypeListNode<void *,TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > > >;
struct _PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA;
class AutoSwitchLazyPreemptiveToNonPreemptive;
class XeSqlPkg::database_created;
class XeSqlPkg::log_blocks_uncache;
class XeSqlPkg::metadata_preallocate_object_id;
class Spinlock<245,1,1>;
class XeSqlPkg::hadr_wsfc_change_notifier_severe_error;
struct _FILE_IO_PRIORITY_HINT_INFORMATION;
class SEListEnum<SystemThread,144>;
class SOSHost_MemObj;
class TListElem<TList<PoolList,SOS_ResourcePool,0,TListSLock> >;
struct _COVERAGE_MODULE_REQUEST;
struct _COVERAGE_MODULES;
struct _WKSTA_INFO_1012;
struct _KEY_VALUE_PARTIAL_INFORMATION;
struct _RTL_PROCESS_HEAPS;
class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem> >;
struct IParentRowset;
class XListElem<SOS_DispatcherBase>;
struct _SERVER_INFO_1544;
class XE_AlignedArray<XE_Buffer *>;
struct SESList<XE_Buffer,24>;
class SEListSized<XE_Buffer,8>;
class SOSHost_EventManual;
class CAutoP<XE_FlushRequest>;
class XE_BufferMgr;
struct XE_TEvent<4,3,8>;
class XeSqlPkg::sp_cache_remove;
class XeSqlPkg::hekaton_matgen;
struct SOS_MemoryWorkSpace::WSCpuPart;
class XeSqlPkg::hadr_worker_pool_thread;
class XeDvmPkg::dvm_agent_quiesced;
class XeDvmPkg::dvm_initialized;
class XeDvmPkg::dvm_agent_state_error;
class XeDvmPkg::dvm_agent_activated;
class IFailpointAPI;
class XeDvmPkg::dvm_agent_work_item_dequeued;
struct SQLDK_Callbacks;
class XeDvmPkg::dvm_agent_initialized;
class SEList<XEPackage0::OrphanEntry,0>;
struct _TEB_ACTIVE_FRAME_CONTEXT_EX;
class XeSqlPkg::remote_dmv_stream_runtime_cache_miss;
struct XE_TEvent<4,2,22>;
class XeSqlPkg::existing_connection;
class SqlDkHost_ITraceFlag;
class XeSqlPkg::hadr_ar_critical_section_entry_state;
class CMemMgrInfo;
class XeSqlPkg::glm_primary_brick_release_response;
struct _USER_INFO_1051;
struct DMP_CLIENT_CALLBACK_COOKIE__;
class DmpStaticBaseCustomizeCallback;
class XE_AutoP<XEPackage0::CounterTarget>;
struct DistributedDumpInfoBlock;
struct _PS_CPU_QUOTA_QUERY_INFORMATION;
struct IDmpClient;
struct _REPL_EDIR_INFO_1001;
struct tagMDAXISINFO;
struct _RTLP_CURDIR_REF;
struct _RTL_STACK_TRACE_DATABASE_CREATE;
class SEList<DkParameter,0>;
class DkParametersProcessor;
struct CLUSTERVERSIONINFO_NT4;
struct PvArrayChunk;
class SESListEnum<XEPackage0::RingTarget::EventEntry,0>;
class CDynPvArray;
struct _HEAP_BLOCK_EXTRA_INFORMATION;
class XeSqlPkg::column_store_index_build_low_memory;
class CMemBufFormatter::CSinglePageBuffer;
class XeSqlPkg::hadr_database_replica_disjoin_completion;
class SEListEnum<CMemBufFormatter::CSinglePageBuffer,8>;
class XeSqlPkg::deadlock_monitor_pmo_status;
class XeSqlPkg::backup_restore_test_io_retry;
struct _HRESTYPEENUM;
class XeSqlPkg::hadr_dump_sync_primary_progress;
struct _WKSTA_INFO_1055;
struct RPCStream::UINT128;
struct _PS_ATTRIBUTE_LIST;
struct tagDB_VARNUMERIC;
class CMemBufFormatter;
struct _DMA_CONFIGURATION_BYTE0;
struct _SYSTEM_WATCHDOG_HANDLER_INFORMATION;
class XeSqlPkg::logreader_add_eor;
class CSerializeParam;
struct CSerializeContext<CMemBufFormatter>::GenericSerializer;
struct _SERVICE_INFO_1;
struct CSerializeContext<CMemBufFormatter>::ElementalSerializer;
struct CSerializeContext<CMemBufFormatter>::ClassSerializer;
class XeSqlPkg::fulltext_reorganize_source_fragment;
class IWCharStream;
class XeSqlPkg::query_rpc_server_runtime_cache_remove;
struct _REPL_INFO_1002;
class XeSqlPkg::query_rpc_process_cmd_insert_row;
class NonYieldSystemInformation;
struct _LDRP_CSLIST;
struct _LDR_DDAG_NODE;
struct _JOURNAL_SET_DELETE_VALUE_INFORMATION;
struct _LDRP_DLL_SNAP_CONTEXT;
struct CompilerOffset;
class XE_StreamCompare<char,XEPackage0::StringCompare<char,1>,0>;
struct _KEY_WOW64_FLAGS_INFORMATION;
struct XEPackage0::PartitionedCountingPredicateSource;
class CAutoBase<IAutoReadOnlyXact>;
class XeSqlPkg::query_rpc_server_collection_cache_remove;
struct _SYSTEM_VA_LIST_INFORMATION;
struct _USER_INFO_1010;
class IAutoSimpleXact;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER;
struct _SERVER_INFO_1584;
class XEPackage0::BinaryCompare<unsigned char,0>;
class CSessionTraceFlags;
class XeSqlPkg::hadr_worker_pool_task;
struct _LPC_CLIENT_DIED_MSG;
class XeSqlPkg::broker_activation_task_started;
class XeSqlPkg::databases_bulk_copy_throughput;
struct XE_TEvent<4,1,7>;
class XeSqlPkg::databases_log_truncation;
class XeSqlPkg::databases_log_file_size_changed;
class XeSqlPkg::memory_node_free_node_memory;
class XeSqlPkg::cursor_manager_cursor_cache_hit;
struct _FILE_MAILSLOT_PEEK_BUFFER;
class XeSqlPkg::memory_node_stolen_node_memory;
class XeSqlPkg::query_scan_uncache;
class XeSqlPkg::databases_bulk_insert_rows;
class XeSqlPkg::cursor_manager_cursor_end;
struct _OBJECTS_AND_SID;
class XeSqlPkg::databases_bulk_copy_rows;
struct _MEMORY_WORKING_SET_INFORMATION;
class XeSqlPkg::databases_backup_restore_throughput;
class XeSqlPkg::databases_log_cache_hit;
struct XE_TArray<XEDataAttribute,56>;
struct XE_TEvent<3,0,56>;
class XeSqlPkg::memory_manager_database_cache_memory;
class XeSqlPkg::databases_log_flush;
class XeSqlPkg::memory_manager_reserved_server_memory;
struct XEPackage0::CollectProcessIdAction;
struct _NET_DISPLAY_MACHINE;
class XeSqlPkg::buffer_node_database_pages;
class XeSqlPkg::scan_started;
class XeSqlPkg::cursor_manager_cursor_plan_begin;
class XeSqlPkg::memory_manager_free_memory;
class XeSqlPkg::memory_node_total_node_memory;
class XeSqlPkg::locks_lock_waits;
class XeSqlPkg::plan_cache_cache_attempt;
class XeSqlPkg::memory_node_target_node_memory;
class XeSqlPkg::availability_replica_state;
class XeSqlPkg::databases_dbcc_logical_scan;
class XeSqlPkg::fulltext_query_recompile;
class XeSqlPkg::cursor_manager_cached_cursor_added;
class XeSqlPkg::database_transaction_begin;
class XeSqlPkg::databases_log_flush_wait;
struct _EFI_DRIVER_ENTRY_LIST;
class XeSqlPkg::buffer_node_page_life_expectancy;
class XeCloudMinPkg::partition_metadata_lock_mode;
class XeSqlPkg::errorlog_written;
class XeSqlPkg::cursor_manager_cursor_worktable_use_end;
class XeCloudMinPkg::delete_partition_content;
class XeSqlPkg::databases_shrink_data_movement;
class XeSqlPkg::cursor_manager_cached_cursor_removed;
class XeSqlPkg::databases_log_growth;
class XeCloudMinPkg::fabric_unpair;
class XeSqlPkg::buffer_manager_target_pages;
class XeSqlPkg::cursor_manager_cursor_cache_attempt;
class XeCloudMinPkg::physical_seeding_copy_to_secondary_complete;
class XeSqlPkg::buffer_manager_database_pages;
class XeSqlPkg::broker_activation_task_aborted;
class XeSqlPkg::cursor_manager_cursor_memory_usage;
class XeSqlPkg::buffer_manager_page_life_expectancy;
class XeSqlPkg::metadata_initiate_unlock_object;
class XeSqlPkg::memory_node_database_node_memory;
class XeSqlPkg::session_mgr_work_item_enqueued;
class XeSqlPkg::cursor_manager_cursor_begin;
class CObjName;
class XeSqlPkg::metadata_agent_lock_object;
class CBaseClassInfo;
class XeSqlPkg::mixed_page_skipextent;
class XeCloudMinPkg::primary_commit_log_flush;
struct MDAvailabilityGroupDbId;
class SQLSOS_NonYieldProcessTableRecord;
class XeCloudMinPkg::catchup_from_primary_complete;
class XeCloudMinPkg::primary_commit_ack;
class CAutoMalloc<DkParameter>;
class UcsTrace;
class XeCloudMinPkg::prefer_copy_over_catchup;
struct CSerializeContext<RPCStream>::GenericSerializer;
struct CSerializeContext<RPCStream>::CharTypeFormatter;
struct XE_TArray<XEEvent *,0>;
struct CSerializeContext<RPCStream>::NativeTypeFormatter;
class TCallbackListBase<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType> >;
struct CSerializeContext<RPCStream>::ElementalSerializer;
class XeSqlPkg::hadr_db_manager_establish_db_msg;
class XeSqlPkg::fastloadcontext_enabled;
class DefBaseAllocator;
class SQLSOS_NonYieldThreadTableRecord;
class XeSqlPkg::query_driver_sent_statistics_profile;
struct XE_TEvent<4,0,14>;
class XeCloudMinPkg::become_secondary;
struct _SYSDBG_VIRTUAL;
class XeCloudMinPkg::become_forwarder_pending;
class std::_Init_locks;
class XeCloudMinPkg::physical_seeding_fall_back_to_SERepl;
class XeCloudMinPkg::set_partition_throttling_mode;
class XeCloudMinPkg::cps_update_peak_worker_count;
struct _SYSTEM_LEGACY_DRIVER_INFORMATION;
class XeCloudMinPkg::repl_commit_xact;
class TypeListNode<SchedulerMonitor::ProcessTrack const *,TypeListNode<NullType,NullType> >;
class XeSqlPkg::hadr_xrf_deleteAllXrf_beforeEntry;
class SEList<SOS_ResourceGroup,0>;
class XeSqlPkg::physical_page_write;
class SEListEnum<SOS_ResourceGroup,0>;
class TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
class XeSqlPkg::query_rpc_server_collection_cache_insert;
class Spinlock<151,3,1>;
class XeSqlPkg::xfcb_read_complete;
class SpinlockHolder<263,1,1>;
struct RpcRequestorContextSLock;
struct SpinEventMutexSLock;
struct AsyncOpAdminWorkRegistrationHashTableSLock;
class XeCloudMinPkg::kill_primary;
class AutoSpinlockHolder<199,3,1>;
class Spinlock<113,9,1>;
class XeCloudMinPkg::become_forwarder;
class TypeListNode<unsigned int,TypeListNode<SchedulerMonitor::ProcessTrack const *,TypeListNode<NullType,NullType> > >;
class XeCloudMinPkg::set_partition_commit_mode;
class UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >;
class XeCloudMinPkg::partition_quorum_loss;
class UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >::Elem;
class SpinlockHolder<82,13,1>;
class XeCloudMinPkg::catchup_to_secondary_complete;
class AutoSpinlockHolder<294,1,1>;
struct _NETLOGON_INFO_3;
class Spinlock<79,13,1>;
class XeCloudMinPkg::physical_seeding_start_copy_from_primary;
class SpinlockHolder<101,10,1>;
class Spinlock<55,16,1>;
class XeSqlPkg::replica_create_local_sent;
class XeSqlPkg::glm_acquire_database_lock_exception;
class XeSqlPkg::query_rpc_lob_action;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
struct _SI_COPYFILE;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>;
class XeSqlPkg::ghost_cleanup_task_start;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
struct tagDBPROP;
class SpinlockHolder<290,1,1>;
struct _MEMORY_SCRUB_INFORMATION;
struct _PDH_TIME_INFO;
struct _wfinddata64i32_t;
class AutoSpinlockHolder<219,2,1>;
class AutoSpinlockHolder<30,19,1>;
class AutoSpinlockHolder<95,11,1>;
struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
struct _SERVER_INFO_1549;
struct SessionMgrSLock;
class XeSqlPkg::log_single_record;
class Spinlock<319,1,1>;
class AutoSpinlockHolder<191,3,1>;
struct _JOURNAL_SET_KEY_USER_FLAGS_INFORMATION;
struct CompPlanSLock;
class XeSqlPkg::redo_caught_up;
class XeSqlPkg::database_ddl_stmt_runtime_check;
struct FabricReplicaTransportSLock;
struct _FILE_ATTRIBUTE_TAG_INFORMATION;
class XeSqlPkg::reserve_log_space;
struct SoapSessionsSLock;
class SpinlockHolder<81,13,1>;
class SpinlockHolder<281,1,1>;
struct ExtentActivationSLock;
struct _PS_SYSTEM_DLL_INIT_BLOCK;
class Spinlock<223,2,1>;
struct SEReplPartitionByIdSLock;
class SpinlockHolder<239,1,1>;
struct SloInfoListSLock;
class XeCloudMinPkg::repl_commit_xact_apply;
struct Pow<10,6>;
class SpinlockHolder<295,1,1>;
class SpinlockHolder<202,3,1>;
class SpinlockHolder<73,16,1>;
class XeCloudMinPkg::start_catchup_from_primary;
struct GuardianSLock;
class SpinlockHolder<133,4,1>;
class XeSqlPkg::prefetch_extent;
struct TransmitterHeartbeatDestinationsSLock;
struct _SERVER_INFO_1536;
class RefCountImpl<XE_PredicateExpr>;
struct SbListSLock;
class AutoSpinlockHolder<317,1,1>;
struct _KEY_HANDLE_TAGS_INFORMATION;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>;
struct _WKSTA_INFO_402;
struct If<1,CSerializeContext<CMemBufFormatter>::NativeTypeFormatter,CSerializeContext<CMemBufFormatter>::CharTypeFormatter>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<3>;
struct _REG_NOTIFY_INFORMATION;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>;
class XeSqlPkg::file_written_to_replica;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<0>;
struct SEReplSecondaryTaskProxySLock;
class AutoSpinlockHolder<200,3,1>;
struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION;
struct _BrowseDlgConfig_A;
struct XE_TEvent<4,2,17>;
class XeSqlPkg::query_rpc_delete_rows;
struct DataPortSourceInfoQueueSLock;
struct _WKSTA_INFO_1048;
class SpinlockHolder<195,3,1>;
class XeSqlPkg::deadlock_monitor_serialized_local_wait_for_graph;
class AutoSpinlockHolder<66,16,1>;
class Spinlock<140,4,1>;
struct XBitmap<StaticStorage<0> >;
struct TsqlDebugSLock;
class SpinlockHolder<200,3,1>;
struct _SERVER_INFO_1601;
struct IRowsetIdentity;
class CAutoStreamHeader;
class SpinlockHolder<336,0,1>;
struct CommitTableSLock;
class TBaseSafeCallbackList<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType> >;
class XeSqlPkg::collect_all_ExecUdfLobAccess;
class AutoSpinlockHolder<39,18,1>;
class SpinlockHolder<84,13,1>;
class AutoSpinlockHolder<83,13,1>;
struct std::_Arithmetic_traits<int>;
class std::basic_ostringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
struct _KAFFINITY_ENUMERATION_CONTEXT;
struct std::is_error_code_enum<unsigned __int64>;
struct std::is_error_code_enum<std::error_condition>;
struct std::is_error_code_enum<SOS_TraceStream & (__cdecl*)(SOS_TraceStream &)>;
struct std::is_error_code_enum<unsigned int>;
struct std::_Arithmetic_traits<__int64>;
struct std::is_error_condition_enum<std::error_condition>;
struct std::iterator_traits<unsigned short>;
struct _THREAD_TLS_INFORMATION;
class std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >;
struct _SERVER_INFO_103;
struct _REPL_INFO_0;
struct std::_Arithmetic_traits<signed char>;
struct std::_Facetptr<std::numpunct<char> >;
struct _PROCESS_TLS_INFORMATION;
struct std::is_error_code_enum<int>;
struct std::_Arithmetic_traits<short>;
struct SQLMRRowDouble;
struct std::_Pickinteger<1>;
class std::basic_fstream<unsigned short,std::char_traits<unsigned short> >;
struct _FILE_NAME_INFORMATION;
struct std::is_error_code_enum<enum std::io_errc::io_errc>;
struct _FILE_BASIC_INFORMATION;
struct _FILE_EA_INFORMATION;
struct _FILE_ACCESS_INFORMATION;
struct _FILE_POSITION_INFORMATION;
struct _FILE_MODE_INFORMATION;
struct _FILE_ALIGNMENT_INFORMATION;
struct _FILE_ALL_INFORMATION;
struct std::iterator_traits<unsigned long>;
struct std::is_error_code_enum<std::ios_base::failure>;
class std::basic_stringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
struct _WINDOWS_OS_OPTIONS;
struct std::_Arithmetic_traits<long>;
struct _USER_MODALS_INFO_1004;
struct _AE_CONNSTOP;
struct std::is_error_code_enum<enum std::errc::errc>;
struct std::_Arithmetic_traits<unsigned long>;
struct std::is_error_condition_enum<std::allocator<char> >;
struct std::is_error_condition_enum<enum std::io_errc::io_errc>;
struct _FILE_ZERO_DATA_INFORMATION;
struct std::iterator_traits<short>;
struct _REPL_INFO_1000;
struct std::identity<std::strstream>;
struct _PLUGPLAY_CONTROL_DEPTH_DATA;
struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1;
struct std::is_error_code_enum<signed char>;
class DmpPointer<XE_ModuleManager *>;
class std::basic_ifstream<char,std::char_traits<char> >;
struct std::iterator_traits<unsigned __int64>;
struct _SYSTEM_POWER_STATE_DISABLE_REASON;
class std::basic_ifstream<unsigned short,std::char_traits<unsigned short> >;
struct std::_Int_iterator_tag;
class DmpListIterator<SOS_RingBuffer,8,0,SEList<SOS_RingBuffer,0>,8,512>;
struct std::_Facetptr<std::ctype<char> >;
struct XListDmpOffsets<XE_TargetEntry>;
struct std::is_error_code_enum<std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
struct _KUSER_SHARED_DATA;
struct std::tr1::_Is_floating_point<double>;
class IsArray<unsigned long>;
struct std::tr1::_Remove_reference<void (__cdecl*&)(void *)>;
struct std::tr1::_Or<1,0>;
struct _SYSTEM_CALL_COUNT_INFORMATION;
struct std::tr1::integral_constant<bool,1>;
struct std::tr1::_Is_integral<unsigned int>;
class DmpPointer<GroupList>;
struct std::tr1::_Is_integral<unsigned __int64>;
struct _SYSTEM_SPCALL2_INFORMATION;
struct std::tr1::_Remove_reference<char * &>;
struct std::tr1::_Is_void<void>;
struct std::tr1::_Remove_reference<__int64 &>;
struct std::tr1::_Is_integral<char>;
struct _AE_SESSLOGON;
struct std::tr1::_Is_integral<long>;
struct _SYSTEM_SYSTEM_PARTITION_INFORMATION;
struct std::tr1::_Remove_reference<std::ios_base::_Fnarray * &>;
struct std::tr1::_Is_integral<int>;
struct _RTL_PERTHREAD_CURDIR;
struct std::tr1::add_rvalue_reference<void const volatile >;
class DmpPointer<SOS_ResourceGroup>;
struct std::tr1::add_reference<void const volatile >;
struct _WKSTA_INFO_1051;
struct std::tr1::_Remove_reference<std::ios_base::_Iosarray * &>;
struct std::tr1::_Is_integral<__int64>;
struct _QUAD;
struct std::tr1::_Get_align<long>;
struct std::tr1::_Remove_reference<int &>;
struct std::tr1::add_reference<void>;
struct std::tr1::enable_if<1,std::error_condition>;
struct tagDBCONSTRAINTDESC;
struct std::tr1::_Is_integral<unsigned char>;
struct _THREAD_CYCLE_TIME_INFORMATION;
struct std::tr1::_Remove_reference<char &>;
struct _SERVER_INFO_1563;
struct std::tr1::enable_if<0,std::error_code>;
struct std::tr1::_Is_integral<short>;
struct std::tr1::_Is_floating_point<long double>;
struct std::tr1::enable_if<0,std::error_condition>;
struct _CLUSTER_VALIDATE_CSV_FILENAME;
struct std::tr1::_Or<1,1>;
class std::basic_fstream<char,std::char_traits<char> >;
struct _HNETWORK;
struct std::is_error_condition_enum<std::allocator<unsigned short> >;
struct _SERVER_INFO_1564;
struct XE_TArray<XEDataAttribute,21>;
struct XE_TEvent<3,0,21>;
struct std::is_error_condition_enum<std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >;
struct _WNF_USER_SUBSCRIPTION;
class std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >;
struct std::_Arithmetic_traits<char>;
struct _OBJECT_ATTRIBUTES32;
struct std::iterator_traits<char>;
struct std::_Arithmetic_traits<unsigned char>;
class std::basic_ofstream<char,std::char_traits<char> >;
struct std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >;
struct std::is_error_code_enum<unsigned short>;
struct _FILE_VOLUME_NAME_INFORMATION;
struct std::is_error_code_enum<std::allocator<unsigned short> >;
struct _PARSE_MESSAGE_CONTEXT;
class std::basic_stringbuf<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
struct _OBJECT_BASIC_INFORMATION;
struct std::iterator_traits<unsigned char>;
struct std::is_error_condition_enum<std::istreambuf_iterator<char,std::char_traits<char> > >;
class std::collate<unsigned short>;
struct std::iterator_traits<bool>;
class std::basic_ofstream<unsigned short,std::char_traits<unsigned short> >;
struct _SERVER_INFO_502;
struct std::is_error_code_enum<std::error_code>;
union CLUSPROP_SYNTAX;
struct CLUSPROP_VALUE;
class std::basic_string<unsigned int,std::char_traits<unsigned int>,std::allocator<unsigned int> >;
struct std::_Arithmetic_traits<bool>;
struct std::iterator_traits<long>;
class std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >;
struct std::_Arithmetic_traits<unsigned int>;
struct std::_Facetptr<std::ctype<unsigned short> >;
struct CLUSPROP_LONG;
struct std::is_error_code_enum<std::allocator<char> >;
class std::basic_istringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;
struct XE_TObjects<XEType,0>;
struct ReplWorkerPoolsSLock;
struct _BrowseDlgConfig_W;
class AutoSpinlockHolder<136,4,1>;
struct XE_TObjects<XEPredicateSource,11>;
struct FileTableSLock;
struct CLUSPROP_WORD;
class UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >;
class UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >::Elem;
struct _ADMIN_OTHER_INFO;
class SpinlockHolder<8,19,1>;
struct _SERVER_INFO_1580;
struct CLUSPROP_SECURITY_DESCRIPTOR;
class AutoSpinlockHolder<110,9,1>;
class SpinlockHolder<1,19,1>;
struct _HGROUP;
class AutoSpinlockHolder<86,13,1>;
struct CLUSPROP_FILETIME;
struct LsListSLock;
class AutoSpinlockHolder<161,3,1>;
struct _PS_MEMORY_RESERVE;
struct _HRESENUM;
class XE_DtorAccess;
struct XE_TypeTraits<XEPredicateCompare>;
struct SEReplRowsetMetadataSLock;
class SpinlockHolder<331,0,1>;
class Spinlock<91,11,1>;
class SpinlockHolder<284,1,1>;
struct XVBListSLock;
struct XeSessionStorageSLock;
class AutoSpinlockHolder<134,4,1>;
struct LogPoolHashBucketSLock;
struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
struct _MUISTRINGPOOL;
class CAutoRefc<XE_FunctionExpr>;
class SpinlockHolder<141,4,1>;
struct _MUILANGCFGNODE;
struct TCMAAGEDescSLock;
class SpinlockHolder<312,1,1>;
class AutoSpinlockHolder<322,1,1>;
struct _ACTRL_ACCESS_ENTRYW;
struct _STARTUPINFOEXW;
struct _MUILANGLISTNODE;
class AutoSpinlockHolder<137,4,1>;
struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;
class AutoSpinlockHolder<171,3,1>;
struct _SYSTEM_GDI_DRIVER_INFORMATION;
class SpinlockHolder<67,16,1>;
struct XE_TEvent<4,1,10>;
class Spinlock<215,2,1>;
struct SEReplReplicaSLock;
struct CLUS_SCSI_ADDRESS;
class SpinlockHolder<83,13,1>;
class Spinlock<83,13,1>;
class AutoSpinlockHolder<166,3,1>;
class AutoSpinlockHolder<50,17,1>;
struct RfsThreadQSLock;
class SpinlockHolder<33,19,1>;
struct _OBJECT_DIRECTORY_INFORMATION;
class SpinlockHolder<120,8,1>;
class DmpPointer<TList<NodeManager,SOS_Node,16,TListSLock> >;
struct SbControlSLock;
class SpinlockHolder<38,18,1>;
class SpinlockHolder<53,16,1>;
struct tagDBBINDING;
struct QueryStoreStatsCookieCacheSLock;
class UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >;
struct _PDH_FMT_COUNTERVALUE_ITEM_W;
class Spinlock<11,19,1>;
class XeSqlPkg::query_execution_print_partition_elimination_info;
class AutoSpinlockHolder<297,1,1>;
class XeSqlPkg::dbtable_startup;
class TCacheStoreUserDataEnumerator<ResourceInventory,ResourceDescriptor>;
class AutoSpinlockHolder<220,2,1>;
struct _COUNTER_READING;
class SpinlockHolder<153,3,1>;
class SpinlockHolder<221,2,1>;
struct _SERVER_INFO_1598;
class AutoSpinlockHolder<265,1,1>;
struct _CONFIG_INFO_0;
class SpinlockHolder<329,1,1>;
struct DbTableSLock;
struct _WKSTA_INFO_1027;
struct COMInitSLock;
class SpinlockHolder<18,19,1>;
struct DirtyPageListSLock;
class XeSqlPkg::database_xml_deadlock_report;
class SpinlockHolder<271,1,1>;
class XeSqlPkg::check_phase_tracing;
class SpinlockHolder<288,1,1>;
struct _PSAPI_WORKING_SET_INFORMATION;
class XeSqlPkg::query_rpc_prepare_cmd_insert_row;
struct QueryStoreExecStatsAggSLock;
class XeSqlPkg::read_only_route_complete;
struct _PDH_RAW_COUNTER_ITEM_W;
struct _SERVER_INFO_1511;
class AutoSpinlockHolder<109,9,1>;
class SpinlockHolder<112,9,1>;
class AutoSpinlockHolder<314,1,1>;
class AutoSpinlockHolder<327,1,1>;
struct HadrArTransportSLock;
class TypeListNode<SOS_Task *,TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
struct _WKSTA_TRANSPORT_INFO_0;
class AutoSpinlockHolder<55,16,1>;
class SpinlockHolder<142,4,1>;
struct LangResLoadSLock;
struct _PLUGPLAY_CONTROL_RELATED_DEVICE_DATA;
class SpinlockHolder<276,1,1>;
class SpinlockHolder<139,4,1>;
class Spinlock<30,19,1>;
class SESListEnum<XEPackage0::XE_LiveWriter::LiveClientEntry,0>;
struct SEReplBackgroundTaskListSLock;
class SpinlockHolder<189,3,1>;
class XeSqlPkg::database_attached;
struct QSCacheSLock;
class XeSqlPkg::drop_database_ex_lock_acquire;
class AutoSpinlockHolder<204,3,1>;
class AutoSpinlockHolder<258,1,1>;
class XeSqlPkg::commit_tran_starting;
struct LogPoolRefCountedObjectSLock;
class CAutoBase<XEPackage0::CounterTarget::PackageEntry>;
struct FsContainerListWithDeleteSLock;
struct _RTL_CRITICAL_SECTION64;
class Spinlock<218,2,1>;
struct _SYSTEM_PREFETCH_STATS;
class TypeListNode<SOS_Scheduler * const,TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
struct _SERVER_INFO_1530;
class AutoSpinlockHolder<70,16,1>;
class AutoSpinlockHolder<23,19,1>;
struct _PO_WAKE_SOURCE_HEADER;
class SpinlockHolder<169,3,1>;
struct MatrixMtmTxnSLock;
struct _SERVER_INFO_1513;
class Spinlock<224,2,1>;
class XeSqlPkg::hadr_db_manager_state;
class AutoSpinlockHolder<0,19,1>;
class XeSqlPkg::redo_single_record;
struct HadrArccSLock;
struct ConnectsSLock;
class XeSqlPkg::hadr_log_block_send_complete;
class AutoSpinlockHolder<57,16,1>;
class XeSqlPkg::mixed_page_scan_file;
struct AllocCachesHashSLock;
struct _ACTRL_CONTROL_INFOW;
class AutoSpinlockHolder<9,19,1>;
class UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >;
class UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >::Elem;
struct CMEDDbSLock;
class AutoSpinlockHolder<78,14,1>;
class AutoSpinlockHolder<228,1,1>;
struct _SERVER_TRANSPORT_INFO_1;
class TCallbackListBase<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType> >;
struct _GROUP_INFO_0;
struct SessionKillerSLock;
struct _CM_MCA_POS_DATA;
struct ResourceSLock;
class AutoSpinlockHolder<227,2,1>;
struct _SYSTEM_PREFETCH_OPTIONS;
class AutoSpinlockHolder<174,3,1>;
class Spinlock<109,9,1>;
struct _THREAD_LAST_SYSCALL_INFORMATION;
class XeSqlPkg::lock_timeout;
class Spinlock<97,11,1>;
class XeSqlPkg::matrix_database_state_change;
struct XE_TArray<XEDataAttribute,23>;
struct XE_TEvent<4,0,23>;
class XeSqlPkg::logreader_process_filestream_info;
class AutoSpinlockHolder<302,1,1>;
struct ICommandStream;
class AutoSpinlockHolder<306,1,1>;
struct DropTempOSLock;
struct SEListSLock;
struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION;
class Spinlock<188,3,1>;
struct _CM_SCSI_DEVICE_DATA;
struct AsyncOpAdminClientRegistrationListSLock;
struct _OBJECT_ATTRIBUTES64;
struct XcbHashSLock;
struct XPacketListSLock;
class SpinlockHolder<171,3,1>;
struct EvtNotifDelayedDropSLock;
class Spinlock<308,1,1>;
struct CLUSPROP_CSV_PARTITION_INFO_EX;
class Spinlock<13,19,1>;
struct _FILE_OBJECTID_BUFFER;
struct SEReplFlowControlSLock;
struct _CLUS_CSV_VOLUME_INFO;
class AutoSpinlockHolder<13,19,1>;
class XeSqlPkg::query_scan_setup;
struct Pow<10,4>;
class SpinlockHolder<54,16,1>;
class TTemplateInfo<1235,1024>;
struct XDBUriCacheSLock;
struct _SL_APPX_CACHE_VALUE_DESCRIPTOR;
class SpinlockHolder<117,8,1>;
class SpinlockHolder<165,3,1>;
class XeSqlPkg::query_rpc_server_collection_create;
struct DelayLoadProc;
struct QueryStoreHtCacheSLock;
struct _SL_APPX_CACHE;
struct DropSLock;
class XeSqlPkg::lock_deadlock_chain;
struct QueryStoreStmtCompAggSLock;
class Spinlock<5,19,1>;
struct ICommandProperties;
class SpinlockHolder<328,1,1>;
struct _CLUSTER_IP_ENTRY;
class SpinlockHolder<94,11,1>;
struct _DECRYPTION_STATUS_BUFFER;
class AutoSpinlockHolder<309,1,1>;
struct BitOrdinal<128>;
struct _CONNECTION_INFO_1;
struct _TP_TASK;
struct _TP_DIRECT;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<3>;
struct TClassName<long double,1,0>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<2>;
struct DbtHashSLock;
struct HUFFMAN_NODE_T;
class Spinlock<257,1,1>;
class SpinlockHolder<93,11,1>;
class XeSqlPkg::queryvm_context_writeback;
struct _WKSTA_INFO_1045;
struct _TP_JOB;
struct BIO_STATE_T;
struct LZ77_PASS2_STATE_T;
class AutoSpinlockHolder<264,1,1>;
struct _KEY_VIRTUALIZATION_INFORMATION;
class AutoSpinlockHolder<299,1,1>;
struct SessionMgrWorkItemListSLock;
class Spinlock<6,19,1>;
struct _RTL_QUERY_REGISTRY_TABLE;
class AutoSpinlockHolder<232,2,1>;
struct XE_TTarget<0>;
struct _SOS_VMCOUNTERS_EX;
class XeSqlPkg::group_commit_value_changed;
struct IndexUsageStatsSLock;
struct XE_TTarget<4>;
struct _PERF_DATA_BLOCK;
class AutoSpinlockHolder<71,16,1>;
class SpinlockHolder<292,1,1>;
class XeSqlPkg::selective_xml_index_no_compatible_xsd_types;
class AutoSpinlockHolder<261,1,1>;
class XeSqlPkg::query_pre_execution_showplan;
struct SEReplBackgroundTaskControlSLock;
struct _RTL_TRACE_DATABASE;
struct HadrAghXAccessSLock;
class XeSqlPkg::after_natively_compiled_proc_entry_removal_on_drop;
class IntegralController;
struct _IO_ERROR_LOG_PACKET;
struct _SERVER_INFO_1542;
class TypeListSize<TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > > >;
struct _KLDR_DATA_TABLE_ENTRY;
class SpinlockHolder<254,1,1>;
class AutoSpinlockHolder<5,19,1>;
struct _PLUGPLAY_CONTROL_INTERFACE_LIST_DATA;
class SpinlockHolder<186,3,1>;
struct HoBtHashSLock;
struct ISQLErrorInfo;
class Spinlock<157,3,1>;
class Spinlock<143,4,1>;
struct tagDBPROPINFO;
class AutoSpinlockHolder<157,3,1>;
class OstreamStreamBuf;
struct _CLUSTER_MRR_RESPONSE;
class TypeListSize<TypeListNode<void *,TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > > > >;
class Spinlock<300,3,1>;
struct XE_TEvent<4,2,4>;
class TypeListSize<TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > >;
class XeSqlPkg::trace_flag_changed;
class AutoSpinlockHolder<120,8,1>;
class XeSqlPkg::rpc_starting;
class Spinlock<306,1,1>;
class XeSqlPkg::all_database_segments_metadata_create;
class XeSqlPkg::query_instance_cache_remote_remove;
struct DbccCheckSLock;
class XeSqlPkg::calculate_dop_begin;
class TypeListNode<SOS_Task *,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
struct TCMMessageListSLock;
struct _SERVER_INFO_1586;
class Spinlock<102,10,1>;
struct _NET_VALIDATE_PASSWORD_HASH;
struct _NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG;
class AutoSpinlockHolder<260,1,1>;
struct _USER_INFO_1;
class XeSqlPkg::page_split;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<4>;
class AutoSpinlockHolder<222,2,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<2>;
class XeSqlPkg::sql_batch_completed;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<void,enum WakeUpReason,unsigned long,NullType,NullType>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<0>;
class XeSqlPkg::cursor_open;
class XeSqlPkg::recovery_unit_file_metadata_copy;
class SpinlockHolder<233,1,1>;
class Spinlock<95,11,1>;
class XeSqlPkg::mbr_lmd_read_primary_file_group_flags;
struct RemoteBatchStatsHashTableSLock;
class SpinlockHolder<310,1,1>;
class XeSqlPkg::log_consumer_act;
class SpinlockHolder<293,1,1>;
class SpinlockHolder<335,0,1>;
struct _SYSTEM_POWER_LOGGING_ENTRY;
struct _RTL_BUFFER;
class TCallback<void,SOS_Task *,NullType,NullType,NullType>;
class XeSqlPkg::metadata_ddl_add_column;
class AutoSpinlockHolder<130,7,1>;
class XeSqlPkg::database_rename;
class AutoSpinlockHolder<51,17,1>;
class SpinlockHolder<20,19,1>;
class XeSqlPkg::ipc_call;
class TypeListSize<TypeListNode<NullType,TypeListNode<NullType,NullType> > >;
class XeSqlPkg::query_optimizer_tree;
struct SEReplPartitionKillSLock;
class XeSqlPkg::add_file_rollback;
struct CMEDHashSetSLock;
class XeSqlPkg::bitmap_disabled_warning;
struct FsGhostStatusSLock;
class AutoSpinlockHolder<52,16,1>;
class XeSqlPkg::query_plan_intrinsic_operators;
class AutoSpinlockHolder<37,18,1>;
struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionWithoutActive;
struct FileTableFcbSLock;
class XeSqlPkg::natively_compiled_proc_execution_started;
struct SEReplQueueXactHashSLock;
class Spinlock<115,8,1>;
struct _PROCESS_HANDLE_TRACING_ENABLE;
class SpinlockHolder<326,1,1>;
class Spinlock<214,2,1>;
struct _USER_INFO_2;
class SpinlockHolder<157,3,1>;
class AutoSpinlockHolder<179,3,1>;
class XeSqlPkg::before_redo_lsn_update;
struct SEReplPartitionSessionEventListSLock;
struct BpRepartitionSLock;
class Spinlock<282,1,1>;
class XeSqlPkg::xfcb_header_obtained;
class XeSqlPkg::leaf_page_disfavored;
class AutoSpinlockHolder<319,1,1>;
class SpinlockHolder<119,8,1>;
struct XE_TArray<XECustomizableAttribute,7>;
struct XE_TEvent<4,7,10>;
class XeSqlPkg::filestream_file_io_trace;
class AutoSpinlockHolder<276,1,1>;
class XeSqlPkg::broker_dialog_transmission_body_dequeue;
class AutoSpinlockHolder<296,1,1>;
class XeSqlPkg::hadr_dump_log_progress;
class SpinlockHolder<98,11,1>;
class SpinlockHolder<193,3,1>;
class Spinlock<232,2,1>;
class XeSqlPkg::columnstore_tuple_mover_begin_compress;
class TypeListSize<TypeListNode<void *,TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >;
class AutoSpinlockHolder<187,3,1>;
struct _FILE_BOTH_DIR_INFORMATION;
class AutoSpinlockHolder<54,16,1>;
struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION;
class Spinlock<164,3,1>;
class AutoSpinlockHolder<65,16,1>;
class XeSqlPkg::hobt_schema_mgr_factory;
struct HttpConnCacheSLock;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>;
class XeSqlPkg::hadr_xrf_copyXrf_partialCopy;
class XeSqlPkg::lock_redo_unblocked;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<2>;
class XeSqlPkg::remote_dmv_stream_blob_fetch_client;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,int *,NullType,NullType,NullType>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<0>;
class XeSqlPkg::xtp_recover_table;
class AutoSpinlockHolder<31,19,1>;
class XeSqlPkg::hadr_sql_instance_to_node_map_key_created_opened;
class SpinlockHolder<231,2,1>;
class SpinlockHolder<75,16,1>;
struct SOS_DispatcherQueueSLock;
class XeSqlPkg::security_cache_database_timestamp_increment;
struct IRow;
class AutoSpinlockHolder<205,3,1>;
class SOSHost_EventAuto;
struct FabricTvfDataConsumerListSLock;
class XeSqlPkg::broker_transmission_object_worktable_save_end;
struct FakeOsNumaConfig::FakeNode;
class FakeOsNumaConfig;
struct _TIME_OF_DAY_INFO;
struct XE_TObjects<XEEvent,0>;
struct _SERVER_TRANSPORT_INFO_3;
class AutoSpinlockHolder<158,3,1>;
class SpinlockHolder<147,4,1>;
class XeSqlPkg::hadr_transport_session_state;
struct _stat32i64;
class XeSqlPkg::hadr_transport_get_message;
class SpinlockHolder<246,1,1>;
class AutoSpinlockHolder<248,1,1>;
class XeSqlPkg::query_execution_get_batch_vector;
class XeSqlPkg::hadr_wsfc_change_notifier_node_not_online;
class TypeListNode<enum MemoryUtilizationEffects::Effects,TypeListNode<MemoryUtilizationEffects::EffectInfo const * const,TypeListNode<NullType,NullType> > >;
class XeSqlPkg::logconsolidation_sectors_moving_to_data;
class Spinlock<284,1,1>;
struct DelayLoadInfo;
class XeSqlPkg::hadr_transport_configuration_state;
class XeSqlPkg::metadata_manager_catalog_updated;
class SpinlockHolder<24,19,1>;
struct _stat64i32;
class SpinlockHolder<97,11,1>;
struct RpcDispachSLock;
class XeSqlPkg::ghost_cleanup;
class AutoSpinlockHolder<206,3,1>;
class XeSqlPkg::database_detached;
class GlobalSchedulerEnum;
class SpinlockHolder<266,1,1>;
class SpinlockHolder<3,19,1>;
class XeSqlPkg::filegroup_property_change;
class AutoSpinlockHolder<104,10,1>;
class XeSqlPkg::sql_statement_plan_received;
class XeSqlPkg::query_driver_topology;
struct XE_TypeTraits<XETarget>;
class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class XeSqlPkg::query_rpc_server_collection_cache_miss;
struct ScriptDeploymentRequestsSLock;
class XeSqlPkg::hadr_db_manager_backup_info_msg;
class AutoSpinlockHolder<185,3,1>;
class XeSqlPkg::replica_create_request;
class AutoSpinlockHolder<173,3,1>;
class SOS_MemoryManager;
class TCacheStoreUserDataEnumerator<StackFramesStore,StackFrames<16> >;
class XeSqlPkg::broker_transmission_timer_armed;
struct _SERVER_INFO_1107;
class AutoSpinlockHolder<36,19,1>;
struct XE_SessionTargetMgrSLock;
class SpinlockHolder<100,10,1>;
class XeSqlPkg::query_remote_memory_return_grant;
struct CMA_FMHistorySLock;
class SpinlockHolder<127,7,1>;
struct _USER_INFO_1008;
class AutoSpinlockHolder<11,19,1>;
class SpinlockHolder<228,1,1>;
class AutoSpinlockHolder<304,1,1>;
class XeSqlPkg::physical_filegroup_create;
struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;
struct XE_TEvent<4,6,10>;
class AutoSpinlockHolder<281,1,1>;
class Spinlock<85,13,1>;
class XeSqlPkg::logreader_apply_filter_proc;
class XeSqlPkg::ioaff_scan_worker_end;
class Spinlock<185,3,1>;
class XeSqlPkg::database_suspect_data_page;
class SpinlockHolder<161,3,1>;
class XeSqlPkg::sql_statement_recompile;
class Spinlock<166,3,1>;
class XeSqlPkg::query_rpc_prepare_cmd_get_data;
class AutoSpinlockHolder<76,15,1>;
class SpinlockHolder<2,19,1>;
class SpinlockHolder<114,9,1>;
class XeSqlPkg::query_execution_get_batch_from_column_store;
class SpinlockHolder<124,7,1>;
class SpinlockHolder<264,1,1>;
struct _USER_INFO_1020;
class SpinlockHolder<235,1,1>;
class SEList<DynInterval,0>;
class AutoSpinlockHolder<72,16,1>;
class SpinlockHolder<203,3,1>;
class SpinlockHolder<87,12,1>;
class SpinlockHolder<134,4,1>;
class XeCloudMinPkg::establish_persistent_catchup_to_secondary;
class Spinlock<254,1,1>;
struct VdiOpSLock;
class XeSqlPkg::hadr_ag_lease_renewal;
struct LogLcSLock;
class SOS_CallResult<long>;
class XeSqlPkg::query_rpc_server_runtime_init;
class XeSqlPkg::mixed_page_scan_page;
class XeSqlPkg::query_compiled;
class XeSqlPkg::database_file_size_change;
class XeSqlPkg::natively_compiled_proc_slow_parameter_passing;
class XeSqlPkg::log_pool_memory_status;
class AutoCallPrePostNode<TypeListNode<ExtIntCodeProtector<0>,NullType> >;
class XeSqlPkg::query_rpc_prepare_cmd_set_range;
class XeCloudMinPkg::ping_check;
class XeCloudMinPkg::async_transport_dequeue_message;
class XeSqlPkg::backup_restore_test_delay;
class XeSqlPkg::metadata_delete_global_temp_object;
struct FabricMonitorSLock;
class XeSqlPkg::query_rpc_server_runtime_cache_hit;
struct SbObjectSLock;
class XeSqlPkg::mixed_page_deallocation;
class SpinlockHolder<196,3,1>;
class XeSqlPkg::column_store_index_build_process_segment;
class SpinlockHolder<79,13,1>;
struct _wfinddata32i64_t;
class XeSqlPkg::perfobject_processor;
class XeCMPkg::cma_enlistment_reply_msg_received;
class AutoChangeThreadPriority;
class XeSqlPkg::check_thread_page_io_statistics;
class TCallbackListBase<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >;
class XeCMPkg::cma_shutdown_started;
class XE_SessionCtxtPublishEnum;
class AutoSpinlockHolder<230,1,1>;
struct _OBJECT_TYPE_INFORMATION;
class SpinlockHolder<19,19,1>;
class AutoSpinlockHolder<33,19,1>;
struct MatrixDvmAgentWorkItemListSLock;
class XeSqlPkg::calculate_dop;
class AutoSpinlockHolder<59,16,1>;
class XeSqlPkg::hekaton_sal_error;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>;
class XeSqlPkg::server_max_workers;
class XeSqlPkg::xtp_create_procedure;
class XeSqlPkg::broker_transmission_lazyflusher_processing_begin;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<4>;
class XeSqlPkg::deprecation_announcement;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<2>;
class XeSqlPkg::column_store_code_coverage;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<1>;
class RefCountImpl<XList<SOS_DispatcherBase> >;
struct XE_TypeTraits<XEMessage>;
class XeSqlPkg::oledb_error;
class SpinlockHolder<268,1,1>;
struct TestTeamExponentialTastasSLock;
class XeCloudMinPkg::secondary_failure_report;
class UnfairRecursiveMutexInternal<PaddedSpinlock<SuspendQueueSLock>,0>;
class XeCloudMinPkg::change_secondary;
class Spinlock<328,1,1>;
class SpinlockHolder<183,3,1>;
class XeCloudMinPkg::repl_msg_dispatch;
struct XE_TEvent<4,3,6>;
class SpinlockHolder<260,1,1>;
class CAutoP<SOS_ResourceGroup>;
class TCallback<void,int *,NullType,NullType,NullType>;
class SpinlockHolder<64,16,1>;
class XeSqlPkg::query_execution_spool_secondary_open_before_primary;
struct MatrixOpCollSLock;
class AutoSpinlockHolder<263,1,1>;
class XeSqlPkg::sp_cache_miss;
struct DataPortConsumerSLock;
class XeSqlPkg::queryvm_context_access_int64;
class AutoSpinlockHolder<68,16,1>;
class XeSqlPkg::metadata_cache_vlr_posted;
class TypeListSize<TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class XeSqlPkg::db_lock_acquired_from_cache;
class SpinlockHolder<63,16,1>;
class XeSqlPkg::log_consumer_life;
class SpinlockHolder<111,9,1>;
class Spinlock<190,3,1>;
struct timecaps_tag;
struct RemoteThreadCacheSLock;
class XeSqlPkg::database_cmptlevel_change;
class AutoSpinlockHolder<175,3,1>;
class XeCloudMinPkg::async_transport_connection_error;
struct TICacheSLock;
union _RTL_ELEVATION_FLAGS;
struct _RTC_ALLOCA_NODE;
struct IMDFind;
class Spinlock<108,9,1>;
class XeSqlPkg::database_segment_creation_begin;
class Spinlock<221,2,1>;
class XeSqlPkg::data_initialize_object_initialization;
struct ReplLogReaderHistoryCacheSLock;
struct XE_TEvent<4,0,20>;
struct _complex;
class SpinlockHolder<150,4,1>;
class XeSqlPkg::query_execution_batch_hash_join_spilled;
struct QueryStoreSelfAggSLock;
class TCallbackListBase<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >;
class XeSqlPkg::session_mgr_work_item_end_execution;
class Spinlock<267,1,1>;
class XeSqlPkg::database_agent_request_begin;
class SOSHost_CallExternalTraits;
class XeSqlPkg::hobt_schema_mgr_column;
struct FabricDbMgrPtrSLock;
struct _RTL_HANDLE_TABLE_ENTRY;
struct XactLockInfoSLock;
struct SbDebugListSLock;
class XeSqlPkg::availability_replica_state_change;
struct TransmitterStreamsSLock;
class AutoSpinlockHolder<123,7,1>;
class Spinlock<279,1,1>;
class XeSqlPkg::lock_acquired;
class SpinlockHolder<4,19,1>;
struct _RTL_DEBUG_INFORMATION;
class SpinlockHolder<300,3,1>;
class SpinlockHolder<0,19,1>;
class XeSqlPkg::query_store_persist_on_shutdown_failed;
class Spinlock<336,0,1>;
class XeSqlPkg::remote_dmv_stream_open_server;
struct SecCtxtCacheSLock;
class XeSqlPkg::query_rpc_prepare_cmd_wake_up;
class SpinlockHolder<258,1,1>;
class XeSqlPkg::file_read_completed;
class Spinlock<263,1,1>;
class XeSqlPkg::disk_write_async;
class SEListEnum<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>,0>;
class SpinlockHolder<317,1,1>;
class Spinlock<17,19,1>;
class XeSqlPkg::hadr_filestream_file_close;
class XeSqlPkg::before_natively_compiled_proc_entry_removal_on_drop;
class SOS_IOCompRequestEnum;
class CMemThread<CMemDbg<CMemProc> >;
struct _ALPC_SECURITY_ATTR;
struct _PERF_INSTANCE_DEFINITION;
struct QeShutdownSLock;
class Spinlock<229,1,1>;
struct _CM_INT13_DRIVE_PARAMETER;
class XeSqlPkg::uncached_sql_batch_statistics;
class AutoSpinlockHolder<266,1,1>;
class XeSqlPkg::clustered_columnstore_index_rebuild;
struct _PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA;
struct LogLfmSLock;
class XeSqlPkg::mixed_page_allocation;
struct TransportDestinationSLock;
class TypeListSize<TypeListNode<void *,TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >;
class Spinlock<210,2,1>;
class XeSqlPkg::sp_statement_completed;
class XeSqlPkg::sort_statistics_tracing;
class AutoSpinlockHolder<328,1,1>;
class XeSqlPkg::session_mgr_event_notification_received;
struct If<1,CSerializeContext<CMemBufFormatter>::ElementalSerializer,CSerializeContext<CMemBufFormatter>::GenericSerializer>;
struct ReadaheadSLock;
struct XE_DispQueueSLock;
class XeSqlPkg::query_store_failed_to_load_forced_plan;
struct RemoteSessionHashTableSLock;
class AutoSpinlockHolder<307,1,1>;
struct _PEBS_DS_SAVE_AREA;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
class SpinlockHolder<85,13,1>;
class SQLMemoryReportRowSet;
class SpinlockHolder<229,1,1>;
class XeSqlPkg::fulltext_query_exec_stats;
struct DEKInstanceSLock;
class SpinlockHolder<192,3,1>;
struct TmpSessKeySLock;
class XeSqlPkg::metadata_name_lookup_failed;
class SpinlockHolder<320,1,1>;
class XeSqlPkg::sp_cache_insert;
class TypeListSize<TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > >;
class AutoSpinlockHolder<119,8,1>;
class XeSqlPkg::fulltext_semantic_document_language;
class AutoSpinlockHolder<16,19,1>;
class XeSqlPkg::index_build_extents_allocation;
class Spinlock<163,3,1>;
class XeSqlPkg::glm_release_database_lock_exception;
class CMemPartitioned<CMemThread<CMemDbg<CMemFixed> > >;
class Spinlock<87,12,1>;
class XeSqlPkg::metadata_ddl_alter_column;
struct _PDH_STATISTICS;
class Spinlock<126,7,1>;
struct _MSG_INFO_0;
class SpinlockHolder<287,1,1>;
class MemObjCache<CMemThread<CMemDbg<CMemLargePageObj> > >;
class XeSqlPkg::broker_transmission_object_worktable_load_begin;
class SpinlockHolder<144,4,1>;
class SpinlockHolder<259,1,1>;
class Spinlock<26,19,1>;
struct SqlNormSLock;
class AutoSpinlockHolder<106,9,1>;
struct _RTL_UNICODE_STRING_BUFFER;
class AutoSpinlockHolder<192,3,1>;
class IfNullTypeZeroElseOne<enum Worker::CallbackType>;
class AutoSpinlockHolder<111,9,1>;
struct RemoteOpSLock;
struct SOS_DispatcherSLock;
struct _X86_CALL_FRAME;
struct Pow<10,5>;
struct _RTL_QUERY_DEBUG_INFORMATION_INFO;
class SpinlockHolder<95,11,1>;
struct _TPP_THREAD_DATA_CALLBACK;
class AutoSpinlockHolder<293,1,1>;
class Spinlock<153,3,1>;
struct _ACCESS_INFO_1002;
struct _MODULEINFO;
class Spinlock<58,16,1>;
class AutoSpinlockHolder<128,7,1>;
struct _PLUGPLAY_CONTROL_USER_RESPONSE_DATA;
class Spinlock<123,7,1>;
struct _SESSION_INFO_1;
class Spinlock<299,1,1>;
class Spinlock<134,4,1>;
class Spinlock<63,16,1>;
struct _PERF_OBJECT_TYPE;
class SpinlockHolder<182,3,1>;
struct _SERVER_INFO_1573;
class AutoSpinlockHolder<334,0,257>;
struct _RTL_HEAP_PARAMETERS;
struct _SERVER_INFO_1583;
struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION;
class Spinlock<144,4,1>;
struct _SYSTEM_POWER_INFORMATION;
class SpinlockHolder<30,19,1>;
class Spinlock<326,1,1>;
class SpinlockHolder<72,16,1>;
struct _WKSTA_INFO_1013;
struct _MUILANGLIST;
class XeSosPkg::idle_server_callback_executed;
class XeSosPkg::scheduler_monitor_stalled_dispatcher_ring_buffer_recorded;
struct _XSAVE_VENDORS;
struct _API_SET_NAMESPACE_ARRAY;
class AutoSpinlockHolder<270,1,1>;
class XeSosPkg::scheduler_monitor_deadlock_ring_buffer_recorded;
class XeSosPkg::wait_info_external;
class XeSosPkg::page_heap_memory_allocated;
struct _SERVER_INFO_1560;
class XeSosPkg::non_yielding_iocp_listener_callback_executed;
struct _TP_TASK_CALLBACKS;
class XeSosPkg::stuck_dispatcher_callback_executed;
struct _VM_COUNTERS_EX;
struct _REPARSE_DATA_BUFFER;
class XeSosPkg::non_yielding_rm_callback_executed;
class XeSosPkg::malloc_spy_memory_freed;
struct _FILE_TRACKING_INFORMATION;
class XeSosPkg::spinlock_backoff;
class XeSosPkg::page_allocated;
struct _SYSTEM_WATCHDOG_TIMER_INFORMATION;
class XeSosPkg::non_yielding_scheduler_callback_executed;
class XeSosPkg::task_enqueued;
class XeSosPkg::scheduler_created;
struct _LDR_SERVICE_TAG_RECORD;
struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION;
class XeSosPkg::set_abort_callback_executed;
struct BOID;
class XeSosPkg::spinlock_backoff_warning;
class SEListEnum<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>,0>;
class XeSosPkg::exit_routine_executed;
class XeSosPkg::wait_info;
struct _SEC_OBJECT_ELEMENT;
class XeSosPkg::crt_signal_abort_called;
class XeSosPkg::quantum_thief;
struct ISessionProperties;
class XeSosPkg::async_io_completed;
class XeSosPkg::scheduler_monitor_system_health_ring_buffer_recorded;
class XeSosPkg::function_hook_changed;
class XeSosPkg::scheduler_monitor_non_yielding_rm_ring_buffer_recorded;
class AutoSpinlockHolder<229,1,1>;
class XeSosPkg::scheduler_monitor_non_yielding_iocp_ring_buffer_recorded;
class XeSosPkg::malloc_spy_memory_allocated;
class XeSosPkg::scheduler_monitor_non_yielding_ring_buffer_recorded;
class XeSosPkg::memory_utilization_effect_callback_executed;
class XeSosPkg::async_io_requested;
class XeSosPkg::allocation_failure;
struct _SYSTEM_INTERRUPT_INFORMATION;
class XeSosPkg::large_cache_sweep;
struct CLUSPROP_LARGE_INTEGER;
struct FailPointInfo;
class XeSosPkg::node_affinity_changed;
struct _PORT_DATA_ENTRY;
class SpinlockHolder<181,3,1>;
struct QueryStoreExecStatsReadSLock;
class Spinlock<147,4,1>;
class Spinlock<335,0,1>;
struct _PLUGPLAY_CONTROL_INSTALL_DATA;
struct _FILE_NAMES_INFORMATION;
class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;
class IfNullTypeZeroElseOne<enum SOS_Task::TASK_CALLBACK_TYPE>;
class AutoSpinlockHolder<163,3,1>;
class SpinlockHolder<136,4,1>;
class AutoSpinlockHolder<152,3,1>;
struct CLUSPROP_RESOURCE_CLASS;
class Spinlock<107,9,1>;
struct _USER_INFO_21;
struct FabricObjectRegistrationSLock;
union CLUSPROP_REQUIRED_DEPENDENCY;
class Spinlock<195,3,1>;
struct _SESSION_INFO_502;
class Spinlock<301,1,1>;
struct _USER_MODALS_INFO_1;
class SpinlockHolder<154,3,1>;
struct _SERVER_INFO_1585;
class AutoSpinlockHolder<101,10,1>;
struct _PROCESS_HANDLE_TRACING_ENABLE_EX;
struct _SERVER_INFO_1592;
class SpinlockHolder<214,2,1>;
class AutoSpinlockHolder<300,3,1>;
class Spinlock<244,1,1>;
struct _RTL_BACKOFF;
struct _WKSTA_INFO_1056;
class TypeListSize<TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >;
class Spinlock<10,19,1>;
class Spinlock<141,4,1>;
struct GhostFreeSLock;
class SpinlockHolder<305,1,1>;
struct _MUIREGISTRYINFO;
class AutoSpinlockHolder<40,18,1>;
union _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA;
struct _PERF_COUNTER_BLOCK;
class SpinlockHolder<156,3,1>;
struct _SYSTEM_EXCEPTION_INFORMATION;
class AutoSpinlockHolder<239,1,1>;
struct LogConsolidationSLock;
struct TransportStreamSLock;
class AutoSpinlockHolder<117,8,1>;
class SpinlockHolder<318,1,1>;
class SpinlockHolder<146,4,1>;
struct GhostHashSLock;
class AutoSpinlockHolder<305,1,1>;
class AutoSpinlockHolder<311,1,1>;
struct SptProfileSLock;
class SpinlockHolder<219,2,1>;
struct _RTL_RXACT_LOG;
struct LiveTargetTvfSLock;
class SpinlockHolder<27,19,1>;
struct BackupCopyCtxSLock;
struct _SERVER_INFO_1555;
class AutoSpinlockHolder<67,16,1>;
class TypeListNode<unsigned long *,TypeListNode<SOS_Scheduler * const,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >;
class SpinlockHolder<11,19,1>;
class SpinlockHolder<175,3,1>;
class SpinlockHolder<15,19,1>;
class Spinlock<268,1,1>;
struct XE_TArray<XETarget *,2>;
struct XE_TObjects<XETarget,2>;
struct ServerNiceShutdownSLock;
struct _SYSTEM_FLAGS_INFORMATION;
class SpinlockHolder<315,1,1>;
class AutoSpinlockHolder<22,19,1>;
class SpinlockHolder<296,1,1>;
struct ExtCacheSLock;
struct _USER_INFO_1023;
class Spinlock<32,19,1>;
struct _SERVER_INFO_1525;
class AutoSpinlockHolder<254,1,1>;
class Spinlock<295,1,1>;
struct _CALL_FRAME;
class AutoSpinlockHolder<194,3,1>;
struct MissingIndexStatsKeySLock;
struct _SERVER_INFO_1557;
class Spinlock<243,1,1>;
class ISOSHost_EventAutoImpl;
class XeSqlPkg::hadr_capture_log_block;
struct SEReplPartitionMgrEventListSLock;
class XeSqlPkg::syscommittab_cleanup;
class Spinlock<9,19,1>;
class XeSqlPkg::query_no_cqscan_cache_due_to_memory_limitation;
class AutoSpinlockHolder<3,19,1>;
class XeSqlPkg::hobt_schema_mgr_hobt;
struct TransmitterDestinationsSLock;
class XeSqlPkg::prepare_sql;
class SpinlockHolder<132,5,1>;
class XeSqlPkg::hadr_filestream_log_interpreter;
struct SqlMgrSLock;
class XeSqlPkg::query_remote_memory_post_grant;
class AutoSpinlockHolder<94,11,1>;
class XeSqlPkg::additional_memory_grant;
class Spinlock<44,18,1>;
struct _SYSTEM_BOOT_GRAPHICS_INFORMATION;
class Spinlock<191,3,1>;
struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION;
class TCallbackListBase<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType> >;
struct _SYSTEM_PROCESS_INFORMATION;
class SOS_TRingBufferRecordEnum<SOS_ResourceMonitorRingRecord>;
struct _SYSDBG_IO_SPACE;
class AutoSpinlockHolder<44,18,1>;
class XeSqlPkg::window_spool_ondisk_warning;
class AutoSpinlockHolder<167,3,1>;
struct _CrtMemBlockHeader;
struct SEReplPartitionSLock;
struct _CrtMemState;
class XeSqlPkg::unprepare_sql;
struct LogFlushQSLock;
struct GroupCommitSLock;
class XeSqlPkg::query_scan_startup;
class SpinlockHolder<272,3,1>;
class XeSqlPkg::physical_page_read;
class XeSqlPkg::remove_database_cache;
struct QueryStoreAsyncPersistSLock;
class AutoSpinlockHolder<278,1,1>;
struct XE_TArray<XEDataAttribute,28>;
struct XE_TEvent<4,1,28>;
struct XTPRuntimeDataListSLock;
class AutoSpinlockHolder<32,19,1>;
class XeSqlPkg::hadr_wsfc_change_notifier_event_received;
class AutoSpinlockHolder<96,11,1>;
struct Pow<10,3>;
class AutoSpinlockHolder<8,19,1>;
struct CLUSPROP_ULARGE_INTEGER;
class TObjectPool<TMRUContainer<SystemThread,0>,ObjectPoolSLock>;
struct DbtIoListSLock;
class SpinlockHolder<270,1,1>;
class XeSqlPkg::query_rx_receive_buffers;
class AutoSpinlockHolder<184,3,1>;
class SpinlockHolder<274,4,1>;
class IndirectType<void>;
class XeSqlPkg::hadr_apply_log_block;
class Spinlock<320,1,1>;
class XeSqlPkg::database_mirroring_state_change;
class SpinlockHolder<49,18,1>;
class XeSqlPkg::database_segment_all_files_create;
class XeSqlPkg::checkpoint_db_request;
class Spinlock<266,1,1>;
class XeSqlPkg::drop_file_prepared;
class UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >::Elem;
class XeSqlPkg::thread_cache_remote_context_setup;
class AutoSpinlockHolder<224,2,1>;
struct ReplLogReaderPerDbHistoryCacheSLock;
class XeSqlPkg::commit_tran_completed;
class AutoSpinlockHolder<10,19,1>;
class AutoSpinlockHolder<150,4,1>;
struct _HNODEENUM;
class AutoSpinlockHolder<215,2,1>;
struct IRowsetInfo;
class SpinlockHolder<13,19,1>;
class SpinlockHolder<225,2,1>;
class AutoSpinlockHolder<241,1,1>;
struct _SERVER_INFO_1581;
struct SEReplCSNDBTSSLock;
class XeSqlPkg::hadr_db_partner_set_sync_state;
class TimePriv;
class AutoSpinlockHolder<2,19,1>;
class Spinlock<225,2,1>;
class AutoSpinlockHolder<21,19,1>;
struct DbSeedingOpSLock;
class XeSqlPkg::hadr_db_manager_db_startdb;
class AutoSpinlockHolder<256,1,1>;
struct XcbFreelistSLock;
class XeSqlPkg::dq_session_cache_insert;
class AutoSpinlockHolder<172,3,1>;
class XeSqlPkg::query_memory_return_grant;
class XeSqlPkg::dbtable_initialize;
class XeSqlPkg::broker_transmission_object_worktable_save_begin;
class AutoSpinlockHolder<268,1,1>;
class SpinlockHolder<327,1,1>;
class XeSqlPkg::column_store_filters_pushdown;
struct _PDH_LOG_SERVICE_QUERY_INFO_A;
class SpinlockHolder<149,4,1>;
class Spinlock<75,16,1>;
struct KtmEnlistmentSLock;
class Spinlock<276,1,1>;
struct _RTL_RB_TREE;
struct _FILE_MAILSLOT_SET_INFORMATION;
class SEList<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>,0>;
struct _VM_COUNTERS;
class AutoSpinlockHolder<146,4,1>;
struct _KEY_BASIC_INFORMATION;
class AutoSpinlockHolder<255,1,1>;
class AutoSpinlockHolder<12,19,1>;
class SOSHost_CallInternalTraits;
class XeSqlPkg::iterator_hash_actual_memory;
class Spinlock<27,19,1>;
struct _SYSTEM_VERIFIER_INFORMATION_EX;
class AutoSpinlockHolder<60,16,1>;
struct _REPARSE_INDEX_KEY;
class SpinlockHolder<307,1,1>;
class XeSqlPkg::query_optimizer_cardinality_estimation_step;
struct ISSResSLock;
struct QueryExecStatsSLock;
class Spinlock<125,7,1>;
class XeSqlPkg::recovery_target_reset;
class XeSqlPkg::hadr_cannot_create_listener;
class SpinlockHolder<316,1,1>;
class AutoSpinlockHolder<79,13,1>;
class XeSqlPkg::replica_create_wait_for_peers;
struct LSSsyncDTCSLock;
struct _SERVER_INFO_1515;
class SpinlockHolder<135,4,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<1>;
class SpinlockHolder<123,7,1>;
class XeSqlPkg::lock_timeout_greater_than_0;
class AutoSpinlockHolder<142,4,1>;
class Spinlock<277,1,1>;
struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED;
struct _SHARE_INFO_1;
struct Pow<10,1>;
struct DbccInpBuffSLock;
class XeSqlPkg::promote_tran_completed;
struct _RC_CONFIG;
struct StackHasherSLock;
struct Pow<10,2>;
class SEListEnum<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>,0>;
class XeSqlPkg::query_rpc_switch_partition;
class XeSqlPkg::fulltext_query_translator;
class XeSqlPkg::query_driver_received_statistics_profile;
struct HeartbeatDispatchSLock;
class XeSqlPkg::query_rpc_prepare_cmd_delete_row;
class AutoSpinlockHolder<4,19,1>;
class XeSqlPkg::log_buffer_allocated;
class XeSqlPkg::broker_transmission_deliverysm_action_fire;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<4>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<3>;
class XeGDMPkg::gdma_transaction_local_state_reply_ready;
class Spinlock<177,3,1>;
class Spinlock<274,4,1>;
class XeSqlPkg::hadr_db_manager_db_shutdown;
class XeSqlPkg::glm_local_brick_acquire_response;
class XeGDMPkg::gdm_normal_cycle_early_termination;
class AutoSpinlockHolder<186,3,1>;
struct FsChunkerSLock;
class Spinlock<227,2,1>;
class XeSqlPkg::delete_or_mark_file;
class XeSqlPkg::redo_stop_clear;
class TChildEnumerator<GlobalNodeEnum,SOS_Node,TEnumerator<TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock> >,SOS_DispatcherPoolBase>;
class SpinlockHolder<35,19,1>;
class XeSqlPkg::read_only_route_fail;
class SpinlockHolder<313,1,1>;
struct _HNETINTERFACE;
class CAutoRefc<XList<SOS_DispatcherBase> >;
class AutoSpinlockHolder<92,11,1>;
class XeSqlPkg::query_rpc_process_cmd_set_range;
class AutoSpinlockHolder<126,7,1>;
class AutoSpinlockHolder<149,4,1>;
class SpinlockHolder<162,3,1>;
struct _STRING32;
class AutoSpinlockHolder<208,3,1>;
struct _PDH_LOG_SERVICE_QUERY_INFO_W;
class XeSqlPkg::process_killed_by_abort_blockers;
struct _LDR_DATA_TABLE_ENTRY32;
class Spinlock<285,1,1>;
class XeSqlPkg::modify_file_operation;
class SpinlockHolder<294,1,1>;
class XeSqlPkg::error_reported;
class Spinlock<33,19,1>;
class XeSqlPkg::query_rpc_process_cmd_prepare_to_delete;
class XeSqlPkg::broker_queue_disabled;
class Spinlock<298,1,1>;
class XeSqlPkg::sp_server_diagnostics_component_result;
class Spinlock<258,1,1>;
struct TransportMessageQueueSLock;
class ReduceTypeList<TypeList<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType> >;
class XeSqlPkg::mbr_outcome_resolution;
class Spinlock<35,19,1>;
struct _SL_KMEM_CACHE;
struct OneProcSimReplicaContextSLock;
struct XE_TypeTraits<XEMap>;
class XeSqlPkg::metadata_persist_last_value_for_sequence;
class Spinlock<311,1,1>;
class XeSqlPkg::dq_session_cache_hit;
class Spinlock<77,14,1>;
class SpinlockHolder<106,9,1>;
class SpinlockHolder<16,19,1>;
class XeSqlPkg::collect_all_ExecUdxDataAccess;
class XeSqlPkg::collect_all_GetRow;
class SpinlockHolder<172,3,1>;
class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType> >;
class TCallbackListBase<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >;
class XeSqlPkg::rollback_tran_completed;
class SpinlockHolder<298,1,1>;
class XeSqlPkg::parallel_scan_wait_for_work;
class SpinlockHolder<220,2,1>;
class AutoSpinlockHolder<212,2,1>;
class AutoSpinlockHolder<121,8,1>;
class AutoSpinlockHolder<118,8,1>;
class XeSqlPkg::xfcb_write_complete;
class TypeListNode<__int64 const ,TypeListNode<ResourceClerk const *,TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,NullType> > > >;
class SpinlockHolder<40,18,1>;
class IExecSql;
class XeSqlPkg::sp_server_diagnostics_result_set;
struct SOS_PhysPageCacheSLock;
class XeSqlPkg::metadata_unlock_object;
class SOS_TRingBufferRecordEnum<SOS_GlobalMemoryRecord>;
class SpinlockHolder<69,16,1>;
class XeSqlPkg::dyn_throttle_checkpoint;
class XeSqlPkg::database_startup_begin;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<4>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,SOS_Task *,NullType,NullType,NullType>;
class AutoSpinlockHolder<41,1,1>;
class AutoSpinlockHolder<183,3,1>;
class XeSqlPkg::bad_memory_detected;
class SpinlockHolder<199,3,1>;
class XeSqlPkg::metadata_cache_flush;
class SpinlockHolder<51,17,1>;
class AutoSpinlockHolder<272,3,1>;
class XeSqlPkg::progress_report_online_index_operation;
struct OnDemandTaskSLock;
class XeSqlPkg::metadata_cache_add;
struct FileHandleCacheSLock;
class XeSqlPkg::matrix_unsupported_feature;
class SpinlockHolder<22,19,1>;
struct Pow<10,0>;
class XeSqlPkg::broker_transmission_object_delete_begin;
struct SubpDescListSLock;
class SpinlockHolder<286,1,1>;
class XeSqlPkg::recovery_simple_log_truncate;
class Spinlock<31,19,1>;
struct FreeSpaceCacheEntrySLock;
class AutoSpinlockHolder<244,1,1>;
class XeSqlPkg::latch_acquired;
class AutoSpinlockHolder<6,19,1>;
class SpinlockHolder<115,8,1>;
class SpinlockHolder<262,1,1>;
class SpinlockHolder<158,3,1>;
class IndirectType<Worker>;
class XeSqlPkg::query_memory_buffer_pool_reserve;
struct DigestCacheSLock;
class AutoSpinlockHolder<190,3,1>;
class XeSqlPkg::query_execution_batch_processing_hash_table_build;
class XeSqlPkg::glm_local_brick_acquire_request;
struct MatrixMCISLock;
struct CacheObjDbgSLock;
class EmptyCallTraits;
class SpinlockHolder<306,1,1>;
class Spinlock<0,19,1>;
class XeSqlPkg::cursor_prepare;
struct XactWorkspaceSLock;
class XeSqlPkg::buffer_pool_extension_pages_written;
class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64> >;
class SpinlockHolder<333,0,1>;
class AutoSpinlockHolder<231,2,1>;
class XeSqlPkg::file_handle_in_use;
class AutoSpinlockHolder<49,18,1>;
class SpinlockHolder<227,2,1>;
class AutoSpinlockHolder<139,4,1>;
class XeSqlPkg::ghost_cleanup_task_suspend;
class XeSqlPkg::database_segment_local_creation_begin;
class SpinlockHolder<230,1,1>;
class AutoSpinlockHolder<144,4,1>;
class XeSqlPkg::availability_replica_automatic_failover_validation;
class AutoSpinlockHolder<250,1,1>;
class XeSqlPkg::metadata_add_segmentid;
struct AbrSLock;
class AutoSpinlockHolder<89,12,1>;
class SpinlockHolder<308,1,1>;
class SpinlockHolder<213,2,1>;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>;
class XeSqlPkg::query_rpc_server_recvrequest;
class XeSqlPkg::hadr_send_harden_lsn_message;
class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<3>;
class SpinlockHolder<32,19,1>;
class AutoSpinlockHolder<103,10,1>;
class TCallbackListBase<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >;
class XeSqlPkg::hadr_xrf_deleteRecLsn_beforeEntry;
class XeSqlPkg::broker_active_service_broker_addasb;
class XeSqlPkg::query_driver_received_activation;
struct FIND_BY_SID_DATA;
class XeSqlPkg::hekaton_search_key_event;
class XeSqlPkg::file_write_throttled;
class XeSqlPkg::xfcb_blob_properties_obtained;
class SpinlockHolder<50,17,1>;
class XeSqlPkg::query_execution_spool_open;
struct LsidSLock;
class SpinlockHolder<180,3,1>;
class SpinlockHolder<164,3,1>;
class XeSqlPkg::broker_transmission_object_worktable_load_end;
class SpinlockHolder<206,3,1>;
class XeSqlPkg::ghost_cleanup_task_process_pages_for_db_packet;
class AutoSpinlockHolder<218,2,1>;
class XeSqlPkg::login;
class XeSqlPkg::inaccurate_cardinality_estimate;
struct TransportWorkerSLock;
class ErrorStringHolder;
class AutoSpinlockHolder<189,3,1>;
class XeSqlPkg::oledb_data_read;
class AutoSpinlockHolder<82,13,1>;
struct XE_TypeTraits<XEAction>;
class XeSqlPkg::rpc_completed;
class Spinlock<38,18,1>;
class XeSqlPkg::optimizer_timeout;
class AutoSpinlockHolder<141,4,1>;
class AutoSpinlockHolder<159,3,1>;
class SpinlockHolder<12,19,1>;
class TypeListSize<TypeListNode<SOS_DispatcherBase const * const,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >;
class XeSqlPkg::queryvm_context_shipping;
class AutoSpinlockHolder<292,1,1>;
struct MissingIndexStatsIdSLock;
class UnfairRecursiveMutexInternal<SuspendQueueSLock,1>;
class XeSqlPkg::xtp_offline_checkpoint_scan_stop;
struct SetRangeSyncSLock;
class SOS_TRingBufferRecordEnum<SOS_SchedulerRingRecord>;
class SpinlockHolder<71,16,1>;
class XeSqlPkg::remote_dmv_stream_runtime_cache_added;
class XeSqlPkg::glm_primary_brick_acquire_response;
class AutoSpinlockHolder<115,8,1>;
class SpinlockHolder<267,1,1>;
class UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >::Elem;
struct _RTC_framedesc;
struct _RTC_vardesc;
class SpinlockHolder<304,1,1>;
class SpinlockHolder<209,3,1>;
struct MDChangeNotificationSLock;
class XeSqlPkg::hadr_filestream_undo_inplace_update;
class AutoSpinlockHolder<289,1,1>;
class XeSqlPkg::cursor_close;
class Spinlock<312,1,1>;
class XeSqlPkg::query_rpc_prepare_cmd_fetch_data;
struct ADBCacheListSLock;
class SpinlockHolder<44,18,1>;
class XeSqlPkg::hadr_filestream_corrupt_message;
struct BufHashSLock;
class XeSqlPkg::hadr_ddl_failover_execution_state;
struct HadrFabricFactorySLock;
struct QueryStorePlanListSLock;
class XeSqlPkg::all_files_created;
struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION;
class Spinlock<162,3,1>;
class AutoSpinlockHolder<160,3,1>;
class SpinlockHolder<43,18,1>;
class Spinlock<180,3,1>;
class AutoSpinlockHolder<43,18,1>;
class ReturnValueHolder<void>;
class Spinlock<66,16,1>;
struct _CM_ROM_BLOCK;
class UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >;
struct _FILE_ID_BOTH_DIR_INFORMATION;
class UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >::Elem;
class SpinlockHolder<234,1,1>;
class AutoSpinlockHolder<303,1,1>;
class SpinlockHolder<188,3,1>;
class SpinlockHolder<269,1,1>;
struct LogPoolSharedCacheBufferSLock;
struct _MUTANT_OWNER_INFORMATION;
struct _FILE_PREFETCH;
class SpinlockHolder<148,4,1>;
struct _ALPC_TOKEN_ATTR;
class AutoSpinlockHolder<15,19,1>;
class SpinlockHolder<226,2,1>;
struct TransportSessionSLock;
class SpinlockHolder<207,3,1>;
struct FabricTvfLoadLibSLock;
class SpinlockHolder<90,12,1>;
struct _SERVER_INFO_1550;
class Spinlock<59,16,1>;
struct _JOBOBJECT_WAKE_FILTER;
struct MatrixMCIBatchOrderSLock;
class SpinlockHolder<190,3,1>;
class AutoSpinlockHolder<330,1,1>;
class SEListEnum<TCallback<void,NullType,NullType,NullType,NullType>,0>;
class AutoStateProtectors<SOSHost_CallInternalTraits>;
struct BitManipTraits<unsigned __int64,8>;
struct _FILE_END_OF_FILE_INFORMATION;
class AutoSpinlockHolder<237,1,1>;
class SpinlockHolder<237,1,1>;
class TEnumerator<TList<SOS_Scheduler,SOS_Task,16,TListSLock> >;
struct ITrusteeGroupAdmin;
struct BitManipTraits<unsigned int,0>;
struct _SYSTEM_PAGEFILE_INFORMATION;
struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionWithoutActive;
class SEListEnum<SOS_ParentBlockDescriptor,0>;
class AutoSpinlockHolder<243,1,1>;
struct _FILE_RENAME_INFORMATION;
struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionBase;
struct _SYSTEM_PROCESSOR_POWER_INFORMATION;
struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionWithoutActive;
struct _WKSTA_INFO_1011;
struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionBase;
class TMemoryBlockAllocator<0,65536,524288,8,1>;
struct _SYSTEM_VHD_BOOT_INFORMATION;
struct IGetSession;
struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionBase;
class XeSqlPkg::remote_dmv_stream_runtime_cache_hit;
struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionBase;
struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionWithActive;
class XeSqlPkg::execution_warning;
class XeSqlPkg::broker_transmission_timer_set;
struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition;
struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::AutoReset;
class SEListEnum<SOS_WaitableAddress,48>;
class XeSqlPkg::xfcb_send_complete;
class XeSqlPkg::collect_all_CSQLSourceExecute;
struct _MEMORY_WORKING_SET_EX_INFORMATION;
class CuzzUtil;
class SynchedTask;
class XeSqlPkg::query_rpc_insert_index_row;
struct MemoryObjectFactory::MemObjUsesFree<PageHeapMemObj>;
struct IDBCreateSession;
class XeSqlPkg::iterator_memory_request_calculation;
class XeSqlPkg::glm_lock_acquire_begin;
class XeSqlPkg::recovery_catch_checkpoint;
class XeSqlPkg::hadr_ag_config_data_mutex_acquisition_state;
class CMemThread<CMemDbg<CMemFixed> >;
class XeSqlPkg::metadata_manager_catalog_deleted;
class XeSqlPkg::hadr_online_availability_group_retry_end;
class XeSqlPkg::broker_activation;
class XeSqlPkg::hadr_db_partner_set_policy;
class XeSqlPkg::mbr_lmd_read_backup_group_count;
struct _FILE_ID_FULL_DIR_INFORMATION;
class TEnumerator<TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock> >;
class SEListEnum<DynInterval,0>;
class XeSqlPkg::query_rpc_server_runtime_cache_miss;
class StateProtectorNode<TypeListNode<ExtIntCodeProtector<0>,NullType> >;
class XeSqlPkg::remote_dmv_stream_release_resources_client;
class AutoCallThis<TypeListNode<ExtIntCodeProtector<0>,NullType> >;
class MethodCallBinder_2<long,SOSClient_MemoryNotificationCallback,long (__cdecl SOSClient_MemoryNotificationCallback::*)(enum MemoryNotificationType,unsigned __int64),enum MemoryNotificationType,unsigned __int64>;
struct XE_TEvent<4,4,7>;
class XeSqlPkg::sp_cache_hit;
class XeSqlPkg::batch_hash_join_separate_hash_column;
class SpinlockHolder<278,1,1>;
class SEListEnum<eXcursionEntry,0>;
class SEListEnum<ArmedWaypoint,0>;
class XeSqlPkg::deadlock_monitor_state_transition;
class XeSqlPkg::mixed_extent_activation;
class SEListEnum<XListElem<SOS_DispatcherBase>,0>;
class XeSqlPkg::query_rpc_server_lob_action;
class XeSqlPkg::glm_local_brick_release_response;
class XeSqlPkg::data_initialize_lock_acquired;
class SOS_AutoUnhookDebugBreak;
class XeSqlPkg::hadr_filestream_file_open;
struct ResQueueWaiter;
struct _RTL_CRITICAL_SECTION32;
class SEListEnum<ResQueueWaiter,0>;
struct _USER_INFO_4;
struct XE_TArray<XETarget *,0>;
struct XE_TObjects<XETarget,0>;
struct _USER_INFO_1005;
struct IGetSourceRow;
struct XE_TArray<XEEvent *,64>;
struct XE_TObjects<XEEvent,64>;
struct _LINK_TRACKING_INFORMATION;
struct XE_TMap<6>;
struct XE_TMap<931>;
struct _INVERTED_FUNCTION_TABLE;
struct XE_TMap<5>;
struct XE_TMap<2>;
struct _SERVER_INFO_1521;
struct _LOCALGROUP_MEMBERS_INFO_3;
class XeDvmPkg::dvm_state_error;
class DmpPointer<void * (__cdecl*)(void *)>;
class DmpPointer<void * __cdecl(void *)>;
class DumpTListIterator<TList<NodeManager,SOS_Node,16,TListSLock>,512>;
struct _FILE_VALID_DATA_LENGTH_INFORMATION;
struct _SYSTEM_THREAD_INFORMATION;
struct _SYSTEM_EXTENDED_THREAD_INFORMATION;
class DmpListIterator<SOS_Scheduler,8,8,SEList<SOS_Scheduler,8>,8,512>;
struct CLUSTER_SET_PASSWORD_STATUS;
struct _SERVER_INFO_1518;
class DumpSEListIterator<SEList<CFixedInfo,16>,512>;
class DmpListIterator<CFixedInfo,8,16,SEList<CFixedInfo,16>,8,512>;
struct _PROCESS_MITIGATION_POLICY_INFORMATION;
struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA;
class DumpTListIterator<TList<SOS_Node,SystemThread,160,TListSLock>,65535>;
struct _KSPIN_LOCK_QUEUE;
class DumpSEListIterator<SEList<SystemThread,160>,65535>;
class DmpPointer<SOS_Ticks<InterruptTicks<unsigned __int64>,-3> >;
class DmpPointer<SEList<SOS_ResourcePool,0> >;
class DmpListIterator<SOS_ResourcePool,8,0,SEList<SOS_ResourcePool,0>,8,512>;
struct _USER_MODALS_INFO_0;
class DmpListIterator<SOS_ResourceGroup,8,16,SEList<SOS_ResourceGroup,16>,8,512>;
struct _SERVER_INFO_1574;
class DmpPointer<SchedulerManager>;
class DmpPointer<SEList<Worker,16> >;
struct _WNF_PUBLISH_DESCRIPTOR;
struct _EXFAT_STATISTICS;
struct _SYSTEM_CALL_TIME_INFORMATION;
class DumpSEShortStackIterator<SEShortStack<SOS_ExternalAutoWait,6> >;
class DmpPointer<SOS_ExternalAutoWait>;
struct BitOrdinal<1024>;
class XeCloudMinPkg::request_throttled;
class TTemplateInfo<1253,1024>;
struct BitOrdinal<262144>;
class TTemplateInfo<1332,1024>;
struct TClassName<_GUID,1,0>;
class TTemplateInfo<1209,1024>;
struct BitOrdinal<8192>;
class XeCloudMinPkg::async_transport_corrupted_message;
struct TClassName<unsigned __int64,1,0>;
struct BitOrdinal<4>;
struct OSFTraceFlagMapping;
struct BitOrdinal<8>;
struct BitOrdinal<64>;
class XeCloudMinPkg::update_appproperties;
struct BitOrdinal<256>;
struct BitOrdinal<131072>;
struct TClassName<__int64,1,0>;
struct TClassName<bool,1,0>;
class XeCloudMinPkg::secondary_commit_log_flush;
class XeCloudMinPkg::ping_submit_to_ucs;
struct XE_TTarget<6>;
struct XE_TObjects<XEAction,10>;
struct XE_TArray<XEMessage *,55>;
struct XE_TObjects<XEMessage,55>;
class XeCloudMinPkg::secondary_start_replicated_transaction;
struct XE_TTarget<5>;
struct XE_TObjects<XEType,28>;
class XeCloudMinPkg::become_nothing;
class XeCloudMinPkg::serepl_constructor_call;
class CAutoRg<XE_AutoP<XEPackage0::BucketizingTarget::Entry> >;
class CAutoRg<XEPackage0::RingTarget::EventTypeEntry>;
class XeCloudMinPkg::catchup_request_from_secondary;
class CAutoP<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > >;
struct _RTL_RELATIVE_NAME_U;
struct _CONTEXT_CHUNK;
struct _FILE_LINK_INFORMATION;
struct _FILE_ALLOCATION_INFORMATION;
struct _RTL_PROCESS_LOCKS;
class CAutoBase<XEPackage0::RingTarget::EventTypeEntry>;
struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_2600;
struct _OBJECT_NAME_INFORMATION;
class XE_AutoP<XEPackage0::BucketizingTarget::Entry>;
union _POWER_STATE;
struct SortedList<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>::Index;
class CAutoBase<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> >;
class SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator>;
struct _IO_SESSION_CONNECT_INFO;
class XEPackage0::XE_LiveWriter::MetadataBlockEntry;
struct IDBBinderProperties;
struct _FILESHARE_CHANGE_LIST;
class TSinglyLinkedList<XE_EngineLocator::EngineModule>;
struct XEPackage0::CollectCurrentThreadIdAction;
struct _CLUS_SHARED_VOLUME_BACKUP_MODE;
struct XEPackage0::CurrentThreadPredicateSource;
struct XE_TObjects<XEMap,6>;
class XEPackage0::XE_LiveTarget;
struct XEPackage0::IsAllOnPredicateComparator;
class XEPackage0::NullEvent;
struct _EXPLICIT_ACCESS_W;
struct XEPackage0::DebugBreakAction;
struct XACTSTATS;
struct XEPackage0::CollectCPUCycleCountAction;
struct _SERVER_INFO_1543;
struct _RTL_BITMAP_RUN;
class XEPackage0::StringCompare<unsigned short,1>;
struct _RTL_STACK_CONTEXT_ENTRY;
struct tagDBPROPIDSET;
struct _HCHANGE;
struct CLUSPROP_BINARY;
struct CLUSPROP_SCSI_ADDRESS;
class XEPackage0::XE_ETWMofStream;
class CAutoRg<XEPackage0::EventTraceQueryProperties>;
class MatchedPackage;
class SEListEnum<XEPackage0::SourceColumn,0>;
class SEHashIter<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>;
class SEListEnum<XEPackage0::OrphanEntry,0>;
struct _PLUGPLAY_NOTIFY_HDR;
struct _PLUGPLAY_CUSTOM_NOTIFICATION;
struct _JOURNAL_CLIENT_INFORMATION;
class SortedListEnum<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>;
struct _SECTIONBASICINFO;
class CAutoP<XEPackage0::RingTarget>;
struct _SERVER_INFO_1546;
struct tagDBINDEXCOLUMNDESC;
struct _SYSTEM_POOL_INFORMATION;
struct XE_EngineLocator::EngineModule;
struct _SYSTEM_PROCESSOR_IDLE_INFORMATION;
struct _CM_DISK_GEOMETRY_DEVICE_DATA;
struct _FILE_SET_SPARSE_BUFFER;
struct _CM_RESOURCE_LIST;
struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY;
struct _PLUGPLAY_CONTROL_CONFLICT_LIST;
struct _SERVER_INFO_1537;
struct XE_TArray<XEMap *,5>;
struct _SERVER_INFO_1597;
struct _SHARE_INFO_1004;
struct _SERVER_INFO_1593;
struct tagERRORINFO;
struct _ACTRL_ACCESS_ENTRY_LISTA;
struct _FILE_PIPE_EVENT_BUFFER;
struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION;
struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
struct _SYSTEM_PREFETCH_PATCH_INFORMATION;
struct _FILE_FS_VOLUME_INFORMATION;
struct _GENERATE_NAME_CONTEXT;
struct _ATOM_BASIC_INFORMATION;
struct _SE_AUDIT_INFO;
struct _RTL_CRITICAL_SECTION_DEBUG64;
struct _SERVER_INFO_1578;
struct _MUILANGINFO;
struct _CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT;
struct _SESSION_INFO_0;
struct _SYSDBG_CONTROL_SPACE;
struct _FAT_STATISTICS;
struct _SYSTEM_PROCESS_INFORMATION_EXTENSION;
struct _WKSTA_INFO_1050;
struct _CPTABLEINFO;
struct _HCLUSENUM;
struct _THREAD_BASIC_INFORMATION;
struct _USER_MODALS_INFO_3;
struct _REPL_IDIR_INFO_0;
struct _NLSTABLEINFO;
struct _ACTRL_CONTROL_INFOA;
class IsArray<CSessionTraceFlags>;
struct _USER_INFO_1018;
struct _RTL_TRACE_BLOCK;
struct _HCLUSTER;
union CLUSPROP_BUFFER_HELPER;
struct CLUSPROP_RESOURCE_CLASS_INFO;
struct XE_TObjects<XEEvent,402>;
struct _FILE_PIPE_ASSIGN_EVENT_BUFFER;
struct PROCESSOR_IDLE_TIMES;
struct _SESSION_INFO_2;
class SEList<XListElem<XE_EventEntry>,0>;
class SEList<XListEnumerator<XE_EventEntry>,0>;
class XList<XE_EventEntry>;
struct _FILE_FULL_DIR_INFORMATION;
struct _TRIPLE_LIST_ITERATOR;
struct _TRIPLE_LIST;
struct ImgDelayDescrV2;
struct _CM_PNP_BIOS_INSTALLATION_CHECK;
struct _CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS;
class TypeListSize<TypeListNode<void * const,TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > > > >;
struct _HRESOURCE;
struct _AE_NETLOGON;
struct _USE_INFO_4;
struct _SERVER_INFO_1568;
struct _FILE_FS_CONTROL_INFORMATION;
struct _AE_UASMOD;
class XE_Callback;
struct _WKSTA_INFO_1041;
struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT;
struct _REPL_EDIR_INFO_2;
struct IsElemental<unsigned int>;
struct _RTL_AVL_ENTRY;
struct _SERVER_INFO_1602;
struct XE_TArray<XEMap *,4>;
struct XE_TObjects<XEMap,4>;
struct _SYSTEM_PROCESSOR_INFORMATION;
struct SerializeControl<RPCStream,0>;
struct _SYSTEM_HANDLE_INFORMATION_EX;
struct _SERVER_INFO_1528;
struct _RTL_TRACE_ENUMERATE;
struct _ERRLOG_OTHER_INFO;
class DmpSEListIterator<SESListSized<XEPackage0::RingTarget::EventEntry,0>,2000>;
struct _REPL_EDIR_INFO_1;
struct _INITIAL_TEB;
struct CLUS_NETNAME_IP_INFO_ENTRY;
struct _IO_ERROR_LOG_MESSAGE;
class SEList<XE_TargetEntry,40>;
class XE_TargetEntry;
struct _OBJECTS_AND_NAME_W;
struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;
class DmpPointer<XEType>;
struct _THREAD_PERFORMANCE_DATA;
struct _FILESYSTEM_STATISTICS;
struct _EISA_IRQ_CONFIGURATION;
struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION;
struct _SERVER_INFO_1562;
struct _KEY_VALUE_ENTRY;
struct tagDBPROPINFOSET;
struct _CONNECTION_INFO_0;
struct _SERVER_INFO_598;
struct _PO_WAKE_SOURCE_FIXED;
struct _SYSTEM_WORKINGSET_ENTRY;
struct _NET_VALIDATE_OUTPUT_ARG;
class IAutoXactFactory;
struct tagDBVECTOR;
struct _FILE_FS_FULL_SIZE_INFORMATION;
struct _USER_INFO_24;
struct _SYSTEM_DEVICE_DATA_INFORMATION;
struct _LDR_IMPORT_CALLBACK_INFO;
struct _FILE_FS_LABEL_INFORMATION;
struct _KLOCK_QUEUE_HANDLE;
struct _IO_RESOURCE_LIST;
struct _SERVER_INFO_1579;
struct _WKSTA_INFO_1057;
class XESQLFailPointBaseEvent<XeSqlPkg::recovery_redo_failpoint>;
struct _WKSTA_INFO_1046;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<2>;
struct _LOCALGROUP_INFO_1002;
struct _USER_MODALS_INFO_1001;
struct _FILE_PATH;
struct XE_TObjects<XEEvent,14>;
struct _PROCESS_CYCLE_TIME_INFORMATION;
struct _SERVER_INFO_503;
class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>;
class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>;
struct _STD_ALERT;
struct _WKSTA_INFO_1033;
struct $_s__RTTIBaseClassArray$_extraBytes_8;
struct _FILE_FULL_EA_INFORMATION;
struct _SECTION_IMAGE_INFORMATION64;
struct _THREAD_PROFILING_INFORMATION;
struct _RTL_HEAP_TAG;
struct _AE_RESACCESSREJ;
struct _RTL_ANSI_STRING_BUFFER;
class XeDvmPkg::dvm_work_item_end_execution;
class XeDvmPkg::dvm_work_item_start_execution;
class XeDvmPkg::dvm_activated;
struct _CLUS_CSV_SWPRV_RESPONSE;
struct tagDBFAILUREINFO;
struct _SERVER_INFO_1567;
struct _FN_OBJECT_MGR_FUNCTIONS;
struct _KLDR_DATA_TABLE_ENTRY64;
struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT;
struct _HREGBATCHPORT;
struct tagDBPROPSET;
struct _SYSTEM_HIBERFILE_INFORMATION;
struct _RTL_HANDLE_TABLE;
struct _USER_INFO_1024;
struct _USE_INFO_0;
struct _RTL_PROCESS_MODULE_INFORMATION_EX;
struct _USER_INFO_1052;
struct _RTL_RESOURCE;
union _PROCESS_AFFINITY_UPDATE_MODE;
struct _PROCESS_HANDLE_INFORMATION;
struct _SERVER_INFO_1600;
struct _USER_MODALS_INFO_2;
struct _WKSTA_USER_INFO_1101;
struct _PAGE_PRIORITY_INFORMATION;
struct _WKSTA_INFO_1023;
struct _CLIENT_ID64;
class DmpPointer<enum XEEngineDiagnosticLevel>;
struct _CLUS_DISK_NUMBER_INFO;
struct _SHARE_INFO_1503;
class XeCloudMinPkg::add_partition;
class CAutoP<IAutoSetXLvlIntCtxt>;
class CAutoSetXLvlIntCtxt;
class XeCloudMinPkg::prepare_full_commit_mode;
class XeCloudMinPkg::serepl_destructor_call;
class XeCloudMinPkg::kill_user_transactions;
class DmpPointer<XEPackageMetadata>;
class XeCloudMinPkg::async_transport_lost_message;
class XeCloudMinPkg::perfobject_cloud_partitions;
class XeCloudMinPkg::copy_to_secondary_complete;
class XeCloudMinPkg::physical_seeding_copy_from_primary_complete;
class XeCloudMinPkg::secondary_process_rollback_transaction;
class XeCloudMinPkg::return_csn;
class XeCloudMinPkg::shared_pool_session_killed;
class XeCloudMinPkg::secondary_commit_wait;
class XeCloudMinPkg::async_transport_send_message;
class XeCloudMinPkg::create_queue_snapshot;
class CAutoBase<XE_Timer>;
class XeCloudMinPkg::prepare_shutdown;
class XeCloudMinPkg::async_transport_disconnect;
class XeCloudMinPkg::remove_partition;
class XeCloudMinPkg::primary_commit_wait;
class XeCloudMinPkg::primary_send_rollback_transaction;
struct _EXCEPTION_LOG;
struct _SYSTEM_MEMORY_CHANNEL_INFORMATION;
struct _COVERAGE_SECTION_HEADER;
struct _PROCESS_HANDLE_TABLE_ENTRY_INFO;
struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
struct _KEY_VALUE_BASIC_INFORMATION;
struct _SERVER_INFO_1548;
struct _MSA_INFO_0;
struct _NET_VALIDATE_PASSWORD_RESET_INPUT_ARG;
struct _AE_RESACCESS;
struct _EISA_PORT_DESCRIPTOR;
struct _CM_FLOPPY_DEVICE_DATA;
struct _ACTRL_ALISTW;
struct _LEARNING_MODE_OBJECT_INFORMATION;
struct _LOCALGROUP_MEMBERS_INFO_2;
class XeCMPkg::cma_enlistment_no_reply_recieved;
struct _SYSTEM_CODEINTEGRITY_INFORMATION;
struct _USER_INFO_1006;
struct _SERVER_INFO_1516;
struct IDBInfo;
struct tagDBCOLUMNINFO;
struct _LDR_FAILURE_DATA;
struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION;
class XeCMPkg::cm_enlistment_close_msg_received;
struct _SERVER_INFO_101;
struct _JOURNAL_ABSOLUTE_INFORMATION;
struct tagDB_NUMERIC;
struct _CLUSTER_BATCH_COMMAND;
struct _PLEX_READ_DATA_REQUEST;
struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION;
struct XE_TArray<XEMap *,126>;
struct _SERVICE_INFO_0;
struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS;
struct _PROCESS_WINDOW_INFORMATION;
struct _THREAD_TEB_INFORMATION;
struct _USER_INFO_1007;
struct _POOLED_USAGE_AND_LIMITS;
class XeSqlPkg::redo_stop_set;
class XeSqlPkg::glm_primary_brick_release_request;
class XeSqlPkg::query_rpc_prepare_cmd_set_data;
class XeSqlPkg::parallel_producer_open;
class XeSqlPkg::parallel_scan_range_created;
class XeSqlPkg::hadr_db_manager_backup_sync_msg;
class XeSqlPkg::parallel_scan_readahead_fixup;
class XeSqlPkg::page_compression_tracing;
class XeSqlPkg::column_store_rowgroup_readahead_issued;
class XeSqlPkg::fulltext_reorganize_progress;
class XeSqlPkg::index_description_unpin;
class XeSqlPkg::query_remote_memory_pre_grant;
class XeSqlPkg::mbr_redo_target_age;
class XeSqlPkg::broker_transmission_deliverysm_event_begin;
class XeSqlPkg::begin_tran_starting;
class XeSqlPkg::drop_file_rollback;
class XeUcsPkg::ucs_transmitter_reclassify;
class XeSqlPkg::bitmap_data_finalize;
class XeSqlPkg::full_text_crawl_stopped;
class XeSqlPkg::hadr_apply_vlfheader;
class XeSqlPkg::log_cache_write_block;
struct tagDBPARAMBINDINFO;
class XeSqlPkg::hekaton_api_failure_injection;
class XeSqlPkg::hadr_transport_flow_control_action;
class XeSqlPkg::metadata_version_update;
class XeSqlPkg::broker_dialog_transmission_queue_dequeue;
class XeSqlPkg::long_io_detected;
struct _AE_CLOSEFILE;
class XeSqlPkg::thread_cache_context_shipping;
class XeSqlPkg::log_cache_buffer_refcounter_change;
class XeSqlPkg::cpu_threshold_exceeded;
class XeSqlPkg::query_rpc_prepare_cmd_goto_marker;
class XeSqlPkg::broker_corrupted_message;
class XeSqlPkg::dq_session_cache_remove;
class XeSqlPkg::query_execution_batch_hash_aggregation_finished;
class XeSqlPkg::module_end;
class XeSqlPkg::connectivity_ring_buffer_recorded;
class XeSqlPkg::dq_session_cache_flush;
class XeSqlPkg::missing_join_predicate;
class XeSqlPkg::query_post_execution_showplan;
class XeSqlPkg::sort_state_change_tracing;
class XeSqlPkg::metadata_cache_hit;
class XeSqlPkg::minlog_doubleflush_failpoint;
class XeSqlPkg::metadata_delete_local_temp_object;
class XeSqlPkg::hadr_tds_synchronizer_payload_skip;
class XeSqlPkg::redo_worker_exit;
class XeSqlPkg::file_recreate_failure;
class XeSqlPkg::query_compile_prepared;
class XeSqlPkg::hadr_filestream_processed_block;
class XeSqlPkg::lock_cancel;
class XeSqlPkg::query_rpc_process_cmd_delete_row;
class XeSqlPkg::query_rpc_prepare_cmd_set_range_with_cached_keys;
class XeSqlPkg::query_rpc_go_dormant;
class XeSqlPkg::query_rpc_insert_row;
class XeSqlPkg::hadr_transport_route_message;
class XeSqlPkg::broker_transmission_object_delete_end;
class XeSqlPkg::columnstore_tuple_mover_end_compress;
class XeSqlPkg::security_cache_database_object_insert;
class XeSqlPkg::mbr_protocol;
class XeSqlPkg::query_driver_received_activation_not_fully_populated;
class XeSqlPkg::background_job_error;
class XeSqlPkg::hadr_filestream_directory_create;
class XeSqlPkg::profile_compile_time;
class XeSqlPkg::host_task_ring_buffer_recorded;
class XeSqlPkg::bad_memory_fixed;
class XeSqlPkg::attention;
class XeSqlPkg::oiblob_cleanup_end;
class XeSqlPkg::unmatched_filtered_indexes;
class XeSqlPkg::security_error_ring_buffer_recorded;
class XeSqlPkg::hadr_online_availability_group_first_attempt_failure;
class XeCMPkg::cma_started;
class XeSqlPkg::query_rpc_prepare_cmd_set_marker;
class XeSqlPkg::ioaff_node_summary;
class XeSqlPkg::alter_table_update_data;
struct XBitmap<StaticStorage<402> >;
class XeSqlPkg::broker_transmission_timer_fire;
class XeSqlPkg::latch_acquire_time;
class XeSqlPkg::query_rpc_prepare_cmd_prepare_to_delete;
class XeSqlPkg::logconsolidation_sectors_moved_to_data;
class XeSqlPkg::file_read_enqueued;
class XeSqlPkg::xtp_db_page_allocation_disallowed;
class SQLMemoryReportText;
class XeSqlPkg::trace_print;
class XeSqlPkg::sort_memory_grant_adjustment;
class XeSqlPkg::query_rpc_release_accessor;
class XeSqlPkg::database_migrate_to_matrix;
struct XACTOPT;
class XeSqlPkg::filestream_file_io_failure;
class XeSqlPkg::deprecation_final_support;
class XeSqlPkg::broker_transmission_object_get;
class XeSqlPkg::query_rpc_set_cardinality;
class XeSqlPkg::log_block_persistence_reset;
class XeSqlPkg::packet_enqueued;
class XeSqlPkg::recovery_target_miss;
class XeSqlPkg::database_agent_local_operation_end;
class XeSqlPkg::security_cache_database_object_removal;
class XeSqlPkg::disk_log_read;
class XeSqlPkg::bitmap_memory_preferred;
class XeSqlPkg::metadata_ddl_drop_column;
class XeSqlPkg::hadr_backup_on_sec_test_point;
class XeSqlPkg::query_rpc_process_cmd_goto_marker;
struct IRowsetFind;
class XeSqlPkg::deadlock_monitor_perf_stats;
class XeSqlPkg::sql_transaction;
class XeSqlPkg::recovery_redo_failpoint;
class XeSqlPkg::exec_prepared_sql;
class XeSqlPkg::metadata_database_mdversion_updated;
class XeSqlPkg::check_thread_page_latch_statistics;
class XeSqlPkg::metadata_create_local_temp_object;
class XeSqlPkg::cdc_session;
class XeSqlPkg::parallel_scan_resume_range_generation;
class XeSqlPkg::xtp_db_page_allocation_allowed;
class XeSqlPkg::log_flush_retry;
class XeSqlPkg::new_log_interest_flip;
class XeSqlPkg::perfobject_process;
class XeSqlPkg::fulltext_reorganize_phase1_destination_fragment;
class XeSqlPkg::ual_instrument_called;
class XeSqlPkg::hadr_wsfc_change_notifier_start_ag_specific_notifications;
class XeSqlPkg::remote_dmv_stream_get_rows_server;
class XeSqlPkg::logreader_process_text_info;
class XeSqlPkg::glm_acquire_table_lock_exception;
class XeSqlPkg::security_cache_database_cleanup;
class XeSqlPkg::log_block_consume;
class XeSqlPkg::hadr_ar_manager_starting;
class XeSqlPkg::lock_deadlock;
class XeSqlPkg::xml_deadlock_report;
struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION;
class XeSqlPkg::query_optimizer_estimate_cardinality;
class XeSqlPkg::hadr_transport_ucs_connection_info;
class XeSqlPkg::parallel_scan_readahead_advance;
class XeSqlPkg::hadr_ar_manager_mutex_acquisition_state;
class XeSqlPkg::query_rpc_process_cmd_set_data;
class XeSqlPkg::glm_lock_release_end;
class XeSqlPkg::scan_stopped;
class XeSqlPkg::all_database_segments_create;
class XeSqlPkg::begin_tran_completed;
class XeSqlPkg::query_rpc_process_cmd_get_data;
class XeSqlPkg::glm_primary_brick_acquire_request;
class XeSqlPkg::query_rpc_server_collection_cache_hit_no_key;
class XeSqlPkg::plan_guide_successful;
class XeSqlPkg::file_write_completed;
class XeSqlPkg::log_block_cache;
struct _FILE_STREAM_INFORMATION;
class XeSqlPkg::metadata_manager_catalog_inserted;
class XeSqlPkg::degree_of_parallelism;
class XeSqlPkg::assembly_load;
class XeSqlPkg::parallel_scan_upper_level_readahead;
class XeSqlPkg::hadr_transport_replica_send_primary_info_cancelled;
class XeSqlPkg::hadr_transport_dump_config_message;
class XeSqlPkg::query_rpc_locate_or_insert_row;
class XeSqlPkg::query_rx_send_activation;
class XeSqlPkg::transaction_log;
class XeSqlPkg::xtp_deploy_done;
class XeSqlPkg::database_ddl_stmt_start;
class XeSqlPkg::drop_database_metadata_remove;
class XeSqlPkg::check_thread_message_statistics;
class XeSqlPkg::constant_page_corruption_detected;
class XeSqlPkg::broker_dialog_transmission_body_enqueue;
struct _PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA;
class XeSqlPkg::sec_ekm_provider_called;
class XeSqlPkg::logical_filegroup_create;
class XeSqlPkg::repl_event;
class XeSqlPkg::query_rpc_create_accessor;
class XeSqlPkg::bitmap_runtime_trace;
class XeSqlPkg::qn_parameter_table;
class XeSqlPkg::replica_create_start;
class XeSqlPkg::query_scan_shutdown;
class XeSqlPkg::log_consumer_read_ahead;
class XeSqlPkg::recovery_unit_metadata_create;
class XeSqlPkg::query_rx_sending_buffers;
class XeSqlPkg::metadata_initiate_lock_object;
class XeSqlPkg::query_memory_post_grant;
class XeSqlPkg::log_io_complete;
class XeSqlPkg::query_rpc_server_runtime_cache_insert;
class XeSqlPkg::replica_destroy_start;
class XeSqlPkg::hadr_auto_page_repair_test_point;
class XeSqlPkg::metadata_lock_object;
class XeSqlPkg::brick_files_metadata_remap;
class XeSqlPkg::broker_forwarded_message_sent;
struct XE_TEvent<3,0,17>;
class XeSqlPkg::perfobject_system;
struct XE_TEvent<3,0,24>;
class XeSqlPkg::perfobject_logicaldisk;
class XeSqlPkg::queryvm_context_access_cdbandsetopts;
class XeSqlPkg::cursor_implicit_conversion;
class XeSqlPkg::database_segment_creation_end;
class XeSqlPkg::selective_xml_index_no_compatible_sql_type;
class XeSqlPkg::hadr_db_manager_filemetadata_request;
class XeSqlPkg::hadr_evaluate_readonly_routing_info;
class XeSqlPkg::query_driver_received_rows_affected;
class XeSqlPkg::query_instance_cache_remote_insert;
class XeSqlPkg::metadata_agent_catalog_updated;
class XeSqlPkg::cursor_execute;
class XeSqlPkg::hadr_sql_instance_to_node_map_entry_deleted;
class XeSqlPkg::diag_quantum_end;
class XeSqlPkg::redo_target_set;
class XeSqlPkg::modify_file_name;
class XeSqlPkg::query_compile_initialized;
class XeSqlPkg::hadr_transport_replica_after_sending_build_replica_message_on_primary;
class XeSqlPkg::collect_all_HkProcFExecute;
class XeSqlPkg::cdc_error;
class XeSqlPkg::query_driver_cache_remove;
class XeSqlPkg::query_remote_memory_skip_small_grant;
class XeSqlPkg::session_mgr_work_item_start_execution;
class XeSqlPkg::hadr_capture_compressed_log_cache;
class XeSqlPkg::query_memory_pre_grant;
class XeSqlPkg::hadr_db_manager_api;
class XeSqlPkg::glm_primary_brick_undo_exception;
class XeSqlPkg::app_domain_ring_buffer_recorded;
class XeSqlPkg::selective_xml_index_path_not_indexed;
class XeSqlPkg::parallel_scan_range_returned;
class XeSqlPkg::module_start;
class XeSqlPkg::page_reference_tracker;
class XeSqlPkg::backup_restore_startlsn_recorded;
class XeSqlPkg::broker_message_classify;
class XeSqlPkg::column_store_segment_eliminate;
class XeSqlPkg::query_rpc_sendrequest;
class XeSqlPkg::prelogin_traceid;
class XeSqlPkg::qn_template;
class XeSqlPkg::query_rpc_fetch_row_by_key_value;
class XeSqlPkg::hadr_filestream_message_file_write;
struct XE_TEvent<4,2,12>;
class XeSqlPkg::sql_statement_completed;
class XeSqlPkg::ioaff_scan_end;
class XeSqlPkg::broker_transmission_lazyflusher_submit;
class XeSqlPkg::missing_column_statistics;
class XeSqlPkg::data_initialize_object_return;
class XeSqlPkg::hadr_ar_api_call;
class XeSqlPkg::log_generate_stall;
class XeSqlPkg::query_execution_generic_trace;
class XeSqlPkg::qn_subscription;
class XeSqlPkg::mixed_extent_allocation;
class XeSqlPkg::query_execution_batch_hash_children_reversed;
class XeSqlPkg::remote_dmv_stream_blob_fetch_server;
class XeSqlPkg::query_rpc_end_update;
class XeSqlPkg::expression_compile_stop_batch_processing;
class XeSqlPkg::mbr_tmd_read_common_restore_age;
class XeSqlPkg::filestream_file_write_completion;
class XeSqlPkg::broker_transmission_lazyflusher_remove;
class XeSqlPkg::full_text_crawl_started;
class XeSqlPkg::query_rpc_set_range;
class XeSqlPkg::session_recoverable_state_change;
class XeSqlPkg::broker_mirrored_route_state_changed;
class XeSqlPkg::hobt_schema_mgr_hobt_attributes;
class XeSqlPkg::blocked_process_report;
class XeSqlPkg::latch_released;
class XeSqlPkg::hadr_db_manager_user_control;
class XeSqlPkg::hadr_modify_listener_port;
class XeSqlPkg::ioaff_scan_worker_start;
class XeSqlPkg::database_creation_dbid_reserve;
class XeSqlPkg::mbr_resolution_counts;
class XeSqlPkg::like_unittest;
class XeSqlPkg::filestream_file_io_dump;
class XeSqlPkg::recovery_force_oldest_page;
class XeSqlPkg::hadr_filestream_file_flush;
class XeSqlPkg::file_added_in_database;
class XeSqlPkg::lock_released;
class XeSqlPkg::buffer_pool_extension_pages_evicted;
class XeSqlPkg::xtp_offline_checkpoint_before_harden_complete;
class XeSqlPkg::broker_forwarded_message_dropped;
class XeSqlPkg::latch_suspend_begin;
class XeSqlPkg::mbr_lmd_read_group_backupset_guid;
class XeSqlPkg::sql_statement_starting;
class XeSqlPkg::failed_hresult_msg;
class XeSqlPkg::buffer_pool_eviction_thresholds_recalculated;
class XeSqlPkg::lock_request_priority;
class XeSqlPkg::glm_primary_brick_undo_response;
class XeSqlPkg::column_store_object_pool_hit;
class XeSqlPkg::sql_statement_plan_shipped;
class XeSqlPkg::query_rpc_create_col_accessor;
class XeSqlPkg::hadr_db_commit_mgr_set_policy;
class XeSqlPkg::log_block_move;
class XeSqlPkg::all_database_segments_drop;
class XeSqlPkg::replica_create_local_complete;
class XeSqlPkg::query_rx_send_buffers;
class XeSqlPkg::parallel_scan_pause_range_generation;
class XeSqlPkg::session_mgr_work_item_dequeued;
class XeSqlPkg::xfcb_request_opened;
class XeSqlPkg::hadr_database_flow_control_action;
class XeSqlPkg::hadr_capture_vlfheader;
class XeSqlPkg::alwayson_ddl_executed;
class XeSqlPkg::disk_log_read_ignore;
class XeSqlPkg::query_execution_switch_partition;
class _RTL_CONSTANT_STRING_remove_const_template_class<1>;
struct _SYSDBG_BUS_DATA;
struct ITransactionOptions;
struct _NET_DISPLAY_GROUP;
struct _PREFIX_TABLE;
struct _PREFIX_TABLE_ENTRY;
struct _GROUP_INFO_1002;
struct _REQUEST_RAW_ENCRYPTED_DATA;
struct _ACCESS_INFO_0;
struct _RTL_TIME_ZONE_INFORMATION;
struct If<1,CSerializeContext<RPCStream>::ElementalSerializer,CSerializeContext<RPCStream>::ClassSerializer>;
struct _USER_INFO_23;
struct _WKSTA_INFO_502;
struct _ALPC_PORT_CALLBACK_INFORMATION;
struct _USER_INFO_0;
struct _ACTRL_PROPERTY_ENTRYA;
struct _SYSTEM_OBJECT_INFORMATION;
struct _FILE_FS_SIZE_INFORMATION;
struct _PO_WAKE_SOURCE_DEVICE;
struct _KEY_CONTROL_FLAGS_INFORMATION;
struct CLUSPROP_FTSET_INFO;
struct _USE_INFO_1;
struct _AE_ACLMOD;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX;
struct _USER_INFO_1013;
struct _RTL_CRITICAL_SECTION_DEBUG32;
struct _FILE_INFO_2;
struct _WKSTA_INFO_1018;
struct IsElemental<CSessionTraceFlags>;
struct _WKSTA_INFO_302;
struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION;
struct _TOKEN_SECURITY_ATTRIBUTE_V1;
struct CLUS_RESOURCE_CLASS_INFO;
struct _FILE_PIPE_REMOTE_INFORMATION;
struct IRowsetIndex;
struct _FILE_FS_SECTOR_SIZE_INFORMATION;
struct _USER_INFO_1011;
struct ICommandPrepare;
struct _ALPC_BASIC_INFORMATION;
struct _SERVER_INFO_1561;
struct IRowChange;
struct _CREATE_CLUSTER_CONFIG;
struct _SERVER_INFO_1582;
struct _SYSTEM_REGISTRY_QUOTA_INFORMATION;
struct _AE_SESSPWERR;
struct _DISPATCHER_CONTEXT;
struct IRegisterProvider;
struct _PROCESSOR_POWER_INFORMATION;
struct _LDR_SECTION_INFO;
struct _GROUP_INFO_1005;
struct _FILE_ALLOCATED_RANGE_BUFFER;
struct ITransactionOutcomeEvents;
struct _FILE_DIRECTORY_INFORMATION;
struct _EX_WNF_SUBSCRIPTION;
struct _SYSTEM_BOOT_LOGO_INFORMATION;
struct _USER_INFO_20;
struct tagDBTIME;
struct _NETLOGON_INFO_1;
struct _SHARE_INFO_502;
struct _USER_MODALS_INFO_1003;
struct _SERVER_INFO_1529;
struct IAlterIndex;
struct _SYSTEM_NUMA_PROXIMITY_MAP;
struct _JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION;
struct XBitmap<StaticStorage<83> >;
struct _CM_PCCARD_DEVICE_DATA;
struct _USER_INFO_1014;
struct _SERVER_INFO_1591;
struct IBindResource;
struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION;
struct _REPL_EDIR_INFO_1000;
struct _finddata32i64_t;
struct _SERVER_INFO_1522;
struct _AE_GENERIC;
struct _RTL_UNLOAD_EVENT_TRACE;
struct _ATOM_TABLE_INFORMATION;
struct _SERVER_INFO_1577;
struct _BOOT_ENTROPY_NT_RESULT;
struct _EISA_MEMORY_CONFIGURATION;
struct _PROCESS_BASIC_INFORMATION64;
struct _FILE_REMOTE_PROTOCOL_INFORMATION;
struct _SERVER_INFO_1501;
struct _UNICODE_PREFIX_TABLE;
struct _PROCESS_SESSION_INFORMATION;
struct IDBAsynchStatus;
struct _USER_INFO_22;
struct _WKSTA_INFO_100;
struct _SYSTEM_CONTEXT_SWITCH_INFORMATION;
struct _CONTEXT_EX;
struct _SYSTEM_DEVICE_INFORMATION;
struct _FLS_DATA;
struct _GROUP_INFO_2;
struct _TRUSTEE_ACCESSA;
struct _GROUP_USERS_INFO_1;
struct _SERVER_INFO_1514;
struct _WKSTA_INFO_1052;
struct _MEMORY_COMBINE_INFORMATION;
struct _WKSTA_USER_INFO_0;
struct _CLUS_PROVIDER_STATE_CHANGE_INFO;
struct IsElemental<int>;
struct _FILE_COMPRESSION_INFORMATION;
struct _MSG_INFO_1;
struct _OBJECTS_AND_NAME_A;
struct _SERVER_INFO_1510;
struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION;
struct _JOURNAL_CREATE_DELETE_KEY_INFORMATION;
struct IRowsetNotify;
struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION;
struct _KEY_WRITE_TIME_INFORMATION;
struct _FILE_OBJECTID_INFORMATION;
struct _RTL_USER_PROCESS_INFORMATION64;
struct _PROCESS_HANDLE_TRACING_ENTRY;
struct _PROCESS_HANDLE_TRACING_QUERY;
struct _REPL_INFO_1003;
struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA;
struct CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL;
struct _AE_ACCLIM;
struct _SERVER_INFO_1506;
struct _JOBOBJECT_WAKE_INFORMATION;
struct KEY_PID_ARRAY;
struct _KEY_OPEN_SUBKEYS_INFORMATION;
struct IMultipleResults;
struct _LOCALGROUP_INFO_1;
struct IRowsetUpdate;
struct _LOCALGROUP_USERS_INFO_0;
struct IColumnsInfo2;
struct IErrorRecords;
struct _SYSTEM_VERIFIER_FAULTS_INFORMATION;
struct _ALPC_DATA_VIEW_ATTR;
struct _CM_PNP_BIOS_DEVICE_NODE;
struct _PLUGPLAY_CONTROL_TARGET_RELATION_DATA;
struct _REPL_EDIR_INFO_0;
struct _PO_WAKE_SOURCE_HISTORY;
struct _FILE_NUMA_NODE_INFORMATION;
struct IRowsetResynch;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _CSTRING;
struct _PROCESS_DEVICEMAP_INFORMATION;
struct _RTL_PROCESS_BACKTRACES_CONTROL;
struct _USER_MODALS_INFO_1007;
struct ITransactionJoin;
struct _PROCESS_DEVICEMAP_INFORMATION_EX;
struct _CLUSTER_DISKID;
struct _SERVER_INFO_1566;
class XESQLFailPointBaseEvent<XeSqlPkg::user_event>;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION;
struct _CM_MONITOR_DEVICE_DATA;
struct _PORT_DATA_INFORMATION;
struct ITableDefinition;
struct _ALPC_HANDLE_ATTR;
struct _USER_INFO_3;
struct _ACCESS_LIST;
struct _COVERAGE_UNLOADED_MODULE_ENTRY;
struct tagDBDATE;
struct _RTLP_PROCESS_REFLECTION_CONTEXT;
struct _SERVER_INFO_1016;
struct _AE_SRVSTATUS;
struct IDBCreateCommand;
struct _KEY_FULL_INFORMATION;
struct _SYSTEM_BASIC_INFORMATION;
struct _FILE_SFIO_VOLUME_INFORMATION;
struct _HEAP_BLOCK_SETTABLE_INFORMATION;
struct _KLDR_DATA_TABLE_ENTRY32;
struct _WKSTA_INFO_1061;
struct _FILE_PIPE_PEEK_BUFFER;
class XeCMPkg::cm_activate_manager_completed;
class XeCMPkg::cma_update_msg_received;
class XeCMPkg::cm_change_matrix_state;
class XeCMPkg::cm_quiesce_started;
class XeCMPkg::cm_enlistment_sent_reply;
class XeCMPkg::cma_release_started;
class XeCMPkg::cma_msg_handler_invoked;
class XeCMPkg::cma_agent_msg_received;
class XeCMPkg::cm_brick_no_valid_reply_received;
class XeCMPkg::cm_matrix_error_reported;
class XeCMPkg::cm_enlistment_started;
class XeCMPkg::cma_notify_manager_completed;
class XeCMPkg::cm_stopped;
class XeCMPkg::cm_reconfig_completed;
class XeCMPkg::cma_local_force_close;
class XeCMPkg::cm_quiesce_agent_started;
class XeCMPkg::cma_notify_manager_started;
class XeCMPkg::cma_enable_msg_received;
class XeCMPkg::cm_initialize_manager;
class XeCMPkg::cma_shutdown_invoked;
class XeCMPkg::cm_release_agent_started;
class XeCMPkg::cm_thread_started;
class XeCMPkg::cma_placement_msg_received;
class XeCMPkg::cm_initialize_started;
class XeCMPkg::cm_notify_brick_up;
class XeCMPkg::cma_activate_started;
class XeCMPkg::cma_main_completed;
class XeCMPkg::cm_enlistment_stopped;
class XeCMPkg::cma_initialize_agent;
class XeCMPkg::cma_quiesce_agent;
class XeCMPkg::cma_evict_mci_sessions;
class XeCMPkg::cm_reconfig_started;
class XeCMPkg::cma_initialize_completed;
class XeCMPkg::cma_roster_brick_info;
class XeCMPkg::cma_retire_msg_received;
class XeCMPkg::cm_add_brick_completed;
class XeCMPkg::cm_activate_manager;
class XeCMPkg::cm_quiesce_agent_completed;
class XeCMPkg::cma_enlistment_created;
class XeCMPkg::cm_started;
class XeCMPkg::cm_quiesce_completed;
class XeCMPkg::cm_transition_online_started;
class XeCMPkg::cma_invalid_configuration;
class XeCMPkg::cma_created;
class XeCMPkg::cma_enlistment_started;
class XeCMPkg::cma_state_msg_received;
class XeCMPkg::cma_quiesce_started;
class XeCMPkg::cma_activate_agent;
class XeCMPkg::cma_main_started;
class XeCMPkg::cm_initialize_completed;
class XeCMPkg::cma_enlistment_stopped;
class XeCMPkg::cma_brick_shutdown_msg_received;
class XeCMPkg::cm_evict_brick;
class XeCMPkg::cma_announce_roster_info;
class XeCMPkg::cm_activate_agent_started;
class XeCMPkg::cm_activate_started;
class XeCMPkg::cm_release_wait_for_enlistment;
class XeCMPkg::cm_quiesce_manager;
class XeCMPkg::cm_online_event;
class XeCMPkg::cma_matrix_reconfig_msg_processed;
class XeCMPkg::cma_roster_info;
class XeCMPkg::cma_announce_msg_received;
class XeCMPkg::cm_enable_msg_sent;
class XeCMPkg::cm_quiesce_manager_completed;
class XeCMPkg::cm_enlistment_join_msg_received;
class XeCMPkg::cma_change_agent_state;
class XeCMPkg::cm_matrix_error_received;
class XeCMPkg::cma_time_msg_received;
class XeCMPkg::cma_create_brick_error;
class XeCMPkg::cm_enlistment_brick_evicted;
class XeCMPkg::cma_shutdown_msg_received;
class XeCMPkg::cm_activate_manager_started;
class XeCMPkg::cm_release_agent_completed;
class XeCMPkg::cma_stopped;
class XeCMPkg::cma_shutdown_completed;
class XeCMPkg::cma_initialize_started;
class XeCMPkg::cm_new_failure_request;
class XeCMPkg::cm_enlistment_created;
class XeCMPkg::cm_activate_completed;
class XeCMPkg::cma_channel_msg_received;
class XeCMPkg::cm_new_enlistment_request_processed;
class XeCMPkg::cm_master_boot_page_updated;
class XeCMPkg::cma_matrix_reconfig_msg_received;
class XeCMPkg::cma_release_agent;
class XeCMPkg::cm_main_started;
class XeCMPkg::cm_exit_started;
class XeCMPkg::cma_activate_agent_completed;
class XeCMPkg::cm_release_started;
class XeCMPkg::cma_release_completed;
class XeCMPkg::cma_quiesce_completed;
class XeCMPkg::cm_enlistment_brick_joined;
class XeCMPkg::cma_activate_completed;
class XeCMPkg::cm_initial_enlistment_completed;
class XeCMPkg::cm_release_completed;
class XeCMPkg::cma_manager_msg_received;
class XeCMPkg::cm_release_manager_completed;
class XeCMPkg::cm_main_completed;
class XeCMPkg::cm_enlistment_state;
class XeCMPkg::cm_reconfig_failed;
class XeCMPkg::cm_announce_msg_sent;
class XeCMPkg::cm_retire_msg_sent;
class XeCMPkg::cm_quiesce_manager_started;
class XeCMPkg::cm_add_brick_reservation_completed;
class XeCMPkg::cma_enlistment_state;
class XeCMPkg::cm_release_manager_started;
class XeCMPkg::cm_change_manager_state;
class XeCMPkg::cm_matrix_reconfig_notification_sent;
class XeCMPkg::cma_enlistment_request_send;
class XeCMPkg::cm_transition_online_completed;
class XeCMPkg::cm_activate_agent_completed;
class XeCMPkg::cma_manager_notify_msg_received;
class XeCMPkg::cma_enlistment_initialized;
struct XE_TObjects<XEEvent,83>;
struct _PLUGPLAY_CONTROL_CONFLICT_STRINGS;
struct _SHARE_INFO_1006;
struct _SERVER_INFO_1554;
struct _LOCALGROUP_MEMBERS_INFO_1;
struct _SERVER_INFO_1553;
struct IAccessor;
struct _HREGREADBATCH;
struct _FILE_PREFETCH_EX;
struct _finddata32_t;
struct CLUS_NETNAME_PWD_INFO;
struct ISecurityInfo;
struct ITmNodeName;
struct _FILE_FS_ATTRIBUTE_INFORMATION;
struct _SERVICE_INFO_2;
struct _MUICCHEADER;
struct _SYSTEM_VDM_INSTEMUL_INFO;
struct _SERVER_INFO_100;
struct _SERVER_INFO_1535;
struct IRowsetRefresh;
struct ICreateRow;
struct IChapteredRowset;
struct CLUS_MAINTENANCE_MODE_INFO;
struct _PATHNAME_BUFFER;
struct _ALPC_SERVER_INFORMATION;
struct _SYSTEM_DPC_BEHAVIOR_INFORMATION;
struct CLUSTER_SHARED_VOLUME_STATE_INFO;
struct _EISA_DMA_CONFIGURATION;
struct _RTL_GENERIC_TABLE;
struct _CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_3_INPUT;
struct CLUSTERVERSIONINFO;
struct CLUS_DNN_SODAFS_CLONE_STATUS;
struct _SYSTEM_LOOKASIDE_INFORMATION;
struct _SERVER_INFO_402;
struct _SERVER_INFO_1010;
struct _MUTANT_BASIC_INFORMATION;
struct _SYSTEM_FILECACHE_INFORMATION;
struct _SERVER_INFO_1534;
struct tagDBTIMESTAMP;
struct _KEY_SET_VIRTUALIZATION_INFORMATION;
struct _FILE_FS_DEVICE_INFORMATION;
struct _PS_CREATE_INFO;
struct _ALPC_CONTEXT_ATTR;
struct _API_SET_VALUE_ARRAY;
struct _CLUS_CSV_VOLUME_NAME;
struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION;
struct XE_TArray<XEMap *,1>;
struct XE_TObjects<XEMap,1>;
struct _WKSTA_INFO_1059;
struct _MEMORY_REGION_INFORMATION;
struct If<1,CSerializeContext<CMemBufFormatter>::ElementalSerializer,CSerializeContext<CMemBufFormatter>::ClassSerializer>;
struct _SYSTEM_NUMA_INFORMATION;
struct _RTL_UNLOAD_EVENT_TRACE64;
struct _KEY_NODE_INFORMATION;
struct IConvertType;
struct _SERVER_INFO_1005;
struct _RTL_HEAP_TAG_INFO;
struct _USER_INFO_11;
struct _HLOG;
struct _WNF_UPDATE_DESCRIPTOR;
struct SerializeControl<RPCStream,1>;
struct IViewFilter;
struct IRowsetScroll;
struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION;
struct _FILE_FS_OBJECTID_INFORMATION;
struct _SYSTEM_FIRMWARE_TABLE_HANDLER;
struct _SYSTEM_FIRMWARE_TABLE_INFORMATION;
struct _WKSTA_INFO_1010;
struct _AE_CONNSTART;
struct _TP_DEBUG_FREE_INFO;
struct _SYSDBG_PHYSICAL;
struct _SERVER_INFO_1523;
struct _SYSTEM_MEMORY_LIST_INFORMATION;
struct TClassId<CSessionTraceFlags>;
struct _ACTRL_ALISTA;
struct _TIMER_BASIC_INFORMATION;
struct _SERVER_INFO_1541;
struct _SERVER_INFO_1576;
struct _SERVER_INFO_1587;
struct _WKSTA_INFO_1047;
class IsArray<unsigned int>;
struct _WORKER_FACTORY_BASIC_INFORMATION;
class CFormatSpec;
struct IColumnsRowset;
struct _SERVER_INFO_1545;
struct IRowSchemaChange;
struct _CLUSTER_VALIDATE_PATH;
struct _PLUGPLAY_CONTROL_PROPERTY_DATA;
struct _SERVER_INFO_1596;
struct _HARDWARE_COUNTER;
class XeUcsPkg::ucs_connection_rejected_by_proxy_whitelist;
class XeUcsPkg::ucs_change_notification;
class XeUcsPkg::ucs_connection_corrupt_message;
class XeUcsPkg::ucs_connection_flow_control;
class XeUcsPkg::ucs_transmitter_service_reclassify;
class XeUcsPkg::ucs_transmitter_service_session;
class XeUcsPkg::ucs_connection_recv_io;
class XeUcsPkg::ucs_proxy_route_add;
class XeUcsPkg::ucs_proxy_send_proxy_connect_message;
class XeUcsPkg::ucs_proxy_route_disable;
class XeUcsPkg::ucs_task_periodic_work;
class XeUcsPkg::ucs_proxy_route_refresh;
class XeUcsPkg::ucs_transmitter_stream_update;
class XeUcsPkg::ucs_connection_send_io;
class XeUcsPkg::ucs_connection_send_msg;
class XeUcsPkg::ucs_transport_periodic_work;
class XeUcsPkg::ucs_transmitter_destination_event;
class XeUcsPkg::ucs_connection_state_machine;
class XeUcsPkg::ucs_proxy_receive_proxy_connect_message;
class XeUcsPkg::ucs_connection_recv_msg;
class XeUcsPkg::ucs_connection_setup;
class XeUcsPkg::ucs_transmitter_destination_connect;
class XeUcsPkg::ucs_transmitter_destination_process;
class XeUcsPkg::ucs_transmitter_periodic_work;
class XeUcsPkg::ucs_task_idempotent;
class XeUcsPkg::ucs_transmitter_destination_service;
class XeUcsPkg::ucs_proxy_connect_next_hop;
struct _REMOTE_PORT_VIEW;
struct _CLUS_CSV_SWPRV_INFO;
struct _SECURITY_SEED_AND_LENGTH;
struct _SERVER_INFO_1502;
struct XACTTRANSINFO;
struct _SERVER_INFO_1533;
struct _PROCESS_EXTENDED_BASIC_INFORMATION64;
struct ICommandText;
struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION;
struct _RTL_UMS_COMPLETION_LIST;
struct _RTL_UMS_CONTEXT;
struct _THREAD_UMS_INFORMATION;
struct _USER_INFO_1009;
struct _PS_STD_HANDLE_INFO;
struct _RTL_BITMAP_EX;
struct _USER_INFO_1012;
struct _PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA;
struct _WKSTA_INFO_1028;
struct _WKSTA_INFO_1042;
struct _CLUSTER_TASK_INFO;
struct _FILE_DISPOSITION_INFORMATION;
struct _FILE_PIPE_WAIT_FOR_BUFFER;
struct _CLUS_STORAGE_REMAP_DRIVELETTER;
class XESQLFailPointBaseEvent<XeSqlPkg::minlog_doubleflush_failpoint>;
struct _SERVER_INFO_1588;
struct _IO_STATUS_BLOCK32;
struct _AE_LOCKOUT;
struct _CM_KEYBOARD_DEVICE_DATA;
struct _SYSTEM_ERROR_PORT_TIMEOUTS;
struct XE_TObjects<XEMap,126>;
struct _JOURNAL_TRANSACTION_BOUNDARY_INFORMATION;
struct IsElementalHelper<unsigned long>;
struct _WKSTA_INFO_101;
struct _JOBOBJECT_FREEZE_INFORMATION;
struct _SERVER_INFO_1552;
struct _CM_SONIC_DEVICE_DATA;
struct IGetDataSource;
struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION;
struct NTFS_EXTENDED_VOLUME_DATA;
struct STARTING_LCN_INPUT_BUFFER;
struct VOLUME_BITMAP_BUFFER;
struct STARTING_VCN_INPUT_BUFFER;
struct NTFS_FILE_RECORD_OUTPUT_BUFFER;
struct FIND_BY_SID_OUTPUT;
struct CREATE_USN_JOURNAL_DATA;
struct READ_USN_JOURNAL_DATA;
struct USN_RECORD;
struct USN_JOURNAL_DATA;
struct DELETE_USN_JOURNAL_DATA;
struct MARK_HANDLE_INFO;
struct MARK_HANDLE_INFO32;
struct BULK_SECURITY_TEST_DATA;
struct POWER_STATE_NOTIFY_HANDLER;
struct RTL_ACE_DATA;
struct CLUSTER_TASK_ENUM;
class _RTL_CONSTANT_STRING_remove_const_template_class<2>;
struct _SERVER_INFO_1512;
struct If<1,CSerializeContext<RPCStream>::NativeTypeFormatter,CSerializeContext<RPCStream>::CharTypeFormatter>;
struct _LDR_VERIFY_IMAGE_INFO;
struct _SERVER_INFO_1539;
class XESQLFailPointBaseEvent<XeSqlPkg::hadr_auto_page_repair_test_point>;
struct IScopedOperations;
struct _IO_RESOURCE_REQUIREMENTS_LIST;
struct _ALPC_PORT_COMPLETION_LIST_INFORMATION;
struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION;
struct _SERVER_INFO_1590;
struct StaticStorage<28>;
struct ICommandWithParameters;
struct _TEB_ACTIVE_FRAME_EX;
struct _SERVER_INFO_403;
struct MOVE_FILE_RECORD_DATA;
class XeGDMPkg::gdm_message_enqueued;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_edge_released;
class XeGDMPkg::gdma_workloop_entered;
class XeGDMPkg::gdm_serialized_gwfg;
class XeGDMPkg::gdm_normal_cycle_progress;
class XeGDMPkg::gdma_gwfg_fragment_reply_ready;
class XeGDMPkg::gdm_resources_released;
class XeGDMPkg::gdm_transaction_id_list_message_ready;
class XeGDMPkg::gdm_deadlock_resolution_request_ready;
class XeGDMPkg::gdm_request_ready;
class XeGDMPkg::gdma_initialized;
class XeGDMPkg::gdm_message_wait_ended;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_initialized;
class XeGDMPkg::gdm_quiesced;
class XeGDMPkg::gdm_normal_cycle_began;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_vertex_allocated;
class XeGDMPkg::gdm_reply_wait_ended;
class XeGDMPkg::gdma_message_wait_began;
class XeGDMPkg::gdma_transaction_local_state_information;
class XeGDMPkg::gdma_lwfg_vertex_to_xact_proxy_map;
class XeGDMPkg::gdm_message_wait_began;
class XeGDMPkg::gdm_workloop_entered;
class XeGDMPkg::gdma_transaction_local_stability_reply_ready;
class XeGDMPkg::gdm_workloop_exited;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_reset;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_edge_pool_expanded;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_vertex_released;
class XeGDMPkg::gdm_initialized;
class XeGDMPkg::gdm_activated;
class XeGDMPkg::gdma_message_wait_ended;
class XeGDMPkg::gdm_normal_cycle_ended;
class XeGDMPkg::gdm_reply_wait_began;
class XeGDMPkg::gdma_resources_released;
class XeGDMPkg::gdma_lwfg_buffer_get_lwfg;
class XeGDMPkg::gdma_workloop_exited;
class XeGDMPkg::gdma_lwfg_buffer_state_transition;
class XeGDMPkg::gdma_lwfg_buffer_initialized;
class XeGDMPkg::gdm_message_dequeued;
class XeGDMPkg::gdma_lwfg_buffer_reset;
class XeGDMPkg::gdma_task_to_transaction_id_map;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_vertex_pool_expanded;
class XeGDMPkg::gdma_message_enqueued;
class XeGDMPkg::gdma_quiesced;
class XeGDMPkg::gdma_lwfg_buffer_object_allocator_edge_allocated;
class XeGDMPkg::gdma_message_dequeued;
struct _PS_CPU_QUOTA_SET_INFORMATION;
struct NTFS_VOLUME_DATA_BUFFER;
struct _SYSTEM_MEMORY_INFORMATION;
struct IMDDataset;
struct _GROUP_INFO_1;
struct CLUS_PARTITION_INFO;
struct CLUS_PARTITION_INFO_EX;
struct IRowPosition;
struct IObjectAccessControl;
struct SUcsEndpointInfo;
struct _SHARE_INFO_501;
struct If<1,CSerializeContext<RPCStream>::ElementalSerializer,CSerializeContext<RPCStream>::GenericSerializer>;
struct MFT_ENUM_DATA;
struct IsElementalHelper<unsigned int>;
struct _ACTRL_OVERLAPPED;
struct _OBJECT_TYPES_INFORMATION;
struct _WKSTA_USER_INFO_1;
struct _SEC_OBJECT;
class CSqlProfSupport;
struct IRowsetLocate;
struct _MOVE_FILE_DATA32;
struct _SYSTEM_REF_TRACE_INFORMATION;
struct __finddata64_t;
struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_BASIC;
struct _SERVER_INFO_1595;
struct TClassIdHelper<CSessionTraceFlags,0>;
struct NTFS_FILE_RECORD_INPUT_BUFFER;
struct ITransactionCloner;
class XePerfPkg::collect_cycles_fetchnextcolumnbatch;
class XePerfPkg::collect_all_fetchnextcolumnbatch;
class XePerfPkg::collect_insts_fetchnextcolumnbatch;
struct IViewChapter;
struct _SERVER_INFO_1569;
struct _SYSDBG_TRIAGE_DUMP;
struct _SYSTEM_PLATFORM_BINARY_INFORMATION;
struct IMDRangeRowset;
struct ITransactionObject;
struct IsElementalHelper<int>;
struct _FILE_STANDARD_LINK_INFORMATION;
class XeTCMPkg::tcm_xact_background_end_xact_thread_commit_order_recd;
class XeTCMPkg::tcm_mgr_age_forget_end;
class XeTCMPkg::tcm_agent_commit_order_sent;
class XeTCMPkg::tcm_mgr_age_forget_begin;
class XeTCMPkg::tcm_mgr_age_hardened;
class XeTCMPkg::tcm_mgr_age_broadcast;
class XeTCMPkg::tcm_xact_root_state_transition;
class XeTCMPkg::tcm_mgr_commit_order_received;
class XeTCMPkg::tcm_xact_commit_order_to_be_sent;
class XeTCMPkg::tcm_agent_xact_root_commit;
struct _BOOT_OPTIONS;
struct MOVE_FILE_DATA;
struct CLUS_CSV_PARTITION_INFO_EX;
struct _WKSTA_INFO_1060;
struct SerializeControl<CMemBufFormatter,0>;
struct _COMPRESSED_DATA_INFO;
struct _SYSTEM_TIMEOFDAY_INFORMATION;
struct _EISA_PORT_CONFIGURATION;
struct _CM_EISA_FUNCTION_INFORMATION;
struct UcsTraceFlagMapping;
struct _PRINT_OTHER_INFO;
class XESQLFailPointBaseEvent<XeSqlPkg::progress_report_online_index_operation>;
struct _SYSTEM_HOTPATCH_MODULE_QUERY_PARAMETERS;
struct _SL_HWID_DEVICE_INFO;
struct CLUS_FORCE_QUORUM_INFO;
struct _SERVER_INFO_1565;
struct IDBInitialize;
struct IRowPositionChange;
struct ICommandPersist;
struct IsElemental<unsigned long>;
struct If<0,CSerializeContext<CMemBufFormatter>::ElementalSerializer,CSerializeContext<CMemBufFormatter>::ClassSerializer>;
struct XBitmap<StaticStorage<28> >;
class CAutoMalloc<unsigned char>;
struct _RTL_STACK_CONTEXT;
struct _SERVER_TRANSPORT_INFO_0;
struct IIndexDefinition;
class IErrorReportingManager;
class CFormattedParams;
struct POWER_STATE_HANDLER;
struct _REPL_INFO_1001;
struct _KEY_FLAGS_INFORMATION;
struct CLUS_FTSET_INFO;
struct tagDBPARAMINFO;
class SQLMemoryReport;
struct _CM_VIDEO_DEVICE_DATA;
struct _OBJECT_HANDLE_FLAG_INFORMATION;
struct _LDR_DATA_TABLE_ENTRY64;
struct IErrorLookup;
struct ITableDefinitionWithConstraints;
struct IDBAsynchNotify;
struct RETRIEVAL_POINTERS_BUFFER;
struct CLUS_STARTING_PARAMS;
struct IDBProperties;
struct XE_TObjects<XEMap,5>;
struct CSessionTraceFlags::SerializableVersionInternal<CSessionTraceFlags>;
class TClassInfo<CSessionTraceFlags>;
struct TClassInfo<CSessionTraceFlags>::NoopSetter;
struct TClassFactory<CSessionTraceFlags,0>;
class DS_CONFIG;
class IServerConfiguration;
struct _INST_ID;
class ICallerParse;
class COptExpr;
class CAutoClearXVariant;
class CXVariant;
class CTypeInfo;
class DBTABLE;
class BaseXact;
struct DBTableFactory;
struct GlobalDbId::SerializableVersionInternal<GlobalDbId>;
class GlobalDbId;
struct GlobalDbId::ClassName;
class IMetadataAccess;
struct MetadataFactory;
class CImageHelper;
class DefaultAutoXactFactory;
class XDES;
class RecoveryUnit;
class SimpleXact;
class IFederatedXact;
class IAutoReadOnlyXact;
class CAutoP<IAutoReadOnlyXact>;
class AutoReadOnlyXact;
class FederatedXactId;
class CAutoBase<IAutoSimpleXact>;
class DefaultAutoReadOnlyXact;
class DefaultAutoSimpleXact;
class CSession;
class CBatch;
class ITaskProxy;
class GDMDeadlockParticipant;
class CDiagThreadSafe;
class CAutoRestoreTaskProxy;
class XactWorkspace;
class IAutoSetupExecContextsForInternalTasksImpl;
class IAutoSetXLvlIntCtxt;
class CAutoInstallTaskProxy;
class CAutoP<IAutoSetupExecContextsForInternalTasksImpl>;
class CAutoSetupExecContextsForInternalTasks;
class CAutoBase<IAutoSetupExecContextsForInternalTasksImpl>;
class CAutoBase<IAutoSetXLvlIntCtxt>;
class SOS_CacheUserExtensionBase;
struct SOS_CacheUserExtensionBase::ClassName;
struct SOS_CacheUserExtensionBase::SerializableVersionInternal<SOS_CacheUserExtensionBase>;
class TClassInfo<SOS_CacheUserExtensionBase>;
struct TClassInfo<SOS_CacheUserExtensionBase>::NoopSetter;
struct TClassFactory<SOS_CacheUserExtensionBase,1>;
class SqlDkHost_IStartupShutdown;
class CFeatureSwitchesBitArray<82>;
struct FeatureSwitchesMessage;
class CFeatureSwitches::CFeatureSwitchesNotifications;
struct CFeatureSwitches::FeatureDetails;
class CFeatureSwitches;
struct CFeatureSwitches::FeatureInfo;
class CFeatureSwitches_Iterator;
struct SpecialFormatSpecs;
class CRawLogDumper;
class tracestreambuf;
class TypeListSize<TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > > >;
class CAutoRefc<XE_PackageEntry>;
class XE_ActualTargetEntry;
class CAutoRefc<XE_ModuleEntry>;
class XE_ObjectLocalStorage;
class XE_PackageEntry;
class XE_ModuleEntry;
struct XE_ActualTargetEntry::FailureCallbackContext;
class XE_PredicateValue;
class SEListEnum<XListEnumerator<XE_TargetEntry>,0>;
class SEList<XListEnumerator<XE_TargetEntry>,0>;
class XListEnumerator<XE_TargetEntry>;
class CAutoRefc<XList<XE_TargetEntry> >;
class CAutoRg<CAutoRefc<XList<XE_TargetEntry> > >;
class CAutoRefc<XList<XE_EventEntry> >;
class CAutoRefc<XE_PackagesHolder>;
class SEList<XE_EventEntry,32>;
class XE_SessionTimerEntry;
class SEList<XE_AssocMemory::Entry,0>;
class XE_AssocMemory;
class XE_Session;
struct XE_AlignedArray<XE_Buffer *>::Element;
union XE_Buffer::BufferControl;
struct XE_Buffer::SpinStatistics;
class XE_Buffer;
class SEList<XListElem<XE_TargetEntry>,0>;
class XList<XE_TargetEntry>;
class XE_PackagesHolder;
class SEList<XE_ITimerEntry,16>;
class CAutoRefc<SOSHost_Task>;
class XE_Timer;
class TypeListSize<TypeListNode<void const * const,TypeListNode<NullType,NullType> > >;
class XE_BufferSrv;
class XE_EngineStreamReader;
class XE_AndExpr;
class XE_PredicateExpr;
class XE_SerializedEvent<XE_Metadata,XE_VersionConfig>;
class XE_ParserFactory<XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >;
class XE_Xml<XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >;
class XE_AutoDisallowEventFire;
struct XE_Tls::Record;
struct XE_Tls::ColdRecord;
class XE_TlsRecordBlock;
class CAutoRefc<XE_TargetEntry>;
class XE_ProxyTargetEntry;
class XE_EngineLocator;
class XE_EngineLocator::AutoEngineModuleLock;
class XE_ITimerEntry;
class XE_FlushRequest;
class SESListEnum<XE_Buffer,24>;
class IfNullTypeZeroElseOne<void const * const>;
class TypeListNode<void const * const,TypeListNode<NullType,NullType> >;
class XE_DispatcherQueue;
class SEList<XE_SessionSrv,1400>;
class XE_DispatcherPoolConfig;
class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>;
class Dispatcher<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>;
class RefCountImpl<XE_ModuleEntry>;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem;
class XE_CallbackEvent;
struct XE_BufferMgrStats;
struct XE_DispatcherPoolConfig::LoadResult;
class AutoSpinlockHolder<202,3,1>;
class CAutoRefc<SOS_RingBuffer>;
class SEList<XE_Buffer,8>;
class XE_Tls;
struct XE_AssocMemory::Entry;
class XE_OrExpr;
class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >;
class IfNullTypeZeroElseOne<enum XEEngineNotification>;
class XListElem<XE_TargetEntry>;
class SEListEnum<XListElem<XE_TargetEntry>,0>;
class CAutoBase<XE_PackageEntry>;
class XE_NotificationManager;
class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType> >;
class RefCountImpl<XE_NotificationManager>;
class XE_FunctionExpr;
class TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>;
class XE_PackageEnum;
class CAutoRg<XE_PackageEntry>;
class XE_ModuleManager;
class XE_DAttrExpr;
class XE_DumpCallbacksSrv;
class XE_EngineObjectFactorySrv;
class TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > >;
class XE_Session::BufferWalker;
class XE_OS;
class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>;
class RefCountImpl<XE_PackagesHolder>;
class XE_NotExpr;
class XE_SessionEnum;
class XE_EventEnum;
class TSList<XE_EngineLocator::EngineModule>;
class XE_DumpCallbacks;
class XE_SessionSrv;
class XListEnumerator<XE_EventEntry>;
class XE_EventEntry;
class CAutoRefc<SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *> >;
class XListElem<XE_Session>;
class SEList<XListElem<XE_Session>,0>;
class SEList<XListEnumerator<XE_Session>,0>;
class XList<XE_Session>;
class XE_SingletonTargetManager::TargetIdentifier;
class XE_SingletonTargetManager;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<4>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<3>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,void * const,enum XEEngineNotification,void const * const,NullType>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<1>;
class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<0>;
class RefCountImpl<XList<XE_TargetEntry> >;
class XListElem<XE_EventEntry>;
class DmpFakeType;
class XE_EngineSearchLock;
class XListEnumerator<XE_Session>;
class XE_TargetEnum;
class XE_EngineTimerEntry;
class XE_Engine;
class XE_BufferStateRecord;
class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>;
class DmpPointer<SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *> *>;
class TypeListNode<void * const,TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > > >;
class IfNullTypeZeroElseOne<void * const>;
class CAutoBase<XE_FlushRequest>;
class DmpPointer<SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *> >;
class SEListEnum<XE_Buffer,8>;
class AutoSpinlockHolder<285,1,1>;
class SpinlockHolder<285,1,1>;
class CAutoBase<SOSHost_OSThreadCreateDestroyCallback>;
class CAutoRefc<XE_NotificationManager>;
class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>;
class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>;
class Parts<3>;
class CAutoRefc<XE_Session>;
class RefCountImpl<XList<XE_Session> >;
class SEListEnum<XListElem<XE_Session>,0>;
class CAutoRefc<XE_Callback>;
class SEListEnum<XListEnumerator<XE_Session>,0>;
class CAutoP<_GUID>;
class CAutoBase<_GUID>;
class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::List;
class RefCountImpl<XList<XE_EventEntry> >;
class SEListEnum<XListElem<XE_EventEntry>,0>;
class XE_ISerializedEvent<XE_Metadata>;
class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>;
class SEListEnum<XListEnumerator<XE_EventEntry>,0>;
class CAutoRefc<XE_EventEntry>;
class SEListEnum<XE_TargetEntry,40>;
class XE_BufferWalker<XE_Session::BufferWalker>;
class SEListEnum<XE_EventEntry,32>;
class XE_ResolvedObject<XEMessage>;
class CAutoP<XE_ModuleManager>;
class CAutoBase<XE_ModuleManager>;
class SEHashTable<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,WCharKey,0,16,XE_BaseAllocator>;
class SEList<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,0>;
struct XE_TCollection<0,0>::IsValid::__l78::TObjectEntry;
class SEListEnum<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,0>;
class XE_AutoRg<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry>;
class CAutoRg<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry>;
class CAutoBase<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry>;
class SEListEnum<XE_AssocMemory::Entry,0>;
class CAutoP<XE_AssocMemory::Entry>;
class CAutoBase<XE_AssocMemory::Entry>;
class CAutoRefc<XE_ActualTargetEntry>;
class CAutoRefc<XE_ProxyTargetEntry>;
class CAutoP<XE_SingletonTargetManager>;
class CAutoBase<XE_SingletonTargetManager>;
class AutoSpinlockHolder<284,1,1>;
class StreamCDATAReader<unsigned short,XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >;
class StreamCDATAReader<char,XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >;
class CAutoP<XE_Timer>;
class SEListEnum<XE_ITimerEntry,16>;
class DmpPointer<XEEvent>;
class DmpValidated<unsigned __int64>;
class DmpPointer<XEDataAttribute>;
class DmpPointer<XEObject>;
class DmpPointer<XEAction>;
class DmpPointer<XETarget>;
class DmpPointer<XEMap>;
class DmpPointer<XEPredicateSource>;
class DmpPointer<XEPredicateCompare>;
class DmpPointer<XEPackage>;
class CAutoRefc<IDmpClient>;
class DmpPointer<XE_ModuleManager>;
class DmpPointer<XE_PackageEntry>;
class DmpPointer<XList<XE_Session> >;
class DmpPointer<XE_Session>;
class DmpXListIterator<XList<XE_Session>,512>;
class DmpPointer<SEListElem>;
class DmpListIterator<XE_Session,8,8,SEListElem,8,512>;
class DmpPointer<XE_SingletonTargetManager>;
class DmpPointer<XList<XE_TargetEntry> >;
class DmpPointer<XEObjectCollection>;
class DmpPointer<XEObject *>;
class DmpPointer<XE_BufferMgr>;
class DmpPointer<XList<XE_EventEntry> >;
class DmpPointer<XE_EventEntry>;
class DmpXListIterator<XList<XE_EventEntry>,512>;
class DmpListIterator<XE_EventEntry,8,0,SEListElem,8,512>;
class DmpPointer<XE_TargetEntry>;
class DmpXListIterator<XList<XE_TargetEntry>,512>;
class DmpListIterator<XE_TargetEntry,8,8,SEListElem,8,512>;
class DmpPointer<XE_ActualTargetEntry>;
class DmpPointer<XE_ProxyTargetEntry>;
class DmpPointer<XEPackage0::RingTarget>;
class DmpPointer<SESListSized<XEPackage0::RingTarget::EventEntry,0> >;
class DmpListIterator<XEPackage0::RingTarget::EventEntry,0,0,SESListSized<XEPackage0::RingTarget::EventEntry,0>,0,2000>;
class DmpPointer<XEPackage0::RingTarget::EventEntry>;
class DmpPointer<SESList<XE_Buffer,24> >;
class DmpPointer<XE_Buffer>;
class DmpPointer<XEBufferHeader>;
class DmpSEListIterator<SESList<XE_Buffer,24>,512>;
class DmpListIterator<XE_Buffer,0,24,SESList<XE_Buffer,24>,0,512>;
class DmpPointer<XE_OneTimeInit>;
class DmpPointer<enum XEEngineCustomizationFlags>;
class DmpPointer<XEHostProperties>;
class DmpPointer<XETicksConfig>;
class DmpPointer<SOSHost_MemoryClerk *>;
class DmpPointer<SOSHost_MemoryClerk>;
class DmpPointer<SOSHost_RecursiveMutex *>;
class DmpPointer<SOSHost_RecursiveMutex>;
class DmpPointer<XE_Timer *>;
class DmpPointer<XE_Timer>;
class DmpPointer<XE_NotificationManager *>;
class DmpPointer<XE_NotificationManager>;
class DmpPointer<SOSHost_MemObj *>;
class DmpPointer<SOSHost_MemObj>;
class DmpPointer<XList<XE_Session> *>;
struct XListDmpOffsets<XE_Session>;
struct XListDmpOffsets<XE_EventEntry>;
struct _DETOUR_CLR_HEADER;
struct _DETOUR_EXE_RESTORE;
struct _DETOUR_SECTION_RECORD;
struct _SYMBOL_INFO;
struct _DETOUR_SYM_INFO;
struct API_VERSION;
struct _IMAGEHLP_MODULE64;
struct DetourOperation;
struct _DETOUR_TRAMPOLINE;
struct DetourThread;
struct DETOUR_REGION;
struct CDetourDis::COPYENTRY;
class CDetourDis;
class Detour::CImageChars;
class Detour::CImage;
class Detour::CImageData;
class Detour::CImageImportFile;
class Detour::CImageImportName;
class Detour::CImageThunks;
struct HUFFMAN_DECODE_NODE_T;
struct LZ77_STAT_T;
struct LZ77_DECODER_T;
struct HUFFMAN_RADIX_SORT_CHAIN_T;
struct LZ77_PASS1_STATE_T;
struct $_s__CatchableTypeArray$_extraBytes_8;
class _com_error;
struct DOUBLE_ARG;
struct UnloadInfo;
struct _TP_CALLBACK_ENVIRON_V3;
struct InternalImgDelayDescr;
struct _s_ThrowInfo;
struct EHExceptionRecord::EHParameters;
struct EHExceptionRecord;
class <CrtImplementationDetails>::NativeDll;
union FT;
struct _GS_HANDLER_DATA;
struct CsFrame;

#include <pshpack1.h>
struct StaticStorage<1024>
{
  /* 0x0000 */ unsigned int m_buf[32];
}; /* size: 0x0080 */

enum POWER_ACTION
{
  PowerActionNone = 0,
  PowerActionReserved = 1,
  PowerActionSleep = 2,
  PowerActionHibernate = 3,
  PowerActionShutdown = 4,
  PowerActionShutdownReset = 5,
  PowerActionShutdownOff = 6,
  PowerActionWarmEject = 7,
};

typedef enum
{
  object_idIdx = 0,
  reasonIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1, *PTAG_UNNAMED_1;

class TSinglyLinkedList<XE_DeferredEvent>
{
}; /* size: 0x0008 */

enum tagHITRESULT
{
  HITRESULT_OUTSIDE = 0,
  HITRESULT_TRANSPARENT = 1,
  HITRESULT_CLOSE = 2,
  HITRESULT_HIT = 3,
};

union tagCY
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long Lo;
      /* 0x0004 */ long Hi;
    }; /* size: 0x0008 */
    /* 0x0000 */ __int64 int64;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct tagDEC
{
  /* 0x0000 */ unsigned short wReserved;
  union
  {
    struct
    {
      /* 0x0002 */ unsigned char scale;
      /* 0x0003 */ unsigned char sign;
    }; /* size: 0x0002 */
    /* 0x0002 */ unsigned short signscale;
  }; /* size: 0x0002 */
  /* 0x0004 */ unsigned long Hi32;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long Lo32;
      /* 0x000c */ unsigned long Mid32;
    }; /* size: 0x0008 */
    /* 0x0008 */ unsigned __int64 Lo64;
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

typedef struct _wireVARIANT
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ unsigned long rpcReserved;
  /* 0x0008 */ unsigned short vt;
  /* 0x000a */ unsigned short wReserved1;
  /* 0x000c */ unsigned short wReserved2;
  /* 0x000e */ unsigned short wReserved3;
  union
  {
    /* 0x0010 */ __int64 llVal;
    /* 0x0010 */ long lVal;
    /* 0x0010 */ unsigned char bVal;
    /* 0x0010 */ short iVal;
    /* 0x0010 */ float fltVal;
    /* 0x0010 */ double dblVal;
    /* 0x0010 */ short boolVal;
    /* 0x0010 */ long scode;
    /* 0x0010 */ union tagCY cyVal;
    /* 0x0010 */ double date;
    /* 0x0010 */ struct _FLAGGED_WORD_BLOB* bstrVal;
    /* 0x0010 */ struct IUnknown* punkVal;
    /* 0x0010 */ struct IDispatch* pdispVal;
    /* 0x0010 */ struct _wireSAFEARRAY** parray;
    /* 0x0010 */ struct _wireBRECORD* brecVal;
    /* 0x0010 */ unsigned char* pbVal;
    /* 0x0010 */ short* piVal;
    /* 0x0010 */ long* plVal;
    /* 0x0010 */ __int64* pllVal;
    /* 0x0010 */ float* pfltVal;
    /* 0x0010 */ double* pdblVal;
    /* 0x0010 */ short* pboolVal;
    /* 0x0010 */ long* pscode;
    /* 0x0010 */ union tagCY* pcyVal;
    /* 0x0010 */ double* pdate;
    /* 0x0010 */ struct _FLAGGED_WORD_BLOB** pbstrVal;
    /* 0x0010 */ struct IUnknown** ppunkVal;
    /* 0x0010 */ struct IDispatch** ppdispVal;
    /* 0x0010 */ struct _wireSAFEARRAY*** pparray;
    /* 0x0010 */ struct _wireVARIANT** pvarVal;
    /* 0x0010 */ char cVal;
    /* 0x0010 */ unsigned short uiVal;
    /* 0x0010 */ unsigned long ulVal;
    /* 0x0010 */ unsigned __int64 ullVal;
    /* 0x0010 */ int intVal;
    /* 0x0010 */ unsigned int uintVal;
    /* 0x0010 */ struct tagDEC decVal;
    /* 0x0010 */ struct tagDEC* pdecVal;
    /* 0x0010 */ char* pcVal;
    /* 0x0010 */ unsigned short* puiVal;
    /* 0x0010 */ unsigned long* pulVal;
    /* 0x0010 */ unsigned __int64* pullVal;
    /* 0x0010 */ int* pintVal;
    struct
    {
      /* 0x0010 */ unsigned int* puintVal;
      /* 0x0018 */ long __PADDING__[2];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} wireVARIANT, *PwireVARIANT; /* size: 0x0020 */

enum XEEngineDiagnosticLevel
{
  XEED_NONE = 0,
  XEED_LOGGING = 1,
  XEED_EVENTS = 2,
  XEED_TARGETS = 4,
  XEED_BUFFERS = 8,
  XEED_DEFAULT = 0,
  XEED_ALL = 15,
};

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_descriptorIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2, *PTAG_UNNAMED_2;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_3, *PTAG_UNNAMED_3;

typedef enum
{
  opcodeIdx = 0,
  task_addressIdx = 1,
  passesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_4, *PTAG_UNNAMED_4;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 32,
} TAG_UNNAMED_5, *PTAG_UNNAMED_5;

class Spinlock<270,1,1>
{
}; /* size: 0x0004 */

typedef enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e
{
  eBoolean = 0,
  eInteger = 1,
  eFloat = 2,
  eDouble = 3,
} _vc_attributes::helper_attributes::v1_alttypeAttribute::type_e, *P_vc_attributes::helper_attributes::v1_alttypeAttribute::type_e;

typedef struct __vc_attributes::helper_attributes::v1_alttypeAttribute
{
  /* 0x0000 */ enum __vc_attributes::helper_attributes::v1_alttypeAttribute::type_e type;
} _vc_attributes::helper_attributes::v1_alttypeAttribute, *P_vc_attributes::helper_attributes::v1_alttypeAttribute; /* size: 0x0004 */

enum tagTYPEFLAGS
{
  TYPEFLAG_FAPPOBJECT = 1,
  TYPEFLAG_FCANCREATE = 2,
  TYPEFLAG_FLICENSED = 4,
  TYPEFLAG_FPREDECLID = 8,
  TYPEFLAG_FHIDDEN = 16,
  TYPEFLAG_FCONTROL = 32,
  TYPEFLAG_FDUAL = 64,
  TYPEFLAG_FNONEXTENSIBLE = 128,
  TYPEFLAG_FOLEAUTOMATION = 256,
  TYPEFLAG_FRESTRICTED = 512,
  TYPEFLAG_FAGGREGATABLE = 1024,
  TYPEFLAG_FREPLACEABLE = 2048,
  TYPEFLAG_FDISPATCHABLE = 4096,
  TYPEFLAG_FREVERSEBIND = 8192,
  TYPEFLAG_FPROXY = 16384,
};

struct IServiceProvider
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_6, *PTAG_UNNAMED_6;

class CAutoRefc<IXMLDOMNodeList>
{
  /* 0x0000 */ struct IXMLDOMNodeList* m_pt;
}; /* size: 0x0008 */

class CAutoRefc<IXMLDOMNode>
{
  /* 0x0000 */ struct IXMLDOMNode* m_pt;
}; /* size: 0x0008 */

typedef struct _GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} GUID, *PGUID; /* size: 0x0010 */

class XE_XMLConfiguredSessionEnumerator
{
  /* 0x0000 */ long Padding_0[4];
  /* 0x0010 */ class XE_XMLConfig* m_pConfig;
  /* 0x0018 */ class CAutoRefc<IXMLDOMNodeList> m_pSessionNodes;
  /* 0x0020 */ class CAutoRefc<IXMLDOMNode> m_pCurrentSession;
  /* 0x0028 */ struct _GUID m_sessionTag;
}; /* size: 0x0038 */

enum POWER_INFORMATION_LEVEL
{
  SystemPowerPolicyAc = 0,
  SystemPowerPolicyDc = 1,
  VerifySystemPolicyAc = 2,
  VerifySystemPolicyDc = 3,
  SystemPowerCapabilities = 4,
  SystemBatteryState = 5,
  SystemPowerStateHandler = 6,
  ProcessorStateHandler = 7,
  SystemPowerPolicyCurrent = 8,
  AdministratorPowerPolicy = 9,
  SystemReserveHiberFile = 10,
  ProcessorInformation = 11,
  SystemPowerInformation = 12,
  ProcessorStateHandler2 = 13,
  LastWakeTime = 14,
  LastSleepTime = 15,
  SystemExecutionState = 16,
  SystemPowerStateNotifyHandler = 17,
  ProcessorPowerPolicyAc = 18,
  ProcessorPowerPolicyDc = 19,
  VerifyProcessorPowerPolicyAc = 20,
  VerifyProcessorPowerPolicyDc = 21,
  ProcessorPowerPolicyCurrent = 22,
  SystemPowerStateLogging = 23,
  SystemPowerLoggingEntry = 24,
  SetPowerSettingValue = 25,
  NotifyUserPowerSetting = 26,
  PowerInformationLevelUnused0 = 27,
  SystemMonitorHiberBootPowerOff = 28,
  SystemVideoState = 29,
  TraceApplicationPowerMessage = 30,
  TraceApplicationPowerMessageEnd = 31,
  ProcessorPerfStates = 32,
  ProcessorIdleStates = 33,
  ProcessorCap = 34,
  SystemWakeSource = 35,
  SystemHiberFileInformation = 36,
  TraceServicePowerMessage = 37,
  ProcessorLoad = 38,
  PowerShutdownNotification = 39,
  MonitorCapabilities = 40,
  SessionPowerInit = 41,
  SessionDisplayState = 42,
  PowerRequestCreate = 43,
  PowerRequestAction = 44,
  GetPowerRequestList = 45,
  ProcessorInformationEx = 46,
  NotifyUserModeLegacyPowerEvent = 47,
  GroupPark = 48,
  ProcessorIdleDomains = 49,
  WakeTimerList = 50,
  SystemHiberFileSize = 51,
  ProcessorIdleStatesHv = 52,
  ProcessorPerfStatesHv = 53,
  ProcessorPerfCapHv = 54,
  ProcessorSetIdle = 55,
  LogicalProcessorIdling = 56,
  UserPresence = 57,
  PowerSettingNotificationName = 58,
  GetPowerSettingValue = 59,
  IdleResiliency = 60,
  SessionRITState = 61,
  SessionConnectNotification = 62,
  SessionPowerCleanup = 63,
  SessionLockState = 64,
  SystemHiberbootState = 65,
  PlatformInformation = 66,
  PdcInvocation = 67,
  MonitorInvocation = 68,
  FirmwareTableInformationRegistered = 69,
  SetShutdownSelectedTime = 70,
  PowerInformationLevelMaximum = 71,
};

class InterruptTicks<unsigned __int64>
{
  /* 0x0000 */ unsigned __int64 m_InterruptTicks;
}; /* size: 0x0008 */

class SOS_Ticks<InterruptTicks<unsigned __int64>,-3>
{
  /* 0x0000 */ class InterruptTicks<unsigned __int64> m_PrivateSource;
}; /* size: 0x0008 */

class CostInfo
{
  /* 0x0000 */ unsigned long m_Cost;
  /* 0x0004 */ unsigned long m_ContextSwitches;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ExclusiveTime;
  /* 0x0010 */ unsigned __int64 m_ExclusiveCpuTicks;
  /* 0x0018 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_WaitTime;
  /* 0x0020 */ unsigned long m_IOs;
  /* 0x0024 */ long Padding_1;
  /* 0x0028 */ class Worker* m_CachingWorker;
  /* 0x0030 */ unsigned long m_RoundsWillSurvive;
  /* 0x0034 */ long Padding_2;
  /* 0x0038 */ __int64 m_MemoryPages;
  /* 0x0040 */ unsigned long m_status;
}; /* size: 0x0048 */

class MemObjCache<CMemThread<CMemDbg<CMemFixed> > >
{
  /* 0x0000 */ long Padding_3[344];
  /* 0x0560 */ void* m_cacheEntryDescriptor;
  /* 0x0568 */ class CostInfo m_costInfo;
}; /* size: 0x05b0 */

enum TCacheStore<CacheProbabilisticAlgorithm>::HashBucketAction
{
  INSERT = 0,
  REMOVE = 1,
};

struct XE_TArray<XEPredicateSource *,11>
{
  /* 0x0000 */ struct XEPredicateSource* m_array[11];
}; /* size: 0x0058 */

typedef enum
{
  database_idIdx = 0,
  is_remoteIdx = 1,
  total_page_io_latch_waitsIdx = 2,
  page_io_latch_wait_time_in_msIdx = 3,
  total_page_latch_waitsIdx = 4,
  page_latch_wait_time_in_msIdx = 5,
  LastField = 6,
} TAG_UNNAMED_7, *PTAG_UNNAMED_7;

enum XeSqlPkg::allocation_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

enum WELL_KNOWN_SID_TYPE
{
  WinNullSid = 0,
  WinWorldSid = 1,
  WinLocalSid = 2,
  WinCreatorOwnerSid = 3,
  WinCreatorGroupSid = 4,
  WinCreatorOwnerServerSid = 5,
  WinCreatorGroupServerSid = 6,
  WinNtAuthoritySid = 7,
  WinDialupSid = 8,
  WinNetworkSid = 9,
  WinBatchSid = 10,
  WinInteractiveSid = 11,
  WinServiceSid = 12,
  WinAnonymousSid = 13,
  WinProxySid = 14,
  WinEnterpriseControllersSid = 15,
  WinSelfSid = 16,
  WinAuthenticatedUserSid = 17,
  WinRestrictedCodeSid = 18,
  WinTerminalServerSid = 19,
  WinRemoteLogonIdSid = 20,
  WinLogonIdsSid = 21,
  WinLocalSystemSid = 22,
  WinLocalServiceSid = 23,
  WinNetworkServiceSid = 24,
  WinBuiltinDomainSid = 25,
  WinBuiltinAdministratorsSid = 26,
  WinBuiltinUsersSid = 27,
  WinBuiltinGuestsSid = 28,
  WinBuiltinPowerUsersSid = 29,
  WinBuiltinAccountOperatorsSid = 30,
  WinBuiltinSystemOperatorsSid = 31,
  WinBuiltinPrintOperatorsSid = 32,
  WinBuiltinBackupOperatorsSid = 33,
  WinBuiltinReplicatorSid = 34,
  WinBuiltinPreWindows2000CompatibleAccessSid = 35,
  WinBuiltinRemoteDesktopUsersSid = 36,
  WinBuiltinNetworkConfigurationOperatorsSid = 37,
  WinAccountAdministratorSid = 38,
  WinAccountGuestSid = 39,
  WinAccountKrbtgtSid = 40,
  WinAccountDomainAdminsSid = 41,
  WinAccountDomainUsersSid = 42,
  WinAccountDomainGuestsSid = 43,
  WinAccountComputersSid = 44,
  WinAccountControllersSid = 45,
  WinAccountCertAdminsSid = 46,
  WinAccountSchemaAdminsSid = 47,
  WinAccountEnterpriseAdminsSid = 48,
  WinAccountPolicyAdminsSid = 49,
  WinAccountRasAndIasServersSid = 50,
  WinNTLMAuthenticationSid = 51,
  WinDigestAuthenticationSid = 52,
  WinSChannelAuthenticationSid = 53,
  WinThisOrganizationSid = 54,
  WinOtherOrganizationSid = 55,
  WinBuiltinIncomingForestTrustBuildersSid = 56,
  WinBuiltinPerfMonitoringUsersSid = 57,
  WinBuiltinPerfLoggingUsersSid = 58,
  WinBuiltinAuthorizationAccessSid = 59,
  WinBuiltinTerminalServerLicenseServersSid = 60,
  WinBuiltinDCOMUsersSid = 61,
  WinBuiltinIUsersSid = 62,
  WinIUserSid = 63,
  WinBuiltinCryptoOperatorsSid = 64,
  WinUntrustedLabelSid = 65,
  WinLowLabelSid = 66,
  WinMediumLabelSid = 67,
  WinHighLabelSid = 68,
  WinSystemLabelSid = 69,
  WinWriteRestrictedCodeSid = 70,
  WinCreatorOwnerRightsSid = 71,
  WinCacheablePrincipalsGroupSid = 72,
  WinNonCacheablePrincipalsGroupSid = 73,
  WinEnterpriseReadonlyControllersSid = 74,
  WinAccountReadonlyControllersSid = 75,
  WinBuiltinEventLogReadersGroup = 76,
  WinNewEnterpriseReadonlyControllersSid = 77,
  WinBuiltinCertSvcDComAccessGroup = 78,
  WinMediumPlusLabelSid = 79,
  WinLocalLogonSid = 80,
  WinConsoleLogonSid = 81,
  WinThisOrganizationCertificateSid = 82,
  WinApplicationPackageAuthoritySid = 83,
  WinBuiltinAnyPackageSid = 84,
  WinCapabilityInternetClientSid = 85,
  WinCapabilityInternetClientServerSid = 86,
  WinCapabilityPrivateNetworkClientServerSid = 87,
  WinCapabilityPicturesLibrarySid = 88,
  WinCapabilityVideosLibrarySid = 89,
  WinCapabilityMusicLibrarySid = 90,
  WinCapabilityDocumentsLibrarySid = 91,
  WinCapabilitySharedUserCertificatesSid = 92,
  WinCapabilityDefaultWindowsCredentialsSid = 93,
  WinCapabilityRemovableStorageSid = 94,
  WinBuiltinRDSRemoteAccessServersSid = 95,
  WinBuiltinRDSEndpointServersSid = 96,
  WinBuiltinRDSManagementServersSid = 97,
  WinUserModeDriversSid = 98,
  WinBuiltinHyperVAdminsSid = 99,
};

typedef enum
{
  addressIdx = 0,
  modeIdx = 1,
  classIdx = 2,
  keep_countIdx = 3,
  shared_countIdx = 4,
  update_countIdx = 5,
  exclusive_countIdx = 6,
  destroy_countIdx = 7,
  has_waitersIdx = 8,
  is_superlatchIdx = 9,
  is_poisonedIdx = 10,
  durationIdx = 11,
  database_idIdx = 12,
  file_idIdx = 13,
  page_idIdx = 14,
  task_ownerIdx = 15,
  continue_waitIdx = 16,
  LastField = 17,
} TAG_UNNAMED_8, *PTAG_UNNAMED_8;

class XE_AutoP<XE_FileSet>
{
}; /* size: 0x0008 */

enum WbemErrorEnum
{
  wbemNoErr = 0,
  wbemErrFailed = -2147217407,
  wbemErrNotFound = -2147217406,
  wbemErrAccessDenied = -2147217405,
  wbemErrProviderFailure = -2147217404,
  wbemErrTypeMismatch = -2147217403,
  wbemErrOutOfMemory = -2147217402,
  wbemErrInvalidContext = -2147217401,
  wbemErrInvalidParameter = -2147217400,
  wbemErrNotAvailable = -2147217399,
  wbemErrCriticalError = -2147217398,
  wbemErrInvalidStream = -2147217397,
  wbemErrNotSupported = -2147217396,
  wbemErrInvalidSuperclass = -2147217395,
  wbemErrInvalidNamespace = -2147217394,
  wbemErrInvalidObject = -2147217393,
  wbemErrInvalidClass = -2147217392,
  wbemErrProviderNotFound = -2147217391,
  wbemErrInvalidProviderRegistration = -2147217390,
  wbemErrProviderLoadFailure = -2147217389,
  wbemErrInitializationFailure = -2147217388,
  wbemErrTransportFailure = -2147217387,
  wbemErrInvalidOperation = -2147217386,
  wbemErrInvalidQuery = -2147217385,
  wbemErrInvalidQueryType = -2147217384,
  wbemErrAlreadyExists = -2147217383,
  wbemErrOverrideNotAllowed = -2147217382,
  wbemErrPropagatedQualifier = -2147217381,
  wbemErrPropagatedProperty = -2147217380,
  wbemErrUnexpected = -2147217379,
  wbemErrIllegalOperation = -2147217378,
  wbemErrCannotBeKey = -2147217377,
  wbemErrIncompleteClass = -2147217376,
  wbemErrInvalidSyntax = -2147217375,
  wbemErrNondecoratedObject = -2147217374,
  wbemErrReadOnly = -2147217373,
  wbemErrProviderNotCapable = -2147217372,
  wbemErrClassHasChildren = -2147217371,
  wbemErrClassHasInstances = -2147217370,
  wbemErrQueryNotImplemented = -2147217369,
  wbemErrIllegalNull = -2147217368,
  wbemErrInvalidQualifierType = -2147217367,
  wbemErrInvalidPropertyType = -2147217366,
  wbemErrValueOutOfRange = -2147217365,
  wbemErrCannotBeSingleton = -2147217364,
  wbemErrInvalidCimType = -2147217363,
  wbemErrInvalidMethod = -2147217362,
  wbemErrInvalidMethodParameters = -2147217361,
  wbemErrSystemProperty = -2147217360,
  wbemErrInvalidProperty = -2147217359,
  wbemErrCallCancelled = -2147217358,
  wbemErrShuttingDown = -2147217357,
  wbemErrPropagatedMethod = -2147217356,
  wbemErrUnsupportedParameter = -2147217355,
  wbemErrMissingParameter = -2147217354,
  wbemErrInvalidParameterId = -2147217353,
  wbemErrNonConsecutiveParameterIds = -2147217352,
  wbemErrParameterIdOnRetval = -2147217351,
  wbemErrInvalidObjectPath = -2147217350,
  wbemErrOutOfDiskSpace = -2147217349,
  wbemErrBufferTooSmall = -2147217348,
  wbemErrUnsupportedPutExtension = -2147217347,
  wbemErrUnknownObjectType = -2147217346,
  wbemErrUnknownPacketType = -2147217345,
  wbemErrMarshalVersionMismatch = -2147217344,
  wbemErrMarshalInvalidSignature = -2147217343,
  wbemErrInvalidQualifier = -2147217342,
  wbemErrInvalidDuplicateParameter = -2147217341,
  wbemErrTooMuchData = -2147217340,
  wbemErrServerTooBusy = -2147217339,
  wbemErrInvalidFlavor = -2147217338,
  wbemErrCircularReference = -2147217337,
  wbemErrUnsupportedClassUpdate = -2147217336,
  wbemErrCannotChangeKeyInheritance = -2147217335,
  wbemErrCannotChangeIndexInheritance = -2147217328,
  wbemErrTooManyProperties = -2147217327,
  wbemErrUpdateTypeMismatch = -2147217326,
  wbemErrUpdateOverrideNotAllowed = -2147217325,
  wbemErrUpdatePropagatedMethod = -2147217324,
  wbemErrMethodNotImplemented = -2147217323,
  wbemErrMethodDisabled = -2147217322,
  wbemErrRefresherBusy = -2147217321,
  wbemErrUnparsableQuery = -2147217320,
  wbemErrNotEventClass = -2147217319,
  wbemErrMissingGroupWithin = -2147217318,
  wbemErrMissingAggregationList = -2147217317,
  wbemErrPropertyNotAnObject = -2147217316,
  wbemErrAggregatingByObject = -2147217315,
  wbemErrUninterpretableProviderQuery = -2147217313,
  wbemErrBackupRestoreWinmgmtRunning = -2147217312,
  wbemErrQueueOverflow = -2147217311,
  wbemErrPrivilegeNotHeld = -2147217310,
  wbemErrInvalidOperator = -2147217309,
  wbemErrLocalCredentials = -2147217308,
  wbemErrCannotBeAbstract = -2147217307,
  wbemErrAmendedObject = -2147217306,
  wbemErrClientTooSlow = -2147217305,
  wbemErrNullSecurityDescriptor = -2147217304,
  wbemErrTimeout = -2147217303,
  wbemErrInvalidAssociation = -2147217302,
  wbemErrAmbiguousOperation = -2147217301,
  wbemErrQuotaViolation = -2147217300,
  wbemErrTransactionConflict = -2147217299,
  wbemErrForcedRollback = -2147217298,
  wbemErrUnsupportedLocale = -2147217297,
  wbemErrHandleOutOfDate = -2147217296,
  wbemErrConnectionFailed = -2147217295,
  wbemErrInvalidHandleRequest = -2147217294,
  wbemErrPropertyNameTooWide = -2147217293,
  wbemErrClassNameTooWide = -2147217292,
  wbemErrMethodNameTooWide = -2147217291,
  wbemErrQualifierNameTooWide = -2147217290,
  wbemErrRerunCommand = -2147217289,
  wbemErrDatabaseVerMismatch = -2147217288,
  wbemErrVetoPut = -2147217287,
  wbemErrVetoDelete = -2147217286,
  wbemErrInvalidLocale = -2147217280,
  wbemErrProviderSuspended = -2147217279,
  wbemErrSynchronizationRequired = -2147217278,
  wbemErrNoSchema = -2147217277,
  wbemErrProviderAlreadyRegistered = -2147217276,
  wbemErrProviderNotRegistered = -2147217275,
  wbemErrFatalTransportError = -2147217274,
  wbemErrEncryptedConnectionRequired = -2147217273,
  wbemErrRegistrationTooBroad = -2147213311,
  wbemErrRegistrationTooPrecise = -2147213310,
  wbemErrTimedout = -2147209215,
  wbemErrResetToDefault = -2147209214,
};

struct tagPANOSE
{
  /* 0x0000 */ unsigned char bFamilyType;
  /* 0x0001 */ unsigned char bSerifStyle;
  /* 0x0002 */ unsigned char bWeight;
  /* 0x0003 */ unsigned char bProportion;
  /* 0x0004 */ unsigned char bContrast;
  /* 0x0005 */ unsigned char bStrokeVariation;
  /* 0x0006 */ unsigned char bArmStyle;
  /* 0x0007 */ unsigned char bLetterform;
  /* 0x0008 */ unsigned char bMidline;
  /* 0x0009 */ unsigned char bXHeight;
}; /* size: 0x000a */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 7,
  VldEddOffset = 4,
  BufSize = 79,
} TAG_UNNAMED_9, *PTAG_UNNAMED_9;

typedef enum
{
  ListElementOffset = 8,
} TAG_UNNAMED_10, *PTAG_UNNAMED_10;

typedef enum
{
  verbosityIdx = 0,
  componentIdx = 1,
  locationIdx = 2,
  messageIdx = 3,
  workitem_descriptionIdx = 4,
  transaction_idIdx = 5,
  correlation_idsIdx = 6,
  logical_pathIdx = 7,
  physical_pathIdx = 8,
  original_pathIdx = 9,
  LastField = 10,
} TAG_UNNAMED_11, *PTAG_UNNAMED_11;

struct IRootStorage
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 15,
  NVld = 1,
  VldEddOffset = 13,
  BufSize = 86,
} TAG_UNNAMED_12, *PTAG_UNNAMED_12;

struct tagTYPEDESC
{
  union
  {
    /* 0x0000 */ struct tagTYPEDESC* lptdesc;
    /* 0x0000 */ struct tagARRAYDESC* lpadesc;
    /* 0x0000 */ unsigned long hreftype;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short vt;
  /* 0x000a */ char __PADDING__[6];
}; /* size: 0x0010 */

struct tagIDLDESC
{
  /* 0x0000 */ unsigned __int64 dwReserved;
  /* 0x0008 */ unsigned short wIDLFlags;
  /* 0x000a */ char __PADDING__[6];
}; /* size: 0x0010 */

struct tagPARAMDESC
{
  /* 0x0000 */ struct tagPARAMDESCEX* pparamdescex;
  /* 0x0008 */ unsigned short wParamFlags;
  /* 0x000a */ char __PADDING__[6];
}; /* size: 0x0010 */

struct tagELEMDESC
{
  /* 0x0000 */ struct tagTYPEDESC tdesc;
  union
  {
    /* 0x0010 */ struct tagIDLDESC idldesc;
    /* 0x0010 */ struct tagPARAMDESC paramdesc;
  }; /* size: 0x0010 */
}; /* size: 0x0020 */

enum tagVARKIND
{
  VAR_PERINSTANCE = 0,
  VAR_STATIC = 1,
  VAR_CONST = 2,
  VAR_DISPATCH = 3,
};

struct tagVARDESC
{
  /* 0x0000 */ long memid;
  /* 0x0004 */ long Padding_4;
  /* 0x0008 */ wchar_t* lpstrSchema;
  union
  {
    /* 0x0010 */ unsigned long oInst;
    /* 0x0010 */ struct tagVARIANT* lpvarValue;
  }; /* size: 0x0008 */
  /* 0x0018 */ struct tagELEMDESC elemdescVar;
  /* 0x0038 */ unsigned short wVarFlags;
  /* 0x003a */ char Padding_5[2];
  /* 0x003c */ enum tagVARKIND varkind;
}; /* size: 0x0040 */

struct XERelativeObjectId
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int m_packageId : 10; /* bit position: 0 */
    /* 0x0000 */ unsigned int m_objectId : 18; /* bit position: 10 */
    /* 0x0000 */ unsigned int m_type : 4; /* bit position: 28 */
  }; /* bitfield */
}; /* size: 0x0004 */

struct XEStaticAttribute
{
  /* 0x0000 */ struct XERelativeObjectId m_type;
  /* 0x0004 */ long Padding_6;
  /* 0x0008 */ const wchar_t* m_name;
  /* 0x0010 */ unsigned __int64 m_value;
  /* 0x0018 */ const wchar_t* m_description;
  /* 0x0020 */ unsigned int m_resourceid;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct XE_TArray<XEStaticAttribute,4>
{
  /* 0x0000 */ struct XEStaticAttribute m_array[4];
}; /* size: 0x00a0 */

struct XE_TArray<XECustomizableAttribute,0>
{
  /* 0x0000 */ struct XECustomizableAttribute* m_array;
}; /* size: 0x0008 */

struct XEDataAttribute
{
  /* 0x0000 */ struct XERelativeObjectId m_type;
  /* 0x0004 */ long Padding_7;
  /* 0x0008 */ const wchar_t* m_name;
  /* 0x0010 */ unsigned short m_offset;
  /* 0x0012 */ unsigned short m_capabilities;
  /* 0x0014 */ long Padding_8;
  /* 0x0018 */ const wchar_t* m_description;
  /* 0x0020 */ unsigned int m_resourceid;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct XE_TArray<XEDataAttribute,17>
{
  /* 0x0000 */ struct XEDataAttribute m_array[17];
}; /* size: 0x02a8 */

struct XEObject
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ unsigned char m_genericCapabilites;
  /* 0x0003 */ unsigned char m_specificCapabilities;
  /* 0x0004 */ struct XERelativeObjectId m_rid;
  /* 0x0008 */ const wchar_t* m_name;
  /* 0x0010 */ const wchar_t* m_description;
  /* 0x0018 */ unsigned int m_resourceid;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct XEEvent
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ unsigned short m_staticCount;
  /* 0x0022 */ unsigned short m_customizableCount;
  /* 0x0024 */ unsigned short m_dataCount;
  /* 0x0026 */ unsigned short m_fixedSizeDataCount;
  /* 0x0028 */ void* m_pEventHint;
  /* 0x0030 */ struct XEStaticAttribute* m_staticAttributes;
  /* 0x0038 */ struct XECustomizableAttribute* m_customizableAttributes;
  /* 0x0040 */ struct XEDataAttribute* m_dataAttributes;
}; /* size: 0x0048 */

struct XE_TEvent<4,0,17>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,17> m_dynamicAttr;
  /* 0x0350 */ struct XEEvent m_event;
}; /* size: 0x0398 */

struct SListBase::Elem
{
  /* 0x0000 */ struct SListBase::Elem* m_next;
}; /* size: 0x0008 */

struct SListBase
{
  /* 0x0000 */ struct SListBase::Elem m_head;
}; /* size: 0x0008 */

struct SESList<XESessionContext,56>
{
  /* 0x0000 */ struct SListBase m_list;
}; /* size: 0x0008 */

struct XE_SessionContextList
{
  /* 0x0000 */ struct SESList<XESessionContext,56> m_list;
}; /* size: 0x0008 */

class XeSqlPkg::broker_message_undeliverable
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_9[140];
      /* 0x0240 */ unsigned char m_buf[102];
    }; /* size: 0x0076 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int acknowledgement_fragment_numberOffset;
    /* 0x0000 */ const int message_fragment_numberOffset;
    /* 0x0000 */ const int acknowledgement_sequence_numberOffset;
    /* 0x0000 */ const int message_sequence_numberOffset;
    /* 0x0000 */ const int sequenced_messageOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int conversation_idOffset;
    /* 0x0000 */ const int message_drop_reasonOffset;
    /* 0x0000 */ const int message_type_nameOffset;
    /* 0x0000 */ const int service_contract_nameOffset;
    /* 0x0000 */ const int from_service_nameOffset;
    /* 0x0000 */ const int from_broker_nameOffset;
    /* 0x0000 */ const int to_service_nameOffset;
    /* 0x0000 */ const int to_broker_nameOffset;
  }; /* size: 0x0398 */
}; /* size: 0x02a8 */

enum WbemComparisonFlagEnum
{
  wbemComparisonFlagIncludeAll = 0,
  wbemComparisonFlagIgnoreQualifiers = 1,
  wbemComparisonFlagIgnoreObjectSource = 2,
  wbemComparisonFlagIgnoreDefaultValues = 4,
  wbemComparisonFlagIgnoreClass = 8,
  wbemComparisonFlagIgnoreCase = 16,
  wbemComparisonFlagIgnoreFlavor = 32,
};

typedef struct _UNICODE_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_10;
  /* 0x0008 */ unsigned short* Buffer;
} UNICODE_STRING, *PUNICODE_STRING; /* size: 0x0010 */

typedef struct _PLUGPLAY_CONTROL_STATUS_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ unsigned long Operation;
  /* 0x0014 */ unsigned long DeviceStatus;
  /* 0x0018 */ unsigned long DeviceProblem;
  /* 0x001c */ unsigned long Flags;
} PLUGPLAY_CONTROL_STATUS_DATA, *PPLUGPLAY_CONTROL_STATUS_DATA; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 0,
  VldEddOffset = 16,
  BufSize = 66,
} TAG_UNNAMED_13, *PTAG_UNNAMED_13;

typedef struct _SYSTEM_POOLTAG
{
  union
  {
    /* 0x0000 */ unsigned char Tag[4];
    /* 0x0000 */ unsigned long TagUlong;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long PagedAllocs;
  /* 0x0008 */ unsigned long PagedFrees;
  /* 0x000c */ long Padding_11;
  /* 0x0010 */ unsigned __int64 PagedUsed;
  /* 0x0018 */ unsigned long NonPagedAllocs;
  /* 0x001c */ unsigned long NonPagedFrees;
  /* 0x0020 */ unsigned __int64 NonPagedUsed;
} SYSTEM_POOLTAG, *PSYSTEM_POOLTAG; /* size: 0x0028 */

enum VARENUM
{
  VT_EMPTY = 0,
  VT_NULL = 1,
  VT_I2 = 2,
  VT_I4 = 3,
  VT_R4 = 4,
  VT_R8 = 5,
  VT_CY = 6,
  VT_DATE = 7,
  VT_BSTR = 8,
  VT_DISPATCH = 9,
  VT_ERROR = 10,
  VT_BOOL = 11,
  VT_VARIANT = 12,
  VT_UNKNOWN = 13,
  VT_DECIMAL = 14,
  VT_I1 = 16,
  VT_UI1 = 17,
  VT_UI2 = 18,
  VT_UI4 = 19,
  VT_I8 = 20,
  VT_UI8 = 21,
  VT_INT = 22,
  VT_UINT = 23,
  VT_VOID = 24,
  VT_HRESULT = 25,
  VT_PTR = 26,
  VT_SAFEARRAY = 27,
  VT_CARRAY = 28,
  VT_USERDEFINED = 29,
  VT_LPSTR = 30,
  VT_LPWSTR = 31,
  VT_RECORD = 36,
  VT_INT_PTR = 37,
  VT_UINT_PTR = 38,
  VT_FILETIME = 64,
  VT_BLOB = 65,
  VT_STREAM = 66,
  VT_STORAGE = 67,
  VT_STREAMED_OBJECT = 68,
  VT_STORED_OBJECT = 69,
  VT_BLOB_OBJECT = 70,
  VT_CF = 71,
  VT_CLSID = 72,
  VT_VERSIONED_STREAM = 73,
  VT_BSTR_BLOB = 4095,
  VT_VECTOR = 4096,
  VT_ARRAY = 8192,
  VT_BYREF = 16384,
  VT_RESERVED = 0xffff8000,
  VT_ILLEGAL = 0xffffffff,
  VT_ILLEGALMASKED = 4095,
  VT_TYPEMASK = 4095,
};

class CXColumn<unsigned __int64>
{
  /* 0x0000 */ long Padding_12[6];
  /* 0x0018 */ unsigned __int64* m_startPointer;
}; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  flushed_logIdx = 1,
  end_of_logIdx = 2,
  clean_shutdownIdx = 3,
  group_idIdx = 4,
  replica_idIdx = 5,
  ag_database_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_14, *PTAG_UNNAMED_14;

typedef struct _LIST_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY* Flink;
  /* 0x0008 */ struct _LIST_ENTRY* Blink;
} LIST_ENTRY, *PLIST_ENTRY; /* size: 0x0010 */

enum ABORT_AND_LCK_EXCEPTIONS
{
  LCKFAIL_GETIAMPAGE_S = 0,
  LCKFAIL_GETIAMPAGE_X = 1,
  LCKFAIL_DEALLOCMIXEDPAGE = 2,
  LCKFAIL_DEALLOCINDEXEXTENTS_IAMPAGE = 3,
  LCKFAIL_DEALLOCEXT_FOR_DROPPED_AU = 4,
  LCKFAIL_DDAU_SCAN_AFTER_RECOVERY = 5,
  LCKFAIL_DDAU_LOCK_AND_VERIFY = 6,
  LCKFAIL_DDAU_DEALLOCFIRSTIAM_EMPTY_AU = 7,
  LCKFAIL_DDAU_DEALLOCFIRSTIAM_AULCK = 8,
  LCKFAIL_DDAU_PROCESSIAM_PGCNT = 9,
  LCKFAIL_IAMPAGEREF_LOCKSINGLESLOT = 10,
  LCKFAIL_ALLOCPAGE_FROM_TARGET_EXTENT = 11,
  LCKFAIL_BLOBBASE_LOCKRID = 12,
  LCKFAIL_BLOBBASE_LOCKPAGE = 13,
  LCKFAIL_CHKAGG_LOCKTABLE = 14,
  LCKFAIL_DBCC_LOCKDB = 15,
  LCKFAIL_DBCC_GAMSCAN_GETNEXTPAGE = 16,
  LCKFAIL_GHOSTCLEANUP_PROCESSTSKPKT = 17,
  LCKFAIL_AM_GETHOBTLOCK = 18,
  LCKFAIL_AM_LOCKROW_HOBT = 19,
  LCKFAIL_AM_LOCKROW_PAGE = 20,
  LCKFAIL_AM_LOCKROW_ROW = 21,
  LCKFAIL_DBMGR_GETDBTLONG1 = 22,
  LCKFAIL_DBMGR_OPENDB = 23,
  LCKFAIL_DBMGR_OPENDB_AUTOSTARTUP = 24,
  LCKFAIL_DBMGR_OPEN_UNSTARTED_U = 25,
  LCKFAIL_DBMGR_OPEN_UNSTARTED_S = 26,
  LCKFAIL_DBAUTOCLOSE_PROCESSTSKPKT = 27,
  LCKFAIL_DBMGR_STARTUPDB = 28,
  LCKFAIL_DBMGR_DETACHDB = 29,
  LCKFAIL_DBMGR_DROPDB = 30,
  LCKFAIL_DBMGR_REBUILDLOG = 31,
  LCKFAIL_DBMGR_CREATEREPLICA = 32,
  LCKFAIL_DBMGR_DROPREPLICA = 33,
  LCKFAIL_DBMGR_CHANGENAME = 34,
  LCKFAIL_DBMGR_XLOCK = 35,
  LCKFAIL_DBMGR_RECOLLATE = 36,
  LCKFAIL_DBMGR_LOCKFORSTATECHANGE_WAITFOREVER = 37,
  LCKFAIL_DBMGR_LOCKFORSTATECHANGE_DELAY = 38,
  LCKFAIL_DBMGR_LOCKFORSTATECHANGE_AFTERKILL = 39,
  LCKFAIL_DBCC_DBRECOVER = 40,
  LCKFAIL_DBT_INIT_N_SYNC = 41,
  LCKFAIL_FGMGR_LOCKFORDDL = 42,
  LCKFAIL_FILEMGR_FILEOPLOCK = 43,
  LCKFAIL_DBCC_REBUILDINDEX = 44,
  LCKFAIL_HEAPFRAGMENT_LOCKRES = 45,
  LCKFAIL_INDEXDDL_LOCKBUILDRES = 46,
  LCKFAIL_AM_ACQUIREROWLOCK = 47,
  LCKFAIL_AM_PROBEKEYRANGE = 48,
  LCKFAIL_AM_LOCKENDRANGE = 49,
  LCKFAIL_FASTLOADCNTXT_KEYRANGE = 50,
  LCKFAIL_BTREEROW_ACQUIRELOCK = 51,
  LCKFAIL_PAGECONTEXT_ACQUIRELOCK = 52,
  LCKFAIL_INDROWSCANNER_LOCKINFINITEKEY = 53,
  LCKFAIL_INDROWSCANNER_LOCKENDKEY = 54,
  LCKFAIL_MDL_LOCKGENERIC = 55,
  LCKFAIL_MDL_LOCKOBJID = 56,
  LCKFAIL_MDL_LOCKDB = 57,
  LCKFAIL_ACQUIRE_BULK_TABLE_LOCK_NOWAIT = 58,
  LCKFAIL_ACQUIRE_BULK_TABLE_LOCK_WAIT = 59,
  LCKFAIL_PREP_AU_FOR_DD_DATA = 60,
  LCKFAIL_PREP_AU_FOR_DD_SLOB = 61,
  LCKFAIL_PREP_AU_FOR_DD_LOB = 62,
  LCKFAIL_DBCC_PURGEIAMS = 63,
  LCKFAIL_SSB_LOCKSSBRES = 64,
  LCKFAIL_SSB_ACQUIRE_SI_X = 65,
  LCKFAIL_SSB_LOCKCONVGROUPBASE = 66,
  LCKFAIL_SSB_LOCKCONVGROUPBASEX = 67,
  LCKFAIL_CSTMTALTERDB_CHANGESTATE = 68,
  LCKFAIL_XDESRMREADWRITE_INIT = 69,
  LCKFAIL_XDESRMREADONLY_INIT = 70,
  LCKFAIL_XDES_LOCKOBJECT = 71,
  LCKFAIL_REPLACE_DB = 72,
  TRANABORT_CSTMTCREATEEXTENDEDINDEX_XRETEXECUTE = 73,
  ABORT_CQSCAN_CONSTRUCTOR = 74,
  ABORT_MD_CACHE_RWLOCK = 75,
  DEADLOCK_MD_CACHE_RWLOCK = 76,
  ABORT_MD_CLONE_LATCH = 77,
  DEADLOCK_CXPACKET_REMOVEHEAD = 78,
  DEADLOCK_CXPIPE_OPEN = 79,
  DEADLOCK_XCHNGWAIT = 80,
  DEADLOCK_SYNCHLOAD_GET = 81,
  ABORT_INITPFSPAGES_FAILPT_FIRST = 82,
  ABORT_INITPFSPAGES_FAILPT_SECOND = 83,
  ABORT_INITGAMPAGES_FAILPT_GAM = 84,
  ABORT_INITGAMPAGES_FAILPT_SGAM = 85,
  ABORT_ALLOC_ALLOCFIRST_FAILPT = 86,
  TRANABORT_BCPEXECSQL = 87,
  ABORT_FNPRODUCERTHREAD_SCANABORT = 88,
  ABORT_FNPRODUCERTHREAD_EXECABORT = 89,
  ABORT_RAISENETERROR = 90,
  ABORT_XDESRMREADWRITE_MAKEACTIVE_FAILPT = 91,
  ABORT_CRELOP_QUERY_YIELD = 92,
  ABORT_INITPFSPAGES = 93,
  ABORT_INITGAMPAGES = 94,
  ABORT_ALLOC_ALLOCFIRST = 95,
  ABORT_ALLOC_ALLOCEXTENT_GAM = 96,
  ABORT_ASSEMBLY_METAINFO_VERIFY = 97,
  ABORT_ASYNCHDISKPOOLLOCK_GET = 98,
  ABORT_ASYNCHDISKPOOLLOCK_PROCESSACTIONS = 99,
  ABORT_BCPROWSET_PROCESSTEXT_PRESPHINX = 100,
  ABORT_CBULKTEXT_READTEXTCOL = 101,
  ABORT_CBULKTEXT_INSERTTEXTDEFAULT = 102,
  ABORT_BOBMGR_GETBUF = 103,
  ABORT_BPOOL_FLUSHCACHE = 104,
  ABORT_CURSORASYNCPOP_NOTIFYADDROW = 105,
  ABORT_CURSORASYNCPOP_WAITFORROWS = 106,
  ABORT_CHECKPOI2_FIRST = 107,
  ABORT_CHECKPOI2_SECOND = 108,
  ABORT_CHKALLOC_EXTRACT_FROM_SEMD = 109,
  ABORT_CHKAGGBUF_MERGE = 110,
  ABORT_CHKAGGBUF_GETNEXTFACT_LOOP = 111,
  ABORT_CHKAGGBUF_GETNEXTFACT_FINAL = 112,
  ABORT_CHKTBL_REVALIDATEALLIND_LOOPTOP = 113,
  ABORT_CHKTBL_REVALIDATEALLIND_LOOPBTM = 114,
  ABORT_CHKOBJLIST_ADD = 115,
  ABORT_CHKTBL_BUILDANDCHECKOBJLIST = 116,
  ABORT_CHKTBL_PROCESSNEXTDATA = 117,
  ABORT_GHOST_CANSUSPENDWORK = 118,
  ABORT_CHKTBL_FIND_BAD_TIMESTAMP_PARENTS_YIELD = 119,
  ABORT_CLRHOST_SETUPAPPDOMAIN = 120,
  ABORT_CLR_UNMANAGEDTOMANAGED_CONSTRUCTCOMMON = 121,
  ABORT_YIELDANDCHECK = 122,
  ABORT_KEYRANGEGEN_SETUPNEXTCACHE = 123,
  ABORT_FIXPAGENOCHECK = 124,
  ABORT_DBCCBUFFER = 125,
  ABORT_PRINTTABLE_PRINTOBJECT = 126,
  ABORT_UPDATEUSAGE_INIT_FIRST_LOOP = 127,
  ABORT_UPDATEUSAGE_INIT_SECOND_LOOP = 128,
  ABORT_UPDATEUSAGE_UPDATEFOROBJ = 129,
  ABORT_DBCC_CALLPRINT = 130,
  ABORT_DBMGR_PRINTROLLBACKPROG = 131,
  ABORT_DBVERSTATEMGR_ENABLEVER = 132,
  ABORT_DBVERSTATEMGR_DISENABLEVER = 133,
  ABORT_DUMPLOG_EXECUTE = 134,
  ABORT_SEEVENT_WAIT = 135,
  ABORT_CMSQLEXECCTXT_STMTNOTIFYONEXCEPTION = 136,
  ABORT_EXTENTINFO_SCANOBJEXTENTINFO = 137,
  ABORT_FCB_ZEROFILE = 138,
  ABORT_DBCC_PRINTMESSAGE = 139,
  ABORT_DBCC_REPORT_SSB_ERROR = 140,
  ABORT_LATCHPAGE = 141,
  ABORT_CSTREAMBUF_WAITIOCOMPLETION = 142,
  ABORT_DBCC_REBALANCESPACES = 143,
  ABORT_DBCC_REORDERPAGES = 144,
  ABORT_LATCHBASE_SUSPEND = 145,
  ABORT_LATCHBASE_SUSPEND_FAILPT = 146,
  ABORT_AM_RECLAIMSPACEINHOBT_ABORT = 147,
  ABORT_AM_RECLAIMSPACEINHOBT_OTHER = 148,
  ABORT_SQLLOGMGR_DESTROY = 149,
  ABORT_SQLLOGMGR_WAITLCFLUSH = 150,
  ABORT_LSMGRCMD_WAITONCOMMAND = 151,
  ABORT_CXPACKET_APPEND1 = 152,
  ABORT_CXPACKET_APPEND2 = 153,
  ABORT_CXPACKET_REMOVEHEAD1 = 154,
  ABORT_CXPACKET_REMOVEHEAD2 = 155,
  ABORT_CXPACKET_REMOVEHEAD3 = 156,
  ABORT_CPARSER_FILLBUFFER = 157,
  ABORT_CXPIPE_OPEN = 158,
  ABORT_RELEASESPINLOCK_WAITONADDRESS = 159,
  ABORT_CQRYMEMMGR_GETMULISTACCESS = 160,
  ABORT_CQRYMEMQUEUE_BUFACQUIREGRANT = 161,
  ABORT_CQSCANHASH_HASHYIELD = 162,
  ABORT_CVALROWHASH_SETDATAX = 163,
  ABORT_CQSCANHASHMATCH_ITERATE1 = 164,
  ABORT_CQSCANHASHMATCH_ITERATE2 = 165,
  ABORT_CQSCANNLJOIN_GETROW = 166,
  ABORT_CQSCANNLJOINTRIVIAL_GETROW = 167,
  ABORT_CQSCANRMTBASE_CHECKATTN = 168,
  ABORT_XCHNGWAIT = 169,
  ABORT_CQUERYEXECCTXT_MEMMGRMUTEX = 170,
  ABORT_REXEXEC_FEXECAUX = 171,
  ABORT_REXEXEC_YIELD = 172,
  ABORT_ROWSETSS_FETCHNEXTROW = 173,
  ABORT_RESQUEUEBASE_DEQUEUE = 174,
  ABORT_SEDDL_CLEANUPTEXTALLOCS = 175,
  ABORT_SEDDL_TRANSFERFSFORINDEXCREATE = 176,
  ABORT_DBCC_COMPACTFILE = 177,
  ABORT_SORT_RELEASE_BUFFER = 178,
  ABORT_SORT_LMLINK = 179,
  ABORT_SORT_LMMERGE = 180,
  ABORT_SORT_MERGEPREPARE1 = 181,
  ABORT_SORT_MERGEPREPARE2 = 182,
  ABORT_SORT_MERGEGETNEXT = 183,
  ABORT_SORT_MERGEREAD = 184,
  ABORT_SORT_MERGEREREAD = 185,
  ABORT_SORT_GETSORTED = 186,
  ABORT_CHKTBLAFFINITY_CHKOBJ = 187,
  ABORT_DBCC_SHOWDBAFFINITY1 = 188,
  ABORT_DBCC_SHOWDBAFFINITY2 = 189,
  ABORT_CLR_EXECUDX = 190,
  ABORT_CLR_EXECUDXNODATAACCESS = 191,
  ABORT_SSB_UPDDELQUERYNOTIFICATION_WAIT = 192,
  ABORT_SSB_EXECUTERECEIVE = 193,
  ABORT_SSB_TASKMGR_HANDLEREUSABLE = 194,
  ABORT_ZEROFILE = 195,
  ABORT_RPCINTERFACES_RELAY1 = 196,
  ABORT_RPCINTERFACES_RELAY2 = 197,
  ABORT_RPCINTERFACES_RELAY3 = 198,
  ABORT_RPCINTERFACES_RELAY4 = 199,
  ABORT_STMT_WAIT = 200,
  ABORT_TABVALUEDCLRUDF_GETROW = 201,
  ABORT_BLOBHANDLEFACTORY_THROWPOSTPONED = 202,
  ABORT_BLOBHANDLEFACTORY_ACQUIREWRITEMUTEX = 203,
  ABORT_CVALROWHIM_SETDATAX = 204,
  ABORT_XDESRMREADWRITE_ROLLBACKTOLSN = 205,
  ABORT_PAGEFLUSHMGR_MANAGEBUF = 206,
  ABORT_SYNCHLOAD_GET = 207,
  ABORT_SSB_CSBCHECK_COLLECT_MSGTYPE_LOOP = 208,
  ABORT_SSB_CSBCHECK_COLLECT_SERVICECONTRACT_LOOP = 209,
  ABORT_SSB_CSBCHECK_COLLECT_SERVICEBINDING_LOOP = 210,
  ABORT_SSB_CSBCHECK_COLLECT_SERVICEID_LOOP = 211,
  ABORT_SSB_CSBCHECK_COLLECT_OBJECT_LOOP = 212,
  ABORT_SSB_CSBCHECK_COLLECT_CG_LOOP = 213,
  ABORT_SSB_CSBCHECK_COLLECT_MDOWNER_LOOP = 214,
  ABORT_SSB_CSBCHECK_COLLECTDIALOGENDPOINTDATA1 = 215,
  ABORT_SSB_CSBCHECK_COLLECTDIALOGENDPOINTDATA2 = 216,
  ABORT_SSB_CSBCHECK_COLLECTQUEUEDATA = 217,
  ABORT_SSB_CSBCHECK_COLLECTXMITQUEUEDATA = 218,
  ABORT_SSB_CSBCHECK_ANALYZE = 219,
  ABORT_SSB_CSBCHECK_REPAIRDROPPEDMSG = 220,
  ABORT_SSB_CSBCHECK_REPAIRDROPPFROMTRANSMISSION = 221,
  ABORT_SSB_CSBSECMGR_PERFTESTS_EMPTY = 222,
  ABORT_SSB_CSBSECMGR_PERFTESTS_ACQUIRE = 223,
  ABORT_SSB_CSBSECMGR_PERFTESTS_CREATESESSIONKEY = 224,
  ABORT_SSB_CSBSECMGR_PERFTESTS_IMPORTSESSIONKEY = 225,
  ABORT_SSB_CSBSECMGR_PERFTESTS_IMPORTPRIVATEKEY = 226,
  ABORT_SSB_CSBSECMGR_PERFTESTS_IMPORTPUBLICKEY = 227,
  ABORT_SSB_CSBSECMGR_PERFTESTS_ENCRYPTWITHSESSION = 228,
  ABORT_SSB_CSBSECMGR_PERFTESTS_DECRYPTWITHSESSION = 229,
  ABORT_SSB_CSBSECMGR_PERFTESTS_ENCRYPTWITHPUBLIC = 230,
  ABORT_SSB_CSBSECMGR_PERFTESTS_DECRYPTWITHPRIVATE = 231,
  ABORT_SSB_CSBSECMGR_PERFTESTS_HASHWITHPUBLIC = 232,
  ABORT_SSB_CSBSECMGR_PERFTESTS_VERIFYWITHSESSION = 233,
  ABORT_SSB_CSBSECMGR_PERFTESTS_SIGNHASHWITHPRIVATE = 234,
  ABORT_SSB_CSBSECMGR_PERFTESTS_VERIFYWITHPUBLIC = 235,
  ABORT_SSB_CSBSECMGR_PERFTESTS_CREATESALT = 236,
  ABORT_SSB_CSBSECMGR_PERFTESTS_INITSALTINSESSION = 237,
  ABORT_SSB_CSBSECMGR_PERFTESTS_HASHDATA = 238,
  ABORT_SSB_CSBSECMGR_PERFTESTS_ENCRYPTDATA = 239,
  ABORT_SSB_CSBSECMGR_PERFTESTS_DECRYPTDATA = 240,
  ABORT_SSB_CSBSECMGR_PERFTESTS_CREATECRYPTOCONTEXT = 241,
  ABORT_SSB_CSBSECMGR_PERFTESTS_CREATEPUBLIC = 242,
  ABORT_SSB_CSTMTCREATECONTRACT_PSTMTCOPY = 243,
  ABORT_SSB_CSTMTCREATESERVICE_PSTMTCOPY = 244,
  ABORT_SSB_CSTMTCREATESERVICE_SVCBROKEREXEC = 245,
  ABORT_SSB_CSTMTALTERSERVICE_PSTMTCOPY = 246,
  ABORT_SSB_CSTMTALTERSERVICE_SVCBROKEREXEC = 247,
  ABORT_SSB_CSBDDL_CREATECONTRACT = 248,
  ABORT_SSB_CSBDDL_ADDCONTRACTTOSERVICE = 249,
  ABORT_SSB_CSBDDL_ALTERSERVICEQUEUE = 250,
  ABORT_SSB_CSBDDL_DROPCONTRACTFROMSERVICE = 251,
  ABORT_SSB_CSBDDL_DROPCONTRACT_NOTIFUSER = 252,
  ABORT_SSB_CSBDDL_DROPCONTRACT_DROPREMOTE = 253,
  ABORT_SSB_CSBDDL_DROPCONTRACT_DIALOGSCAN = 254,
  ABORT_SSB_CSBDDL_DROPSERVICE = 255,
  ABORT_SSB_DIALOGENDPOINT_MOVE = 0,
  ABORT_SSB_DIALOGENDPOINT_RECEIVEMSG = 1,
  ABORT_SSB_DIALOGENDPOINT_EXECUTEACTION = 2,
  ABORT_SSB_DIALOGENDPOINT_DELDIALOGMSGS = 3,
  ABORT_SSB_DIALOGENDPOINT_DELOUTOFORDERMSGS = 4,
  ABORT_EXTENT_FRAGMENTATION_SCAN = 5,
  ABORT_SSB_CSBXMITSTATE_FETCHMSGS = 6,
  ABORT_SSB_CSBTRANSMISSION_FETCHMSGINFO = 7,
  ABORT_SSB_CSBTRANSMISSION_UPDATERECORDS = 8,
  ABORT_SSB_CSBTRANSMISSION_DELRECORDS = 9,
  ABORT_SSB_CSBQUEUEMONITOR_CHECKFOREMPTYWORKER = 10,
  ABORT_SSB_CLEANUPCONVERSATIONENDPOINTS = 11,
  ABORT_SSB_SBMGR_STARTUP_AFTER_SHUTDOWN = 12,
  ABORT_SSB_SBMGR_STARTUP_AFTER_STARTUP = 13,
  ABORT_SSB_SBMGR_STARTUP_AFTER_TIMERINIT = 14,
  ABORT_SSB_SBMGR_STARTUP_AFTER_MSGDISPATCHER_STARTUP = 15,
  ABORT_SSB_SBMGR_STARTUP_AFTER_ACTIVMGR_STARTUP = 16,
  ABORT_SSB_SBMGR_STARTUP_AFTER_MAPPINGMGR_STARTUP = 17,
  ABORT_SSB_SBMGR_SHUTDOWN_INITIAL = 18,
  ABORT_SSB_SBMGR_SHUTDOWN_MARKED_UNINITIALIZED = 19,
  ABORT_SSB_SBMGR_SHUTDOWN_MAPPINGMGR = 20,
  ABORT_SSB_SBMGR_SHUTDOWN_MSGDISPATCHER = 21,
  ABORT_SSB_SBMGR_SHUTDOWN_TIMEREVENT = 22,
  ABORT_SSB_SBMGR_SHUTDOWN_TASKMGR = 23,
  ABORT_SSB_SBMGR_ASBINIT = 24,
  ABORT_SSB_CDIALOGENDPOINT_BROKERINIT = 25,
  ABORT_SSB_MAPPINGMGR_NOTIFYBROKERINIT = 26,
  ABORT_SSB_ACTIVESB_BCKGRNDNOTIFY_MAPPABLE = 27,
  ABORT_SSB_ACTIVESB_BCKGRNDNOTIFY_NOTOK = 28,
  ABORT_SSB_ACTIVESB_BCKGRNDNOTIFY_CACHEMD = 29,
  ABORT_SSB_ACTIVESB_BCKGRNDNOTIFY_BROKERINIT = 30,
  ABORT_SSB_ACTIVESB_BCKGRNDNOTIFY_CREATEMONITORS = 31,
  ABORT_SSB_CSBOLEDBBINDING_CLEAR = 32,
  ABORT_LOB_RECLAIM_RESERVED_PGS = 33,
  ABORT_CUTROWSET_GETROW_YIELDCOUNT = 34,
  ABORT_OFFROW_READAHEAD = 35,
  LCKFAIL_RELOCATE_PAGE_CONTENTS = 36,
  ABORT_XSDGEN_YIELD = 38,
  ABORT_COMPPLAN_MAPCONTROL = 39,
  ABORT_XMLRWBIN_DLL_LOAD = 40,
  ABORT_RECOMPILABLE_STMT_CHECK_LOOP = 41,
  ABORT_FIND_AUTOSHRINK_DB_YIELD = 42,
  ABORT_SHOWPLANXML_SERIALIZE = 43,
  ABORT_CQSCANUPDATE_GETROW = 44,
  ABORT_CAPPDOMAIN_INIT_CREATEDOMAIN = 46,
  ABORT_CAPPDOMAIN_INIT_GETDOMAINID = 47,
  ABORT_CAPPDOMAIN_INIT_CREATESQLDOMAIN = 48,
  ABORT_CAPPDOMAIN_INVOKECLRFN = 49,
  ABORT_CAPPDOMAIN_LOOPBACKFORSTMTEXEC = 50,
  ABORT_CAPPDOMAIN_LOOPBACKFORCOMPILE = 51,
  ABORT_CAPPDOMAIN_LOADASSEMBLY = 52,
  ABORT_CAPPDOMAIN_GETTYPETOKEN = 53,
  ABORT_CAPPDOMAIN_CREATEMETHOD = 54,
  ABORT_CAPPDOMAIN_FORMMETHOD = 55,
  ABORT_CAPPDOMAIN_CREATEUDTTOKENS = 56,
  ABORT_CAPPDOMAIN_CREATEUDAGGTOKENS = 57,
  ABORT_CAPPDOMAIN_ADDLOCALSIGNATURE = 58,
  ABORT_CAPPDOMAIN_GETCLASSINTEROP = 59,
  ABORT_CAPPDOMAIN_GETFIELDINFO = 60,
  ABORT_CAPPDOMAIN_GETSQLRDRSCHEMA = 61,
  ABORT_CAPPDOMAIN_GETROWFROMSQLRDR = 62,
  ABORT_CAPPDOMAIN_SETXVARONSQLRDR = 63,
  ABORT_CAPPDOMAIN_FREEGCHANDLE = 64,
  ABORT_CAPPDOMAIN_CACHECLRLVLCTXT = 65,
  ABORT_CAPPDOMAIN_DESTROYCLRLVLCTXT = 66,
  ABORT_CAPPDOMAIN_ADDLAZYMSG = 67,
  ABORT_CAPPDOMAIN_HANDLENEWPROVIDERMD = 68,
  ABORT_CAPPDOMAIN_DEFAULTDBCHANGED = 69,
  ABORT_CAPPDOMAIN_STATEMENTCOMPLETED = 70,
  ABORT_CAPPDOMAIN_TRANSTARTED = 71,
  ABORT_CAPPDOMAIN_TRANCOMMITTED = 72,
  ABORT_CAPPDOMAIN_TRANROLLEDBACK = 73,
  ABORT_FCB_CHANGEFILESIZE = 74,
  ABORT_FCB_SETALLOCEND = 75,
  ABORT_DBCC_MOVEHEAPPAGES_SLEEP = 76,
  ABORT_DBCC_MOVEHEAPPAGES_YIELD = 77,
  ABORT_DBCC_MOVEBLOBPAGES_SLEEP = 78,
  ABORT_DBCC_MOVEBLOBPAGES_YIELD = 79,
  ABORT_CQUERYSCAN_STARTUP = 80,
  ABORT_CQSCANONLINEINDEX_GETROW = 81,
  ABORT_CQSCANONLINEINDEXNOCACHE_GETROW = 82,
  ABORT_HEAPDATASETSESSION_PURGEEMPTYPAGES_SLEEP = 83,
  ABORT_HEAPDATASETSESSION_PURGEEMPTYPAGES_YIELD = 84,
  ABORT_INDEXDATASETSESSION_MOVEPAGES_SLEEP = 85,
  ABORT_INDEXDATASETSESSION_MOVEPAGES_YIELD = 86,
  ABORT_DBCC_COMPACTFILE_SLEEP = 87,
  ABORT_DBCC_COMPACTFILE_YIELD = 88,
  ABORT_DBCC_COMPACTFILE_YIELD_FINAL = 89,
  ABORT_DBCC_PURGEEMPTYEXTENTS_SLEEP = 90,
  ABORT_DBCC_PURGEEMPTYEXTENTS_YIELD = 91,
  ABORT_DBCC_PURGEALLEMPTYEXTENTS_YIELD = 92,
  ABORT_DBCC_PURGEHEAP_SLEEP1 = 93,
  ABORT_DBCC_PURGEHEAP_SLEEP2 = 94,
  ABORT_DBCC_PURGEHEAP_YIELD1 = 95,
  ABORT_DBCC_PURGEHEAP_YIELD2 = 96,
  ABORT_CRELOP_QUERY_ALGEBRIZE_TOP = 97,
  ABORT_CRELOP_QUERY_ALGEBRIZE_END = 98,
  ABORT_ALLOC_ALLOCATEFIRST = 99,
  ABORT_ALLOC_ALLOCATEPAGES_FAILURE = 100,
  ABORT_ALLOC_ALLOC_PAGE_SGAM = 101,
  ABORT_ALLOC_NONLOGGEDEXTENTALLOC = 102,
  ABORT_BLOB_DELETEFORMAINT = 103,
  ABORT_BLOBBASE_REMOVENODE = 104,
  ABORT_BLOBBASE_FIXNODE = 105,
  ABORT_BLOBBASE_TRYFIXPAGE = 106,
  ABORT_CARD_UPDATEDENSITYFORJOIN_LEFT = 107,
  ABORT_CARD_UPDATEDENSITYFORJOIN_RIGHT = 108,
  ABORT_CARD_BUILDDENSITYMAP = 109,
  ABORT_CCURSORASYNCPOP_WAITFORROWS = 110,
  ABORT_CCOMPPLAN_INITPARAMS_LOCAL = 111,
  ABORT_CCOMPPLAN_INITPARAMS_PROC = 112,
  ABORT_CPROCHDR_PROCESSVARS = 113,
  ABORT_DBCC_SHOWCONTIG = 114,
  ABORT_INDEXANALYSIS_SCANSAMPLEDPAGES = 115,
  ABORT_DBCC_VERIFYSYSTBLSANITY = 116,
  ABORT_CMSQLEXECCONTEXT_EXECSTMTS_PREEXEC = 117,
  ABORT_CMSQLEXECCONTEXT_EXECSTMTS_POSTEXEC = 118,
  ABORT_FCB_OLDSETFREEEXTENTCOUNT = 119,
  ABORT_DBCC_REORGALLINDEXES = 120,
  ABORT_CMEMO_EXECUTETASKS = 121,
  ABORT_OPTTYPEVRSETARRAY_FINTERSECT = 122,
  ABORT_OPTTYPEVRSETARRAY_IFINDSET = 123,
  ABORT_OPTIMIZERUTIL_YIELDANDABORTCHECK = 124,
  ABORT_CCONSTRAINTPROP_ASSERTVALID_SET = 125,
  ABORT_CCONSTRAINTPROP_ASSERTVALID_VERIFY = 126,
  ABORT_CTSET_FMEMBER = 127,
  ABORT_CQSCANHASH_HASHYIELD_YIELDCOUNT = 128,
  ABORT_CVALROWHASH_SETDATAX_YIELD = 129,
  ABORT_CQSCANNLJOIN_GETROW_YIELDCOUNT = 130,
  ABORT_CQSCANNLJOINTRIVIAL_GETROW_YIELDCOUNT = 131,
  ABORT_CQSCANRMTSCAN_OPENCONNECTION = 132,
  ABORT_CQTE_DECODEEXPR = 133,
  ABORT_RECOVERYMGR_REDOPASS = 134,
  ABORT_CSQL_TRANSFORM = 135,
  ABORT_CSQL_FCOMPWRAPPER = 136,
  ABORT_CSQL_FCOMPILE = 137,
  ABORT_CSQL_FNORMALIZE = 138,
  ABORT_SSB_ACTIVATIONMGR_CREATEQUEUEMONITORS = 139,
  ABORT_SSB_ACTIVATIONMGR_NOTIFPOSTTRANSACTION = 140,
  ABORT_CREMAPCONTEXT_ADDMAPPING = 141,
  ABORT_CXTE_EXECCOMPILE = 142,
  ABORT_CALLDROPOBJECT_CATCH = 143,
  ABORT_ASSEMBLYMETAINFO_ALTERASSEMBLY_CREATEWORK = 144,
  ABORT_ASSEMBLYMETAINFO_ALTERASSEMBLY_UDXDEP = 145,
  ABORT_ASSEMBLYMETAINFO_ALTERASSEMBLY_UDTDEP = 146,
  ABORT_ASSEMBLYMETAINFO_ALTERASSEMBLY_UDAGGDEP = 147,
  TRANABORT_CRELOP_INSERTBULKQUERY_BINDTREE_GETTYPEINFO = 148,
  TRANABORT_CRELOP_INSERTBULKQUERY_BINDTREE_GETCOLID = 149,
  TRANABORT_CRELOP_INSERTBULKQUERY_BINDTREE_RESOLVECOLDEF = 150,
  TRANABORT_VERIFYBULKINSERTCONDITIONS_VIEWORTAB = 151,
  TRANABORT_VERIFYBULKINSERTCONDITIONS_OWNER = 152,
  TRANABORT_VERIFYBULKINSERTCONDITIONS_ACCESSCHECK = 153,
  TRANABORT_VERIFYBULKINSERTCONDITIONS_SYNCTRANSUB = 154,
  TRANABORT_CSCAOPARG_FOLDSCALAR = 155,
  TRANABORT_ALLOCATIONREQ_ALLOCATEFIRST_FAILPT = 156,
  TRANABORT_ALLOCATIONREQ_ALLOCATEPAGES_FAILPT = 157,
  TRANABORT_CHANGEEXTSTATEINIAM_FAILPT = 158,
  TRANABORT_CHANGEEXTSTATEINGAM_FAILPT = 159,
  TRANABORT_CHANGEEXTSTATEINSGAM_FAILPT = 160,
  TRANABORT_DEACTIVATEMIXEDEXT_FAILPT = 161,
  TRANABORT_BULKMAIN = 162,
  TRANABORT_BCPROWSET_CHECKPERM = 163,
  TRANABORT_BCPROWSET_POPIDENT = 164,
  TRANABORT_BCPROWSET_READROW = 165,
  TRANABORT_BCPROWSET_READCOL = 166,
  TRANABORT_CSQLSOURCE_POPSQLSCOPE = 167,
  TRANABORT_CSQLSOURCE_DESTRUCTOR = 168,
  TRANABORT_CSTMTERROR_XRETEXECUTE = 169,
  TRANABORT_BCPROWSET_READTEXTCOL = 170,
  TRANABORT_BCPROWSET_PROCESSTEXTCHUNK = 171,
  TRANABORT_BCPROWSET_PROCESSTEXTCHUNKSFINISH = 172,
  TRANABORT_BCPROWSET_INITPRESPHINX_OPENTARGET = 173,
  TRANABORT_BCPROWSET_INITPRESPHINX_CHECKSYSTAB = 174,
  TRANABORT_BCPROWSET_INITPRESPHINX_NODMPLDHOST = 175,
  TRANABORT_BCPROWSET_INITPRESPHINX_MINLEN = 176,
  TRANABORT_BCPROWSET_INITPRESPHINX_MAXLEN = 177,
  TRANABORT_BCPROWSET_EXECINS = 178,
  TRANABORT_BCPROWSET_GETCOLPRESPHINX_RSCOUNT = 179,
  TRANABORT_BCPROWSET_GETCOLPRESPHINX_COLATTR = 180,
  TRANABORT_BCPROWSET_GETCOLPRESPHINX_I8 = 181,
  TRANABORT_BCPROWSET_GETCOLPRESPHINX_SSVARIANT = 182,
  TRANABORT_BCPROWSET_GETCOLPRESPHINX_65VARCHARMAX = 183,
  TRANABORT_BCPROWSET_GETROWFROMNETPRESPHINX_SKIP = 184,
  TRANABORT_BCPROWSET_GETROWFROMNETPRESPHINX_READ = 185,
  TRANABORT_BCPROWSET_READROWPRESPHINX_MINLEN = 186,
  TRANABORT_BCPROWSET_READROWPRESPHINX_MAXLEN = 187,
  TRANABORT_BCPROWSET_PROCESSTEXTPRESPHINX_TOKEN = 188,
  TRANABORT_BCPROWSET_PROCESSTEXTPRESPHINX_COLS = 189,
  TRANABORT_BCPROWSET_PROCESSTEXTPRESPHINX_EOF = 190,
  TRANABORT_BCPROWSET_PROCESSTEXTPRESPHINX_SETTEXTPTR = 191,
  TRANABORT_BCPROWSET_PROCESSTEXTPRESPHINX_MINLEN = 192,
  TRANABORT_BCPROWSET_PROCESSTEXTPRESPHINX_MAXLEN = 193,
  TRANABORT_BCPIMPORT_INIT_IMED = 194,
  TRANABORT_BCPIMPORT_INIT_OBJTYPE = 195,
  TRANABORT_BCPIMPORT_INIT_ALLOWDDL = 196,
  TRANABORT_BCPIMPORT_INIT_BULKADMINROLE = 197,
  TRANABORT_BCPIMPORT_INIT_PHYSENTITY = 198,
  TRANABORT_BCPIMPORT_INIT_SYNCTRANSUB = 199,
  TRANABORT_BCPIMPORT_INIT_CNSTR_IMED = 200,
  TRANABORT_BCPIMPORT_INIT_CREATEPROVIDER = 201,
  TRANABORT_BCPIMPORT_INITFOROPENRS_IMED = 202,
  TRANABORT_BCPIMPORT_INITFOROPENRS_OBJTYPE = 203,
  TRANABORT_BCPIMPORT_INITFOROPENRS_PHYSENTITY = 204,
  TRANABORT_BCPIMPORT_INITFOROPENRS_CREATEPROVIDER = 205,
  TRANABORT_BCP_CREATEPROVIDER = 206,
  TRANABORT_BCPIMPORT_EXECINSSTMT = 207,
  TRANABORT_IMPIBCPROWSET_GETDATAPRESPHINX_COLS = 208,
  TRANABORT_IMPIBCPROWSET_GETDATAPRESPHINX_ROWSIZE = 209,
  TRANABORT_IMPIBCPROWSET_GETDATAPRESPHINX_COLSIZE = 210,
  TRANABORT_IMPIBCPROWSET_GETDATAPRESPHINX_REGCOLSIZE = 211,
  TRANABORT_IMPIBCPROWSET_GETDATAPRESPHINX_DBPART_VALUE_SIZE = 212,
  TRANABORT_BCP_READCOLMETADATA_TOKEN = 213,
  TRANABORT_BCP_READCOLMETADATA_COLCOUNT = 214,
  TRANABORT_BCP_READCOLMETADATA_TYPE = 215,
  TRANABORT_BCP_READCOLMETADATA_PRECISION = 216,
  TRANABORT_BCP_READCOLMETADATA_SCALE = 217,
  TRANABORT_BCP_READCOLMETADATA_TLEN = 218,
  TRANABORT_BCP_READCOLMETADATA_COLNAME = 219,
  TRANABORT_CBULKTEXT_APPEND = 220,
  TRANABORT_CBULKTEXT_READTEXTCOL_LOOP = 221,
  TRANABORT_CBULKTEXT_READTEXTCOL_END = 222,
  TRANABORT_CBULKTEXT_INSTEXTDEFAULT_LOOP = 223,
  TRANABORT_CBULKTEXT_INSTEXTDEFAULT_END = 224,
  TRANABORT_CHECKPOINT2 = 225,
  TRANABORT_CAPAGEAGGOBJ_FINALERRORCHECK_FAILPT = 226,
  TRANABORT_DBCCNOTTEXTPTR = 227,
  TRANABORT_DBCCCLEANTABLE = 228,
  TRANABORT_GETNEXTI8METADATAID = 229,
  TRANABORT_ECATBITSYUKON_GETNEWSCHEMAOBJECTID_CLASS = 230,
  TRANABORT_ECATBITSYUKON_GETNEWSCHEMAOBJECTID = 231,
  ABORT_QUERYDRIVER_AGGWAIT = 232,
  TRANABORT_INDEXANALYSIS_ERRORHANDLER = 233,
  TRANABORT_DBMGR_CREATESSYSDATABASESROW = 234,
  TRANABORT_DBMGR_SYNCBOOTPAGEWITHDBREG = 235,
  TRANABORT_DBMGR_CHANGEDBSTATE = 236,
  TRANABORT_DBCCDBREINDEX = 237,
  TRANABORT_FCB_SYNCWRITEPREEMPTIVE_CREATEEVENT = 238,
  TRANABORT_FCB_SYNCWRITEPREEMPTIVE_FAILPT = 239,
  TRANABORT_FCB_SYNCWRITEPREEMPTIVE_CLOSEHANDLE = 240,
  TRANABORT_CSTMTDROPINDEX_XRETDROPEXECUTE = 241,
  TRANABORT_CSTMTDROPSTATS_XRETDROPEXECUTE = 242,
  TRANABORT_CSTMTTRUNCATETABLE_XRETEXECUTE = 243,
  TRANABORT_CSTMTDROPEVTNOTIF_XRETDROPEVTNOTIF = 244,
  TRANABORT_FCB_CREATEPHYSICALFILE_CREATEFILE = 245,
  TRANABORT_FCB_CREATEPHYSICALFILE_NOTFILE = 246,
  TRANABORT_FCB_SHOULDPAGEBECOPIED = 247,
  TRANABORT_FGMGR_MAKEDEFAULTFGCB = 248,
  TRANABORT_ESARITHERRORHANDLER = 249,
  TRANABORT_GETIDENTI2I4 = 250,
  TRANABORT_CSTMTCREATEINDEX_XRETEXECUTE = 251,
  TRANABORT_CSTMTCREATEINDEX_XRETPOSTTRIGGER = 252,
  TRANABORT_CSTMTCREATESTATS_XRETEXECUTE = 253,
  TRANABORT_CSTMTALTERINDEX_XRETEXECUTE = 254,
  TRANABORT_DBCC_REORGALLINDEXES = 255,
  TRANABORT_INVOKE_OBJECT_LOCKMATCHID = 0,
  TRANABORT_INVOKE_SCALARTYPE_LOCKMATCHID = 1,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_DBID_OBJID = 2,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_TRIG = 3,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_ACCESS = 4,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_INSTEADTRIG = 5,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_MDEVENTTYPE = 6,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_TYPEMATCH = 7,
  TRANABORT_INVOKE_TRIGGEREX_VALIDATETYPEANDORDER_ORDER = 8,
  TRANABORT_OSFILEASILOCKBYTES_CONSTRUCTOR_CREATEFILE = 9,
  TRANABORT_OSFILEASILOCKBYTES_CONSTRUCTOR_NOTFILE = 10,
  TRANABORT_OSFILEASILOCKBYTES_CONSTRUCTOR_READ = 11,
  TRANABORT_OSFILEASILOCKBYTES_CONSTRUCTOR_BYTESREAD = 12,
  TRANABORT_OSFILEASILOCKBYTES_CONSTRUCTOR_BYTEORDER = 13,
  TRANABORT_OSFILEASILOCKBYTES_CREATE = 14,
  TRANABORT_OPENOSFILEASLOB_CLONEFOREXECUTE_ACCESS = 15,
  TRANABORT_OPENOSFILEASLOB_CLONEFOREXECUTE_IMPERSONATED = 16,
  TRANABORT_LSMGR_SENDPAGE_EXTLOCK = 17,
  TRANABORT_LSMGR_SENDPAGE_PAGELOCK = 18,
  TRANABORT_TVP_ORPHANCREATE = 19,
  TRANABORT_CSTMTCREATESQL_XRETEXECUTE = 20,
  TRANABORT_TVP_BUILDORPHANXVAR = 21,
  TRANABORT_CSTMTCREATEPRTFUNCTION_XRETEXECUTE = 22,
  TRANABORT_CSTMTALTERPRTFUNCTION_XRETEXECUTE = 23,
  TRANABORT_CSTMTDROPPRTFUNCTION_XRETEXECUTE = 24,
  TRANABORT_CSTMTCREATEPRTSCHEME_XRETEXECUTE = 25,
  TRANABORT_CSTMTALTERPRTSCHEME_XRETEXECUTE = 26,
  TRANABORT_CSTMTDROPPRTSCHEME_XRETEXECUTE = 27,
  TRANABORT_REPLUPDATESCHEMA = 28,
  TRANABORT_ROWSETBULK_INSERTROW = 29,
  TRANABORT_ROWSETBULK_VERIFYUNIQUENESS = 30,
  ABORT_CAPPDOMAIN_GETUDXTOKEN = 31,
  ABORT_CAPPDOMAIN_GETMETHODTOKENWITHNAME = 32,
  TRANABORT_CHECKTABLEAFFINITY_CHECKOBJECT = 33,
  TRANABORT_CEXECLEVEL_PUSHSQLSCOPEINTERNAL = 34,
  TRANABORT_CSQLOBJECT_PUSHSQLSCOPEINTERNAL = 35,
  TRANABORT_CSTMTUPDSTATS_XRETEXECUTE = 36,
  TRANABORT_STREAMFILEMGR_CREATEDIRECTORY = 37,
  TRANABORT_STREAMFILEMGR_CREATEHEADERPAGEFILE_CREATEFILE = 38,
  TRANABORT_STREAMFILEMGR_CREATEHEADERPAGEFILE_WRITE = 39,
  TRANABORT_STREAMFILEMGR_CREATEDFSLINK = 40,
  TRANABORT_STREAMFILEMGR_CREATELINKSHARE_GETCOMPNAME = 41,
  TRANABORT_STREAMFILEMGR_CREATELINKSHARE_ADDSHARE = 42,
  TRANABORT_STREAMFILEMGR_GETSHARENAMEFORLOCALPATH = 43,
  TRANABORT_STREAMFILEMGR_CREATETXFRM = 44,
  TRANABORT_STREAMFILEMGR_SETSHAREOWNERSHIP = 45,
  TRANABORT_CSTMTINSERTBULK_FCOMPILE_SORTED = 46,
  TRANABORT_CSTMTINSERTBULK_FCOMPILE_COLS = 47,
  TRANABORT_CSTMTUPDATETEXT_UPDATETEXT = 48,
  TRANABORT_CSTMTUPDATETEXT_XRETEXECUTE = 49,
  TRANABORT_CTABLECREATE_CREATEXMLNODETABLES = 50,
  TRANABORT_CTABLECREATE_LCCREATEIMPL = 51,
  TRANABORT_CTABLECREATE_EXECCRTFORKEY = 52,
  TRANABORT_CSTMTALTERTABLE_XRETEXECUTE = 53,
  TRANABORT_CSTMTCREATESYNONYM_XRETEXECUTE = 54,
  TRANABORT_CTABVARFORUDF_CREATE = 55,
  TRANABORT_CSTMTDROPTYPE_XRETEXECUTE = 56,
  TRANABORT_CSTMTCREATETYPE_XRETEXECUTE = 57,
  TRANABORT_DTCXACTRMONLY_PREPAREDTCXACT = 58,
  TRANABORT_XDESRMREADWRITE_ROLLBACKTOLSN_FAILPT = 59,
  TRANABORT_CREATEEMPTYXMLINDEX = 60,
  TRANABORT_CSTMTCREATEXMLINDEX_XRETEXECUTE = 61,
  TRANABORT_XMLPARSEERROR = 62,
  TRANABORT_CXSTMTDDL_FEXECUTEALLTRIGGERS_DBID = 63,
  TRANABORT_CXSTMTDDL_FEXECUTEALLTRIGGERS = 64,
  TRANABORT_CXSTMTDML_FEXECALLTRIGGERS = 65,
  LCKFAIL_SSB_ILLEGAL = 66,
  LCKFAIL_SSB_ILLEGAL2 = 67,
  ABORT_CQSCANRANGEPREFETCH_GETROW = 68,
  ABORT_CAPPDOMAIN_TRANENDED = 69,
  ABORT_XML_PARSER_YIELD = 70,
  ABORT_CQSCANRANGE_YIELDCOUNT = 71,
  ABORT_CAPPDOMAIN_GETNAMEFROMTYPEID = 72,
  ABORT_CAPPDOMAIN_GETNAMEFROMMETHODTYPE = 73,
  ABORT_CAPPDOMAIN_GETMETHODTOKEN = 74,
  ABORT_WAITFOR_CURSOR_ASYNC_POPL = 75,
  ABORT_WAITFOR_CURSOR_FETCH_IN_ASYNC = 76,
  ABORT_DM_ACTIVE_CURSORS_ITERATION = 77,
  ABORT_IMAGELOCKBYTES_READAT = 78,
  ABORT_TEXTLOCKBYTES_READAT = 79,
  LCKFAIL_BULK_TEMP_PAGE = 80,
  LCKFAIL_AM_VERSIONING_INRECOVERY = 81,
  ABORT_CAPPDOMAIN_GETNAMEFROMFIELDHANDLE = 82,
  ABORT_CAPPDOMAIN_GETFIELDTOKENBYNAME = 83,
  ABORT_CAPPDOMAIN_GETTYPEINFO = 84,
  ABORT_CAPPDOMAIN_VALIDATE = 85,
  ABORT_DBCC_SHRINK_CHECK_FILE_YIELD = 86,
  ABORT_UNORDERPAGEIDSCANNER = 87,
  ABORT_DBCC_COMPACT_LOBS_IN_SHRINK_YIELD = 88,
  ABORT_DBCC_WAIT_VERSION_SCAN_DONE_IN_SHRINKDB = 89,
  ABORT_DBCC_WAIT_VERSION_SCAN_DONE_IN_SHRINKFILE = 90,
  ABORT_DBCC_WAIT_VERSION_SCAN_DONE_IN_PROCESS_PAGES = 91,
  ABORT_DBCC_SHRINK_TEST_PAGE_MOVE_SLEEP = 92,
  ABORT_SSB_REPOSITION_TRANSMITTERS = 93,
  ABORT_QUERYNOTIF_TM_CLOCK = 94,
  DEADLOCK_APPDOMAIN_READY = 95,
  ABORT_APPDOMAIN_READY = 96,
  ABORT_APPDOMAIN_CREATEDDL = 97,
  LCKFAIL_DBMGR_GETDBTLONG2 = 98,
  LCKFAIL_STARTTEMPDB = 99,
  ABORT_DBCC_STREAMING_UDT_CHECK = 100,
  ABORT_DBCC_FIND_COMPACTABLE_LOB = 101,
  ABORT_DBCC_SETUP_LOB_COMPACTION_FILE_RANGE = 102,
  ABORT_DBCC_SETUP_LOB_COMPACTION_IN_FILE = 103,
  ABORT_ALLOCSCAN_GET_NEXT_SCAN_EXTENT = 104,
  ABORT_QE_TRACEBUFFER_ACCESS = 105,
  DEADLOCK_RANGE_NEEDTOWAIT = 106,
  ABORT_CQSCANTVFSTREAM_GETROW_YIELDCOUNT = 107,
  ABORT_CQSCANTVFSTREAM_GETROW = 108,
  ABORT_CQSCANSORT_YIELDCOUNT = 109,
  ABORT_CXPACKETMGR_OPEN = 110,
  ABORT_BEGIN_BULKLOAD = 111,
  ABORT_ASSEMBLYMETAINFO_CHECK_SERIALIZATION = 112,
  ABORT_SORT_ADDRUN = 113,
  ABORT_BULK_ALLOCEXTENT = 114,
  ABORT_VDC_ENTRY = 115,
  ABORT_VDC_EXIT = 116,
  ABORT_FOR_XML_TOP_SEND_CHUNK = 117,
  ABORT_CXSTMTQUERY_POSTGETROW = 118,
  ABORT_CQSCANBITMAP = 119,
  LCKFAIL_LOCK_PAGE_EXPECT_SUCCESS = 120,
  LCKFAIL_LOCK_PAGE_FOR_DEALLOC = 121,
  TRANABORT_BCP_NOCOLMETADATA = 122,
  TRANABORT_BCP_ODDSIZEUNICODE = 123,
  ABORT_QO_TF_HANG = 125,
  TRANABORT_CSTMTDROPBROKER_XRETDROPEXECUTE = 126,
  ABORT_DBCC_COLUMN_LEVEL_CHECKS_DATA = 127,
  ABORT_DBCC_COLUMN_LEVEL_CHECKS_INDEX = 128,
  LCKFAIL_PLANGUIDE = 129,
  ABORT_ALLOC_DROP_AU_INTERNAL = 130,
  ABORT_DM_EXEC_GET_ROW = 131,
  ABORT_CQSCANFILTER_YIELDCOUNT = 132,
  ABORT_PMOGETLOCAL = 133,
  LCKFAIL_LOCK_EXTENT_EXPECT_SUCCESS = 134,
  ABORT_DBCC_PURGEHEAP_SLEEP3 = 135,
  ABORT_DBCC_PURGEHEAP_YIELD3 = 136,
  ABORT_MEMILB_YIELD = 137,
  ABORT_FREE_SPACE_SCAN_GETNEXTPAGE = 138,
  TRANABORT_BCPROWSET_VALIDATE_LOB = 139,
  ABORT_WORKFILE_MAXBUF = 140,
  LCKFAIL_AM_BULK_OPERATION = 141,
  ABORT_REPLICA_COPY_PAGES = 142,
  ABORT_BUF_SMALL1 = 143,
  ABORT_BUF_SMALL2 = 144,
  ABORT_BUF_SMALL3 = 145,
  ABORT_BUF_SMALL4 = 146,
  ABORT_BUF_SMALL5 = 147,
  ABORT_BUF_SMALL6 = 148,
  ABORT_BUF_SMALL7 = 149,
  ABORT_BUF_SMALL8 = 150,
  ABORT_BUF_SMALL9 = 151,
  ABORT_BUF_SMALL10 = 152,
  ABORT_BUF_SMALL11 = 153,
  ABORT_BUF_SMALL12 = 154,
  ABORT_BUF_SMALL13 = 155,
  ABORT_BUF_SMALL14 = 156,
  ABORT_PMO_LOCK_ACQUIRE = 157,
  ABORT_COPY_SKELETON = 158,
  ABORT_COMPUTE_LAST_STMT_IN_COND = 159,
  LCKFAIL_SHRINK_REMOVEIAMPAGE = 160,
  ABORT_SORT_ADDPAGE = 161,
  ABORT_CQUERYPREPARE = 162,
  TRANABORT_REPLCONN_PERM_FAILURE = 163,
  ABORT_QE_INDEX_SORT_OPEN = 164,
  ABORT_SHOWPLAN_LEGACY = 165,
  ABORT_FIXLOBPAGE = 166,
  ABORT_CAPPDOMAIN_GETSTRINGTOKEN = 167,
  ABORT_CAPPDOMAIN_GETOFFSETTOSTRINGDATA = 168,
  ABORT_QO_RESOURCE_SEMAPHORE = 169,
  ABORT_SPACE_SCAN = 170,
  ABORT_OIB_PHANTOM_HANDLE = 171,
  ABORT_OIB_SCHEMA_CHECK = 172,
  ABORT_OIB_ONLINE_STATE = 173,
  ABORT_OIB_BEFORE_DML_LOAD_INDEX = 174,
  ABORT_OIB_AFTER_DML_LOAD_INDEX = 175,
  ABORT_CQSCANRCSPOOL = 176,
  TRANABORT_SETSAVEPOINT = 177,
  ABORT_BEFORE_VLR = 178,
  ABORT_ALLOC_DEFERRED_DROP_AU = 179,
  LCKFAIL_DBM_INTERNALREDO = 180,
  ABORT_EXT_ALLOCATOR_CLEANUP = 181,
  ABORT_PAGE_CACHE_ENTRY_CLEANUP = 182,
  ABORT_BUF_SMALL15 = 183,
  ABORT_BUF_SMALL16 = 184,
  ABORT_BUF_SMALL17 = 185,
  ABORT_BUF_SMALL18 = 186,
  LCKFAIL_DBCC_MOVEPAGE = 187,
  ABORT_FSAGENT_MUTEX_WAIT = 188,
  ABORT_FSAGENT_RWLOCK_WAIT_FOR_READ = 189,
  ABORT_FSAGENT_RWLOCK_WAIT_FOR_WRITE = 190,
  ABORT_GRD_WSGM_MARK_DB_REPAIR = 191,
  ABORT_LAZYCOMMIT_FLUSH_DBLOCK_WAIT = 192,
  LCKFAIL_DUMMYDB_DB_X_FAILED = 193,
  ABORT_REVERT_UP_FOR_EXPR = 194,
  ABORT_REMOTE_SUBTHREAD = 195,
  ABORT_QUERY_RECV_FROM_MCI = 196,
  ABORT_DBCC_FACT_STORE_HASERRORS = 197,
  ABORT_BULK_ALLOCATOR_CLEANUP = 198,
  ABORT_GRPSETS_COMPUTATION = 199,
  ABORT_CREATE_ACCESSOR = 200,
  ABORT_CHECKTABLES_PRINTSTATS = 201,
  ABORT_LOGICAL_FRAGMENTATION_SCAN_YIELD = 202,
  ABORT_THROTTLED_REQUEST = 203,
  ABORT_RG_SOS_RM_CONFIGURATION = 204,
  LCKFAIL_RG_DDL_OPERATION = 205,
  ABORT_DBVSSSNAPSHOT_CREATE = 206,
  ABORT_FS_HEADER_RWLOCK_WAIT = 207,
  LCKFAIL_CSTMTALTERDB_CREATEFG = 208,
  ABORT_FSTR_CFG_MUTEX = 209,
  DEADLOCK_FSTR_CFG_MUTEX = 210,
  ABORT_FSTR_CFG_RWLOCK = 211,
  DEADLOCK_FSTR_CFG_RWLOCK = 212,
  ABORT_DBCC_ADD_FACTSTORE_ENTRY = 213,
  ABORT_BUF_SMALL19 = 214,
  ABORT_BUF_SMALL20 = 215,
  ABORT_CXROWSET_SYNCH = 216,
  ABORT_FCB_REENCRYPTION = 217,
  LCKFAIL_DEK_CHANGE = 218,
  LCKFAIL_TDE_SCAN_PAGE_LOCK = 219,
  LCKFAIL_TDE_SCAN_EXTENT_LOCK = 220,
  ABORT_SSB_CSBCHECK_COLLECT_CONVPRIORITYID_LOOP = 221,
  LCKFAIL_CONVPRI = 222,
  ABORT_WAIT_TESTHOOK = 223,
  ABORT_RPC_RESPONSE = 224,
  ABORT_CHECKTABLES_FLUSH_ALLOCUNITHASHTABLE = 225,
  ABORT_CHECKTABLES_FLUSH_CHECKOBJECTLIST = 226,
  ABORT_BUF_SMALL21 = 227,
  ABORT_AUDITMANAGER_CHANGE = 228,
  ABORT_SCHEMAMGR_FLUSH_DELTA_COUNTS_YIELD = 229,
  ABORT_ROWSET_VERSION_SCAN = 230,
  LCKFAIL_DBCCCLEANPAGE_EXTENT = 231,
  LCKFAIL_DBCCCLEANPAGE_PAGE = 232,
  ABORT_XML_TEXTPARSER = 233,
  LCKFAIL_TDE_SCAN_BULK_LOCK = 234,
  ABORT_RG_SOS_RM_RESET_STATISTICS = 235,
  ABORT_WORKFILE_PAGE_ERROR = 236,
  DEADLOCK_VDM_PREPARE_VIEW = 237,
  ABORT_VDM_PREPARE_VIEW = 238,
  ABORT_UPDATEUSAGE_COUNT_ROW_YIELD = 239,
  ABORT_METADATA_LAZYCACHE_RWLOCK = 240,
  ABORT_LIKE_YIELD = 241,
  LCKFAIL_LSMGR_ACQUIRE_DB_XLOCK = 242,
  LCKFAIL_ALLOCUNIT_BULK_OPERATION_PAGE_ACQUIRE_SLOCK = 243,
  ABORT_CAPPDOMAIN_GETTYPEHANDLEFROMTYPEID = 244,
  ABORT_CAPPDOMAIN_GETMETHODHANDLEFROMMETHODID = 245,
  ABORT_CAPPDOMAIN_GETTYPETOKENBYNAME = 246,
  LCKFAIL_IAM_PURGE = 247,
  ABORT_DVM_THREAD = 248,
  ABORT_CANCEL_SERVICE_THREAD = 249,
  LCK_FAIL_EXTENTDMV_GETHOBTLOCK = 250,
  ABORT_WAIT_MASTER_DB_READY = 251,
  ABORT_WAIT_TEMP_DB_READY = 252,
  ABORT_TCMA_NOTIFICATION_WAIT = 253,
  DEADLOCK_TRAN_RPC = 254,
  ABORT_TCMA_OUTCOMECACHE_WAIT = 255,
  ABORT_WAIT_REQUEST_FOR_COMMIT = 0,
  LCKFAIL_DBMGR_LOCKFORSTATECHANGE = 1,
  ABORT_MD_VALIDATE_CACHED_COUNT = 2,
  DEADLOCK_RPC_COMMAND = 3,
  LCKFAIL_GETPARTITIONLOCK = 4,
  ABORT_SE_REPL_SEND = 5,
  ABORT_SE_REPL_CSN = 6,
  ABORT_SE_REPL_COMMIT_ACK = 7,
  ABORT_SEQUEUE_DEQUEUE = 8,
  ABORT_SE_REPL_SECONDARY_CLOSED = 9,
  ABORT_ASYNC_TRANSPORT_FLOW_CONTROL = 10,
  ABORT_ASYNC_TRANSPORT_TEST = 11,
  ABORT_SE_REPL_WAIT_FOR_ENOUGH_SECONDARIES = 12,
  ABORT_SE_REPL_WAIT_FOR_PRIMARY_FAILURE = 13,
  ABORT_SE_REPL_WAIT_FOR_SECONDARY_CATCHUP_COMPLETE = 14,
  ABORT_SE_REPL_ROLLBACK_ACK = 15,
  ABORT_SE_REPL_KILL_WAIT = 0,
  ABORT_SE_REPL_DELETE_ABORT = 1,
  ABORT_SE_REPL_SECONDARY_CATCHUP_COMPLETE = 2,
  LCKFAIL_SEREPL_LOCKOBJID = 3,
  LCKFAIL_SEREPL_LOCKPARTITION = 4,
  ABORT_SEREPL_PARTITION_EVENT = 5,
  ABORT_SE_REPL_WAIT_FOR_DELETE_COMPLETE = 6,
  LCKFAIL_FABRICMONITOR_RESTARTDB = 7,
  ABORT_SE_REPL_WAIT_FOR_METADATA_COMPLETE_ACK = 8,
  ABORT_SE_REPL_FLOW_CONTROL = 9,
  ABORT_SE_REPL_LOG_SCAN = 10,
  ABORT_LOG_CACHED_SCAN = 11,
  ABORT_LOG_CACHED_SCAN_2 = 12,
  FABRIC_PAIR = 13,
  ABORT_LOCK_PARTITION_COPY = 14,
  ABORT_LOCK_PARTITION_DELETE = 15,
  ABORT_PARTITION_STARTUP_POST_RECOVERY = 16,
  ABORT_PARTITION_ADD = 17,
  ABORT_PARTITION_DEFERRED_CLEANUP = 18,
  ABORT_PARTITION_CHECKPOINT = 19,
  ABORT_PARTITION_GIVEUP_SNAPSHOTS = 20,
  ABORT_PARTITION_EMPTY_TG = 21,
  ABORT_PARTITION_SIGNAL = 22,
  ABORT_PARTITION_SOFT_RESTART = 23,
  ABORT_PARTITION_KILL_NODE = 24,
  ABORT_FABRIC_MONITOR_REQUEST = 25,
  ABORT_MDREPL_DDL_LOCK = 26,
  ABORT_MD_PARTITION_LOCK = 27,
  ABORT_LOCK_PARTITION_CATCHUP = 28,
  ABORT_SEREPL_ROWSET_METADATA_CACHE_REFRESH = 29,
  ABORT_SEREPL_ROWSET_METADATA_CACHE_CLEAR = 30,
  ABORT_PARTITION_CHECKPOINT_IDENTITY = 31,
  ABORT_PARTITION_MGR_USE = 32,
  LCKFAIL_SEREPL_ESCALATION = 33,
  LCKFAIL_XDESRMREADWRITE_GETDBLOCK = 34,
  LCKFAIL_XDESRMREADONLY_GETDBLOCK = 35,
  ABORT_SE_REPL_WAIT_ITEM = 36,
  ABORT_PARTITION_REFRESH_OPTIONS = 37,
  LCKFAIL_DBMGR_REFRESH_OPTIONS = 38,
  LCKFAIL_DBMGR_SET_SCOPE_ATTRS = 39,
  ABORT_SE_REPL_XACT_MESSAGE_FAILPOINT = 40,
  ABORT_SE_REPL_PREPARE_TO_COPY = 41,
  LCKFAIL_TDE_ACQUIREENCRYPTIONLOCK = 4,
  ABORT_CHGTRCK_WAITFORCHANGES = 5,
  ABORT_SEQUENCE_DDL = 6,
  ABORT_GETSEQUENCENEXT = 7,
  LCKFAIL_REDO_LOCK_ACQUISITION = 8,
  ABORT_HADR_MSG_ABORT = 9,
  ABORT_HADR_ACTION = 10,
  ABORT_LOGPOOL_WAITFREEPOOLS = 11,
  ABORT_LOGPOOL_WAITREPLACEMENTSET = 12,
  ABORT_LOGPOOL_WAITLOGCONSUMER = 13,
  LCKFAIL_HADR_DBMGR_LOCK_UPGRADE = 14,
  ABORT_LOGPOOL_RESEARCHLOOP = 15,
  ABORT_HADR_AG_MUTEX = 16,
  ABORT_HADR_WSFC_UTIL = 17,
  ABORT_LOGPOOL_READAHEADLOOP = 18,
  ABORT_XDESTSVERMGR_UPDATE_TASK_YIELD = 19,
  ABORT_HADR_DBMGR_ABORT = 20,
  LCKFAIL_AM_ACQUIRESMOLOCK = 21,
  LCKFAIL_SEDDL_CLEANUPTEXTALLOCS = 22,
  ABORT_WAIT_STARTUP_DEPENDENCY_MATRIX_MODE = 23,
  ABORT_RPC_COMMAND = 24,
  ABORT_DATAPORT_WAIT = 25,
  LCKFAIL_GLM_PRIMARY_BRICK_REQUEST_FAILURE = 26,
  LCKFAIL_GLM_LOCAL_BRICK_REQUEST_FAILURE = 27,
  LCKFAIL_QN_WAITFOR_DBSTARTUP = 28,
  LCKFAIL_MATRIX_DATABASE_SEGMENT_MAP = 29,
  ABORT_OPEN_DB = 30,
  ABORT_WAIT_MASTER_UPGRADED = 31,
  ABORT_WAIT_MASTER_MD_READY = 32,
  ABORT_MATRIX_SETUP_STORED_PROCEDURE = 33,
  ABORT_DISTRIBUTED_CACHE_RACE_WAIT = 34,
  ABORT_TCM_XACT_BRANCH_CREATE = 35,
  LCKFAIL_MATRIXFY_DB = 36,
  DEADLOCK_MATRIX_WORKSPACE_TASK_WAIT = 37,
  ABORT_TCM_AGENT_LOCK = 38,
  LCKFAIL_GLM_UNDO_FAILURE = 39,
  LCKFAIL_METAUTIL_SYSTEMHOBT = 40,
  ABORT_COOP_SCAN = 41,
  ABORT_BPQSCAN_COLSCAN = 42,
  ABORT_BPQSCAN_HASHTABLEBUILD = 43,
  ABORT_QE_BATCH_PROCESSING = 44,
  DEADLOCK_SYNCPOINT = 45,
  ABORT_SYNCPOINT = 46,
  ABORT_COLUMNSTORE_DICT_REHASHING_FAILED = 47,
  ABORT_DBCC_CSINDEX = 48,
  ABORT_QE_RANGE_SCAN = 49,
  LCKFAIL_XEVENT_STATE_CHANGE = 50,
  LCKFAIL_MDL_UNCACHE = 51,
  ABORT_HADR_AR_CRITICAL_SECTION = 52,
  ABORT_HADR_DBR_SUBSCRIBER_CRITICAL_SECTION = 53,
  LCKFAIL_HADR_DB_MANAGEMENT_LOCK = 54,
  ABORT_HADR_XRF_MUTEX = 55,
  ABORT_HADR_VERSIONING_STATE = 56,
  ABORT_ITER_INDEX_STATS = 57,
  LCKFAIL_HADR_DDL_DB_LOCK_ACQUIRE = 58,
  ABORT_VERSION_STORE_CLEANUP = 59,
  LCKFAIL_DDAU_DEALLOCFIRSTIAM_PGLCK = 60,
  LCKFAIL_PROCESS_TT_FOR_CLEANUP = 61,
  LCKFAIL_OIBLOB_TRACKING_TABLE_INIT = 62,
  LCKFAIL_OIBLOB_TRACKING_TABLE_CLEANUP = 63,
  LCKFAIL_OIBLOB_CLEANTABLE = 64,
  LCKFAIL_ASSOCIATE_TEXT_ALLOCUNIT = 65,
  LCKFAIL_CLOUD_BILLING_PARTITION_SIZE = 66,
  ABORT_CREATE_PARTITION_FUNCTION_DDL = 67,
  LCKFAIL_FINDIAM_LOCKLASTIAM = 68,
  ABORT_AUTOALLOCCACHE_FINDIAM = 69,
  ABORT_IAMPAGECACHE_POPULATEIAM = 70,
  ABORT_IAMPAGECACHE_FINDIAM = 71,
  LCKFAIL_SQM_ENABLE_VERSIONING = 72,
  ABORT_CREATE_ROWSETS_GET_COLMOD = 73,
  ABORT_AM_SCHEMAMGR_UNSHARED_CACHE = 74,
  ABORT_CORRUPTED_PAGE = 75,
  LCKFAIL_ARMGR_GETDBLOCK = 76,
  ABORT_COLLECT_DEPENDENCIES = 77,
  LCKFAIL_HADR_DBMGR_LOCK_ACQUIRE_WITH_KILL = 78,
  ABORT_VERSIONING_COMMITTING = 79,
  ABORT_OIBLOB_CLEANUP_TASK = 80,
  ABORT_REFRESH_BOOTPAGE = 81,
  ABORT_HK_MATGEN_ADD_EXPRESSION = 82,
  ABORT_HK_MATGEN_PRECONVERT_QUERY = 83,
  ABORT_COMMIT_TABLE_MULTIAUTOLOCK_SHARED = 84,
  ABORT_COMMIT_TABLE_MULTIAUTOLOCK_EXCLUSIVE = 85,
  ABORT_SE_REPL_WAIT_FOR_PARTIAL_XACT_DRAIN_ACK = 86,
  ABORT_SE_REPL_WAIT_FOR_CATCHUP_DRAIN_ACK = 87,
  ABORT_XE_XML_CONFIG = 88,
  ABORT_FSLOG_TRUNCATION = 89,
  ABORT_FABRIC_REPLICA_PUBLISHER_SUSBSCRIPTION_LIST_MUTEX = 90,
  ABORT_FABRIC_REPLICA_CONTROLLER_MUTEX_WAIT = 91,
  ABORT_FABRIC_REPLICA_CONTROLLER_CACHE_LOCK_WAIT = 92,
  ABORT_FABRIC_REPLICA_CONTROLLER_LIST_LOCK_WAIT = 93,
  ABORT_SE_REPL_WAIT_FOR_SPECIFIC_SECONDARY_FLUSH = 94,
  ABORT_XTP_OFFLINE_CHECKPOINT = 95,
  ABORT_XTP_DMV_GET_ROW = 96,
  ABORT_XTP_CHECKPOINT_WAIT = 97,
  ABORT_SCRIPTDEPLOYMENT_FETCH_WORKER = 98,
  ABORT_SCRIPTDEPLOYMENT_REQUEST_WAIT = 99,
  ABORT_SCRIPTDEPLOYMENT_WORKER_WAIT = 100,
  ABORT_SCRIPTDEPLOYMENT_REQUEST_SUBMIT = 101,
  ABORT_SCRIPTDEPLOYMENT_MAX_WORKER_ATTEMPT = 102,
  ABORT_SCRIPTDEPLOYMENT_COMPLETE_REQUEST_UPDATE_DEPLOYMENTS = 103,
  ABORT_SCRIPTDEPLOYMENT_CANCEL = 104,
  ABORT_SCRIPTDEPLOYMENT_UPDATE_DEPLOYMENTS = 105,
  ABORT_SCRIPTDEPLOYMENT_UPDATE_STATUS = 106,
  ABORT_SCRIPTDEPLOYMENT_FETCH_NEXT_TARGETDB = 107,
  ABORT_SCRIPTDEPLOYMENT_UNPROTECT_PASSWORD = 108,
  ABORT_SE_REPL_WARMUP_PARTITION = 109,
  ABORT_SE_REPL_ESTIMATE_CATCHUP = 110,
  ABORT_QDS_LOCK_DB = 111,
  ABORT_QDS_LOCK_STMT = 112,
  ABORT_QDS_LOCK_INTERVAL = 113,
  ABORT_QDS_LOCK_QUERY_TEXT = 114,
  ABORT_QDS_ASYNC_TASK = 115,
  TRANABORT_XFCB_SYNCWRITEPREEMPTIVE_ERROR = 116,
  ABORT_WINFAB_PREEMPTIVE = 117,
  ABORT_HKPROCENTRY_LOCK_WAIT = 118,
  LCKFAIL_DROP_CLOUD_PARTITION = 119,
  ABORT_WAITFOR_CLOUD_PARTITION_STARTUP = 120,
  LCKFAIL_REPLICATE_LOGICAL_DB = 121,
  LCKFAIL_LC_TABLE_CREATE = 122,
  ABORT_LOG_CONSOLIDATION = 123,
  LCKFAIL_LC_DB = 124,
  ABORT_ROWSETCOLUMNSTOREADAPTER_BATCH_YIELD = 125,
  ABORT_COLUMNSTORE_SCAN_DESERIALIZATION_YIELD = 126,
  ABORT_COLUMNSTORE_BUILD_FAIL = 127,
  LCKFAIL_CSI_ROWGROUP = 128,
  LCKFAIL_CSI_BULK_ROWSET = 129,
  LCKFAIL_CSI_ROWGROUP_INDEXBULD = 130,
  LCKFAIL_CSI_CREATE_DELTASTORE = 131,
  LCKFAIL_CSI_ACQUIRE_DELTASTORE = 132,
  ABORT_CQSCAN_OFFLINEINDEXBUILD_YIELDCOUNT = 133,
  LCKFAIL_CSI_ROWGROUP_FLUSH = 134,
  LCKFAIL_CSI_ACQUIRE_DELTASTORE_INDEX_BUILD = 135,
  ABORT_BUF_SMALL_CSI_1 = 136,
  ABORT_BUF_SMALL_CSI_2 = 137,
  LCKFAIL_CSI_TUPLEMOVER_ROWGROUP = 138,
  LCKFAIL_CSI_ROWGROUP_RECOVERY = 139,
  LCKFAIL_CSI_HOBT_TUPLE_MOVER_QUERY = 140,
  LCKFAIL_CSI_HOBT_TUPLE_MOVER_MOVER = 141,
  ABORT_COLSTORE_INDEX_BUILD = 142,
  LCKFAIL_CSI_STVF_HOBT = 143,
  LCKFAIL_CSI_TM_EXCLUSSION_STMT = 144,
  LCKFAIL_CSI_HOBT_TUPLE_MOVER_DELTASTORECREATE = 145,
  ABORT_NTEXTLOCKBYTES_READAT = 146,
  ABORT_SSB_FWD_PERIODIC_NOTIFICATION_LOOP1 = 147,
  ABORT_SSB_FWD_PERIODIC_NOTIFICATION_LOOP2 = 148,
  ABORT_DL_LCKTIMEOUT_EXCEPTIONID_LAST = 149,
};

typedef enum
{
  page_packets_queuedIdx = 0,
  LastField = 1,
} TAG_UNNAMED_15, *PTAG_UNNAMED_15;

enum XeSqlPkg::file_written_to_replica::CustomizableSlots
{
  collect_pathSlot = 0,
  collect_io_dataSlot = 1,
};

union XE_PublishedDescriptor::DataSource::Data
{
  union
  {
    /* 0x0000 */ const void* m_ptr;
    /* 0x0000 */ void* m_hStream;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

enum XERWMode
{
  XERW_READ = 0,
  XERW_WRITE = 1,
};

struct tagSCROLLINFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int fMask;
  /* 0x0008 */ int nMin;
  /* 0x000c */ int nMax;
  /* 0x0010 */ unsigned int nPage;
  /* 0x0014 */ int nPos;
  /* 0x0018 */ int nTrackPos;
}; /* size: 0x001c */

typedef struct _PAGEDIR_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 DontUse : 9; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 PageDirectoryBase : 48; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 57 */
  }; /* bitfield */
} PAGEDIR_INFORMATION, *PPAGEDIR_INFORMATION; /* size: 0x0008 */

typedef enum
{
  MaxPageLists = 17,
  LastList = 16,
} TAG_UNNAMED_16, *PTAG_UNNAMED_16;

typedef enum
{
  opcodeIdx = 0,
  task_addressIdx = 1,
  passesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_17, *PTAG_UNNAMED_17;

class XE_AutoRg<unsigned char>
{
}; /* size: 0x0008 */

class XE_MetadataSerializer
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int m_DataLength;
      /* 0x0004 */ unsigned int m_PaddedLength;
      /* 0x0008 */ class XE_AutoRg<unsigned char> m_buffer;
      /* 0x0010 */ unsigned int m_offset;
    }; /* size: 0x0014 */
    /* 0x0000 */ const int SERIALIZED_METADATASIZE_OFFSET;
  }; /* size: 0x0014 */
}; /* size: 0x0018 */

struct IDirectWriterLock
{
}; /* size: 0x0008 */

enum URLIS
{
  URLIS_URL = 0,
  URLIS_OPAQUE = 1,
  URLIS_NOHISTORY = 2,
  URLIS_FILEURL = 3,
  URLIS_APPLIABLE = 4,
  URLIS_DIRECTORY = 5,
  URLIS_HASQUERY = 6,
};

typedef enum
{
  linked_server_nameIdx = 0,
  provider_nameIdx = 1,
  propertiesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_18, *PTAG_UNNAMED_18;

struct XEPackage0::ActivityIdAction
{
}; /* size: 0x0001 */

enum tagMSHLFLAGS
{
  MSHLFLAGS_NORMAL = 0,
  MSHLFLAGS_TABLESTRONG = 1,
  MSHLFLAGS_TABLEWEAK = 2,
  MSHLFLAGS_NOPING = 4,
  MSHLFLAGS_RESERVED1 = 8,
  MSHLFLAGS_RESERVED2 = 16,
  MSHLFLAGS_RESERVED3 = 32,
  MSHLFLAGS_RESERVED4 = 64,
};

struct XE_TArray<XEDataAttribute,7>
{
  /* 0x0000 */ struct XEDataAttribute m_array[7];
}; /* size: 0x0118 */

struct XE_TEvent<4,0,7>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,7> m_dynamicAttr;
  /* 0x01c0 */ struct XEEvent m_event;
}; /* size: 0x0208 */

class XeSqlPkg::logreader_process_text_ptr
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_13[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int log_operationOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int text_pointer_timestampOffset;
    /* 0x0000 */ const int text_pointer_file_idOffset;
    /* 0x0000 */ const int text_pointer_page_idOffset;
    /* 0x0000 */ const int text_pointer_slot_idOffset;
    /* 0x0000 */ const int current_lsnOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

enum EFormatType
{
  eFormatInvalid = 0,
  eFormatChar = 1,
  eFormatShort = 2,
  eFormatInt = 3,
  eFormatInt64 = 4,
  eFormatFloat = 5,
  eFormatDouble = 6,
  eFormatString = 7,
  eFormatPointer = 8,
  eFormatRid = 9,
  eFormatBuf = 10,
  eFormatPage = 11,
  eFormatDate = 12,
  eFormatPhrase = 13,
  eFormatPageid = 14,
  eFormatLSN = 15,
  eFormatXid = 16,
  eFormatTimestamp = 17,
  eFormatNull = 18,
};

struct IFont
{
}; /* size: 0x0008 */

typedef enum
{
  SINGLE_PARTITION = 1,
} TAG_UNNAMED_19, *PTAG_UNNAMED_19;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
  /* 0x0000 */ struct _SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long AuthenticationTarget;
  /* 0x0010 */ unsigned long NumberOfAuthnSchemes;
  /* 0x0014 */ long Padding_14;
  /* 0x0018 */ unsigned long* AuthnSchemes;
  /* 0x0020 */ unsigned char* ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A; /* size: 0x0028 */

typedef enum
{
  number_pagesIdx = 0,
  first_page_file_idIdx = 1,
  first_page_idIdx = 2,
  page_file_offsetIdx = 3,
  numa_node_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_20, *PTAG_UNNAMED_20;

struct POWERBROADCAST_SETTING
{
  /* 0x0000 */ struct _GUID PowerSetting;
  /* 0x0010 */ unsigned long DataLength;
  /* 0x0014 */ unsigned char Data[1];
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

enum XEErrorStates
{
  XEES_NOSTATE = 0,
  XEES_ENGINE_INIT = 1,
  XEES_ENGINE_RESOLVENAME = 2,
  XEES_ENGINE_RESOLVEHANDLE = 3,
  XEES_ENGINE_CREATESINGLETONTARGET = 4,
  XEES_ENGINE_ENABLE_EVENT = 5,
  XEES_ENGINE_REGISTER_MODULE = 6,
  XEES_ENGINE_SESSION_CREATE = 7,
  XEES_ENGINE_CREATE_PACKAGE_HOLDER = 8,
  XEES_ENGINE_FORMAT_MESSAGE = 9,
  XEES_ENGINE_GET_LAST_ERROR = 10,
  XEES_SERVICE_MUTEX = 11,
  XEES_SERVICE_RWLOCK = 12,
  XEES_SERVICE_EVENTMANUAL = 13,
  XEES_SERVICE_MEMORY = 14,
  XEES_SERVICE_ASYNCIO = 15,
  XEES_SERVICE_SECTIONS = 16,
  XEES_SERVICE_ALLOC_MESSAGE = 17,
  XEES_SESSION_CREATE = 18,
  XEES_SESSION_ADD_TARGET = 19,
  XEES_SESSION_ENABLE_EVENT = 20,
  XEES_SESSION_MANIP = 21,
  XEES_SESSION_TARGET_CREATE = 22,
  XEES_SESSION_EVENT_CREATE = 23,
  XEES_SESSION_DESERIALIZE = 24,
  XEES_SESSION_SUBMIT = 25,
  XEES_SESSION_TARGET_PRIVATE_API = 26,
  XEES_BUFFERMGR_CREATE = 27,
  XEES_BUFFER_CREATE = 28,
  XEES_PREDICATE_CREATE = 29,
  XEES_PACKAGE_ENABLE_EVENT = 30,
  XEES_FLUSH_REQUEST_CREATE = 31,
  XEES_CONFIG_CREATECRCLIST = 32,
  XEES_CONFIG_INVALID_OPTION = 33,
  XEES_ENGINE_UNREGISTER_MODULE = 34,
  XEES_STATE_LAST = 35,
};

struct IXMLDOMDocument
{
}; /* size: 0x0008 */

enum XEBaseTypes
{
  XEBT_NONE = 0,
  XEBT_INT8 = 1,
  XEBT_INT16 = 2,
  XEBT_INT32 = 3,
  XEBT_INT64 = 4,
  XEBT_UINT8 = 5,
  XEBT_UINT16 = 6,
  XEBT_UINT32 = 7,
  XEBT_UINT64 = 8,
  XEBT_FLOAT32 = 9,
  XEBT_FLOAT64 = 10,
  XEBT_CPU_CYCLE = 11,
  XEBT_FILETIME = 12,
  XEBT_PTR = 13,
  XEBT_ASTR = 14,
  XEBT_WSTR = 15,
  XEBT_UUID_PTR = 16,
  XEBT_CHAR = 17,
  XEBT_WCHAR = 18,
  XEBT_VLD_ASTR = 19,
  XEBT_VLD_WSTR = 20,
  XEBT_VLD_UUID = 21,
  XEBT_VLD_PTR = 22,
  XEBT_VLD_CALLSTACK = 23,
  XEBT_ACTIVID = 24,
  XEBT_ACTIVIDXFER = 25,
  XEBT_BOOLEAN = 26,
  XEBT_VLD_XML = 27,
  XEBT_LAST = 28,
};

struct ISynchronize
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 7,
  VldEddOffset = 5,
  BufSize = 81,
} TAG_UNNAMED_21, *PTAG_UNNAMED_21;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_22, *PTAG_UNNAMED_22;

typedef enum
{
  offset = 64,
} TAG_UNNAMED_23, *PTAG_UNNAMED_23;

typedef enum
{
  wait_typeIdx = 0,
  opcodeIdx = 1,
  durationIdx = 2,
  LastField = 3,
} TAG_UNNAMED_24, *PTAG_UNNAMED_24;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  filegroup_idIdx = 2,
  new_propertyIdx = 3,
  LastField = 4,
} TAG_UNNAMED_25, *PTAG_UNNAMED_25;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 48,
} TAG_UNNAMED_26, *PTAG_UNNAMED_26;

enum tag_WBEMSTATUS
{
  WBEM_NO_ERROR = 0,
  WBEM_S_NO_ERROR = 0,
  WBEM_S_SAME = 0,
  WBEM_S_FALSE = 1,
  WBEM_S_ALREADY_EXISTS = 0x40001,
  WBEM_S_RESET_TO_DEFAULT = 0x40002,
  WBEM_S_DIFFERENT = 0x40003,
  WBEM_S_TIMEDOUT = 0x40004,
  WBEM_S_NO_MORE_DATA = 0x40005,
  WBEM_S_OPERATION_CANCELLED = 0x40006,
  WBEM_S_PENDING = 0x40007,
  WBEM_S_DUPLICATE_OBJECTS = 0x40008,
  WBEM_S_ACCESS_DENIED = 0x40009,
  WBEM_S_PARTIAL_RESULTS = 0x40010,
  WBEM_S_SOURCE_NOT_AVAILABLE = 0x40017,
  WBEM_E_FAILED = -2147217407,
  WBEM_E_NOT_FOUND = -2147217406,
  WBEM_E_ACCESS_DENIED = -2147217405,
  WBEM_E_PROVIDER_FAILURE = -2147217404,
  WBEM_E_TYPE_MISMATCH = -2147217403,
  WBEM_E_OUT_OF_MEMORY = -2147217402,
  WBEM_E_INVALID_CONTEXT = -2147217401,
  WBEM_E_INVALID_PARAMETER = -2147217400,
  WBEM_E_NOT_AVAILABLE = -2147217399,
  WBEM_E_CRITICAL_ERROR = -2147217398,
  WBEM_E_INVALID_STREAM = -2147217397,
  WBEM_E_NOT_SUPPORTED = -2147217396,
  WBEM_E_INVALID_SUPERCLASS = -2147217395,
  WBEM_E_INVALID_NAMESPACE = -2147217394,
  WBEM_E_INVALID_OBJECT = -2147217393,
  WBEM_E_INVALID_CLASS = -2147217392,
  WBEM_E_PROVIDER_NOT_FOUND = -2147217391,
  WBEM_E_INVALID_PROVIDER_REGISTRATION = -2147217390,
  WBEM_E_PROVIDER_LOAD_FAILURE = -2147217389,
  WBEM_E_INITIALIZATION_FAILURE = -2147217388,
  WBEM_E_TRANSPORT_FAILURE = -2147217387,
  WBEM_E_INVALID_OPERATION = -2147217386,
  WBEM_E_INVALID_QUERY = -2147217385,
  WBEM_E_INVALID_QUERY_TYPE = -2147217384,
  WBEM_E_ALREADY_EXISTS = -2147217383,
  WBEM_E_OVERRIDE_NOT_ALLOWED = -2147217382,
  WBEM_E_PROPAGATED_QUALIFIER = -2147217381,
  WBEM_E_PROPAGATED_PROPERTY = -2147217380,
  WBEM_E_UNEXPECTED = -2147217379,
  WBEM_E_ILLEGAL_OPERATION = -2147217378,
  WBEM_E_CANNOT_BE_KEY = -2147217377,
  WBEM_E_INCOMPLETE_CLASS = -2147217376,
  WBEM_E_INVALID_SYNTAX = -2147217375,
  WBEM_E_NONDECORATED_OBJECT = -2147217374,
  WBEM_E_READ_ONLY = -2147217373,
  WBEM_E_PROVIDER_NOT_CAPABLE = -2147217372,
  WBEM_E_CLASS_HAS_CHILDREN = -2147217371,
  WBEM_E_CLASS_HAS_INSTANCES = -2147217370,
  WBEM_E_QUERY_NOT_IMPLEMENTED = -2147217369,
  WBEM_E_ILLEGAL_NULL = -2147217368,
  WBEM_E_INVALID_QUALIFIER_TYPE = -2147217367,
  WBEM_E_INVALID_PROPERTY_TYPE = -2147217366,
  WBEM_E_VALUE_OUT_OF_RANGE = -2147217365,
  WBEM_E_CANNOT_BE_SINGLETON = -2147217364,
  WBEM_E_INVALID_CIM_TYPE = -2147217363,
  WBEM_E_INVALID_METHOD = -2147217362,
  WBEM_E_INVALID_METHOD_PARAMETERS = -2147217361,
  WBEM_E_SYSTEM_PROPERTY = -2147217360,
  WBEM_E_INVALID_PROPERTY = -2147217359,
  WBEM_E_CALL_CANCELLED = -2147217358,
  WBEM_E_SHUTTING_DOWN = -2147217357,
  WBEM_E_PROPAGATED_METHOD = -2147217356,
  WBEM_E_UNSUPPORTED_PARAMETER = -2147217355,
  WBEM_E_MISSING_PARAMETER_ID = -2147217354,
  WBEM_E_INVALID_PARAMETER_ID = -2147217353,
  WBEM_E_NONCONSECUTIVE_PARAMETER_IDS = -2147217352,
  WBEM_E_PARAMETER_ID_ON_RETVAL = -2147217351,
  WBEM_E_INVALID_OBJECT_PATH = -2147217350,
  WBEM_E_OUT_OF_DISK_SPACE = -2147217349,
  WBEM_E_BUFFER_TOO_SMALL = -2147217348,
  WBEM_E_UNSUPPORTED_PUT_EXTENSION = -2147217347,
  WBEM_E_UNKNOWN_OBJECT_TYPE = -2147217346,
  WBEM_E_UNKNOWN_PACKET_TYPE = -2147217345,
  WBEM_E_MARSHAL_VERSION_MISMATCH = -2147217344,
  WBEM_E_MARSHAL_INVALID_SIGNATURE = -2147217343,
  WBEM_E_INVALID_QUALIFIER = -2147217342,
  WBEM_E_INVALID_DUPLICATE_PARAMETER = -2147217341,
  WBEM_E_TOO_MUCH_DATA = -2147217340,
  WBEM_E_SERVER_TOO_BUSY = -2147217339,
  WBEM_E_INVALID_FLAVOR = -2147217338,
  WBEM_E_CIRCULAR_REFERENCE = -2147217337,
  WBEM_E_UNSUPPORTED_CLASS_UPDATE = -2147217336,
  WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE = -2147217335,
  WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE = -2147217328,
  WBEM_E_TOO_MANY_PROPERTIES = -2147217327,
  WBEM_E_UPDATE_TYPE_MISMATCH = -2147217326,
  WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED = -2147217325,
  WBEM_E_UPDATE_PROPAGATED_METHOD = -2147217324,
  WBEM_E_METHOD_NOT_IMPLEMENTED = -2147217323,
  WBEM_E_METHOD_DISABLED = -2147217322,
  WBEM_E_REFRESHER_BUSY = -2147217321,
  WBEM_E_UNPARSABLE_QUERY = -2147217320,
  WBEM_E_NOT_EVENT_CLASS = -2147217319,
  WBEM_E_MISSING_GROUP_WITHIN = -2147217318,
  WBEM_E_MISSING_AGGREGATION_LIST = -2147217317,
  WBEM_E_PROPERTY_NOT_AN_OBJECT = -2147217316,
  WBEM_E_AGGREGATING_BY_OBJECT = -2147217315,
  WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY = -2147217313,
  WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING = -2147217312,
  WBEM_E_QUEUE_OVERFLOW = -2147217311,
  WBEM_E_PRIVILEGE_NOT_HELD = -2147217310,
  WBEM_E_INVALID_OPERATOR = -2147217309,
  WBEM_E_LOCAL_CREDENTIALS = -2147217308,
  WBEM_E_CANNOT_BE_ABSTRACT = -2147217307,
  WBEM_E_AMENDED_OBJECT = -2147217306,
  WBEM_E_CLIENT_TOO_SLOW = -2147217305,
  WBEM_E_NULL_SECURITY_DESCRIPTOR = -2147217304,
  WBEM_E_TIMED_OUT = -2147217303,
  WBEM_E_INVALID_ASSOCIATION = -2147217302,
  WBEM_E_AMBIGUOUS_OPERATION = -2147217301,
  WBEM_E_QUOTA_VIOLATION = -2147217300,
  WBEM_E_RESERVED_001 = -2147217299,
  WBEM_E_RESERVED_002 = -2147217298,
  WBEM_E_UNSUPPORTED_LOCALE = -2147217297,
  WBEM_E_HANDLE_OUT_OF_DATE = -2147217296,
  WBEM_E_CONNECTION_FAILED = -2147217295,
  WBEM_E_INVALID_HANDLE_REQUEST = -2147217294,
  WBEM_E_PROPERTY_NAME_TOO_WIDE = -2147217293,
  WBEM_E_CLASS_NAME_TOO_WIDE = -2147217292,
  WBEM_E_METHOD_NAME_TOO_WIDE = -2147217291,
  WBEM_E_QUALIFIER_NAME_TOO_WIDE = -2147217290,
  WBEM_E_RERUN_COMMAND = -2147217289,
  WBEM_E_DATABASE_VER_MISMATCH = -2147217288,
  WBEM_E_VETO_DELETE = -2147217287,
  WBEM_E_VETO_PUT = -2147217286,
  WBEM_E_INVALID_LOCALE = -2147217280,
  WBEM_E_PROVIDER_SUSPENDED = -2147217279,
  WBEM_E_SYNCHRONIZATION_REQUIRED = -2147217278,
  WBEM_E_NO_SCHEMA = -2147217277,
  WBEM_E_PROVIDER_ALREADY_REGISTERED = -2147217276,
  WBEM_E_PROVIDER_NOT_REGISTERED = -2147217275,
  WBEM_E_FATAL_TRANSPORT_ERROR = -2147217274,
  WBEM_E_ENCRYPTED_CONNECTION_REQUIRED = -2147217273,
  WBEM_E_PROVIDER_TIMED_OUT = -2147217272,
  WBEM_E_NO_KEY = -2147217271,
  WBEM_E_PROVIDER_DISABLED = -2147217270,
  WBEMESS_E_REGISTRATION_TOO_BROAD = -2147213311,
  WBEMESS_E_REGISTRATION_TOO_PRECISE = -2147213310,
  WBEMESS_E_AUTHZ_NOT_PRIVILEGED = -2147213309,
  WBEMMOF_E_EXPECTED_QUALIFIER_NAME = -2147205119,
  WBEMMOF_E_EXPECTED_SEMI = -2147205118,
  WBEMMOF_E_EXPECTED_OPEN_BRACE = -2147205117,
  WBEMMOF_E_EXPECTED_CLOSE_BRACE = -2147205116,
  WBEMMOF_E_EXPECTED_CLOSE_BRACKET = -2147205115,
  WBEMMOF_E_EXPECTED_CLOSE_PAREN = -2147205114,
  WBEMMOF_E_ILLEGAL_CONSTANT_VALUE = -2147205113,
  WBEMMOF_E_EXPECTED_TYPE_IDENTIFIER = -2147205112,
  WBEMMOF_E_EXPECTED_OPEN_PAREN = -2147205111,
  WBEMMOF_E_UNRECOGNIZED_TOKEN = -2147205110,
  WBEMMOF_E_UNRECOGNIZED_TYPE = -2147205109,
  WBEMMOF_E_EXPECTED_PROPERTY_NAME = -2147205108,
  WBEMMOF_E_TYPEDEF_NOT_SUPPORTED = -2147205107,
  WBEMMOF_E_UNEXPECTED_ALIAS = -2147205106,
  WBEMMOF_E_UNEXPECTED_ARRAY_INIT = -2147205105,
  WBEMMOF_E_INVALID_AMENDMENT_SYNTAX = -2147205104,
  WBEMMOF_E_INVALID_DUPLICATE_AMENDMENT = -2147205103,
  WBEMMOF_E_INVALID_PRAGMA = -2147205102,
  WBEMMOF_E_INVALID_NAMESPACE_SYNTAX = -2147205101,
  WBEMMOF_E_EXPECTED_CLASS_NAME = -2147205100,
  WBEMMOF_E_TYPE_MISMATCH = -2147205099,
  WBEMMOF_E_EXPECTED_ALIAS_NAME = -2147205098,
  WBEMMOF_E_INVALID_CLASS_DECLARATION = -2147205097,
  WBEMMOF_E_INVALID_INSTANCE_DECLARATION = -2147205096,
  WBEMMOF_E_EXPECTED_DOLLAR = -2147205095,
  WBEMMOF_E_CIMTYPE_QUALIFIER = -2147205094,
  WBEMMOF_E_DUPLICATE_PROPERTY = -2147205093,
  WBEMMOF_E_INVALID_NAMESPACE_SPECIFICATION = -2147205092,
  WBEMMOF_E_OUT_OF_RANGE = -2147205091,
  WBEMMOF_E_INVALID_FILE = -2147205090,
  WBEMMOF_E_ALIASES_IN_EMBEDDED = -2147205089,
  WBEMMOF_E_NULL_ARRAY_ELEM = -2147205088,
  WBEMMOF_E_DUPLICATE_QUALIFIER = -2147205087,
  WBEMMOF_E_EXPECTED_FLAVOR_TYPE = -2147205086,
  WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES = -2147205085,
  WBEMMOF_E_MULTIPLE_ALIASES = -2147205084,
  WBEMMOF_E_INCOMPATIBLE_FLAVOR_TYPES2 = -2147205083,
  WBEMMOF_E_NO_ARRAYS_RETURNED = -2147205082,
  WBEMMOF_E_MUST_BE_IN_OR_OUT = -2147205081,
  WBEMMOF_E_INVALID_FLAGS_SYNTAX = -2147205080,
  WBEMMOF_E_EXPECTED_BRACE_OR_BAD_TYPE = -2147205079,
  WBEMMOF_E_UNSUPPORTED_CIMV22_QUAL_VALUE = -2147205078,
  WBEMMOF_E_UNSUPPORTED_CIMV22_DATA_TYPE = -2147205077,
  WBEMMOF_E_INVALID_DELETEINSTANCE_SYNTAX = -2147205076,
  WBEMMOF_E_INVALID_QUALIFIER_SYNTAX = -2147205075,
  WBEMMOF_E_QUALIFIER_USED_OUTSIDE_SCOPE = -2147205074,
  WBEMMOF_E_ERROR_CREATING_TEMP_FILE = -2147205073,
  WBEMMOF_E_ERROR_INVALID_INCLUDE_FILE = -2147205072,
  WBEMMOF_E_INVALID_DELETECLASS_SYNTAX = -2147205071,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_27, *PTAG_UNNAMED_27;

typedef enum
{
  endpoint_typeIdx = 0,
  portIdx = 1,
  clusterIdx = 2,
  addressIdx = 3,
  LastField = 4,
} TAG_UNNAMED_28, *PTAG_UNNAMED_28;

typedef enum _tagQUERYOPTION
{
  QUERY_EXPIRATION_DATE = 1,
  QUERY_TIME_OF_LAST_CHANGE = 2,
  QUERY_CONTENT_ENCODING = 3,
  QUERY_CONTENT_TYPE = 4,
  QUERY_REFRESH = 5,
  QUERY_RECOMBINE = 6,
  QUERY_CAN_NAVIGATE = 7,
  QUERY_USES_NETWORK = 8,
  QUERY_IS_CACHED = 9,
  QUERY_IS_INSTALLEDENTRY = 10,
  QUERY_IS_CACHED_OR_MAPPED = 11,
  QUERY_USES_CACHE = 12,
  QUERY_IS_SECURE = 13,
  QUERY_IS_SAFE = 14,
  QUERY_USES_HISTORYFOLDER = 15,
  QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16,
} tagQUERYOPTION, *PtagQUERYOPTION;

class AutoSpinlockHolder<259,1,1>;

struct IGlobalInterfaceTable
{
}; /* size: 0x0008 */

enum MemoryNode::FAILURES
{
  FAIL_VIRTUAL_RESERVE = 0,
  FAIL_VIRTUAL_COMMIT = 1,
  FAIL_PAGE_ALLOCATION = 2,
  FAIL_RESERVED_PAGE_ALLOCATION = 3,
  FAIL_BUFFER_ALLOCATION = 4,
  FAIL_PAGE_RESERVATION = 5,
  FAIL_LAST = 6,
};

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  timerIdx = 4,
  dialog_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_29, *PTAG_UNNAMED_29;

struct DLGTEMPLATE
{
  /* 0x0000 */ unsigned long style;
  /* 0x0004 */ unsigned long dwExtendedStyle;
  /* 0x0008 */ unsigned short cdit;
  /* 0x000a */ short x;
  /* 0x000c */ short y;
  /* 0x000e */ short cx;
  /* 0x0010 */ short cy;
}; /* size: 0x0012 */

enum WMIDPREQUESTCODE
{
  WMI_GET_ALL_DATA = 0,
  WMI_GET_SINGLE_INSTANCE = 1,
  WMI_SET_SINGLE_INSTANCE = 2,
  WMI_SET_SINGLE_ITEM = 3,
  WMI_ENABLE_EVENTS = 4,
  WMI_DISABLE_EVENTS = 5,
  WMI_ENABLE_COLLECTION = 6,
  WMI_DISABLE_COLLECTION = 7,
  WMI_REGINFO = 8,
  WMI_EXECUTE_METHOD = 9,
  WMI_CAPTURE_STATE = 10,
};

struct IEnumString
{
}; /* size: 0x0008 */

typedef struct _xml_error
{
  /* 0x0000 */ unsigned int _nLine;
  /* 0x0004 */ long Padding_15;
  /* 0x0008 */ wchar_t* _pchBuf;
  /* 0x0010 */ unsigned int _cchBuf;
  /* 0x0014 */ unsigned int _ich;
  /* 0x0018 */ wchar_t* _pszFound;
  /* 0x0020 */ wchar_t* _pszExpected;
  /* 0x0028 */ unsigned long _reserved1;
  /* 0x002c */ unsigned long _reserved2;
} xml_error, *Pxml_error; /* size: 0x0030 */

enum SHGLOBALCOUNTER
{
  GLOBALCOUNTER_SEARCHMANAGER = 0,
  GLOBALCOUNTER_SEARCHOPTIONS = 1,
  GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2,
  GLOBALCOUNTER_RATINGS = 3,
  GLOBALCOUNTER_APPROVEDSITES = 4,
  GLOBALCOUNTER_RESTRICTIONS = 5,
  GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6,
  GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7,
  GLOBALCOUNTER_OVERLAYMANAGER = 8,
  GLOBALCOUNTER_QUERYASSOCIATIONS = 9,
  GLOBALCOUNTER_IESESSIONS = 10,
  GLOBALCOUNTER_IEONLY_SESSIONS = 11,
  GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12,
  __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 13,
  GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40,
  GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41,
  __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42,
  __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43,
  GLOBALCOUNTER_RECYCLEBINENUM = 44,
  GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45,
  GLOBALCOUNTER_RATINGS_STATECOUNTER = 46,
  GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47,
  GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48,
  GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49,
  GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50,
  GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51,
  GLOBALCOUNTER_ASSOCCHANGED = 52,
  GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53,
  GLOBALCOUNTER_IMMERSIVE_SCALE_CACHE = 54,
  GLOBALCOUNTER_SETTINGSYNC_ENABLED = 55,
  GLOBALCOUNTER_MAXIMUMVALUE = 56,
};

typedef struct _UNWIND_HISTORY_TABLE_ENTRY
{
  /* 0x0000 */ unsigned __int64 ImageBase;
  /* 0x0008 */ struct _RUNTIME_FUNCTION* FunctionEntry;
} UNWIND_HISTORY_TABLE_ENTRY, *PUNWIND_HISTORY_TABLE_ENTRY; /* size: 0x0010 */

enum MemoryNotificationType
{
  memNotifyPhysicalReclaim = 1,
  memNotifyVirtualReclaim = 2,
  memNotifyPhysicalAvailable = 3,
  memNotifyVirtualAvailable = 4,
};

typedef enum
{
  stageIdx = 0,
  num_destinations_unsuppressedIdx = 1,
  num_services_deletedIdx = 2,
  did_reclassifyIdx = 3,
  LastField = 4,
} TAG_UNNAMED_30, *PTAG_UNNAMED_30;

typedef enum
{
  schema_mgr_database_idIdx = 0,
  versionIdx = 1,
  operationIdx = 2,
  hobt_idIdx = 3,
  ddl_operationIdx = 4,
  column_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_31, *PTAG_UNNAMED_31;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_32, *PTAG_UNNAMED_32;

typedef enum
{
  worker_addressIdx = 0,
  number_pagesIdx = 1,
  page_sizeIdx = 2,
  page_locationIdx = 3,
  allocator_typeIdx = 4,
  pool_idIdx = 5,
  memory_clerk_addressIdx = 6,
  memory_clerk_nameIdx = 7,
  LastField = 8,
} TAG_UNNAMED_33, *PTAG_UNNAMED_33;

struct XE_ETWActionMetadata
{
  /* 0x0000 */ struct _GUID m_packageGuid;
  /* 0x0010 */ struct XERelativeObjectId m_rid;
  /* 0x0014 */ unsigned int m_length;
}; /* size: 0x0018 */

enum WbemImpersonationLevelEnum
{
  wbemImpersonationLevelAnonymous = 1,
  wbemImpersonationLevelIdentify = 2,
  wbemImpersonationLevelImpersonate = 3,
  wbemImpersonationLevelDelegate = 4,
};

enum SYSGEOTYPE
{
  GEO_NATION = 1,
  GEO_LATITUDE = 2,
  GEO_LONGITUDE = 3,
  GEO_ISO2 = 4,
  GEO_ISO3 = 5,
  GEO_RFC1766 = 6,
  GEO_LCID = 7,
  GEO_FRIENDLYNAME = 8,
  GEO_OFFICIALNAME = 9,
  GEO_TIMEZONES = 10,
  GEO_OFFICIALLANGUAGES = 11,
  GEO_ISO_UN_NUMBER = 12,
  GEO_PARENT = 13,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_34, *PTAG_UNNAMED_34;

typedef struct _MIDL_STUB_MESSAGE
{
  /* 0x0000 */ struct _RPC_MESSAGE* RpcMsg;
  /* 0x0008 */ unsigned char* Buffer;
  /* 0x0010 */ unsigned char* BufferStart;
  /* 0x0018 */ unsigned char* BufferEnd;
  /* 0x0020 */ unsigned char* BufferMark;
  /* 0x0028 */ unsigned long BufferLength;
  /* 0x002c */ unsigned long MemorySize;
  /* 0x0030 */ unsigned char* Memory;
  /* 0x0038 */ unsigned char IsClient;
  /* 0x0039 */ unsigned char Pad;
  /* 0x003a */ unsigned short uFlags2;
  /* 0x003c */ int ReuseBuffer;
  /* 0x0040 */ struct NDR_ALLOC_ALL_NODES_CONTEXT* pAllocAllNodesContext;
  /* 0x0048 */ struct NDR_POINTER_QUEUE_STATE* pPointerQueueState;
  /* 0x0050 */ int IgnoreEmbeddedPointers;
  /* 0x0054 */ long Padding_16;
  /* 0x0058 */ unsigned char* PointerBufferMark;
  /* 0x0060 */ unsigned char CorrDespIncrement;
  /* 0x0061 */ unsigned char uFlags;
  /* 0x0062 */ unsigned short UniquePtrCount;
  /* 0x0064 */ long Padding_17;
  /* 0x0068 */ unsigned __int64 MaxCount;
  /* 0x0070 */ unsigned long Offset;
  /* 0x0074 */ unsigned long ActualCount;
  /* 0x0078 */ void* pfnAllocate /* function */;
  /* 0x0080 */ void* pfnFree /* function */;
  /* 0x0088 */ unsigned char* StackTop;
  /* 0x0090 */ unsigned char* pPresentedType;
  /* 0x0098 */ unsigned char* pTransmitType;
  /* 0x00a0 */ void* SavedHandle;
  /* 0x00a8 */ const struct _MIDL_STUB_DESC* StubDesc;
  /* 0x00b0 */ struct _FULL_PTR_XLAT_TABLES* FullPtrXlatTables;
  /* 0x00b8 */ unsigned long FullPtrRefId;
  /* 0x00bc */ unsigned long PointerLength;
  struct /* bitfield */
  {
    /* 0x00c0 */ int fInDontFree : 1; /* bit position: 0 */
    /* 0x00c0 */ int fDontCallFreeInst : 1; /* bit position: 1 */
    /* 0x00c0 */ int fInOnlyParam : 1; /* bit position: 2 */
    /* 0x00c0 */ int fHasReturn : 1; /* bit position: 3 */
    /* 0x00c0 */ int fHasExtensions : 1; /* bit position: 4 */
    /* 0x00c0 */ int fHasNewCorrDesc : 1; /* bit position: 5 */
    /* 0x00c0 */ int fIsIn : 1; /* bit position: 6 */
    /* 0x00c0 */ int fIsOut : 1; /* bit position: 7 */
    /* 0x00c0 */ int fIsOicf : 1; /* bit position: 8 */
    /* 0x00c0 */ int fBufferValid : 1; /* bit position: 9 */
    /* 0x00c0 */ int fHasMemoryValidateCallback : 1; /* bit position: 10 */
    /* 0x00c0 */ int fInFree : 1; /* bit position: 11 */
    /* 0x00c0 */ int fNeedMCCP : 1; /* bit position: 12 */
    /* 0x00c0 */ int fUnused : 3; /* bit position: 13 */
    /* 0x00c0 */ int fUnused2 : 16; /* bit position: 16 */
  }; /* bitfield */
  /* 0x00c4 */ unsigned long dwDestContext;
  /* 0x00c8 */ void* pvDestContext;
  /* 0x00d0 */ struct
  {
    /* 0x00d0 */ void* pad[2];
    /* 0x00e0 */ void* userContext;
  } /* size: 0x0018 */** SavedContextHandles;
  /* 0x00d8 */ long ParamNumber;
  /* 0x00dc */ long Padding_18;
  /* 0x00e0 */ struct IRpcChannelBuffer* pRpcChannelBuffer;
  /* 0x00e8 */ struct ARRAY_INFO* pArrayInfo;
  /* 0x00f0 */ unsigned long* SizePtrCountArray;
  /* 0x00f8 */ unsigned long* SizePtrOffsetArray;
  /* 0x0100 */ unsigned long* SizePtrLengthArray;
  /* 0x0108 */ void* pArgQueue;
  /* 0x0110 */ unsigned long dwStubPhase;
  /* 0x0114 */ long Padding_19;
  /* 0x0118 */ void* LowStackMark;
  /* 0x0120 */ struct _NDR_ASYNC_MESSAGE* pAsyncMsg;
  /* 0x0128 */ struct _NDR_CORRELATION_INFO* pCorrInfo;
  /* 0x0130 */ unsigned char* pCorrMemory;
  /* 0x0138 */ void* pMemoryList;
  /* 0x0140 */ __int64 pCSInfo;
  /* 0x0148 */ unsigned char* ConformanceMark;
  /* 0x0150 */ unsigned char* VarianceMark;
  /* 0x0158 */ __int64 Unused;
  /* 0x0160 */ struct _NDR_PROC_CONTEXT* pContext;
  /* 0x0168 */ void* ContextHandleHash;
  /* 0x0170 */ void* pUserMarshalList;
  /* 0x0178 */ __int64 Reserved51_3;
  /* 0x0180 */ __int64 Reserved51_4;
  /* 0x0188 */ __int64 Reserved51_5;
} MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE; /* size: 0x0190 */

typedef enum
{
  ListElementOffset = 8,
} TAG_UNNAMED_35, *PTAG_UNNAMED_35;

struct SrvProcSLock
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::cpp_quoteAttribute
{
  /* 0x0000 */ const char* string;
} _vc_attributes::cpp_quoteAttribute, *P_vc_attributes::cpp_quoteAttribute; /* size: 0x0008 */

typedef enum _tagPARSEACTION
{
  PARSE_CANONICALIZE = 1,
  PARSE_FRIENDLY = 2,
  PARSE_SECURITY_URL = 3,
  PARSE_ROOTDOCUMENT = 4,
  PARSE_DOCUMENT = 5,
  PARSE_ANCHOR = 6,
  PARSE_ENCODE_IS_UNESCAPE = 7,
  PARSE_DECODE_IS_ESCAPE = 8,
  PARSE_PATH_FROM_URL = 9,
  PARSE_URL_FROM_PATH = 10,
  PARSE_MIME = 11,
  PARSE_SERVER = 12,
  PARSE_SCHEMA = 13,
  PARSE_SITE = 14,
  PARSE_DOMAIN = 15,
  PARSE_LOCATION = 16,
  PARSE_SECURITY_DOMAIN = 17,
  PARSE_ESCAPE = 18,
  PARSE_UNESCAPE = 19,
} tagPARSEACTION, *PtagPARSEACTION;

struct IGlobalOptions
{
}; /* size: 0x0008 */

class ExDumpTriggers
{
  union
  {
    /* 0x0000 */ const unsigned int TRIGGERS_PER_BLOCK;
    /* 0x0000 */ class ExDumpTriggers* m_next;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned long m_triggers[8];
}; /* size: 0x0028 */

enum ReplacesCorHdrNumericDefines
{
  COMIMAGE_FLAGS_ILONLY = 1,
  COMIMAGE_FLAGS_32BITREQUIRED = 2,
  COMIMAGE_FLAGS_IL_LIBRARY = 4,
  COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
  COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
  COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x10000,
  COR_VERSION_MAJOR_V2 = 2,
  COR_VERSION_MAJOR = 2,
  COR_VERSION_MINOR = 5,
  COR_DELETED_NAME_LENGTH = 8,
  COR_VTABLEGAP_NAME_LENGTH = 8,
  NATIVE_TYPE_MAX_CB = 1,
  COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
  IMAGE_COR_MIH_METHODRVA = 1,
  IMAGE_COR_MIH_EHRVA = 2,
  IMAGE_COR_MIH_BASICBLOCK = 8,
  COR_VTABLE_32BIT = 1,
  COR_VTABLE_64BIT = 2,
  COR_VTABLE_FROM_UNMANAGED = 4,
  COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
  COR_VTABLE_CALL_MOST_DERIVED = 16,
  IMAGE_COR_EATJ_THUNK_SIZE = 32,
  MAX_CLASS_NAME = 1024,
  MAX_PACKAGE_NAME = 1024,
};

enum XECustomizableAttrAggregation
{
  XEAGG_MAX = 0,
  XEAGG_FLAG = 1,
  XEAGG_LAST = 2,
};

enum XECustomizableAttrCapabilities
{
  XECAC_MANDATORY = 1,
  XECAC_DEFAULT = 0,
};

struct XECustomizableAttribute
{
  /* 0x0000 */ struct XERelativeObjectId m_type;
  /* 0x0004 */ long Padding_20;
  /* 0x0008 */ const wchar_t* m_name;
  /* 0x0010 */ unsigned __int64 m_value;
  /* 0x0018 */ unsigned __int64 m_defaultValue;
  /* 0x0020 */ enum XECustomizableAttrAggregation m_aggregation;
  /* 0x0024 */ enum XECustomizableAttrCapabilities m_capabilities;
  /* 0x0028 */ const wchar_t* m_description;
  /* 0x0030 */ unsigned int m_resourceid;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

struct XE_TArray<XECustomizableAttribute,2>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[2];
}; /* size: 0x0070 */

struct XE_TArray<XEDataAttribute,10>
{
  /* 0x0000 */ struct XEDataAttribute m_array[10];
}; /* size: 0x0190 */

struct XE_TEvent<4,2,10>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,10> m_dynamicAttr;
  /* 0x02a0 */ struct XEEvent m_event;
}; /* size: 0x02e8 */

class XeSqlPkg::sp_statement_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_21[140];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x0039 */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int nest_levelOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x02e8 */
}; /* size: 0x0270 */

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  deadlock_idIdx = 11,
  object_idIdx = 12,
  associated_object_idIdx = 13,
  durationIdx = 14,
  resource_descriptionIdx = 15,
  database_nameIdx = 16,
  LastField = 17,
} TAG_UNNAMED_36, *PTAG_UNNAMED_36;

typedef enum
{
  MAX_IOS = 128,
  MAX_VOLUMES = 60,
  CALIBRATED_MAXIOBW = 100,
  CALIBRATED_MAXIOSINPROGRESS = 10,
} TAG_UNNAMED_37, *PTAG_UNNAMED_37;

class XE_ResolvedObjectXML<XEPredicateSource>
{
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 25,
} TAG_UNNAMED_38, *PTAG_UNNAMED_38;

struct NDR_ALLOC_ALL_NODES_CONTEXT;

class CAutoP<XEPackage0::RingTarget::PackageEntry>
{
}; /* size: 0x0008 */

typedef enum
{
  tasks_countIdx = 0,
  execution_flagsIdx = 1,
  LastField = 2,
} TAG_UNNAMED_39, *PTAG_UNNAMED_39;

typedef struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL
{
  /* 0x0000 */ void* ResolutionContext;
  /* 0x0008 */ unsigned long RootIndexUsed;
  /* 0x000c */ long __PADDING__[1];
} ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL, *PASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_40, *PTAG_UNNAMED_40;

enum WbemPrivilegeEnum
{
  wbemPrivilegeCreateToken = 1,
  wbemPrivilegePrimaryToken = 2,
  wbemPrivilegeLockMemory = 3,
  wbemPrivilegeIncreaseQuota = 4,
  wbemPrivilegeMachineAccount = 5,
  wbemPrivilegeTcb = 6,
  wbemPrivilegeSecurity = 7,
  wbemPrivilegeTakeOwnership = 8,
  wbemPrivilegeLoadDriver = 9,
  wbemPrivilegeSystemProfile = 10,
  wbemPrivilegeSystemtime = 11,
  wbemPrivilegeProfileSingleProcess = 12,
  wbemPrivilegeIncreaseBasePriority = 13,
  wbemPrivilegeCreatePagefile = 14,
  wbemPrivilegeCreatePermanent = 15,
  wbemPrivilegeBackup = 16,
  wbemPrivilegeRestore = 17,
  wbemPrivilegeShutdown = 18,
  wbemPrivilegeDebug = 19,
  wbemPrivilegeAudit = 20,
  wbemPrivilegeSystemEnvironment = 21,
  wbemPrivilegeChangeNotify = 22,
  wbemPrivilegeRemoteShutdown = 23,
  wbemPrivilegeUndock = 24,
  wbemPrivilegeSyncAgent = 25,
  wbemPrivilegeEnableDelegation = 26,
  wbemPrivilegeManageVolume = 27,
};

struct CXFileHeader
{
  union
  {
    /* 0x0000 */ const unsigned int CX_FILE_MAGIC_BITS;
    /* 0x0000 */ const unsigned int CX_FILE_VER_1;
    /* 0x0000 */ const unsigned int CX_FILE_ENCODER;
    /* 0x0000 */ const unsigned int CX_MIN_PAGE_SIZE;
    /* 0x0000 */ const unsigned int CX_MAX_PAGE_SIZE;
    /* 0x0000 */ unsigned int m_majic;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned int m_ver;
  /* 0x0008 */ unsigned int m_encoder;
  /* 0x000c */ unsigned int m_pageSize;
  /* 0x0010 */ unsigned int m_sectorSize;
  /* 0x0014 */ unsigned long m_options;
  /* 0x0018 */ unsigned int m_directorySize;
  /* 0x001c */ unsigned long m_cleanShutdown;
}; /* size: 0x0020 */

class XE_AutoP<void>
{
}; /* size: 0x0008 */

class CXFile
{
  union
  {
    /* 0x0000 */ const unsigned long NO_COMPRESSION;
    /* 0x0000 */ const unsigned long NO_CHECKSUM;
    /* 0x0000 */ const unsigned long SEQUENTIONAL_ONLY;
    /* 0x0000 */ const unsigned __int64 MAX_ENTRY_SIZE;
    /* 0x0000 */ struct CXFileHeader m_fileHeader;
  }; /* size: 0x0020 */
  /* 0x0020 */ wchar_t m_fileName[260];
  /* 0x0228 */ struct CXFileDirectoryEntry* m_dirEntries;
  /* 0x0230 */ class XE_AutoP<void> m_dirEntriesAllocation;
  /* 0x0238 */ unsigned int m_dirTableStart;
  /* 0x023c */ unsigned int m_dirTableLength;
  /* 0x0240 */ unsigned __int64 m_filePosition;
}; /* size: 0x0248 */

typedef struct __vc_attributes::helper_attributes::default_valueAttribute
{
  /* 0x0000 */ void* value;
} _vc_attributes::helper_attributes::default_valueAttribute, *P_vc_attributes::helper_attributes::default_valueAttribute; /* size: 0x0008 */

class CAutoP<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > >
{
}; /* size: 0x0008 */

typedef enum
{
  error_numberIdx = 0,
  file_sizeIdx = 1,
  file_pathIdx = 2,
  LastField = 3,
} TAG_UNNAMED_41, *PTAG_UNNAMED_41;

struct XE_TArray<XECustomizableAttribute,1>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[1];
}; /* size: 0x0038 */

struct XE_TArray<XEDataAttribute,14>
{
  /* 0x0000 */ struct XEDataAttribute m_array[14];
}; /* size: 0x0230 */

struct XE_TEvent<4,1,14>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,14> m_dynamicAttr;
  /* 0x0308 */ struct XEEvent m_event;
}; /* size: 0x0350 */

class XeSqlPkg::preconnect_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,14> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_22[140];
      /* 0x0240 */ unsigned char m_buf[83];
    }; /* size: 0x0063 */
    /* 0x0000 */ const int preconnect_typeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int workload_group_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0350 */
}; /* size: 0x0298 */

enum WbemCimtypeEnum
{
  wbemCimtypeSint8 = 16,
  wbemCimtypeUint8 = 17,
  wbemCimtypeSint16 = 2,
  wbemCimtypeUint16 = 18,
  wbemCimtypeSint32 = 3,
  wbemCimtypeUint32 = 19,
  wbemCimtypeSint64 = 20,
  wbemCimtypeUint64 = 21,
  wbemCimtypeReal32 = 4,
  wbemCimtypeReal64 = 5,
  wbemCimtypeBoolean = 11,
  wbemCimtypeString = 8,
  wbemCimtypeDatetime = 101,
  wbemCimtypeReference = 102,
  wbemCimtypeChar16 = 103,
  wbemCimtypeObject = 13,
};

typedef struct _s__RTTIBaseClassArray
{
  union
  {
    /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2** arrayOfBaseClassDescriptors /* zero-length array */;
    /* 0x0000 */ long __PADDING__[1];
  }; /* size: 0x0004 */
} s__RTTIBaseClassArray, *Ps__RTTIBaseClassArray; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 33,
  NVld = 0,
  VldEddOffset = 32,
  BufSize = 196,
} TAG_UNNAMED_42, *PTAG_UNNAMED_42;

enum AllocOptions
{
  NoAllocOption = 0,
  PartOfReservation = 1,
  NoExternalNotification = 2,
  DecommitPage = 4,
  TryOnlyCurrentNode = 8,
};

typedef struct __vc_attributes::lcidAttribute
{
} _vc_attributes::lcidAttribute, *P_vc_attributes::lcidAttribute; /* size: 0x0001 */

typedef enum __MIDL_IInternetSecurityManager_0001
{
  PUAF_DEFAULT = 0,
  PUAF_NOUI = 1,
  PUAF_ISFILE = 2,
  PUAF_WARN_IF_DENIED = 4,
  PUAF_FORCEUI_FOREGROUND = 8,
  PUAF_CHECK_TIFS = 16,
  PUAF_DONTCHECKBOXINDIALOG = 32,
  PUAF_TRUSTED = 64,
  PUAF_ACCEPT_WILDCARD_SCHEME = 128,
  PUAF_ENFORCERESTRICTED = 256,
  PUAF_NOSAVEDFILECHECK = 512,
  PUAF_REQUIRESAVEDFILECHECK = 1024,
  PUAF_DONT_USE_CACHE = 4096,
  PUAF_RESERVED1 = 8192,
  PUAF_RESERVED2 = 16384,
  PUAF_LMZ_UNLOCKED = 0x10000,
  PUAF_LMZ_LOCKED = 0x20000,
  PUAF_DEFAULTZONEPOL = 0x40000,
  PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 0x80000,
  PUAF_NOUIIFLOCKED = 0x100000,
  PUAF_DRAGPROTOCOLCHECK = 0x200000,
} _MIDL_IInternetSecurityManager_0001, *P_MIDL_IInternetSecurityManager_0001;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
  /* 0x0000 */ unsigned long EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION; /* size: 0x0004 */

enum PROXY_PHASE
{
  PROXY_CALCSIZE = 0,
  PROXY_GETBUFFER = 1,
  PROXY_MARSHAL = 2,
  PROXY_SENDRECEIVE = 3,
  PROXY_UNMARSHAL = 4,
};

typedef enum
{
  use_local_rowsetIdx = 0,
  row_deletedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_43, *PTAG_UNNAMED_43;

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_44, *PTAG_UNNAMED_44;

class Spinlock<289,1,1>
{
}; /* size: 0x0004 */

struct std::_Pair_base<XE_FileSet::Entry *,XE_FileSet::Entry *>
{
  /* 0x0000 */ class XE_FileSet::Entry* first;
  /* 0x0008 */ class XE_FileSet::Entry* second;
}; /* size: 0x0010 */

enum SOSHOST_IOTYPE
{
  SOSHOST_IOTYPE_DISKIO = 0,
  SOSHOST_IOTYPE_NETWORKIO = 1,
  SOSHOST_IOTYPE_LAST = 2,
};

typedef union _LARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ __int64 QuadPart;
  }; /* size: 0x0008 */
} LARGE_INTEGER, *PLARGE_INTEGER; /* size: 0x0008 */

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER TotalUserTime;
  /* 0x0008 */ union _LARGE_INTEGER TotalKernelTime;
  /* 0x0010 */ union _LARGE_INTEGER ThisPeriodTotalUserTime;
  /* 0x0018 */ union _LARGE_INTEGER ThisPeriodTotalKernelTime;
  /* 0x0020 */ unsigned long TotalPageFaultCount;
  /* 0x0024 */ unsigned long TotalProcesses;
  /* 0x0028 */ unsigned long ActiveProcesses;
  /* 0x002c */ unsigned long TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION; /* size: 0x0030 */

typedef struct _IO_COUNTERS
{
  /* 0x0000 */ unsigned __int64 ReadOperationCount;
  /* 0x0008 */ unsigned __int64 WriteOperationCount;
  /* 0x0010 */ unsigned __int64 OtherOperationCount;
  /* 0x0018 */ unsigned __int64 ReadTransferCount;
  /* 0x0020 */ unsigned __int64 WriteTransferCount;
  /* 0x0028 */ unsigned __int64 OtherTransferCount;
} IO_COUNTERS, *PIO_COUNTERS; /* size: 0x0030 */

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
  /* 0x0000 */ struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
  /* 0x0030 */ struct _IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION; /* size: 0x0060 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_45, *PTAG_UNNAMED_45;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_46, *PTAG_UNNAMED_46;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 7,
  NVld = 3,
  VldEddOffset = 3,
  BufSize = 42,
} TAG_UNNAMED_47, *PTAG_UNNAMED_47;

class TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

typedef enum _IDL_CS_CONVERT
{
  IDL_CS_NO_CONVERT = 0,
  IDL_CS_IN_PLACE_CONVERT = 1,
  IDL_CS_NEW_BUFFER_CONVERT = 2,
} IDL_CS_CONVERT, *PIDL_CS_CONVERT;

struct tagMULTI_QI
{
  /* 0x0000 */ const struct _GUID* pIID;
  /* 0x0008 */ struct IUnknown* pItf;
  /* 0x0010 */ HRESULT hr;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

enum CAutoSetupExecContextsForInternalTasks::EStartupErrorHandling
{
  x_StopServerOnStartupError = 0,
  x_ErrorlogAndThrowOnStartupError = 1,
};

class CAutoBase<XE_BufferMap>
{
  /* 0x0000 */ class XE_BufferMap* m_pt;
}; /* size: 0x0008 */

enum ASSOCDATA
{
  ASSOCDATA_MSIDESCRIPTOR = 1,
  ASSOCDATA_NOACTIVATEHANDLER = 2,
  ASSOCDATA_QUERYCLASSSTORE = 3,
  ASSOCDATA_HASPERUSERASSOC = 4,
  ASSOCDATA_EDITFLAGS = 5,
  ASSOCDATA_VALUE = 6,
  ASSOCDATA_MAX = 7,
};

typedef struct _SERVICE_STATUS
{
  /* 0x0000 */ unsigned long dwServiceType;
  /* 0x0004 */ unsigned long dwCurrentState;
  /* 0x0008 */ unsigned long dwControlsAccepted;
  /* 0x000c */ unsigned long dwWin32ExitCode;
  /* 0x0010 */ unsigned long dwServiceSpecificExitCode;
  /* 0x0014 */ unsigned long dwCheckPoint;
  /* 0x0018 */ unsigned long dwWaitHint;
} SERVICE_STATUS, *PSERVICE_STATUS; /* size: 0x001c */

typedef struct _FILETIME
{
  /* 0x0000 */ unsigned long dwLowDateTime;
  /* 0x0004 */ unsigned long dwHighDateTime;
} FILETIME, *PFILETIME; /* size: 0x0008 */

class CMallocSpy
{
  /* 0x0000 */ long Padding_23[2];
  /* 0x0008 */ char m_szDebugName[256];
  /* 0x0108 */ unsigned __int64 m_cbCurSize;
  /* 0x0110 */ int m_iCurLine;
  /* 0x0114 */ long Padding_24;
  /* 0x0118 */ const char* m_szCurFile;
  /* 0x0120 */ unsigned char m_bCurTag;
  /* 0x0121 */ char Padding_25[7];
  /* 0x0128 */ class CMallocSpy::CDebugData* m_pddRealloc;
  /* 0x0130 */ unsigned long m_cRef;
  /* 0x0134 */ unsigned long m_cAllocCalls;
  /* 0x0138 */ unsigned __int64 m_rgcbAllocTotal[32];
  /* 0x0238 */ unsigned __int64 m_rgcbFreeTotal[32];
  /* 0x0338 */ unsigned long m_cFreeCalls;
  /* 0x033c */ long Padding_26;
  /* 0x0340 */ class CMallocSpy::CDebugData* m_pddMemList;
  /* 0x0348 */ unsigned long m_cbFailCb;
  struct /* bitfield */
  {
    /* 0x034c */ unsigned long m_fStrict : 1; /* bit position: 0 */
    /* 0x034c */ unsigned long m_fTrackOn : 1; /* bit position: 1 */
    /* 0x034c */ unsigned long m_fAllowLarge : 1; /* bit position: 2 */
    /* 0x034c */ unsigned long m_fReadOnly : 1; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0350 */ unsigned long m_bTraceOpt;
  /* 0x0354 */ struct _FILETIME m_creationTime;
  /* 0x035c */ unsigned long m_order;
  /* 0x0360 */ unsigned long m_rgcAllocHist[8];
  /* 0x0380 */ void* m_pvMark;
  /* 0x0388 */ class CMallocSpy::CDebugData* m_pddNextToIterate;
  /* 0x0390 */ class StackFrames<16>* m_pFrames;
  /* 0x0398 */ unsigned long m_cPinnedAllocs;
  /* 0x039c */ long Padding_27;
  /* 0x03a0 */ const class IMemObj* m_parentPmo;
  union
  {
    /* 0x0000 */ unsigned long sm_allocationOrder;
    /* 0x0000 */ const unsigned __int64 SizeofCGuardBytes;
    /* 0x0000 */ const char** sm_MemObjTagsToNames /* zero-length array */;
  }; /* size: 0x0008 */
}; /* size: 0x03a8 */

class CMemDbg<CMemObj>
{
  /* 0x0000 */ const unsigned __int64 xsm_cbMaxSizeFitsOnPage;
  /* 0x0008 */ long Padding_28[66];
  /* 0x0110 */ class SOS_Task* m_pTask;
  /* 0x0118 */ int m_fUseFree;
  /* 0x011c */ unsigned long m_bTraceOptions;
  /* 0x0120 */ class CMallocSpy m_msSpy;
  /* 0x04c8 */ int m_fReadOnly;
  /* 0x04cc */ int m_fCheckThreadAccess;
  /* 0x04d0 */ int m_fBeingDestroyed;
  /* 0x04d4 */ long Padding_29;
  /* 0x04d8 */ class Worker* m_pLockOwner;
}; /* size: 0x04e0 */

typedef enum
{
  ReaderBit = 1,
  ReaderCountMask = -2,
  ReaderCountShift = 1,
} TAG_UNNAMED_48, *PTAG_UNNAMED_48;

typedef struct _KEY_NAME_INFORMATION
{
  /* 0x0000 */ unsigned long NameLength;
  /* 0x0004 */ wchar_t Name[1];
  /* 0x0006 */ char __PADDING__[2];
} KEY_NAME_INFORMATION, *PKEY_NAME_INFORMATION; /* size: 0x0008 */

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_49, *PTAG_UNNAMED_49;

struct XEMapEntry
{
  /* 0x0000 */ unsigned int m_code;
  /* 0x0004 */ long Padding_30;
  /* 0x0008 */ const wchar_t* m_str;
}; /* size: 0x0010 */

enum tagSTGC
{
  STGC_DEFAULT = 0,
  STGC_OVERWRITE = 1,
  STGC_ONLYIFCURRENT = 2,
  STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
  STGC_CONSOLIDATE = 8,
};

typedef enum
{
  conversation_group_actionIdx = 0,
  conversation_group_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_50, *PTAG_UNNAMED_50;

enum SYSTEM_POWER_CONDITION
{
  PoAc = 0,
  PoDc = 1,
  PoHot = 2,
  PoConditionMaximum = 3,
};

typedef enum
{
  pool_idIdx = 0,
  databasepages_memoryIdx = 1,
  cache_memoryIdx = 2,
  compile_memoryIdx = 3,
  used_memoryIdx = 4,
  target_memoryIdx = 5,
  LastField = 6,
} TAG_UNNAMED_51, *PTAG_UNNAMED_51;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_52, *PTAG_UNNAMED_52;

enum DISTRIBUTED_CACHEID
{
  DISTRIBUTED_CACHE_TEST = 0,
  DISTRIBUTED_CACHE_OBJCP = 1,
  DISTRIBUTED_CACHE_SQLCP = 2,
  DISTRIBUTED_CACHE_LAST = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 30,
} TAG_UNNAMED_53, *PTAG_UNNAMED_53;

struct IBindCallbackRedirect
{
}; /* size: 0x0008 */

typedef enum
{
  addressIdx = 0,
  sizeIdx = 1,
  tagIdx = 2,
  allocation_stampIdx = 3,
  pmo_addressIdx = 4,
  pmo_typeIdx = 5,
  LastField = 6,
} TAG_UNNAMED_54, *PTAG_UNNAMED_54;

struct AsyncIPipeDouble
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 36,
} TAG_UNNAMED_55, *PTAG_UNNAMED_55;

typedef enum _TRACE_QUERY_INFO_CLASS
{
  TraceGuidQueryList = 0,
  TraceGuidQueryInfo = 1,
  TraceGuidQueryProcess = 2,
  TraceStackTracingInfo = 3,
  TraceSystemTraceEnableFlagsInfo = 4,
  TraceSampledProfileIntervalInfo = 5,
  TraceProfileSourceConfigInfo = 6,
  TraceProfileSourceListInfo = 7,
  TracePmcEventListInfo = 8,
  TracePmcCounterListInfo = 9,
  MaxTraceSetInfoClass = 10,
} TRACE_QUERY_INFO_CLASS, *PTRACE_QUERY_INFO_CLASS;

struct tagRMTPACK
{
  /* 0x0000 */ struct ISequentialStream* pISeqStream;
  /* 0x0008 */ unsigned long cbData;
  /* 0x000c */ unsigned long cBSTR;
  /* 0x0010 */ wchar_t** rgBSTR;
  /* 0x0018 */ unsigned long cVARIANT;
  /* 0x001c */ long Padding_31;
  /* 0x0020 */ struct tagVARIANT* rgVARIANT;
  /* 0x0028 */ unsigned long cIDISPATCH;
  /* 0x002c */ long Padding_32;
  /* 0x0030 */ struct IDispatch** rgIDISPATCH;
  /* 0x0038 */ unsigned long cIUNKNOWN;
  /* 0x003c */ long Padding_33;
  /* 0x0040 */ struct IUnknown** rgIUNKNOWN;
  /* 0x0048 */ unsigned long cPROPVARIANT;
  /* 0x004c */ long Padding_34;
  /* 0x0050 */ struct tagPROPVARIANT* rgPROPVARIANT;
  /* 0x0058 */ unsigned long cArray;
  /* 0x005c */ long Padding_35;
  /* 0x0060 */ struct tagVARIANT* rgArray;
}; /* size: 0x0068 */

typedef enum
{
  message_typeIdx = 0,
  message_sub_typeIdx = 1,
  statusIdx = 2,
  backup_lsnIdx = 3,
  oldest_xact_lsnIdx = 4,
  min_skip_lsnIdx = 5,
  message_log_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_56, *PTAG_UNNAMED_56;

typedef enum
{
  statementIdx = 0,
  LastField = 1,
} TAG_UNNAMED_57, *PTAG_UNNAMED_57;

typedef enum _PROCESSOR_CACHE_TYPE
{
  CacheUnified = 0,
  CacheInstruction = 1,
  CacheData = 2,
  CacheTrace = 3,
} PROCESSOR_CACHE_TYPE, *PPROCESSOR_CACHE_TYPE;

typedef struct _CACHE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char Associativity;
  /* 0x0002 */ unsigned short LineSize;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ enum _PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR; /* size: 0x000c */

typedef enum
{
  operationIdx = 0,
  endpoint_typeIdx = 1,
  eventIdx = 2,
  stateIdx = 3,
  actionIdx = 4,
  connection_idIdx = 5,
  addressIdx = 6,
  LastField = 7,
} TAG_UNNAMED_58, *PTAG_UNNAMED_58;

enum tagTYPEKIND
{
  TKIND_ENUM = 0,
  TKIND_RECORD = 1,
  TKIND_MODULE = 2,
  TKIND_INTERFACE = 3,
  TKIND_DISPATCH = 4,
  TKIND_COCLASS = 5,
  TKIND_ALIAS = 6,
  TKIND_UNION = 7,
  TKIND_MAX = 8,
};

typedef enum
{
  OsPageSize = 4096,
} TAG_UNNAMED_59, *PTAG_UNNAMED_59;

typedef enum
{
  worker_addressIdx = 0,
  number_pagesIdx = 1,
  page_sizeIdx = 2,
  page_locationIdx = 3,
  allocator_typeIdx = 4,
  numa_node_idIdx = 5,
  steal_optionsIdx = 6,
  pool_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_60, *PTAG_UNNAMED_60;

class PeriodicTimer<120000>::AutoCheck
{
  /* 0x0000 */ class PeriodicTimer<120000>* m_timer;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_currentTime;
}; /* size: 0x0010 */

enum tagBINDSTATUS
{
  BINDSTATUS_FINDINGRESOURCE = 1,
  BINDSTATUS_CONNECTING = 2,
  BINDSTATUS_REDIRECTING = 3,
  BINDSTATUS_BEGINDOWNLOADDATA = 4,
  BINDSTATUS_DOWNLOADINGDATA = 5,
  BINDSTATUS_ENDDOWNLOADDATA = 6,
  BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
  BINDSTATUS_INSTALLINGCOMPONENTS = 8,
  BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
  BINDSTATUS_USINGCACHEDCOPY = 10,
  BINDSTATUS_SENDINGREQUEST = 11,
  BINDSTATUS_CLASSIDAVAILABLE = 12,
  BINDSTATUS_MIMETYPEAVAILABLE = 13,
  BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
  BINDSTATUS_BEGINSYNCOPERATION = 15,
  BINDSTATUS_ENDSYNCOPERATION = 16,
  BINDSTATUS_BEGINUPLOADDATA = 17,
  BINDSTATUS_UPLOADINGDATA = 18,
  BINDSTATUS_ENDUPLOADDATA = 19,
  BINDSTATUS_PROTOCOLCLASSID = 20,
  BINDSTATUS_ENCODING = 21,
  BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
  BINDSTATUS_CLASSINSTALLLOCATION = 23,
  BINDSTATUS_DECODING = 24,
  BINDSTATUS_LOADINGMIMEHANDLER = 25,
  BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
  BINDSTATUS_FILTERREPORTMIMETYPE = 27,
  BINDSTATUS_CLSIDCANINSTANTIATE = 28,
  BINDSTATUS_IUNKNOWNAVAILABLE = 29,
  BINDSTATUS_DIRECTBIND = 30,
  BINDSTATUS_RAWMIMETYPE = 31,
  BINDSTATUS_PROXYDETECTING = 32,
  BINDSTATUS_ACCEPTRANGES = 33,
  BINDSTATUS_COOKIE_SENT = 34,
  BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
  BINDSTATUS_COOKIE_SUPPRESSED = 36,
  BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
  BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
  BINDSTATUS_COOKIE_STATE_REJECT = 39,
  BINDSTATUS_COOKIE_STATE_PROMPT = 40,
  BINDSTATUS_COOKIE_STATE_LEASH = 41,
  BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
  BINDSTATUS_POLICY_HREF = 43,
  BINDSTATUS_P3P_HEADER = 44,
  BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
  BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
  BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
  BINDSTATUS_CACHECONTROL = 48,
  BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
  BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
  BINDSTATUS_PUBLISHERAVAILABLE = 51,
  BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
  BINDSTATUS_SSLUX_NAVBLOCKED = 53,
  BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
  BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
  BINDSTATUS_64BIT_PROGRESS = 56,
  BINDSTATUS_LAST = 56,
  BINDSTATUS_RESERVED_0 = 57,
  BINDSTATUS_RESERVED_1 = 58,
  BINDSTATUS_RESERVED_2 = 59,
  BINDSTATUS_RESERVED_3 = 60,
  BINDSTATUS_RESERVED_4 = 61,
  BINDSTATUS_RESERVED_5 = 62,
  BINDSTATUS_RESERVED_6 = 63,
  BINDSTATUS_RESERVED_7 = 64,
  BINDSTATUS_RESERVED_8 = 65,
  BINDSTATUS_RESERVED_9 = 66,
  BINDSTATUS_LAST_PRIVATE = 66,
};

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  session_idIdx = 2,
  error_codeIdx = 3,
  api_nameIdx = 4,
  calling_api_nameIdx = 5,
  call_stackIdx = 6,
  LastField = 7,
} TAG_UNNAMED_61, *PTAG_UNNAMED_61;

class SOS_MemoryBlockAllocatorFinalizer
{
  /* 0x0000 */ class SOS_MemoryBlockAllocatorFinalizer* sm_rgpFinalizer[1];
}; /* size: 0x0008 */

enum SHREGDEL_FLAGS
{
  SHREGDEL_DEFAULT = 0,
  SHREGDEL_HKCU = 1,
  SHREGDEL_HKLM = 16,
  SHREGDEL_BOTH = 17,
};

enum AllocationFailMode
{
  ALLOCATIONFAIL_RETRY = 0,
  ALLOCATIONFAIL_FAST = 1,
  ALLOCATIONFAIL_SILENT = 2,
  ALLOCATIONFAIL_NOZERO = 4,
  ALLOCATIONFAIL_FAST_PAGES = 8,
  ALLOCATIONFAIL_NO_OTHER_NODES = 16,
};

struct tagLOGFONTW
{
  /* 0x0000 */ long lfHeight;
  /* 0x0004 */ long lfWidth;
  /* 0x0008 */ long lfEscapement;
  /* 0x000c */ long lfOrientation;
  /* 0x0010 */ long lfWeight;
  /* 0x0014 */ unsigned char lfItalic;
  /* 0x0015 */ unsigned char lfUnderline;
  /* 0x0016 */ unsigned char lfStrikeOut;
  /* 0x0017 */ unsigned char lfCharSet;
  /* 0x0018 */ unsigned char lfOutPrecision;
  /* 0x0019 */ unsigned char lfClipPrecision;
  /* 0x001a */ unsigned char lfQuality;
  /* 0x001b */ unsigned char lfPitchAndFamily;
  /* 0x001c */ wchar_t lfFaceName[32];
}; /* size: 0x005c */

struct tagENUMLOGFONTEXW
{
  /* 0x0000 */ struct tagLOGFONTW elfLogFont;
  /* 0x005c */ wchar_t elfFullName[64];
  /* 0x00dc */ wchar_t elfStyle[32];
  /* 0x011c */ wchar_t elfScript[32];
}; /* size: 0x015c */

struct tagDESIGNVECTOR
{
  /* 0x0000 */ unsigned long dvReserved;
  /* 0x0004 */ unsigned long dvNumAxes;
  /* 0x0008 */ long dvValues[16];
}; /* size: 0x0048 */

struct tagENUMLOGFONTEXDVW
{
  /* 0x0000 */ struct tagENUMLOGFONTEXW elfEnumLogfontEx;
  /* 0x015c */ struct tagDESIGNVECTOR elfDesignVector;
}; /* size: 0x01a4 */

struct XSAVE_CPU_INFO
{
  /* 0x0000 */ unsigned char Processor;
  /* 0x0001 */ char Padding_36;
  /* 0x0002 */ unsigned short Family;
  /* 0x0004 */ unsigned short Model;
  /* 0x0006 */ unsigned short Stepping;
  /* 0x0008 */ unsigned short ExtendedModel;
  /* 0x000a */ char Padding_37[2];
  /* 0x000c */ unsigned long ExtendedFamily;
  /* 0x0010 */ unsigned __int64 MicrocodeVersion;
  /* 0x0018 */ unsigned long Reserved;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _XSAVE_SUPPORTED_CPU
{
  /* 0x0000 */ struct XSAVE_CPU_INFO CpuInfo;
  union
  {
    /* 0x0020 */ struct XSAVE_CPU_ERRATA* CpuErrata;
    /* 0x0020 */ unsigned __int64 Unused;
  }; /* size: 0x0008 */
} XSAVE_SUPPORTED_CPU, *PXSAVE_SUPPORTED_CPU; /* size: 0x0028 */

typedef struct _XSAVE_VENDOR
{
  /* 0x0000 */ unsigned long VendorId[3];
  /* 0x000c */ long Padding_38;
  /* 0x0010 */ struct _XSAVE_SUPPORTED_CPU SupportedCpu;
} XSAVE_VENDOR, *PXSAVE_VENDOR; /* size: 0x0038 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_62, *PTAG_UNNAMED_62;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  column_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_63, *PTAG_UNNAMED_63;

class XE_ErrorContext
{
  /* 0x0000 */ struct XEErrorContext* m_ErrorContext;
}; /* size: 0x0008 */

enum XeSqlPkg::module_start::CustomizableSlots
{
  collect_statementSlot = 0,
};

enum DBSORTENUM
{
  DBSORT_ASCENDING = 0,
  DBSORT_DESCENDING = 1,
};

struct IWbemShutdown
{
}; /* size: 0x0008 */

enum tag_WBEM_CONDITION_FLAG_TYPE
{
  WBEM_FLAG_ALWAYS = 0,
  WBEM_FLAG_ONLY_IF_TRUE = 1,
  WBEM_FLAG_ONLY_IF_FALSE = 2,
  WBEM_FLAG_ONLY_IF_IDENTICAL = 3,
  WBEM_MASK_PRIMARY_CONDITION = 3,
  WBEM_FLAG_KEYS_ONLY = 4,
  WBEM_FLAG_REFS_ONLY = 8,
  WBEM_FLAG_LOCAL_ONLY = 16,
  WBEM_FLAG_PROPAGATED_ONLY = 32,
  WBEM_FLAG_SYSTEM_ONLY = 48,
  WBEM_FLAG_NONSYSTEM_ONLY = 64,
  WBEM_MASK_CONDITION_ORIGIN = 112,
  WBEM_FLAG_CLASS_OVERRIDES_ONLY = 256,
  WBEM_FLAG_CLASS_LOCAL_AND_OVERRIDES = 512,
  WBEM_MASK_CLASS_CONDITION = 768,
};

class AutoSpinlockHolder<321,1,1>;

class XE_AutoP<XEAction>
{
}; /* size: 0x0008 */

enum tagOLERENDER
{
  OLERENDER_NONE = 0,
  OLERENDER_DRAW = 1,
  OLERENDER_FORMAT = 2,
  OLERENDER_ASIS = 3,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_64, *PTAG_UNNAMED_64;

enum SOS_SYNC_WAIT_OPTIONS
{
  SYNC_WAIT_NORMAL = 0,
  SYNC_WAIT_BOOST = 1,
};

enum tagMKREDUCE
{
  MKRREDUCE_ONE = 0x30000,
  MKRREDUCE_TOUSER = 0x20000,
  MKRREDUCE_THROUGHUSER = 0x10000,
  MKRREDUCE_ALL = 0,
};

typedef enum
{
  object_idIdx = 0,
  plan_guide_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_65, *PTAG_UNNAMED_65;

typedef enum _tagINTERNETFEATURELIST
{
  FEATURE_OBJECT_CACHING = 0,
  FEATURE_ZONE_ELEVATION = 1,
  FEATURE_MIME_HANDLING = 2,
  FEATURE_MIME_SNIFFING = 3,
  FEATURE_WINDOW_RESTRICTIONS = 4,
  FEATURE_WEBOC_POPUPMANAGEMENT = 5,
  FEATURE_BEHAVIORS = 6,
  FEATURE_DISABLE_MK_PROTOCOL = 7,
  FEATURE_LOCALMACHINE_LOCKDOWN = 8,
  FEATURE_SECURITYBAND = 9,
  FEATURE_RESTRICT_ACTIVEXINSTALL = 10,
  FEATURE_VALIDATE_NAVIGATE_URL = 11,
  FEATURE_RESTRICT_FILEDOWNLOAD = 12,
  FEATURE_ADDON_MANAGEMENT = 13,
  FEATURE_PROTOCOL_LOCKDOWN = 14,
  FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15,
  FEATURE_SAFE_BINDTOOBJECT = 16,
  FEATURE_UNC_SAVEDFILECHECK = 17,
  FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18,
  FEATURE_TABBED_BROWSING = 19,
  FEATURE_SSLUX = 20,
  FEATURE_DISABLE_NAVIGATION_SOUNDS = 21,
  FEATURE_DISABLE_LEGACY_COMPRESSION = 22,
  FEATURE_FORCE_ADDR_AND_STATUS = 23,
  FEATURE_XMLHTTP = 24,
  FEATURE_DISABLE_TELNET_PROTOCOL = 25,
  FEATURE_FEEDS = 26,
  FEATURE_BLOCK_INPUT_PROMPTS = 27,
  FEATURE_ENTRY_COUNT = 28,
} tagINTERNETFEATURELIST, *PtagINTERNETFEATURELIST;

struct XESessionNotificationPayload
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_39[6];
  /* 0x0008 */ void* m_hSession;
  /* 0x0010 */ const struct XEObject* m_object;
  /* 0x0018 */ const struct XESessionContext* m_pSessionContext;
  /* 0x0020 */ int m_isCommit;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

typedef enum
{
  addressIdx = 0,
  modeIdx = 1,
  classIdx = 2,
  keep_countIdx = 3,
  shared_countIdx = 4,
  update_countIdx = 5,
  exclusive_countIdx = 6,
  destroy_countIdx = 7,
  has_waitersIdx = 8,
  is_superlatchIdx = 9,
  is_poisonedIdx = 10,
  database_idIdx = 11,
  file_idIdx = 12,
  page_idIdx = 13,
  LastField = 14,
} TAG_UNNAMED_66, *PTAG_UNNAMED_66;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_67, *PTAG_UNNAMED_67;

struct XE_TArray<XEDataAttribute,20>
{
  /* 0x0000 */ struct XEDataAttribute m_array[20];
}; /* size: 0x0320 */

enum IMPORTANCE
{
  IMPORTANCE_LOW = 1,
  IMPORTANCE_NORMAL = 3,
  IMPORTANCE_HIGH = 9,
};

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  column_idIdx = 2,
  datatypeIdx = 3,
  collationIdx = 4,
  nullableIdx = 5,
  maxlenIdx = 6,
  LastField = 7,
} TAG_UNNAMED_68, *PTAG_UNNAMED_68;

typedef struct _IMAGE_RESOURCE_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned short NumberOfNamedEntries;
  /* 0x000e */ unsigned short NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_69, *PTAG_UNNAMED_69;

typedef struct _DOCINFOA
{
  /* 0x0000 */ int cbSize;
  /* 0x0004 */ long Padding_40;
  /* 0x0008 */ const char* lpszDocName;
  /* 0x0010 */ const char* lpszOutput;
  /* 0x0018 */ const char* lpszDatatype;
  /* 0x0020 */ unsigned long fwType;
  /* 0x0024 */ long __PADDING__[1];
} DOCINFOA, *PDOCINFOA; /* size: 0x0028 */

typedef enum __MIDL_IBindStatusCallback_0006
{
  BSCF_FIRSTDATANOTIFICATION = 1,
  BSCF_INTERMEDIATEDATANOTIFICATION = 2,
  BSCF_LASTDATANOTIFICATION = 4,
  BSCF_DATAFULLYAVAILABLE = 8,
  BSCF_AVAILABLEDATASIZEUNKNOWN = 16,
  BSCF_SKIPDRAINDATAFORFILEURLS = 32,
  BSCF_64BITLENGTHDOWNLOAD = 64,
} _MIDL_IBindStatusCallback_0006, *P_MIDL_IBindStatusCallback_0006;

enum XE_FormatMessageError
{
  XEFME_NONE = 0,
  XEFME_INVALID_CODE = 1,
  XEFME_INVALID_PACKAGE = 2,
  XEFME_INSUFFICIENT_BUFFER = 3,
  XEFME_OOM = 4,
};

class XE_AutoP<ColumnTransformRule>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_70, *PTAG_UNNAMED_70;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_71, *PTAG_UNNAMED_71;

struct IXMLDOMParseError
{
}; /* size: 0x0008 */

struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionWithActive
{
}; /* size: 0x0140 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_72, *PTAG_UNNAMED_72;

enum tag_WBEM_SECURITY_FLAGS
{
  WBEM_ENABLE = 1,
  WBEM_METHOD_EXECUTE = 2,
  WBEM_FULL_WRITE_REP = 4,
  WBEM_PARTIAL_WRITE_REP = 8,
  WBEM_WRITE_PROVIDER = 16,
  WBEM_REMOTE_ACCESS = 32,
  WBEM_RIGHT_SUBSCRIBE = 64,
  WBEM_RIGHT_PUBLISH = 128,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 14,
} TAG_UNNAMED_73, *PTAG_UNNAMED_73;

struct tagEMR
{
  /* 0x0000 */ unsigned long iType;
  /* 0x0004 */ unsigned long nSize;
}; /* size: 0x0008 */

typedef struct _RECTL
{
  /* 0x0000 */ long left;
  /* 0x0004 */ long top;
  /* 0x0008 */ long right;
  /* 0x000c */ long bottom;
} RECTL, *PRECTL; /* size: 0x0010 */

typedef struct _POINTL
{
  /* 0x0000 */ long x;
  /* 0x0004 */ long y;
} POINTL, *PPOINTL; /* size: 0x0008 */

struct tagEMRPOLYDRAW
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cptl;
  /* 0x001c */ struct _POINTL aptl[1];
  /* 0x0024 */ unsigned char abTypes[1];
  /* 0x0025 */ char __PADDING__[3];
}; /* size: 0x0028 */

enum tagBINDSTRING
{
  BINDSTRING_HEADERS = 1,
  BINDSTRING_ACCEPT_MIMES = 2,
  BINDSTRING_EXTRA_URL = 3,
  BINDSTRING_LANGUAGE = 4,
  BINDSTRING_USERNAME = 5,
  BINDSTRING_PASSWORD = 6,
  BINDSTRING_UA_PIXELS = 7,
  BINDSTRING_UA_COLOR = 8,
  BINDSTRING_OS = 9,
  BINDSTRING_USER_AGENT = 10,
  BINDSTRING_ACCEPT_ENCODINGS = 11,
  BINDSTRING_POST_COOKIE = 12,
  BINDSTRING_POST_DATA_MIME = 13,
  BINDSTRING_URL = 14,
  BINDSTRING_IID = 15,
  BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
  BINDSTRING_PTR_BIND_CONTEXT = 17,
  BINDSTRING_XDR_ORIGIN = 18,
  BINDSTRING_DOWNLOADPATH = 19,
  BINDSTRING_ROOTDOC_URL = 20,
  BINDSTRING_INITIAL_FILENAME = 21,
};

typedef struct _LUID
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long HighPart;
} LUID, *PLUID; /* size: 0x0008 */

typedef struct _TOKEN_SOURCE
{
  /* 0x0000 */ char SourceName[8];
  /* 0x0008 */ struct _LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE; /* size: 0x0010 */

typedef struct _TOKEN_CONTROL
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ struct _LUID ModifiedId;
  /* 0x0018 */ struct _TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL; /* size: 0x0028 */

typedef enum
{
  dliStartProcessing = 0,
  dliNoteStartProcessing = 0,
  dliNotePreLoadLibrary = 1,
  dliNotePreGetProcAddress = 2,
  dliFailLoadLib = 3,
  dliFailGetProc = 4,
  dliNoteEndProcessing = 5,
} TAG_UNNAMED_74, *PTAG_UNNAMED_74;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_75, *PTAG_UNNAMED_75;

typedef enum
{
  MAX_ENTRIES = 16,
} TAG_UNNAMED_76, *PTAG_UNNAMED_76;

class XE_AutoRg<XMLActionTransformRule>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_77, *PTAG_UNNAMED_77;

class CAutoP<XEPackage0::BucketizingTarget>
{
}; /* size: 0x0008 */

enum tagLIBFLAGS
{
  LIBFLAG_FRESTRICTED = 1,
  LIBFLAG_FCONTROL = 2,
  LIBFLAG_FHIDDEN = 4,
  LIBFLAG_FHASDISKIMAGE = 8,
};

struct XE_TArray<XEDataAttribute,13>
{
  /* 0x0000 */ struct XEDataAttribute m_array[13];
}; /* size: 0x0208 */

struct XE_TEvent<4,0,13>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,13> m_dynamicAttr;
  /* 0x02b0 */ struct XEEvent m_event;
}; /* size: 0x02f8 */

class XeSqlPkg::latch_promoted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_41[140];
      /* 0x0240 */ unsigned char m_buf[45];
    }; /* size: 0x003d */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_78, *PTAG_UNNAMED_78;

typedef enum _TOKEN_INFORMATION_CLASS
{
  TokenUser = 1,
  TokenGroups = 2,
  TokenPrivileges = 3,
  TokenOwner = 4,
  TokenPrimaryGroup = 5,
  TokenDefaultDacl = 6,
  TokenSource = 7,
  TokenType = 8,
  TokenImpersonationLevel = 9,
  TokenStatistics = 10,
  TokenRestrictedSids = 11,
  TokenSessionId = 12,
  TokenGroupsAndPrivileges = 13,
  TokenSessionReference = 14,
  TokenSandBoxInert = 15,
  TokenAuditPolicy = 16,
  TokenOrigin = 17,
  TokenElevationType = 18,
  TokenLinkedToken = 19,
  TokenElevation = 20,
  TokenHasRestrictions = 21,
  TokenAccessInformation = 22,
  TokenVirtualizationAllowed = 23,
  TokenVirtualizationEnabled = 24,
  TokenIntegrityLevel = 25,
  TokenUIAccess = 26,
  TokenMandatoryPolicy = 27,
  TokenLogonSid = 28,
  TokenIsAppContainer = 29,
  TokenCapabilities = 30,
  TokenAppContainerSid = 31,
  TokenAppContainerNumber = 32,
  TokenUserClaimAttributes = 33,
  TokenDeviceClaimAttributes = 34,
  TokenRestrictedUserClaimAttributes = 35,
  TokenRestrictedDeviceClaimAttributes = 36,
  TokenDeviceGroups = 37,
  TokenRestrictedDeviceGroups = 38,
  TokenSecurityAttributes = 39,
  TokenIsRestricted = 40,
  MaxTokenInfoClass = 41,
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;

enum DispatcherConfigPoint
{
  DCP_NONE = 0,
  DCP_ENQUEUE = 1,
  DCP_DEQUEUE = 2,
};

typedef enum
{
  database_idIdx = 0,
  start_scan_lsnIdx = 1,
  LastField = 2,
} TAG_UNNAMED_79, *PTAG_UNNAMED_79;

typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
  RPCHTTP_RS_REDIRECT = 1,
  RPCHTTP_RS_ACCESS_1 = 2,
  RPCHTTP_RS_SESSION = 3,
  RPCHTTP_RS_ACCESS_2 = 4,
  RPCHTTP_RS_INTERFACE = 5,
} RPC_HTTP_REDIRECTOR_STAGE, *PRPC_HTTP_REDIRECTOR_STAGE;

enum PartitioningType
{
  NoPartition = 0,
  PartitionedByCpu = 1,
  PartitionedByNode = 2,
};

struct tagRAWINPUTHEADER
{
  /* 0x0000 */ unsigned long dwType;
  /* 0x0004 */ unsigned long dwSize;
  /* 0x0008 */ void* hDevice;
  /* 0x0010 */ unsigned __int64 wParam;
}; /* size: 0x0018 */

typedef enum
{
  cache_max_countIdx = 0,
  current_overflow_countIdx = 1,
  LastField = 2,
} TAG_UNNAMED_80, *PTAG_UNNAMED_80;

typedef struct _ZONEATTRIBUTES
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ wchar_t szDisplayName[260];
  /* 0x020c */ wchar_t szDescription[200];
  /* 0x039c */ wchar_t szIconPath[260];
  /* 0x05a4 */ unsigned long dwTemplateMinLevel;
  /* 0x05a8 */ unsigned long dwTemplateRecommended;
  /* 0x05ac */ unsigned long dwTemplateCurrentLevel;
  /* 0x05b0 */ unsigned long dwFlags;
} ZONEATTRIBUTES, *PZONEATTRIBUTES; /* size: 0x05b4 */

enum tagMKSYS
{
  MKSYS_NONE = 0,
  MKSYS_GENERICCOMPOSITE = 1,
  MKSYS_FILEMONIKER = 2,
  MKSYS_ANTIMONIKER = 3,
  MKSYS_ITEMMONIKER = 4,
  MKSYS_POINTERMONIKER = 5,
  MKSYS_CLASSMONIKER = 7,
  MKSYS_OBJREFMONIKER = 8,
  MKSYS_SESSIONMONIKER = 9,
  MKSYS_LUAMONIKER = 10,
};

struct IDropTarget
{
}; /* size: 0x0008 */

struct QueryStorePlanCompAggSLock
{
}; /* size: 0x0004 */

struct IMAGE_LOAD_CONFIG_DIRECTORY64
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long GlobalFlagsClear;
  /* 0x0010 */ unsigned long GlobalFlagsSet;
  /* 0x0014 */ unsigned long CriticalSectionDefaultTimeout;
  /* 0x0018 */ unsigned __int64 DeCommitFreeBlockThreshold;
  /* 0x0020 */ unsigned __int64 DeCommitTotalFreeThreshold;
  /* 0x0028 */ unsigned __int64 LockPrefixTable;
  /* 0x0030 */ unsigned __int64 MaximumAllocationSize;
  /* 0x0038 */ unsigned __int64 VirtualMemoryThreshold;
  /* 0x0040 */ unsigned __int64 ProcessAffinityMask;
  /* 0x0048 */ unsigned long ProcessHeapFlags;
  /* 0x004c */ unsigned short CSDVersion;
  /* 0x004e */ unsigned short Reserved1;
  /* 0x0050 */ unsigned __int64 EditList;
  /* 0x0058 */ unsigned __int64 SecurityCookie;
  /* 0x0060 */ unsigned __int64 SEHandlerTable;
  /* 0x0068 */ unsigned __int64 SEHandlerCount;
}; /* size: 0x0070 */

enum XEObjectNameIndexes
{
  XEONI_OBJECT = 0,
  XEONI_PKG = 1,
  XEONI_MODULE = 2,
  XEONI_LAST = 3,
};

typedef enum
{
  error_numberIdx = 0,
  reason_codeIdx = 1,
  server_nameIdx = 2,
  database_nameIdx = 3,
  incident_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_81, *PTAG_UNNAMED_81;

struct tagIMEMENUITEMINFOW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int fType;
  /* 0x0008 */ unsigned int fState;
  /* 0x000c */ unsigned int wID;
  /* 0x0010 */ struct HBITMAP__* hbmpChecked;
  /* 0x0018 */ struct HBITMAP__* hbmpUnchecked;
  /* 0x0020 */ unsigned long dwItemData;
  /* 0x0024 */ wchar_t szString[80];
  /* 0x00c4 */ long Padding_42;
  /* 0x00c8 */ struct HBITMAP__* hbmpItem;
}; /* size: 0x00d0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_82, *PTAG_UNNAMED_82;

enum SOS_EVENT_SIGNAL_OPTIONS
{
  EVENT_SIGNAL_NORMAL = 0,
  EVENT_SIGNAL_NOBOOST = 1,
};

struct std::is_error_code_enum<unsigned short const *>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_83, *PTAG_UNNAMED_83;

typedef struct _SID_IDENTIFIER_AUTHORITY
{
  /* 0x0000 */ unsigned char Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY; /* size: 0x0006 */

typedef struct _SID
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char SubAuthorityCount;
  /* 0x0002 */ struct _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  /* 0x0008 */ unsigned long SubAuthority[1];
} SID, *PSID; /* size: 0x000c */

typedef struct _FILE_GET_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ struct _SID Sid;
} FILE_GET_QUOTA_INFORMATION, *PFILE_GET_QUOTA_INFORMATION; /* size: 0x0014 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_84, *PTAG_UNNAMED_84;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_85, *PTAG_UNNAMED_85;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned __int64 BeginAddress;
  /* 0x0008 */ unsigned __int64 EndAddress;
  /* 0x0010 */ unsigned __int64 ExceptionHandler;
  /* 0x0018 */ unsigned __int64 HandlerData;
  /* 0x0020 */ unsigned __int64 PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 48,
} TAG_UNNAMED_86, *PTAG_UNNAMED_86;

enum tagMSHCTX
{
  MSHCTX_LOCAL = 0,
  MSHCTX_NOSHAREDMEM = 1,
  MSHCTX_DIFFERENTMACHINE = 2,
  MSHCTX_INPROC = 3,
  MSHCTX_CROSSCTX = 4,
};

class CAutoP<XEPackage0::CounterTarget::PackageEntry>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 36,
} TAG_UNNAMED_87, *PTAG_UNNAMED_87;

enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 2,
  COINIT_MULTITHREADED = 0,
  COINIT_DISABLE_OLE1DDE = 4,
  COINIT_SPEED_OVER_MEMORY = 8,
};

typedef struct _SYSTEM_SYSTEM_DISK_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING SystemDisk;
} SYSTEM_SYSTEM_DISK_INFORMATION, *PSYSTEM_SYSTEM_DISK_INFORMATION; /* size: 0x0010 */

typedef enum
{
  task_addressIdx = 0,
  task_typeIdx = 1,
  task_eventIdx = 2,
  task_state_oldIdx = 3,
  task_descriptionIdx = 4,
  LastField = 5,
} TAG_UNNAMED_88, *PTAG_UNNAMED_88;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_89, *PTAG_UNNAMED_89;

enum SOS_Task::TASK_CALLBACK_TYPE
{
  CALLBACK_SUSPEND = 0,
  CALLBACK_RESUME = 1,
  CALLBACK_DONE = 2,
  CALLBACK_INSTANT_RESUME = 3,
  CALLBACK_LAST = 4,
};

typedef enum _DEVICE_POWER_STATE
{
  PowerDeviceUnspecified = 0,
  PowerDeviceD0 = 1,
  PowerDeviceD1 = 2,
  PowerDeviceD2 = 3,
  PowerDeviceD3 = 4,
  PowerDeviceMaximum = 5,
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _SYSTEM_POWER_STATE
{
  PowerSystemUnspecified = 0,
  PowerSystemWorking = 1,
  PowerSystemSleeping1 = 2,
  PowerSystemSleeping2 = 3,
  PowerSystemSleeping3 = 4,
  PowerSystemHibernate = 5,
  PowerSystemShutdown = 6,
  PowerSystemMaximum = 7,
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;

struct CM_Power_Data_s
{
  /* 0x0000 */ unsigned long PD_Size;
  /* 0x0004 */ enum _DEVICE_POWER_STATE PD_MostRecentPowerState;
  /* 0x0008 */ unsigned long PD_Capabilities;
  /* 0x000c */ unsigned long PD_D1Latency;
  /* 0x0010 */ unsigned long PD_D2Latency;
  /* 0x0014 */ unsigned long PD_D3Latency;
  /* 0x0018 */ enum _DEVICE_POWER_STATE PD_PowerStateMapping[7];
  /* 0x0034 */ enum _SYSTEM_POWER_STATE PD_DeepestSystemWake;
}; /* size: 0x0038 */

struct IWbemPropertyProvider
{
}; /* size: 0x0008 */

enum XEEngineNotification
{
  XEEN_PACKAGE_ADDED = 0,
  XEEN_PACKAGE_REMOVED = 1,
  XEEN_MEMORY_SHRINK = 2,
  XEEN_MEMORY_STABLE = 3,
  XEEN_MEMORY_GROW = 4,
  XEEN_SESSION_CREATED = 5,
  XEEN_SESSION_DESTROYED = 6,
  XEEN_SESSION_EVENT_ENABLE = 7,
  XEEN_SESSION_EVENT_DISABLE = 8,
  XEEN_SESSION_TARGET_ADD = 9,
  XEEN_SESSION_TARGET_REMOVE = 10,
  XEEN_SESSION_COMMIT = 11,
  XEEN_SESSION_FLUSH = 12,
};

struct tagCREATESTRUCTW
{
  /* 0x0000 */ void* lpCreateParams;
  /* 0x0008 */ struct HINSTANCE__* hInstance;
  /* 0x0010 */ struct HMENU__* hMenu;
  /* 0x0018 */ struct HWND__* hwndParent;
  /* 0x0020 */ int cy;
  /* 0x0024 */ int cx;
  /* 0x0028 */ int y;
  /* 0x002c */ int x;
  /* 0x0030 */ long style;
  /* 0x0034 */ long Padding_43;
  /* 0x0038 */ const wchar_t* lpszName;
  /* 0x0040 */ const wchar_t* lpszClass;
  /* 0x0048 */ unsigned long dwExStyle;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_90, *PTAG_UNNAMED_90;

typedef struct _CHAR_INFO
{
  union
  {
    union
    {
      /* 0x0000 */ wchar_t UnicodeChar;
      /* 0x0000 */ char AsciiChar;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Char;
  /* 0x0002 */ unsigned short Attributes;
} CHAR_INFO, *PCHAR_INFO; /* size: 0x0004 */

struct tagEMRARC
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBox;
  /* 0x0018 */ struct _POINTL ptlStart;
  /* 0x0020 */ struct _POINTL ptlEnd;
}; /* size: 0x0028 */

struct XEPredicateValueStream
{
  /* 0x0000 */ void* m_hStream;
  /* 0x0008 */ unsigned int m_length;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

enum URL_SCHEME
{
  URL_SCHEME_INVALID = -1,
  URL_SCHEME_UNKNOWN = 0,
  URL_SCHEME_FTP = 1,
  URL_SCHEME_HTTP = 2,
  URL_SCHEME_GOPHER = 3,
  URL_SCHEME_MAILTO = 4,
  URL_SCHEME_NEWS = 5,
  URL_SCHEME_NNTP = 6,
  URL_SCHEME_TELNET = 7,
  URL_SCHEME_WAIS = 8,
  URL_SCHEME_FILE = 9,
  URL_SCHEME_MK = 10,
  URL_SCHEME_HTTPS = 11,
  URL_SCHEME_SHELL = 12,
  URL_SCHEME_SNEWS = 13,
  URL_SCHEME_LOCAL = 14,
  URL_SCHEME_JAVASCRIPT = 15,
  URL_SCHEME_VBSCRIPT = 16,
  URL_SCHEME_ABOUT = 17,
  URL_SCHEME_RES = 18,
  URL_SCHEME_MSSHELLROOTED = 19,
  URL_SCHEME_MSSHELLIDLIST = 20,
  URL_SCHEME_MSHELP = 21,
  URL_SCHEME_MAXVALUE = 22,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_91, *PTAG_UNNAMED_91;

struct IEnumVARIANT
{
}; /* size: 0x0008 */

struct CXFrontendLookupTable<2,unsigned __int64,10240>::LookupEntry
{
  /* 0x0000 */ unsigned __int64 hashKey[2];
  /* 0x0010 */ unsigned long dictionaryEntry;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

class CXFrontendLookupTable<2,unsigned __int64,10240>
{
  /* 0x0000 */ struct CXFrontendLookupTable<2,unsigned __int64,10240>::LookupEntry m_lookupTable[10240];
}; /* size: 0x3c000 */

class CXLRUHashTable<2,unsigned __int64,65536>
{
  /* 0x0000 */ unsigned int m_nextIndex;
  /* 0x0004 */ unsigned int m_maxIndex;
  /* 0x0008 */ struct CXLRUHashTable<2,unsigned __int64,65536>::LookupEntry* m_lookupTable;
}; /* size: 0x0010 */

struct DictionaryStats
{
  /* 0x0000 */ unsigned __int64 storageWrites;
  /* 0x0008 */ unsigned __int64 lruSuccessLookups;
  /* 0x0010 */ unsigned __int64 frontEndCollisions;
  /* 0x0018 */ unsigned __int64 lruAdded;
  /* 0x0020 */ unsigned __int64 lruReplaced;
  /* 0x0028 */ unsigned __int64 longestLruChain;
  /* 0x0030 */ unsigned __int64 timeWaitedForWrite;
}; /* size: 0x0038 */

class XE_CXRollingDictionary<2,unsigned __int64,10240,65536,1,1>
{
  /* 0x0000 */ long Padding_44[2];
  /* 0x0008 */ class CXFrontendLookupTable<2,unsigned __int64,10240> m_frontendTable;
  /* 0x3c008 */ class CXLRUHashTable<2,unsigned __int64,65536> m_lruTable;
  /* 0x3c018 */ unsigned int m_maxLRUElements;
  /* 0x3c01c */ long Padding_45;
  /* 0x3c020 */ class XE_CXFileWriter* m_pStorage;
  /* 0x3c028 */ void* m_pStorageLock;
  /* 0x3c030 */ struct DictionaryStats m_stats;
}; /* size: 0x3c068 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 2,
  NRemainder = 0,
} TAG_UNNAMED_92, *PTAG_UNNAMED_92;

typedef enum
{
  client_sequenceIdx = 0,
  client_connection_idIdx = 1,
  client_activity_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_93, *PTAG_UNNAMED_93;

enum XEMandatoryStaticAttributes_v0
{
  XEMSA_ID_KATMAI_RTM = 0,
  XEMSA_UUID_KATMAI_RTM = 1,
  XEMSA_VERSION_KATMAI_RTM = 2,
  XEMSA_CHANNEL_KATMAI_RTM = 3,
  XEMSA_LAST_KATMAI_RTM = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_94, *PTAG_UNNAMED_94;

enum tagURLTEMPLATE
{
  URLTEMPLATE_CUSTOM = 0,
  URLTEMPLATE_PREDEFINED_MIN = 0x10000,
  URLTEMPLATE_LOW = 0x10000,
  URLTEMPLATE_MEDLOW = 0x10500,
  URLTEMPLATE_MEDIUM = 0x11000,
  URLTEMPLATE_MEDHIGH = 0x11500,
  URLTEMPLATE_HIGH = 0x12000,
  URLTEMPLATE_PREDEFINED_MAX = 0x20000,
};

enum XEPackage0::BucketizingTarget::Source::Type
{
  ST_EVENT_FIELD = 0,
  ST_ACTION = 1,
};

struct XEPackage0::BucketizingTarget::Source
{
  /* 0x0000 */ enum XEPackage0::BucketizingTarget::Source::Type m_type;
  /* 0x0004 */ long Padding_46;
  union
  {
    /* 0x0008 */ const struct XEAction* m_action;
    struct
    {
      /* 0x0008 */ unsigned short m_dataAttrIdx;
      /* 0x000a */ char __PADDING__[6];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

class XE_AutoRg<XE_AutoP<XEPackage0::BucketizingTarget::Entry> >
{
}; /* size: 0x0008 */

class XE_Auto
{
  /* 0x0000 */ void* m_h;
}; /* size: 0x0008 */

class XEPackage0::BucketizingTarget
{
  /* 0x0000 */ long Padding_47[2];
  /* 0x0008 */ struct XERelativeObjectId m_filterEvent;
  /* 0x000c */ long Padding_48;
  /* 0x0010 */ struct XEPackage0::BucketizingTarget::Source m_source;
  /* 0x0020 */ unsigned int m_nSlots;
  /* 0x0024 */ long Padding_49;
  /* 0x0028 */ const struct XEType* m_expectedType;
  /* 0x0030 */ unsigned int m_expectedDataLength;
  /* 0x0034 */ long Padding_50;
  /* 0x0038 */ class XE_AutoRg<XE_AutoP<XEPackage0::BucketizingTarget::Entry> > m_slots;
  /* 0x0040 */ class XE_Auto m_holder;
  /* 0x0048 */ void* m_hSession;
  /* 0x0050 */ unsigned int m_avgSerializedBucketLength;
  /* 0x0000 */ const unsigned int MAX_SLOTS;
}; /* size: 0x0058 */

enum XEErrorMinorCodes
{
  XEMINOR_OOM = 1,
  XEMINOR_TARGETINIT_FAIL = 2,
  XEMINOR_TOO_MANY_SINGLETON_TARGETS = 3,
  XEMINOR_XE_ENG_NOT_INTIALIZED = 4,
  XEMINOR_TOO_MANY_PACKAGES = 5,
  XEMINOR_XE_ENG_INITIALIZATION_FAILED = 6,
  XEMINOR_XE_ENG_DISABLED = 7,
  XEMINOR_XE_ENG_NO_XLS_RECORD = 8,
  XEMINOR_XE_ENG_WRONG_MODULE = 9,
  XEMINOR_LAST_RES = 19,
  XEMINOR_BADPARAM = 20,
  XEMINOR_CHANGELIST_NOT_OPEN = 21,
  XEMINOR_CHANGELIST_ALREADY_OPEN = 22,
  XEMINOR_BADOBJECTNAME = 23,
  XEMINOR_EVENTCONSTRAINT_VIOLATION = 24,
  XEMINOR_OBJECT_ALREADY_IN_SESSION = 25,
  XEMINOR_OBJECT_ALREADY_IN_CHANGELIST = 26,
  XEMINOR_HANDLE_IS_NOT_PACKAGE_OBJECT = 27,
  XEMINOR_INVALID_SERIALIZED_DATA = 28,
  XEMINOR_INVALID_CUSTOM_ATTRIBUTES = 29,
  XEMINOR_INVALID_EVENT_PREDICATE_BINDING = 30,
  XEMINOR_SESSION_ALREADY_EXISTS = 31,
  XEMINOR_BUFFER_TOO_SMALL = 32,
  XEMINOR_BUFFER_TOO_BIG = 33,
  XEMINOR_FLUSH_TIMEOUT_TOO_SMALL = 34,
  XEMINOR_NO_BUFFER_MGR = 35,
  XEMINOR_INVALID_SOURCE_COMPARATOR_BINDING = 36,
  XEMINOR_NOT_ENOUGH_BUFFERS = 37,
  XEMINOR_PLACEHOLDER = 38,
  XEMINOR_EVENT_TOO_BIG = 39,
  XEMINOR_LBA_TOO_SMALL = 40,
  XEMINOR_TARGET_INVALID_PARAM = 41,
  XEMINOR_MISSING_CUSTOM_ATTRIBUTES = 42,
  XEMINOR_INVALID_EVENT_SESSION_BINDING = 43,
  XEMINOR_INVALID_ACTION_SESSION_BINDING = 44,
  XEMINOR_INVALID_SESSION_NAME = 46,
  XEMINOR_OBJECT_NOT_FOUND = 47,
  XEMINOR_PACKAGE_NOT_FOUND = 48,
  XEMINOR_OBJECT_STORAGE_CONFLICT = 49,
  XEMINOR_DUPLICATE_CUSTOMIZABLE_ATTR = 50,
  XEMINOR_TYPE_MISMATCH_CUSTOMIZABLE_ATTR = 51,
  XEMINOR_OBJECT_TYPE_MISMATCH = 52,
  XEMINOR_OBJECT_NOT_IN_SESSION = 53,
  XEMINOR_INSUFFICIENT_BUFFER = 54,
  XEMINOR_PLACEHOLDER2 = 55,
  XEMINOR_ACTION_VALIDATION_FAILED = 56,
  XEMINOR_PRED_COMP_VALIDATION_FAILED = 57,
  XEMINOR_AMBIGUOUS_OBJECT_NAME = 58,
  XEMINOR_LAST_USER = 59,
  XEMINOR_INVALID_MODULE = 61,
  XEMINOR_TARGET_STATUS_MORE_DATA = 62,
  XEMINOR_INVALID_MESSAGE_CODE = 63,
  XEMINOR_INVALID_PACKAGE = 64,
  XEMINOR_PACKAGE_IN_USE = 65,
  XEMINOR_LAST_PACKAGE = 79,
  XEMINOR_LAST = 99,
};

enum SOSHOST_TASK_FLAG
{
  SOSHOST_TASK_FLAG_DELAY_ABORT = 1,
  SOSHOST_TASK_FLAG_DO_NOT_DEADLOCK = 2,
  SOSHOST_TASK_SPINLOCK_ALLOWSAMERANK = 4,
  SOSHOST_TASK_FLAG_ALL = 7,
};

typedef struct _VIDEOPARAMETERS
{
  /* 0x0000 */ struct _GUID Guid;
  /* 0x0010 */ unsigned long dwOffset;
  /* 0x0014 */ unsigned long dwCommand;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ unsigned long dwMode;
  /* 0x0020 */ unsigned long dwTVStandard;
  /* 0x0024 */ unsigned long dwAvailableModes;
  /* 0x0028 */ unsigned long dwAvailableTVStandard;
  /* 0x002c */ unsigned long dwFlickerFilter;
  /* 0x0030 */ unsigned long dwOverScanX;
  /* 0x0034 */ unsigned long dwOverScanY;
  /* 0x0038 */ unsigned long dwMaxUnscaledX;
  /* 0x003c */ unsigned long dwMaxUnscaledY;
  /* 0x0040 */ unsigned long dwPositionX;
  /* 0x0044 */ unsigned long dwPositionY;
  /* 0x0048 */ unsigned long dwBrightness;
  /* 0x004c */ unsigned long dwContrast;
  /* 0x0050 */ unsigned long dwCPType;
  /* 0x0054 */ unsigned long dwCPCommand;
  /* 0x0058 */ unsigned long dwCPStandard;
  /* 0x005c */ unsigned long dwCPKey;
  /* 0x0060 */ unsigned long bCP_APSTriggerBits;
  /* 0x0064 */ unsigned char bOEMCopyProtection[256];
} VIDEOPARAMETERS, *PVIDEOPARAMETERS; /* size: 0x0164 */

typedef struct _IO_COMPLETION_BASIC_INFORMATION
{
  /* 0x0000 */ long Depth;
} IO_COMPLETION_BASIC_INFORMATION, *PIO_COMPLETION_BASIC_INFORMATION; /* size: 0x0004 */

enum XeSqlPkg::promote_tran_starting::CustomizableSlots
{
  collect_statementSlot = 0,
};

struct IWbemObjectAccess
{
}; /* size: 0x0008 */

enum XELargeSessionBufferPolicy
{
  XELSBP_DROP = 0,
  XELSBP_TRUNCATE = 1,
};

typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long AttributeCount;
  union
  {
    /* 0x0008 */ struct _CLAIM_SECURITY_ATTRIBUTE_V1* pAttributeV1;
  } /* size: 0x0008 */ Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION; /* size: 0x0010 */

enum XEWaitResult
{
  XEWR_OK = 0,
  XEWR_TIMEOUT = 1,
  XEWR_FAIL = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 0,
  VldEddOffset = 13,
  BufSize = 72,
} TAG_UNNAMED_95, *PTAG_UNNAMED_95;

typedef enum
{
  ListElementOffset = 56,
  NextPtrOffset = 0,
} TAG_UNNAMED_96, *PTAG_UNNAMED_96;

class XE_OneTimeInit
{
  union
  {
    /* 0x0000 */ const long INPROGRESS;
    /* 0x0000 */ volatile long m_count;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

class XE_XMLConfig
{
  /* 0x0000 */ long Padding_51[136];
  /* 0x0220 */ struct _GUID m_sessionTag;
  /* 0x0230 */ class TSinglyLinkedList<XE_ConfigCrc>* m_pCrcList;
  /* 0x0238 */ wchar_t m_sourceFile[260];
  /* 0x0440 */ class XE_OneTimeInit m_Initializer;
  /* 0x0444 */ long Padding_52;
  /* 0x0448 */ class TSinglyLinkedList<XE_LoadedLibrary>* m_loadedLibraryList;
}; /* size: 0x0450 */

typedef enum
{
  log_block_idIdx = 0,
  vlf_statusIdx = 1,
  vlf_fileidIdx = 2,
  scan_generationIdx = 3,
  vlf_physical_filenameIdx = 4,
  vlf_logical_filenameIdx = 5,
  message_log_idIdx = 6,
  log_bufferIdx = 7,
  LastField = 8,
} TAG_UNNAMED_97, *PTAG_UNNAMED_97;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  timeoutIdx = 2,
  kill_flagsIdx = 3,
  LastField = 4,
} TAG_UNNAMED_98, *PTAG_UNNAMED_98;

typedef enum
{
  stageIdx = 0,
  output_treeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_99, *PTAG_UNNAMED_99;

typedef union _SLIST_HEADER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 Alignment;
      /* 0x0008 */ unsigned __int64 Region;
    }; /* size: 0x0010 */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Depth : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Sequence : 9; /* bit position: 16 */
        /* 0x0000 */ unsigned __int64 NextEntry : 39; /* bit position: 25 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 HeaderType : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 Init : 1; /* bit position: 1 */
        /* 0x0008 */ unsigned __int64 Reserved : 59; /* bit position: 2 */
        /* 0x0008 */ unsigned __int64 Region : 3; /* bit position: 61 */
      }; /* bitfield */
    } /* size: 0x0010 */ Header8;
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Depth : 16; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Sequence : 48; /* bit position: 16 */
      }; /* bitfield */
      struct /* bitfield */
      {
        /* 0x0008 */ unsigned __int64 HeaderType : 1; /* bit position: 0 */
        /* 0x0008 */ unsigned __int64 Reserved : 3; /* bit position: 1 */
        /* 0x0008 */ unsigned __int64 NextEntry : 60; /* bit position: 4 */
      }; /* bitfield */
    } /* size: 0x0010 */ HeaderX64;
  }; /* size: 0x0010 */
} SLIST_HEADER, *PSLIST_HEADER; /* size: 0x0010 */

enum UcsTrace::UCS_TRACE_FLAGS
{
  UCS_TRCFLG_TEMP_ADJACENT_ENCRYPT = 2,
  UCS_TRCFLG_TEMP_TRANSPORT_MESSAGE = 4,
  UCS_TRCFLG_TEMP_FAILURES = 8,
  UCS_TRCFLG_TEMP_TASK_10MS_WAIT = 16,
  UCS_TRCFLG_TEMP_ASSERT_CORRUPTED_MESSAGES = 32,
  UCS_TRCFLG_TEMP_LOG_EP_CONNECT = 64,
  UCS_TRCFLG_TEMP_LOG_EP_STATE = 128,
  UCS_TRCFLG_TEMP_NO_DISPATCH = 256,
  UCS_TRCFLG_TEMP_NO_ENQUEUE = 512,
  UCS_TRCFLG_TEMP_NO_ADDAPTIVE_RECV_BUFFER = 1024,
  UCS_TRCFLG_TEMP_NO_POOLING = 2048,
  UCS_TRCFLG_TEMP_ALTER_ENDPOINT = 4096,
  UCS_TRCFLG_TEMP_LOG_SSPI = 8192,
  UCS_TRCFLG_TEMP_SPEW_SSPI = 16384,
  UCS_TRCFLG_TEMP_TASK_ACTIVITY = 0xffff8000,
  UCS_TRCFLG_TEMP_SINGLE_TASKHANDLER_MODE = 0x10000,
  UCS_TRCFLG_TEMP_TRANSMITTER = 0x20000,
  UCS_TRCFLG_DEBUG_SPEW_MESSAGES = 0x40000,
  UCS_TRCFLG_RETAIL_DBMIRRORING_TRANSPORT_CRC = 0x80000,
  UCS_TRCFLG_DEBUG_IDLE_CONNECTION_TIMEOUT = 0x100000,
  UCS_TRCFLG_DEBUG_FORCE_SHA1_OUTGOING = 0x200000,
  UCS_TRCFLG_DEBUG_FORCE_SHA1_INCOMING = 0x400000,
  UCS_TRCFLG_DEBUG_FORCE_AES_OUTGOING = 0x800000,
  UCS_TRCFLG_DEBUG_FORCE_AES_INCOMING = 0x1000000,
  UCS_TRCFLG_RETAIL_INCREASE_MAX_TASK_HANDLERS_32 = 0x2000000,
};

typedef enum _JOBOBJECTINFOCLASS
{
  JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation = 2,
  JobObjectBasicProcessIdList = 3,
  JobObjectBasicUIRestrictions = 4,
  JobObjectSecurityLimitInformation = 5,
  JobObjectEndOfJobTimeInformation = 6,
  JobObjectAssociateCompletionPortInformation = 7,
  JobObjectBasicAndIoAccountingInformation = 8,
  JobObjectExtendedLimitInformation = 9,
  JobObjectJobSetInformation = 10,
  JobObjectGroupInformation = 11,
  JobObjectNotificationLimitInformation = 12,
  JobObjectLimitViolationInformation = 13,
  JobObjectGroupInformationEx = 14,
  JobObjectCpuRateControlInformation = 15,
  JobObjectCompletionFilter = 16,
  JobObjectCompletionCounter = 17,
  JobObjectReserved1Information = 18,
  JobObjectReserved2Information = 19,
  JobObjectReserved3Information = 20,
  JobObjectReserved4Information = 21,
  JobObjectReserved5Information = 22,
  JobObjectReserved6Information = 23,
  JobObjectReserved7Information = 24,
  MaxJobObjectInfoClass = 25,
} JOBOBJECTINFOCLASS, *PJOBOBJECTINFOCLASS;

class XE_AutoRg<XMLEventTransformRule>
{
}; /* size: 0x0008 */

struct XE_CXHistoryTargetConfig
{
  /* 0x0000 */ unsigned int m_actionCountToColumnize;
  /* 0x0004 */ unsigned int m_actionCount;
  /* 0x0008 */ class XE_AutoRg<XMLActionTransformRule> m_actionRules;
  /* 0x0010 */ unsigned int m_eventCount;
  /* 0x0014 */ long Padding_53;
  /* 0x0018 */ class XE_AutoRg<XMLEventTransformRule> m_eventRules;
  /* 0x0020 */ int m_trackCasuality;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct tagFORMATETC
{
  /* 0x0000 */ unsigned short cfFormat;
  /* 0x0002 */ char Padding_54[6];
  /* 0x0008 */ struct tagDVTARGETDEVICE* ptd;
  /* 0x0010 */ unsigned long dwAspect;
  /* 0x0014 */ long lindex;
  /* 0x0018 */ unsigned long tymed;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct tagSTATDATA
{
  /* 0x0000 */ struct tagFORMATETC formatetc;
  /* 0x0020 */ unsigned long advf;
  /* 0x0024 */ long Padding_55;
  /* 0x0028 */ struct IAdviseSink* pAdvSink;
  /* 0x0030 */ unsigned long dwConnection;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

typedef struct _SOSKSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} SOSKSYSTEM_TIME, *PSOSKSYSTEM_TIME; /* size: 0x000c */

enum XeSqlPkg::sp_cache_hit::CustomizableSlots
{
  collect_cached_textSlot = 0,
  collect_object_nameSlot = 1,
  collect_database_nameSlot = 2,
  collect_plan_handleSlot = 3,
};

typedef enum _COMPUTER_NAME_FORMAT
{
  ComputerNameNetBIOS = 0,
  ComputerNameDnsHostname = 1,
  ComputerNameDnsDomain = 2,
  ComputerNameDnsFullyQualified = 3,
  ComputerNamePhysicalNetBIOS = 4,
  ComputerNamePhysicalDnsHostname = 5,
  ComputerNamePhysicalDnsDomain = 6,
  ComputerNamePhysicalDnsFullyQualified = 7,
  ComputerNameMax = 8,
} COMPUTER_NAME_FORMAT, *PCOMPUTER_NAME_FORMAT;

enum DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc::PageDescState
{
  Active = 0,
  Full = 1,
  Partial = 2,
  Empty = 3,
};

typedef struct _PROCESSOR_GROUP_INFO
{
  /* 0x0000 */ unsigned char MaximumProcessorCount;
  /* 0x0001 */ unsigned char ActiveProcessorCount;
  /* 0x0002 */ unsigned char Reserved[38];
  /* 0x0028 */ unsigned __int64 ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO; /* size: 0x0030 */

typedef enum
{
  query_operation_node_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_100, *PTAG_UNNAMED_100;

struct SessionSLock
{
}; /* size: 0x0004 */

struct ICreateTypeLib2
{
}; /* size: 0x0008 */

enum tagPROPBAG2_TYPE
{
  PROPBAG2_TYPE_UNDEFINED = 0,
  PROPBAG2_TYPE_DATA = 1,
  PROPBAG2_TYPE_URL = 2,
  PROPBAG2_TYPE_OBJECT = 3,
  PROPBAG2_TYPE_STREAM = 4,
  PROPBAG2_TYPE_STORAGE = 5,
  PROPBAG2_TYPE_MONIKER = 6,
};

class SpinlockHolder<26,19,1>;

struct _TP_POOL;

enum ASSOCSTR
{
  ASSOCSTR_COMMAND = 1,
  ASSOCSTR_EXECUTABLE = 2,
  ASSOCSTR_FRIENDLYDOCNAME = 3,
  ASSOCSTR_FRIENDLYAPPNAME = 4,
  ASSOCSTR_NOOPEN = 5,
  ASSOCSTR_SHELLNEWVALUE = 6,
  ASSOCSTR_DDECOMMAND = 7,
  ASSOCSTR_DDEIFEXEC = 8,
  ASSOCSTR_DDEAPPLICATION = 9,
  ASSOCSTR_DDETOPIC = 10,
  ASSOCSTR_INFOTIP = 11,
  ASSOCSTR_QUICKTIP = 12,
  ASSOCSTR_TILEINFO = 13,
  ASSOCSTR_CONTENTTYPE = 14,
  ASSOCSTR_DEFAULTICON = 15,
  ASSOCSTR_SHELLEXTENSION = 16,
  ASSOCSTR_MAX = 17,
};

typedef struct _API_SET_NAMESPACE_ENTRY
{
  /* 0x0000 */ unsigned long NameOffset;
  /* 0x0004 */ unsigned long NameLength;
  /* 0x0008 */ unsigned long DataOffset;
} API_SET_NAMESPACE_ENTRY, *PAPI_SET_NAMESPACE_ENTRY; /* size: 0x000c */

class Spinlock<69,16,1>
{
}; /* size: 0x0004 */

typedef enum
{
  log_operationIdx = 0,
  rowset_idIdx = 1,
  text_pointer_timestampIdx = 2,
  text_pointer_file_idIdx = 3,
  text_pointer_page_idIdx = 4,
  text_pointer_slot_idIdx = 5,
  coloffsetIdx = 6,
  text_info_flagsIdx = 7,
  text_sizeIdx = 8,
  offsetIdx = 9,
  old_sizeIdx = 10,
  new_sizeIdx = 11,
  current_lsnIdx = 12,
  LastField = 13,
} TAG_UNNAMED_101, *PTAG_UNNAMED_101;

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  fragment_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_102, *PTAG_UNNAMED_102;

class CXBaseColumn
{
  /* 0x0000 */ long Padding_56[2];
  /* 0x0008 */ unsigned int m_currentElem;
  /* 0x000c */ unsigned int m_elementCount;
  /* 0x0010 */ unsigned int m_elementSize;
}; /* size: 0x0018 */

enum TaskEnqueueOptions
{
  UseHotWorker = 1,
  PermanentTask = 2,
  UseWorkerPoolOnly = 4,
  UseColdWorker = 8,
  PreemptiveTask = 16,
  GuaranteeWorker = 32,
  EnqueueExclusive = 64,
  WaitableTask = 128,
  SystemTimerTask = 256,
  OnDemandTask = 512,
  AllowFailureOnLowMem = 1024,
  SpreadAcrossNodes = 2048,
  PrimaryTask = 4096,
};

typedef struct _nlsversioninfoex
{
  /* 0x0000 */ unsigned long dwNLSVersionInfoSize;
  /* 0x0004 */ unsigned long dwNLSVersion;
  /* 0x0008 */ unsigned long dwDefinedVersion;
  /* 0x000c */ unsigned long dwEffectiveId;
  /* 0x0010 */ struct _GUID guidCustomVersion;
} nlsversioninfoex, *Pnlsversioninfoex; /* size: 0x0020 */

enum WORKER_CTRL_FLAGS
{
  WORKER_CTRL_ACQUIRETHREAD = 1,
  WORKER_CTRL_THREADREQUIRED = 2,
};

struct IViewRowset
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_103, *PTAG_UNNAMED_103;

enum XeSqlPkg::BrokerAckType
{
  BAT_MESSAGE_ACK_SENT = 1,
  BAT_ACK_SENT = 2,
  BAT_MESSAGE_ACK_RECEIVED = 3,
  BAT_ACK_RECEIVED = 4,
};

class SEListElem
{
  /* 0x0000 */ class SEListElem* m_prev;
  /* 0x0008 */ class SEListElem* m_next;
}; /* size: 0x0010 */

class ListBase
{
  /* 0x0000 */ class SEListElem m_anchor;
}; /* size: 0x0010 */

class SEList<SOS_RingBuffer,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  elapsed_since_start_msIdx = 0,
  LastField = 1,
} TAG_UNNAMED_104, *PTAG_UNNAMED_104;

class XE_AutoP<XE_CXHistoryTargetConfig>
{
}; /* size: 0x0008 */

enum tagVARFLAGS
{
  VARFLAG_FREADONLY = 1,
  VARFLAG_FSOURCE = 2,
  VARFLAG_FBINDABLE = 4,
  VARFLAG_FREQUESTEDIT = 8,
  VARFLAG_FDISPLAYBIND = 16,
  VARFLAG_FDEFAULTBIND = 32,
  VARFLAG_FHIDDEN = 64,
  VARFLAG_FRESTRICTED = 128,
  VARFLAG_FDEFAULTCOLLELEM = 256,
  VARFLAG_FUIDEFAULT = 512,
  VARFLAG_FNONBROWSABLE = 1024,
  VARFLAG_FREPLACEABLE = 2048,
  VARFLAG_FIMMEDIATEBIND = 4096,
};

typedef struct _LONG_SIZEDARR
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ long Padding_57;
  /* 0x0008 */ unsigned long* pData;
} LONG_SIZEDARR, *PLONG_SIZEDARR; /* size: 0x0010 */

typedef enum
{
  LinkOffset = 32,
} TAG_UNNAMED_105, *PTAG_UNNAMED_105;

struct SESList<XE_CompressionCache::MemBlock,0>
{
  /* 0x0000 */ struct SListBase m_list;
}; /* size: 0x0008 */

class XE_AutoResource<void *,136>
{
}; /* size: 0x0008 */

class XE_CompressionCache
{
  /* 0x0000 */ unsigned int m_memUsed;
  /* 0x0004 */ long Padding_58;
  /* 0x0008 */ unsigned __int64 m_maxMem;
  /* 0x0010 */ unsigned int m_minAlloc;
  /* 0x0014 */ long Padding_59;
  /* 0x0018 */ struct SESList<XE_CompressionCache::MemBlock,0> m_freeList;
  /* 0x0020 */ class XE_AutoResource<void *,136> m_lock;
}; /* size: 0x0028 */

enum XEPackageCapabilities
{
  XEPC_UTILITY = 1,
  XEPC_DYNAMIC = 2,
  XEPC_NONXACT = 4,
  XEPC_DEFAULT = 0,
};

struct IPersistFile
{
}; /* size: 0x0008 */

typedef enum
{
  ArgCount = 0,
} TAG_UNNAMED_106, *PTAG_UNNAMED_106;

typedef enum
{
  xdesid_lowIdx = 0,
  xdesid_highIdx = 1,
  database_idIdx = 2,
  originator_db_versionIdx = 3,
  originator_pubidIdx = 4,
  originatorIdx = 5,
  originator_dbIdx = 6,
  originator_lsnIdx = 7,
  current_lsnIdx = 8,
  LastField = 9,
} TAG_UNNAMED_107, *PTAG_UNNAMED_107;

class SpinlockHolder<242,1,1>
{
  /* 0x0000 */ class Spinlock<242,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

enum tag_WBEM_LOGIN_TYPE
{
  WBEM_FLAG_INPROC_LOGIN = 0,
  WBEM_FLAG_LOCAL_LOGIN = 1,
  WBEM_FLAG_REMOTE_LOGIN = 2,
  WBEM_AUTHENTICATION_METHOD_MASK = 15,
  WBEM_FLAG_USE_MULTIPLE_CHALLENGES = 16,
};

struct TListSLock
{
}; /* size: 0x0004 */

class TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock>
{
  /* 0x0000 */ long Padding_60[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

struct XE_TArray<XEDataAttribute,3>
{
  /* 0x0000 */ struct XEDataAttribute m_array[3];
}; /* size: 0x0078 */

struct XE_TEvent<4,0,3>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,3> m_dynamicAttr;
  /* 0x0120 */ struct XEEvent m_event;
}; /* size: 0x0168 */

class XeCloudMinPkg::ping_send_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_61[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int sent_or_notOffset;
    /* 0x0000 */ const int message_idOffset;
    /* 0x0000 */ const int function_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

enum XeSqlPkg::database_suspect_data_page::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 14,
} TAG_UNNAMED_108, *PTAG_UNNAMED_108;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_109, *PTAG_UNNAMED_109;

struct tagRemFORMATETC
{
  /* 0x0000 */ unsigned long cfFormat;
  /* 0x0004 */ unsigned long ptd;
  /* 0x0008 */ unsigned long dwAspect;
  /* 0x000c */ long lindex;
  /* 0x0010 */ unsigned long tymed;
}; /* size: 0x0014 */

class SpinlockHolder<332,0,0>;

typedef enum __MIDL_IBindStatusCallback_0002
{
  BINDINFOF_URLENCODESTGMEDDATA = 1,
  BINDINFOF_URLENCODEDEXTRAINFO = 2,
} _MIDL_IBindStatusCallback_0002, *P_MIDL_IBindStatusCallback_0002;

class Spinlock<249,1,1>
{
}; /* size: 0x0004 */

typedef struct _ACTRL_ACCESS_INFOA
{
  /* 0x0000 */ unsigned long fAccessPermission;
  /* 0x0004 */ long Padding_62;
  /* 0x0008 */ char* lpAccessPermissionName;
} ACTRL_ACCESS_INFOA, *PACTRL_ACCESS_INFOA; /* size: 0x0010 */

typedef enum
{
  versionIdx = 0,
  destination_type_groupIdx = 1,
  message_handleIdx = 2,
  message_typeIdx = 3,
  message_flagsIdx = 4,
  sequence_numberIdx = 5,
  ack_sequence_numberIdx = 6,
  message_countIdx = 7,
  destination_idIdx = 8,
  stream_idIdx = 9,
  LastField = 10,
} TAG_UNNAMED_110, *PTAG_UNNAMED_110;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_111, *PTAG_UNNAMED_111;

typedef enum
{
  PageSize = 8192,
  BlockSize = 64,
  TotalBlocksPerPage = 128,
  PhantomsPerPage = 1,
  RealBlocksPerPage = 127,
} TAG_UNNAMED_112, *PTAG_UNNAMED_112;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 11,
} TAG_UNNAMED_113, *PTAG_UNNAMED_113;

typedef struct _tagStartParam
{
  /* 0x0000 */ struct _GUID iid;
  /* 0x0010 */ struct IBindCtx* pIBindCtx;
  /* 0x0018 */ struct IUnknown* pItf;
} tagStartParam, *PtagStartParam; /* size: 0x0020 */

typedef enum
{
  ClassId = 0x151800,
  IsTemplate = 0,
  SerializableVirtual = 0,
} TAG_UNNAMED_114, *PTAG_UNNAMED_114;

struct tagNEWTEXTMETRICA
{
  /* 0x0000 */ long tmHeight;
  /* 0x0004 */ long tmAscent;
  /* 0x0008 */ long tmDescent;
  /* 0x000c */ long tmInternalLeading;
  /* 0x0010 */ long tmExternalLeading;
  /* 0x0014 */ long tmAveCharWidth;
  /* 0x0018 */ long tmMaxCharWidth;
  /* 0x001c */ long tmWeight;
  /* 0x0020 */ long tmOverhang;
  /* 0x0024 */ long tmDigitizedAspectX;
  /* 0x0028 */ long tmDigitizedAspectY;
  /* 0x002c */ unsigned char tmFirstChar;
  /* 0x002d */ unsigned char tmLastChar;
  /* 0x002e */ unsigned char tmDefaultChar;
  /* 0x002f */ unsigned char tmBreakChar;
  /* 0x0030 */ unsigned char tmItalic;
  /* 0x0031 */ unsigned char tmUnderlined;
  /* 0x0032 */ unsigned char tmStruckOut;
  /* 0x0033 */ unsigned char tmPitchAndFamily;
  /* 0x0034 */ unsigned char tmCharSet;
  /* 0x0035 */ char Padding_63[3];
  /* 0x0038 */ unsigned long ntmFlags;
  /* 0x003c */ unsigned int ntmSizeEM;
  /* 0x0040 */ unsigned int ntmCellHeight;
  /* 0x0044 */ unsigned int ntmAvgWidth;
}; /* size: 0x0048 */

struct tagFONTSIGNATURE
{
  /* 0x0000 */ unsigned long fsUsb[4];
  /* 0x0010 */ unsigned long fsCsb[2];
}; /* size: 0x0018 */

struct tagNEWTEXTMETRICEXA
{
  /* 0x0000 */ struct tagNEWTEXTMETRICA ntmTm;
  /* 0x0048 */ struct tagFONTSIGNATURE ntmFontSig;
}; /* size: 0x0060 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_115, *PTAG_UNNAMED_115;

enum tag_WMI_OBJ_TEXT
{
  WMI_OBJ_TEXT_CIM_DTD_2_0 = 1,
  WMI_OBJ_TEXT_WMI_DTD_2_0 = 2,
  WMI_OBJ_TEXT_WMI_EXT1 = 3,
  WMI_OBJ_TEXT_WMI_EXT2 = 4,
  WMI_OBJ_TEXT_WMI_EXT3 = 5,
  WMI_OBJ_TEXT_WMI_EXT4 = 6,
  WMI_OBJ_TEXT_WMI_EXT5 = 7,
  WMI_OBJ_TEXT_WMI_EXT6 = 8,
  WMI_OBJ_TEXT_WMI_EXT7 = 9,
  WMI_OBJ_TEXT_WMI_EXT8 = 10,
  WMI_OBJ_TEXT_WMI_EXT9 = 11,
  WMI_OBJ_TEXT_WMI_EXT10 = 12,
  WMI_OBJ_TEXT_LAST = 13,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 0,
  VldEddOffset = 16,
  BufSize = 132,
} TAG_UNNAMED_116, *PTAG_UNNAMED_116;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 18,
} TAG_UNNAMED_117, *PTAG_UNNAMED_117;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  progressIdx = 2,
  LastField = 3,
} TAG_UNNAMED_118, *PTAG_UNNAMED_118;

struct XcbSLock
{
}; /* size: 0x0004 */

typedef enum _SC_STATUS_TYPE
{
  SC_STATUS_PROCESS_INFO = 0,
} SC_STATUS_TYPE, *PSC_STATUS_TYPE;

enum tagQACONTAINERFLAGS
{
  QACONTAINER_SHOWHATCHING = 1,
  QACONTAINER_SHOWGRABHANDLES = 2,
  QACONTAINER_USERMODE = 4,
  QACONTAINER_DISPLAYASDEFAULT = 8,
  QACONTAINER_UIDEAD = 16,
  QACONTAINER_AUTOCLIP = 32,
  QACONTAINER_MESSAGEREFLECT = 64,
  QACONTAINER_SUPPORTSMNEMONICS = 128,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 33,
} TAG_UNNAMED_119, *PTAG_UNNAMED_119;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 60,
} TAG_UNNAMED_120, *PTAG_UNNAMED_120;

typedef enum _CM_SERVICE_NODE_TYPE
{
  DriverType = 1,
  FileSystemType = 2,
  Win32ServiceOwnProcess = 16,
  Win32ServiceShareProcess = 32,
  AdapterType = 4,
  RecognizerType = 8,
} CM_SERVICE_NODE_TYPE, *PCM_SERVICE_NODE_TYPE;

typedef struct _heapinfo
{
  /* 0x0000 */ int* _pentry;
  /* 0x0008 */ unsigned __int64 _size;
  /* 0x0010 */ int _useflag;
  /* 0x0014 */ long __PADDING__[1];
} heapinfo, *Pheapinfo; /* size: 0x0018 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  node_idIdx = 2,
  total_pages_readIdx = 3,
  total_pages_processedIdx = 4,
  total_ranges_processedIdx = 5,
  total_ranges_generated_for_localIdx = 6,
  total_ranges_generated_for_remoteIdx = 7,
  total_ranges_local_rebalanced_to_thisIdx = 8,
  total_ranges_remote_rebalanced_to_thisIdx = 9,
  total_pages_local_rebalanced_to_thisIdx = 10,
  total_pages_remote_rebalanced_to_thisIdx = 11,
  total_ranges_local_rebalanced_from_thisIdx = 12,
  total_ranges_remote_rebalanced_from_thisIdx = 13,
  total_pages_local_rebalanced_from_thisIdx = 14,
  total_pages_remote_rebalanced_from_thisIdx = 15,
  total_time_msIdx = 16,
  LastField = 17,
} TAG_UNNAMED_121, *PTAG_UNNAMED_121;

struct tagWNDCLASSEXA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int style;
  /* 0x0008 */ void* lpfnWndProc /* function */;
  /* 0x0010 */ int cbClsExtra;
  /* 0x0014 */ int cbWndExtra;
  /* 0x0018 */ struct HINSTANCE__* hInstance;
  /* 0x0020 */ struct HICON__* hIcon;
  /* 0x0028 */ struct HICON__* hCursor;
  /* 0x0030 */ struct HBRUSH__* hbrBackground;
  /* 0x0038 */ const char* lpszMenuName;
  /* 0x0040 */ const char* lpszClassName;
  /* 0x0048 */ struct HICON__* hIconSm;
}; /* size: 0x0050 */

struct SEReplCheckpointQueuesSLock
{
}; /* size: 0x0004 */

enum WbemAuthenticationLevelEnum
{
  wbemAuthenticationLevelDefault = 0,
  wbemAuthenticationLevelNone = 1,
  wbemAuthenticationLevelConnect = 2,
  wbemAuthenticationLevelCall = 3,
  wbemAuthenticationLevelPkt = 4,
  wbemAuthenticationLevelPktIntegrity = 5,
  wbemAuthenticationLevelPktPrivacy = 6,
};

typedef enum
{
  lob_actionIdx = 0,
  column_idIdx = 1,
  offsetIdx = 2,
  lengthIdx = 3,
  sizeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_122, *PTAG_UNNAMED_122;

typedef enum
{
  brick_idIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_123, *PTAG_UNNAMED_123;

typedef enum _APTTYPE
{
  APTTYPE_CURRENT = -1,
  APTTYPE_STA = 0,
  APTTYPE_MTA = 1,
  APTTYPE_NA = 2,
  APTTYPE_MAINSTA = 3,
} APTTYPE, *PAPTTYPE;

typedef enum _CM_SERVICE_LOAD_TYPE
{
  BootLoad = 0,
  SystemLoad = 1,
  AutoLoad = 2,
  DemandLoad = 3,
  DisableLoad = 4,
} CM_SERVICE_LOAD_TYPE, *PCM_SERVICE_LOAD_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 29,
} TAG_UNNAMED_124, *PTAG_UNNAMED_124;

struct tagXFORM
{
  /* 0x0000 */ float eM11;
  /* 0x0004 */ float eM12;
  /* 0x0008 */ float eM21;
  /* 0x000c */ float eM22;
  /* 0x0010 */ float eDx;
  /* 0x0014 */ float eDy;
}; /* size: 0x0018 */

class XeSqlPkg::distribution_db_policy_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_64[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int policy_typeOffset;
    /* 0x0000 */ const int leading_cols_numOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

enum WbemChangeFlagEnum
{
  wbemChangeFlagCreateOrUpdate = 0,
  wbemChangeFlagUpdateOnly = 1,
  wbemChangeFlagCreateOnly = 2,
  wbemChangeFlagUpdateCompatible = 0,
  wbemChangeFlagUpdateSafeMode = 32,
  wbemChangeFlagUpdateForceMode = 64,
  wbemChangeFlagStrongValidation = 128,
  wbemChangeFlagAdvisory = 0x10000,
};

typedef struct _SECTION_IMAGE_INFORMATION32
{
  /* 0x0000 */ unsigned long TransferAddress;
  /* 0x0004 */ unsigned long ZeroBits;
  /* 0x0008 */ unsigned long MaximumStackSize;
  /* 0x000c */ unsigned long CommittedStackSize;
  /* 0x0010 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0014 */ unsigned short SubSystemMinorVersion;
      /* 0x0016 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0014 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  /* 0x0018 */ unsigned long GpValue;
  /* 0x001c */ unsigned short ImageCharacteristics;
  /* 0x001e */ unsigned short DllCharacteristics;
  /* 0x0020 */ unsigned short Machine;
  /* 0x0022 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0023 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0023 */ unsigned char ComPlus : 1; /* bit position: 0 */
      /* 0x0023 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 1 */
      /* 0x0023 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0024 */ unsigned long LoaderFlags;
  /* 0x0028 */ unsigned long ImageFileSize;
  /* 0x002c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION32, *PSECTION_IMAGE_INFORMATION32; /* size: 0x0030 */

typedef enum
{
  database_idIdx = 0,
  object_typeIdx = 1,
  object_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_125, *PTAG_UNNAMED_125;

typedef enum _THREAD_INFORMATION_CLASS
{
  ThreadMemoryPriority = 0,
  ThreadInformationClassMax = 1,
} THREAD_INFORMATION_CLASS, *PTHREAD_INFORMATION_CLASS;

class CAutoBase<ColumnTransformRule>
{
  /* 0x0000 */ struct ColumnTransformRule* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_126, *PTAG_UNNAMED_126;

typedef enum
{
  componentIdx = 0,
  stateIdx = 1,
  dataIdx = 2,
  LastField = 3,
} TAG_UNNAMED_127, *PTAG_UNNAMED_127;

struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionWithActive
{
}; /* size: 0x0080 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,4194304,16777216,4,0> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class TMemoryBlockAllocator<0,4194304,16777216,4,0>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,4194304,16777216,4,0> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionWithActive m_nodePart[64];
  /* 0x20c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,4194304,16777216,4,0> > m_reservationForActiveParts;
}; /* size: 0x2100 */

typedef enum _SID_NAME_USE
{
  SidTypeUser = 1,
  SidTypeGroup = 2,
  SidTypeDomain = 3,
  SidTypeAlias = 4,
  SidTypeWellKnownGroup = 5,
  SidTypeDeletedAccount = 6,
  SidTypeInvalid = 7,
  SidTypeUnknown = 8,
  SidTypeComputer = 9,
  SidTypeLabel = 10,
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SHARE_INFO_1501
{
  /* 0x0000 */ unsigned long shi1501_reserved;
  /* 0x0004 */ long Padding_65;
  /* 0x0008 */ void* shi1501_security_descriptor;
} SHARE_INFO_1501, *PSHARE_INFO_1501; /* size: 0x0010 */

typedef enum
{
  lwfg_sequence_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_128, *PTAG_UNNAMED_128;

enum tag_CIMTYPE_ENUMERATION
{
  CIM_ILLEGAL = 4095,
  CIM_EMPTY = 0,
  CIM_SINT8 = 16,
  CIM_UINT8 = 17,
  CIM_SINT16 = 2,
  CIM_UINT16 = 18,
  CIM_SINT32 = 3,
  CIM_UINT32 = 19,
  CIM_SINT64 = 20,
  CIM_UINT64 = 21,
  CIM_REAL32 = 4,
  CIM_REAL64 = 5,
  CIM_BOOLEAN = 11,
  CIM_STRING = 8,
  CIM_DATETIME = 101,
  CIM_REFERENCE = 102,
  CIM_CHAR16 = 103,
  CIM_OBJECT = 13,
  CIM_FLAG_ARRAY = 8192,
};

struct IInternetThreadSwitch
{
}; /* size: 0x0008 */

struct ITransaction2
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_129, *PTAG_UNNAMED_129;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 41,
} TAG_UNNAMED_130, *PTAG_UNNAMED_130;

struct IExternalConnection
{
}; /* size: 0x0008 */

enum tagFUNCFLAGS
{
  FUNCFLAG_FRESTRICTED = 1,
  FUNCFLAG_FSOURCE = 2,
  FUNCFLAG_FBINDABLE = 4,
  FUNCFLAG_FREQUESTEDIT = 8,
  FUNCFLAG_FDISPLAYBIND = 16,
  FUNCFLAG_FDEFAULTBIND = 32,
  FUNCFLAG_FHIDDEN = 64,
  FUNCFLAG_FUSESGETLASTERROR = 128,
  FUNCFLAG_FDEFAULTCOLLELEM = 256,
  FUNCFLAG_FUIDEFAULT = 512,
  FUNCFLAG_FNONBROWSABLE = 1024,
  FUNCFLAG_FREPLACEABLE = 2048,
  FUNCFLAG_FIMMEDIATEBIND = 4096,
};

typedef enum
{
  ElementOffset = 8,
  NextPtrOffset = 8,
  AnchorOffset = 8,
} TAG_UNNAMED_131, *PTAG_UNNAMED_131;

typedef struct __vc_attributes::importAttribute
{
  /* 0x0000 */ const char* idl_file;
} _vc_attributes::importAttribute, *P_vc_attributes::importAttribute; /* size: 0x0008 */

struct std::pair<XEPackage0::BucketizingTarget::Entry * *,XEPackage0::BucketizingTarget::Entry * *>
{
}; /* size: 0x0010 */

enum tagOLEMISC
{
  OLEMISC_RECOMPOSEONRESIZE = 1,
  OLEMISC_ONLYICONIC = 2,
  OLEMISC_INSERTNOTREPLACE = 4,
  OLEMISC_STATIC = 8,
  OLEMISC_CANTLINKINSIDE = 16,
  OLEMISC_CANLINKBYOLE1 = 32,
  OLEMISC_ISLINKOBJECT = 64,
  OLEMISC_INSIDEOUT = 128,
  OLEMISC_ACTIVATEWHENVISIBLE = 256,
  OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512,
  OLEMISC_INVISIBLEATRUNTIME = 1024,
  OLEMISC_ALWAYSRUN = 2048,
  OLEMISC_ACTSLIKEBUTTON = 4096,
  OLEMISC_ACTSLIKELABEL = 8192,
  OLEMISC_NOUIACTIVATE = 16384,
  OLEMISC_ALIGNABLE = 0xffff8000,
  OLEMISC_SIMPLEFRAME = 0x10000,
  OLEMISC_SETCLIENTSITEFIRST = 0x20000,
  OLEMISC_IMEMODE = 0x40000,
  OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
  OLEMISC_WANTSTOMENUMERGE = 0x100000,
  OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,
};

enum tag_WBEM_COMPILER_OPTIONS
{
  WBEM_FLAG_CHECK_ONLY = 1,
  WBEM_FLAG_AUTORECOVER = 2,
  WBEM_FLAG_WMI_CHECK = 4,
  WBEM_FLAG_CONSOLE_PRINT = 8,
  WBEM_FLAG_DONT_ADD_TO_LIST = 16,
  WBEM_FLAG_SPLIT_FILES = 32,
  WBEM_FLAG_STORE_FILE = 256,
};

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  timerIdx = 4,
  dialog_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_132, *PTAG_UNNAMED_132;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_133, *PTAG_UNNAMED_133;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 27,
} TAG_UNNAMED_134, *PTAG_UNNAMED_134;

enum URL_PART
{
  URL_PART_NONE = 0,
  URL_PART_SCHEME = 1,
  URL_PART_HOSTNAME = 2,
  URL_PART_USERNAME = 3,
  URL_PART_PASSWORD = 4,
  URL_PART_PORT = 5,
  URL_PART_QUERY = 6,
};

struct tagRemHENHMETAFILE
{
  /* 0x0000 */ unsigned long cbData;
  /* 0x0004 */ unsigned char data[1];
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_135, *PTAG_UNNAMED_135;

enum tagGLOBALOPT_EH_VALUES
{
  COMGLB_EXCEPTION_HANDLE = 0,
  COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
  COMGLB_EXCEPTION_DONOT_HANDLE = 1,
  COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2,
};

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  brick_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_136, *PTAG_UNNAMED_136;

typedef enum
{
  federated_xact_idIdx = 0,
  federated_xact_node_idIdx = 1,
  federated_xact_node_local_idIdx = 2,
  is_committedIdx = 3,
  age_valueIdx = 4,
  LastField = 5,
} TAG_UNNAMED_137, *PTAG_UNNAMED_137;

typedef struct __vc_attributes::bindableAttribute
{
} _vc_attributes::bindableAttribute, *P_vc_attributes::bindableAttribute; /* size: 0x0001 */

typedef enum
{
  pmo_addressIdx = 0,
  pmo_utilizationIdx = 1,
  vertex_pool_sizeIdx = 2,
  edge_pool_sizeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_138, *PTAG_UNNAMED_138;

enum ASSERTLEVEL
{
  ASSERTLEVEL_UNKNOWN = -1,
  ASSERTLEVEL_MINIMAL = 0,
  ASSERTLEVEL_DEFAULT = 1,
  ASSERTLEVEL_HIGH = 2,
  ASSERTLEVEL_TEST = 3,
};

enum tagSHCOLSTATE
{
  SHCOLSTATE_DEFAULT = 0,
  SHCOLSTATE_TYPE_STR = 1,
  SHCOLSTATE_TYPE_INT = 2,
  SHCOLSTATE_TYPE_DATE = 3,
  SHCOLSTATE_TYPEMASK = 15,
  SHCOLSTATE_ONBYDEFAULT = 16,
  SHCOLSTATE_SLOW = 32,
  SHCOLSTATE_EXTENDED = 64,
  SHCOLSTATE_SECONDARYUI = 128,
  SHCOLSTATE_HIDDEN = 256,
  SHCOLSTATE_PREFER_VARCMP = 512,
  SHCOLSTATE_PREFER_FMTCMP = 1024,
  SHCOLSTATE_NOSORTBYFOLDERNESS = 2048,
  SHCOLSTATE_VIEWONLY = 0x10000,
  SHCOLSTATE_BATCHREAD = 0x20000,
  SHCOLSTATE_NO_GROUPBY = 0x40000,
  SHCOLSTATE_FIXED_WIDTH = 4096,
  SHCOLSTATE_NODPISCALE = 8192,
  SHCOLSTATE_FIXED_RATIO = 16384,
  SHCOLSTATE_DISPLAYMASK = 0xfffff000,
};

struct IRecordInfo
{
}; /* size: 0x0008 */

typedef enum
{
  recompile_causeIdx = 0,
  source_database_idIdx = 1,
  object_idIdx = 2,
  object_typeIdx = 3,
  nest_levelIdx = 4,
  line_numberIdx = 5,
  offsetIdx = 6,
  offset_endIdx = 7,
  object_nameIdx = 8,
  statementIdx = 9,
  LastField = 10,
} TAG_UNNAMED_139, *PTAG_UNNAMED_139;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 9,
} TAG_UNNAMED_140, *PTAG_UNNAMED_140;

struct IRpcChannelBuffer3
{
}; /* size: 0x0008 */

enum tag_WBEM_UNSECAPP_FLAG_TYPE
{
  WBEM_FLAG_UNSECAPP_DEFAULT_CHECK_ACCESS = 0,
  WBEM_FLAG_UNSECAPP_CHECK_ACCESS = 1,
  WBEM_FLAG_UNSECAPP_DONT_CHECK_ACCESS = 2,
};

struct tagSIZE
{
  /* 0x0000 */ long cx;
  /* 0x0004 */ long cy;
}; /* size: 0x0008 */

struct tagEMRFRAMERGN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cbRgnData;
  /* 0x001c */ unsigned long ihBrush;
  /* 0x0020 */ struct tagSIZE szlStroke;
  /* 0x0028 */ unsigned char RgnData[1];
  /* 0x0029 */ char __PADDING__[3];
}; /* size: 0x002c */

enum tagXMLEMEM_TYPE
{
  XMLELEMTYPE_ELEMENT = 0,
  XMLELEMTYPE_TEXT = 1,
  XMLELEMTYPE_COMMENT = 2,
  XMLELEMTYPE_DOCUMENT = 3,
  XMLELEMTYPE_DTD = 4,
  XMLELEMTYPE_PI = 5,
  XMLELEMTYPE_OTHER = 6,
};

typedef struct _EISA_IRQ_DESCRIPTOR
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Interrupt : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned char Reserved : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned char LevelTriggered : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char Shared : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char MoreEntries : 1; /* bit position: 7 */
  }; /* bitfield */
} EISA_IRQ_DESCRIPTOR, *PEISA_IRQ_DESCRIPTOR; /* size: 0x0001 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_141, *PTAG_UNNAMED_141;

enum tagDVASPECT2
{
  DVASPECT_OPAQUE = 16,
  DVASPECT_TRANSPARENT = 32,
};

typedef enum
{
  preconnect_typeIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  object_typeIdx = 3,
  object_nameIdx = 4,
  database_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_142, *PTAG_UNNAMED_142;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_143, *PTAG_UNNAMED_143;

struct IPropertyNotifySink
{
}; /* size: 0x0008 */

enum tag_WBEM_GENERIC_FLAG_TYPE
{
  WBEM_FLAG_RETURN_IMMEDIATELY = 16,
  WBEM_FLAG_RETURN_WBEM_COMPLETE = 0,
  WBEM_FLAG_BIDIRECTIONAL = 0,
  WBEM_FLAG_FORWARD_ONLY = 32,
  WBEM_FLAG_NO_ERROR_OBJECT = 64,
  WBEM_FLAG_RETURN_ERROR_OBJECT = 0,
  WBEM_FLAG_SEND_STATUS = 128,
  WBEM_FLAG_DONT_SEND_STATUS = 0,
  WBEM_FLAG_ENSURE_LOCATABLE = 256,
  WBEM_FLAG_DIRECT_READ = 512,
  WBEM_FLAG_SEND_ONLY_SELECTED = 0,
  WBEM_RETURN_WHEN_COMPLETE = 0,
  WBEM_RETURN_IMMEDIATELY = 16,
  WBEM_MASK_RESERVED_FLAGS = 0x1f000,
  WBEM_FLAG_USE_AMENDED_QUALIFIERS = 0x20000,
  WBEM_FLAG_STRONG_VALIDATION = 0x100000,
};

struct tagMULTIKEYHELPW
{
  /* 0x0000 */ unsigned long mkSize;
  /* 0x0004 */ wchar_t mkKeylist;
  /* 0x0006 */ wchar_t szKeyphrase[1];
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 44,
} TAG_UNNAMED_144, *PTAG_UNNAMED_144;

typedef struct __vc_attributes::vi_progidAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::vi_progidAttribute, *P_vc_attributes::vi_progidAttribute; /* size: 0x0008 */

class SEList<SOS_ParentBlockDescriptor,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum _tagPI_FLAGS
{
  PI_PARSE_URL = 1,
  PI_FILTER_MODE = 2,
  PI_FORCE_ASYNC = 4,
  PI_USE_WORKERTHREAD = 8,
  PI_MIMEVERIFICATION = 16,
  PI_CLSIDLOOKUP = 32,
  PI_DATAPROGRESS = 64,
  PI_SYNCHRONOUS = 128,
  PI_APARTMENTTHREADED = 256,
  PI_CLASSINSTALL = 512,
  PI_PASSONBINDCTX = 8192,
  PI_NOMIMEHANDLER = 0xffff8000,
  PI_LOADAPPDIRECT = 16384,
  PD_FORCE_SWITCH = 0x10000,
  PI_PREFERDEFAULTHANDLER = 0x20000,
} tagPI_FLAGS, *PtagPI_FLAGS;

enum IMPORT_OBJECT_NAME_TYPE
{
  IMPORT_OBJECT_ORDINAL = 0,
  IMPORT_OBJECT_NAME = 1,
  IMPORT_OBJECT_NAME_NO_PREFIX = 2,
  IMPORT_OBJECT_NAME_UNDECORATE = 3,
};

class CAutoBase<ActionTransformRule>
{
  /* 0x0000 */ struct ActionTransformRule* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 5,
  VldEddOffset = 4,
  BufSize = 58,
} TAG_UNNAMED_145, *PTAG_UNNAMED_145;

struct POWER_ACTION_POLICY
{
  /* 0x0000 */ enum POWER_ACTION Action;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long EventCode;
}; /* size: 0x000c */

struct SYSTEM_POWER_LEVEL
{
  /* 0x0000 */ unsigned char Enable;
  /* 0x0001 */ unsigned char Spare[3];
  /* 0x0004 */ unsigned long BatteryLevel;
  /* 0x0008 */ struct POWER_ACTION_POLICY PowerPolicy;
  /* 0x0014 */ enum _SYSTEM_POWER_STATE MinSystemState;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_146, *PTAG_UNNAMED_146;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_147, *PTAG_UNNAMED_147;

class XeSqlPkg::filegroup_name_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_66[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int new_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

enum XLAT_SIDE
{
  XLAT_SERVER = 1,
  XLAT_CLIENT = 2,
};

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  is_safe_recopyIdx = 2,
  remote_versionIdx = 3,
  remote_portIdx = 4,
  hint_stream_idIdx = 5,
  remote_clusterIdx = 6,
  remote_serverIdx = 7,
  remote_databaseIdx = 8,
  remote_app_nameIdx = 9,
  remote_table_groupIdx = 10,
  remote_low_keyIdx = 11,
  remote_high_keyIdx = 12,
  LastField = 13,
} TAG_UNNAMED_148, *PTAG_UNNAMED_148;

enum std::_Iosb<int>::_Fmtflags
{
  _Fmtmask = 0xffffffff,
  _Fmtzero = 0,
};

enum std::_Iosb<int>::_Iostate
{
  _Statmask = 23,
};

enum std::_Iosb<int>::_Openmode
{
  _Openmask = 255,
};

enum std::_Iosb<int>::_Seekdir
{
  _Seekmask = 3,
};

class std::_Iosb<int>
{
  union
  {
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags skipws;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags unitbuf;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags uppercase;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags showbase;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags showpoint;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags showpos;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags left;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags right;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags internal;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags dec;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags oct;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags hex;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags scientific;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags fixed;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags hexfloat;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags boolalpha;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags _Stdio;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags adjustfield;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags basefield;
    /* 0x0000 */ enum std::_Iosb<int>::_Fmtflags floatfield;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate goodbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate eofbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate failbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate badbit;
    /* 0x0000 */ enum std::_Iosb<int>::_Iostate _Hardfail;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode in;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode out;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode ate;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode app;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode trunc;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode _Nocreate;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode _Noreplace;
    /* 0x0000 */ enum std::_Iosb<int>::_Openmode binary;
    /* 0x0000 */ enum std::_Iosb<int>::_Seekdir beg;
    /* 0x0000 */ enum std::_Iosb<int>::_Seekdir cur;
    /* 0x0000 */ enum std::_Iosb<int>::_Seekdir end;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  lock_modeIdx = 2,
  timeoutIdx = 3,
  lock_policyIdx = 4,
  request_sourceIdx = 5,
  error_numberIdx = 6,
  severityIdx = 7,
  stateIdx = 8,
  LastField = 9,
} TAG_UNNAMED_149, *PTAG_UNNAMED_149;

struct XEStorageId
{
  /* 0x0000 */ struct XERelativeObjectId m_rid;
  /* 0x0004 */ unsigned int m_instanceId;
}; /* size: 0x0008 */

typedef enum
{
  MaxPresenceCacheId = 7,
} TAG_UNNAMED_150, *PTAG_UNNAMED_150;

typedef struct _UNLOAD_DLL_DEBUG_INFO
{
  /* 0x0000 */ void* lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *PUNLOAD_DLL_DEBUG_INFO; /* size: 0x0008 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  map_entry_countIdx = 2,
  encoded_dataIdx = 3,
  LastField = 4,
} TAG_UNNAMED_151, *PTAG_UNNAMED_151;

typedef struct _IMAGE_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long StartingAddress;
  /* 0x0004 */ unsigned long EndingAddress;
  /* 0x0008 */ unsigned long EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY; /* size: 0x000c */

enum XEHandleType
{
  XEH_PACKAGE = 0,
  XEH_SESSION = 1,
  XEH_TARGET = 2,
  XEH_PREDICATE = 3,
  XEH_PACKAGES_HOLDER = 4,
  XEH_EVENT = 5,
  XEH_LAST = 6,
  XEH_MASK = 7,
  XEH_ALIGN = 8,
};

typedef struct _SMALL_RECT
{
  /* 0x0000 */ short Left;
  /* 0x0002 */ short Top;
  /* 0x0004 */ short Right;
  /* 0x0006 */ short Bottom;
} SMALL_RECT, *PSMALL_RECT; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  flushed_logIdx = 1,
  end_of_logIdx = 2,
  log_truncation_blockIdx = 3,
  hadr_truncation_blockIdx = 4,
  recovery_pointIdx = 5,
  undo_scanIdx = 6,
  undo_safe_blockIdx = 7,
  undo_pageidIdx = 8,
  undo_phaseIdx = 9,
  group_idIdx = 10,
  replica_idIdx = 11,
  ag_database_idIdx = 12,
  LastField = 13,
} TAG_UNNAMED_152, *PTAG_UNNAMED_152;

typedef struct __vc_attributes::helpstringdllAttribute
{
  /* 0x0000 */ const char* dllname;
} _vc_attributes::helpstringdllAttribute, *P_vc_attributes::helpstringdllAttribute; /* size: 0x0008 */

class Spinlock<333,0,1>
{
}; /* size: 0x0004 */

class CXFileReaderInterfaceFactory
{
}; /* size: 0x0008 */

enum SchedulerManager::SCHEDTYPE
{
  SCHED_NORMAL = 0,
  SCHED_HIDDEN = 1,
};

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::List
{
}; /* size: 0x0030 */

typedef struct _SYSTEMTIME
{
  /* 0x0000 */ unsigned short wYear;
  /* 0x0002 */ unsigned short wMonth;
  /* 0x0004 */ unsigned short wDayOfWeek;
  /* 0x0006 */ unsigned short wDay;
  /* 0x0008 */ unsigned short wHour;
  /* 0x000a */ unsigned short wMinute;
  /* 0x000c */ unsigned short wSecond;
  /* 0x000e */ unsigned short wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME; /* size: 0x0010 */

typedef struct _TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _SYSTEMTIME StandardDate;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _SYSTEMTIME DaylightDate;
  /* 0x00a8 */ long DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION; /* size: 0x00ac */

typedef struct _TRACE_LOGFILE_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ wchar_t* LoggerName;
  /* 0x0040 */ wchar_t* LogFileName;
  /* 0x0048 */ struct _TIME_ZONE_INFORMATION TimeZone;
  /* 0x00f4 */ long Padding_67;
  /* 0x00f8 */ union _LARGE_INTEGER BootTime;
  /* 0x0100 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0108 */ union _LARGE_INTEGER StartTime;
  /* 0x0110 */ unsigned long ReservedFlags;
  /* 0x0114 */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER, *PTRACE_LOGFILE_HEADER; /* size: 0x0118 */

typedef enum
{
  VersionEventBufferHeader = 0,
} TAG_UNNAMED_153, *PTAG_UNNAMED_153;

typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS
{
  TransactionManagerBasicInformation = 0,
  TransactionManagerLogInformation = 1,
  TransactionManagerLogPathInformation = 2,
  TransactionManagerRecoveryInformation = 4,
  TransactionManagerOnlineProbeInformation = 3,
  TransactionManagerOldestTransactionInformation = 5,
} TRANSACTIONMANAGER_INFORMATION_CLASS, *PTRANSACTIONMANAGER_INFORMATION_CLASS;

struct IOleContainer
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 32,
} TAG_UNNAMED_154, *PTAG_UNNAMED_154;

typedef enum __MIDL_IBindStatusCallback_0003
{
  BINDF_ASYNCHRONOUS = 1,
  BINDF_ASYNCSTORAGE = 2,
  BINDF_NOPROGRESSIVERENDERING = 4,
  BINDF_OFFLINEOPERATION = 8,
  BINDF_GETNEWESTVERSION = 16,
  BINDF_NOWRITECACHE = 32,
  BINDF_NEEDFILE = 64,
  BINDF_PULLDATA = 128,
  BINDF_IGNORESECURITYPROBLEM = 256,
  BINDF_RESYNCHRONIZE = 512,
  BINDF_HYPERLINK = 1024,
  BINDF_NO_UI = 2048,
  BINDF_SILENTOPERATION = 4096,
  BINDF_PRAGMA_NO_CACHE = 8192,
  BINDF_GETCLASSOBJECT = 16384,
  BINDF_RESERVED_1 = 0xffff8000,
  BINDF_FREE_THREADED = 0x10000,
  BINDF_DIRECT_READ = 0x20000,
  BINDF_FORMS_SUBMIT = 0x40000,
  BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,
  BINDF_FROMURLMON = 0x100000,
  BINDF_FWD_BACK = 0x200000,
  BINDF_PREFERDEFAULTHANDLER = 0x400000,
  BINDF_ENFORCERESTRICTED = 0x800000,
} _MIDL_IBindStatusCallback_0003, *P_MIDL_IBindStatusCallback_0003;

struct tagEXTLOGPEN32
{
  /* 0x0000 */ unsigned long elpPenStyle;
  /* 0x0004 */ unsigned long elpWidth;
  /* 0x0008 */ unsigned int elpBrushStyle;
  /* 0x000c */ unsigned long elpColor;
  /* 0x0010 */ unsigned long elpHatch;
  /* 0x0014 */ unsigned long elpNumEntries;
  /* 0x0018 */ unsigned long elpStyleEntry[1];
}; /* size: 0x001c */

typedef enum __enative_startup_state
{
  __uninitialized = 0,
  __initializing = 1,
  __initialized = 2,
} _enative_startup_state, *P_enative_startup_state;

typedef enum
{
  count_cyclesIdx = 0,
  checkpointIdx = 1,
  pmo_markIdx = 2,
  pmo_pages_allocIdx = 3,
  ringbuffer_pmo_pages_allocIdx = 4,
  xml_deadlock_report_pmo_pages_allocIdx = 5,
  LastField = 6,
} TAG_UNNAMED_155, *PTAG_UNNAMED_155;

typedef enum
{
  message_typeIdx = 0,
  message_sub_typeIdx = 1,
  message_log_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_156, *PTAG_UNNAMED_156;

enum tagCOWAIT_FLAGS
{
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4,
  COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 16,
  REAL_COWAIT_ENABLECALLREENTRANCY = 8,
  COWAIT_ENABLEWINDOWMESSAGES = 16,
  COWAIT_ENABLECALLREENTRANCY = 24,
};

typedef enum _AUDIT_EVENT_TYPE
{
  AuditEventObjectAccess = 0,
  AuditEventDirectoryServiceAccess = 1,
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 21,
} TAG_UNNAMED_157, *PTAG_UNNAMED_157;

class XE_ILogRWMessageHandler
{
}; /* size: 0x0008 */

enum EVENT_STATE
{
  EVENT_NOTSIGNALED = 0,
  EVENT_SIGNALED = 1,
};

typedef enum
{
  worker_addressIdx = 0,
  number_pagesIdx = 1,
  page_sizeIdx = 2,
  page_locationIdx = 3,
  numa_node_idIdx = 4,
  steal_optionsIdx = 5,
  LastField = 6,
} TAG_UNNAMED_158, *PTAG_UNNAMED_158;

struct _NDR_ASYNC_MESSAGE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 50,
} TAG_UNNAMED_159, *PTAG_UNNAMED_159;

typedef struct _TRIVERTEX
{
  /* 0x0000 */ long x;
  /* 0x0004 */ long y;
  /* 0x0008 */ unsigned short Red;
  /* 0x000a */ unsigned short Green;
  /* 0x000c */ unsigned short Blue;
  /* 0x000e */ unsigned short Alpha;
} TRIVERTEX, *PTRIVERTEX; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_160, *PTAG_UNNAMED_160;

enum tagDOMNodeType
{
  NODE_INVALID = 0,
  NODE_ELEMENT = 1,
  NODE_ATTRIBUTE = 2,
  NODE_TEXT = 3,
  NODE_CDATA_SECTION = 4,
  NODE_ENTITY_REFERENCE = 5,
  NODE_ENTITY = 6,
  NODE_PROCESSING_INSTRUCTION = 7,
  NODE_COMMENT = 8,
  NODE_DOCUMENT = 9,
  NODE_DOCUMENT_TYPE = 10,
  NODE_DOCUMENT_FRAGMENT = 11,
  NODE_NOTATION = 12,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_161, *PTAG_UNNAMED_161;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_162, *PTAG_UNNAMED_162;

typedef enum _TRANSACTION_INFORMATION_CLASS
{
  TransactionBasicInformation = 0,
  TransactionPropertiesInformation = 1,
  TransactionEnlistmentInformation = 2,
  TransactionSuperiorEnlistmentInformation = 3,
  TransactionBindInformation = 4,
  TransactionDTCPrivateInformation = 5,
} TRANSACTION_INFORMATION_CLASS, *PTRANSACTION_INFORMATION_CLASS;

enum std::_Iosb<int>::_Dummy_enum
{
  _Dummy_enum_val = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_163, *PTAG_UNNAMED_163;

class CAutoRefc<IXMLDOMParseError>
{
  /* 0x0000 */ struct IXMLDOMParseError* m_pt;
}; /* size: 0x0008 */

struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionWithoutActive
{
}; /* size: 0x00c0 */

enum tagCALLCONV
{
  CC_FASTCALL = 0,
  CC_CDECL = 1,
  CC_MSCPASCAL = 2,
  CC_PASCAL = 2,
  CC_MACPASCAL = 3,
  CC_STDCALL = 4,
  CC_FPFASTCALL = 5,
  CC_SYSCALL = 6,
  CC_MPWCDECL = 7,
  CC_MPWPASCAL = 8,
  CC_MAX = 9,
};

struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionWithoutActive
{
}; /* size: 0x00c0 */

enum tagSTATFLAG
{
  STATFLAG_DEFAULT = 0,
  STATFLAG_NONAME = 1,
  STATFLAG_NOOPEN = 2,
};

struct XE_TArray<XEStaticAttribute,3>
{
  /* 0x0000 */ struct XEStaticAttribute m_array[3];
}; /* size: 0x0078 */

struct XE_TArray<XEDataAttribute,4>
{
  /* 0x0000 */ struct XEDataAttribute m_array[4];
}; /* size: 0x00a0 */

struct XE_TEvent<3,0,4>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,4> m_dynamicAttr;
  /* 0x0120 */ struct XEEvent m_event;
}; /* size: 0x0168 */

class XeCloudMinPkg::serepl_background_exception
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_68[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int error_messageOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 43,
} TAG_UNNAMED_164, *PTAG_UNNAMED_164;

typedef enum
{
  peer_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_165, *PTAG_UNNAMED_165;

enum std::errc::errc
{
  address_family_not_supported = 102,
  address_in_use = 100,
  address_not_available = 101,
  already_connected = 113,
  argument_list_too_long = 7,
  argument_out_of_domain = 33,
  bad_address = 14,
  bad_file_descriptor = 9,
  bad_message = 104,
  broken_pipe = 32,
  connection_aborted = 106,
  connection_already_in_progress = 103,
  connection_refused = 107,
  connection_reset = 108,
  cross_device_link = 18,
  destination_address_required = 109,
  device_or_resource_busy = 16,
  directory_not_empty = 41,
  executable_format_error = 8,
  file_exists = 17,
  file_too_large = 27,
  filename_too_long = 38,
  function_not_supported = 40,
  host_unreachable = 110,
  identifier_removed = 111,
  illegal_byte_sequence = 42,
  inappropriate_io_control_operation = 25,
  interrupted = 4,
  invalid_argument = 22,
  invalid_seek = 29,
  io_error = 5,
  is_a_directory = 21,
  message_size = 115,
  network_down = 116,
  network_reset = 117,
  network_unreachable = 118,
  no_buffer_space = 119,
  no_child_process = 10,
  no_link = 121,
  no_lock_available = 39,
  no_message_available = 120,
  no_message = 122,
  no_protocol_option = 123,
  no_space_on_device = 28,
  no_stream_resources = 124,
  no_such_device_or_address = 6,
  no_such_device = 19,
  no_such_file_or_directory = 2,
  no_such_process = 3,
  not_a_directory = 20,
  not_a_socket = 128,
  not_a_stream = 125,
  not_connected = 126,
  not_enough_memory = 12,
  not_supported = 129,
  operation_canceled = 105,
  operation_in_progress = 112,
  operation_not_permitted = 1,
  operation_not_supported = 130,
  operation_would_block = 140,
  owner_dead = 133,
  permission_denied = 13,
  protocol_error = 134,
  protocol_not_supported = 135,
  read_only_file_system = 30,
  resource_deadlock_would_occur = 36,
  resource_unavailable_try_again = 11,
  result_out_of_range = 34,
  state_not_recoverable = 127,
  stream_timeout = 137,
  text_file_busy = 139,
  timed_out = 138,
  too_many_files_open_in_system = 23,
  too_many_files_open = 24,
  too_many_links = 31,
  too_many_synbolic_link_levels = 114,
  value_too_large = 132,
  wrong_protocol_type = 136,
};

typedef enum _SC_ACTION_TYPE
{
  SC_ACTION_NONE = 0,
  SC_ACTION_RESTART = 1,
  SC_ACTION_REBOOT = 2,
  SC_ACTION_RUN_COMMAND = 3,
} SC_ACTION_TYPE, *PSC_ACTION_TYPE;

typedef struct _SC_ACTION
{
  /* 0x0000 */ enum _SC_ACTION_TYPE Type;
  /* 0x0004 */ unsigned long Delay;
} SC_ACTION, *PSC_ACTION; /* size: 0x0008 */

typedef enum
{
  ArgCount = 1,
} TAG_UNNAMED_166, *PTAG_UNNAMED_166;

struct XE_TArray<XEDataAttribute,9>
{
  /* 0x0000 */ struct XEDataAttribute m_array[9];
}; /* size: 0x0168 */

struct XE_TEvent<4,1,9>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,9> m_dynamicAttr;
  /* 0x0240 */ struct XEEvent m_event;
}; /* size: 0x0288 */

class XeSqlPkg::file_read_throttled
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_69[140];
      /* 0x0240 */ unsigned char m_buf[45];
    }; /* size: 0x003d */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int is_volume_limit_hitOffset;
    /* 0x0000 */ const int pathOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 29,
} TAG_UNNAMED_167, *PTAG_UNNAMED_167;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 5,
  VldEddOffset = 7,
  BufSize = 93,
} TAG_UNNAMED_168, *PTAG_UNNAMED_168;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_169, *PTAG_UNNAMED_169;

class XE_Metadata
{
  /* 0x0000 */ void* m_holder;
}; /* size: 0x0008 */

typedef enum _TAPE_DRIVE_PROBLEM_TYPE
{
  TapeDriveProblemNone = 0,
  TapeDriveReadWriteWarning = 1,
  TapeDriveReadWriteError = 2,
  TapeDriveReadWarning = 3,
  TapeDriveWriteWarning = 4,
  TapeDriveReadError = 5,
  TapeDriveWriteError = 6,
  TapeDriveHardwareError = 7,
  TapeDriveUnsupportedMedia = 8,
  TapeDriveScsiConnectionError = 9,
  TapeDriveTimetoClean = 10,
  TapeDriveCleanDriveNow = 11,
  TapeDriveMediaLifeExpired = 12,
  TapeDriveSnappedTape = 13,
} TAPE_DRIVE_PROBLEM_TYPE, *PTAPE_DRIVE_PROBLEM_TYPE;

struct IClientSecurity
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 39,
} TAG_UNNAMED_170, *PTAG_UNNAMED_170;

class SEList<PageHeapPageInfo,40>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum _ACTIVATION_CONTEXT_INFO_CLASS
{
  ActivationContextBasicInformation = 1,
  ActivationContextDetailedInformation = 2,
  AssemblyDetailedInformationInActivationContext = 3,
  FileInformationInAssemblyOfAssemblyInActivationContext = 4,
  RunlevelInformationInActivationContext = 5,
  CompatibilityInformationInActivationContext = 6,
  ActivationContextManifestResourceName = 7,
  MaxActivationContextInfoClass = 8,
  AssemblyDetailedInformationInActivationContxt = 3,
  FileInformationInAssemblyOfAssemblyInActivationContxt = 4,
} ACTIVATION_CONTEXT_INFO_CLASS, *PACTIVATION_CONTEXT_INFO_CLASS;

typedef enum
{
  request_typeIdx = 0,
  file_byte_offsetIdx = 1,
  file_byte_countIdx = 2,
  http_errorcodeIdx = 3,
  request_idIdx = 4,
  file_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_171, *PTAG_UNNAMED_171;

typedef struct _SYSTEM_POOL_ENTRY
{
  /* 0x0000 */ unsigned char Allocated;
  /* 0x0001 */ unsigned char Spare0;
  /* 0x0002 */ unsigned short AllocatorBackTraceIndex;
  /* 0x0004 */ unsigned long Size;
  union
  {
    /* 0x0008 */ unsigned char Tag[4];
    /* 0x0008 */ unsigned long TagUlong;
    /* 0x0008 */ void* ProcessChargedQuota;
  }; /* size: 0x0008 */
} SYSTEM_POOL_ENTRY, *PSYSTEM_POOL_ENTRY; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  rows_changed_countIdx = 2,
  process_stageIdx = 3,
  LastField = 4,
} TAG_UNNAMED_172, *PTAG_UNNAMED_172;

struct BlockAllocPartialListSLock
{
}; /* size: 0x0004 */

struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_70;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[4];
}; /* size: 0x0048 */

typedef enum __MIDL_ICodeInstall_0001
{
  CIP_DISK_FULL = 0,
  CIP_ACCESS_DENIED = 1,
  CIP_NEWER_VERSION_EXISTS = 2,
  CIP_OLDER_VERSION_EXISTS = 3,
  CIP_NAME_CONFLICT = 4,
  CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
  CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
  CIP_UNSAFE_TO_ABORT = 7,
  CIP_NEED_REBOOT = 8,
  CIP_NEED_REBOOT_UI_PERMISSION = 9,
} _MIDL_ICodeInstall_0001, *P_MIDL_ICodeInstall_0001;

typedef enum __MIDL_IBindStatusCallback_0005
{
  BINDINFO_OPTIONS_WININETFLAG = 0x10000,
  BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,
  BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,
  BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,
  BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,
  BINDINFO_OPTIONS_SECURITYOPTOUT = 0x200000,
  BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 0x400000,
  BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 0x800000,
  BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 0x1000000,
  BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 0x2000000,
  BINDINFO_WPC_DOWNLOADBLOCKED = 0x8000000,
  BINDINFO_WPC_LOGGING_ENABLED = 0x10000000,
  BINDINFO_OPTIONS_ALLOWCONNECTDATA = 0x20000000,
  BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 0x40000000,
  BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = -2147483648,
} _MIDL_IBindStatusCallback_0005, *P_MIDL_IBindStatusCallback_0005;

typedef struct _WNF_STATE_NAME
{
  /* 0x0000 */ unsigned long Data[2];
} WNF_STATE_NAME, *PWNF_STATE_NAME; /* size: 0x0008 */

typedef struct _WNF_TYPE_ID
{
  /* 0x0000 */ struct _GUID TypeId;
} WNF_TYPE_ID, *PWNF_TYPE_ID; /* size: 0x0010 */

typedef struct _WNF_DELIVERY_DESCRIPTOR
{
  /* 0x0000 */ struct _WNF_STATE_NAME StateName;
  /* 0x0008 */ unsigned long ChangeStamp;
  /* 0x000c */ unsigned long DeliveryFlag;
  /* 0x0010 */ unsigned long DeliveryState;
  /* 0x0014 */ unsigned long ReliableRetryDelay;
  /* 0x0018 */ unsigned long BatchRetry;
  /* 0x001c */ unsigned long StateDataSize;
  /* 0x0020 */ unsigned long EventMask;
  /* 0x0024 */ struct _WNF_TYPE_ID TypeId;
  /* 0x0034 */ unsigned long StateDataOffset;
} WNF_DELIVERY_DESCRIPTOR, *PWNF_DELIVERY_DESCRIPTOR; /* size: 0x0038 */

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  object_idIdx = 2,
  recompile_reasonIdx = 3,
  LastField = 4,
} TAG_UNNAMED_173, *PTAG_UNNAMED_173;

class DmpPointer<SOS_Scheduler>
{
  /* 0x0000 */ class SOS_Scheduler* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  lock_modeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_174, *PTAG_UNNAMED_174;

struct XE_TArray<XEDataAttribute,2>
{
  /* 0x0000 */ struct XEDataAttribute m_array[2];
}; /* size: 0x0050 */

struct XE_TEvent<4,0,2>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,2> m_dynamicAttr;
  /* 0x00f8 */ struct XEEvent m_event;
}; /* size: 0x0140 */

class XeSqlPkg::log_buffer_freed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_71[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int current_countOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  _BUF_SIZE = 16,
} TAG_UNNAMED_175, *PTAG_UNNAMED_175;

class Spinlock<269,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 34,
} TAG_UNNAMED_176, *PTAG_UNNAMED_176;

typedef enum
{
  Result = 10000,
} TAG_UNNAMED_177, *PTAG_UNNAMED_177;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_72[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

enum tagPERCEIVED
{
  PERCEIVED_TYPE_FIRST = -3,
  PERCEIVED_TYPE_CUSTOM = -3,
  PERCEIVED_TYPE_UNSPECIFIED = -2,
  PERCEIVED_TYPE_FOLDER = -1,
  PERCEIVED_TYPE_UNKNOWN = 0,
  PERCEIVED_TYPE_TEXT = 1,
  PERCEIVED_TYPE_IMAGE = 2,
  PERCEIVED_TYPE_AUDIO = 3,
  PERCEIVED_TYPE_VIDEO = 4,
  PERCEIVED_TYPE_COMPRESSED = 5,
  PERCEIVED_TYPE_DOCUMENT = 6,
  PERCEIVED_TYPE_SYSTEM = 7,
  PERCEIVED_TYPE_APPLICATION = 8,
  PERCEIVED_TYPE_GAMEMEDIA = 9,
  PERCEIVED_TYPE_CONTACTS = 10,
  PERCEIVED_TYPE_LAST = 10,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 13,
} TAG_UNNAMED_178, *PTAG_UNNAMED_178;

typedef enum _PROCESS_MITIGATION_POLICY
{
  ProcessDEPPolicy = 0,
  ProcessASLRPolicy = 1,
  ProcessStackCheckPolicy = 2,
  ProcessStrictHandleCheckPolicy = 3,
  ProcessSystemCallDisablePolicy = 4,
  MaxProcessMitigationPolicy = 5,
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;

enum XESessionBufferPolicy
{
  XESBP_DROP_EVENT = 0,
  XESBP_BLOCK = 1,
  XESBP_ALLOC = 2,
  XESBP_DROP_BUFFER = 3,
};

struct XEConfigMapping<enum XESessionBufferPolicy>
{
  /* 0x0000 */ wchar_t m_optionName[255];
  /* 0x01fe */ char Padding_73[2];
  /* 0x0200 */ enum XESessionBufferPolicy m_policy;
}; /* size: 0x0204 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 12,
} TAG_UNNAMED_179, *PTAG_UNNAMED_179;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_180, *PTAG_UNNAMED_180;

class EventAutoInternal<SuspendQueueSLock>
{
}; /* size: 0x0028 */

class SOS_UnfairMutexPair
{
  union
  {
    struct
    {
      /* 0x0000 */ class EventAutoInternal<SuspendQueueSLock> m_eventPair;
      /* 0x0028 */ class EventAutoInternal<SuspendQueueSLock> m_eventSingle;
      /* 0x0050 */ volatile unsigned long m_lockCount;
      /* 0x0054 */ long Padding_74;
      /* 0x0058 */ class SOS_Scheduler* m_pOwnerSchedulerPair;
      /* 0x0060 */ class SOS_Scheduler* m_pOwnerSchedulerSingle;
      /* 0x0068 */ class SOS_Task* m_pOwningTaskNoRefPair;
      /* 0x0070 */ class SOS_Task* m_pOwningTaskNoRefSingle;
    }; /* size: 0x0074 */
    /* 0x0000 */ const long Bit_PairWaiter;
    /* 0x0000 */ const long Bit_PairOwnerNoWaiter;
    /* 0x0000 */ const long Bit_PairOwner;
    /* 0x0000 */ const long Bit_MinusPairOwner;
    /* 0x0000 */ const long Mask_PairOwner;
    /* 0x0000 */ const long Bit_SingleWaiter;
    /* 0x0000 */ const long Bit_SingleOwnerNoWaiter;
    /* 0x0000 */ const long Bit_SingleOwner;
    /* 0x0000 */ const long Bit_MinusSingleOwner;
    /* 0x0000 */ const long Mask_SingleOwner;
    /* 0x0000 */ const long Bit_PairOwnerCheck;
  }; /* size: 0x0074 */
}; /* size: 0x0078 */

class SOS_WaitInfo
{
  /* 0x0000 */ unsigned int m_WaitType;
  /* 0x0004 */ long Padding_75;
  /* 0x0008 */ void* m_pResWait;
  /* 0x0010 */ void* m_pSpinlockOper /* function */;
  /* 0x0018 */ class SpinlockBase* m_pSpinlock;
  /* 0x0020 */ class SOS_BlockersEnumeratorCreator* m_creator;
}; /* size: 0x0028 */

class CMemThread<PageHeapMemObj>
{
  /* 0x0000 */ long Padding_76[26];
  /* 0x0068 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x00e0 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0108 */

typedef struct _DEVICE_FLAGS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long Failed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long ReadOnly : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long Removable : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long ConsoleIn : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long ConsoleOut : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long Input : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long Output : 1; /* bit position: 6 */
  }; /* bitfield */
} DEVICE_FLAGS, *PDEVICE_FLAGS; /* size: 0x0004 */

typedef struct _CM_COMPONENT_INFORMATION
{
  /* 0x0000 */ struct _DEVICE_FLAGS Flags;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long Key;
  /* 0x000c */ long Padding_77;
  /* 0x0010 */ unsigned __int64 AffinityMask;
} CM_COMPONENT_INFORMATION, *PCM_COMPONENT_INFORMATION; /* size: 0x0018 */

typedef enum
{
  database_idIdx = 0,
  flushed_logIdx = 1,
  end_of_logIdx = 2,
  clean_shutdownIdx = 3,
  group_idIdx = 4,
  replica_idIdx = 5,
  ag_database_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_181, *PTAG_UNNAMED_181;

enum tagXFORMCOORDS
{
  XFORMCOORDS_POSITION = 1,
  XFORMCOORDS_SIZE = 2,
  XFORMCOORDS_HIMETRICTOCONTAINER = 4,
  XFORMCOORDS_CONTAINERTOHIMETRIC = 8,
  XFORMCOORDS_EVENTCOMPAT = 16,
};

typedef enum
{
  cpu_ticksIdx = 0,
  thread_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_182, *PTAG_UNNAMED_182;

typedef union _userHENHMETAFILE::__MIDL_IWinTypes_0006
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct _BYTE_BLOB* hRemote;
    /* 0x0000 */ __int64 hInproc64;
  }; /* size: 0x0008 */
} userHENHMETAFILE::__MIDL_IWinTypes_0006, *PuserHENHMETAFILE::__MIDL_IWinTypes_0006; /* size: 0x0008 */

typedef struct _userHENHMETAFILE
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_78;
  /* 0x0008 */ union _userHENHMETAFILE::__MIDL_IWinTypes_0006 u;
} userHENHMETAFILE, *PuserHENHMETAFILE; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 16,
} TAG_UNNAMED_183, *PTAG_UNNAMED_183;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_184, *PTAG_UNNAMED_184;

class SEList<XE_IMetadata,32>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_MetadataStore
{
  /* 0x0000 */ class SEList<XE_IMetadata,32> m_mdList;
  /* 0x0010 */ class XE_ILogReadMessageHandler* m_pMsgHandler;
  /* 0x0018 */ struct _GUID m_lastSignature;
  /* 0x0028 */ unsigned short m_lastGeneration;
  /* 0x002a */ char Padding_79[6];
  /* 0x0030 */ class XE_IMetadata* m_pLastMetadata;
}; /* size: 0x0038 */

typedef struct _OLESTREAM
{
  /* 0x0000 */ struct _OLESTREAMVTBL* lpstbl;
} OLESTREAM, *POLESTREAM; /* size: 0x0008 */

struct IOleUndoManager
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_185, *PTAG_UNNAMED_185;

typedef struct _ACL_SIZE_INFORMATION
{
  /* 0x0000 */ unsigned long AceCount;
  /* 0x0004 */ unsigned long AclBytesInUse;
  /* 0x0008 */ unsigned long AclBytesFree;
} ACL_SIZE_INFORMATION, *PACL_SIZE_INFORMATION; /* size: 0x000c */

class CAutoBase<XE_XMLObjectString>
{
  /* 0x0000 */ class XE_XMLObjectString* m_pt;
}; /* size: 0x0008 */

typedef enum _DEP_SYSTEM_POLICY_TYPE
{
  DEPPolicyAlwaysOff = 0,
  DEPPolicyAlwaysOn = 1,
  DEPPolicyOptIn = 2,
  DEPPolicyOptOut = 3,
  DEPTotalPolicyCount = 4,
} DEP_SYSTEM_POLICY_TYPE, *PDEP_SYSTEM_POLICY_TYPE;

typedef struct __vc_attributes::atl::aggregatesAttribute
{
  /* 0x0000 */ const char* clsid;
} _vc_attributes::atl::aggregatesAttribute, *P_vc_attributes::atl::aggregatesAttribute; /* size: 0x0008 */

enum TimeUnit
{
  Second = 0,
  Millisec = -3,
  Microsec = -6,
  HundredNanosec = -7,
};

typedef struct _M128A
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128A, *PM128A; /* size: 0x0010 */

typedef enum
{
  _ALLOC_MASK = 7,
} TAG_UNNAMED_186, *PTAG_UNNAMED_186;

enum XEDataAttributeCapabilities
{
  XDAC_STREAM = 1,
  XDAC_OPTIONAL = 2,
  XDAC_DEFAULT = 0,
};

struct tagEMRPOLYPOLYLINE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long nPolys;
  /* 0x001c */ unsigned long cptl;
  /* 0x0020 */ unsigned long aPolyCounts[1];
  /* 0x0024 */ struct _POINTL aptl[1];
}; /* size: 0x002c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_187, *PTAG_UNNAMED_187;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 24,
} TAG_UNNAMED_188, *PTAG_UNNAMED_188;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_189, *PTAG_UNNAMED_189;

struct IEnumSTATDATA
{
}; /* size: 0x0008 */

enum XEMandatoryStaticAttributes
{
  XEMSA_UUID = 0,
  XEMSA_VERSION = 1,
  XEMSA_CHANNEL = 2,
  XEMSA_LAST = 3,
};

struct IXMLDOMDocumentFragment
{
}; /* size: 0x0008 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  epochIdx = 2,
  csnIdx = 3,
  replica_typeIdx = 4,
  optionsIdx = 5,
  LastField = 6,
} TAG_UNNAMED_190, *PTAG_UNNAMED_190;

enum IExecSql::EParamInitAttributes
{
  NoParamInitAttr = 0,
  Recompile = 1,
  NoMetaData = 2,
  Assign = 3,
  PrepExec = 4,
  PrepQuery = 5,
  ConstProcName = 6,
  ConstParams = 7,
  Rpc = 8,
  Extracted = 9,
  PossibleRawColl = 10,
  ValReturned = 11,
  CursorOutParam = 12,
  NoNamedParam = 13,
  DontCache = 14,
  OutParam = 15,
  ParamIniAttrLastValue = 16,
};

struct XEMap
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ unsigned char m_size;
  /* 0x0021 */ char Padding_80;
  /* 0x0022 */ unsigned short m_entryCount;
  /* 0x0024 */ long Padding_81;
  /* 0x0028 */ struct XEMapEntry* m_entries;
}; /* size: 0x0030 */

struct XE_TMap<9>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[9];
  }; /* size: 0x0090 */
  /* 0x0090 */ struct XEMap m_map;
}; /* size: 0x00c0 */

typedef enum
{
  ArgCount = 2,
} TAG_UNNAMED_191, *PTAG_UNNAMED_191;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_192, *PTAG_UNNAMED_192;

enum tagEOLE_AUTHENTICATION_CAPABILITIES
{
  EOAC_NONE = 0,
  EOAC_MUTUAL_AUTH = 1,
  EOAC_STATIC_CLOAKING = 32,
  EOAC_DYNAMIC_CLOAKING = 64,
  EOAC_ANY_AUTHORITY = 128,
  EOAC_MAKE_FULLSIC = 256,
  EOAC_DEFAULT = 2048,
  EOAC_SECURE_REFS = 2,
  EOAC_ACCESS_CONTROL = 4,
  EOAC_APPID = 8,
  EOAC_DYNAMIC = 16,
  EOAC_REQUIRE_FULLSIC = 512,
  EOAC_AUTO_IMPERSONATE = 1024,
  EOAC_NO_CUSTOM_MARSHAL = 8192,
  EOAC_DISABLE_AAA = 4096,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 29,
} TAG_UNNAMED_193, *PTAG_UNNAMED_193;

typedef enum
{
  addressIdx = 0,
  classIdx = 1,
  keep_countIdx = 2,
  shared_countIdx = 3,
  update_countIdx = 4,
  exclusive_countIdx = 5,
  destroy_countIdx = 6,
  has_waitersIdx = 7,
  is_superlatchIdx = 8,
  is_poisonedIdx = 9,
  database_idIdx = 10,
  file_idIdx = 11,
  page_idIdx = 12,
  LastField = 13,
} TAG_UNNAMED_194, *PTAG_UNNAMED_194;

typedef struct __vc_attributes::entryAttribute
{
  /* 0x0000 */ const char* entry_id;
} _vc_attributes::entryAttribute, *P_vc_attributes::entryAttribute; /* size: 0x0008 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  gdm_addressIdx = 2,
  gdm_task_addressIdx = 3,
  LastField = 4,
} TAG_UNNAMED_195, *PTAG_UNNAMED_195;

enum tagPROPPAGESTATUS
{
  PROPPAGESTATUS_DIRTY = 1,
  PROPPAGESTATUS_VALIDATE = 2,
  PROPPAGESTATUS_CLEAN = 4,
};

typedef enum
{
  ArgCount = 3,
} TAG_UNNAMED_196, *PTAG_UNNAMED_196;

typedef struct _SID_AND_ATTRIBUTES
{
  /* 0x0000 */ void* Sid;
  /* 0x0008 */ unsigned long Attributes;
  /* 0x000c */ long __PADDING__[1];
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES; /* size: 0x0010 */

typedef struct _TOKEN_MANDATORY_LABEL
{
  /* 0x0000 */ struct _SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL; /* size: 0x0010 */

typedef enum __MIDL_IBindStatusCallbackEx_0001
{
  BINDF2_DISABLEBASICOVERHTTP = 1,
  BINDF2_DISABLEAUTOCOOKIEHANDLING = 2,
  BINDF2_READ_DATA_GREATER_THAN_4GB = 4,
  BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8,
  BINDF2_SETDOWNLOADMODE = 32,
  BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64,
  BINDF2_RESERVED_E = 0x40000,
  BINDF2_RESERVED_D = 0x80000,
  BINDF2_RESERVED_C = 0x100000,
  BINDF2_RESERVED_B = 0x200000,
  BINDF2_RESERVED_A = 0x400000,
  BINDF2_RESERVED_9 = 0x800000,
  BINDF2_RESERVED_8 = 0x1000000,
  BINDF2_RESERVED_7 = 0x2000000,
  BINDF2_RESERVED_6 = 0x4000000,
  BINDF2_RESERVED_5 = 0x8000000,
  BINDF2_RESERVED_4 = 0x10000000,
  BINDF2_RESERVED_3 = 0x20000000,
  BINDF2_RESERVED_2 = 0x40000000,
  BINDF2_RESERVED_1 = -2147483648,
} _MIDL_IBindStatusCallbackEx_0001, *P_MIDL_IBindStatusCallbackEx_0001;

class XeSqlPkg::security_authentication_perf_find_login
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_82[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int find_login_durationOffset;
    /* 0x0000 */ const int is_sql_authenticationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_197, *PTAG_UNNAMED_197;

enum XeSqlPkg::sp_cache_remove::CustomizableSlots
{
  collect_cached_textSlot = 0,
  collect_database_nameSlot = 1,
  collect_plan_handleSlot = 2,
};

struct PPM_IDLE_STATE_ACCOUNTING
{
  /* 0x0000 */ unsigned long IdleTransitions;
  /* 0x0004 */ unsigned long FailedTransitions;
  /* 0x0008 */ unsigned long InvalidBucketIndex;
  /* 0x000c */ long Padding_83;
  /* 0x0010 */ unsigned __int64 TotalTime;
  /* 0x0018 */ unsigned long IdleTimeBuckets[6];
}; /* size: 0x0030 */

typedef enum _KTMOBJECT_TYPE
{
  KTMOBJECT_TRANSACTION = 0,
  KTMOBJECT_TRANSACTION_MANAGER = 1,
  KTMOBJECT_RESOURCE_MANAGER = 2,
  KTMOBJECT_ENLISTMENT = 3,
  KTMOBJECT_INVALID = 4,
} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;

typedef enum
{
  alnum = 263,
  alpha = 259,
  cntrl = 32,
  digit = 4,
  graph = 279,
  lower = 2,
  print = 471,
  punct = 16,
  space = 72,
  upper = 1,
  xdigit = 128,
} TAG_UNNAMED_198, *PTAG_UNNAMED_198;

typedef struct _LOCALGROUP_INFO_0
{
  /* 0x0000 */ wchar_t* lgrpi0_name;
} LOCALGROUP_INFO_0, *PLOCALGROUP_INFO_0; /* size: 0x0008 */

typedef enum
{
  endpoint_typeIdx = 0,
  proxied_endpoint_typeIdx = 1,
  hop_countIdx = 2,
  addressIdx = 3,
  correlator_idIdx = 4,
  connection_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_199, *PTAG_UNNAMED_199;

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  rows_affectedIdx = 4,
  LastField = 5,
} TAG_UNNAMED_200, *PTAG_UNNAMED_200;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_201, *PTAG_UNNAMED_201;

typedef enum
{
  cache_addressIdx = 0,
  descriptor_addressIdx = 1,
  user_data_addressIdx = 2,
  is_insertionIdx = 3,
  decisionIdx = 4,
  stateIdx = 5,
  size_in_pagesIdx = 6,
  time_to_generateIdx = 7,
  use_countIdx = 8,
  average_intervalIdx = 9,
  probability_of_reuseIdx = 10,
  valueIdx = 11,
  value_of_memoryIdx = 12,
  LastField = 13,
} TAG_UNNAMED_202, *PTAG_UNNAMED_202;

typedef enum _RTL_UMS_SCHEDULER_REASON
{
  UmsSchedulerStartup = 0,
  UmsSchedulerThreadBlocked = 1,
  UmsSchedulerThreadYield = 2,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 2,
} TAG_UNNAMED_203, *PTAG_UNNAMED_203;

enum XE_XmlOptions
{
  XEXML_NONE = 0,
  XEXML_USE_CDATA = 1,
  XEXML_PACKAGE_AS_GUID = 2,
  XEXML_INCLUDE_MODULE_NAMES = 4,
  XEXML_INCLUDE_EVENT_GUIDS = 8,
  XEXML_INCLUDE_FIELD_TYPES = 16,
  XEXML_INCLUDE_FIELD_TEXT = 32,
  XEXML_NO_PACKAGE_INFO = 64,
  XEXML_USE_CACHING = 128,
  XEXML_USE_LOCALTIME = 256,
};

struct XE_StandardFormatter::MapEntry
{
  /* 0x0000 */ void* m_valToStr /* function */;
  /* 0x0008 */ void* m_valExToStr /* function */;
}; /* size: 0x0010 */

class XE_StandardFormatter
{
  /* 0x0000 */ struct XE_StandardFormatter::MapEntry m_mapping[28];
}; /* size: 0x01c0 */

class XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig>
{
  /* 0x0000 */ long Padding_84[2];
  /* 0x0008 */ const class XE_LiveSessionMetadata* m_metadata;
  /* 0x0010 */ const struct XEEventBufferHeader* m_pSerializedEvent;
  /* 0x0018 */ const struct XEEvent* m_event;
  /* 0x0020 */ unsigned short m_index;
  /* 0x0022 */ char Padding_85[6];
  /* 0x0028 */ const unsigned char* m_pBuf;
}; /* size: 0x0030 */

class XE_ParserFactory<XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >
{
  /* 0x0000 */ class XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> m_parser;
}; /* size: 0x0030 */

class XE_AutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> >
{
}; /* size: 0x0008 */

class XE_Xml<XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >
{
  union
  {
    /* 0x0000 */ const unsigned int STACK_STREAM_BUFFER;
    /* 0x0000 */ const unsigned int MIN_CDATA_INVALID_STRING;
    /* 0x0000 */ const class XE_Metadata* m_metadata;
  }; /* size: 0x0008 */
  /* 0x0008 */ enum XE_XmlOptions m_opts;
  /* 0x000c */ long Padding_86;
  /* 0x0010 */ const class XE_StandardFormatter m_formatter;
  /* 0x01d0 */ class XE_ParserFactory<XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> > m_parserFactory;
  /* 0x0200 */ void* m_pfnSymbolizeCallstack /* function */;
  /* 0x0208 */ struct _TIME_ZONE_INFORMATION* m_timeZoneInfo;
  /* 0x0210 */ class XE_AutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> > m_objectCache;
}; /* size: 0x0218 */

enum SHREGENUM_FLAGS
{
  SHREGENUM_DEFAULT = 0,
  SHREGENUM_HKCU = 1,
  SHREGENUM_HKLM = 16,
  SHREGENUM_BOTH = 17,
};

class XeSqlPkg::remote_dmv_stream_open_client
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_87[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_204, *PTAG_UNNAMED_204;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_205, *PTAG_UNNAMED_205;

struct tagBIND_OPTS3
{
  /* 0x0000 */ long Padding_88[10];
  /* 0x0028 */ struct HWND__* hwnd;
}; /* size: 0x0030 */

enum tagFUNCKIND
{
  FUNC_VIRTUAL = 0,
  FUNC_PUREVIRTUAL = 1,
  FUNC_NONVIRTUAL = 2,
  FUNC_STATIC = 3,
  FUNC_DISPATCH = 4,
};

enum tagINVOKEKIND
{
  INVOKE_FUNC = 1,
  INVOKE_PROPERTYGET = 2,
  INVOKE_PROPERTYPUT = 4,
  INVOKE_PROPERTYPUTREF = 8,
};

struct tagFUNCDESC
{
  /* 0x0000 */ long memid;
  /* 0x0004 */ long Padding_89;
  /* 0x0008 */ long* lprgscode;
  /* 0x0010 */ struct tagELEMDESC* lprgelemdescParam;
  /* 0x0018 */ enum tagFUNCKIND funckind;
  /* 0x001c */ enum tagINVOKEKIND invkind;
  /* 0x0020 */ enum tagCALLCONV callconv;
  /* 0x0024 */ short cParams;
  /* 0x0026 */ short cParamsOpt;
  /* 0x0028 */ short oVft;
  /* 0x002a */ short cScodes;
  /* 0x002c */ long Padding_90;
  /* 0x0030 */ struct tagELEMDESC elemdescFunc;
  /* 0x0050 */ unsigned short wFuncFlags;
  /* 0x0052 */ char __PADDING__[6];
}; /* size: 0x0058 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 17,
} TAG_UNNAMED_206, *PTAG_UNNAMED_206;

struct IInternetSecurityMgrSite
{
}; /* size: 0x0008 */

typedef enum _SE_LEARNING_MODE_DATA_TYPE
{
  SeLearningModeInvalidType = 0,
  SeLearningModeSettings = 1,
  SeLearningModeMax = 2,
} SE_LEARNING_MODE_DATA_TYPE, *PSE_LEARNING_MODE_DATA_TYPE;

typedef struct _BYTE_BLOB
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ unsigned char abData[1];
  /* 0x0005 */ char __PADDING__[3];
} BYTE_BLOB, *PBYTE_BLOB; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 28,
} TAG_UNNAMED_207, *PTAG_UNNAMED_207;

typedef struct __vc_attributes::caseAttribute
{
  /* 0x0000 */ int value;
} _vc_attributes::caseAttribute, *P_vc_attributes::caseAttribute; /* size: 0x0004 */

enum tagSTRRET_TYPE
{
  STRRET_WSTR = 0,
  STRRET_OFFSET = 1,
  STRRET_CSTR = 2,
};

typedef enum
{
  MaxPossibleCpus = 1024,
} TAG_UNNAMED_208, *PTAG_UNNAMED_208;

class CAutoP<XE_LoadedLibrary>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_209, *PTAG_UNNAMED_209;

typedef struct _OLESTREAMVTBL
{
  /* 0x0000 */ void* Get /* function */;
  /* 0x0008 */ void* Put /* function */;
} OLESTREAMVTBL, *POLESTREAMVTBL; /* size: 0x0010 */

typedef enum
{
  VersionEventBufferHeader = 10,
} TAG_UNNAMED_210, *PTAG_UNNAMED_210;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_211, *PTAG_UNNAMED_211;

enum tagUASFLAGS
{
  UAS_NORMAL = 0,
  UAS_BLOCKED = 1,
  UAS_NOPARENTENABLE = 2,
  UAS_MASK = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 33,
} TAG_UNNAMED_212, *PTAG_UNNAMED_212;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 32,
} TAG_UNNAMED_213, *PTAG_UNNAMED_213;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 0,
  VldEddOffset = 9,
  BufSize = 68,
} TAG_UNNAMED_214, *PTAG_UNNAMED_214;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 40,
} TAG_UNNAMED_215, *PTAG_UNNAMED_215;

struct tagRemSNB
{
  /* 0x0000 */ unsigned long ulCntStr;
  /* 0x0004 */ unsigned long ulCntChar;
  /* 0x0008 */ wchar_t rgString[1];
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

enum RESOBJECT_ACTION
{
  RESOBJECT_DELETED = 0,
  RESOBJECT_ADDED = 1,
  RESOBJECT_RESETSTATS = 2,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_216, *PTAG_UNNAMED_216;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

struct ICodeInstall
{
}; /* size: 0x0008 */

enum tagCLSCTX
{
  CLSCTX_INPROC_SERVER = 1,
  CLSCTX_INPROC_HANDLER = 2,
  CLSCTX_LOCAL_SERVER = 4,
  CLSCTX_INPROC_SERVER16 = 8,
  CLSCTX_REMOTE_SERVER = 16,
  CLSCTX_INPROC_HANDLER16 = 32,
  CLSCTX_RESERVED1 = 64,
  CLSCTX_RESERVED2 = 128,
  CLSCTX_RESERVED3 = 256,
  CLSCTX_RESERVED4 = 512,
  CLSCTX_NO_CODE_DOWNLOAD = 1024,
  CLSCTX_RESERVED5 = 2048,
  CLSCTX_NO_CUSTOM_MARSHAL = 4096,
  CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
  CLSCTX_NO_FAILURE_LOG = 16384,
  CLSCTX_DISABLE_AAA = 0xffff8000,
  CLSCTX_ENABLE_AAA = 0x10000,
  CLSCTX_FROM_DEFAULT_CONTEXT = 0x20000,
  CLSCTX_ACTIVATE_32_BIT_SERVER = 0x40000,
  CLSCTX_ACTIVATE_64_BIT_SERVER = 0x80000,
  CLSCTX_ENABLE_CLOAKING = 0x100000,
  CLSCTX_APPCONTAINER = 0x400000,
  CLSCTX_PS_DLL = -2147483648,
};

struct tagEXTLOGFONTW
{
  /* 0x0000 */ struct tagLOGFONTW elfLogFont;
  /* 0x005c */ wchar_t elfFullName[64];
  /* 0x00dc */ wchar_t elfStyle[32];
  /* 0x011c */ unsigned long elfVersion;
  /* 0x0120 */ unsigned long elfStyleSize;
  /* 0x0124 */ unsigned long elfMatch;
  /* 0x0128 */ unsigned long elfReserved;
  /* 0x012c */ unsigned char elfVendorId[4];
  /* 0x0130 */ unsigned long elfCulture;
  /* 0x0134 */ struct tagPANOSE elfPanose;
  /* 0x013e */ char __PADDING__[2];
}; /* size: 0x0140 */

typedef struct __vc_attributes::emitidlAttribute
{
  union
  {
    /* 0x0000 */ const int restricted;
    /* 0x0000 */ const int forced;
    /* 0x0000 */ const int push;
    /* 0x0000 */ const int pop;
    /* 0x0000 */ int value;
  }; /* size: 0x0004 */
  /* 0x0004 */ BOOL defaultimports;
  /* 0x0005 */ char __PADDING__[3];
} _vc_attributes::emitidlAttribute, *P_vc_attributes::emitidlAttribute; /* size: 0x0008 */

class SEHashTableGrow<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>
{
  /* 0x0000 */ long Padding_91[8];
  /* 0x0020 */ int m_fillFactor;
  /* 0x0024 */ unsigned int m_entryGrowthCount;
  /* 0x0028 */ unsigned int m_bucketMaxCount;
}; /* size: 0x0030 */

typedef enum
{
  source_database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  durationIdx = 3,
  cpu_timeIdx = 4,
  physical_readsIdx = 5,
  logical_readsIdx = 6,
  writesIdx = 7,
  row_countIdx = 8,
  last_row_countIdx = 9,
  nest_levelIdx = 10,
  line_numberIdx = 11,
  offsetIdx = 12,
  offset_endIdx = 13,
  object_nameIdx = 14,
  statementIdx = 15,
  LastField = 16,
} TAG_UNNAMED_217, *PTAG_UNNAMED_217;

class AutoSpinlockHolder<249,1,1>
{
}; /* size: 0x0010 */

enum tagOLECLOSE
{
  OLECLOSE_SAVEIFDIRTY = 0,
  OLECLOSE_NOSAVE = 1,
  OLECLOSE_PROMPTSAVE = 2,
};

enum cache_type
{
  CLOCK = 0,
  PROBABILISTIC = 1,
};

class XeSqlPkg::exchange_spill
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_92[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int opcodeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_218, *PTAG_UNNAMED_218;

class SQLFatalHandlers
{
}; /* size: 0x0001 */

typedef enum
{
  database_idIdx = 0,
  owner_rowsetIdx = 1,
  tracking_table_rowsetIdx = 2,
  secondary_rowsetIdx = 3,
  cleanup_resultIdx = 4,
  LastField = 5,
} TAG_UNNAMED_219, *PTAG_UNNAMED_219;

enum tagExtendedErrorParamTypes
{
  eeptAnsiString = 1,
  eeptUnicodeString = 2,
  eeptLongVal = 3,
  eeptShortVal = 4,
  eeptPointerVal = 5,
  eeptNone = 6,
  eeptBinary = 7,
};

struct tagSTGMEDIUM
{
  /* 0x0000 */ unsigned long tymed;
  /* 0x0004 */ long Padding_93;
  union
  {
    /* 0x0008 */ struct HBITMAP__* hBitmap;
    /* 0x0008 */ void* hMetaFilePict;
    /* 0x0008 */ struct HENHMETAFILE__* hEnhMetaFile;
    /* 0x0008 */ void* hGlobal;
    /* 0x0008 */ wchar_t* lpszFileName;
    /* 0x0008 */ struct IStream* pstm;
    /* 0x0008 */ struct IStorage* pstg;
  }; /* size: 0x0008 */
  /* 0x0010 */ struct IUnknown* pUnkForRelease;
}; /* size: 0x0018 */

typedef enum __MIDL_IInternetZoneManager_0002
{
  ZAFLAGS_CUSTOM_EDIT = 1,
  ZAFLAGS_ADD_SITES = 2,
  ZAFLAGS_REQUIRE_VERIFICATION = 4,
  ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8,
  ZAFLAGS_INCLUDE_INTRANET_SITES = 16,
  ZAFLAGS_NO_UI = 32,
  ZAFLAGS_SUPPORTS_VERIFICATION = 64,
  ZAFLAGS_UNC_AS_INTRANET = 128,
  ZAFLAGS_DETECT_INTRANET = 256,
  ZAFLAGS_USE_LOCKED_ZONES = 0x10000,
  ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 0x20000,
  ZAFLAGS_NO_CACHE = 0x40000,
} _MIDL_IInternetZoneManager_0002, *P_MIDL_IInternetZoneManager_0002;

struct IOleItemContainer
{
}; /* size: 0x0008 */

typedef enum
{
  _Allocated = 1,
  _Constant = 2,
  _Dynamic = 4,
  _Frozen = 8,
} TAG_UNNAMED_220, *PTAG_UNNAMED_220;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_221, *PTAG_UNNAMED_221;

class XeCloudMinPkg::warmup_partition
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_94[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  log_block_idIdx = 0,
  log_block_sizeIdx = 1,
  log_buffer_sizeIdx = 2,
  fc_sequenceIdx = 3,
  scan_generationIdx = 4,
  message_log_idIdx = 5,
  log_bufferIdx = 6,
  LastField = 7,
} TAG_UNNAMED_222, *PTAG_UNNAMED_222;

struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionWithoutActive
{
}; /* size: 0x00c0 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,16384,524288,8,1> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class TMemoryBlockAllocator<0,16384,524288,8,1>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,16384,524288,8,1> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionWithoutActive m_nodePart[64];
  /* 0x30c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,16384,524288,8,1> > m_reservationForActiveParts;
}; /* size: 0x3100 */

typedef enum _FINDEX_SEARCH_OPS
{
  FindExSearchNameMatch = 0,
  FindExSearchLimitToDirectories = 1,
  FindExSearchLimitToDevices = 2,
  FindExSearchMaxSearchOp = 3,
} FINDEX_SEARCH_OPS, *PFINDEX_SEARCH_OPS;

class AutoSpinlockHolder<236,1,1>
{
}; /* size: 0x0010 */

enum tagOLEDCFLAGS
{
  OLEDC_NODRAW = 1,
  OLEDC_PAINTBKGND = 2,
  OLEDC_OFFSCREEN = 4,
};

class XeCloudMinPkg::ping_dispatch_received
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_95[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int message_idOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int function_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_223, *PTAG_UNNAMED_223;

class AutoSpinlockHolder<178,3,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_224, *PTAG_UNNAMED_224;

enum SQLDUMPER_ERRORS
{
  SQLDUMPER_APP_ERROR_FLAG = 0x20000000,
  SQLDUMPER_INCOMPLETE = 0,
  SQLDUMPER_NO_ERROR = 0x20000001,
  SQLDUMPER_CREATE_DUMP = 0x20000002,
  SQLDUMPER_CREATE_MFST = 0x20000004,
  SQLDUMPER_OPEN_PROCESS = 0x20000008,
  SQLDUMPER_MINI_DUMP = 0x20000010,
  SQLDUMPER_REG_READ = 0x20000020,
  SQLDUMPER_START_DW = 0x20000040,
  SQLDUMPER_WRITE_MFST = 0x20000080,
  SQLDUMPER_VERSION = 0x20000100,
  SQLDUMPER_REMOTE_READ = 0x20000200,
  SQLDUMPER_REMOTE_CHECKSUM = 0x20000400,
  SQLDUMPER_REMOTE_SANITY = 0x20000800,
  SQLDUMPER_USAGE = 0x20001000,
  SQLDUMPER_SENT_DUMP = 0x20002000,
  SQLDUMPER_IMAGE_CORRUPTION = 0x20004000,
  SQLDUMPER_CHILD_FAILED = 0x20008000,
};

enum TCacheStore<CacheProbabilisticAlgorithm>::InsertOptions
{
  SkipNoHashTable = 0,
  SkipMainHashTable = 1,
  SkipTokenHashTable = 2,
};

class Spinlock<318,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_225, *PTAG_UNNAMED_225;

typedef enum
{
  database_idIdx = 0,
  rowset_idIdx = 1,
  delta_store_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_226, *PTAG_UNNAMED_226;

struct HRSRC__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_227, *PTAG_UNNAMED_227;

enum tagSYSKIND
{
  SYS_WIN16 = 0,
  SYS_WIN32 = 1,
  SYS_MAC = 2,
  SYS_WIN64 = 3,
};

typedef struct _KAFFINITY_EX
{
  /* 0x0000 */ unsigned short Count;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned __int64 Bitmap[8];
} KAFFINITY_EX, *PKAFFINITY_EX; /* size: 0x0048 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_228, *PTAG_UNNAMED_228;

class AutoSpinlockHolder<274,4,1>;

typedef enum _PROCESS_INFORMATION_CLASS
{
  ProcessMemoryPriority = 0,
  ProcessInformationClassMax = 1,
} PROCESS_INFORMATION_CLASS, *PPROCESS_INFORMATION_CLASS;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 25,
} TAG_UNNAMED_229, *PTAG_UNNAMED_229;

class SEList<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_AutoP<TSinglyLinkedList<XE_ConfigCrc> >
{
}; /* size: 0x0008 */

enum tagApplicationType
{
  ServerApplication = 0,
  LibraryApplication = 1,
};

struct IXMLDOMNodeList
{
}; /* size: 0x0008 */

typedef enum __MIDL_IAuthenticateEx_0001
{
  AUTHENTICATEF_PROXY = 1,
  AUTHENTICATEF_BASIC = 2,
  AUTHENTICATEF_HTTP = 4,
} _MIDL_IAuthenticateEx_0001, *P_MIDL_IAuthenticateEx_0001;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_230, *PTAG_UNNAMED_230;

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_231, *PTAG_UNNAMED_231;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 21,
} TAG_UNNAMED_232, *PTAG_UNNAMED_232;

class CAutoBase<XE_ConfigCrc>
{
  /* 0x0000 */ struct XE_ConfigCrc* m_pt;
}; /* size: 0x0008 */

enum tag_WBEM_TIMEOUT_TYPE
{
  WBEM_NO_WAIT = 0,
  WBEM_INFINITE = -1,
};

struct IWbemQualifierSet
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_233, *PTAG_UNNAMED_233;

typedef struct _ldiv_t
{
  /* 0x0000 */ long quot;
  /* 0x0004 */ long rem;
} ldiv_t, *Pldiv_t; /* size: 0x0008 */

enum tagDESCKIND
{
  DESCKIND_NONE = 0,
  DESCKIND_FUNCDESC = 1,
  DESCKIND_VARDESC = 2,
  DESCKIND_TYPECOMP = 3,
  DESCKIND_IMPLICITAPPOBJ = 4,
  DESCKIND_MAX = 5,
};

class SpinlockHolder<143,4,1>;

struct XPRESS9_DECODER_T;

enum tag_WBEM_REFRESHER_FLAGS
{
  WBEM_FLAG_REFRESH_AUTO_RECONNECT = 0,
  WBEM_FLAG_REFRESH_NO_AUTO_RECONNECT = 1,
};

struct XEAPI
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_96[6];
  /* 0x0008 */ const wchar_t* m_name;
}; /* size: 0x0010 */

struct XEEngineClientAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* LockEngineForSearch /* function */;
  /* 0x0018 */ void* UnlockEngineForSearch /* function */;
  /* 0x0020 */ void* Initialize /* function */;
  /* 0x0028 */ void* IsInitialized /* function */;
  /* 0x0030 */ void* Finalize /* function */;
  /* 0x0038 */ void* EnumBegin /* function */;
  /* 0x0040 */ void* EnumSessionBegin /* function */;
  /* 0x0048 */ void* EnumNext /* function */;
  /* 0x0050 */ void* EnumEnd /* function */;
  /* 0x0058 */ void* GetPackageById /* function */;
  /* 0x0060 */ void* GetPackageMetadata /* function */;
  /* 0x0068 */ void* ResolveNameByType /* function */;
  /* 0x0070 */ void* ResolveHandle /* function */;
  /* 0x0078 */ void* ResolveObject /* function */;
  /* 0x0080 */ void* ResolvePackage /* function */;
  /* 0x0088 */ void* ResolveEvent /* function */;
  /* 0x0090 */ void* ResolvePredicate /* function */;
  /* 0x0098 */ void* GetObjectAttributes /* function */;
  /* 0x00a0 */ void* CreatePackageHolder /* function */;
  /* 0x00a8 */ void* CreateSession /* function */;
  /* 0x00b0 */ void* GetSessionProperties /* function */;
  /* 0x00b8 */ void* GetSessionStats /* function */;
  /* 0x00c0 */ void* FlushSession /* function */;
  /* 0x00c8 */ void* OpenChangelist /* function */;
  /* 0x00d0 */ void* CommitChangelist /* function */;
  /* 0x00d8 */ void* DiscardChangelist /* function */;
  /* 0x00e0 */ void* AddTarget /* function */;
  /* 0x00e8 */ void* RemoveTarget /* function */;
  /* 0x00f0 */ void* EnableEvent /* function */;
  /* 0x00f8 */ void* DisableEvent /* function */;
  /* 0x0100 */ void* CreateEventFieldPredicateLeaf /* function */;
  /* 0x0108 */ void* CreateGlobalPredicateLeaf /* function */;
  /* 0x0110 */ void* CreatePredicateNode /* function */;
  /* 0x0118 */ void* IsEventEnabled /* function */;
  /* 0x0120 */ void* GetTargetState /* function */;
  /* 0x0128 */ void* AcquireObjectReference /* function */;
  /* 0x0130 */ void* ReleaseObjectReference /* function */;
  /* 0x0138 */ void* RegisterNotification /* function */;
  /* 0x0140 */ void* UnregisterNotification /* function */;
  /* 0x0148 */ void* SetLocalStorage /* function */;
  /* 0x0150 */ void* GetLocalStorage /* function */;
  /* 0x0158 */ void* SetDiagnosticLevel /* function */;
  /* 0x0160 */ void* SetCustomizationFlags /* function */;
  /* 0x0168 */ void* GetTransferActivityId /* function */;
  /* 0x0170 */ void* SetTransferActivityId /* function */;
  /* 0x0178 */ void* ChangeActivityId /* function */;
  /* 0x0180 */ void* GetLastErrorContext /* function */;
  /* 0x0188 */ void* SetPendingInitialize /* function */;
  /* 0x0190 */ void* IsPendingInitialize /* function */;
  /* 0x0198 */ void* GetTargetPrivateAPI /* function */;
  /* 0x01a0 */ void* GetLocalizedString /* function */;
  /* 0x01a8 */ void* SetSessionFlushTimeout /* function */;
  /* 0x01b0 */ void* CloseSession /* function */;
}; /* size: 0x01b8 */

typedef struct _USER_MODALS_INFO_1005
{
  /* 0x0000 */ unsigned long usrmod1005_password_hist_len;
} USER_MODALS_INFO_1005, *PUSER_MODALS_INFO_1005; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 0,
  VldEddOffset = 9,
  BufSize = 40,
} TAG_UNNAMED_234, *PTAG_UNNAMED_234;

class ThreadScheduler
{
}; /* size: 0xf0a0 */

enum tagPENDINGTYPE
{
  PENDINGTYPE_TOPLEVEL = 1,
  PENDINGTYPE_NESTED = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_235, *PTAG_UNNAMED_235;

struct tagHARDWAREINPUT
{
  /* 0x0000 */ unsigned long uMsg;
  /* 0x0004 */ unsigned short wParamL;
  /* 0x0006 */ unsigned short wParamH;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_236, *PTAG_UNNAMED_236;

typedef enum _MANDATORY_LEVEL
{
  MandatoryLevelUntrusted = 0,
  MandatoryLevelLow = 1,
  MandatoryLevelMedium = 2,
  MandatoryLevelHigh = 3,
  MandatoryLevelSystem = 4,
  MandatoryLevelSecureProcess = 5,
  MandatoryLevelCount = 6,
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

enum tagCOINITBASE
{
  COINITBASE_MULTITHREADED = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_237, *PTAG_UNNAMED_237;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_238, *PTAG_UNNAMED_238;

typedef struct _HEAP_SUMMARY
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_97;
  /* 0x0008 */ unsigned __int64 cbAllocated;
  /* 0x0010 */ unsigned __int64 cbCommitted;
  /* 0x0018 */ unsigned __int64 cbReserved;
  /* 0x0020 */ unsigned __int64 cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY; /* size: 0x0028 */

enum tag_WBEM_FLAVOR_TYPE
{
  WBEM_FLAVOR_DONT_PROPAGATE = 0,
  WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE = 1,
  WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS = 2,
  WBEM_FLAVOR_MASK_PROPAGATION = 15,
  WBEM_FLAVOR_OVERRIDABLE = 0,
  WBEM_FLAVOR_NOT_OVERRIDABLE = 16,
  WBEM_FLAVOR_MASK_PERMISSIONS = 16,
  WBEM_FLAVOR_ORIGIN_LOCAL = 0,
  WBEM_FLAVOR_ORIGIN_PROPAGATED = 32,
  WBEM_FLAVOR_ORIGIN_SYSTEM = 64,
  WBEM_FLAVOR_MASK_ORIGIN = 96,
  WBEM_FLAVOR_NOT_AMENDED = 0,
  WBEM_FLAVOR_AMENDED = 128,
  WBEM_FLAVOR_MASK_AMENDED = 128,
};

typedef enum
{
  modeIdx = 0,
  durationIdx = 1,
  file_handleIdx = 2,
  offsetIdx = 3,
  database_idIdx = 4,
  file_idIdx = 5,
  filegroup_idIdx = 6,
  sizeIdx = 7,
  pathIdx = 8,
  LastField = 9,
} TAG_UNNAMED_239, *PTAG_UNNAMED_239;

struct XE_LogDefaultMetadataHeader
{
  /* 0x0000 */ struct _GUID m_metadataSignature;
  /* 0x0010 */ unsigned short m_metadataGeneration;
  /* 0x0012 */ unsigned short m_padding;
}; /* size: 0x0014 */

struct _HREGREADBATCHREPLY;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_240, *PTAG_UNNAMED_240;

enum XESessionFlags
{
  XESF_NONE = 0,
  XESF_FLUSH_BUFFERS_ON_CLOSE = 1,
  XESF_DEDICATED_DISPATCHER = 2,
  XESF_ALLOW_RECURSIVE_EVENTS = 4,
  XESF_TRACK_CAUSALITY = 8,
  XESF_HIDDEN = 16,
  XESF_ZEROBUFFERS = 32,
  XESF_VERIFY = 64,
  XESF_CLOSING = 128,
  XESF_DEFAULT = 1,
};

typedef struct _SHITEMID
{
  /* 0x0000 */ unsigned short cb;
  /* 0x0002 */ unsigned char abID[1];
} SHITEMID, *PSHITEMID; /* size: 0x0003 */

typedef struct _ITEMIDLIST
{
  /* 0x0000 */ struct _SHITEMID mkid;
} ITEMIDLIST, *PITEMIDLIST; /* size: 0x0003 */

class DmpPointer<_FIBER>
{
  /* 0x0000 */ struct _FIBER* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 18,
  NVld = 7,
  VldEddOffset = 10,
  BufSize = 131,
} TAG_UNNAMED_241, *PTAG_UNNAMED_241;

class XeSqlPkg::oledb_call
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_98[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int parametersOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

enum tagPictureAttributes
{
  PICTURE_SCALABLE = 1,
  PICTURE_TRANSPARENT = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 24,
} TAG_UNNAMED_242, *PTAG_UNNAMED_242;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 29,
} TAG_UNNAMED_243, *PTAG_UNNAMED_243;

enum tag_WBEM_QUERY_FLAG_TYPE
{
  WBEM_FLAG_DEEP = 0,
  WBEM_FLAG_SHALLOW = 1,
  WBEM_FLAG_PROTOTYPE = 2,
};

enum tagGLOBALOPT_PROPERTIES
{
  COMGLB_EXCEPTION_HANDLING = 1,
  COMGLB_APPID = 2,
  COMGLB_RPC_THREADPOOL_SETTING = 3,
  COMGLB_RO_SETTINGS = 4,
};

struct tagCOLORCORRECTPALETTE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPalette;
  /* 0x000c */ unsigned long nFirstEntry;
  /* 0x0010 */ unsigned long nPalEntries;
  /* 0x0014 */ unsigned long nReserved;
}; /* size: 0x0018 */

enum ESqlGlobalSKU
{
  x_dwUnknownSKU = 0,
  x_dwSqlWIDSKU = 1,
  x_dwSqlMSOSKU = 2,
};

enum LATENCY_TIME
{
  LT_DONT_CARE = 0,
  LT_LOWEST_LATENCY = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_244, *PTAG_UNNAMED_244;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_245, *PTAG_UNNAMED_245;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_246, *PTAG_UNNAMED_246;

class XE_AutoP<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > >
{
}; /* size: 0x0008 */

typedef enum __MIDL_IInternetSecurityManager_0002
{
  PUAFOUT_DEFAULT = 0,
  PUAFOUT_ISLOCKZONEPOLICY = 1,
} _MIDL_IInternetSecurityManager_0002, *P_MIDL_IInternetSecurityManager_0002;

typedef struct _FILE_COMPLETION_INFORMATION
{
  /* 0x0000 */ void* Port;
  /* 0x0008 */ void* Key;
} FILE_COMPLETION_INFORMATION, *PFILE_COMPLETION_INFORMATION; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 33,
} TAG_UNNAMED_247, *PTAG_UNNAMED_247;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_248, *PTAG_UNNAMED_248;

typedef enum __MIDL_IBindStatusCallback_0004
{
  URL_ENCODING_NONE = 0,
  URL_ENCODING_ENABLE_UTF8 = 0x10000000,
  URL_ENCODING_DISABLE_UTF8 = 0x20000000,
} _MIDL_IBindStatusCallback_0004, *P_MIDL_IBindStatusCallback_0004;

struct XEBufferHeader
{
  union
  {
    /* 0x0000 */ const unsigned int INVALID_SEQUENCE_NUMBER;
    /* 0x0000 */ unsigned short m_version;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned int m_id;
  /* 0x0008 */ unsigned int m_sequenceNumber;
  /* 0x000c */ unsigned char m_targetPrivateData[64];
}; /* size: 0x004c */

typedef enum
{
  NextPtrOffset = 8,
} TAG_UNNAMED_249, *PTAG_UNNAMED_249;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_250, *PTAG_UNNAMED_250;

typedef struct __vc_attributes::helper_attributes::v1_earlyAttribute
{
} _vc_attributes::helper_attributes::v1_earlyAttribute, *P_vc_attributes::helper_attributes::v1_earlyAttribute; /* size: 0x0001 */

enum STUB_PHASE
{
  STUB_UNMARSHAL = 0,
  STUB_CALL_SERVER = 1,
  STUB_MARSHAL = 2,
  STUB_CALL_SERVER_NO_HRESULT = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_251, *PTAG_UNNAMED_251;

struct TClassName<unsigned short,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

typedef enum
{
  source_database_idIdx = 0,
  object_idIdx = 1,
  line_numberIdx = 2,
  offsetIdx = 3,
  offset_endIdx = 4,
  partial_textIdx = 5,
  LastField = 6,
} TAG_UNNAMED_252, *PTAG_UNNAMED_252;

struct XE_TArray<XEDataAttribute,1>
{
  /* 0x0000 */ struct XEDataAttribute m_array[1];
}; /* size: 0x0028 */

struct XE_TEvent<4,0,1>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,1> m_dynamicAttr;
  /* 0x00d0 */ struct XEEvent m_event;
}; /* size: 0x0118 */

class XeSqlPkg::checkpoint_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_99[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

enum IMPORT_OBJECT_TYPE
{
  IMPORT_OBJECT_CODE = 0,
  IMPORT_OBJECT_DATA = 1,
  IMPORT_OBJECT_CONST = 2,
};

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_descriptorIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_253, *PTAG_UNNAMED_253;

enum XEObjectStorageFlags
{
  XEOSF_EVENT = 0,
  XEOSF_SESSION = 1,
  XEOSF_DEFAULT = 0,
};

typedef struct _TRANSACTION_ENLISTMENT_PAIR
{
  /* 0x0000 */ struct _GUID EnlistmentId;
  /* 0x0010 */ struct _GUID ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR; /* size: 0x0020 */

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
  /* 0x0000 */ struct _TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION; /* size: 0x0020 */

typedef struct _tagCODEBASEHOLD
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_100;
  /* 0x0008 */ wchar_t* szDistUnit;
  /* 0x0010 */ wchar_t* szCodeBase;
  /* 0x0018 */ unsigned long dwVersionMS;
  /* 0x001c */ unsigned long dwVersionLS;
  /* 0x0020 */ unsigned long dwStyle;
  /* 0x0024 */ long __PADDING__[1];
} tagCODEBASEHOLD, *PtagCODEBASEHOLD; /* size: 0x0028 */

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_254, *PTAG_UNNAMED_254;

struct tagRECT
{
  /* 0x0000 */ long left;
  /* 0x0004 */ long top;
  /* 0x0008 */ long right;
  /* 0x000c */ long bottom;
}; /* size: 0x0010 */

struct tagTITLEBARINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcTitleBar;
  /* 0x0014 */ unsigned long rgstate[6];
}; /* size: 0x002c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_255, *PTAG_UNNAMED_255;

struct PROCESSOR_IDLESTATE_INFO
{
  /* 0x0000 */ unsigned long TimeCheck;
  /* 0x0004 */ unsigned char DemotePercent;
  /* 0x0005 */ unsigned char PromotePercent;
  /* 0x0006 */ unsigned char Spare[2];
}; /* size: 0x0008 */

typedef enum
{
  agent_idIdx = 0,
  agent_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_256, *PTAG_UNNAMED_256;

enum tag_WBEM_CHANGE_FLAG_TYPE
{
  WBEM_FLAG_CREATE_OR_UPDATE = 0,
  WBEM_FLAG_UPDATE_ONLY = 1,
  WBEM_FLAG_CREATE_ONLY = 2,
  WBEM_FLAG_UPDATE_COMPATIBLE = 0,
  WBEM_FLAG_UPDATE_SAFE_MODE = 32,
  WBEM_FLAG_UPDATE_FORCE_MODE = 64,
  WBEM_MASK_UPDATE_MODE = 96,
  WBEM_FLAG_ADVISORY = 0x10000,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_257, *PTAG_UNNAMED_257;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 15,
  NVld = 9,
  VldEddOffset = 5,
  BufSize = 110,
} TAG_UNNAMED_258, *PTAG_UNNAMED_258;

enum tag_WBEM_INFORMATION_FLAG_TYPE
{
  WBEM_FLAG_SHORT_NAME = 1,
  WBEM_FLAG_LONG_NAME = 2,
};

enum XeSqlPkg::execution_warning::CustomizableSlots
{
  collect_server_memory_grantsSlot = 0,
};

typedef struct __vc_attributes::v1_enumAttribute
{
} _vc_attributes::v1_enumAttribute, *P_vc_attributes::v1_enumAttribute; /* size: 0x0001 */

typedef enum _TRANSACTION_OUTCOME
{
  TransactionOutcomeUndetermined = 1,
  TransactionOutcomeCommitted = 2,
  TransactionOutcomeAborted = 3,
} TRANSACTION_OUTCOME, *PTRANSACTION_OUTCOME;

enum tagADVF
{
  ADVF_NODATA = 1,
  ADVF_PRIMEFIRST = 2,
  ADVF_ONLYONCE = 4,
  ADVF_DATAONSTOP = 64,
  ADVFCACHE_NOHANDLER = 8,
  ADVFCACHE_FORCEBUILTIN = 16,
  ADVFCACHE_ONSAVE = 32,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_259, *PTAG_UNNAMED_259;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_260, *PTAG_UNNAMED_260;

enum XE_ConfiguredSession::XECreateSessionOptions
{
  XECS_DEFAULT = 0,
  XECS_NO_TARGETS = 1,
  XECS_ENABLE_EVENTS_IN_ALL_PACKAGES = 2,
  XECS_DEFER_EVENT_RESOLUTION = 4,
};

typedef struct _MOF_FIELD
{
  /* 0x0000 */ unsigned __int64 DataPtr;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long DataType;
} MOF_FIELD, *PMOF_FIELD; /* size: 0x0010 */

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_261, *PTAG_UNNAMED_261;

class type_info
{
  /* 0x0000 */ long Padding_101[2];
  /* 0x0008 */ void* _M_data;
  /* 0x0010 */ char _M_d_name[1];
}; /* size: 0x0018 */

struct IPropertyStorage
{
}; /* size: 0x0008 */

struct IXMLDOMText
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_262, *PTAG_UNNAMED_262;

struct RPC_CLIENT_INFORMATION1
{
  /* 0x0000 */ unsigned char* UserName;
  /* 0x0008 */ unsigned char* ComputerName;
  /* 0x0010 */ unsigned short Privilege;
  /* 0x0012 */ char Padding_102[2];
  /* 0x0014 */ unsigned long AuthFlags;
}; /* size: 0x0018 */

enum tagSTGTY
{
  STGTY_STORAGE = 1,
  STGTY_STREAM = 2,
  STGTY_LOCKBYTES = 3,
  STGTY_PROPERTY = 4,
};

enum tagShutdownType
{
  IdleShutdown = 0,
  ForcedShutdown = 1,
};

typedef struct _SYSTEM_CONSOLE_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long DriverLoaded : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long Spare : 31; /* bit position: 1 */
  }; /* bitfield */
} SYSTEM_CONSOLE_INFORMATION, *PSYSTEM_CONSOLE_INFORMATION; /* size: 0x0004 */

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  pathIdx = 7,
  io_dataIdx = 8,
  LastField = 9,
} TAG_UNNAMED_263, *PTAG_UNNAMED_263;

typedef enum __vc_attributes::helper_attributes::usageAttribute::usage_e
{
  eAnyUsage = 0,
  eCoClassUsage = 1,
  eCOMInterfaceUsage = 2,
  eInterfaceUsage = 6,
  eMemberUsage = 8,
  eMethodUsage = 16,
  eInterfaceMethodUsage = 32,
  eInterfaceMemberUsage = 64,
  eCoClassMemberUsage = 128,
  eCoClassMethodUsage = 256,
  eGlobalMethodUsage = 768,
  eGlobalDataUsage = 1024,
  eClassUsage = 2048,
  eInterfaceParameterUsage = 4096,
  eMethodParameterUsage = 12288,
  eIDLModuleUsage = 16384,
  eAnonymousUsage = 0xffff8000,
  eTypedefUsage = 0x10000,
  eUnionUsage = 0x20000,
  eEnumUsage = 0x40000,
  eDefineTagUsage = 0x80000,
  eStructUsage = 0x100000,
  eLocalUsage = 0x200000,
  ePropertyUsage = 0x400000,
  eEventUsage = 0x800000,
  eTemplateUsage = 0x1000000,
  eModuleUsage = 0x1000000,
  eIllegalUsage = 0x2000000,
  eAsynchronousUsage = 0x4000000,
  eAnyIDLUsage = 0x3f7fff,
} _vc_attributes::helper_attributes::usageAttribute::usage_e, *P_vc_attributes::helper_attributes::usageAttribute::usage_e;

enum tagDATADIR
{
  DATADIR_GET = 1,
  DATADIR_SET = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 28,
} TAG_UNNAMED_264, *PTAG_UNNAMED_264;

typedef enum
{
  iterator_typeIdx = 0,
  input_requiredIdx = 1,
  input_additionalIdx = 2,
  output_requiredIdx = 3,
  output_additionalIdx = 4,
  bitmap_preferredIdx = 5,
  LastField = 6,
} TAG_UNNAMED_265, *PTAG_UNNAMED_265;

struct IPersistMoniker
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_266, *PTAG_UNNAMED_266;

typedef enum _APTTYPEQUALIFIER
{
  APTTYPEQUALIFIER_NONE = 0,
  APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
  APTTYPEQUALIFIER_NA_ON_MTA = 2,
  APTTYPEQUALIFIER_NA_ON_STA = 3,
  APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
  APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
  APTTYPEQUALIFIER_APPLICATION_STA = 6,
} APTTYPEQUALIFIER, *PAPTTYPEQUALIFIER;

class AutoSpinlockHolder<93,11,1>;

typedef enum __vc_attributes::threadingAttribute::threading_e
{
  apartment = 1,
  single = 2,
  free = 3,
  neutral = 4,
  both = 5,
} _vc_attributes::threadingAttribute::threading_e, *P_vc_attributes::threadingAttribute::threading_e;

struct tagEMRROUNDRECT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBox;
  /* 0x0018 */ struct tagSIZE szlCorner;
}; /* size: 0x0020 */

class XEPackage0::XE_LiveEncoder
{
  /* 0x0000 */ long Padding_103[2];
  /* 0x0008 */ class XEPackage0::XE_LiveWriter* m_pLiveWriter;
}; /* size: 0x0010 */

class XE_CompressionEncoder<XEPackage0::XE_LiveEncoder>
{
  /* 0x0000 */ class XEPackage0::XE_LiveEncoder m_encoder;
  /* 0x0010 */ class XE_CompressionCache m_compressionCache;
  /* 0x0038 */ class XE_ILogWriteMessageHandler* m_msgHandler;
}; /* size: 0x0040 */

class XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> >
{
  /* 0x0000 */ class XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> m_encoder;
  /* 0x0040 */ class XE_MetadataTracker* m_pMetadataSource;
}; /* size: 0x0048 */

class XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > >
{
  /* 0x0000 */ volatile long m_BufferLoggedCount;
  /* 0x0004 */ volatile long m_BufferDroppedCount;
  /* 0x0008 */ class XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > m_encoder;
  /* 0x0050 */ class XE_ILogWriteMessageHandler* const m_msgHandler;
}; /* size: 0x0058 */

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_267, *PTAG_UNNAMED_267;

typedef enum _PLUGPLAY_EVENT_CATEGORY
{
  HardwareProfileChangeEvent = 0,
  TargetDeviceChangeEvent = 1,
  DeviceClassChangeEvent = 2,
  CustomDeviceEvent = 3,
  DeviceInstallEvent = 4,
  DeviceArrivalEvent = 5,
  VetoEvent = 6,
  BlockedDriverEvent = 7,
  InvalidIDEvent = 8,
  DevicePropertyChangeEvent = 9,
  DeviceInstanceRemovalEvent = 10,
  DeviceInstanceStartedEvent = 11,
  MaxPlugEventCategory = 12,
} PLUGPLAY_EVENT_CATEGORY, *PPLUGPLAY_EVENT_CATEGORY;

typedef enum _PNP_VETO_TYPE
{
  PNP_VetoTypeUnknown = 0,
  PNP_VetoLegacyDevice = 1,
  PNP_VetoPendingClose = 2,
  PNP_VetoWindowsApp = 3,
  PNP_VetoWindowsService = 4,
  PNP_VetoOutstandingOpen = 5,
  PNP_VetoDevice = 6,
  PNP_VetoDriver = 7,
  PNP_VetoIllegalDeviceRequest = 8,
  PNP_VetoInsufficientPower = 9,
  PNP_VetoNonDisableable = 10,
  PNP_VetoLegacyDriver = 11,
  PNP_VetoInsufficientRights = 12,
} PNP_VETO_TYPE, *PPNP_VETO_TYPE;

typedef struct _PLUGPLAY_EVENT_BLOCK
{
  /* 0x0000 */ struct _GUID EventGuid;
  /* 0x0010 */ enum _PLUGPLAY_EVENT_CATEGORY EventCategory;
  /* 0x0014 */ long Padding_104;
  /* 0x0018 */ unsigned long* Result;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long TotalSize;
  /* 0x0028 */ void* DeviceObject;
  union
  {
    union
    {
      struct
      {
        /* 0x0030 */ struct _GUID ClassGuid;
        /* 0x0040 */ wchar_t SymbolicLinkName[1];
        /* 0x0042 */ char __PADDING__[2];
      } /* size: 0x0014 */ DeviceClass;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ TargetDevice;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ InstallDevice;
      struct
      {
        /* 0x0030 */ void* NotificationStructure;
        /* 0x0038 */ wchar_t DeviceId[1];
        /* 0x003a */ char __PADDING__[6];
      } /* size: 0x0010 */ CustomNotification;
      struct
      {
        /* 0x0030 */ void* Notification;
      } /* size: 0x0008 */ ProfileNotification;
      struct
      {
        /* 0x0030 */ unsigned long NotificationCode;
        /* 0x0034 */ unsigned long NotificationData;
      } /* size: 0x0008 */ PowerNotification;
      struct
      {
        /* 0x0030 */ enum _PNP_VETO_TYPE VetoType;
        /* 0x0034 */ wchar_t DeviceIdVetoNameBuffer[1];
        /* 0x0036 */ char __PADDING__[2];
      } /* size: 0x0008 */ VetoNotification;
      struct
      {
        /* 0x0030 */ struct _GUID BlockedDriverGuid;
      } /* size: 0x0010 */ BlockedDriverNotification;
      struct
      {
        /* 0x0030 */ wchar_t ParentId[1];
      } /* size: 0x0002 */ InvalidIDNotification;
      struct
      {
        /* 0x0030 */ struct _GUID PowerSettingGuid;
        /* 0x0040 */ unsigned long Flags;
        /* 0x0044 */ unsigned long SessionId;
        /* 0x0048 */ unsigned long DataLength;
        /* 0x004c */ unsigned char Data[1];
        /* 0x004d */ char __PADDING__[3];
      } /* size: 0x0020 */ PowerSettingNotification;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ PropertyChangeNotification;
      struct
      {
        /* 0x0030 */ wchar_t DeviceId[1];
      } /* size: 0x0002 */ DeviceInstanceNotification;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u;
} PLUGPLAY_EVENT_BLOCK, *PPLUGPLAY_EVENT_BLOCK; /* size: 0x0050 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_268, *PTAG_UNNAMED_268;

typedef enum _FINDEX_INFO_LEVELS
{
  FindExInfoStandard = 0,
  FindExInfoBasic = 1,
  FindExInfoMaxInfoLevel = 2,
} FINDEX_INFO_LEVELS, *PFINDEX_INFO_LEVELS;

struct StaticStorage<8>
{
  /* 0x0000 */ unsigned int m_buf[1];
}; /* size: 0x0004 */

struct XBitmap<StaticStorage<8> >
{
  /* 0x0000 */ struct StaticStorage<8> m_storage;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_269, *PTAG_UNNAMED_269;

typedef struct __vc_attributes::importidlAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::importidlAttribute, *P_vc_attributes::importidlAttribute; /* size: 0x0008 */

typedef enum
{
  source_database_idIdx = 0,
  object_typeIdx = 1,
  object_idIdx = 2,
  nest_levelIdx = 3,
  estimated_rowsIdx = 4,
  estimated_costIdx = 5,
  durationIdx = 6,
  cpu_timeIdx = 7,
  recompile_countIdx = 8,
  begin_offsetIdx = 9,
  end_offsetIdx = 10,
  plan_handleIdx = 11,
  sql_handleIdx = 12,
  object_nameIdx = 13,
  showplan_xmlIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_270, *PTAG_UNNAMED_270;

struct XETicksConfig
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ unsigned short m_padding;
  /* 0x0004 */ unsigned int m_padding2;
  /* 0x0008 */ unsigned __int64 m_startTimeUtc;
  /* 0x0010 */ unsigned __int64 m_frequency;
}; /* size: 0x0018 */

class XE_TicksUtil
{
  /* 0x0000 */ struct XETicksConfig m_config;
}; /* size: 0x0018 */

class AutoSpinlockHolder<170,3,1>;

enum tagTYMED
{
  TYMED_HGLOBAL = 1,
  TYMED_FILE = 2,
  TYMED_ISTREAM = 4,
  TYMED_ISTORAGE = 8,
  TYMED_GDI = 16,
  TYMED_MFPICT = 32,
  TYMED_ENHMF = 64,
  TYMED_NULL = 0,
};

enum XE_PublishedDescriptor::Flavor
{
  EMBEDDED = 0,
  VLD = 1,
  ACTION = 2,
};

class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 7,
  VldEddOffset = 3,
  BufSize = 75,
} TAG_UNNAMED_271, *PTAG_UNNAMED_271;

typedef enum _SECURITY_IMPERSONATION_LEVEL
{
  SecurityAnonymous = 0,
  SecurityIdentification = 1,
  SecurityImpersonation = 2,
  SecurityDelegation = 3,
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_272, *PTAG_UNNAMED_272;

typedef enum
{
  database_idIdx = 0,
  filegroup_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_273, *PTAG_UNNAMED_273;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_274, *PTAG_UNNAMED_274;

typedef struct _WNODE_HEADER
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ unsigned long ProviderId;
  union
  {
    /* 0x0008 */ unsigned __int64 HistoricalContext;
    struct
    {
      /* 0x0008 */ unsigned long Version;
      /* 0x000c */ unsigned long Linkage;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0010 */ unsigned long CountLost;
    /* 0x0010 */ void* KernelHandle;
    /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  }; /* size: 0x0008 */
  /* 0x0018 */ struct _GUID Guid;
  /* 0x0028 */ unsigned long ClientContext;
  /* 0x002c */ unsigned long Flags;
} WNODE_HEADER, *PWNODE_HEADER; /* size: 0x0030 */

struct OFFSETINSTANCEDATAANDLENGTH
{
  /* 0x0000 */ unsigned long OffsetInstanceData;
  /* 0x0004 */ unsigned long LengthInstanceData;
}; /* size: 0x0008 */

struct tagWNODE_ALL_DATA
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
  /* 0x0030 */ unsigned long DataBlockOffset;
  /* 0x0034 */ unsigned long InstanceCount;
  /* 0x0038 */ unsigned long OffsetInstanceNameOffsets;
  union
  {
    /* 0x003c */ unsigned long FixedInstanceSize;
    /* 0x003c */ struct OFFSETINSTANCEDATAANDLENGTH* OffsetInstanceDataAndLength /* zero-length array */;
    /* 0x003c */ long __PADDING__[3];
  }; /* size: 0x000c */
}; /* size: 0x0048 */

class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,2>,1>
{
  /* 0x0000 */ wchar_t m_buffer[1024];
  /* 0x0800 */ const wchar_t* m_comperand;
  /* 0x0808 */ unsigned int m_cbCompRemaining;
  /* 0x080c */ int m_result;
}; /* size: 0x0810 */

enum tag_WBEM_EXTRA_RETURN_CODES
{
  WBEM_S_INITIALIZED = 0,
  WBEM_S_LIMITED_SERVICE = 0x43001,
  WBEM_S_INDIRECTLY_UPDATED = 0x43002,
  WBEM_S_SUBJECT_TO_SDS = 0x43003,
  WBEM_E_RETRY_LATER = -2147209215,
  WBEM_E_RESOURCE_CONTENTION = -2147209214,
};

typedef struct _s__RTTIClassHierarchyDescriptor
{
  /* 0x0000 */ unsigned long signature;
  /* 0x0004 */ unsigned long attributes;
  /* 0x0008 */ unsigned long numBaseClasses;
  /* 0x000c */ const struct _s__RTTIBaseClassArray* pBaseClassArray;
} s__RTTIClassHierarchyDescriptor, *Ps__RTTIClassHierarchyDescriptor; /* size: 0x0014 */

typedef enum __vc_attributes::event_sourceAttribute::optimize_e
{
  speed = 0,
  size = 1,
} _vc_attributes::event_sourceAttribute::optimize_e, *P_vc_attributes::event_sourceAttribute::optimize_e;

typedef struct _IMAGE_FILE_HEADER
{
  /* 0x0000 */ unsigned short Machine;
  /* 0x0002 */ unsigned short NumberOfSections;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long PointerToSymbolTable;
  /* 0x000c */ unsigned long NumberOfSymbols;
  /* 0x0010 */ unsigned short SizeOfOptionalHeader;
  /* 0x0012 */ unsigned short Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER; /* size: 0x0014 */

typedef enum
{
  schema_mgr_database_idIdx = 0,
  versionIdx = 1,
  operationIdx = 2,
  hobt_idIdx = 3,
  row_countIdx = 4,
  file_stream_file_group_idIdx = 5,
  compress_levelIdx = 6,
  lob_statusIdx = 7,
  uniqueIdx = 8,
  replicatedIdx = 9,
  log_off_rows_for_replicationIdx = 10,
  column_storeIdx = 11,
  se_replicatedIdx = 12,
  LastField = 13,
} TAG_UNNAMED_275, *PTAG_UNNAMED_275;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_276, *PTAG_UNNAMED_276;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_277, *PTAG_UNNAMED_277;

typedef enum
{
  key_accessorIdx = 0,
  key_accessor_bindingsIdx = 1,
  key_accessor_buffer_sizeIdx = 2,
  data_accessorIdx = 3,
  data_accessor_bindingsIdx = 4,
  data_accessor_buffer_sizeIdx = 5,
  use_local_rowsetIdx = 6,
  LastField = 7,
} TAG_UNNAMED_278, *PTAG_UNNAMED_278;

typedef struct __vc_attributes::licensedAttribute
{
} _vc_attributes::licensedAttribute, *P_vc_attributes::licensedAttribute; /* size: 0x0001 */

typedef enum _CM_ERROR_CONTROL_TYPE
{
  IgnoreError = 0,
  NormalError = 1,
  SevereError = 2,
  CriticalError = 3,
} CM_ERROR_CONTROL_TYPE, *PCM_ERROR_CONTROL_TYPE;

typedef struct _IMAGE_THUNK_DATA64
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned __int64 ForwarderString;
      /* 0x0000 */ unsigned __int64 Function;
      /* 0x0000 */ unsigned __int64 Ordinal;
      /* 0x0000 */ unsigned __int64 AddressOfData;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} IMAGE_THUNK_DATA64, *PIMAGE_THUNK_DATA64; /* size: 0x0008 */

typedef enum _TOKEN_ELEVATION_TYPE
{
  TokenElevationTypeDefault = 1,
  TokenElevationTypeFull = 2,
  TokenElevationTypeLimited = 3,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_279, *PTAG_UNNAMED_279;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_280, *PTAG_UNNAMED_280;

typedef struct _IMAGE_IMPORT_DESCRIPTOR
{
  union
  {
    /* 0x0000 */ unsigned long Characteristics;
    /* 0x0000 */ unsigned long OriginalFirstThunk;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned long ForwarderChain;
  /* 0x000c */ unsigned long Name;
  /* 0x0010 */ unsigned long FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR; /* size: 0x0014 */

enum XE_FileProcessor::State
{
  XEFP_NEXTEVENT = 0,
  XEFP_NEXTBUFFER = 1,
  XEFP_GOTEVENT = 2,
  XEFP_DONE = 3,
  XEFP_ERROR = 4,
};

class TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>
{
}; /* size: 0x0038 */

class Spinlock<207,3,1>
{
}; /* size: 0x0004 */

enum tagUSERCLASSTYPE
{
  USERCLASSTYPE_FULL = 1,
  USERCLASSTYPE_SHORT = 2,
  USERCLASSTYPE_APPNAME = 3,
};

enum tagSF_TYPE
{
  SF_ERROR = 10,
  SF_I1 = 16,
  SF_I2 = 2,
  SF_I4 = 3,
  SF_I8 = 20,
  SF_BSTR = 8,
  SF_UNKNOWN = 13,
  SF_DISPATCH = 9,
  SF_VARIANT = 12,
  SF_RECORD = 36,
  SF_HAVEIID = 0xffff800d,
};

class XE_AutoP<XE_DeserializedMetadata>
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  recovery_unit_idIdx = 1,
  old_database_segment_idIdx = 2,
  new_database_segment_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_281, *PTAG_UNNAMED_281;

typedef enum
{
  database_idIdx = 0,
  reasonIdx = 1,
  waitersIdx = 2,
  log_block_idIdx = 3,
  is_delayed_durableIdx = 4,
  only_signalIdx = 5,
  LastField = 6,
} TAG_UNNAMED_282, *PTAG_UNNAMED_282;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_283, *PTAG_UNNAMED_283;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  filegroup_idIdx = 2,
  new_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_284, *PTAG_UNNAMED_284;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_285, *PTAG_UNNAMED_285;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_286, *PTAG_UNNAMED_286;

enum ASSOCKEY
{
  ASSOCKEY_SHELLEXECCLASS = 1,
  ASSOCKEY_APP = 2,
  ASSOCKEY_CLASS = 3,
  ASSOCKEY_BASECLASS = 4,
  ASSOCKEY_MAX = 5,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_287, *PTAG_UNNAMED_287;

enum XeSqlPkg::filestream_file_io_response::CustomizableSlots
{
  collect_workitem_descriptionSlot = 0,
  collect_transaction_idSlot = 1,
  collect_correlation_idsSlot = 2,
  collect_logical_pathSlot = 3,
  collect_physical_pathSlot = 4,
  collect_original_pathSlot = 5,
};

class BitEnum<unsigned int>
{
  /* 0x0000 */ unsigned int m_source;
  /* 0x0004 */ unsigned int m_mask;
}; /* size: 0x0008 */

typedef enum _RESOURCEMANAGER_INFORMATION_CLASS
{
  ResourceManagerBasicInformation = 0,
  ResourceManagerCompletionInformation = 1,
} RESOURCEMANAGER_INFORMATION_CLASS, *PRESOURCEMANAGER_INFORMATION_CLASS;

class DmpPointer<SOS_WaitInfo>
{
  /* 0x0000 */ class SOS_WaitInfo* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 19,
  NVld = 7,
  VldEddOffset = 11,
  BufSize = 125,
} TAG_UNNAMED_288, *PTAG_UNNAMED_288;

typedef enum __vc_attributes::aggregatableAttribute::type_e
{
  never = 0,
  allowed = 1,
  always = 2,
} _vc_attributes::aggregatableAttribute::type_e, *P_vc_attributes::aggregatableAttribute::type_e;

class XeSqlPkg::hadr_db_manager_test_point
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_105[143];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int test_pointOffset;
    /* 0x0000 */ const int test_value1Offset;
    /* 0x0000 */ const int test_value2Offset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0030 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 28,
} TAG_UNNAMED_289, *PTAG_UNNAMED_289;

enum tagSTGMOVE
{
  STGMOVE_MOVE = 0,
  STGMOVE_COPY = 1,
  STGMOVE_SHALLOWCOPY = 2,
};

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_290, *PTAG_UNNAMED_290;

class CAutoP<XEAction>
{
}; /* size: 0x0008 */

enum WbemFlagEnum
{
  wbemFlagReturnImmediately = 16,
  wbemFlagReturnWhenComplete = 0,
  wbemFlagBidirectional = 0,
  wbemFlagForwardOnly = 32,
  wbemFlagNoErrorObject = 64,
  wbemFlagReturnErrorObject = 0,
  wbemFlagSendStatus = 128,
  wbemFlagDontSendStatus = 0,
  wbemFlagEnsureLocatable = 256,
  wbemFlagDirectRead = 512,
  wbemFlagSendOnlySelected = 0,
  wbemFlagUseAmendedQualifiers = 0x20000,
  wbemFlagGetDefault = 0,
  wbemFlagSpawnInstance = 1,
  wbemFlagUseCurrentTime = 1,
};

typedef struct _SE_SECURITY_DESCRIPTOR
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ void* SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR; /* size: 0x0010 */

enum XE_LogBufferType
{
  LBHT_EVENT = 0,
  LBHT_METADATA = 1,
  LBHT_HEADER = 2,
};

class XeSqlPkg::data_initialize_lock_request
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class MemObjCache<CMemDbg<CMemProc> >
{
  /* 0x0000 */ long Padding_106[278];
  /* 0x0458 */ void* m_cacheEntryDescriptor;
  /* 0x0460 */ class CostInfo m_costInfo;
}; /* size: 0x04a8 */

class DmpPointer<SEList<CFixedInfo,16> >
{
  /* 0x0000 */ class SEList<CFixedInfo,16>* m_pRaw;
}; /* size: 0x0008 */

enum XeSqlPkg::sql_batch_completed::CustomizableSlots
{
  collect_batch_textSlot = 0,
};

typedef enum _GET_FILEEX_INFO_LEVELS
{
  GetFileExInfoStandard = 0,
  GetFileExMaxInfoLevel = 1,
} GET_FILEEX_INFO_LEVELS, *PGET_FILEEX_INFO_LEVELS;

struct HRAWINPUT__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct XE_TArray<XEDataAttribute,6>
{
  /* 0x0000 */ struct XEDataAttribute m_array[6];
}; /* size: 0x00f0 */

struct XE_TEvent<3,0,6>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,6> m_dynamicAttr;
  /* 0x0170 */ struct XEEvent m_event;
}; /* size: 0x01b8 */

class XeCloudMinPkg::perfobject_resource_pools
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_107[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int pool_idOffset;
    /* 0x0000 */ const int databasepages_memoryOffset;
    /* 0x0000 */ const int cache_memoryOffset;
    /* 0x0000 */ const int compile_memoryOffset;
    /* 0x0000 */ const int used_memoryOffset;
    /* 0x0000 */ const int target_memoryOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 32,
} TAG_UNNAMED_291, *PTAG_UNNAMED_291;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 18,
} TAG_UNNAMED_292, *PTAG_UNNAMED_292;

class AutoSpinlockHolder<107,9,1>;

enum tagACTIVATEFLAGS
{
  ACTIVATE_WINDOWLESS = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_293, *PTAG_UNNAMED_293;

class Spinlock<222,2,1>
{
}; /* size: 0x0004 */

enum XEObjectType
{
  XEO_EVENT = 0,
  XEO_ACTION = 1,
  XEO_TARGET = 2,
  XEO_MAP = 3,
  XEO_PREDICATE_SOURCE = 4,
  XEO_PREDICATE_COMPARE = 5,
  XEO_TYPE = 6,
  XEO_MESSAGE = 7,
  XEO_PACKAGE = 8,
  XEO_LAST = 9,
  XEO_LAST_COLLECTION = 8,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_294, *PTAG_UNNAMED_294;

typedef enum
{
  manager_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_295, *PTAG_UNNAMED_295;

typedef enum _tagOIBDG_FLAGS
{
  OIBDG_APARTMENTTHREADED = 256,
  OIBDG_DATAONLY = 4096,
} tagOIBDG_FLAGS, *PtagOIBDG_FLAGS;

typedef enum
{
  brick_idIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_296, *PTAG_UNNAMED_296;

struct ANON_OBJECT_HEADER_BIGOBJ
{
  /* 0x0000 */ unsigned short Sig1;
  /* 0x0002 */ unsigned short Sig2;
  /* 0x0004 */ unsigned short Version;
  /* 0x0006 */ unsigned short Machine;
  /* 0x0008 */ unsigned long TimeDateStamp;
  /* 0x000c */ struct _GUID ClassID;
  /* 0x001c */ unsigned long SizeOfData;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long MetaDataSize;
  /* 0x0028 */ unsigned long MetaDataOffset;
  /* 0x002c */ unsigned long NumberOfSections;
  /* 0x0030 */ unsigned long PointerToSymbolTable;
  /* 0x0034 */ unsigned long NumberOfSymbols;
}; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_297, *PTAG_UNNAMED_297;

struct tagPOINT
{
  /* 0x0000 */ long x;
  /* 0x0004 */ long y;
}; /* size: 0x0008 */

struct tagDROPSTRUCT
{
  /* 0x0000 */ struct HWND__* hwndSource;
  /* 0x0008 */ struct HWND__* hwndSink;
  /* 0x0010 */ unsigned long wFmt;
  /* 0x0014 */ long Padding_108;
  /* 0x0018 */ unsigned __int64 dwData;
  /* 0x0020 */ struct tagPOINT ptDrop;
  /* 0x0028 */ unsigned long dwControlData;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

enum AllocatorType
{
  ALLOCATIONTYPE_NONE = 0,
  ALLOCATIONTYPE_SINGLE = 1,
  ALLOCATIONTYPE_EMERGENCY = 2,
  ALLOCATIONTYPE_LARGEPAGE = 3,
  ALLOCATIONTYPE_RESERVATION = 4,
  ALLOCATIONTYPE_LAST = 5,
};

class CMemPartitioned<CMemThread<CMemDbg<CMemProc> > >
{
  /* 0x0000 */ long Padding_109[318];
  /* 0x04f8 */ class IMemObj** m_partitionMemObj;
  /* 0x0500 */ int m_numberOfPartitions;
  /* 0x0504 */ enum PartitioningType m_partType;
  /* 0x0508 */ enum AllocatorType m_allocatorType;
  /* 0x050c */ long Padding_110;
  /* 0x0510 */ __int64 m_cPages;
}; /* size: 0x0518 */

enum XE_DecoderType
{
  XEDT_METADATA = 0,
  XEDT_LIVE_METADATA = 1,
  XEDT_FILE_READER = 2,
};

class Spinlock<252,1,1>
{
}; /* size: 0x0004 */

class DumpSEListIterator<SEList<SOS_RingBuffer,0>,512>
{
}; /* size: 0x0020 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  epochIdx = 2,
  csnIdx = 3,
  create_utcIdx = 4,
  catchup_return_codeIdx = 5,
  remote_versionIdx = 6,
  remote_portIdx = 7,
  remote_clusterIdx = 8,
  remote_serverIdx = 9,
  remote_databaseIdx = 10,
  remote_app_nameIdx = 11,
  remote_table_groupIdx = 12,
  remote_low_keyIdx = 13,
  remote_high_keyIdx = 14,
  LastField = 15,
} TAG_UNNAMED_298, *PTAG_UNNAMED_298;

class SOS_CacheStoreBase::Statistic
{
  /* 0x0000 */ volatile __int64 m_NumberOfEntries;
  /* 0x0008 */ volatile __int64 m_NumberOfMisses;
  /* 0x0010 */ volatile __int64 m_NumberOfHits;
}; /* size: 0x0018 */

typedef enum
{
  message_sequence_numberIdx = 0,
  is_initiatorIdx = 1,
  message_sizeIdx = 2,
  message_referenceIdx = 3,
  from_service_nameIdx = 4,
  to_service_nameIdx = 5,
  from_broker_instanceIdx = 6,
  to_broker_instanceIdx = 7,
  message_typeIdx = 8,
  dialog_idIdx = 9,
  LastField = 10,
} TAG_UNNAMED_299, *PTAG_UNNAMED_299;

struct IInternalUnknown
{
}; /* size: 0x0008 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_300, *PTAG_UNNAMED_300;

struct HDC__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct XE_TArray<XEDataAttribute,8>
{
  /* 0x0000 */ struct XEDataAttribute m_array[8];
}; /* size: 0x0140 */

struct XE_TEvent<4,0,8>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,8> m_dynamicAttr;
  /* 0x01e8 */ struct XEEvent m_event;
}; /* size: 0x0230 */

class XeSqlPkg::hadr_dump_vlf_header
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_111[140];
      /* 0x0240 */ unsigned char m_buf[54];
    }; /* size: 0x0046 */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int vlf_statusOffset;
    /* 0x0000 */ const int vlf_fileidOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int vlf_physical_filenameOffset;
    /* 0x0000 */ const int vlf_logical_filenameOffset;
    /* 0x0000 */ const int message_log_idOffset;
    /* 0x0000 */ const int log_bufferOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0278 */

typedef enum _TP_CALLBACK_PRIORITY
{
  TP_CALLBACK_PRIORITY_HIGH = 0,
  TP_CALLBACK_PRIORITY_NORMAL = 1,
  TP_CALLBACK_PRIORITY_LOW = 2,
  TP_CALLBACK_PRIORITY_INVALID = 3,
  TP_CALLBACK_PRIORITY_COUNT = 3,
} TP_CALLBACK_PRIORITY, *PTP_CALLBACK_PRIORITY;

typedef struct _FILE_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0010 */ union _LARGE_INTEGER QuotaUsed;
  /* 0x0018 */ union _LARGE_INTEGER QuotaThreshold;
  /* 0x0020 */ union _LARGE_INTEGER QuotaLimit;
  /* 0x0028 */ struct _SID Sid;
  /* 0x0034 */ long __PADDING__[1];
} FILE_QUOTA_INFORMATION, *PFILE_QUOTA_INFORMATION; /* size: 0x0038 */

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_301, *PTAG_UNNAMED_301;

enum WbemConnectOptionsEnum
{
  wbemConnectFlagUseMaxWait = 128,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_302, *PTAG_UNNAMED_302;

typedef enum _ALPC_MESSAGE_INFORMATION_CLASS
{
  AlpcMessageSidInformation = 0,
  AlpcMessageTokenModifiedIdInformation = 1,
} ALPC_MESSAGE_INFORMATION_CLASS, *PALPC_MESSAGE_INFORMATION_CLASS;

typedef enum
{
  Mask = -1,
} TAG_UNNAMED_303, *PTAG_UNNAMED_303;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_304, *PTAG_UNNAMED_304;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 32,
} TAG_UNNAMED_305, *PTAG_UNNAMED_305;

class Spinlock<23,19,1>
{
}; /* size: 0x0004 */

enum tagURLZONE
{
  URLZONE_INVALID = -1,
  URLZONE_PREDEFINED_MIN = 0,
  URLZONE_LOCAL_MACHINE = 0,
  URLZONE_INTRANET = 1,
  URLZONE_TRUSTED = 2,
  URLZONE_INTERNET = 3,
  URLZONE_UNTRUSTED = 4,
  URLZONE_PREDEFINED_MAX = 999,
  URLZONE_USER_MIN = 1000,
  URLZONE_USER_MAX = 10000,
};

enum XESessionLocality
{
  XESL_GLOBAL = 0,
  XESL_NODE = 1,
  XESL_CPU = 2,
};

struct tagHIGHCONTRASTW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ wchar_t* lpszDefaultScheme;
}; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_306, *PTAG_UNNAMED_306;

typedef enum
{
  CTF_INSIST = 1,
  CTF_THREAD_REF = 2,
  CTF_PROCESS_REF = 4,
  CTF_COINIT_STA = 8,
  CTF_COINIT = 8,
  CTF_FREELIBANDEXIT = 16,
  CTF_REF_COUNTED = 32,
  CTF_WAIT_ALLOWCOM = 64,
} TAG_UNNAMED_307, *PTAG_UNNAMED_307;

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_unique_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_308, *PTAG_UNNAMED_308;

enum XeSqlPkg::preconnect_completed::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

struct IWinInetHttpTimeouts
{
}; /* size: 0x0008 */

enum tagDVASPECT
{
  DVASPECT_CONTENT = 1,
  DVASPECT_THUMBNAIL = 2,
  DVASPECT_ICON = 4,
  DVASPECT_DOCPRINT = 8,
};

typedef struct __vc_attributes::switch_isAttribute
{
  /* 0x0000 */ const char* limited_expression;
} _vc_attributes::switch_isAttribute, *P_vc_attributes::switch_isAttribute; /* size: 0x0008 */

enum POWER_USER_PRESENCE_TYPE
{
  UserNotPresent = 0,
  UserPresent = 1,
  UserUnknown = 255,
};

typedef enum
{
  feature_idIdx = 0,
  featureIdx = 1,
  messageIdx = 2,
  LastField = 3,
} TAG_UNNAMED_309, *PTAG_UNNAMED_309;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_310, *PTAG_UNNAMED_310;

typedef enum _RPC_ASYNC_EVENT
{
  RpcCallComplete = 0,
  RpcSendComplete = 1,
  RpcReceiveComplete = 2,
  RpcClientDisconnect = 3,
} RPC_ASYNC_EVENT, *PRPC_ASYNC_EVENT;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_311, *PTAG_UNNAMED_311;

typedef struct __m256d
{
  /* 0x0000 */ double m256d_f64[4];
} _m256d, *P_m256d; /* size: 0x0020 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_312, *PTAG_UNNAMED_312;

enum tagTYSPEC
{
  TYSPEC_CLSID = 0,
  TYSPEC_FILEEXT = 1,
  TYSPEC_MIMETYPE = 2,
  TYSPEC_FILENAME = 3,
  TYSPEC_PROGID = 4,
  TYSPEC_PACKAGENAME = 5,
  TYSPEC_OBJECTID = 6,
};

class AutoSpinlockHolder<19,19,1>;

enum tagREADYSTATE
{
  READYSTATE_UNINITIALIZED = 0,
  READYSTATE_LOADING = 1,
  READYSTATE_LOADED = 2,
  READYSTATE_INTERACTIVE = 3,
  READYSTATE_COMPLETE = 4,
};

typedef enum
{
  database_nameIdx = 0,
  LastField = 1,
} TAG_UNNAMED_313, *PTAG_UNNAMED_313;

typedef enum
{
  use_local_rowsetIdx = 0,
  LastField = 1,
} TAG_UNNAMED_314, *PTAG_UNNAMED_314;

enum tag_WBEM_LIMITS
{
  WBEM_MAX_IDENTIFIER = 4096,
  WBEM_MAX_QUERY = 16384,
  WBEM_MAX_PATH = 8192,
  WBEM_MAX_OBJECT_NESTING = 64,
  WBEM_MAX_USER_PROPERTIES = 1024,
};

class XE_AutoRg<XEPackage0::OrphanEntry>
{
}; /* size: 0x0008 */

class XEPackage0::OrphanTempStorage
{
  union
  {
    /* 0x0000 */ const unsigned int ORPHANS_TEMP_SIZE;
    /* 0x0000 */ class XE_AutoRg<XEPackage0::OrphanEntry> m_entries;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned int m_nEntries;
  /* 0x000c */ unsigned int m_nFreeEntries;
}; /* size: 0x0010 */

typedef enum _RTL_UMS_THREAD_INFO_CLASS
{
  UmsThreadInvalidInfoClass = 0,
  UmsThreadUserContext = 1,
  UmsThreadPriority = 2,
  UmsThreadAffinity = 3,
  UmsThreadTeb = 4,
  UmsThreadIsSuspended = 5,
  UmsThreadIsTerminated = 6,
  UmsThreadMaxInfoClass = 7,
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

struct XE_TArray<XEDataAttribute,18>
{
  /* 0x0000 */ struct XEDataAttribute m_array[18];
}; /* size: 0x02d0 */

struct XE_TEvent<4,2,18>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,18> m_dynamicAttr;
  /* 0x03e0 */ struct XEEvent m_event;
}; /* size: 0x0428 */

class XeSqlPkg::lock_escalation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,18> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_112[140];
      /* 0x0240 */ unsigned char m_buf[89];
    }; /* size: 0x0069 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int escalation_causeOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int escalated_lock_countOffset;
    /* 0x0000 */ const int hobt_lock_countOffset;
    /* 0x0000 */ const int statementOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0428 */
}; /* size: 0x02a0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 14,
} TAG_UNNAMED_315, *PTAG_UNNAMED_315;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 32,
} TAG_UNNAMED_316, *PTAG_UNNAMED_316;

struct HCOLORSPACE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct StaticStorage<16>
{
  /* 0x0000 */ unsigned int m_buf[1];
}; /* size: 0x0004 */

struct XBitmap<StaticStorage<16> >
{
  /* 0x0000 */ struct StaticStorage<16> m_storage;
}; /* size: 0x0004 */

class XEPackage0::XE_ETWBufferDispenser
{
  union
  {
    /* 0x0000 */ const unsigned int BUFFER_COUNT;
    /* 0x0000 */ unsigned char m_buffers[65343][16];
  }; /* size: 0xff3f0 */
  /* 0xff3f0 */ struct XBitmap<StaticStorage<16> > m_allocationMap;
}; /* size: 0xff3f4 */

typedef enum _POWER_PLATFORM_ROLE
{
  PlatformRoleUnspecified = 0,
  PlatformRoleDesktop = 1,
  PlatformRoleMobile = 2,
  PlatformRoleWorkstation = 3,
  PlatformRoleEnterpriseServer = 4,
  PlatformRoleSOHOServer = 5,
  PlatformRoleAppliancePC = 6,
  PlatformRolePerformanceServer = 7,
  PlatformRoleSlate = 8,
  PlatformRoleMaximum = 9,
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;

typedef enum _ACCESS_REASON_TYPE
{
  AccessReasonNone = 0,
  AccessReasonAllowedAce = 0x10000,
  AccessReasonDeniedAce = 0x20000,
  AccessReasonAllowedParentAce = 0x30000,
  AccessReasonDeniedParentAce = 0x40000,
  AccessReasonNotGrantedByCape = 0x50000,
  AccessReasonNotGrantedByParentCape = 0x60000,
  AccessReasonNotGrantedToAppContainer = 0x70000,
  AccessReasonMissingPrivilege = 0x100000,
  AccessReasonFromPrivilege = 0x200000,
  AccessReasonIntegrityLevel = 0x300000,
  AccessReasonOwnership = 0x400000,
  AccessReasonNullDacl = 0x500000,
  AccessReasonEmptyDacl = 0x600000,
  AccessReasonNoSD = 0x700000,
  AccessReasonNoGrant = 0x800000,
} ACCESS_REASON_TYPE, *PACCESS_REASON_TYPE;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  ghost_typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_317, *PTAG_UNNAMED_317;

enum tagLOCKTYPE
{
  LOCK_WRITE = 1,
  LOCK_EXCLUSIVE = 2,
  LOCK_ONLYONCE = 4,
};

struct XE_TEvent<4,0,4>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,4> m_dynamicAttr;
  /* 0x0148 */ struct XEEvent m_event;
}; /* size: 0x0190 */

class XeSqlPkg::db_lock_released_from_cache
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_113[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int ref_count_totalOffset;
    /* 0x0000 */ const int ref_typeOffset;
    /* 0x0000 */ const int ref_type_countOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_318, *PTAG_UNNAMED_318;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 5,
} TAG_UNNAMED_319, *PTAG_UNNAMED_319;

struct IWbemConfigureRefresher
{
}; /* size: 0x0008 */

typedef enum
{
  manager_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_320, *PTAG_UNNAMED_320;

enum PIDMSI_STATUS_VALUE
{
  PIDMSI_STATUS_NORMAL = 0,
  PIDMSI_STATUS_NEW = 1,
  PIDMSI_STATUS_PRELIM = 2,
  PIDMSI_STATUS_DRAFT = 3,
  PIDMSI_STATUS_INPROGRESS = 4,
  PIDMSI_STATUS_EDIT = 5,
  PIDMSI_STATUS_REVIEW = 6,
  PIDMSI_STATUS_PROOF = 7,
  PIDMSI_STATUS_FINAL = 8,
  PIDMSI_STATUS_OTHER = 32767,
};

typedef enum __MIDL_IMonikerProp_0001
{
  MIMETYPEPROP = 0,
  USE_SRC_URL = 1,
  CLASSIDPROP = 2,
  TRUSTEDDOWNLOADPROP = 3,
  POPUPLEVELPROP = 4,
} _MIDL_IMonikerProp_0001, *P_MIDL_IMonikerProp_0001;

class XE_AutoP<XE_PackageFilter>
{
}; /* size: 0x0008 */

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  modeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_321, *PTAG_UNNAMED_321;

struct tagALTTABINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ int cItems;
  /* 0x0008 */ int cColumns;
  /* 0x000c */ int cRows;
  /* 0x0010 */ int iColFocus;
  /* 0x0014 */ int iRowFocus;
  /* 0x0018 */ int cxItem;
  /* 0x001c */ int cyItem;
  /* 0x0020 */ struct tagPOINT ptStart;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_322, *PTAG_UNNAMED_322;

struct AsyncIAdviseSink2
{
}; /* size: 0x0008 */

typedef enum _USER_MARSHAL_CB_TYPE
{
  USER_MARSHAL_CB_BUFFER_SIZE = 0,
  USER_MARSHAL_CB_MARSHALL = 1,
  USER_MARSHAL_CB_UNMARSHALL = 2,
  USER_MARSHAL_CB_FREE = 3,
} USER_MARSHAL_CB_TYPE, *PUSER_MARSHAL_CB_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 19,
} TAG_UNNAMED_323, *PTAG_UNNAMED_323;

typedef enum
{
  availability_group_idIdx = 0,
  listener_idIdx = 1,
  dns_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_324, *PTAG_UNNAMED_324;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_325, *PTAG_UNNAMED_325;

enum tag_WBEM_PROVIDER_REQUIREMENTS_TYPE
{
  WBEM_REQUIREMENTS_START_POSTFILTER = 0,
  WBEM_REQUIREMENTS_STOP_POSTFILTER = 1,
  WBEM_REQUIREMENTS_RECHECK_SUBSCRIPTIONS = 2,
};

typedef struct _TypeDescriptor
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char* name /* zero-length array */;
} TypeDescriptor, *PTypeDescriptor; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_326, *PTAG_UNNAMED_326;

struct XMLDOMDocumentEvents
{
}; /* size: 0x0008 */

class TMemoryWorkSpace<0,8>
{
  /* 0x0000 */ class TMemoryWorkSpace<0,8> sm_MemoryWorkSpace;
  /* 0x0010 */ class SOS_MemoryBlockAllocator* m_allocators[8];
  /* 0x0050 */ unsigned int m_nextIndex;
}; /* size: 0x0058 */

enum XEObjectCapabilities
{
  XEOC_HIDDEN = 1,
  XEOC_DEFAULT = 0,
};

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
  /* 0x0000 */ unsigned long PropagationCookie;
  /* 0x0004 */ struct _GUID UOW;
  /* 0x0014 */ struct _GUID TmIdentity;
  /* 0x0024 */ unsigned long BufferLength;
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT; /* size: 0x0028 */

class SpinlockHolder<5,19,1>;

enum SYSGEOCLASS
{
  GEOCLASS_NATION = 16,
  GEOCLASS_REGION = 14,
  GEOCLASS_ALL = 0,
};

typedef struct _WKSTA_INFO_1044
{
  /* 0x0000 */ unsigned long wki1044_pipe_increment;
} WKSTA_INFO_1044, *PWKSTA_INFO_1044; /* size: 0x0004 */

typedef enum
{
  database_idIdx = 0,
  filter_proc_idIdx = 1,
  use_rowIdx = 2,
  current_lsnIdx = 3,
  LastField = 4,
} TAG_UNNAMED_327, *PTAG_UNNAMED_327;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
{
  ToleranceIntervalShort = 1,
  ToleranceIntervalMedium = 2,
  ToleranceIntervalLong = 3,
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL, *PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

enum tagCOMSD
{
  SD_LAUNCHPERMISSIONS = 0,
  SD_ACCESSPERMISSIONS = 1,
  SD_LAUNCHRESTRICTIONS = 2,
  SD_ACCESSRESTRICTIONS = 3,
};

class CAutoBase<XE_FileReaderDefaultPolicy>
{
  /* 0x0000 */ class XE_FileReaderDefaultPolicy* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  database_idIdx = 2,
  rowset_idIdx = 3,
  splitOperationIdx = 4,
  new_page_file_idIdx = 5,
  new_page_page_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_328, *PTAG_UNNAMED_328;

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  index_idIdx = 2,
  method_nameIdx = 3,
  xml_pathIdx = 4,
  LastField = 5,
} TAG_UNNAMED_329, *PTAG_UNNAMED_329;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_330, *PTAG_UNNAMED_330;

class TMemoryBlockAllocatorFinalizer<0>::AllocatorHierarchy
{
  /* 0x0000 */ unsigned __int64 m_blockSize;
  /* 0x0008 */ unsigned __int64 m_parentBlockSize;
}; /* size: 0x0010 */

class TMemoryBlockAllocatorFinalizer<0>
{
  /* 0x0000 */ class TMemoryBlockAllocatorFinalizer<0> sm_finalizer;
  /* 0x0008 */ class TMemoryBlockAllocatorFinalizer<0>::AllocatorHierarchy m_pendingRelation[8];
  /* 0x0088 */ unsigned int m_nextIndex;
}; /* size: 0x0090 */

enum tagGLOBALOPT_RPCTP_VALUES
{
  COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
  COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1,
};

struct XE_TArray<XEDataAttribute,12>
{
  /* 0x0000 */ struct XEDataAttribute m_array[12];
}; /* size: 0x01e0 */

struct XE_TEvent<4,0,12>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,12> m_dynamicAttr;
  /* 0x0288 */ struct XEEvent m_event;
}; /* size: 0x02d0 */

class XeCloudMinPkg::remove_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_114[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int internalOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02d0 */
}; /* size: 0x0290 */

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  page_errorIdx = 3,
  database_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_331, *PTAG_UNNAMED_331;

typedef enum
{
  stageIdx = 0,
  in_memory_nextIdx = 1,
  on_disk_nextIdx = 2,
  generated_nextIdx = 3,
  LastField = 4,
} TAG_UNNAMED_332, *PTAG_UNNAMED_332;

struct IVariantChangeType
{
}; /* size: 0x0008 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 1,
  NRemainder = 28,
} TAG_UNNAMED_333, *PTAG_UNNAMED_333;

enum XEPredicateNodeType
{
  XEPNT_OR = 0,
  XEPNT_AND = 1,
  XEPNT_NOT = 2,
};

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_334, *PTAG_UNNAMED_334;

struct IStdMarshalInfo
{
}; /* size: 0x0008 */

typedef enum _WNF_STATE_NAME_INFORMATION
{
  WnfInfoStateNameExist = 0,
  WnfInfoSubscribersPresent = 1,
  WnfInfoIsQuiescent = 2,
} WNF_STATE_NAME_INFORMATION, *PWNF_STATE_NAME_INFORMATION;

class AutoSpinlockHolder<242,1,1>
{
}; /* size: 0x0010 */

enum tagGLOBALOPT_RO_FLAGS
{
  COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2,
  COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4,
};

class SOS_InterlockedList<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc,16>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::FragmentDesc
{
  /* 0x0000 */ unsigned char* m_start;
  /* 0x0008 */ unsigned char* m_end;
  /* 0x0010 */ int m_pagesPerFragment;
  /* 0x0014 */ long Padding_115;
  /* 0x0018 */ struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::FragmentDesc* m_nextFragment;
  /* 0x0020 */ int m_freePageCount;
  /* 0x0024 */ long Padding_116[3];
  /* 0x0030 */ class SOS_InterlockedList<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc,16> m_freePages;
  /* 0x0040 */ unsigned char* m_unallocated;
  /* 0x0048 */ int m_pageBeingCommitted;
  /* 0x004c */ long Padding_117;
  /* 0x0050 */ class DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>* m_allocator;
  /* 0x0058 */ long __PADDING__[2];
}; /* size: 0x0060 */

class PerCPUData<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition>
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::NodePartition
{
  /* 0x0000 */ class SOS_InterlockedList<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc,16> m_pageBuckets[5];
  /* 0x0050 */ unsigned __int64 m_firstPageOnNode;
  /* 0x0058 */ unsigned __int64 m_pages;
  /* 0x0060 */ unsigned __int64 m_target;
  /* 0x0068 */ int m_pageBeingAdded;
  /* 0x006c */ unsigned int m_firstCpuId;
  /* 0x0070 */ long __PADDING__[4];
}; /* size: 0x0080 */

class DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>
{
  union
  {
    /* 0x0000 */ int sm_initialized;
    /* 0x0000 */ class MemoryClerk* m_clerk;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short m_nodeCount;
  /* 0x000a */ char Padding_118[6];
  /* 0x0010 */ unsigned char* m_outlineBuffer;
  /* 0x0018 */ unsigned __int64 m_everOnlineNodes;
  /* 0x0020 */ long Padding_119[8];
  /* 0x0040 */ struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::FragmentDesc m_fragment;
  /* 0x00a0 */ int m_fragmentBeingCreated;
  /* 0x00a4 */ long Padding_120[7];
  /* 0x00c0 */ class PerCPUData<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition> m_cpuParts;
  /* 0x00d0 */ long Padding_121[12];
  /* 0x0100 */ struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::NodePartition m_nodePart[64];
}; /* size: 0x2100 */

class SOS_InterlockedList<SOS_TopLevelBlockDescriptor,0>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

class SOS_RecursiveMutex
{
  /* 0x0000 */ class EventAutoInternal<SuspendQueueSLock> m_event;
  /* 0x0028 */ class Worker* m_pOwner;
  /* 0x0030 */ class SOS_Task* m_pOwningTaskNoRef;
  /* 0x0038 */ __int64 m_cRecursion;
}; /* size: 0x0040 */

class SOS_MemoryTopLevelBlockAllocator
{
  union
  {
    /* 0x0000 */ unsigned __int64 sm_MemoryTopLevelBlockSize;
    /* 0x0000 */ class SOS_MemoryTopLevelBlockAllocator sm_MemoryTopLevelBlockAllocator;
    /* 0x0000 */ class DescriptorAllocator<SOS_TopLevelBlockDescriptor,0> sm_TopLevelBlockDescriptorAllocator;
    struct
    {
      /* 0x0000 */ class SOS_InterlockedList<SOS_TopLevelBlockDescriptor,0> m_freeList[64];
      /* 0x0400 */ class SOS_InterlockedList<SOS_TopLevelBlockDescriptor,0> m_uncommittedList;
      /* 0x0410 */ unsigned __int64 m_freeListCount[64];
      /* 0x0610 */ class SOS_MemoryFragmentManager* m_FragmentManager;
      /* 0x0618 */ unsigned __int64 m_BlockSize;
      /* 0x0620 */ class SOS_RecursiveMutex m_mutex;
    }; /* size: 0x0660 */
  }; /* size: 0x2100 */
}; /* size: 0x0660 */

class Spinlock<287,1,1>
{
}; /* size: 0x0004 */

class CAutoP<XE_CXHistoryTargetConfig>
{
}; /* size: 0x0008 */

enum RPC_ADDRESS_CHANGE_TYPE
{
  PROTOCOL_NOT_LOADED = 1,
  PROTOCOL_LOADED = 2,
  PROTOCOL_ADDRESS_CHANGE = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 35,
} TAG_UNNAMED_335, *PTAG_UNNAMED_335;

typedef struct _EVENTLOGRECORD
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned long RecordNumber;
  /* 0x000c */ unsigned long TimeGenerated;
  /* 0x0010 */ unsigned long TimeWritten;
  /* 0x0014 */ unsigned long EventID;
  /* 0x0018 */ unsigned short EventType;
  /* 0x001a */ unsigned short NumStrings;
  /* 0x001c */ unsigned short EventCategory;
  /* 0x001e */ unsigned short ReservedFlags;
  /* 0x0020 */ unsigned long ClosingRecordNumber;
  /* 0x0024 */ unsigned long StringOffset;
  /* 0x0028 */ unsigned long UserSidLength;
  /* 0x002c */ unsigned long UserSidOffset;
  /* 0x0030 */ unsigned long DataLength;
  /* 0x0034 */ unsigned long DataOffset;
} EVENTLOGRECORD, *PEVENTLOGRECORD; /* size: 0x0038 */

typedef struct _EVENTSFORLOGFILE
{
  /* 0x0000 */ unsigned long ulSize;
  /* 0x0004 */ wchar_t szLogicalLogFile[256];
  /* 0x0204 */ unsigned long ulNumRecords;
  /* 0x0208 */ struct _EVENTLOGRECORD* pEventLogRecords /* zero-length array */;
} EVENTSFORLOGFILE, *PEVENTSFORLOGFILE; /* size: 0x0208 */

typedef enum
{
  messageIdx = 0,
  LastField = 1,
} TAG_UNNAMED_336, *PTAG_UNNAMED_336;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_337, *PTAG_UNNAMED_337;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 8,
  VldEddOffset = 0,
  BufSize = 72,
} TAG_UNNAMED_338, *PTAG_UNNAMED_338;

class XE_ResolvedObjectXML<XETarget>
{
}; /* size: 0x0020 */

typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
  RelationProcessorCore = 0,
  RelationNumaNode = 1,
  RelationCache = 2,
  RelationProcessorPackage = 3,
  RelationGroup = 4,
  RelationAll = 0xffffffff,
} LOGICAL_PROCESSOR_RELATIONSHIP, *PLOGICAL_PROCESSOR_RELATIONSHIP;

enum EPageType
{
  e_ptNull = 0,
  e_ptSlot = 1,
  e_ptVariable = 2,
  e_ptIncremental = 4,
  e_ptFixed = 8,
  e_ptFree = 16,
  e_ptPageHeap = 32,
  e_ptPageReserved = 64,
  e_ptSmall = 128,
  e_ptLarge = 256,
  e_pt8KPageHeader = 512,
  e_ptDebug = 4096,
  e_ptLargeDebug = 4352,
  e_ptVariableDebug = 4098,
  e_ptIncrementalDebug = 4100,
  e_ptFreeDebug = 4112,
};

class TVarPageMgr<1>
{
  union
  {
    struct
    {
      /* 0x0000 */ class IMemObj* m_pmoOwner;
      /* 0x0008 */ class CVariableInfo* m_pviPageList[7];
      /* 0x0040 */ class CVariableInfo* m_maxPageOnList[7];
      /* 0x0078 */ unsigned __int64 m_cbSlotMax;
      /* 0x0080 */ __int64 m_cTotalPages;
      /* 0x0088 */ __int64 m_cMultiplePages;
      /* 0x0090 */ int m_isDebugOn;
      /* 0x0094 */ long Padding_122;
      /* 0x0098 */ __int64 m_cMaxTotalPages;
    }; /* size: 0x009c */
    /* 0x0000 */ const __int64 xsm_cbMemObjPageSize;
    /* 0x0000 */ const __int64 xsm_cbMultiPageThreshold;
    /* 0x0000 */ enum EPageType xsm_cbPageType;
    /* 0x0000 */ enum EPageType xsm_cbPageTypeDebug;
    /* 0x0000 */ const unsigned long xsm_cbMaxAllocSize;
  }; /* size: 0x009c */
}; /* size: 0x00a0 */

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
  /* 0x0000 */ unsigned long MarshalCookie;
  /* 0x0004 */ struct _GUID UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT; /* size: 0x0014 */

enum XETypeCapabilities
{
  XEXC_SIGNEXT = 1,
  XEXC_IEEE754 = 2,
  XEXC_NO_DATA_ATTRIB = 4,
  XEXC_DEFAULT = 0,
};

typedef enum
{
  accessorIdx = 0,
  rowIdx = 1,
  LastField = 2,
} TAG_UNNAMED_339, *PTAG_UNNAMED_339;

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_340, *PTAG_UNNAMED_340;

typedef struct _OVERLAPPED
{
  /* 0x0000 */ unsigned __int64 Internal;
  /* 0x0008 */ unsigned __int64 InternalHigh;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned long Offset;
      /* 0x0014 */ unsigned long OffsetHigh;
    }; /* size: 0x0008 */
    /* 0x0010 */ void* Pointer;
  }; /* size: 0x0008 */
  /* 0x0018 */ void* hEvent;
} OVERLAPPED, *POVERLAPPED; /* size: 0x0020 */

struct CXFilePage
{
  /* 0x0000 */ long Padding_123[10];
  /* 0x0028 */ struct _OVERLAPPED m_overlapped;
  /* 0x0048 */ unsigned int m_bufUsed;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

enum SCHED_STATE
{
  SCHED_ONLINE = 1,
  SCHED_OFFLINE = 2,
};

struct ISWbemPrivilegeSet
{
}; /* size: 0x0008 */

enum CWMO_FLAGS
{
  CWMO_DISPATCH_CALLS = 1,
  CWMO_DISPATCH_WINDOW_MESSAGES = 2,
  REAL_CWMO_ENABLE_CALL_REENTRANCY = 1,
  CWMO_ENABLE_WINDOW_MESSAGES = 2,
  CWMO_ENABLE_CALL_REENTRANCY = 3,
};

struct XE_TArray<XEDataAttribute,22>
{
  /* 0x0000 */ struct XEDataAttribute m_array[22];
}; /* size: 0x0370 */

class PerCPUDataBase<SOS_MemoryWorkSpace::WSCpuPart>::Enum
{
  /* 0x0000 */ unsigned int m_nextIndex;
  /* 0x0004 */ long Padding_124;
  /* 0x0008 */ class PerCPUDataBase<SOS_MemoryWorkSpace::WSCpuPart>* m_perCPUData;
}; /* size: 0x0010 */

typedef struct _SERVER_INFO_1524
{
  /* 0x0000 */ unsigned long sv1524_minkeepcomplsearch;
} SERVER_INFO_1524, *PSERVER_INFO_1524; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 33,
} TAG_UNNAMED_341, *PTAG_UNNAMED_341;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_342, *PTAG_UNNAMED_342;

struct AsyncIPipeLong
{
}; /* size: 0x0008 */

enum XEMapCapabilities
{
  XEMC_BITMASK = 1,
  XEMC_DEFAULT = 0,
};

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  index_idIdx = 3,
  related_object_idIdx = 4,
  ddl_phaseIdx = 5,
  transaction_idIdx = 6,
  object_nameIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_343, *PTAG_UNNAMED_343;

struct IParseDisplayName
{
}; /* size: 0x0008 */

enum SOS_CALLRESULT_TYPE
{
  CALLRESULT_UNINIT = 0,
  CALLRESULT_PROTECTOR_ERROR = 1,
  CALLRESULT_PROTECTOR_EXCEPTION_SQLERROR = 2,
  CALLRESULT_CALL_EXCEPTION_SEH = 3,
  CALLRESULT_CALL_EXCEPTION_SQLERROR = 4,
  CALLRESULT_CALL_COMPLETED = 5,
  CALLRESULT_CALL_LAST = 6,
};

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_344, *PTAG_UNNAMED_344;

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_345, *PTAG_UNNAMED_345;

typedef enum
{
  timeout_typeIdx = 0,
  optimizer_timeout_task_numberIdx = 1,
  LastField = 2,
} TAG_UNNAMED_346, *PTAG_UNNAMED_346;

enum tagCHANGEKIND
{
  CHANGEKIND_ADDMEMBER = 0,
  CHANGEKIND_DELETEMEMBER = 1,
  CHANGEKIND_SETNAMES = 2,
  CHANGEKIND_SETDOCUMENTATION = 3,
  CHANGEKIND_GENERAL = 4,
  CHANGEKIND_INVALIDATE = 5,
  CHANGEKIND_CHANGEFAILED = 6,
  CHANGEKIND_MAX = 7,
};

struct XEObjectCollection
{
  /* 0x0000 */ enum XEObjectType m_type;
  /* 0x0004 */ unsigned short m_version;
  /* 0x0006 */ unsigned short m_objectSize;
  /* 0x0008 */ unsigned int m_objectCount;
  /* 0x000c */ unsigned int m_padding;
}; /* size: 0x0010 */

struct XE_TArray<XETarget *,8>
{
  /* 0x0000 */ struct XETarget* m_array[8];
}; /* size: 0x0040 */

struct XE_TObjects<XETarget,8>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XETarget *,8> m_objectPtrs;
}; /* size: 0x0050 */

typedef enum
{
  database_idIdx = 0,
  resource_idIdx = 1,
  request_sourceIdx = 2,
  resource_typeIdx = 3,
  lock_modeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_347, *PTAG_UNNAMED_347;

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_348, *PTAG_UNNAMED_348;

typedef enum __MIDL_IBindStatusCallback_0001
{
  BINDVERB_GET = 0,
  BINDVERB_POST = 1,
  BINDVERB_PUT = 2,
  BINDVERB_CUSTOM = 3,
  BINDVERB_RESERVED1 = 4,
} _MIDL_IBindStatusCallback_0001, *P_MIDL_IBindStatusCallback_0001;

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_unique_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_349, *PTAG_UNNAMED_349;

typedef enum
{
  epochIdx = 0,
  csnIdx = 1,
  remote_versionIdx = 2,
  remote_portIdx = 3,
  remote_cluster_nameIdx = 4,
  remote_server_nameIdx = 5,
  remote_app_nameIdx = 6,
  remote_table_group_nameIdx = 7,
  remote_low_keyIdx = 8,
  remote_high_keyIdx = 9,
  fall_back_reasonIdx = 10,
  LastField = 11,
} TAG_UNNAMED_350, *PTAG_UNNAMED_350;

struct XE_TEvent<4,1,13>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,13> m_dynamicAttr;
  /* 0x02e0 */ struct XEEvent m_event;
}; /* size: 0x0328 */

class XeSqlPkg::auto_stats
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_125[140];
      /* 0x0240 */ unsigned char m_buf[53];
    }; /* size: 0x0045 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int job_idOffset;
    /* 0x0000 */ const int job_typeOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int retriesOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int last_errorOffset;
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int statistics_listOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0328 */
}; /* size: 0x0278 */

enum SPINLOCK_TYPE
{
  SPL_CLOUD_THROTTLING_SETTING = 0,
  SPL_CLOUD_PARTITION_COPY_STATS = 1,
  SPL_CLOUD_PARTITION_USAGE = 2,
  SPL_SE_REPL_CSN = 3,
  SPL_SE_REPL_PREFETCH_STATS = 4,
  SPL_SE_REPL_CSNDBTS = 5,
  SPL_SE_REPL_REPLICA = 6,
  SPL_SE_REPL_PARTITION = 7,
  SPL_SE_REPL_PARTITION_BY_ID = 8,
  SPL_SE_REPL_PARTITION_BY_KEY = 9,
  SPL_SE_REPL_PARTITION_VERSION = 10,
  SPL_SE_REPL_ROWSET_METADATA = 11,
  SPL_SE_REPL_SECONDARY_ROWSET_METADATA = 12,
  SPL_SE_REPL_PARTITION_KILL = 13,
  SPL_SE_REPL_PARTITION_MGR_EVENT_LIST = 14,
  SPL_SE_REPL_PARTITION_SESSION_EVENT_LIST = 15,
  SPL_SE_REPL_BACKGROUND_TASK_CONTROL = 16,
  SPL_SE_REPL_FLOW_CONTROL = 17,
  SPL_SE_REPL_CHECKPOINT_QUEUES = 18,
  SPL_SE_REPL_SECONDARY_WORKER = 19,
  SPL_ASYNC_TRANSPORT_SESSION = 20,
  SPL_ASYNC_TRANSPORT_USERS = 21,
  SPL_ASYNC_TRANSPORT_PENDING_USERS = 22,
  SPL_ASYNC_TRANSPORT_DESTINATIONS = 23,
  SPL_ASYNC_TRANSPORT_HEARTBEAT_DESTINATIONS = 24,
  SPL_ASYNC_TRANSPORT_HEARTBEAT_DISPATCH = 25,
  SPL_ASYNC_TRANSPORT_STREAMS = 26,
  SPL_ASYNC_TRANSPORT_MESSAGE_QUEUES = 27,
  SPL_ASYNC_TRANSPORT_CONNECT = 28,
  SPL_ASYNC_TRANSPORT_THROTTLED_CONNECT = 29,
  SPL_ASYNC_TRANSPORT_DESTINATION = 30,
  SPL_ASYNC_TRANSPORT_STREAM = 31,
  SPL_SEREPL_WORKER_POOLS = 32,
  SPL_CLOUD_FABRIC_MONITOR = 33,
  SPL_SE_REPL_BACKGROUND_TASK_LIST = 34,
  SPL_SCRIPT_DEPLOYMENT_REQUESTS = 35,
  SPL_SCRIPT_DEPLOYMENT_WORKERS = 36,
  SPL_ASYNC_TRANSPORT_MESSAGE_QUEUE = 37,
  SPL_ASYNC_TRANSPORT_MESSAGE_QUEUE_PAGES = 38,
  SPL_ASYNC_TRANSPORT_WORKER_QUEUE = 39,
  SPL_FILETABLE_FCB = 40,
  SPL_COLUMNSTOREBUILDSTATE_LIST = 41,
  SPL_COLUMNSTORE_HASHTABLE = 42,
  SPL_GLOBAL_TRACE_FLAGS = 43,
  SPL_COMMITTABLE = 44,
  SPL_HADR_TRANSPORT_CONTROL = 45,
  SPL_HADR_TRANSPORT_LIST = 46,
  SPL_ABR = 47,
  SPL_GUARDIAN = 48,
  SPL_MATRIX_OP_COLL = 49,
  SPL_MATRIX_OP = 50,
  SPL_CONNECTS = 51,
  SPL_ASYNCSTATSLIST = 52,
  SPL_HTTP_CONNCACHE = 53,
  SPL_BACKUP = 54,
  SPL_BACKUP_COPY_CONTEXT = 55,
  SPL_FILE_HANDLE_CACHE = 56,
  SPL_CMED_DATABASE = 57,
  SPL_MD_CHANGE_NOTIFICATION = 58,
  SPL_CMED_HASH_SET = 59,
  SPL_HTTP = 60,
  SPL_HTTP_ENDPOINT = 61,
  SPL_DIGEST_CACHE = 62,
  SPL_FILE_TABLE = 63,
  SPL_SESSION_KILLER = 64,
  SPL_SPIN_EVENT_MUTEX = 65,
  SPL_SECURITY_CACHE = 66,
  SPL_SECURITY = 67,
  SPL_SQL_NORM = 68,
  SPL_TDS_TVP = 69,
  SPL_SQLTRACE_FILE_BUFFER = 70,
  SPL_SRVPROC = 71,
  SPL_EXT_CACHE = 72,
  SPL_FT_INIT = 73,
  SPL_COM_INIT = 74,
  SPL_LOGON_TRIGGER_CACHE = 75,
  SPL_SOAPSESSIONS = 76,
  SPL_QUERYSCAN = 77,
  SPL_BPWORKFILE = 78,
  SPL_BACKUP_CTX = 79,
  SPL_RESOURCE = 80,
  SPL_CACHEOBJ_DBG = 81,
  SPL_DBCC_CHECK = 82,
  SPL_ADB_CACHE = 83,
  SPL_X_PIPE_DEMAND = 84,
  SPL_DINPBUF = 85,
  SPL_SOS_OBJECT_POOL = 86,
  SPL_SQL_MGR = 87,
  SPL_DEFERRED_WF_EXT_DROP = 88,
  SPL_EXTENT_ACTIVATION = 89,
  SPL_MEM_MGR = 90,
  SPL_BUF_HASH = 91,
  SPL_DirtyPageList = 92,
  SPL_DBT_HASH = 93,
  SPL_HOBT_HASH = 94,
  SPL_TXFRM_REPL = 95,
  SPL_FSGHOST_STATUS = 96,
  SPL_PAGECOPIER = 97,
  SPL_DTT_LIST = 98,
  SPL_ENDD_LIST = 99,
  SPL_IDENTITY = 100,
  SPL_BUF_LINK = 101,
  SPL_DBTABLE = 102,
  SPL_X_PORT = 103,
  SPL_LSS_SYNC_DTC = 104,
  SPL_XDESMGR = 105,
  SPL_X_PIPE = 106,
  SPL_LOGFLUSHQ = 107,
  SPL_XCB_HASH = 108,
  SPL_BASE_XACT_HASH = 109,
  SPL_XDES_HASH = 110,
  SPL_BUF_WRITE_LOG = 111,
  SPL_RFS_THREAD_QUEUE = 112,
  SPL_SVC_BROKER_CTRL = 113,
  SPL_XACT_WORKSPACE = 114,
  SPL_XCB = 115,
  SPL_X_PACKET_LIST = 116,
  SPL_QUERYEXEC = 117,
  SPL_SVC_BROKER_LIST = 118,
  SPL_LOGCACHE_ACCESS = 119,
  SPL_LSLIST = 120,
  SPL_SEQUENCED_OBJECT = 121,
  SPL_SVC_BROKER_DEBUG_LIST = 122,
  SPL_SVC_BROKER_OBJECT = 123,
  SPL_CURSOR = 124,
  SPL_READ_AHEAD = 125,
  SPL_DROP = 126,
  SPL_BLOCKER_ENUM = 127,
  SPL_XID_ARRAY = 128,
  SPL_LOCK_HASH = 129,
  SPL_LOGLC = 130,
  SPL_QE_SHUTDOWN = 131,
  SPL_LOGLFM = 132,
  SPL_GHOST_HASH = 133,
  SPL_ISSRESOURCE = 134,
  SPL_XVB_CSN = 135,
  SPL_XVB_LIST = 136,
  SPL_FCB_REPLICA_SYNC = 137,
  SPL_SUBPDESC_LIST = 138,
  SPL_DIAG_OBJECT = 139,
  SPL_XACT_LOCK_INFO = 140,
  SPL_MDB_REMOTE_SESSION_HASH_TABLE = 141,
  SPL_MDB_REMOTE_BATCH_STATS_HASH_TABLE = 142,
  SPL_SESSION_MANAGER_PRIORITY_QUEUE = 143,
  SPL_SESSION_MANAGER_WORK_ITEM_LIST = 144,
  SPL_MATRIX_DATA_VIRTUALIZATION_MANAGER_PRIORITY_QUEUE = 145,
  SPL_MATRIX_DATA_VIRTUALIZATION_MANAGER_WORK_ITEM_LIST = 146,
  SPL_MATRIX_DATA_VIRTUALIZATION_MANAGER_AGENT_PRIORITY_QUEUE = 147,
  SPL_MATRIX_DATA_VIRTUALIZATION_MANAGER_AGENT_WORK_ITEM_LIST = 148,
  SPL_REMOTEOP = 149,
  SPL_MATRIXDB_MTM_TXN = 150,
  SPL_SE_REPL_SECONDARY_TASk_PROXY = 151,
  SPL_FSAGENT = 152,
  SPL_SESSION_MANAGER_REMOTE_SESSION_LIST = 153,
  SPL_SESSION_MANAGER_REMOTE_BATCH_STATS_LIST = 154,
  SPL_SESSION_MANAGER_REMOTE_DIAG_LIST = 155,
  SPL_XACT_LOCKINFO_TASK = 156,
  SPL_GHOST_FREE = 157,
  SPL_XCB_FREE_LIST = 158,
  SPL_LOCK_FREE_LIST = 159,
  SPL_LSID = 160,
  SPL_XDES = 161,
  SPL_DBT_IO_LIST = 162,
  SPL_IOREQ = 163,
  SPL_XCHNG_TRACE = 164,
  SPL_DROP_TEMPO = 165,
  SPL_INDEX_CREATE = 166,
  SPL_XTS_MGR = 167,
  SPL_DATASET_FREELIST = 168,
  SPL_SHARABLE_SESSION_OBJECTS = 169,
  SPL_PROGRESS_REPORT = 170,
  SPL_DIAG_MANAGER = 171,
  SPL_SUBPDESC = 172,
  SPL_CLR_HOSTTASK = 173,
  SPL_MGR_CACHE = 174,
  SPL_SETRANGE_SYNC = 175,
  SPL_ALLOC_CACHES_HASH = 176,
  SPL_LOCK_NOTIFICATION = 177,
  SPL_COMPPLAN_SKELETON = 178,
  SPL_MATRIX_QSCACHE = 179,
  SPL_LPE_SESSION = 180,
  SPL_LPE_BATCH = 181,
  SPL_LPE_SXTP = 182,
  SPL_CLR_SPIN_LOCK = 183,
  SPL_CURSQL = 184,
  SPL_TSQL_DEBUG = 185,
  SPL_LOCK_RESOURCE_ID = 186,
  SPL_SEQUEUE_SIZED_THREADSAFE = 187,
  SPL_DROPPED_ALLOC_UNIT = 188,
  SPL_APPENDONLY_STORAGE = 189,
  SPL_SNI = 190,
  SPL_SESSION_MANAGER = 191,
  SPL_CONNECTION_MANAGER = 192,
  SPL_SESSION_SEC_CONTEXT = 193,
  SPL_TSQL_NICE_SHUTDOWN = 194,
  SPL_QUERY_EXEC_STATS = 195,
  SPL_SUBLATCH = 196,
  SPL_MATRIXDB_MCI = 197,
  SPL_DISPATCHER_QUEUE = 198,
  SPL_MATRIXDB_TCM_LIST = 199,
  SPL_RPCDISPATCH = 200,
  SPL_RPCRESPONDERCONTEXT = 201,
  SPL_SOS_DISPATCHER = 202,
  SPL_HADR_AR_CONTROLLER_COLLECTION = 203,
  SPL_HADR_AGH_X_ACCESS = 204,
  SPL_SYNCPOINT = 205,
  SPL_REMOTE_THREAD_CACHE = 206,
  SPL_SEMANTIC_TICACHE = 207,
  SPL_QUERY_STORE_SELF_AGG = 208,
  SPL_QUERY_STORE_PLAN_LIST = 209,
  SPL_MATRIXDB_PRISM_STATE = 210,
  SPL_SOS_TASK = 211,
  SPL_SOS_VM_LOW = 212,
  SPL_TMP_SESS_KEY = 213,
  SPL_WRITE_PAGE_RECORDER = 214,
  SPL_OPT_IDX_MISS_KEY = 215,
  SPL_FS_DELETED_FOLDER_CLEANUP = 216,
  SPL_REPL_LOGREADER_HISTORY_CACHE = 217,
  SPL_MATRIXDB_MCIBatchOrder = 218,
  SPL_LOGPOOL_HASHBUCKET = 219,
  SPL_IO_DISPENSER_PAUSE = 220,
  SPL_RPCPACKAGE = 221,
  SPL_SOS_ACTIVEDESCRIPTOR = 222,
  SPL_ONE_PROC_SIM_NODE_CONTEXT_LIST = 223,
  SPL_QUERY_STORE_STMT_COMP_AGG = 224,
  SPL_QUERY_STORE_PLAN_COMP_AGG = 225,
  SPL_QUERY_STORE_EXEC_STATS_READ = 226,
  SPL_QUERY_STORE_STATS_COOKIE_CACHE = 227,
  SPL_DEK_INSTANCE = 228,
  SPL_LIVE_TARGET_TVF = 229,
  SPL_GLOBAL_SCHEDULER_LIST = 230,
  SPL_HADR_AR_TRANSPORT = 231,
  SPL_HADR_AR_DB_MGR = 232,
  SPL_GROUP_COMMIT_FEEDBACK_LOOP = 233,
  SPL_FREE_SPACE_CACHE_ENTRY = 234,
  SPL_OPT_IDX_MISS_ID = 235,
  SPL_SOS_NODE = 236,
  SPL_SOS_SCHEDULER = 237,
  SPL_SOS_TLIST = 238,
  SPL_SOS_RESOURCE_CLERK_LIST = 239,
  SPL_SOS_SELIST_SIZED_SLOCK = 240,
  SPL_SOS_CACHESTORE = 241,
  SPL_SOS_BLOCKDESCRIPTORBUCKET = 242,
  SPL_SOS_BLOCKALLOCPARTIALLIST = 243,
  SPL_RESMANAGER = 244,
  SPL_SOS_RW = 245,
  SPL_SOS_WAITABLE_ADDRESS_HASHBUCKET = 246,
  SPL_SOS_ABORT_TASK = 247,
  SPL_SOS_WAIT_STATS = 248,
  SPL_SOS_SYSTHREAD_DISPATCHER = 249,
  SPL_SOS_OBJECT_STORE = 250,
  SPL_SOS_SYSTHREAD = 251,
  SPL_SOS_MINITHREAD = 252,
  SPL_SOS_SUSPEND_QUEUE = 253,
  SPL_RANGE_GENERATION = 254,
  SPL_SOS_RINGBUFFER_RECORD = 255,
  SPL_SOS_LARGEPAGE_ALLOCATOR = 256,
  SPL_KTM_ENLISTMENT = 257,
  SPL_ONDEMAND_TASK = 258,
  SPL_REMOTE_SESSION_CACHE = 259,
  SPL_RESQUEUE = 260,
  SPL_OPT_INFO_MGR = 261,
  SPL_OPT_IDX_STATS = 262,
  SPL_FGCB_PRP_FILL = 263,
  SPL_HOBT_DROPPED_LIST = 264,
  SPL_PARTITIONED_HEAP_FREE_LIST = 265,
  SPL_DELAYED_PARTITIONED_STACK = 266,
  SPL_FS_CONTAINER_LIST_WITH_DELETE = 267,
  SPL_FS_CHUNKER_CONTEXT = 268,
  SPL_RPCCHANNELPOOL = 269,
  SPL_RPCREQUESTORCONTEXT = 270,
  SPL_CHANNELFORCECLOSEMANAGER = 271,
  SPL_DATAPORTSOURCEINFOQUEUE = 272,
  SPL_DATAPORTSOURCEINFOCREDIT = 273,
  SPL_DATAPORTCONSUMER = 274,
  SPL_QUERY_STORE_HT_CACHE = 275,
  SPL_QUERY_STORE_EXEC_STATS_AGG = 276,
  SPL_QUERY_STORE_ASYNC_PERSIST = 277,
  SPL_SOS_CLOCKALG_INTERNODE_SYNC = 278,
  SPL_REPL_LOGREADER_PERDB_HISTORY_CACHE = 279,
  SPL_LOGPOOL_SHAREDCACHEBUFFER = 280,
  SPL_LOGPOOL_SIZEPERRESOURCEPOOL = 281,
  SPL_LOGPOOL_REFCOUNTEDOBJECT = 282,
  SPL_XE_SESSION_STORAGE = 283,
  SPL_XE_DISPATCHER_QUEUE = 284,
  SPL_XE_BUFFER_MGR = 285,
  SPL_XE_SESSION_MGR = 286,
  SPL_XE_SESSION_EVENT_MGR = 287,
  SPL_XE_SESSION_TARGET_MGR = 288,
  SPL_XE_NOTIFICATION_CALLBACK_LIST = 289,
  SPL_DISPATCHER_LIST = 290,
  SPL_NONYIELD_ANALYSIS = 291,
  SPL_MATRIXDB_MEMTABLE = 292,
  SPL_CM_ROSTER = 293,
  SPL_CM_ENLISTMENT = 294,
  SPL_CM_FMHISTORY = 295,
  SPL_CMA_FMHISTORY = 296,
  SPL_CM_FMCONFIG = 297,
  SPL_FABRIC_OBJECT_REGISTRATION = 298,
  SPL_TCMA_AGE_DESC = 299,
  SPL_LOG_CONSOLIDATION = 300,
  SPL_SOS_DEBUG_HOOK = 301,
  SPL_SOS_OOM_CHECK = 302,
  SPL_SOS_PHYS_PAGE_CACHE = 303,
  SPL_LANG_RES_LOAD = 304,
  SPL_SOS_CACHESTORE_CLOCK = 305,
  SPL_HADR_FABRIC_FACTORY = 306,
  SPL_ASYNC_OP_ADMIN_CLIENT_REGISTRATION_LIST = 307,
  SPL_ASYNC_OP_ADMIN_WORK_REGISTRATION_HASH_TABLE = 308,
  SPL_FABRIC_REPLICA_TRANSPORT = 309,
  SPL_ONE_PROC_SIM_NODE_CONTEXT = 310,
  SPL_ONE_PROC_SIM_REPLICA_CONTEXT = 311,
  SPL_ONE_PROC_SIM_SERVICE_PARTITION = 312,
  SPL_FABRIC_DB_MGR_PTR = 313,
  SPL_FABRIC_TVF_DATA_CONSUMER_LIST = 314,
  SPL_FABRIC_TVF_LOAD_LIB = 315,
  SPL_SLO_INFO_LIST = 316,
  SPL_XECLOUDMIN_PAUSE = 317,
  SPL_SPT_PROFILE = 318,
  SPL_VDI_OPERATION = 319,
  SPL_SE_REPL_QUEUE_XACT_HASH = 320,
  SPL_SE_REPL_QUEUE_COMMIT_LIST = 321,
  SPL_SE_REPL_SUBTYPE_VERSION = 322,
  SPL_XDB_URI_CACHE = 323,
  SPL_IO_RG_VOLUME_HASHTABLE = 324,
  SPL_XDB_REMOTE_URI_CACHE = 325,
  SPL_BPREPARTITION = 326,
  SPL_CSIBUILDMEM = 327,
  SPL_DBSEEDING_OPERATION = 328,
  SPL_SNI_NODE_PENDING_IO_QUEUE = 329,
  SPL_XTP_RT_DATA_LIST = 330,
  SPL_TESTTEAM = 331,
  SPL_TESTTEAMTASTAS = 332,
  SPL_TESTTEAMEXPONENTIAL = 333,
  SPL_TESTTEAMEXPONENTIALTASTAS = 334,
  SPL_STACK_HASHER = 335,
  SPL_LAST = 336,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_351, *PTAG_UNNAMED_351;

enum SYM_TYPE
{
  SymNone = 0,
  SymCoff = 1,
  SymCv = 2,
  SymPdb = 3,
  SymExport = 4,
  SymDeferred = 5,
  SymSym = 6,
  SymDia = 7,
  SymVirtual = 8,
  NumSymTypes = 9,
};

struct tagPROCESSENTRY32
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long cntUsage;
  /* 0x0008 */ unsigned long th32ProcessID;
  /* 0x000c */ long Padding_126;
  /* 0x0010 */ unsigned __int64 th32DefaultHeapID;
  /* 0x0018 */ unsigned long th32ModuleID;
  /* 0x001c */ unsigned long cntThreads;
  /* 0x0020 */ unsigned long th32ParentProcessID;
  /* 0x0024 */ long pcPriClassBase;
  /* 0x0028 */ unsigned long dwFlags;
  /* 0x002c */ char szExeFile[260];
}; /* size: 0x0130 */

class SEListEnum<IORGHashTableEntry,248>;

enum RWLockMode
{
  RWLOCK_NONE = 0,
  RWLOCK_READ = 1,
  RWLOCK_WRITE = 2,
  RWLOCK_LAST = 3,
};

typedef struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
} FILE_IO_COMPLETION_NOTIFICATION_INFORMATION, *PFILE_IO_COMPLETION_NOTIFICATION_INFORMATION; /* size: 0x0004 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  typeIdx = 2,
  sourceIdx = 3,
  session_idIdx = 4,
  os_errorIdx = 5,
  sni_errorIdx = 6,
  sni_consumer_errorIdx = 7,
  sni_providerIdx = 8,
  stateIdx = 9,
  local_portIdx = 10,
  remote_portIdx = 11,
  tds_input_buffer_errorIdx = 12,
  tds_output_buffer_errorIdx = 13,
  tds_input_buffer_bytesIdx = 14,
  tds_flagsIdx = 15,
  total_login_time_msIdx = 16,
  login_task_enqueued_msIdx = 17,
  network_writes_msIdx = 18,
  network_reads_msIdx = 19,
  ssl_processing_msIdx = 20,
  sspi_processing_msIdx = 21,
  login_trigger_and_resource_governor_processing_msIdx = 22,
  connection_idIdx = 23,
  connection_peer_idIdx = 24,
  local_hostIdx = 25,
  remote_hostIdx = 26,
  call_stackIdx = 27,
  LastField = 28,
} TAG_UNNAMED_352, *PTAG_UNNAMED_352;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_353, *PTAG_UNNAMED_353;

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_354, *PTAG_UNNAMED_354;

typedef enum
{
  brick_idIdx = 0,
  session_idIdx = 1,
  object_idIdx = 2,
  object_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_355, *PTAG_UNNAMED_355;

struct XEPackage0::GetLastErrorAction
{
}; /* size: 0x0001 */

enum tag_WBEM_SHUTDOWN_FLAGS
{
  WBEM_SHUTDOWN_UNLOAD_COMPONENT = 1,
  WBEM_SHUTDOWN_WMI = 2,
  WBEM_SHUTDOWN_OS = 3,
};

struct tagGCP_RESULTSW
{
  /* 0x0000 */ unsigned long lStructSize;
  /* 0x0004 */ long Padding_127;
  /* 0x0008 */ wchar_t* lpOutString;
  /* 0x0010 */ unsigned int* lpOrder;
  /* 0x0018 */ int* lpDx;
  /* 0x0020 */ int* lpCaretPos;
  /* 0x0028 */ char* lpClass;
  /* 0x0030 */ wchar_t* lpGlyphs;
  /* 0x0038 */ unsigned int nGlyphs;
  /* 0x003c */ int nMaxFit;
}; /* size: 0x0040 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 56,
} TAG_UNNAMED_356, *PTAG_UNNAMED_356;

struct tagLAYERPLANEDESCRIPTOR
{
  /* 0x0000 */ unsigned short nSize;
  /* 0x0002 */ unsigned short nVersion;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned char iPixelType;
  /* 0x0009 */ unsigned char cColorBits;
  /* 0x000a */ unsigned char cRedBits;
  /* 0x000b */ unsigned char cRedShift;
  /* 0x000c */ unsigned char cGreenBits;
  /* 0x000d */ unsigned char cGreenShift;
  /* 0x000e */ unsigned char cBlueBits;
  /* 0x000f */ unsigned char cBlueShift;
  /* 0x0010 */ unsigned char cAlphaBits;
  /* 0x0011 */ unsigned char cAlphaShift;
  /* 0x0012 */ unsigned char cAccumBits;
  /* 0x0013 */ unsigned char cAccumRedBits;
  /* 0x0014 */ unsigned char cAccumGreenBits;
  /* 0x0015 */ unsigned char cAccumBlueBits;
  /* 0x0016 */ unsigned char cAccumAlphaBits;
  /* 0x0017 */ unsigned char cDepthBits;
  /* 0x0018 */ unsigned char cStencilBits;
  /* 0x0019 */ unsigned char cAuxBuffers;
  /* 0x001a */ unsigned char iLayerPlane;
  /* 0x001b */ unsigned char bReserved;
  /* 0x001c */ unsigned long crTransparent;
}; /* size: 0x0020 */

enum TASK_LOAD_TYPE
{
  TASK_LOAD_NONE = 0,
  TASK_LOAD_MINIMAL = 1,
  TASK_LOAD_NORMAL = 2,
  TASK_LOAD_MAXIMUM = 4,
};

struct XEParameter
{
  /* 0x0000 */ struct XERelativeObjectId m_typeRid;
  /* 0x0004 */ long Padding_128;
  /* 0x0008 */ unsigned __int64 m_value;
}; /* size: 0x0010 */

struct XELogMessage
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_129[2];
  /* 0x0004 */ struct _GUID m_packageId;
  /* 0x0014 */ struct XERelativeObjectId m_msgRid;
  /* 0x0018 */ unsigned short m_parameterCount;
  /* 0x001a */ char Padding_130[6];
  /* 0x0020 */ struct XEParameter m_parameters[6];
}; /* size: 0x0080 */

class XE_LogMessage
{
  /* 0x0000 */ struct XELogMessage m_msg;
}; /* size: 0x0080 */

enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE
{
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1,
  ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2,
};

typedef struct _QUERY_SERVICE_CONFIGW
{
  /* 0x0000 */ unsigned long dwServiceType;
  /* 0x0004 */ unsigned long dwStartType;
  /* 0x0008 */ unsigned long dwErrorControl;
  /* 0x000c */ long Padding_131;
  /* 0x0010 */ wchar_t* lpBinaryPathName;
  /* 0x0018 */ wchar_t* lpLoadOrderGroup;
  /* 0x0020 */ unsigned long dwTagId;
  /* 0x0024 */ long Padding_132;
  /* 0x0028 */ wchar_t* lpDependencies;
  /* 0x0030 */ wchar_t* lpServiceStartName;
  /* 0x0038 */ wchar_t* lpDisplayName;
} QUERY_SERVICE_CONFIGW, *PQUERY_SERVICE_CONFIGW; /* size: 0x0040 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_357, *PTAG_UNNAMED_357;

class XeSqlPkg::fulltext_test_access_point
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_133[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int event_typeOffset;
    /* 0x0000 */ const int additional_infoOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

enum tagBINDSPEED
{
  BINDSPEED_INDEFINITE = 1,
  BINDSPEED_MODERATE = 2,
  BINDSPEED_IMMEDIATE = 3,
};

class BitEnum<unsigned __int64>
{
  /* 0x0000 */ unsigned __int64 m_source;
  /* 0x0008 */ unsigned __int64 m_mask;
}; /* size: 0x0010 */

class SystemAffinityEnum
{
  /* 0x0000 */ const class SystemAffinity* m_pAffinity;
  /* 0x0008 */ class BitEnum<unsigned __int64> m_bitEnum;
  /* 0x0018 */ unsigned short m_currentGroup;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 7,
  NDynamic = 10,
  NVld = 8,
  VldEddOffset = 1,
  BufSize = 69,
} TAG_UNNAMED_358, *PTAG_UNNAMED_358;

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  fragment_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_359, *PTAG_UNNAMED_359;

typedef struct _MEMORYSTATUSEX
{
  /* 0x0000 */ unsigned long dwLength;
  /* 0x0004 */ unsigned long dwMemoryLoad;
  /* 0x0008 */ unsigned __int64 ullTotalPhys;
  /* 0x0010 */ unsigned __int64 ullAvailPhys;
  /* 0x0018 */ unsigned __int64 ullTotalPageFile;
  /* 0x0020 */ unsigned __int64 ullAvailPageFile;
  /* 0x0028 */ unsigned __int64 ullTotalVirtual;
  /* 0x0030 */ unsigned __int64 ullAvailVirtual;
  /* 0x0038 */ unsigned __int64 ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *PMEMORYSTATUSEX; /* size: 0x0040 */

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_360, *PTAG_UNNAMED_360;

struct ISynchronizeEvent
{
}; /* size: 0x0008 */

typedef enum
{
  ASSOCF_INIT_NOREMAPCLSID = 1,
  ASSOCF_INIT_BYEXENAME = 2,
  ASSOCF_OPEN_BYEXENAME = 2,
  ASSOCF_INIT_DEFAULTTOSTAR = 4,
  ASSOCF_INIT_DEFAULTTOFOLDER = 8,
  ASSOCF_NOUSERSETTINGS = 16,
  ASSOCF_NOTRUNCATE = 32,
  ASSOCF_VERIFY = 64,
  ASSOCF_REMAPRUNDLL = 128,
  ASSOCF_NOFIXUPS = 256,
  ASSOCF_IGNOREBASECLASS = 512,
  ASSOCF_INIT_IGNOREUNKNOWN = 1024,
} TAG_UNNAMED_361, *PTAG_UNNAMED_361;

typedef struct _RTL_MODULE_BASIC_INFO
{
  /* 0x0000 */ void* ImageBase;
} RTL_MODULE_BASIC_INFO, *PRTL_MODULE_BASIC_INFO; /* size: 0x0008 */

typedef struct _RTL_MODULE_EXTENDED_INFO
{
  /* 0x0000 */ struct _RTL_MODULE_BASIC_INFO BasicInfo;
  /* 0x0008 */ unsigned long ImageSize;
  /* 0x000c */ unsigned short FileNameOffset;
  /* 0x000e */ unsigned char FullPathName[256];
  /* 0x010e */ char __PADDING__[2];
} RTL_MODULE_EXTENDED_INFO, *PRTL_MODULE_EXTENDED_INFO; /* size: 0x0110 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_362, *PTAG_UNNAMED_362;

class XE_AutoP<XEPackage0::XE_LiveTarget>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_363, *PTAG_UNNAMED_363;

typedef enum _USER_ACTIVITY_PRESENCE
{
  PowerUserPresent = 0,
  PowerUserNotPresent = 1,
  PowerUserInactive = 2,
  PowerUserMaximum = 3,
  PowerUserInvalid = 3,
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;

typedef enum
{
  database_idIdx = 0,
  cloud_partition_idIdx = 1,
  is_forwarder_or_secondaryIdx = 2,
  xact_csnIdx = 3,
  xact_epochIdx = 4,
  xact_commit_time_sourceIdx = 5,
  app_nameIdx = 6,
  tablegroup_nameIdx = 7,
  low_keyIdx = 8,
  high_keyIdx = 9,
  LastField = 10,
} TAG_UNNAMED_364, *PTAG_UNNAMED_364;

enum TASK_FLAGS
{
  TASK_DELAY_ABORT = 1,
  TASK_DO_NOT_DEADLOCK = 2,
  TASK_IN_EXCEPTION_BACKOUT = 4,
  TASK_ALLOW_PREMATURE_WAKEUP = 8,
  TASK_USE_RESERVEDMEMORY = 32,
  TASK_DO_NOT_SUSPEND = 64,
  TASK_PREVENT_IDLE = 128,
  TASK_ALLOW_IDLE = 256,
  TASK_IN_EXTERNAL_CODE = 512,
  TASK_NON_BLOCKING = 1024,
  TASK_MOVING_CLOCK_HAND = 2048,
  TASK_NO_MEMORY_FAILURE_MODE = 4096,
};

class Spinlock<96,11,1>
{
}; /* size: 0x0004 */

enum XEThreadType
{
  XETT_DISPATCHER = 0,
  XETT_TIMER = 1,
  XETT_LAST = 2,
};

struct _TP_CALLBACK_INSTANCE;

enum tag_WBEM_PROVIDER_FLAGS
{
  WBEM_FLAG_OWNER_UPDATE = 0x10000,
};

enum std::io_errc::io_errc
{
  stream = 1,
};

typedef union _userHPALETTE::__MIDL_IWinTypes_0008
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct tagLOGPALETTE* hRemote;
    /* 0x0000 */ __int64 hInproc64;
  }; /* size: 0x0008 */
} userHPALETTE::__MIDL_IWinTypes_0008, *PuserHPALETTE::__MIDL_IWinTypes_0008; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  local_brick_idIdx = 1,
  remote_brick_idIdx = 2,
  request_typeIdx = 3,
  database_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_365, *PTAG_UNNAMED_365;

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_366, *PTAG_UNNAMED_366;

class XE_AutoP<XE_LogDeserializedPackage>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 52,
} TAG_UNNAMED_367, *PTAG_UNNAMED_367;

struct tagCHARSETINFO
{
  /* 0x0000 */ unsigned int ciCharset;
  /* 0x0004 */ unsigned int ciACP;
  /* 0x0008 */ struct tagFONTSIGNATURE fs;
}; /* size: 0x0020 */

enum tag_WBEM_LOCKING
{
  WBEM_FLAG_ALLOW_READ = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 45,
} TAG_UNNAMED_368, *PTAG_UNNAMED_368;

typedef enum
{
  task_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_369, *PTAG_UNNAMED_369;

struct IUrlMon
{
}; /* size: 0x0008 */

enum tagSTDMSHLFLAGS
{
  SMEXF_SERVER = 1,
  SMEXF_HANDLER = 2,
};

typedef struct _GENERIC_MAPPING
{
  /* 0x0000 */ unsigned long GenericRead;
  /* 0x0004 */ unsigned long GenericWrite;
  /* 0x0008 */ unsigned long GenericExecute;
  /* 0x000c */ unsigned long GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING; /* size: 0x0010 */

typedef struct _SYSTEM_OBJECTTYPE_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long NumberOfObjects;
  /* 0x0008 */ unsigned long NumberOfHandles;
  /* 0x000c */ unsigned long TypeIndex;
  /* 0x0010 */ unsigned long InvalidAttributes;
  /* 0x0014 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0024 */ unsigned long ValidAccessMask;
  /* 0x0028 */ unsigned long PoolType;
  /* 0x002c */ unsigned char SecurityRequired;
  /* 0x002d */ unsigned char WaitableObject;
  /* 0x002e */ char Padding_134[2];
  /* 0x0030 */ struct _UNICODE_STRING TypeName;
} SYSTEM_OBJECTTYPE_INFORMATION, *PSYSTEM_OBJECTTYPE_INFORMATION; /* size: 0x0040 */

enum WakeUpReason
{
  WAKEUP_SCHEDULING = 0,
  WAKEUP_MEMORY = 1,
  WAKEUP_TIMER = 2,
  WAKEUP_MISC = 3,
  WAKEUP_IDLE = 4,
};

struct XE_TArray<XEDataAttribute,15>
{
  /* 0x0000 */ struct XEDataAttribute m_array[15];
}; /* size: 0x0258 */

struct XE_TEvent<4,0,15>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,15> m_dynamicAttr;
  /* 0x0300 */ struct XEEvent m_event;
}; /* size: 0x0348 */

class XeSqlPkg::hobt_schema_mgr_allocation_unit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,15> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_135[140];
      /* 0x0240 */ unsigned char m_buf[66];
    }; /* size: 0x0052 */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int allocation_unitOffset;
    /* 0x0000 */ const int au_fg_idOffset;
    /* 0x0000 */ const int au_first_file_idOffset;
    /* 0x0000 */ const int au_first_page_idOffset;
    /* 0x0000 */ const int au_root_file_idOffset;
    /* 0x0000 */ const int au_root_page_idOffset;
    /* 0x0000 */ const int au_iam_file_idOffset;
    /* 0x0000 */ const int au_iam_page_idOffset;
    /* 0x0000 */ const int page_count_leafOffset;
    /* 0x0000 */ const int page_count_usedOffset;
    /* 0x0000 */ const int page_count_reservedOffset;
  }; /* size: 0x0348 */
}; /* size: 0x0288 */

typedef enum
{
  sequence_numberIdx = 0,
  scan_generationIdx = 1,
  message_sizeIdx = 2,
  root_idIdx = 3,
  transaction_idIdx = 4,
  directory_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_370, *PTAG_UNNAMED_370;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 35,
} TAG_UNNAMED_371, *PTAG_UNNAMED_371;

typedef struct _PROCESS_MITIGATION_ASLR_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long EnableStackRandomization : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long EnableForceRelocateImages : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long EnableHighEntropy : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long DisallowStrippedImages : 1; /* bit position: 3 */
      /* 0x0000 */ unsigned long ReservedFlags : 28; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY; /* size: 0x0004 */

enum tagOLEWHICHMK
{
  OLEWHICHMK_CONTAINER = 1,
  OLEWHICHMK_OBJREL = 2,
  OLEWHICHMK_OBJFULL = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 27,
} TAG_UNNAMED_372, *PTAG_UNNAMED_372;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_373, *PTAG_UNNAMED_373;

enum tag_WBEM_STATUS_TYPE
{
  WBEM_STATUS_COMPLETE = 0,
  WBEM_STATUS_REQUIREMENTS = 1,
  WBEM_STATUS_PROGRESS = 2,
  WBEM_STATUS_LOGGING_INFORMATION = 256,
  WBEM_STATUS_LOGGING_INFORMATION_PROVIDER = 512,
  WBEM_STATUS_LOGGING_INFORMATION_HOST = 1024,
  WBEM_STATUS_LOGGING_INFORMATION_REPOSITORY = 2048,
  WBEM_STATUS_LOGGING_INFORMATION_ESS = 4096,
};

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_374, *PTAG_UNNAMED_374;

typedef struct _COORD
{
  /* 0x0000 */ short X;
  /* 0x0002 */ short Y;
} COORD, *PCOORD; /* size: 0x0004 */

typedef struct _CONSOLE_SELECTION_INFO
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ struct _COORD dwSelectionAnchor;
  /* 0x0008 */ struct _SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO; /* size: 0x0010 */

enum TraceFlagsSizes
{
  SOS_MIN_DEBUG_TRACE_FLAG = 300,
  SOS_MAX_DEBUG_TRACE_FLAG = 399,
  SOS_MIN_RETAIL_TRACE_FLAG = 6500,
  SOS_MAX_RETAIL_TRACE_FLAG = 8199,
};

struct tagPALETTEENTRY
{
  /* 0x0000 */ unsigned char peRed;
  /* 0x0001 */ unsigned char peGreen;
  /* 0x0002 */ unsigned char peBlue;
  /* 0x0003 */ unsigned char peFlags;
}; /* size: 0x0004 */

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  LastField = 2,
} TAG_UNNAMED_375, *PTAG_UNNAMED_375;

struct tagLASTINPUTINFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwTime;
}; /* size: 0x0008 */

class XE_StreamCompare<char,XEPackage0::StringCompare<char,2>,1>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ const char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_376, *PTAG_UNNAMED_376;

enum XEGetAPIOption
{
  XEGAO_SEARCH = 0,
  XEGAO_DO_NOT_SEARCH = 1,
};

struct std::_Pair_base<unsigned __int64 *,unsigned __int64 *>
{
  /* 0x0000 */ unsigned __int64* first;
  /* 0x0008 */ unsigned __int64* second;
}; /* size: 0x0010 */

typedef struct _M128
{
  /* 0x0000 */ unsigned __int64 Low;
  /* 0x0008 */ __int64 High;
} M128, *PM128; /* size: 0x0010 */

struct tagSOUNDSENTRYW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long iFSTextEffect;
  /* 0x000c */ unsigned long iFSTextEffectMSec;
  /* 0x0010 */ unsigned long iFSTextEffectColorBits;
  /* 0x0014 */ unsigned long iFSGrafEffect;
  /* 0x0018 */ unsigned long iFSGrafEffectMSec;
  /* 0x001c */ unsigned long iFSGrafEffectColor;
  /* 0x0020 */ unsigned long iWindowsEffect;
  /* 0x0024 */ unsigned long iWindowsEffectMSec;
  /* 0x0028 */ wchar_t* lpszWindowsEffectDLL;
  /* 0x0030 */ unsigned long iWindowsEffectOrdinal;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

enum MemoryWorkSpaces
{
  MEMORY_WORKSPACE_STARTUP = 0,
  MEMORY_WORKSPACE_MEMCLERKS = 0,
  MEMORY_WORKSPACE_BUFFERPOOL = 0,
  MEMORY_WORKSPACE_CACHES = 0,
  MEMORY_WORKSPACE_QE = 0,
  MEMORY_WORKSPACE_LAST = 1,
};

struct SOS_MemoryManager::AddressInfo
{
  /* 0x0000 */ enum AllocatorType m_allocatorType;
  /* 0x0004 */ unsigned short m_numaNodeId;
  /* 0x0006 */ char Padding_136[2];
  /* 0x0008 */ enum MemoryWorkSpaces m_workSpaceId;
  /* 0x000c */ unsigned long m_poolId;
  /* 0x0010 */ unsigned __int64 m_userData;
}; /* size: 0x0018 */

enum XEEngineCustomizationFlags
{
  XEEF_NONE = 0,
  XEEF_UNIQUE_SESSION_NAMESSPACE = 1,
  XEEF_SINGLE_DISPATCHER = 2,
  XEEF_TERMINATE_DISPATCHER_IMMEDIATE = 4,
  XEEF_DISABLE_TIME_ADJUSTMENT = 8,
  XEEF_UNIQUE_SESSION_NAMESSPACE_BY_TAG = 16,
  XEEF_DEFAULT = 0,
  XEEF_ALL = 31,
};

struct XE_TArray<XEDataAttribute,16>
{
  /* 0x0000 */ struct XEDataAttribute m_array[16];
}; /* size: 0x0280 */

struct XE_TEvent<4,2,16>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,16> m_dynamicAttr;
  /* 0x0390 */ struct XEEvent m_event;
}; /* size: 0x03d8 */

class XeSqlPkg::lock_redo_blocked
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_137[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 18,
  NVld = 2,
  VldEddOffset = 15,
  BufSize = 89,
} TAG_UNNAMED_377, *PTAG_UNNAMED_377;

enum SchedEnumType
{
  ONLINE_NORMAL = 16,
  ONLINE_HIDDEN = 32,
  OFFLINE_NORMAL = 64,
  OFFLINE_HIDDEN = 128,
  ALL_ONLINE = 48,
  ALL_OFFLINE = 192,
  ALL_NORMAL = 80,
  ALL_HIDDEN = 160,
  ALL_SCHEDULERS = 240,
};

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_138;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >* m_pList;
}; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  stateIdx = 2,
  modeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_378, *PTAG_UNNAMED_378;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_379, *PTAG_UNNAMED_379;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 30,
} TAG_UNNAMED_380, *PTAG_UNNAMED_380;

struct tagEMRGRADIENTFILL
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long nVer;
  /* 0x001c */ unsigned long nTri;
  /* 0x0020 */ unsigned long ulMode;
  /* 0x0024 */ struct _TRIVERTEX Ver[1];
}; /* size: 0x0034 */

enum tagRPCOPT_PROPERTIES
{
  COMBND_RPCTIMEOUT = 1,
  COMBND_SERVER_LOCALITY = 2,
};

class XE_MetadataFilter
{
  /* 0x0000 */ class XE_AutoP<XE_PackageFilter> m_filters[1024];
}; /* size: 0x2000 */

class XE_SessionMetadata
{
  /* 0x0000 */ long Padding_139[2];
  /* 0x0008 */ class XE_MetadataFilter m_mdFilter;
}; /* size: 0x2008 */

class XE_MetadataTracker
{
  /* 0x0000 */ class XE_IBufferWriter* m_BufferWriter;
  /* 0x0008 */ struct XE_LogDefaultMetadataHeader m_MetadataHeader;
  /* 0x001c */ long Padding_140;
  /* 0x0020 */ class XE_SessionMetadata m_fullMetadata;
  /* 0x2028 */ class XE_SessionMetadata m_incrementalMetadata;
  /* 0x4030 */ void* m_hSess;
  /* 0x4038 */ class XE_AutoResource<void *,136> m_lock;
  /* 0x4040 */ void* m_hNotification;
  /* 0x4048 */ int m_transferMemoryOwnership;
}; /* size: 0x4050 */

class XEPackage0::XE_FileTarget
{
  /* 0x0000 */ long Padding_141[4];
  /* 0x0010 */ class XE_AutoP<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > > m_logWriter;
  /* 0x0018 */ class XE_MetadataTracker m_metadataTracker;
  /* 0x4068 */ unsigned int m_failuresRecorded;
  /* 0x406c */ long Padding_142;
  /* 0x4070 */ class XE_ErrorContext m_ErrorContext;
}; /* size: 0x4078 */

typedef enum _EXCEPTION_DISPOSITION
{
  ExceptionContinueExecution = 0,
  ExceptionContinueSearch = 1,
  ExceptionNestedException = 2,
  ExceptionCollidedUnwind = 3,
} EXCEPTION_DISPOSITION, *PEXCEPTION_DISPOSITION;

struct XE_TArray<XEDataAttribute,5>
{
  /* 0x0000 */ struct XEDataAttribute m_array[5];
}; /* size: 0x00c8 */

struct XE_TEvent<4,0,5>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,5> m_dynamicAttr;
  /* 0x0170 */ struct XEEvent m_event;
}; /* size: 0x01b8 */

class XeSqlPkg::ioaff_scan_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_143[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int dopOffset;
    /* 0x0000 */ const int file_countOffset;
    /* 0x0000 */ const int max_range_lengthOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

struct tagEXTLOGPEN
{
  /* 0x0000 */ unsigned long elpPenStyle;
  /* 0x0004 */ unsigned long elpWidth;
  /* 0x0008 */ unsigned int elpBrushStyle;
  /* 0x000c */ unsigned long elpColor;
  /* 0x0010 */ unsigned __int64 elpHatch;
  /* 0x0018 */ unsigned long elpNumEntries;
  /* 0x001c */ unsigned long elpStyleEntry[1];
}; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  ghost_typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_381, *PTAG_UNNAMED_381;

struct tagHANDLETABLE
{
  /* 0x0000 */ void* objectHandle[1];
}; /* size: 0x0008 */

enum WORKER_TYPE
{
  WORKER_FIBER = 0,
  WORKER_THREAD = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_382, *PTAG_UNNAMED_382;

typedef enum
{
  database_idIdx = 0,
  files_deletedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_383, *PTAG_UNNAMED_383;

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_384, *PTAG_UNNAMED_384;

class Spinlock<136,4,1>
{
}; /* size: 0x0004 */

enum tag_WBEM_BATCH_TYPE
{
  WBEM_FLAG_BATCH_IF_NEEDED = 0,
  WBEM_FLAG_MUST_BATCH = 1,
  WBEM_FLAG_MUST_NOT_BATCH = 2,
};

typedef struct _IMAGE_THUNK_DATA32
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned long ForwarderString;
      /* 0x0000 */ unsigned long Function;
      /* 0x0000 */ unsigned long Ordinal;
      /* 0x0000 */ unsigned long AddressOfData;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
} IMAGE_THUNK_DATA32, *PIMAGE_THUNK_DATA32; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 40,
} TAG_UNNAMED_385, *PTAG_UNNAMED_385;

struct IWbemDecoupledBasicEventProvider
{
}; /* size: 0x0008 */

enum SOSHOST_IOCHECK
{
  SOSHOST_IOCHECK_FAST = 0,
  SOSHOST_IOCHECK_ALL = 1,
  SOSHOST_IOCHECK_LAST = 2,
};

struct IAsyncManager
{
}; /* size: 0x0008 */

enum CallStackHashTable::StackHashPersistMode
{
  SKIPLASTHASH = 0,
  INCLUDELASTHASH = 1,
};

class CallStackHashTable
{
  union
  {
    /* 0x0000 */ long m_cCallStacksInHashTable;
    /* 0x0000 */ const unsigned long HASH_TABLE_ELEMENTS;
    /* 0x0000 */ const int NUM_TABLE_FRAGMENTS;
    /* 0x0000 */ const unsigned long HASH_FRAGMENT_ELEMENTS;
    /* 0x0000 */ const unsigned long HASH_FRAGMENT_SIZE;
    /* 0x0000 */ const int NUM_HASH_FUNCTIONS;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_144;
  /* 0x0008 */ unsigned long* m_hashBitFragments[128];
  /* 0x0408 */ void* m_hStackFile;
  /* 0x0410 */ int m_fPersistenceInited;
  /* 0x0414 */ enum CallStackHashTable::StackHashPersistMode m_persistenceMode;
  /* 0x0418 */ volatile long m_initStatus;
}; /* size: 0x0420 */

enum XEGetAPIResult
{
  XEGAR_FOUND_COMPATIBLE_API = 0,
  XEGAR_NOCOMPATIBLE_API_FOUND = 1,
  XEGAR_ERROR = 2,
  XEGAR_NOENGINE_FOUND = 3,
  XEGAR_EXPORT_NOT_ACQUIRED = 4,
};

enum tagSTREAM_SEEK
{
  STREAM_SEEK_SET = 0,
  STREAM_SEEK_CUR = 1,
  STREAM_SEEK_END = 2,
};

class AESCheck
{
}; /* size: 0x0001 */

typedef enum
{
  sequence_numberIdx = 0,
  scan_generationIdx = 1,
  message_sizeIdx = 2,
  transfer_typeIdx = 3,
  log_block_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_386, *PTAG_UNNAMED_386;

typedef struct _SERVICE_RUNLEVEL_INFO
{
  /* 0x0000 */ unsigned long eLowestRunLevel;
} SERVICE_RUNLEVEL_INFO, *PSERVICE_RUNLEVEL_INFO; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 48,
} TAG_UNNAMED_387, *PTAG_UNNAMED_387;

struct tagUPDATELAYEREDWINDOWINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_145;
  /* 0x0008 */ struct HDC__* hdcDst;
  /* 0x0010 */ const struct tagPOINT* pptDst;
  /* 0x0018 */ const struct tagSIZE* psize;
  /* 0x0020 */ struct HDC__* hdcSrc;
  /* 0x0028 */ const struct tagPOINT* pptSrc;
  /* 0x0030 */ unsigned long crKey;
  /* 0x0034 */ long Padding_146;
  /* 0x0038 */ const struct _BLENDFUNCTION* pblend;
  /* 0x0040 */ unsigned long dwFlags;
  /* 0x0044 */ long Padding_147;
  /* 0x0048 */ const struct tagRECT* prcDirty;
}; /* size: 0x0050 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_388, *PTAG_UNNAMED_388;

typedef enum
{
  test_pointIdx = 0,
  test_value1Idx = 1,
  test_value2Idx = 2,
  group_idIdx = 3,
  replica_idIdx = 4,
  ag_database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_389, *PTAG_UNNAMED_389;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 5,
} TAG_UNNAMED_390, *PTAG_UNNAMED_390;

struct AsyncIMultiQI
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_391, *PTAG_UNNAMED_391;

enum WbemTextFlagEnum
{
  wbemTextFlagNoFlavors = 1,
};

enum tagCALLTYPE
{
  CALLTYPE_TOPLEVEL = 1,
  CALLTYPE_NESTED = 2,
  CALLTYPE_ASYNC = 3,
  CALLTYPE_TOPLEVEL_CALLPENDING = 4,
  CALLTYPE_ASYNC_CALLPENDING = 5,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 17,
} TAG_UNNAMED_392, *PTAG_UNNAMED_392;

enum SOSHOST_CAPABILITIES
{
  NON_PREEMPTIVE = 1,
  CACHE_STORES = 2,
  ABORTABLE_TASKS = 4,
  PAGE_ALLOCATION = 8,
  MEMORY_NOTIFICATION = 16,
  TASK_CALLBACKS = 32,
  AFFINITY_CALLBACKS = 64,
  SOSHOST_MINCAPABILITIES = 0,
  SOSHOST_ALLCAPABILITIES = 127,
};

typedef enum _STREAM_INFO_LEVELS
{
  FindStreamInfoStandard = 0,
  FindStreamInfoMaxInfoLevel = 1,
} STREAM_INFO_LEVELS, *PSTREAM_INFO_LEVELS;

typedef enum _tagPSUACTION
{
  PSU_DEFAULT = 1,
  PSU_SECURITY_URL_ONLY = 2,
} tagPSUACTION, *PtagPSUACTION;

typedef struct _ACE_HEADER
{
  /* 0x0000 */ unsigned char AceType;
  /* 0x0001 */ unsigned char AceFlags;
  /* 0x0002 */ unsigned short AceSize;
} ACE_HEADER, *PACE_HEADER; /* size: 0x0004 */

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE; /* size: 0x000c */

class DumpTListIterator<PoolList,512>
{
}; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  start_log_block_idIdx = 1,
  is_read_aheadIdx = 2,
  private_consumer_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_393, *PTAG_UNNAMED_393;

class MemObjCache<CMemObj>
{
  /* 0x0000 */ long Padding_148[68];
  /* 0x0110 */ void* m_cacheEntryDescriptor;
  /* 0x0118 */ class CostInfo m_costInfo;
}; /* size: 0x0160 */

enum SOS_WaitInfo::Reporting
{
  REPORT_ALWAYS = 0,
  REPORT_CLOUDDB = 1,
  REPORT_OPTIONAL = 2,
  REPORT_UNUSED = 3,
};

class XeSqlPkg::process_invalidate_cache_logrec
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_149[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int cache_typeOffset;
    /* 0x0000 */ const int keysOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

enum DBEVENTPHASEENUM
{
  DBEVENTPHASE_OKTODO = 0,
  DBEVENTPHASE_ABOUTTODO = 1,
  DBEVENTPHASE_SYNCHAFTER = 2,
  DBEVENTPHASE_FAILEDTODO = 3,
  DBEVENTPHASE_DIDEVENT = 4,
};

typedef struct _FILE_INTEGRITY_STREAM_INFORMATION
{
  /* 0x0000 */ unsigned short ChecksumAlgorithm;
  /* 0x0002 */ unsigned char ChecksumChunkShift;
  /* 0x0003 */ unsigned char ClusterShift;
  /* 0x0004 */ unsigned long Flags;
} FILE_INTEGRITY_STREAM_INFORMATION, *PFILE_INTEGRITY_STREAM_INFORMATION; /* size: 0x0008 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  eventIdx = 4,
  actionIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_394, *PTAG_UNNAMED_394;

class DumpSEListIterator<SEList<SOS_ResourcePool,0>,512>
{
}; /* size: 0x0020 */

enum XeSqlPkg::scan_started::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

class CAutoRefc<IXMLDOMNamedNodeMap>
{
  /* 0x0000 */ struct IXMLDOMNamedNodeMap* m_pt;
}; /* size: 0x0008 */

typedef enum _ENLISTMENT_INFORMATION_CLASS
{
  EnlistmentBasicInformation = 0,
  EnlistmentRecoveryInformation = 1,
  EnlistmentCrmInformation = 2,
} ENLISTMENT_INFORMATION_CLASS, *PENLISTMENT_INFORMATION_CLASS;

struct ITypeComp
{
}; /* size: 0x0008 */

struct SEReplCSNSLock
{
}; /* size: 0x0004 */

enum tagOLEGETMONIKER
{
  OLEGETMONIKER_ONLYIFTHERE = 1,
  OLEGETMONIKER_FORCEASSIGN = 2,
  OLEGETMONIKER_UNASSIGN = 3,
  OLEGETMONIKER_TEMPFORUSER = 4,
};

struct TFormatterTypesPolicy<CMemBufFormatter>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_395, *PTAG_UNNAMED_395;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_396, *PTAG_UNNAMED_396;

struct std::pair<XE_FileSet::Entry *,XE_FileSet::Entry *>
{
}; /* size: 0x0010 */

enum tagOLEVERBATTRIB
{
  OLEVERBATTRIB_NEVERDIRTIES = 1,
  OLEVERBATTRIB_ONCONTAINERMENU = 2,
};

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ unsigned long ulFormatVersion;
  /* 0x0008 */ unsigned long ulAssemblyCount;
  /* 0x000c */ unsigned long ulRootManifestPathType;
  /* 0x0010 */ unsigned long ulRootManifestPathChars;
  /* 0x0014 */ unsigned long ulRootConfigurationPathType;
  /* 0x0018 */ unsigned long ulRootConfigurationPathChars;
  /* 0x001c */ unsigned long ulAppDirPathType;
  /* 0x0020 */ unsigned long ulAppDirPathChars;
  /* 0x0024 */ long Padding_150;
  /* 0x0028 */ const wchar_t* lpRootManifestPath;
  /* 0x0030 */ const wchar_t* lpRootConfigurationPath;
  /* 0x0038 */ const wchar_t* lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION; /* size: 0x0040 */

enum ACTCTX_REQUESTED_RUN_LEVEL
{
  ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
  ACTCTX_RUN_LEVEL_AS_INVOKER = 1,
  ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2,
  ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3,
  ACTCTX_RUN_LEVEL_NUMBERS = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_397, *PTAG_UNNAMED_397;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_398, *PTAG_UNNAMED_398;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_399, *PTAG_UNNAMED_399;

typedef enum _HARDWARE_COUNTER_TYPE
{
  PMCCounter = 0,
  MaxHardwareCounterType = 1,
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;

class MemObjCache<CMemDbg<CMemObj> >
{
  /* 0x0000 */ long Padding_151[312];
  /* 0x04e0 */ void* m_cacheEntryDescriptor;
  /* 0x04e8 */ class CostInfo m_costInfo;
}; /* size: 0x0530 */

enum WORKER_STATE
{
  WORKER_STATE_INIT = 0,
  WORKER_STATE_RUNNING = 1,
  WORKER_STATE_RUNNABLE = 2,
  WORKER_STATE_SUSPENDED = 3,
  WORKER_STATE_LAST = 4,
};

struct IGetRow
{
}; /* size: 0x0008 */

enum XeSqlPkg::query_post_execution_showplan::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

class Spinlock<15,19,1>
{
}; /* size: 0x0004 */

struct IAuthenticate
{
}; /* size: 0x0008 */

typedef enum _JOURNAL_CHANGE_INFORMATION_CLASS
{
  JournalCreateKey = 0,
  JournalDeleteKey = 1,
  JournalRenameKey = 2,
  JournalSetValue = 3,
  JournalDeleteValue = 4,
  JournalSetKeySecurity = 5,
  JournalSetKeyUserFlags = 6,
  JournalSetLastWriteTime = 7,
  JournalBeginTransaction = 8,
  JournalCommitTransaction = 9,
  JournalAbortTransaction = 10,
  MaxJournalChangeAction = 11,
} JOURNAL_CHANGE_INFORMATION_CLASS, *PJOURNAL_CHANGE_INFORMATION_CLASS;

typedef struct _JOURNAL_RENAME_KEY_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_152;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _UNICODE_STRING KeyPathName;
  /* 0x0028 */ struct _UNICODE_STRING KeyKeyName;
} JOURNAL_RENAME_KEY_INFORMATION, *PJOURNAL_RENAME_KEY_INFORMATION; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_400, *PTAG_UNNAMED_400;

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_401, *PTAG_UNNAMED_401;

struct tagACCEL
{
  /* 0x0000 */ unsigned char fVirt;
  /* 0x0001 */ char Padding_153;
  /* 0x0002 */ unsigned short key;
  /* 0x0004 */ unsigned short cmd;
}; /* size: 0x0006 */

class XeSqlPkg::broker_conversation_group
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_154[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int conversation_group_actionOffset;
    /* 0x0000 */ const int conversation_group_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

enum tagExtentMode
{
  DVEXTENT_CONTENT = 0,
  DVEXTENT_INTEGRAL = 1,
};

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_402, *PTAG_UNNAMED_402;

class XE_ResolvedObject<XEEvent>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEEvent* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEEvent* m_Object;
}; /* size: 0x0020 */

enum tagREGKIND
{
  REGKIND_DEFAULT = 0,
  REGKIND_REGISTER = 1,
  REGKIND_NONE = 2,
};

typedef enum
{
  new_transaction_startedIdx = 0,
  statementIdx = 1,
  LastField = 2,
} TAG_UNNAMED_403, *PTAG_UNNAMED_403;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 17,
} TAG_UNNAMED_404, *PTAG_UNNAMED_404;

enum SOS_WaitInfo::Group
{
  LOCKMGR = 0,
  MISC = 64,
  UPWAIT = 512,
  LATCH = 1024,
  SOSHOST = 2048,
  PREEMPTIVE = 8192,
  NETWORK = 16384,
  NETWORKDEADLOCK = 0xffff8000,
};

class TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

enum tagOLECONTF
{
  OLECONTF_EMBEDDINGS = 1,
  OLECONTF_LINKS = 2,
  OLECONTF_OTHERS = 4,
  OLECONTF_ONLYUSER = 8,
  OLECONTF_ONLYIFRUNNING = 16,
};

typedef enum
{
  sectors_movedIdx = 0,
  sectors_clearedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_405, *PTAG_UNNAMED_405;

class XE_AutoRg<XE_FileSet::Entry>
{
}; /* size: 0x0008 */

typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE
{
  LowMemoryResourceNotification = 0,
  HighMemoryResourceNotification = 1,
  PendingBadMemoryNotification = 2,
} MEMORY_RESOURCE_NOTIFICATION_TYPE, *PMEMORY_RESOURCE_NOTIFICATION_TYPE;

struct HMETAFILE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_406, *PTAG_UNNAMED_406;

typedef enum
{
  ddl_actionIdx = 0,
  ddl_phaseIdx = 1,
  statementIdx = 2,
  availability_group_idIdx = 3,
  availability_group_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_407, *PTAG_UNNAMED_407;

enum OSF_Tracing::OSF_TRACE_FLAGS
{
  OSF_TRACE_VERBOSE_OUTPUT = 1,
  OSF_TRACE_CLASSES_ONLY = 2,
};

enum XEEventCapabilities
{
  XEEC_NO_ACTIONS = 1,
  XEEC_NO_PREDICATES = 2,
  XEEC_NOBLOCK = 4,
  XEEC_DEFAULT = 0,
};

struct tagAXISINFOA
{
  /* 0x0000 */ long axMinValue;
  /* 0x0004 */ long axMaxValue;
  /* 0x0008 */ unsigned char axAxisName[16];
}; /* size: 0x0018 */

struct XEErrorContext
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ unsigned short m_packageId;
  /* 0x0004 */ unsigned short m_error;
  /* 0x0006 */ char Padding_155[2];
  /* 0x0008 */ unsigned int m_parameter;
  /* 0x000c */ long Padding_156;
  /* 0x0010 */ wchar_t* m_pMessage;
  /* 0x0018 */ unsigned int m_cchMessage;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class XE_AutoErrorContext
{
  /* 0x0000 */ struct XEErrorContext m_ErrorContext;
}; /* size: 0x0020 */

enum tagCTRLINFO
{
  CTRLINFO_EATS_RETURN = 1,
  CTRLINFO_EATS_ESCAPE = 2,
};

typedef enum _THDTYPE
{
  THDTYPE_BLOCKMESSAGES = 0,
  THDTYPE_PROCESSMESSAGES = 1,
} THDTYPE, *PTHDTYPE;

typedef struct _SE_LEARNING_MODE_USER_OBJECT_DATA
{
  /* 0x0000 */ unsigned long Cookie;
  /* 0x0004 */ long Padding_157;
  /* 0x0008 */ struct _UNICODE_STRING* ObjectType;
  /* 0x0010 */ struct _UNICODE_STRING* ObjectName;
} SE_LEARNING_MODE_USER_OBJECT_DATA, *PSE_LEARNING_MODE_USER_OBJECT_DATA; /* size: 0x0018 */

typedef enum
{
  config_filenameIdx = 0,
  LastField = 1,
} TAG_UNNAMED_408, *PTAG_UNNAMED_408;

typedef struct _PDH_RAW_COUNTER
{
  /* 0x0000 */ volatile unsigned long CStatus;
  /* 0x0004 */ struct _FILETIME TimeStamp;
  /* 0x000c */ long Padding_158;
  /* 0x0010 */ __int64 FirstValue;
  /* 0x0018 */ __int64 SecondValue;
  /* 0x0020 */ unsigned long MultiCount;
  /* 0x0024 */ long __PADDING__[1];
} PDH_RAW_COUNTER, *PPDH_RAW_COUNTER; /* size: 0x0028 */

typedef struct _IMAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned char Name[8];
  union
  {
    union
    {
      /* 0x0008 */ unsigned long PhysicalAddress;
      /* 0x0008 */ unsigned long VirtualSize;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Misc;
  /* 0x000c */ unsigned long VirtualAddress;
  /* 0x0010 */ unsigned long SizeOfRawData;
  /* 0x0014 */ unsigned long PointerToRawData;
  /* 0x0018 */ unsigned long PointerToRelocations;
  /* 0x001c */ unsigned long PointerToLinenumbers;
  /* 0x0020 */ unsigned short NumberOfRelocations;
  /* 0x0022 */ unsigned short NumberOfLinenumbers;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER; /* size: 0x0028 */

enum tagVIEWSTATUS
{
  VIEWSTATUS_OPAQUE = 1,
  VIEWSTATUS_SOLIDBKGND = 2,
  VIEWSTATUS_DVASPECTOPAQUE = 4,
  VIEWSTATUS_DVASPECTTRANSPARENT = 8,
  VIEWSTATUS_SURFACE = 16,
  VIEWSTATUS_3DSURFACE = 32,
};

struct tagRemHMETAFILEPICT
{
  /* 0x0000 */ long mm;
  /* 0x0004 */ long xExt;
  /* 0x0008 */ long yExt;
  /* 0x000c */ unsigned long cbData;
  /* 0x0010 */ unsigned char data[1];
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_409, *PTAG_UNNAMED_409;

enum XETargetCapabilities
{
  XETC_PROCESSBUFFERS = 1,
  XETC_SINGLETON = 2,
  XETC_SYNCHRONOUS = 4,
  XETC_DEFAULT = 0,
};

typedef enum
{
  database_idIdx = 0,
  policy_typeIdx = 1,
  leading_cols_numIdx = 2,
  LastField = 3,
} TAG_UNNAMED_410, *PTAG_UNNAMED_410;

typedef struct _MIDL_SERVER_INFO_
{
  /* 0x0000 */ const struct _MIDL_STUB_DESC* pStubDesc;
  /* 0x0008 */ void* const* DispatchTable /* function */;
  /* 0x0010 */ const unsigned char* ProcString;
  /* 0x0018 */ const unsigned short* FmtStringOffset;
  /* 0x0020 */ void* const* ThunkTable /* function */;
  /* 0x0028 */ struct _RPC_SYNTAX_IDENTIFIER* pTransferSyntax;
  /* 0x0030 */ unsigned __int64 nCount;
  /* 0x0038 */ struct _MIDL_SYNTAX_INFO* pSyntaxInfo;
} MIDL_SERVER_INFO_, *PMIDL_SERVER_INFO_; /* size: 0x0040 */

enum tag_WBEM_LIMITATION_FLAG_TYPE
{
  WBEM_FLAG_EXCLUDE_OBJECT_QUALIFIERS = 16,
  WBEM_FLAG_EXCLUDE_PROPERTY_QUALIFIERS = 32,
};

struct tagLOGFONTA
{
  /* 0x0000 */ long lfHeight;
  /* 0x0004 */ long lfWidth;
  /* 0x0008 */ long lfEscapement;
  /* 0x000c */ long lfOrientation;
  /* 0x0010 */ long lfWeight;
  /* 0x0014 */ unsigned char lfItalic;
  /* 0x0015 */ unsigned char lfUnderline;
  /* 0x0016 */ unsigned char lfStrikeOut;
  /* 0x0017 */ unsigned char lfCharSet;
  /* 0x0018 */ unsigned char lfOutPrecision;
  /* 0x0019 */ unsigned char lfClipPrecision;
  /* 0x001a */ unsigned char lfQuality;
  /* 0x001b */ unsigned char lfPitchAndFamily;
  /* 0x001c */ char lfFaceName[32];
}; /* size: 0x003c */

struct TransmitterConnectSLock
{
}; /* size: 0x0004 */

enum DBPOSITIONFLAGSENUM
{
  DBPOSITION_OK = 0,
  DBPOSITION_NOROW = 1,
  DBPOSITION_BOF = 2,
  DBPOSITION_EOF = 3,
};

struct ISWbemEventSource
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_411, *PTAG_UNNAMED_411;

typedef enum _HEAP_INFORMATION_CLASS
{
  HeapCompatibilityInformation = 0,
  HeapEnableTerminationOnCorruption = 1,
} HEAP_INFORMATION_CLASS, *PHEAP_INFORMATION_CLASS;

typedef enum
{
  thread_idIdx = 0,
  request_typeIdx = 1,
  message_opcodeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_412, *PTAG_UNNAMED_412;

class SpinlockHolder<198,3,1>;

enum tag_WBEM_BACKUP_RESTORE_FLAGS
{
  WBEM_FLAG_BACKUP_RESTORE_DEFAULT = 0,
  WBEM_FLAG_BACKUP_RESTORE_FORCE_SHUTDOWN = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 10,
} TAG_UNNAMED_413, *PTAG_UNNAMED_413;

struct tagEMRTEXT
{
  /* 0x0000 */ struct _POINTL ptlReference;
  /* 0x0008 */ unsigned long nChars;
  /* 0x000c */ unsigned long offString;
  /* 0x0010 */ unsigned long fOptions;
  /* 0x0014 */ struct _RECTL rcl;
  /* 0x0024 */ unsigned long offDx;
}; /* size: 0x0028 */

typedef enum
{
  DYNAMIC = 1,
  ADDRESS64 = 2,
  NOENLARGE = 4,
  RAX = 8,
  SIB = 16,
  RIP = 32,
  NOTSIB = 15,
} TAG_UNNAMED_414, *PTAG_UNNAMED_414;

enum tag_WBEM_CONNECT_OPTIONS
{
  WBEM_FLAG_CONNECT_REPOSITORY_ONLY = 64,
  WBEM_FLAG_CONNECT_USE_MAX_WAIT = 128,
  WBEM_FLAG_CONNECT_PROVIDERS = 256,
};

enum XEBufferPartitionOption
{
  XEBPO_AUTO_PARTITION = 0,
  XEBPO_MANUAL_PARTITION = 1,
};

typedef struct _ACCESS_REASONS
{
  /* 0x0000 */ unsigned long Data[32];
} ACCESS_REASONS, *PACCESS_REASONS; /* size: 0x0080 */

class PackageProperty
{
  /* 0x0000 */ unsigned long m_Keywords;
  /* 0x0004 */ long Padding_159;
  /* 0x0008 */ unsigned __int64 m_RegTraceHandle;
  /* 0x0010 */ struct _GUID m_PackageId;
  /* 0x0020 */ unsigned __int64 m_SessionHandle;
  /* 0x0028 */ unsigned long m_MaxBufferSize;
  /* 0x002c */ long Padding_160;
  /* 0x0030 */ void* m_Context;
}; /* size: 0x0038 */

class XEPackage0::XE_ETWTarget
{
  /* 0x0000 */ long Padding_161[2];
  /* 0x0008 */ wchar_t m_defaultLogFile[260];
  /* 0x0210 */ unsigned int m_defaultETWSessionBufferSize;
  /* 0x0214 */ unsigned int m_defaultETWSessionLogFileSize;
  /* 0x0218 */ wchar_t m_defaultXESessionName[256];
  /* 0x0418 */ unsigned int m_maxRetry;
  /* 0x041c */ long Padding_162;
  /* 0x0420 */ void* m_notificationSlot;
  /* 0x0428 */ class PackageProperty m_packageProperties[1024];
  /* 0xe428 */ unsigned __int64 m_etwSessionHandle;
  /* 0xe430 */ unsigned long m_sessionCreateResult;
  /* 0xe434 */ long Padding_163;
  /* 0xe438 */ void* m_lock;
  /* 0xe440 */ int m_isAlive;
  /* 0xe444 */ int m_deferedEtw;
  /* 0xe448 */ class XEPackage0::XE_ETWBufferDispenser m_bufferDispenser;
}; /* size: 0x10d840 */

enum tagEXTCONN
{
  EXTCONN_STRONG = 1,
  EXTCONN_WEAK = 2,
  EXTCONN_CALLABLE = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_415, *PTAG_UNNAMED_415;

struct tagBSTRBLOB
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_164;
  /* 0x0008 */ unsigned char* pData;
}; /* size: 0x0010 */

typedef enum _POWER_REQUEST_TYPE
{
  PowerRequestDisplayRequired = 0,
  PowerRequestSystemRequired = 1,
  PowerRequestAwayModeRequired = 2,
  PowerRequestExecutionRequired = 3,
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;

struct threadmbcinfostruct;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_416, *PTAG_UNNAMED_416;

class std::numeric_limits<char>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct tagBLOB
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_165;
  /* 0x0008 */ unsigned char* pBlobData;
}; /* size: 0x0010 */

struct XEPackage0::DividesByPredicateComparator
{
}; /* size: 0x0001 */

enum tagAspectInfoFlag
{
  DVASPECTINFOFLAG_CANOPTIMIZE = 1,
};

struct XE_TArray<XEDataAttribute,11>
{
  /* 0x0000 */ struct XEDataAttribute m_array[11];
}; /* size: 0x01b8 */

struct XE_TEvent<4,0,11>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,11> m_dynamicAttr;
  /* 0x0260 */ struct XEEvent m_event;
}; /* size: 0x02a8 */

class XeSqlPkg::hadr_transport_dump_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_166[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int operation_reasonOffset;
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int acknowledgment_numberOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_log_idOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int target_availability_replica_idOffset;
    /* 0x0000 */ const int connection_session_idOffset;
    /* 0x0000 */ const int database_replica_idOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0290 */

typedef enum
{
  event_idIdx = 0,
  user_infoIdx = 1,
  user_dataIdx = 2,
  LastField = 3,
} TAG_UNNAMED_417, *PTAG_UNNAMED_417;

typedef enum
{
  sgam_fileIdx = 0,
  sgam_pageIdx = 1,
  start_file_idIdx = 2,
  start_page_idIdx = 3,
  database_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_418, *PTAG_UNNAMED_418;

class XE_StreamReader
{
  /* 0x0000 */ unsigned short m_packageId;
  /* 0x0002 */ char Padding_167[6];
  /* 0x0008 */ void* m_hStream;
}; /* size: 0x0010 */

enum tagREGCLS
{
  REGCLS_SINGLEUSE = 0,
  REGCLS_MULTIPLEUSE = 1,
  REGCLS_MULTI_SEPARATE = 2,
  REGCLS_SUSPENDED = 4,
  REGCLS_SURROGATE = 8,
};

typedef struct _PROCESSOR_POWER_POLICY_INFO
{
  /* 0x0000 */ unsigned long TimeCheck;
  /* 0x0004 */ unsigned long DemoteLimit;
  /* 0x0008 */ unsigned long PromoteLimit;
  /* 0x000c */ unsigned char DemotePercent;
  /* 0x000d */ unsigned char PromotePercent;
  /* 0x000e */ unsigned char Spare[2];
  struct /* bitfield */
  {
    /* 0x0010 */ unsigned long AllowDemotion : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned long AllowPromotion : 1; /* bit position: 1 */
    /* 0x0010 */ unsigned long Reserved : 30; /* bit position: 2 */
  }; /* bitfield */
} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO; /* size: 0x0014 */

enum FILEITEM_CREATION_FLAGS
{
  FICF_DEFAULT = 0,
  FICF_DELETE_NOT_ALLOWED_IF_CONTAINER = 1,
  FICF_ALLOW_NAMESPACE_JUNCTION = 2,
  FICF_ADVANCED_SHAPES_ALLOWED = 4,
  FICF_FILTER_ON_MANIFESTED_TYPES = 8,
  FICF_FILTER_ON_MANIFESTED_KINDS = 16,
  FICF_INHERITED_FLAGS_MASK = 28,
  FICF_DONT_CHECK_PATH_FOR_EXISTENCE = 32,
};

typedef enum
{
  schema_mgr_database_idIdx = 0,
  hobt_idIdx = 1,
  rowset_idIdx = 2,
  rowgroup_idIdx = 3,
  rows_per_colsegmentIdx = 4,
  LastField = 5,
} TAG_UNNAMED_419, *PTAG_UNNAMED_419;

typedef struct _MENU_EVENT_RECORD
{
  /* 0x0000 */ unsigned int dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD; /* size: 0x0004 */

enum tag_WBEM_COMPARISON_FLAG
{
  WBEM_COMPARISON_INCLUDE_ALL = 0,
  WBEM_FLAG_IGNORE_QUALIFIERS = 1,
  WBEM_FLAG_IGNORE_OBJECT_SOURCE = 2,
  WBEM_FLAG_IGNORE_DEFAULT_VALUES = 4,
  WBEM_FLAG_IGNORE_CLASS = 8,
  WBEM_FLAG_IGNORE_CASE = 16,
  WBEM_FLAG_IGNORE_FLAVOR = 32,
};

typedef struct _LUID_AND_ATTRIBUTES
{
  /* 0x0000 */ struct _LUID Luid;
  /* 0x0008 */ unsigned long Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES; /* size: 0x000c */

typedef struct _PRIVILEGE_SET
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ unsigned long Control;
  /* 0x0008 */ struct _LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET; /* size: 0x0014 */

class TTemplateInfo<2400,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

typedef enum
{
  sequence_numberIdx = 0,
  scan_generationIdx = 1,
  message_sizeIdx = 2,
  root_idIdx = 3,
  eol_requestedIdx = 4,
  file_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_420, *PTAG_UNNAMED_420;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_421, *PTAG_UNNAMED_421;

typedef enum _RPC_NOTIFICATION_TYPES
{
  RpcNotificationTypeNone = 0,
  RpcNotificationTypeEvent = 1,
  RpcNotificationTypeApc = 2,
  RpcNotificationTypeIoc = 3,
  RpcNotificationTypeHwnd = 4,
  RpcNotificationTypeCallback = 5,
} RPC_NOTIFICATION_TYPES, *PRPC_NOTIFICATION_TYPES;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE
{
  ToleranceLow = 1,
  ToleranceMedium = 2,
  ToleranceHigh = 3,
} JOBOBJECT_RATE_CONTROL_TOLERANCE, *PJOBOBJECT_RATE_CONTROL_TOLERANCE;

enum CSerializeContext<CMemBufFormatter>::EMBEDDED_MODES
{
  NOT_EMBEDDED = 0,
  EMBEDDED_NOCOMPILEROFFSET = 1,
  EMBEDDED_ADDCOMPILEROFFSET = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 40,
} TAG_UNNAMED_422, *PTAG_UNNAMED_422;

enum SYSNLS_FUNCTION
{
  COMPARE_STRING = 1,
};

struct IMalloc
{
}; /* size: 0x0008 */

enum IMAGE_AUX_SYMBOL_TYPE
{
  IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 48,
} TAG_UNNAMED_423, *PTAG_UNNAMED_423;

typedef enum _FIRMWARE_TYPE
{
  FirmwareTypeUnknown = 0,
  FirmwareTypeBios = 1,
  FirmwareTypeUefi = 2,
  FirmwareTypeMax = 3,
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 18,
  NVld = 10,
  VldEddOffset = 7,
  BufSize = 106,
} TAG_UNNAMED_424, *PTAG_UNNAMED_424;

struct tagEMRSTRETCHDIBITS
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long xSrc;
  /* 0x0024 */ long ySrc;
  /* 0x0028 */ long cxSrc;
  /* 0x002c */ long cySrc;
  /* 0x0030 */ unsigned long offBmiSrc;
  /* 0x0034 */ unsigned long cbBmiSrc;
  /* 0x0038 */ unsigned long offBitsSrc;
  /* 0x003c */ unsigned long cbBitsSrc;
  /* 0x0040 */ unsigned long iUsageSrc;
  /* 0x0044 */ unsigned long dwRop;
  /* 0x0048 */ long cxDest;
  /* 0x004c */ long cyDest;
}; /* size: 0x0050 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 48,
} TAG_UNNAMED_425, *PTAG_UNNAMED_425;

struct ISWbemQualifierSet
{
}; /* size: 0x0008 */

typedef enum
{
  statementIdx = 0,
  LastField = 1,
} TAG_UNNAMED_426, *PTAG_UNNAMED_426;

enum tagRPCOPT_SERVER_LOCALITY_VALUES
{
  SERVER_LOCALITY_PROCESS_LOCAL = 0,
  SERVER_LOCALITY_MACHINE_LOCAL = 1,
  SERVER_LOCALITY_REMOTE = 2,
};

typedef struct _PROCESSOR_POWER_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ unsigned char DynamicThrottle;
  /* 0x0005 */ unsigned char Spare[3];
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long DisableCStates : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long Reserved : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x000c */ unsigned long PolicyCount;
  /* 0x0010 */ struct _PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY; /* size: 0x004c */

enum tag_WBEM_GENUS_TYPE
{
  WBEM_GENUS_CLASS = 1,
  WBEM_GENUS_INSTANCE = 2,
};

struct tagCAC
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_168;
  /* 0x0008 */ char* pElems;
}; /* size: 0x0010 */

struct IMAGE_AUX_SYMBOL_TOKEN_DEF
{
  /* 0x0000 */ unsigned char bAuxType;
  /* 0x0001 */ unsigned char bReserved;
  /* 0x0002 */ unsigned long SymbolTableIndex;
  /* 0x0006 */ unsigned char rgbReserved[12];
}; /* size: 0x0012 */

typedef union _IMAGE_AUX_SYMBOL_EX
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long WeakDefaultSymIndex;
      /* 0x0004 */ unsigned long WeakSearchType;
      /* 0x0008 */ unsigned char rgbReserved[12];
    } /* size: 0x0014 */ Sym;
    struct
    {
      /* 0x0000 */ unsigned char Name[20];
    } /* size: 0x0014 */ File;
    struct
    {
      /* 0x0000 */ unsigned long Length;
      /* 0x0004 */ unsigned short NumberOfRelocations;
      /* 0x0006 */ unsigned short NumberOfLinenumbers;
      /* 0x0008 */ unsigned long CheckSum;
      /* 0x000c */ short Number;
      /* 0x000e */ unsigned char Selection;
      /* 0x000f */ unsigned char bReserved;
      /* 0x0010 */ short HighNumber;
      /* 0x0012 */ unsigned char rgbReserved[2];
    } /* size: 0x0014 */ Section;
    struct
    {
      /* 0x0000 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
      /* 0x0012 */ unsigned char rgbReserved[2];
    }; /* size: 0x0014 */
    struct
    {
      /* 0x0000 */ unsigned long crc;
      /* 0x0004 */ unsigned char rgbReserved[16];
    } /* size: 0x0014 */ CRC;
  }; /* size: 0x0014 */
} IMAGE_AUX_SYMBOL_EX, *PIMAGE_AUX_SYMBOL_EX; /* size: 0x0014 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_427, *PTAG_UNNAMED_427;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_428, *PTAG_UNNAMED_428;

class DmpPointer<TList<SchedulerManager,Worker,16,TListSLock> >
{
  /* 0x0000 */ class TList<SchedulerManager,Worker,16,TListSLock>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  file_handleIdx = 0,
  succeededIdx = 1,
  LastField = 2,
} TAG_UNNAMED_429, *PTAG_UNNAMED_429;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_430, *PTAG_UNNAMED_430;

struct tagACTCTX_SECTION_KEYED_DATA_2600
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long ulDataFormatVersion;
  /* 0x0008 */ void* lpData;
  /* 0x0010 */ unsigned long ulLength;
  /* 0x0014 */ long Padding_169;
  /* 0x0018 */ void* lpSectionGlobalData;
  /* 0x0020 */ unsigned long ulSectionGlobalDataLength;
  /* 0x0024 */ long Padding_170;
  /* 0x0028 */ void* lpSectionBase;
  /* 0x0030 */ unsigned long ulSectionTotalLength;
  /* 0x0034 */ long Padding_171;
  /* 0x0038 */ void* hActCtx;
  /* 0x0040 */ unsigned long ulAssemblyRosterIndex;
  /* 0x0044 */ long __PADDING__[1];
}; /* size: 0x0048 */

typedef enum _ACL_INFORMATION_CLASS
{
  AclRevisionInformation = 1,
  AclSizeInformation = 2,
} ACL_INFORMATION_CLASS, *PACL_INFORMATION_CLASS;

typedef struct _RTL_CONDITION_VARIABLE
{
  /* 0x0000 */ void* Ptr;
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE; /* size: 0x0008 */

class FiberScheduler
{
  /* 0x0000 */ long Padding_172[15398];
  /* 0xf098 */ void* m_ctxtPreempt;
  /* 0xf0a0 */ class SystemThread* m_pSpareSysThread;
}; /* size: 0xf0b0 */

enum XEPredicateResult
{
  XEPR_ERROR = -1,
  XEPR_FALSE = 0,
  XEPR_TRUE = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 8,
  VldEddOffset = 8,
  BufSize = 102,
} TAG_UNNAMED_431, *PTAG_UNNAMED_431;

struct BitOrdinal<1>
{
}; /* size: 0x0001 */

typedef enum
{
  manager_idIdx = 0,
  manager_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_432, *PTAG_UNNAMED_432;

enum tagSERVERCALL
{
  SERVERCALL_ISHANDLED = 0,
  SERVERCALL_REJECTED = 1,
  SERVERCALL_RETRYLATER = 2,
};

struct IWbemObjectSink
{
}; /* size: 0x0008 */

typedef enum _MONITOR_DISPLAY_STATE
{
  PowerMonitorOff = 0,
  PowerMonitorOn = 1,
  PowerMonitorDim = 2,
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_433, *PTAG_UNNAMED_433;

struct SC_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class ExtIntCodeProtector<0>
{
  /* 0x0000 */ int m_inExternalCode;
}; /* size: 0x0004 */

enum WbemQueryFlagEnum
{
  wbemQueryFlagDeep = 0,
  wbemQueryFlagShallow = 1,
  wbemQueryFlagPrototype = 2,
};

typedef enum
{
  average_throughputIdx = 0,
  average_writes_per_secondIdx = 1,
  checkpoint_rate_mbIdx = 2,
  checkpoint_rate_iopsIdx = 3,
  database_idIdx = 4,
  checkpoint_durationIdx = 5,
  LastField = 6,
} TAG_UNNAMED_434, *PTAG_UNNAMED_434;

enum CGlobalTraceFlags::FlagKind
{
  FLAG_RETAIL = 1,
  FLAG_DEBUG = 2,
  FLAG_TEMP = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 2,
} TAG_UNNAMED_435, *PTAG_UNNAMED_435;

struct tagAXISINFOW
{
  /* 0x0000 */ long axMinValue;
  /* 0x0004 */ long axMaxValue;
  /* 0x0008 */ wchar_t axAxisName[16];
}; /* size: 0x0028 */

typedef enum
{
  channel_map_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_436, *PTAG_UNNAMED_436;

enum tagBIND_FLAGS
{
  BIND_MAYBOTHERUSER = 1,
  BIND_JUSTTESTEXISTENCE = 2,
};

class TCallbackListBase<TCallback<void,SOS_Task *,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

struct IClassFactory2
{
}; /* size: 0x0008 */

enum tagOLEUPDATE
{
  OLEUPDATE_ALWAYS = 1,
  OLEUPDATE_ONCALL = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 6,
  VldEddOffset = 1,
  BufSize = 58,
} TAG_UNNAMED_437, *PTAG_UNNAMED_437;

enum XEPredicateSourceCapabilities
{
  XEPSC_DEFAULT = 0,
};

enum tagGUIDKIND
{
  GUIDKIND_DEFAULT_SOURCE_DISP_IID = 1,
};

typedef enum
{
  accessorIdx = 0,
  LastField = 1,
} TAG_UNNAMED_438, *PTAG_UNNAMED_438;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 15,
  NVld = 0,
  VldEddOffset = 14,
  BufSize = 18,
} TAG_UNNAMED_439, *PTAG_UNNAMED_439;

enum CLUSTER_CONTROL_OBJECT
{
  CLUS_OBJECT_INVALID = 0,
  CLUS_OBJECT_RESOURCE = 1,
  CLUS_OBJECT_RESOURCE_TYPE = 2,
  CLUS_OBJECT_GROUP = 3,
  CLUS_OBJECT_NODE = 4,
  CLUS_OBJECT_NETWORK = 5,
  CLUS_OBJECT_NETINTERFACE = 6,
  CLUS_OBJECT_CLUSTER = 7,
  CLUS_OBJECT_USER = 128,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 13,
} TAG_UNNAMED_440, *PTAG_UNNAMED_440;

class Spinlock<226,2,1>
{
}; /* size: 0x0004 */

struct IOleInPlaceUIWindow
{
}; /* size: 0x0008 */

enum WbemTimeout
{
  wbemTimeoutInfinite = -1,
};

struct tagTYPEATTR
{
  /* 0x0000 */ struct _GUID guid;
  /* 0x0010 */ unsigned long lcid;
  /* 0x0014 */ unsigned long dwReserved;
  /* 0x0018 */ long memidConstructor;
  /* 0x001c */ long memidDestructor;
  /* 0x0020 */ wchar_t* lpstrSchema;
  /* 0x0028 */ unsigned long cbSizeInstance;
  /* 0x002c */ enum tagTYPEKIND typekind;
  /* 0x0030 */ unsigned short cFuncs;
  /* 0x0032 */ unsigned short cVars;
  /* 0x0034 */ unsigned short cImplTypes;
  /* 0x0036 */ unsigned short cbSizeVft;
  /* 0x0038 */ unsigned short cbAlignment;
  /* 0x003a */ unsigned short wTypeFlags;
  /* 0x003c */ unsigned short wMajorVerNum;
  /* 0x003e */ unsigned short wMinorVerNum;
  /* 0x0040 */ struct tagTYPEDESC tdescAlias;
  /* 0x0050 */ struct tagIDLDESC idldescType;
}; /* size: 0x0060 */

typedef enum
{
  remote_versionIdx = 0,
  remote_portIdx = 1,
  remote_cluster_nameIdx = 2,
  remote_server_nameIdx = 3,
  remote_app_nameIdx = 4,
  remote_table_group_nameIdx = 5,
  remote_low_keyIdx = 6,
  remote_high_keyIdx = 7,
  LastField = 8,
} TAG_UNNAMED_441, *PTAG_UNNAMED_441;

typedef enum _TOKEN_TYPE
{
  TokenPrimary = 1,
  TokenImpersonation = 2,
} TOKEN_TYPE, *PTOKEN_TYPE;

enum XeSqlPkg::rpc_completed::CustomizableSlots
{
  collect_statementSlot = 0,
  collect_data_streamSlot = 1,
  collect_output_parametersSlot = 2,
};

class XE_AutoRg<XMLColumnTransformRule>
{
}; /* size: 0x0008 */

typedef enum
{
  MinMemoryStatusDumpInterval = 0x1d4c0,
  MinExternalCachePercent = 5,
} TAG_UNNAMED_442, *PTAG_UNNAMED_442;

class XeSqlPkg::query_scan_cache
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

enum tag_WBEM_TEXT_FLAG_TYPE
{
  WBEM_FLAG_NO_FLAVORS = 1,
};

typedef struct _FILE_PIPE_LOCAL_INFORMATION
{
  /* 0x0000 */ unsigned long NamedPipeType;
  /* 0x0004 */ unsigned long NamedPipeConfiguration;
  /* 0x0008 */ unsigned long MaximumInstances;
  /* 0x000c */ unsigned long CurrentInstances;
  /* 0x0010 */ unsigned long InboundQuota;
  /* 0x0014 */ unsigned long ReadDataAvailable;
  /* 0x0018 */ unsigned long OutboundQuota;
  /* 0x001c */ unsigned long WriteQuotaAvailable;
  /* 0x0020 */ unsigned long NamedPipeState;
  /* 0x0024 */ unsigned long NamedPipeEnd;
} FILE_PIPE_LOCAL_INFORMATION, *PFILE_PIPE_LOCAL_INFORMATION; /* size: 0x0028 */

typedef enum
{
  thread_idIdx = 0,
  statusIdx = 1,
  actionIdx = 2,
  LastField = 3,
} TAG_UNNAMED_443, *PTAG_UNNAMED_443;

class StreamCDATAReader<unsigned short,XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >
{
  /* 0x0000 */ const class XE_Xml<XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >* m_pXml;
  /* 0x0008 */ class XStringXmlBuilder& m_sbuf;
  /* 0x0010 */ unsigned char m_buffer[5120];
  /* 0x1410 */ int m_firstRead;
}; /* size: 0x1418 */

class ReturnValueHolder<long>
{
  /* 0x0000 */ HRESULT m_returnValue;
}; /* size: 0x0004 */

enum tagOLELINKBIND
{
  OLELINKBIND_EVENIFCLASSDIFF = 1,
};

enum CLUSTER_RESOURCE_TYPE_ENUM
{
  CLUSTER_RESOURCE_TYPE_ENUM_NODES = 1,
  CLUSTER_RESOURCE_TYPE_ENUM_RESOURCES = 2,
  CLUSTER_RESOURCE_TYPE_ENUM_ALL = 3,
};

struct XE_TCollection<1,0>::TCol<0>
{
}; /* size: 0x0001 */

struct tagMOUSEINPUT
{
  /* 0x0000 */ long dx;
  /* 0x0004 */ long dy;
  /* 0x0008 */ unsigned long mouseData;
  /* 0x000c */ unsigned long dwFlags;
  /* 0x0010 */ unsigned long time;
  /* 0x0014 */ long Padding_173;
  /* 0x0018 */ unsigned __int64 dwExtraInfo;
}; /* size: 0x0020 */

struct tagKEYBDINPUT
{
  /* 0x0000 */ unsigned short wVk;
  /* 0x0002 */ unsigned short wScan;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long time;
  /* 0x000c */ long Padding_174;
  /* 0x0010 */ unsigned __int64 dwExtraInfo;
}; /* size: 0x0018 */

struct tagINPUT
{
  /* 0x0000 */ unsigned long type;
  /* 0x0004 */ long Padding_175;
  union
  {
    /* 0x0008 */ struct tagMOUSEINPUT mi;
    /* 0x0008 */ struct tagKEYBDINPUT ki;
    struct
    {
      /* 0x0008 */ struct tagHARDWAREINPUT hi;
      /* 0x0010 */ long __PADDING__[6];
    }; /* size: 0x0020 */
  }; /* size: 0x0020 */
}; /* size: 0x0028 */

typedef enum __MIDL_IInternetSecurityManager_0003
{
  SZM_CREATE = 0,
  SZM_DELETE = 1,
} _MIDL_IInternetSecurityManager_0003, *P_MIDL_IInternetSecurityManager_0003;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_444, *PTAG_UNNAMED_444;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 30,
} TAG_UNNAMED_445, *PTAG_UNNAMED_445;

struct IOleParentUndoUnit
{
}; /* size: 0x0008 */

enum WbemObjectTextFormatEnum
{
  wbemObjectTextFormatCIMDTD20 = 1,
  wbemObjectTextFormatWMIDTD20 = 2,
};

struct tagEXTLOGFONTA
{
  /* 0x0000 */ struct tagLOGFONTA elfLogFont;
  /* 0x003c */ unsigned char elfFullName[64];
  /* 0x007c */ unsigned char elfStyle[32];
  /* 0x009c */ unsigned long elfVersion;
  /* 0x00a0 */ unsigned long elfStyleSize;
  /* 0x00a4 */ unsigned long elfMatch;
  /* 0x00a8 */ unsigned long elfReserved;
  /* 0x00ac */ unsigned char elfVendorId[4];
  /* 0x00b0 */ unsigned long elfCulture;
  /* 0x00b4 */ struct tagPANOSE elfPanose;
  /* 0x00be */ char __PADDING__[2];
}; /* size: 0x00c0 */

enum CLCTL_CODES
{
  CLCTL_UNKNOWN = 0,
  CLCTL_GET_CHARACTERISTICS = 5,
  CLCTL_GET_FLAGS = 9,
  CLCTL_GET_CLASS_INFO = 13,
  CLCTL_GET_REQUIRED_DEPENDENCIES = 17,
  CLCTL_GET_ARB_TIMEOUT = 21,
  CLCTL_GET_FAILURE_INFO = 25,
  CLCTL_GET_NAME = 41,
  CLCTL_GET_RESOURCE_TYPE = 45,
  CLCTL_GET_NODE = 49,
  CLCTL_GET_NETWORK = 53,
  CLCTL_GET_ID = 57,
  CLCTL_GET_FQDN = 61,
  CLCTL_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 65,
  CLCTL_CHECK_VOTER_EVICT = 69,
  CLCTL_CHECK_VOTER_DOWN = 73,
  CLCTL_SHUTDOWN = 77,
  CLCTL_ENUM_COMMON_PROPERTIES = 81,
  CLCTL_GET_RO_COMMON_PROPERTIES = 85,
  CLCTL_GET_COMMON_PROPERTIES = 89,
  CLCTL_SET_COMMON_PROPERTIES = 0x40005e,
  CLCTL_VALIDATE_COMMON_PROPERTIES = 97,
  CLCTL_GET_COMMON_PROPERTY_FMTS = 101,
  CLCTL_GET_COMMON_RESOURCE_PROPERTY_FMTS = 105,
  CLCTL_ENUM_PRIVATE_PROPERTIES = 121,
  CLCTL_GET_RO_PRIVATE_PROPERTIES = 125,
  CLCTL_GET_PRIVATE_PROPERTIES = 129,
  CLCTL_SET_PRIVATE_PROPERTIES = 0x400086,
  CLCTL_VALIDATE_PRIVATE_PROPERTIES = 137,
  CLCTL_GET_PRIVATE_PROPERTY_FMTS = 141,
  CLCTL_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 145,
  CLCTL_ADD_REGISTRY_CHECKPOINT = 0x4000a2,
  CLCTL_DELETE_REGISTRY_CHECKPOINT = 0x4000a6,
  CLCTL_GET_REGISTRY_CHECKPOINTS = 169,
  CLCTL_ADD_CRYPTO_CHECKPOINT = 0x4000ae,
  CLCTL_DELETE_CRYPTO_CHECKPOINT = 0x4000b2,
  CLCTL_GET_CRYPTO_CHECKPOINTS = 181,
  CLCTL_RESOURCE_UPGRADE_DLL = 0x4000ba,
  CLCTL_ADD_REGISTRY_CHECKPOINT_64BIT = 0x4000be,
  CLCTL_ADD_REGISTRY_CHECKPOINT_32BIT = 0x4000c2,
  CLCTL_GET_LOADBAL_PROCESS_LIST = 201,
  CLCTL_GET_NETWORK_NAME = 361,
  CLCTL_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 365,
  CLCTL_NETNAME_REGISTER_DNS_RECORDS = 370,
  CLCTL_GET_DNS_NAME = 373,
  CLCTL_NETNAME_SET_PWD_INFO = 378,
  CLCTL_NETNAME_DELETE_CO = 382,
  CLCTL_NETNAME_VALIDATE_VCO = 385,
  CLCTL_NETNAME_RESET_VCO = 389,
  CLCTL_NETNAME_CREDS_UPDATED = 0xc0018a,
  CLCTL_NETNAME_SHARED_ONLINE = 0xc0018e,
  CLCTL_STORAGE_GET_DISK_INFO = 401,
  CLCTL_STORAGE_GET_AVAILABLE_DISKS = 405,
  CLCTL_STORAGE_IS_PATH_VALID = 409,
  CLCTL_STORAGE_SYNC_CLUSDISK_DB = 0x40019e,
  CLCTL_QUERY_DELETE = 441,
  CLCTL_IPADDRESS_RENEW_LEASE = 0x4001be,
  CLCTL_IPADDRESS_RELEASE_LEASE = 0x4001c2,
  CLCTL_QUERY_MAINTENANCE_MODE = 481,
  CLCTL_SET_MAINTENANCE_MODE = 0x4001e6,
  CLCTL_STORAGE_SET_DRIVELETTER = 0x4001ea,
  CLCTL_STORAGE_GET_DRIVELETTERS = 493,
  CLCTL_STORAGE_GET_DISK_INFO_EX = 497,
  CLCTL_STORAGE_GET_AVAILABLE_DISKS_EX = 501,
  CLCTL_STORAGE_REMAP_DRIVELETTER = 513,
  CLCTL_STORAGE_GET_DISKID = 517,
  CLCTL_STORAGE_IS_CLUSTERABLE = 521,
  CLCTL_STORAGE_REMOVE_VM_OWNERSHIP = 0x40020e,
  CLCTL_STORAGE_GET_MOUNTPOINTS = 529,
  CLCTL_STORAGE_CLUSTER_DISK = 0xc00212,
  CLCTL_STORAGE_GET_DIRTY = 537,
  CLCTL_STORAGE_GET_SHARED_VOLUME_INFO = 549,
  CLCTL_STORAGE_IS_CSV_FILE = 553,
  CLCTL_STORAGE_GET_RESOURCEID = 557,
  CLCTL_VALIDATE_PATH = 561,
  CLCTL_VALIDATE_NETNAME = 565,
  CLCTL_VALIDATE_DIRECTORY = 569,
  CLCTL_BATCH_BLOCK_KEY = 574,
  CLCTL_BATCH_UNBLOCK_KEY = 577,
  CLCTL_FILESERVER_SHARE_ADD = 0x400246,
  CLCTL_FILESERVER_SHARE_DEL = 0x40024a,
  CLCTL_FILESERVER_SHARE_MODIFY = 0x40024e,
  CLCTL_FILESERVER_SHARE_REPORT = 593,
  CLCTL_ENABLE_SHARED_VOLUME_DIRECTIO = 0x40028a,
  CLCTL_DISABLE_SHARED_VOLUME_DIRECTIO = 0x40028e,
  CLCTL_GET_SHARED_VOLUME_ID = 657,
  CLCTL_SET_CSV_MAINTENANCE_MODE = 0x400296,
  CLCTL_SET_SHARED_VOLUME_BACKUP_MODE = 0x40029a,
  CLCTL_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 669,
  CLCTL_STORAGE_GET_SHARED_VOLUME_STATES = 0x4002a2,
  CLCTL_STORAGE_IS_SHARED_VOLUME = 677,
  CLCTL_GET_CLUSDB_TIMESTAMP = 681,
  CLCTL_DNN_GET_LEADER_STATUS = 8001,
  CLCTL_DNN_SEND_LEADER_STATUS = 0xc01f46,
  CLCTL_DNN_UPDATE_SODAFS_CLONE_STATUS = 0x401f4a,
  CLCTL_FILESERVER_LEADER_ONLINE_BCAST = 0x801f4e,
  CLCTL_FILESERVER_LEADER_ONLINE = 8018,
  CLCTL_FILESERVER_LEADER_OFFLINE_BCAST = 0x801f56,
  CLCTL_FILESERVER_CLONE_READY = 8025,
  CLCTL_FILESERVER_SHARE_REFRESH_BCAST = 0xc01f5e,
  CLCTL_FILESERVER_ENABLE_SCOPE = 8034,
  CLCTL_FILESERVER_INVALIDATION_REQUEST = 8038,
  CLCTL_CSV_SW_PROVIDER_EVENT = 0x401f6a,
  CLCTL_STORAGE_CSV_UPDATE_INFO = 0x401f6e,
  CLCTL_CSV_INITIATE_CHKDSK_SPOTFIX = 0x401f72,
  CLCTL_NETNAME_SEND_IP_INFO_FOR_MULTICHANNEL = 0xc01f76,
  CLCTL_STORAGE_POOL_CLUSTER_POOL = 0x401f7a,
  CLCTL_RESOURCE_GET_POOL_SUMMARY_INFO = 0x401f7e,
  CLCTL_RESOURCE_GET_POOL_INTERNAL_STATE = 0x401f82,
  CLCTL_RESOURCE_NOTIFY_POOL = 0x401f86,
  CLCTL_RESOURCE_POOL_REFRESH_ALL = 8078,
  CLCTL_RESOURCE_REFRESH_POOL = 8081,
  CLCTL_RESOURCE_RELEASE_POOL = 8085,
  CLCTL_RESOURCE_ACQUIRE_POOL = 8089,
  CLCTL_RESOURCE_POOL_GET_PRKEY = 8093,
  CLCTL_RESOURCE_RELEASE_PR = 8097,
  CLCTL_RESOURCE_POOL_CLUSTER_SERVICE_STARTED = 8101,
  CLCTL_RESOURCE_TAKE_DEFENSE = 8105,
  CLCTL_RESOURCE_GET_RELATED_RESOURCE_NAMES = 8109,
  CLCTL_RESOURCE_POOL_DETACH_SPACE = 8114,
  CLCTL_TASKSCHEDULER_TASK_CREATE = 0x401fb6,
  CLCTL_TASKSCHEDULER_TASK_CHANGE = 0x401fba,
  CLCTL_TASKSCHEDULER_TASK_DELETE = 0x401fbe,
  CLCTL_TASKSCHEDULER_TASK_GET = 8129,
  CLCTL_TASKSCHEDULER_TASK_CHECK_EXISTS = 8133,
  CLCTL_TASKSCHEDULER_TASK_CREATE_TS_V1 = 0x401fca,
  CLCTL_TASKSCHEDULER_TASK_CHANGE_TS_V1 = 0x401fce,
  CLCTL_TASKSCHEDULER_TASK_DELETE_TS_V1 = 0x401fd2,
  CLCTL_TASKSCHEDULER_TASK_GET_TS_V1 = 8149,
  CLCTL_GET_UTILIZATION_INFO = 8153,
  CLCTL_GET_LOCAL_NODE_UTILIZATION_INFO = 8157,
  CLCTL_STORAGE_GET_AVAILABLE_DISKS_3 = 8161,
  CLCTL_STORAGE_GET_AVAILABLE_DISKS_GLOBAL_3 = 8165,
  CLCTL_GET_PLACEMENT_DIRECTOR = 8170,
  CLCTL_RW_MODIFY_NOOP = 0x401fee,
  CLCTL_RESOURCE_POOL_REFRESH = 8178,
  CLCTL_DELETE = 0x500006,
  CLCTL_INSTALL_NODE = 0x50000a,
  CLCTL_EVICT_NODE = 0x50000e,
  CLCTL_ADD_DEPENDENCY = 0x500012,
  CLCTL_REMOVE_DEPENDENCY = 0x500016,
  CLCTL_ADD_OWNER = 0x50001a,
  CLCTL_REMOVE_OWNER = 0x50001e,
  CLCTL_SET_NAME = 0x500026,
  CLCTL_CLUSTER_NAME_CHANGED = 0x50002a,
  CLCTL_CLUSTER_VERSION_CHANGED = 0x50002e,
  CLCTL_FIXUP_ON_UPGRADE = 0x500032,
  CLCTL_STARTING_PHASE1 = 0x500036,
  CLCTL_STARTING_PHASE2 = 0x50003a,
  CLCTL_HOLD_IO = 0x50003e,
  CLCTL_RESUME_IO = 0x500042,
  CLCTL_FORCE_QUORUM = 0x500046,
  CLCTL_INITIALIZE = 0x50004a,
  CLCTL_STATE_CHANGE_REASON = 0x50004e,
  CLCTL_PROVIDER_STATE_CHANGE = 0x500052,
  CLCTL_LEAVING_GROUP = 0x500056,
  CLCTL_JOINING_GROUP = 0x50005a,
  CLCTL_FSWITNESS_GET_EPOCH_INFO = 0x10005d,
  CLCTL_FSWITNESS_SET_EPOCH_INFO = 0x500062,
  CLCTL_FSWITNESS_RELEASE_LOCK = 0x500066,
  CLCTL_NETNAME_CREDS_NOTIFYCAM = 0x50006a,
  CLCTL_STORAGE_GET_DISK_NUMBER = 0x10006d,
  CLCTL_STORAGE_GET_CSV_DISK_INFO = 0x100071,
  CLCTL_SET_SHARED_PR_KEY = 0x50007a,
  CLCTL_STORAGE_SET_CSV_DISK = 0x5020d2,
  CLCTL_CSV_PERFORM_CHKDSK = 0x5020d6,
  CLCTL_CSV_SET_ISALIVE_STATE = 0x5020da,
  CLCTL_CSV_TRIGGER_FS_MOUNT = 0x1020dd,
  CLCTL_STORAGE_POOL_POST_ONLINE = 0x5020e2,
  CLCTL_STORAGE_POOL_PRE_OFFLINE = 0x5020e6,
  CLCTL_GET_OPERATION_CONTEXT = 0x1020e9,
  CLUSCTL_CLONE_STARTUP = 0x5020ee,
  CLUSCTL_CLONE_SHUTDOWN = 0x5020f2,
  CLCTL_CSV_GET_DEVICE_INFO_FROM_PATH = 0x1020f5,
};

typedef enum
{
  opcodeIdx = 0,
  hresultIdx = 1,
  durationIdx = 2,
  linked_server_nameIdx = 3,
  provider_nameIdx = 4,
  method_nameIdx = 5,
  parametersIdx = 6,
  LastField = 7,
} TAG_UNNAMED_446, *PTAG_UNNAMED_446;

typedef enum
{
  WCODE_HRESULT_FIRST = -2147220992,
  WCODE_HRESULT_LAST = -2147155969,
} TAG_UNNAMED_447, *PTAG_UNNAMED_447;

typedef enum _URLZONEREG
{
  URLZONEREG_DEFAULT = 0,
  URLZONEREG_HKLM = 1,
  URLZONEREG_HKCU = 2,
} URLZONEREG, *PURLZONEREG;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_448, *PTAG_UNNAMED_448;

typedef struct _DRAWPATRECT
{
  /* 0x0000 */ struct tagPOINT ptPosition;
  /* 0x0008 */ struct tagPOINT ptSize;
  /* 0x0010 */ unsigned short wStyle;
  /* 0x0012 */ unsigned short wPattern;
} DRAWPATRECT, *PDRAWPATRECT; /* size: 0x0014 */

enum tagDCOM_CALL_STATE
{
  DCOM_NONE = 0,
  DCOM_CALL_COMPLETE = 1,
  DCOM_CALL_CANCELED = 2,
};

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_descriptorIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_449, *PTAG_UNNAMED_449;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 13,
  NVld = 2,
  VldEddOffset = 10,
  BufSize = 53,
} TAG_UNNAMED_450, *PTAG_UNNAMED_450;

enum DkParameterMatchResult
{
  dkpmMatch = 0,
  dkpmPartialMatch = 1,
  dkpmNoMatch = 2,
};

typedef struct _SERVER_INFO_1599
{
  /* 0x0000 */ unsigned char sv1598_enforcekerberosreauthentication;
} SERVER_INFO_1599, *PSERVER_INFO_1599; /* size: 0x0001 */

typedef enum __MIDL_IInternetZoneManager_0001
{
  MAX_ZONE_PATH = 260,
  MAX_ZONE_DESCRIPTION = 200,
} _MIDL_IInternetZoneManager_0001, *P_MIDL_IInternetZoneManager_0001;

typedef struct _SERVICE_TABLE_ENTRYA
{
  /* 0x0000 */ char* lpServiceName;
  /* 0x0008 */ void* lpServiceProc /* function */;
} SERVICE_TABLE_ENTRYA, *PSERVICE_TABLE_ENTRYA; /* size: 0x0010 */

enum PIPE_ATTRIBUTE_TYPE
{
  PipeAttribute = 0,
  PipeConnectionAttribute = 1,
  PipeHandleAttribute = 2,
};

struct tagLC_ID
{
  /* 0x0000 */ unsigned short wLanguage;
  /* 0x0002 */ unsigned short wCountry;
  /* 0x0004 */ unsigned short wCodePage;
}; /* size: 0x0006 */

struct threadlocaleinfostruct
{
  /* 0x0000 */ int refcount;
  /* 0x0004 */ unsigned int lc_codepage;
  /* 0x0008 */ unsigned int lc_collate_cp;
  /* 0x000c */ unsigned long lc_handle[6];
  /* 0x0024 */ struct tagLC_ID lc_id[6];
  /* 0x0048 */ struct
  {
    /* 0x0048 */ char* locale;
    /* 0x0050 */ unsigned short* wlocale;
    /* 0x0058 */ int* refcount;
    /* 0x0060 */ int* wrefcount;
  } /* size: 0x0020 */ lc_category[6];
  /* 0x0108 */ int lc_clike;
  /* 0x010c */ int mb_cur_max;
  /* 0x0110 */ int* lconv_intl_refcount;
  /* 0x0118 */ int* lconv_num_refcount;
  /* 0x0120 */ int* lconv_mon_refcount;
  /* 0x0128 */ struct lconv* lconv;
  /* 0x0130 */ int* ctype1_refcount;
  /* 0x0138 */ unsigned short* ctype1;
  /* 0x0140 */ const unsigned short* pctype;
  /* 0x0148 */ const unsigned char* pclmap;
  /* 0x0150 */ const unsigned char* pcumap;
  /* 0x0158 */ struct __lc_time_data* lc_time_curr;
}; /* size: 0x0160 */

class DumpTListIterator<SchedulerManagerList,512>
{
}; /* size: 0x0020 */

enum DkParameterFlags
{
  dpfNone = 0,
  dpfCaseInsensitive = 1,
  dpfOptionalArgument = 2,
  dpfPositiveIntegerArgument = 4,
  dpfStringArgument = 8,
  dpfFloatArgument = 16,
  dpfPositionalParameter = 32,
  dpfDeprecated = 64,
  dpfSecondPass = 128,
  dpfPhase1 = 256,
  dpfPhase2 = 512,
  dpfAllPhases = 768,
};

class XeSqlPkg::change_based_metadata_cache_refresh
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_176[143];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int rows_changed_countOffset;
    /* 0x0000 */ const int process_stageOffset;
  }; /* size: 0x0015 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_451, *PTAG_UNNAMED_451;

enum tagPENDINGMSG
{
  PENDINGMSG_CANCELCALL = 0,
  PENDINGMSG_WAITNOPROCESS = 1,
  PENDINGMSG_WAITDEFPROCESS = 2,
};

typedef struct _QUERY_SERVICE_LOCK_STATUSW
{
  /* 0x0000 */ unsigned long fIsLocked;
  /* 0x0004 */ long Padding_177;
  /* 0x0008 */ wchar_t* lpLockOwner;
  /* 0x0010 */ unsigned long dwLockDuration;
  /* 0x0014 */ long __PADDING__[1];
} QUERY_SERVICE_LOCK_STATUSW, *PQUERY_SERVICE_LOCK_STATUSW; /* size: 0x0018 */

typedef struct _SERVICE_DESCRIPTIONA
{
  /* 0x0000 */ char* lpDescription;
} SERVICE_DESCRIPTIONA, *PSERVICE_DESCRIPTIONA; /* size: 0x0008 */

enum tag_WBEMSTATUS_FORMAT
{
  WBEMSTATUS_FORMAT_NEWLINE = 0,
  WBEMSTATUS_FORMAT_NO_NEWLINE = 1,
};

struct IDataAdviseHolder
{
}; /* size: 0x0008 */

enum SOS_MemoryBlockAllocator::PartitionMode
{
  PartitionByNode = 0,
  PartitionByCpu = 1,
};

typedef enum
{
  error_numberIdx = 0,
  error_severityIdx = 1,
  error_stateIdx = 2,
  acknowledgement_fragment_numberIdx = 3,
  message_fragment_numberIdx = 4,
  acknowledgement_sequence_numberIdx = 5,
  message_sequence_numberIdx = 6,
  sequenced_messageIdx = 7,
  is_initiatorIdx = 8,
  conversation_idIdx = 9,
  message_drop_reasonIdx = 10,
  message_type_nameIdx = 11,
  service_contract_nameIdx = 12,
  from_service_nameIdx = 13,
  from_broker_nameIdx = 14,
  to_service_nameIdx = 15,
  to_broker_nameIdx = 16,
  LastField = 17,
} TAG_UNNAMED_452, *PTAG_UNNAMED_452;

typedef enum
{
  brick_idIdx = 0,
  session_idIdx = 1,
  object_idIdx = 2,
  object_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_453, *PTAG_UNNAMED_453;

class CAutoP<unsigned short>
{
}; /* size: 0x0008 */

enum tagMEMCTX
{
  MEMCTX_TASK = 1,
  MEMCTX_SHARED = 2,
  MEMCTX_MACSYSTEM = 3,
  MEMCTX_UNKNOWN = -1,
  MEMCTX_SAME = -2,
};

typedef struct _ADMINISTRATOR_POWER_POLICY
{
  /* 0x0000 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* 0x0004 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* 0x0008 */ unsigned long MinVideoTimeout;
  /* 0x000c */ unsigned long MaxVideoTimeout;
  /* 0x0010 */ unsigned long MinSpindownTimeout;
  /* 0x0014 */ unsigned long MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY; /* size: 0x0018 */

typedef enum _TRANSACTION_STATE
{
  TransactionStateNormal = 1,
  TransactionStateIndoubt = 2,
  TransactionStateCommittedNotify = 3,
} TRANSACTION_STATE, *PTRANSACTION_STATE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_454, *PTAG_UNNAMED_454;

typedef enum
{
  messageIdx = 0,
  LastField = 1,
} TAG_UNNAMED_455, *PTAG_UNNAMED_455;

struct BATTERY_REPORTING_SCALE
{
  /* 0x0000 */ unsigned long Granularity;
  /* 0x0004 */ unsigned long Capacity;
}; /* size: 0x0008 */

enum CLUSTER_NODE_ENUM
{
  CLUSTER_NODE_ENUM_NETINTERFACES = 1,
  CLUSTER_NODE_ENUM_ALL = 1,
};

typedef struct _POINTFLOAT
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
} POINTFLOAT, *PPOINTFLOAT; /* size: 0x0008 */

typedef struct _GLYPHMETRICSFLOAT
{
  /* 0x0000 */ float gmfBlackBoxX;
  /* 0x0004 */ float gmfBlackBoxY;
  /* 0x0008 */ struct _POINTFLOAT gmfptGlyphOrigin;
  /* 0x0010 */ float gmfCellIncX;
  /* 0x0014 */ float gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT; /* size: 0x0018 */

struct XEActionDataDescriptor_v0
{
  /* 0x0000 */ struct XERelativeObjectId m_rid;
  /* 0x0004 */ unsigned short m_length;
}; /* size: 0x0006 */

enum tagDISCARDCACHE
{
  DISCARDCACHE_SAVEIFDIRTY = 0,
  DISCARDCACHE_NOSAVE = 1,
};

class XE_BufferWalker<XE_LiveSessionMetadata>
{
  /* 0x0000 */ const struct XEEventBufferHeader* m_EventHeader;
  /* 0x0008 */ const struct XEEvent* m_EventMd;
  /* 0x0010 */ const class XE_LiveSessionMetadata* m_metadata;
  /* 0x0018 */ const struct XEBuffer* m_pBuffer;
  /* 0x0020 */ const unsigned char* m_bufferEnd;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 10,
} TAG_UNNAMED_456, *PTAG_UNNAMED_456;

typedef enum _SC_ENUM_TYPE
{
  SC_ENUM_PROCESS_INFO = 0,
} SC_ENUM_TYPE, *PSC_ENUM_TYPE;

typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_178;
  /* 0x0008 */ const char* FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, *PTEB_ACTIVE_FRAME_CONTEXT; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  slot_idIdx = 2,
  log_op_idIdx = 3,
  log_op_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_457, *PTAG_UNNAMED_457;

typedef enum
{
  is_enteringIdx = 0,
  api_nameIdx = 1,
  ag_nameIdx = 2,
  db_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_458, *PTAG_UNNAMED_458;

typedef struct _SERVICE_DESCRIPTIONW
{
  /* 0x0000 */ wchar_t* lpDescription;
} SERVICE_DESCRIPTIONW, *PSERVICE_DESCRIPTIONW; /* size: 0x0008 */

enum XeSqlPkg::file_read::CustomizableSlots
{
  collect_pathSlot = 0,
};

enum SOS_LargeCacheStore::test_configuration_enum
{
  DEFAULT_TEST_CONFIG = 0,
  DISABLE_PERIODIC_NOTIFY = 1,
};

struct tagSTATPROPSTG
{
  /* 0x0000 */ wchar_t* lpwstrName;
  /* 0x0008 */ unsigned long propid;
  /* 0x000c */ unsigned short vt;
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

enum tagPOINTERINACTIVE
{
  POINTERINACTIVE_ACTIVATEONENTRY = 1,
  POINTERINACTIVE_DEACTIVATEONLEAVE = 2,
  POINTERINACTIVE_ACTIVATEONDRAG = 4,
};

typedef union _RemotableHandle::__MIDL_IWinTypes_0009
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ long hRemote;
  }; /* size: 0x0004 */
} RemotableHandle::__MIDL_IWinTypes_0009, *PRemotableHandle::__MIDL_IWinTypes_0009; /* size: 0x0004 */

enum ASSOCENUM
{
  ASSOCENUM_NONE = 0,
};

typedef enum
{
  brick_idIdx = 0,
  eventIdx = 1,
  LastField = 2,
} TAG_UNNAMED_459, *PTAG_UNNAMED_459;

struct XE_LogDefaultMetadataPackageHeader
{
  /* 0x0000 */ unsigned short m_metadataVersion;
  /* 0x0002 */ unsigned short m_padding1;
  /* 0x0004 */ unsigned int m_metadataSizeInBytes;
  /* 0x0008 */ struct _GUID m_metadataSignature;
  /* 0x0018 */ unsigned short m_metadataGeneration;
  /* 0x001a */ unsigned short m_padding2;
  /* 0x001c */ unsigned int m_padding3;
  /* 0x0020 */ struct XETicksConfig m_ticksConfig;
}; /* size: 0x0038 */

struct XEPackageMetadata
{
  /* 0x0000 */ struct XEPackage* m_package;
  /* 0x0008 */ struct XEObjectCollection* m_objects[8];
}; /* size: 0x0048 */

class SEList<XE_LogDeserializedPackage::Chunk,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_LogDeserializedPackage
{
  /* 0x0000 */ long Padding_179[4];
  /* 0x0010 */ struct XE_LogDefaultMetadataPackageHeader m_Header;
  /* 0x0048 */ struct XEPackageMetadata m_Metadata;
  union
  {
    /* 0x0000 */ const wchar_t* INVALID_WSTRING;
    /* 0x0000 */ const char* INVALID_STRING;
    /* 0x0000 */ const struct _GUID INVALID_GUID;
  }; /* size: 0x0010 */
  /* 0x0010 */ long Padding_180[32];
  /* 0x0090 */ unsigned int m_inOffset;
  /* 0x0094 */ long Padding_181;
  /* 0x0098 */ const unsigned char* const m_in;
  /* 0x00a0 */ unsigned int m_inLen;
  /* 0x00a4 */ long Padding_182;
  /* 0x00a8 */ class SEList<XE_LogDeserializedPackage::Chunk,0> m_storage;
}; /* size: 0x00b8 */

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_460, *PTAG_UNNAMED_460;

enum XEventAutoEngineLoad::InitFailureReasons
{
  InitSuccess = 0,
  APIInitFail = 1,
  EngineInitFail = 2,
};

enum XE_BaseAllocator::Component
{
};

typedef enum
{
  offset = 16,
} TAG_UNNAMED_461, *PTAG_UNNAMED_461;

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_462, *PTAG_UNNAMED_462;

struct IWbemClassObject
{
}; /* size: 0x0008 */

typedef enum _IRQ_DEVICE_POLICY
{
  IrqPolicyMachineDefault = 0,
  IrqPolicyAllCloseProcessors = 1,
  IrqPolicyOneCloseProcessor = 2,
  IrqPolicyAllProcessorsInMachine = 3,
  IrqPolicySpecifiedProcessors = 4,
  IrqPolicySpreadMessagesAcrossAllProcessors = 5,
} IRQ_DEVICE_POLICY, *PIRQ_DEVICE_POLICY;

typedef enum _IRQ_PRIORITY
{
  IrqPriorityUndefined = 0,
  IrqPriorityLow = 1,
  IrqPriorityNormal = 2,
  IrqPriorityHigh = 3,
} IRQ_PRIORITY, *PIRQ_PRIORITY;

class XeSqlPkg::hadr_db_manager_db_restart
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_183[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int clean_shutdownOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_463, *PTAG_UNNAMED_463;

typedef enum
{
  availability_group_idIdx = 0,
  listener_idIdx = 1,
  dns_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_464, *PTAG_UNNAMED_464;

struct ISWbemObjectPath
{
}; /* size: 0x0008 */

typedef enum __vc_attributes::pointer_defaultAttribute::type_e
{
  ptr = 0,
  ref = 1,
  unique = 2,
} _vc_attributes::pointer_defaultAttribute::type_e, *P_vc_attributes::pointer_defaultAttribute::type_e;

struct IXMLDOMNode
{
}; /* size: 0x0008 */

struct XE_TArray<XEAction *,11>
{
  /* 0x0000 */ struct XEAction* m_array[11];
}; /* size: 0x0058 */

struct XE_TObjects<XEAction,11>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEAction *,11> m_objectPtrs;
}; /* size: 0x0068 */

enum SOS_MemoryBlockAllocator::FromWhere
{
  FromPartialList = 0,
  FromParentAllocator = 1,
  FromTopLevelAllocator = 2,
  FromNowhere = 3,
};

typedef struct _PROCESS_EXCEPTION_PORT
{
  /* 0x0000 */ void* ExceptionPortHandle;
  /* 0x0008 */ unsigned long StateFlags;
  /* 0x000c */ long __PADDING__[1];
} PROCESS_EXCEPTION_PORT, *PPROCESS_EXCEPTION_PORT; /* size: 0x0010 */

typedef enum
{
  statusIdx = 0,
  satisfiedIdx = 1,
  workitem_descriptionIdx = 2,
  transaction_idIdx = 3,
  correlation_idsIdx = 4,
  logical_pathIdx = 5,
  physical_pathIdx = 6,
  original_pathIdx = 7,
  LastField = 8,
} TAG_UNNAMED_465, *PTAG_UNNAMED_465;

typedef enum
{
  count_cyclesIdx = 0,
  peak_mem_utilIdx = 1,
  vertex_primary_pool_capIdx = 2,
  vertex_secondary_pool_capIdx = 3,
  vertex_avg_alloc_countIdx = 4,
  vertex_max_alloc_countIdx = 5,
  edge_primary_pool_capIdx = 6,
  edge_secondary_pool_capIdx = 7,
  edge_avg_alloc_countIdx = 8,
  edge_max_alloc_countIdx = 9,
  scc_primary_pool_capIdx = 10,
  scc_secondary_pool_capIdx = 11,
  scc_avg_alloc_countIdx = 12,
  scc_max_alloc_countIdx = 13,
  vertex_hash_primary_pool_capIdx = 14,
  vertex_hash_secondary_pool_capIdx = 15,
  vertex_hash_avg_alloc_countIdx = 16,
  vertex_hash_max_alloc_countIdx = 17,
  LastField = 18,
} TAG_UNNAMED_466, *PTAG_UNNAMED_466;

struct tagGUITHREADINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ struct HWND__* hwndActive;
  /* 0x0010 */ struct HWND__* hwndFocus;
  /* 0x0018 */ struct HWND__* hwndCapture;
  /* 0x0020 */ struct HWND__* hwndMenuOwner;
  /* 0x0028 */ struct HWND__* hwndMoveSize;
  /* 0x0030 */ struct HWND__* hwndCaret;
  /* 0x0038 */ struct tagRECT rcCaret;
}; /* size: 0x0048 */

typedef enum __vc_attributes::event_receiverAttribute::type_e
{
  native = 0,
  com = 1,
  managed = 2,
} _vc_attributes::event_receiverAttribute::type_e, *P_vc_attributes::event_receiverAttribute::type_e;

class Spinlock<169,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_467, *PTAG_UNNAMED_467;

typedef enum _CLUSTER_SETUP_PHASE_TYPE
{
  ClusterSetupPhaseStart = 1,
  ClusterSetupPhaseContinue = 2,
  ClusterSetupPhaseEnd = 3,
} CLUSTER_SETUP_PHASE_TYPE, *PCLUSTER_SETUP_PHASE_TYPE;

typedef struct _MIDL_STUBLESS_PROXY_INFO
{
  /* 0x0000 */ const struct _MIDL_STUB_DESC* pStubDesc;
  /* 0x0008 */ const unsigned char* ProcFormatString;
  /* 0x0010 */ const unsigned short* FormatStringOffset;
  /* 0x0018 */ struct _RPC_SYNTAX_IDENTIFIER* pTransferSyntax;
  /* 0x0020 */ unsigned __int64 nCount;
  /* 0x0028 */ struct _MIDL_SYNTAX_INFO* pSyntaxInfo;
} MIDL_STUBLESS_PROXY_INFO, *PMIDL_STUBLESS_PROXY_INFO; /* size: 0x0030 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 35,
} TAG_UNNAMED_468, *PTAG_UNNAMED_468;

enum OomFactor
{
  OomUndefined = 0,
  OomAllocationPotential = 1,
  OomBlockAllocator = 2,
  OomEscapeTimeout = 3,
  OomFailFast = 4,
  OomMemoryPool = 5,
  OomEmergencyAllocator = 6,
  OomVirtualAlloc = 7,
  OomSimulated = 8,
  OomBufAllocator = 9,
  OomQueryMemQueue = 10,
  OomFragment = 11,
  OomInitDescriptor = 12,
  OomMemoryPoolPressure = 13,
};

class CAutoRg<XE_FileSet::Entry>
{
}; /* size: 0x0008 */

typedef enum __vc_attributes::event_sourceAttribute::type_e
{
  native = 0,
  com = 1,
  managed = 2,
} _vc_attributes::event_sourceAttribute::type_e, *P_vc_attributes::event_sourceAttribute::type_e;

struct tagCWPRETSTRUCT
{
  /* 0x0000 */ __int64 lResult;
  /* 0x0008 */ __int64 lParam;
  /* 0x0010 */ unsigned __int64 wParam;
  /* 0x0018 */ unsigned int message;
  /* 0x001c */ long Padding_184;
  /* 0x0020 */ struct HWND__* hwnd;
}; /* size: 0x0028 */

typedef enum
{
  sgam_fileIdx = 0,
  sgam_pageIdx = 1,
  start_file_idIdx = 2,
  start_page_idIdx = 3,
  database_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_469, *PTAG_UNNAMED_469;

struct IOleInPlaceSiteWindowless
{
}; /* size: 0x0008 */

typedef enum
{
  work_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_470, *PTAG_UNNAMED_470;

typedef enum
{
  MAX_NAME = 32,
} TAG_UNNAMED_471, *PTAG_UNNAMED_471;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_472, *PTAG_UNNAMED_472;

typedef enum __vc_attributes::moduleAttribute::type_e
{
  dll = 1,
  exe = 2,
  service = 3,
  unspecified = 4,
  EXE = 2,
  SERVICE = 3,
} _vc_attributes::moduleAttribute::type_e, *P_vc_attributes::moduleAttribute::type_e;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT
{
  /* 0x0000 */ struct _GUID Id;
  /* 0x0010 */ enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT; /* size: 0x0014 */

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
  /* 0x0000 */ unsigned long ulFlags;
  /* 0x0004 */ enum ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
  /* 0x0008 */ unsigned long UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, *PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION; /* size: 0x000c */

typedef enum
{
  execution_stats_reportIdx = 0,
  LastField = 1,
} TAG_UNNAMED_473, *PTAG_UNNAMED_473;

typedef struct _RGNDATAHEADER
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long iType;
  /* 0x0008 */ unsigned long nCount;
  /* 0x000c */ unsigned long nRgnSize;
  /* 0x0010 */ struct tagRECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER; /* size: 0x0020 */

typedef struct _RGNDATA
{
  /* 0x0000 */ struct _RGNDATAHEADER rdh;
  /* 0x0020 */ char Buffer[1];
  /* 0x0021 */ char __PADDING__[3];
} RGNDATA, *PRGNDATA; /* size: 0x0024 */

typedef enum
{
  ListElementOffset = 0,
} TAG_UNNAMED_474, *PTAG_UNNAMED_474;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_475, *PTAG_UNNAMED_475;

class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc,16>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct tagTHREADENTRY32
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long cntUsage;
  /* 0x0008 */ unsigned long th32ThreadID;
  /* 0x000c */ unsigned long th32OwnerProcessID;
  /* 0x0010 */ long tpBasePri;
  /* 0x0014 */ long tpDeltaPri;
  /* 0x0018 */ unsigned long dwFlags;
}; /* size: 0x001c */

struct IOleControlSite
{
}; /* size: 0x0008 */

class std::collate<char>;

struct ISWbemDateTime
{
}; /* size: 0x0008 */

typedef enum
{
  NextPtrOffset = 0,
} TAG_UNNAMED_476, *PTAG_UNNAMED_476;

class TCounter<__int64>;

typedef struct _SHARE_INFO_503
{
  /* 0x0000 */ wchar_t* shi503_netname;
  /* 0x0008 */ unsigned long shi503_type;
  /* 0x000c */ long Padding_185;
  /* 0x0010 */ wchar_t* shi503_remark;
  /* 0x0018 */ unsigned long shi503_permissions;
  /* 0x001c */ unsigned long shi503_max_uses;
  /* 0x0020 */ unsigned long shi503_current_uses;
  /* 0x0024 */ long Padding_186;
  /* 0x0028 */ wchar_t* shi503_path;
  /* 0x0030 */ wchar_t* shi503_passwd;
  /* 0x0038 */ wchar_t* shi503_servername;
  /* 0x0040 */ unsigned long shi503_reserved;
  /* 0x0044 */ long Padding_187;
  /* 0x0048 */ void* shi503_security_descriptor;
} SHARE_INFO_503, *PSHARE_INFO_503; /* size: 0x0050 */

enum NoExceptionPmoAllocator::Component
{
};

typedef struct _CLUSTER_VALIDATE_NETNAME
{
  union
  {
    /* 0x0000 */ wchar_t* szNetworkName /* zero-length array */;
    /* 0x0000 */ char __PADDING__[2];
  }; /* size: 0x0002 */
} CLUSTER_VALIDATE_NETNAME, *PCLUSTER_VALIDATE_NETNAME; /* size: 0x0002 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_477, *PTAG_UNNAMED_477;

class XE_AutoRg<XEPackage0::BucketizingTarget::Entry *>
{
}; /* size: 0x0008 */

typedef enum
{
  HashEntryLinkOff = 0,
} TAG_UNNAMED_478, *PTAG_UNNAMED_478;

class SystemAffinity
{
  union
  {
    /* 0x0000 */ const unsigned int MAX_GROUPS;
    /* 0x0000 */ unsigned __int64 m_affinities[16];
  }; /* size: 0x0080 */
}; /* size: 0x0080 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_479, *PTAG_UNNAMED_479;

class CXFileReaderInterface
{
}; /* size: 0x0008 */

enum XE_FilePositionDisposition
{
  XEFPD_Current = 0,
  XEFPD_Next = 1,
};

typedef struct _SERVICE_FAILURE_ACTIONSW
{
  /* 0x0000 */ unsigned long dwResetPeriod;
  /* 0x0004 */ long Padding_188;
  /* 0x0008 */ wchar_t* lpRebootMsg;
  /* 0x0010 */ wchar_t* lpCommand;
  /* 0x0018 */ unsigned long cActions;
  /* 0x001c */ long Padding_189;
  /* 0x0020 */ struct _SC_ACTION* lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *PSERVICE_FAILURE_ACTIONSW; /* size: 0x0028 */

class MethodCallBinder_0<void,ISOSHost_RWLockImpl,void (__cdecl ISOSHost_RWLockImpl::*)(void)>
{
  /* 0x0000 */ class ISOSHost_RWLockImpl* const m_pTObj;
  /* 0x0008 */ void* m_f /* function */;
}; /* size: 0x0018 */

enum DeserializePackageAddResult
{
  PackageCorrupt = 0,
  PackageAdded = 1,
  PackageAlreadyExists = 2,
};

typedef struct _SYSTEM_SESSION_POOLTAG_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NextEntryOffset;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ struct _SYSTEM_POOLTAG TagInfo[1];
} SYSTEM_SESSION_POOLTAG_INFORMATION, *PSYSTEM_SESSION_POOLTAG_INFORMATION; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 14,
} TAG_UNNAMED_480, *PTAG_UNNAMED_480;

typedef enum
{
  NStatic = 4,
  NCustomizable = 6,
  NDynamic = 10,
  NVld = 9,
  VldEddOffset = 0,
  BufSize = 76,
} TAG_UNNAMED_481, *PTAG_UNNAMED_481;

struct tagLOGBRUSH
{
  /* 0x0000 */ unsigned int lbStyle;
  /* 0x0004 */ unsigned long lbColor;
  /* 0x0008 */ unsigned __int64 lbHatch;
}; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 0,
} TAG_UNNAMED_482, *PTAG_UNNAMED_482;

struct tagDRAWTEXTPARAMS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iTabLength;
  /* 0x0008 */ int iLeftMargin;
  /* 0x000c */ int iRightMargin;
  /* 0x0010 */ unsigned int uiLengthDrawn;
}; /* size: 0x0014 */

typedef enum
{
  Serialize = 0,
} TAG_UNNAMED_483, *PTAG_UNNAMED_483;

typedef enum
{
  NBitsPerWord = 32,
  NWords = 1,
  NRemainder = 8,
} TAG_UNNAMED_484, *PTAG_UNNAMED_484;

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  from_brick_idIdx = 2,
  database_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_485, *PTAG_UNNAMED_485;

struct CLUSPROP_SZ
{
  /* 0x0000 */ long Padding_190[2];
  /* 0x0008 */ wchar_t* sz /* zero-length array */;
}; /* size: 0x0008 */

struct CLUSPROP_LIST
{
  /* 0x0000 */ unsigned long nPropertyCount;
  /* 0x0004 */ struct CLUSPROP_SZ PropertyName;
}; /* size: 0x000c */

enum XeCloudMinPkg::async_transport_message_content::CustomizableSlots
{
  collect_message_contentSlot = 0,
};

class MemObjCache<CMemThread<CMemProc> >
{
  /* 0x0000 */ long Padding_191[74];
  /* 0x0128 */ void* m_cacheEntryDescriptor;
  /* 0x0130 */ class CostInfo m_costInfo;
}; /* size: 0x0178 */

typedef enum
{
  TSize = 4,
  BitsInT = 32,
} TAG_UNNAMED_486, *PTAG_UNNAMED_486;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 17,
} TAG_UNNAMED_487, *PTAG_UNNAMED_487;

enum XE_BufferMap::SortOptions
{
  SO_FileSetOrder = 0,
  SO_BufferIndex = 1,
  SO_Last = 2,
};

typedef enum
{
  work_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_488, *PTAG_UNNAMED_488;

enum std::pointer_safety::pointer_safety
{
  relaxed = 0,
  preferred = 1,
  strict = 2,
};

typedef enum
{
  cpu_timeIdx = 0,
  durationIdx = 1,
  physical_readsIdx = 2,
  logical_readsIdx = 3,
  writesIdx = 4,
  row_countIdx = 5,
  resultIdx = 6,
  batch_textIdx = 7,
  LastField = 8,
} TAG_UNNAMED_489, *PTAG_UNNAMED_489;

struct ISimpleFrameSite
{
}; /* size: 0x0008 */

enum std::float_round_style
{
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3,
};

struct IBindStatusCallbackEx
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_490, *PTAG_UNNAMED_490;

struct IWbemProviderIdentity
{
}; /* size: 0x0008 */

class MemObjCache<CMemProc>
{
  /* 0x0000 */ long Padding_192[34];
  /* 0x0088 */ void* m_cacheEntryDescriptor;
  /* 0x0090 */ class CostInfo m_costInfo;
}; /* size: 0x00d8 */

enum std::float_denorm_style
{
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1,
};

typedef enum
{
  xact_idIdx = 0,
  transaction_time_stampIdx = 1,
  xact_for_idempotent_flushIdx = 2,
  LastField = 3,
} TAG_UNNAMED_491, *PTAG_UNNAMED_491;

typedef enum
{
  brick_idIdx = 0,
  tosnIdx = 1,
  LastField = 2,
} TAG_UNNAMED_492, *PTAG_UNNAMED_492;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_493, *PTAG_UNNAMED_493;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_494, *PTAG_UNNAMED_494;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 14,
} TAG_UNNAMED_495, *PTAG_UNNAMED_495;

struct XE_TEvent<3,0,2>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,2> m_dynamicAttr;
  /* 0x00d0 */ struct XEEvent m_event;
}; /* size: 0x0118 */

class XeSqlPkg::sql_exit_invoked
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_193[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int exit_codeOffset;
    /* 0x0000 */ const int shutdown_optionOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  ListElementOffset = 32,
  NextPtrOffset = 8,
} TAG_UNNAMED_496, *PTAG_UNNAMED_496;

struct IDBDataSourceAdmin
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_497, *PTAG_UNNAMED_497;

enum std::_Uninitialized
{
  _Noinit = 0,
};

class TypeListNode<NullType,NullType>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_498, *PTAG_UNNAMED_498;

typedef enum
{
  scoped_database_idIdx = 0,
  current_worker_countIdx = 1,
  new_worker_countIdx = 2,
  current_update_offset_msIdx = 3,
  new_update_offset_msIdx = 4,
  current_counterIdx = 5,
  new_counterIdx = 6,
  refresh_interval_msIdx = 7,
  server_nameIdx = 8,
  database_nameIdx = 9,
  LastField = 10,
} TAG_UNNAMED_499, *PTAG_UNNAMED_499;

class CAutoRefc<ResourceClerk>
{
  /* 0x0000 */ class ResourceClerk* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  TSize = 8,
  BitsInT = 64,
} TAG_UNNAMED_500, *PTAG_UNNAMED_500;

typedef struct _TRIPLE_LIST_ENTRY
{
  /* 0x0000 */ struct _TRIPLE_LIST_ENTRY* Flink[3];
  /* 0x0018 */ struct _TRIPLE_LIST_ENTRY* Blink;
} TRIPLE_LIST_ENTRY, *PTRIPLE_LIST_ENTRY; /* size: 0x0020 */

typedef enum
{
  roster_sizeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_501, *PTAG_UNNAMED_501;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 0,
} TAG_UNNAMED_502, *PTAG_UNNAMED_502;

typedef enum
{
  database_idIdx = 0,
  availability_group_nameIdx = 1,
  database_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_503, *PTAG_UNNAMED_503;

typedef enum
{
  filter_list_overflowIdx = 0,
  filter_listIdx = 1,
  LastField = 2,
} TAG_UNNAMED_504, *PTAG_UNNAMED_504;

struct ICatalogFileInfo
{
}; /* size: 0x0008 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 1,
  NRemainder = 0,
} TAG_UNNAMED_505, *PTAG_UNNAMED_505;

typedef union _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003
{
  union
  {
    /* 0x0000 */ struct _userHMETAFILEPICT* hMetaFilePict;
    /* 0x0000 */ struct _userHENHMETAFILE* hHEnhMetaFile;
    /* 0x0000 */ struct _GDI_OBJECT* hGdiHandle;
    /* 0x0000 */ struct _userHGLOBAL* hGlobal;
    /* 0x0000 */ wchar_t* lpszFileName;
    /* 0x0000 */ struct _BYTE_BLOB* pstm;
    /* 0x0000 */ struct _BYTE_BLOB* pstg;
  }; /* size: 0x0008 */
} userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003, *PuserSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003; /* size: 0x0008 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY Linkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, *PRTL_DYNAMIC_HASH_TABLE_ENTRY; /* size: 0x0018 */

typedef enum
{
  database_idIdx = 0,
  log_acceptIdx = 1,
  group_idIdx = 2,
  replica_idIdx = 3,
  ag_database_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_506, *PTAG_UNNAMED_506;

typedef enum _WOW64_FUNCTION_CODE64
{
  WOW64_FUNCTION_NOP = 0,
  WOW64_FUNCTION_QUERY_PROCESS_DEBUG_INFO = 1,
  WOW64_FUNCTION_MAXIMUM = 2,
} WOW64_FUNCTION_CODE64, *PWOW64_FUNCTION_CODE64;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 10,
  NVld = 3,
  VldEddOffset = 6,
  BufSize = 60,
} TAG_UNNAMED_507, *PTAG_UNNAMED_507;

struct ISWbemServices
{
}; /* size: 0x0008 */

typedef union _RPC_ASYNC_NOTIFICATION_INFO
{
  union
  {
    struct
    {
      /* 0x0000 */ void* NotificationRoutine /* function */;
      /* 0x0008 */ void* hThread;
    } /* size: 0x0010 */ APC;
    struct
    {
      /* 0x0000 */ void* hIOPort;
      /* 0x0008 */ unsigned long dwNumberOfBytesTransferred;
      /* 0x000c */ long Padding_194;
      /* 0x0010 */ unsigned __int64 dwCompletionKey;
      /* 0x0018 */ struct _OVERLAPPED* lpOverlapped;
    } /* size: 0x0020 */ IOC;
    struct
    {
      /* 0x0000 */ struct HWND__* hWnd;
      /* 0x0008 */ unsigned int Msg;
      /* 0x000c */ long __PADDING__[1];
    } /* size: 0x0010 */ HWND;
    /* 0x0000 */ void* hEvent;
    /* 0x0000 */ void* NotificationRoutine /* function */;
  }; /* size: 0x0020 */
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_508, *PTAG_UNNAMED_508;

enum EX_ORIGINS
{
  EX_ORIGIN_RAISE = 0,
  EX_ORIGIN_PASSON = 1,
  EX_ORIGIN_RETHROW = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_509, *PTAG_UNNAMED_509;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  throttling_modeIdx = 2,
  throttling_reasonIdx = 3,
  throttling_incident_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_510, *PTAG_UNNAMED_510;

typedef struct _REMSECURITY_ATTRIBUTES
{
  /* 0x0000 */ unsigned long nLength;
  /* 0x0004 */ unsigned long lpSecurityDescriptor;
  /* 0x0008 */ int bInheritHandle;
} REMSECURITY_ATTRIBUTES, *PREMSECURITY_ATTRIBUTES; /* size: 0x000c */

typedef struct _tagRemBINDINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_195;
  /* 0x0008 */ wchar_t* szExtraInfo;
  /* 0x0010 */ unsigned long grfBindInfoF;
  /* 0x0014 */ unsigned long dwBindVerb;
  /* 0x0018 */ wchar_t* szCustomVerb;
  /* 0x0020 */ unsigned long cbstgmedData;
  /* 0x0024 */ unsigned long dwOptions;
  /* 0x0028 */ unsigned long dwOptionsFlags;
  /* 0x002c */ unsigned long dwCodePage;
  /* 0x0030 */ struct _REMSECURITY_ATTRIBUTES securityAttributes;
  /* 0x003c */ struct _GUID iid;
  /* 0x004c */ long Padding_196;
  /* 0x0050 */ struct IUnknown* pUnk;
  /* 0x0058 */ unsigned long dwReserved;
  /* 0x005c */ long __PADDING__[1];
} tagRemBINDINFO, *PtagRemBINDINFO; /* size: 0x0060 */

struct XESessionContextRecord
{
  /* 0x0000 */ void* m_slots[2];
  /* 0x0010 */ int m_isRecursing;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

enum DictionaryType
{
  NON_EXISTANT = 0,
  GUID_DICTIONARY = 1,
  SQL_DICTIONARY = 2,
  TEXT_DICTIONARY = 3,
  ASCII_DICTIONARY = 4,
  BINARY_DICTIONARY = 5,
  INVALID_DICTIONARY = 6,
};

enum TransformRuleTitle
{
  USE_DICTIONARY_MASK = 7,
  JUST_STORE = 8,
  COLUMNIZE_ACTION_DATA = 16,
  MOSTLY_ZERO = 32,
  LIKELY_GROWING_VALUES = 64,
  DATA_IS_HASH_FOR_OTHER_COLUMN = 128,
  USE_SIZE_4 = 256,
  DEGRADE_PRECISION_THIS_IS_TIME_COLUMN = 512,
  DEGRADE_PRECISION_THIS_IS_DURATION = 1024,
  CONSTANT_ELIMINATION = 2048,
  USE_SIZE_2 = 4096,
  SKIP_DATA = 8192,
};

typedef enum
{
  object_idIdx = 0,
  database_idIdx = 1,
  cache_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_511, *PTAG_UNNAMED_511;

enum XeSqlPkg::feature_extension::CustomizableSlots
{
  collect_feature_dataSlot = 0,
};

typedef enum _SCHEMAPROCESSCONTENTS
{
  SCHEMAPROCESSCONTENTS_NONE = 0,
  SCHEMAPROCESSCONTENTS_SKIP = 1,
  SCHEMAPROCESSCONTENTS_LAX = 2,
  SCHEMAPROCESSCONTENTS_STRICT = 3,
} SCHEMAPROCESSCONTENTS, *PSCHEMAPROCESSCONTENTS;

typedef enum _SCHEMACONTENTTYPE
{
  SCHEMACONTENTTYPE_EMPTY = 0,
  SCHEMACONTENTTYPE_TEXTONLY = 1,
  SCHEMACONTENTTYPE_ELEMENTONLY = 2,
  SCHEMACONTENTTYPE_MIXED = 3,
} SCHEMACONTENTTYPE, *PSCHEMACONTENTTYPE;

typedef struct _SERVER_INFO_1018
{
  /* 0x0000 */ unsigned long sv1018_anndelta;
} SERVER_INFO_1018, *PSERVER_INFO_1018; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_512, *PTAG_UNNAMED_512;

typedef enum _SCHEMAUSE
{
  SCHEMAUSE_OPTIONAL = 0,
  SCHEMAUSE_PROHIBITED = 1,
  SCHEMAUSE_REQUIRED = 2,
} SCHEMAUSE, *PSCHEMAUSE;

typedef enum
{
  source_database_idIdx = 0,
  object_idIdx = 1,
  durationIdx = 2,
  row_countIdx = 3,
  line_numberIdx = 4,
  offsetIdx = 5,
  offset_endIdx = 6,
  object_typeIdx = 7,
  object_nameIdx = 8,
  statementIdx = 9,
  LastField = 10,
} TAG_UNNAMED_513, *PTAG_UNNAMED_513;

enum MCA_EXCEPTION_TYPE
{
  HAL_MCE_RECORD = 0,
  HAL_MCA_RECORD = 1,
};

typedef enum _SXH_SERVER_CERT_OPTION
{
  SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256,
  SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512,
  SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096,
  SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192,
  SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056,
} SXH_SERVER_CERT_OPTION, *PSXH_SERVER_CERT_OPTION;

struct tagEMRSELECTPALETTE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPal;
}; /* size: 0x000c */

typedef enum
{
  message_referenceIdx = 0,
  LastField = 1,
} TAG_UNNAMED_514, *PTAG_UNNAMED_514;

typedef struct _WIN32_STREAM_ID
{
  /* 0x0000 */ unsigned long dwStreamId;
  /* 0x0004 */ unsigned long dwStreamAttributes;
  /* 0x0008 */ union _LARGE_INTEGER Size;
  /* 0x0010 */ unsigned long dwStreamNameSize;
  /* 0x0014 */ wchar_t cStreamName[1];
  /* 0x0016 */ char __PADDING__[2];
} WIN32_STREAM_ID, *PWIN32_STREAM_ID; /* size: 0x0018 */

typedef enum _SERVERXMLHTTP_OPTION
{
  SXH_OPTION_URL = -1,
  SXH_OPTION_URL_CODEPAGE = 0,
  SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1,
  SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2,
  SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3,
} SERVERXMLHTTP_OPTION, *PSERVERXMLHTTP_OPTION;

enum PWAIT_indexes
{
  __indexPWAIT_UNKNOWN = 0,
  __indexPWAIT_LCK_M_SCH_S = 1,
  __indexPWAIT_LCK_M_SCH_M = 2,
  __indexPWAIT_LCK_M_S = 3,
  __indexPWAIT_LCK_M_U = 4,
  __indexPWAIT_LCK_M_X = 5,
  __indexPWAIT_LCK_M_IS = 6,
  __indexPWAIT_LCK_M_IU = 7,
  __indexPWAIT_LCK_M_IX = 8,
  __indexPWAIT_LCK_M_SIU = 9,
  __indexPWAIT_LCK_M_SIX = 10,
  __indexPWAIT_LCK_M_UIX = 11,
  __indexPWAIT_LCK_M_BU = 12,
  __indexPWAIT_LCK_M_RS_S = 13,
  __indexPWAIT_LCK_M_RS_U = 14,
  __indexPWAIT_LCK_M_RIn_NL = 15,
  __indexPWAIT_LCK_M_RIn_S = 16,
  __indexPWAIT_LCK_M_RIn_U = 17,
  __indexPWAIT_LCK_M_RIn_X = 18,
  __indexPWAIT_LCK_M_RX_S = 19,
  __indexPWAIT_LCK_M_RX_U = 20,
  __indexPWAIT_LCK_M_RX_X = 21,
  __indexPWAIT_PADDING_111 = 22,
  __indexPWAIT_PADDING_112 = 23,
  __indexPWAIT_PADDING_113 = 24,
  __indexPWAIT_PADDING_114 = 25,
  __indexPWAIT_PADDING_115 = 26,
  __indexPWAIT_PADDING_116 = 27,
  __indexPWAIT_PADDING_117 = 28,
  __indexPWAIT_PADDING_118 = 29,
  __indexPWAIT_PADDING_119 = 30,
  __indexPWAIT_PADDING_120 = 31,
  __indexPWAIT_LATCH_NL = 32,
  __indexPWAIT_LATCH_KP = 33,
  __indexPWAIT_LATCH_SH = 34,
  __indexPWAIT_LATCH_UP = 35,
  __indexPWAIT_LATCH_EX = 36,
  __indexPWAIT_LATCH_DT = 37,
  __indexPWAIT_PADDING_1 = 38,
  __indexPWAIT_PADDING_2 = 39,
  __indexPWAIT_PADDING_3 = 40,
  __indexPWAIT_PADDING_4 = 41,
  __indexPWAIT_PADDING_5 = 42,
  __indexPWAIT_PADDING_6 = 43,
  __indexPWAIT_PADDING_7 = 44,
  __indexPWAIT_PADDING_8 = 45,
  __indexPWAIT_PADDING_9 = 46,
  __indexPWAIT_PADDING_10 = 47,
  __indexPWAIT_PAGELATCH_NL = 48,
  __indexPWAIT_PAGELATCH_KP = 49,
  __indexPWAIT_PAGELATCH_SH = 50,
  __indexPWAIT_PAGELATCH_UP = 51,
  __indexPWAIT_PAGELATCH_EX = 52,
  __indexPWAIT_PAGELATCH_DT = 53,
  __indexPWAIT_PADDING_11 = 54,
  __indexPWAIT_PADDING_12 = 55,
  __indexPWAIT_PADDING_13 = 56,
  __indexPWAIT_PADDING_14 = 57,
  __indexPWAIT_PADDING_15 = 58,
  __indexPWAIT_PADDING_16 = 59,
  __indexPWAIT_PADDING_17 = 60,
  __indexPWAIT_PADDING_18 = 61,
  __indexPWAIT_PADDING_19 = 62,
  __indexPWAIT_PADDING_20 = 63,
  __indexPWAIT_PAGEIOLATCH_NL = 64,
  __indexPWAIT_PAGEIOLATCH_KP = 65,
  __indexPWAIT_PAGEIOLATCH_SH = 66,
  __indexPWAIT_PAGEIOLATCH_UP = 67,
  __indexPWAIT_PAGEIOLATCH_EX = 68,
  __indexPWAIT_PAGEIOLATCH_DT = 69,
  __indexPWAIT_PADDING_21 = 70,
  __indexPWAIT_PADDING_22 = 71,
  __indexPWAIT_PADDING_23 = 72,
  __indexPWAIT_PADDING_24 = 73,
  __indexPWAIT_PADDING_25 = 74,
  __indexPWAIT_PADDING_26 = 75,
  __indexPWAIT_PADDING_27 = 76,
  __indexPWAIT_PADDING_28 = 77,
  __indexPWAIT_PADDING_29 = 78,
  __indexPWAIT_PADDING_30 = 79,
  __indexPWAIT_TRANMARKLATCH_NL = 80,
  __indexPWAIT_TRANMARKLATCH_KP = 81,
  __indexPWAIT_TRANMARKLATCH_SH = 82,
  __indexPWAIT_TRANMARKLATCH_UP = 83,
  __indexPWAIT_TRANMARKLATCH_EX = 84,
  __indexPWAIT_TRANMARKLATCH_DT = 85,
  __indexPWAIT_PADDING_31 = 86,
  __indexPWAIT_PADDING_32 = 87,
  __indexPWAIT_PADDING_33 = 88,
  __indexPWAIT_PADDING_34 = 89,
  __indexPWAIT_PADDING_35 = 90,
  __indexPWAIT_PADDING_36 = 91,
  __indexPWAIT_PADDING_37 = 92,
  __indexPWAIT_PADDING_38 = 93,
  __indexPWAIT_PADDING_39 = 94,
  __indexPWAIT_PADDING_40 = 95,
  __indexPWAIT_LZW_SLEEP = 96,
  __indexPWAIT_IO_COMPLETION = 97,
  __indexPWAIT_ASYNC_IO_COMPLETION = 98,
  __indexPWAIT_NETWORK_IO = 99,
  __indexPWAIT_SLEEP_BPOOL_FLUSH = 100,
  __indexPWAIT_CHKPT = 101,
  __indexPWAIT_SLEEP_DBSTARTUP = 102,
  __indexPWAIT_DB_STATE = 103,
  __indexPWAIT_SLEEP_MASTERMDREADY = 104,
  __indexPWAIT_SLEEP_MASTERUPGRADED = 105,
  __indexPWAIT_SLEEP_MASTERDBREADY = 106,
  __indexPWAIT_SLEEP_TEMPDBSTARTUP = 107,
  __indexPWAIT_SLEEP_DCOMSTARTUP = 108,
  __indexPWAIT_SLEEP_TASK = 109,
  __indexPWAIT_SLEEP_SYSTEMTASK = 110,
  __indexPWAIT_RESOURCE_SEMAPHORE = 111,
  __indexPWAIT_DTC = 112,
  __indexPWAIT_OLEDB = 113,
  __indexPWAIT_FAILPOINT = 114,
  __indexPWAIT_RESOURCE_QUEUE = 115,
  __indexPWAIT_ASYNC_DISKPOOL_LOCK = 116,
  __indexPWAIT_SOS_WORKER = 117,
  __indexPWAIT_HOLDER1 = 118,
  __indexPWAIT_DEBUG = 119,
  __indexPWAIT_REPLICA_WRITES = 120,
  __indexPWAIT_BROKER_RECEIVE_WAITFOR = 121,
  __indexPWAIT_DBMIRRORING_CMD = 122,
  __indexPWAIT_WAIT_FOR_RESULTS = 123,
  __indexPWAIT_SOS_SCHEDULER_YIELD = 124,
  __indexPWAIT_HOLDER2 = 125,
  __indexPWAIT_SOS_VIRTUALMEMORY_LOW = 126,
  __indexPWAIT_SOS_CALLBACK_REMOVAL = 127,
  __indexPWAIT_SOS_MEMORY_TOPLEVELBLOCKALLOCATOR = 128,
  __indexPWAIT_SOS_PHYS_PAGE_CACHE = 129,
  __indexPWAIT_ONDEMAND_TASK_QUEUE = 130,
  __indexPWAIT_LOGMGR_QUEUE = 131,
  __indexPWAIT_REQUEST_FOR_DEADLOCK_SEARCH = 132,
  __indexPWAIT_CHECKPOINT_QUEUE = 133,
  __indexPWAIT_PARALLEL_BACKUP_QUEUE = 134,
  __indexPWAIT_DUMP_LOG_COORDINATOR_QUEUE = 135,
  __indexPWAIT_LOWFAIL_MEMMGR_QUEUE = 136,
  __indexPWAIT_BACKUP = 137,
  __indexPWAIT_BACKUPBUFFER = 138,
  __indexPWAIT_BACKUPIO = 139,
  __indexPWAIT_BACKUPTHREAD = 140,
  __indexPWAIT_DBMIRROR_DBM_MUTEX = 141,
  __indexPWAIT_DBMIRROR_DBM_EVENT = 142,
  __indexPWAIT_DBMIRROR_SEND = 143,
  __indexPWAIT_DBMIRROR_EVENTS_QUEUE = 144,
  __indexPWAIT_DBMIRROR_WORKER_QUEUE = 145,
  __indexPWAIT_HOLDER3 = 146,
  __indexPWAIT_HTTP_START = 147,
  __indexPWAIT_HTTP_ENUMERATION = 148,
  __indexPWAIT_SOAP_READ = 149,
  __indexPWAIT_SOAP_WRITE = 150,
  __indexPWAIT_DUMP_LOG_COORDINATOR = 151,
  __indexPWAIT_DISKIO_SUSPEND = 152,
  __indexPWAIT_IMPPROV_IOWAIT = 153,
  __indexPWAIT_HOLDER4 = 154,
  __indexPWAIT_DEADLOCK_TASK_SEARCH = 155,
  __indexPWAIT_REPL_SCHEMA_ACCESS = 156,
  __indexPWAIT_REPL_CACHE_ACCESS = 157,
  __indexPWAIT_HOLDER5 = 158,
  __indexPWAIT_HOLDER6 = 159,
  __indexPWAIT_HOLDER7 = 160,
  __indexPWAIT_KSOURCE_WAKEUP = 161,
  __indexPWAIT_SQLSORT_SORTMUTEX = 162,
  __indexPWAIT_SQLSORT_NORMMUTEX = 163,
  __indexPWAIT_SQLTRACE_WAIT_ENTRIES = 164,
  __indexPWAIT_SQLTRACE_FILE_BUFFER = 165,
  __indexPWAIT_SQLTRACE_INCREMENTAL_FLUSH_SLEEP = 166,
  __indexPWAIT_SQLTRACE_SHUTDOWN = 167,
  __indexPWAIT_HOLDER8 = 168,
  __indexPWAIT_QUERY_TRACEOUT = 169,
  __indexPWAIT_DTC_STATE = 170,
  __indexPWAIT_HOLDER9 = 171,
  __indexPWAIT_HOLDER10 = 172,
  __indexPWAIT_BROKER_TRANSMITTER = 173,
  __indexPWAIT_BROKER_SERVICE = 174,
  __indexPWAIT_BROKER_SHUTDOWN = 175,
  __indexPWAIT_BROKER_MASTERSTART = 176,
  __indexPWAIT_BROKER_REGISTERALLENDPOINTS = 177,
  __indexPWAIT_BROKER_EVENTHANDLER = 178,
  __indexPWAIT_FCB_REPLICA_WRITE = 179,
  __indexPWAIT_FCB_REPLICA_READ = 180,
  __indexPWAIT_HOLDER11 = 181,
  __indexPWAIT_WRITELOG = 182,
  __indexPWAIT_HOLDER12 = 183,
  __indexPWAIT_EXCHANGE = 184,
  __indexPWAIT_HOLDER13 = 185,
  __indexPWAIT_EC = 186,
  __indexPWAIT_TEMPOBJ = 187,
  __indexPWAIT_XACTLOCKINFO = 188,
  __indexPWAIT_LOGMGR = 189,
  __indexPWAIT_CMEMTHREAD = 190,
  __indexPWAIT_CXPACKET = 191,
  __indexPWAIT_HASH_TABLE_REPARTITION = 192,
  __indexPWAIT_HASH_TABLE_BUILD = 193,
  __indexPWAIT_HASH_TABLE_MEMO = 194,
  __indexPWAIT_HASH_TABLE_DELETE = 195,
  __indexPWAIT_HASH_TABLE_REINIT = 196,
  __indexPWAIT_BITMAP_REPARTITION = 197,
  __indexPWAIT_BITMAP_ALLOCATION = 198,
  __indexPWAIT_BITMAP_REPLICATION = 199,
  __indexPWAIT_BITMAP_BUILD = 200,
  __indexPWAIT_SHUTDOWN = 201,
  __indexPWAIT_WAITFOR = 202,
  __indexPWAIT_HOLDER14 = 203,
  __indexPWAIT_EXECSYNC = 204,
  __indexPWAIT_DTCPNTSYNC = 205,
  __indexPWAIT_SOSHOST_INTERNAL = 206,
  __indexPWAIT_SOSHOST_SLEEP = 207,
  __indexPWAIT_SOSHOST_WAITFORDONE = 208,
  __indexPWAIT_SOSHOST_MUTEX = 209,
  __indexPWAIT_SOSHOST_EVENT = 210,
  __indexPWAIT_SOSHOST_SEMAPHORE = 211,
  __indexPWAIT_SOSHOST_RWLOCK = 212,
  __indexPWAIT_SOSHOST_TRACELOCK = 213,
  __indexPWAIT_MSQL_XP = 214,
  __indexPWAIT_MSQL_DQ = 215,
  __indexPWAIT_LOGBUFFER = 216,
  __indexPWAIT_TRANSACTION_MUTEX = 217,
  __indexPWAIT_SLEEP_MSDBSTARTUP = 218,
  __indexPWAIT_MSSEARCH_COM = 219,
  __indexPWAIT_XACTWORKSPACE_MUTEX = 220,
  __indexPWAIT_TRACEWRITE = 221,
  __indexPWAIT_WAITSTAT_MUTEX = 222,
  __indexPWAIT_TASKSHUTDOWN = 223,
  __indexPWAIT_HOLDER15 = 224,
  __indexPWAIT_WINFS_SHARES = 225,
  __indexPWAIT_GUARDIAN = 226,
  __indexPWAIT_CLR_TASK_START = 227,
  __indexPWAIT_CLR_TASK_JOIN = 228,
  __indexPWAIT_CLR_CRST = 229,
  __indexPWAIT_CLR_SEMAPHORE = 230,
  __indexPWAIT_CLR_MANUAL_EVENT = 231,
  __indexPWAIT_CLR_AUTO_EVENT = 232,
  __indexPWAIT_CLR_MONITOR = 233,
  __indexPWAIT_CLR_RWLOCK_READER = 234,
  __indexPWAIT_CLR_RWLOCK_WRITER = 235,
  __indexPWAIT_SQLCLR_QUANTUM_PUNISHMENT = 236,
  __indexPWAIT_SQLCLR_APPDOMAIN = 237,
  __indexPWAIT_SQLCLR_ASSEMBLY = 238,
  __indexPWAIT_KTM_ENLISTMENT = 239,
  __indexPWAIT_KTM_RECOVERY_RESOLUTION = 240,
  __indexPWAIT_KTM_RECOVERY_MANAGER = 241,
  __indexPWAIT_SQLCLR_DEADLOCK_DETECTION = 242,
  __indexPWAIT_QPJOB_WAITFOR_ABORT = 243,
  __indexPWAIT_QPJOB_KILL = 244,
  __indexPWAIT_BAD_PAGE_PROCESS = 245,
  __indexPWAIT_BACKUP_OPERATOR = 246,
  __indexPWAIT_PRINT_ROLLBACK_PROGRESS = 247,
  __indexPWAIT_ENABLE_VERSIONING = 248,
  __indexPWAIT_DISABLE_VERSIONING = 249,
  __indexPWAIT_REQUEST_DISPENSER_PAUSE = 250,
  __indexPWAIT_DROPTEMP = 251,
  __indexPWAIT_FT_RESTART_CRAWL = 252,
  __indexPWAIT_HOLDER16 = 253,
  __indexPWAIT_LOGMGR_RESERVE_APPEND = 254,
  __indexPWAIT_LOGMGR_FLUSH = 255,
  __indexPWAIT_XACT_OWN_TRANSACTION = 256,
  __indexPWAIT_XACT_RECLAIM_SESSION = 257,
  __indexPWAIT_DTC_WAITFOR_OUTCOME = 258,
  __indexPWAIT_DTC_RESOLVE = 259,
  __indexPWAIT_SEC_DROP_TEMP_KEY = 260,
  __indexPWAIT_SRVPROC_SHUTDOWN = 261,
  __indexPWAIT_BROKER_INIT = 262,
  __indexPWAIT_BROKER_CONNECTION_RECEIVE_TASK = 263,
  __indexPWAIT_NET_WAITFOR_PACKET = 264,
  __indexPWAIT_DTC_ABORT_REQUEST = 265,
  __indexPWAIT_DTC_TMDOWN_REQUEST = 266,
  __indexPWAIT_RECOVER_CHANGEDB = 267,
  __indexPWAIT_WORKTBL_DROP = 268,
  __indexPWAIT_HOLDER17 = 269,
  __indexPWAIT_HOLDER18 = 270,
  __indexPWAIT_SNI_HTTP_WAITFOR_0_DISCON = 271,
  __indexPWAIT_UTIL_PAGE_ALLOC = 272,
  __indexPWAIT_SERVER_IDLE_LOCK = 273,
  __indexPWAIT_HOLDER19 = 274,
  __indexPWAIT_DEADLOCK_ENUM_MUTEX = 275,
  __indexPWAIT_HOLDER20 = 276,
  __indexPWAIT_VIEW_DEFINITION_MUTEX = 277,
  __indexPWAIT_QUERY_NOTIFICATION_MGR_MUTEX = 278,
  __indexPWAIT_QUERY_NOTIFICATION_TABLE_MGR_MUTEX = 279,
  __indexPWAIT_QUERY_NOTIFICATION_SUBSCRIPTION_MUTEX = 280,
  __indexPWAIT_QUERY_NOTIFICATION_UNITTEST_MUTEX = 281,
  __indexPWAIT_HOLDER21 = 282,
  __indexPWAIT_RESOURCE_SEMAPHORE_MUTEX = 283,
  __indexPWAIT_IO_AUDIT_MUTEX = 284,
  __indexPWAIT_BUILTIN_HASHKEY_MUTEX = 285,
  __indexPWAIT_SOS_PROCESS_AFFINITY_MUTEX = 286,
  __indexPWAIT_MSQL_XACT_MGR_MUTEX = 287,
  __indexPWAIT_MSQL_XACT_MUTEX = 288,
  __indexPWAIT_QRY_MEM_GRANT_INFO_MUTEX = 289,
  __indexPWAIT_SNI_CRITICAL_SECTION = 290,
  __indexPWAIT_SOS_STACKSTORE_INIT_MUTEX = 291,
  __indexPWAIT_SOS_SYNC_TASK_ENQUEUE_EVENT = 292,
  __indexPWAIT_SOS_OBJECT_STORE_DESTROY_MUTEX = 293,
  __indexPWAIT_EE_PMOLOCK = 294,
  __indexPWAIT_QUERY_OPTIMIZER_PRINT_MUTEX = 295,
  __indexPWAIT_DLL_LOAD = 296,
  __indexPWAIT_RESOURCE_SEMAPHORE_QUERY_COMPILE = 297,
  __indexPWAIT_BROKER_ENDPOINT_STATE_MUTEX = 298,
  __indexPWAIT_QUERY_EXEC_INDEXSORT_OPEN = 299,
  __indexPWAIT_ERROR_REPORTING_MGR = 300,
  __indexPWAIT_EE_SPECPROC_MAP_INIT = 301,
  __indexPWAIT_FULLTEXT_GATHERER = 302,
  __indexPWAIT_SE_REPL_COMMIT_ACK = 303,
  __indexPWAIT_SE_REPL_ROLLBACK_ACK = 304,
  __indexPWAIT_SE_REPL_CSN_VECTOR = 305,
  __indexPWAIT_SE_REPL_QUEUE = 306,
  __indexPWAIT_SE_REPL_THROTTLE = 307,
  __indexPWAIT_SE_REPL_WAIT_FOR_ENOUGH_SECONDARIES = 308,
  __indexPWAIT_SE_REPL_WAIT_PRIMARY_FAILURE = 309,
  __indexPWAIT_ASYNC_TRANSPORT_DISPATCH = 310,
  __indexPWAIT_ASYNC_TRANSPORT_PERIODIC_WORK = 311,
  __indexPWAIT_ASYNC_TRANSPORT_CONNECTION_DISPATCH = 312,
  __indexPWAIT_ASYNC_TRANSPORT_STREAM = 313,
  __indexPWAIT_ASYNC_TRANSPORT_FLOW_CONTROL = 314,
  __indexPWAIT_ASYNC_TRANSPORT_TASK_ABORT = 315,
  __indexPWAIT_ASYNC_TRANSPORT_DISPATCH_MUTEX = 316,
  __indexPWAIT_SE_REPL_SECONDARY_CLOSED = 317,
  __indexPWAIT_SE_REPL_SECONDARY_CATCHUP_COMPLETE = 318,
  __indexPWAIT_SE_REPL_SPECIFIC_SECONDARY_FLUSH = 319,
  __indexPWAIT_SE_REPL_KILL_SYNCHRONIZE = 320,
  __indexPWAIT_SE_REPL_PARTITION_EVENT = 321,
  __indexPWAIT_SE_REPL_COMMIT_TURN = 322,
  __indexPWAIT_SE_REPL_CSN_ALLOC_TURN = 323,
  __indexPWAIT_SE_REPL_DEFERRED_COMMIT_TURN = 324,
  __indexPWAIT_SE_REPL_SECONDARY_XACT = 325,
  __indexPWAIT_SE_REPL_WORKER_POOL_MGMT = 326,
  __indexPWAIT_CLOUD_FABRIC_PAIRUP = 327,
  __indexPWAIT_CLOUD_FABRIC_WAIT = 328,
  __indexPWAIT_CLOUD_FABRIC_RELEASE_ALL = 329,
  __indexPWAIT_CLOUD_FABRIC_ENQUEUE = 330,
  __indexPWAIT_SE_REPL_DELETE_COMPLETE = 331,
  __indexPWAIT_SE_REPL_LOG_TRUNC = 332,
  __indexPWAIT_SE_REPL_BACKGROUND = 333,
  __indexPWAIT_SE_REPL_BACKGROUND_FORWARDER = 334,
  __indexPWAIT_SE_REPL_METADATA_COMPLETE_ACK = 335,
  __indexPWAIT_SE_REPL_PARTIAL_XACT_DRAIN_ACK = 336,
  __indexPWAIT_SE_REPL_FLOW_CONTROL = 337,
  __indexPWAIT_SE_REPL_ITEM_COMPLETION = 338,
  __indexPWAIT_SE_REPL_METADATA_COMPLETION = 339,
  __indexPWAIT_SE_REPL_PREPARE_COPY_FROM_PRIMARY = 340,
  __indexPWAIT_SE_REPL_DISPATCH_ITEM_COMPLETION = 341,
  __indexPWAIT_SE_REPL_BACKGROUND_KILL = 342,
  __indexPWAIT_FABRIC_PAIRING = 343,
  __indexPWAIT_SE_REPL_ROWSET_METADATA = 344,
  __indexPWAIT_SE_REPL_SECONDARY_XACT_REMOTE_KILL = 345,
  __indexPWAIT_SE_REPL_SECONDARY_CATCHUP_YIELD = 346,
  __indexPWAIT_SEQUENTIAL_GUID = 347,
  __indexPWAIT_SSB_TASK_STOP = 348,
  __indexPWAIT_SSB_TASK_SHUTDOWN = 349,
  __indexPWAIT_SSB_TASK_SUBMIT = 350,
  __indexPWAIT_SNI_WAIT_TASK_FINISH = 351,
  __indexPWAIT_LISTENER_UPDATE = 352,
  __indexPWAIT_TWO_THREAD_PIPE_EVENT = 353,
  __indexPWAIT_CLR_MEMORY_SPY_ACCESS = 354,
  __indexPWAIT_CLRHOST_STATE_ACCESS = 355,
  __indexPWAIT_DAC_INIT = 356,
  __indexPWAIT_ASSEMBLY_LOAD = 357,
  __indexPWAIT_VIA_ACCEPT_DONE = 358,
  __indexPWAIT_CHECK_PRINT_RECORD = 359,
  __indexPWAIT_TESTING = 360,
  __indexPWAIT_SCAN_CHAR_HASH_ARRAY_INIT = 361,
  __indexPWAIT_YUKON_RESERVED14 = 362,
  __indexPWAIT_YUKON_RESERVED15 = 363,
  __indexPWAIT_YUKON_RESERVED16 = 364,
  __indexPWAIT_YUKON_RESERVED17 = 365,
  __indexPWAIT_YUKON_RESERVED18 = 366,
  __indexPWAIT_YUKON_RESERVED19 = 367,
  __indexPWAIT_YUKON_RESERVED20 = 368,
  __indexPWAIT_YUKON_RESERVED21 = 369,
  __indexPWAIT_YUKON_RESERVED22 = 370,
  __indexPWAIT_YUKON_RESERVED23 = 371,
  __indexPWAIT_YUKON_RESERVED24 = 372,
  __indexPWAIT_YUKON_RESERVED25 = 373,
  __indexPWAIT_YUKON_RESERVED26 = 374,
  __indexPWAIT_YUKON_RESERVED27 = 375,
  __indexPWAIT_YUKON_RESERVED28 = 376,
  __indexPWAIT_YUKON_RESERVED29 = 377,
  __indexPWAIT_YUKON_RESERVED30 = 378,
  __indexPWAIT_YUKON_RESERVED31 = 379,
  __indexPWAIT_YUKON_RESERVED32 = 380,
  __indexPWAIT_FS_GARBAGE_COLLECTOR_SHUTDOWN = 381,
  __indexPWAIT_FSAGENT = 382,
  __indexPWAIT_FILESTREAM_WORKITEM_QUEUE = 383,
  __indexPWAIT_FILESTREAM_FILE_OBJECT = 384,
  __indexPWAIT_FILESTREAM_FCB = 385,
  __indexPWAIT_FILESTREAM_CACHE = 386,
  __indexPWAIT_ABR = 387,
  __indexPWAIT_WCC = 388,
  __indexPWAIT_DUMPTRIGGER = 389,
  __indexPWAIT_REMOTEBRICKS = 390,
  __indexPWAIT_ERRHDL_SVC = 391,
  __indexPWAIT_TIMEPRIV_TIMEPERIOD = 392,
  __indexPWAIT_DISPATCHER_QUEUE_SEMAPHORE = 393,
  __indexPWAIT_XE_MODULEMGR_SYNC = 394,
  __indexPWAIT_XE_STM_CREATE = 395,
  __indexPWAIT_XE_SESSION_SYNC = 396,
  __indexPWAIT_XE_SESSION_CREATE_SYNC = 397,
  __indexPWAIT_XE_SERVICES_MUTEX = 398,
  __indexPWAIT_XE_SERVICES_RWLOCK = 399,
  __indexPWAIT_XE_SERVICES_EVENTMANUAL = 400,
  __indexPWAIT_XE_OLS_LOCK = 401,
  __indexPWAIT_SOS_DISPATCHER_MUTEX = 402,
  __indexPWAIT_XE_BUFFERMGR_FREEBUF_EVENT = 403,
  __indexPWAIT_XE_BUFFERMGR_ALLPROCESSED_EVENT = 404,
  __indexPWAIT_XE_DISPATCHER_JOIN = 405,
  __indexPWAIT_XE_TIMER_MUTEX = 406,
  __indexPWAIT_XE_TIMER_EVENT = 407,
  __indexPWAIT_XE_TIMER_TASK_DONE = 408,
  __indexPWAIT_XE_DISPATCHER_WAIT = 409,
  __indexPWAIT_XE_DISPATCHER_CONFIG_SESSION_LIST = 410,
  __indexPWAIT_XE_SESSION_FLUSH = 411,
  __indexPWAIT_XE_CALLBACK = 412,
  __indexPWAIT_BROKER_TO_FLUSH = 413,
  __indexPWAIT_NODE_CACHE_MUTEX = 414,
  __indexPWAIT_RG_RECONFIG = 415,
  __indexPWAIT_RESMGR_THROTTLED = 416,
  __indexPWAIT_SOS_MEMORY_USAGE_ADJUSTMENT = 417,
  __indexPWAIT_SECURITY_MUTEX = 418,
  __indexPWAIT_FS_HEADER_RWLOCK = 419,
  __indexPWAIT_FS_LOGTRUNC_RWLOCK = 420,
  __indexPWAIT_FS_GC_RWLOCK = 421,
  __indexPWAIT_FSTR_CONFIG_RWLOCK = 422,
  __indexPWAIT_FSTR_CONFIG_MUTEX = 423,
  __indexPWAIT_FSA_FORCE_OWN_XACT = 424,
  __indexPWAIT_COMMIT_TABLE = 425,
  __indexPWAIT_CXROWSET_SYNC = 426,
  __indexPWAIT_PREEMPTIVE_OS_GENERICOPS = 427,
  __indexPWAIT_PREEMPTIVE_OS_AUTHENTICATIONOPS = 428,
  __indexPWAIT_PREEMPTIVE_OS_ACCEPTSECURITYCONTEXT = 429,
  __indexPWAIT_PREEMPTIVE_OS_ACQUIRECREDENTIALSHANDLE = 430,
  __indexPWAIT_PREEMPTIVE_OS_COMPLETEAUTHTOKEN = 431,
  __indexPWAIT_PREEMPTIVE_OS_DECRYPTMESSAGE = 432,
  __indexPWAIT_PREEMPTIVE_OS_DELETESECURITYCONTEXT = 433,
  __indexPWAIT_PREEMPTIVE_OS_ENCRYPTMESSAGE = 434,
  __indexPWAIT_PREEMPTIVE_OS_FREECREDENTIALSHANDLE = 435,
  __indexPWAIT_PREEMPTIVE_OS_INITIALIZESECURITYCONTEXT = 436,
  __indexPWAIT_PREEMPTIVE_OS_LOGONUSER = 437,
  __indexPWAIT_PREEMPTIVE_OS_QUERYSECURITYCONTEXTTOKEN = 438,
  __indexPWAIT_PREEMPTIVE_OS_QUERYCONTEXTATTRIBUTES = 439,
  __indexPWAIT_PREEMPTIVE_OS_VERIFYSIGNATURE = 440,
  __indexPWAIT_PREEMPTIVE_OS_AUTHORIZATIONOPS = 441,
  __indexPWAIT_PREEMPTIVE_OS_AUTHZGETINFORMATIONFROMCONTEXT = 442,
  __indexPWAIT_PREEMPTIVE_OS_AUTHZINITIALIZECONTEXTFROMSID = 443,
  __indexPWAIT_PREEMPTIVE_OS_AUTHZINITIALIZERESOURCEMANAGER = 444,
  __indexPWAIT_PREEMPTIVE_OS_LOOKUPACCOUNTSID = 445,
  __indexPWAIT_PREEMPTIVE_OS_REVERTTOSELF = 446,
  __indexPWAIT_PREEMPTIVE_OS_SETNAMEDSECURITYINFO = 447,
  __indexPWAIT_PREEMPTIVE_OS_CLUSTEROPS = 448,
  __indexPWAIT_PREEMPTIVE_CLUSAPI_CLUSTERRESOURCECONTROL = 449,
  __indexPWAIT_PREEMPTIVE_OS_COMOPS = 450,
  __indexPWAIT_PREEMPTIVE_COM_COCREATEINSTANCE = 451,
  __indexPWAIT_PREEMPTIVE_COM_COGETCLASSOBJECT = 452,
  __indexPWAIT_PREEMPTIVE_COM_CREATEACCESSOR = 453,
  __indexPWAIT_PREEMPTIVE_COM_DELETEROWS = 454,
  __indexPWAIT_PREEMPTIVE_COM_GETCOMMANDTEXT = 455,
  __indexPWAIT_PREEMPTIVE_COM_GETDATA = 456,
  __indexPWAIT_PREEMPTIVE_COM_GETNEXTROWS = 457,
  __indexPWAIT_PREEMPTIVE_COM_GETRESULT = 458,
  __indexPWAIT_PREEMPTIVE_COM_GETROWSBYBOOKMARK = 459,
  __indexPWAIT_PREEMPTIVE_COM_LBFLUSH = 460,
  __indexPWAIT_PREEMPTIVE_COM_LBLOCKREGION = 461,
  __indexPWAIT_PREEMPTIVE_COM_LBREADAT = 462,
  __indexPWAIT_PREEMPTIVE_COM_LBSETSIZE = 463,
  __indexPWAIT_PREEMPTIVE_COM_LBSTAT = 464,
  __indexPWAIT_PREEMPTIVE_COM_LBUNLOCKREGION = 465,
  __indexPWAIT_PREEMPTIVE_COM_LBWRITEAT = 466,
  __indexPWAIT_PREEMPTIVE_COM_QUERYINTERFACE = 467,
  __indexPWAIT_PREEMPTIVE_COM_RELEASE = 468,
  __indexPWAIT_PREEMPTIVE_COM_RELEASEACCESSOR = 469,
  __indexPWAIT_PREEMPTIVE_COM_RELEASEROWS = 470,
  __indexPWAIT_PREEMPTIVE_COM_RELEASESESSION = 471,
  __indexPWAIT_PREEMPTIVE_COM_RESTARTPOSITION = 472,
  __indexPWAIT_PREEMPTIVE_COM_SEQSTRMREAD = 473,
  __indexPWAIT_PREEMPTIVE_COM_SEQSTRMREADANDWRITE = 474,
  __indexPWAIT_PREEMPTIVE_COM_SETDATAFAILURE = 475,
  __indexPWAIT_PREEMPTIVE_COM_SETPARAMETERINFO = 476,
  __indexPWAIT_PREEMPTIVE_COM_SETPARAMETERPROPERTIES = 477,
  __indexPWAIT_PREEMPTIVE_COM_STRMLOCKREGION = 478,
  __indexPWAIT_PREEMPTIVE_COM_STRMSEEKANDREAD = 479,
  __indexPWAIT_PREEMPTIVE_COM_STRMSEEKANDWRITE = 480,
  __indexPWAIT_PREEMPTIVE_COM_STRMSETSIZE = 481,
  __indexPWAIT_PREEMPTIVE_COM_STRMSTAT = 482,
  __indexPWAIT_PREEMPTIVE_COM_STRMUNLOCKREGION = 483,
  __indexPWAIT_PREEMPTIVE_OS_CRYPTOPS = 484,
  __indexPWAIT_PREEMPTIVE_OS_CRYPTACQUIRECONTEXT = 485,
  __indexPWAIT_PREEMPTIVE_OS_CRYPTIMPORTKEY = 486,
  __indexPWAIT_PREEMPTIVE_OS_DEVICEOPS = 487,
  __indexPWAIT_PREEMPTIVE_OS_RSFXDEVICEOPS = 488,
  __indexPWAIT_PREEMPTIVE_OS_DIRSVC_NETWORKOPS = 489,
  __indexPWAIT_PREEMPTIVE_OS_DSGETDCNAME = 490,
  __indexPWAIT_PREEMPTIVE_OS_NETGROUPGETUSERS = 491,
  __indexPWAIT_PREEMPTIVE_OS_NETLOCALGROUPGETMEMBERS = 492,
  __indexPWAIT_PREEMPTIVE_OS_NETUSERGETGROUPS = 493,
  __indexPWAIT_PREEMPTIVE_OS_NETUSERGETLOCALGROUPS = 494,
  __indexPWAIT_PREEMPTIVE_OS_NETUSERMODALSGET = 495,
  __indexPWAIT_PREEMPTIVE_OS_NETVALIDATEPASSWORDPOLICY = 496,
  __indexPWAIT_PREEMPTIVE_OS_NETVALIDATEPASSWORDPOLICYFREE = 497,
  __indexPWAIT_PREEMPTIVE_OS_DOMAINSERVICESOPS = 498,
  __indexPWAIT_PREEMPTIVE_OS_DTCOPS = 499,
  __indexPWAIT_PREEMPTIVE_DTC_ABORT = 500,
  __indexPWAIT_PREEMPTIVE_DTC_ABORTREQUESTDONE = 501,
  __indexPWAIT_PREEMPTIVE_DTC_BEGINTRANSACTION = 502,
  __indexPWAIT_PREEMPTIVE_DTC_COMMITREQUESTDONE = 503,
  __indexPWAIT_PREEMPTIVE_DTC_ENLIST = 504,
  __indexPWAIT_PREEMPTIVE_DTC_PREPAREREQUESTDONE = 505,
  __indexPWAIT_PREEMPTIVE_OS_FILEOPS = 506,
  __indexPWAIT_PREEMPTIVE_OS_CLOSEHANDLE = 507,
  __indexPWAIT_PREEMPTIVE_OS_COPYFILE = 508,
  __indexPWAIT_PREEMPTIVE_OS_CREATEDIRECTORY = 509,
  __indexPWAIT_PREEMPTIVE_OS_CREATEFILE = 510,
  __indexPWAIT_PREEMPTIVE_OS_DELETEFILE = 511,
  __indexPWAIT_PREEMPTIVE_OS_DEVICEIOCONTROL = 512,
  __indexPWAIT_PREEMPTIVE_OS_FINDFILE = 513,
  __indexPWAIT_PREEMPTIVE_FILESIZEGET = 514,
  __indexPWAIT_PREEMPTIVE_OS_FLUSHFILEBUFFERS = 515,
  __indexPWAIT_PREEMPTIVE_OS_GETCOMPRESSEDFILESIZE = 516,
  __indexPWAIT_PREEMPTIVE_OS_GETDISKFREESPACE = 517,
  __indexPWAIT_PREEMPTIVE_OS_GETFILEATTRIBUTES = 518,
  __indexPWAIT_PREEMPTIVE_OS_GETFILESIZE = 519,
  __indexPWAIT_PREEMPTIVE_OS_GETLONGPATHNAME = 520,
  __indexPWAIT_PREEMPTIVE_OS_GETVOLUMEPATHNAME = 521,
  __indexPWAIT_PREEMPTIVE_OS_GETVOLUMENAMEFORVOLUMEMOUNTPOINT = 522,
  __indexPWAIT_PREEMPTIVE_OS_MOVEFILE = 523,
  __indexPWAIT_PREEMPTIVE_OS_OPENDIRECTORY = 524,
  __indexPWAIT_PREEMPTIVE_OS_REMOVEDIRECTORY = 525,
  __indexPWAIT_PREEMPTIVE_OS_SETENDOFFILE = 526,
  __indexPWAIT_PREEMPTIVE_OS_SETFILEPOINTER = 527,
  __indexPWAIT_PREEMPTIVE_OS_SETFILEVALIDDATA = 528,
  __indexPWAIT_PREEMPTIVE_OS_WRITEFILE = 529,
  __indexPWAIT_PREEMPTIVE_OS_WRITEFILEGATHER = 530,
  __indexPWAIT_PREEMPTIVE_OS_LIBRARYOPS = 531,
  __indexPWAIT_PREEMPTIVE_OS_FREELIBRARY = 532,
  __indexPWAIT_PREEMPTIVE_OS_GETPROCADDRESS = 533,
  __indexPWAIT_PREEMPTIVE_OS_LOADLIBRARY = 534,
  __indexPWAIT_PREEMPTIVE_OS_MESSAGEQUEUEOPS = 535,
  __indexPWAIT_PREEMPTIVE_ODBCOPS = 536,
  __indexPWAIT_PREEMPTIVE_OLEDBOPS = 537,
  __indexPWAIT_PREEMPTIVE_OLEDB_ABORTTRAN = 538,
  __indexPWAIT_PREEMPTIVE_OLEDB_ABORTORCOMMITTRAN = 539,
  __indexPWAIT_PREEMPTIVE_OLEDB_GETDATASOURCE = 540,
  __indexPWAIT_PREEMPTIVE_OLEDB_GETLITERALINFO = 541,
  __indexPWAIT_PREEMPTIVE_OLEDB_GETPROPERTIES = 542,
  __indexPWAIT_PREEMPTIVE_OLEDB_GETPROPERTYINFO = 543,
  __indexPWAIT_PREEMPTIVE_OLEDB_GETSCHEMALOCK = 544,
  __indexPWAIT_PREEMPTIVE_OLEDB_JOINTRANSACTION = 545,
  __indexPWAIT_PREEMPTIVE_OLEDB_RELEASE = 546,
  __indexPWAIT_PREEMPTIVE_OLEDB_SETPROPERTIES = 547,
  __indexPWAIT_PREEMPTIVE_OS_PIPEOPS = 548,
  __indexPWAIT_PREEMPTIVE_OS_DISCONNECTNAMEDPIPE = 549,
  __indexPWAIT_PREEMPTIVE_OS_PROCESSOPS = 550,
  __indexPWAIT_PREEMPTIVE_OS_SECURITYOPS = 551,
  __indexPWAIT_PREEMPTIVE_OS_SERVICEOPS = 552,
  __indexPWAIT_PREEMPTIVE_OS_SQLCLROPS = 553,
  __indexPWAIT_PREEMPTIVE_OS_WINSOCKOPS = 554,
  __indexPWAIT_PREEMPTIVE_OS_GETADDRINFO = 555,
  __indexPWAIT_PREEMPTIVE_OS_WSASETLASTERROR = 556,
  __indexPWAIT_PREEMPTIVE_OS_FORMATMESSAGE = 557,
  __indexPWAIT_PREEMPTIVE_OS_REPORTEVENT = 558,
  __indexPWAIT_PREEMPTIVE_OS_BACKUPREAD = 559,
  __indexPWAIT_PREEMPTIVE_OS_WAITFORSINGLEOBJECT = 560,
  __indexPWAIT_PREEMPTIVE_OS_QUERYREGISTRY = 561,
  __indexPWAIT_PREEMPTIVE_CLOSEBACKUPMEDIA = 562,
  __indexPWAIT_PREEMPTIVE_CLOSEBACKUPTAPE = 563,
  __indexPWAIT_PREEMPTIVE_CLOSEBACKUPVDIDEVICE = 564,
  __indexPWAIT_PREEMPTIVE_OS_VSSOPS = 565,
  __indexPWAIT_PREEMPTIVE_VSS_CREATESNAPSHOT = 566,
  __indexPWAIT_PREEMPTIVE_VSS_CREATEVOLUMESNAPSHOT = 567,
  __indexPWAIT_PREEMPTIVE_DFSADDLINK = 568,
  __indexPWAIT_PREEMPTIVE_DFSLINKEXISTCHECK = 569,
  __indexPWAIT_PREEMPTIVE_DFSLINKHEALTHCHECK = 570,
  __indexPWAIT_PREEMPTIVE_DFSREMOVELINK = 571,
  __indexPWAIT_PREEMPTIVE_DFSREMOVEROOT = 572,
  __indexPWAIT_PREEMPTIVE_DFSROOTFOLDERCHECK = 573,
  __indexPWAIT_PREEMPTIVE_DFSROOTINIT = 574,
  __indexPWAIT_PREEMPTIVE_DFSROOTSHARECHECK = 575,
  __indexPWAIT_PREEMPTIVE_OLE_UNINIT = 576,
  __indexPWAIT_PREEMPTIVE_FSAOLEDB_ABORTTRANSACTION = 577,
  __indexPWAIT_PREEMPTIVE_FSAOLEDB_COMMITTRANSACTION = 578,
  __indexPWAIT_PREEMPTIVE_FSAOLEDB_STARTTRANSACTION = 579,
  __indexPWAIT_PREEMPTIVE_FSRECOVER_CONDITIONALUNDO = 580,
  __indexPWAIT_PREEMPTIVE_SERVER_STARTUP = 581,
  __indexPWAIT_PREEMPTIVE_SHAREDMEM_GETDATA = 582,
  __indexPWAIT_PREEMPTIVE_CONSOLEWRITE = 583,
  __indexPWAIT_PREEMPTIVE_SQMLAUNCH = 584,
  __indexPWAIT_PREEMPTIVE_TESTING = 585,
  __indexPWAIT_PREEMPTIVE_SOSHOST = 586,
  __indexPWAIT_PREEMPTIVE_SOSTESTING = 587,
  __indexPWAIT_PREEMPTIVE_XETESTING = 588,
  __indexPWAIT_PREEMPTIVE_SB_STOPENDPOINT = 589,
  __indexPWAIT_PREEMPTIVE_STARTRM = 590,
  __indexPWAIT_PREEMPTIVE_GETRMINFO = 591,
  __indexPWAIT_PREEMPTIVE_SETRMINFO = 592,
  __indexPWAIT_PREEMPTIVE_ROLLFORWARDREDO = 593,
  __indexPWAIT_PREEMPTIVE_ROLLFORWARDUNDO = 594,
  __indexPWAIT_PREEMPTIVE_RESIZELOG = 595,
  __indexPWAIT_PREEMPTIVE_REENLIST = 596,
  __indexPWAIT_PREEMPTIVE_TRANSIMPORT = 597,
  __indexPWAIT_PREEMPTIVE_UNMARSHALPROPAGATIONTOKEN = 598,
  __indexPWAIT_PREEMPTIVE_CREATEPARAM = 599,
  __indexPWAIT_PREEMPTIVE_STREAMFCB_RECOVER = 600,
  __indexPWAIT_PREEMPTIVE_STREAMFCB_CHECKPOINT = 601,
  __indexPWAIT_PREEMPTIVE_XE_CALLBACKEXECUTE = 602,
  __indexPWAIT_PREEMPTIVE_XE_DISPATCHER = 603,
  __indexPWAIT_PREEMPTIVE_XE_ENGINEINIT = 604,
  __indexPWAIT_PREEMPTIVE_XE_GETTARGETSTATE = 605,
  __indexPWAIT_PREEMPTIVE_XE_SESSIONCOMMIT = 606,
  __indexPWAIT_PREEMPTIVE_XE_TARGETFINALIZE = 607,
  __indexPWAIT_PREEMPTIVE_XE_TARGETINIT = 608,
  __indexPWAIT_PREEMPTIVE_XE_TIMERRUN = 609,
  __indexPWAIT_PREEMPTIVE_SNIOPEN = 610,
  __indexPWAIT_PREEMPTIVE_DEBUG = 611,
  __indexPWAIT_PREEMPTIVE_MSS_RELEASE = 612,
  __indexPWAIT_PREEMPTIVE_LOCKMONITOR = 613,
  __indexPWAIT_PREEMPTIVE_STRESSDRIVER = 614,
  __indexPWAIT_CLEAR_DB = 615,
  __indexPWAIT_PREEMPTIVE_ABR = 616,
  __indexPWAIT_RPCRESPONSE = 617,
  __indexPWAIT_CHANNELMAPLIST = 618,
  __indexPWAIT_LOGGENERATION = 619,
  __indexPWAIT_TCM_SYNCHRONIZATION = 620,
  __indexPWAIT_CM_FC_QUEUE_MANAGER = 621,
  __indexPWAIT_CM_FC_AGENT = 622,
  __indexPWAIT_CM_FORCED_CLOSE_SVC = 623,
  __indexPWAIT_RPC_COMMAND = 624,
  __indexPWAIT_MATRIXCOMM_FC = 625,
  __indexPWAIT_MATRIXCOMM_EXPIRE = 626,
  __indexPWAIT_MATRIXCOMM_EXPIRE_RUNDOWN = 627,
  __indexPWAIT_CM_SHUTDOWN = 628,
  __indexPWAIT_CM_DIRECTORY = 629,
  __indexPWAIT_CM_CONFIG = 630,
  __indexPWAIT_CM_NOTIFICATION = 631,
  __indexPWAIT_CM_MAIN = 632,
  __indexPWAIT_CMA_MAIN = 633,
  __indexPWAIT_CM_STATE = 634,
  __indexPWAIT_CMA_STATE = 635,
  __indexPWAIT_STP_RESERVE_BRICK = 636,
  __indexPWAIT_STP_UNRESERVE_BRICK = 637,
  __indexPWAIT_TCMA_XACT_WAITFOR_COMMIT = 638,
  __indexPWAIT_TCMA_XACT_WAITFOR_ROLLBACK = 639,
  __indexPWAIT_TCM_WAITFOR_SHUTDOWN = 640,
  __indexPWAIT_TCM_DEDICATED_THREAD = 641,
  __indexPWAIT_TCMA_XACT_WAITFOR_COMMIT_NO_MGR = 642,
  __indexPWAIT_IO_RETRY = 643,
  __indexPWAIT_WRITE_COMPLETION = 644,
  __indexPWAIT_AUDIT_XE_SESSION_MGR = 645,
  __indexPWAIT_AUDIT_ON_DEMAND_TARGET_LOCK = 646,
  __indexPWAIT_PREEMPTIVE_AUDIT_ACCESS_WINDOWSLOG = 647,
  __indexPWAIT_AUDIT_LOGINCACHE_LOCK = 648,
  __indexPWAIT_AUDIT_GROUPCACHE_LOCK = 649,
  __indexPWAIT_FT_METADATA_MUTEX = 650,
  __indexPWAIT_FT_IFTSHC_MUTEX = 651,
  __indexPWAIT_FT_IFTSISM_MUTEX = 652,
  __indexPWAIT_FT_RWLOCK = 653,
  __indexPWAIT_FT_COMPROWSET_RWLOCK = 654,
  __indexPWAIT_FT_MASTER_MERGE = 655,
  __indexPWAIT_TRACE_EVTNOTIF = 656,
  __indexPWAIT_SOS_SMALL_PAGE_ALLOC = 657,
  __indexPWAIT_METADATA_LAZYCACHE_RWLOCK = 658,
  __indexPWAIT_METADATA_AGENT_YIELD = 659,
  __indexPWAIT_IOAFF_RANGE_QUEUE = 660,
  __indexPWAIT_FT_SCHEDULER_IDLE_WAIT = 661,
  __indexPWAIT_REPL_HISTORYCACHE_ACCESS = 662,
  __indexPWAIT_REPL_TRANHASHTABLE_ACCESS = 663,
  __indexPWAIT_REPL_TRANTEXTINFO_ACCESS = 664,
  __indexPWAIT_REPL_TRANFSINFO_ACCESS = 665,
  __indexPWAIT_SERVER_RECONFIGURE = 666,
  __indexPWAIT_CHANGE_TRACKING_WAITFORCHANGES = 667,
  __indexPWAIT_ERRHDL_OUTBOX_MUTEX = 668,
  __indexPWAIT_QD_CREATE = 669,
  __indexPWAIT_QD_AGGREGATION = 670,
  __indexPWAIT_MD_RELATION_CACHE = 671,
  __indexPWAIT_MD_SERVER_CACHE = 672,
  __indexPWAIT_MD_LOGIN_STATS = 673,
  __indexPWAIT_PRISM_ASYNC_OPERATION_COMPLETION = 674,
  __indexPWAIT_DISPATCHER_PRIORITY_QUEUE_SEMAPHORE = 675,
  __indexPWAIT_MATRIXCHANNEL_START = 676,
  __indexPWAIT_MATRIXFABRIC_WORKSPACE_CANCEL_TASKABORT = 677,
  __indexPWAIT_MATRIXFABRIC_RECEIVEMSG = 678,
  __indexPWAIT_MATRIXFABRIC_JOINRESPONSE = 679,
  __indexPWAIT_MATRIXFABRIC_OBJECT_REGISTRATION = 680,
  __indexPWAIT_MATRIXMCI_NETWORK_IO = 681,
  __indexPWAIT_MATRIXMCI_TASK_JOIN = 682,
  __indexPWAIT_MATRIXMCI_CLOSE = 683,
  __indexPWAIT_MATRIXMCI_RECEIVEMSG = 684,
  __indexPWAIT_MATRIXMCI_RECV_PKT = 685,
  __indexPWAIT_MATRIXMCI_ERRORNOTIFY = 686,
  __indexPWAIT_MATRIXMCI_PIPESTATE = 687,
  __indexPWAIT_MATRIXMCI_PIPE_IO = 688,
  __indexPWAIT_MATRIXMCI_SSPI_SRV = 689,
  __indexPWAIT_MATRIXMCI_SSPI_CLI = 690,
  __indexPWAIT_MATRIXMCI_CONN_VALIDATION = 691,
  __indexPWAIT_MATRIXMCI_CONN_CLOSE = 692,
  __indexPWAIT_FT_PROPERTYLIST_CACHE = 693,
  __indexPWAIT_PERFORMANCE_COUNTERS_RWLOCK = 694,
  __indexPWAIT_HIGHSEVERR_CONFIG_LOCK = 695,
  __indexPWAIT_SECURITY_KEYRING_RWLOCK = 696,
  __indexPWAIT_SFW_SPLIST = 697,
  __indexPWAIT_SFW_XPLIST = 698,
  __indexPWAIT_SFW_BUILTINLIST = 699,
  __indexPWAIT_SQLTRACE_FILE_WRITE_IO_COMPLETION = 700,
  __indexPWAIT_SQLTRACE_FILE_READ_IO_COMPLETION = 701,
  __indexPWAIT_SQLTRACE_PENDING_BUFFER_WRITERS = 702,
  __indexPWAIT_PREEMPTIVE_OS_PDH_WMI_INIT = 703,
  __indexPWAIT_BROKER_TRANSMISSION_WORK = 704,
  __indexPWAIT_BROKER_TRANSMISSION_OBJECT = 705,
  __indexPWAIT_BROKER_TRANSMISSION_TABLE = 706,
  __indexPWAIT_BROKER_DISPATCHER = 707,
  __indexPWAIT_BROKER_FORWARDER = 708,
  __indexPWAIT_UCS_MANAGER = 709,
  __indexPWAIT_UCS_TRANSPORT = 710,
  __indexPWAIT_UCS_MEMORY_NOTIFICATION = 711,
  __indexPWAIT_UCS_ENDPOINT_CHANGE = 712,
  __indexPWAIT_UCS_TRANSPORT_STREAM_CHANGE = 713,
  __indexPWAIT_QUERY_TASK_ENQUEUE_MUTEX = 714,
  __indexPWAIT_SM_WAITFOR_SHUTDOWN_COMPLETION = 715,
  __indexPWAIT_SM_WAITFOR_EVENT = 716,
  __indexPWAIT_SM_WAITFOR_REPLY = 717,
  __indexPWAIT_SM_CLIENT_WAITFOR_RESULT = 718,
  __indexPWAIT_DATAPORT_DATASEND = 719,
  __indexPWAIT_DATAPORT_ONCLOSE = 720,
  __indexPWAIT_MATRIX_WORKSPACE_RECONFIG = 721,
  __indexPWAIT_MATRIX_WORKSPACE_TASK_WAIT = 722,
  __indexPWAIT_TRANSIENTSTATE = 723,
  __indexPWAIT_PREEMPTIVE_SP_SERVER_DIAGNOSTICS_SLEEP = 724,
  __indexPWAIT_SP_SERVER_DIAGNOSTICS_INIT_MUTEX = 725,
  __indexPWAIT_CHECK_EXPRESSION_CACHE = 726,
  __indexPWAIT_TCM_AGE_TO_COMMIT = 727,
  __indexPWAIT_TCM_SEND_RECEIVE = 728,
  __indexPWAIT_TCMA_NOTIFICATION = 729,
  __indexPWAIT_WAITFOR_GDMA_BUFFER_ACCESS = 730,
  __indexPWAIT_GDMA_WAITFOR_EVENT_QUEUE_ACCESS = 731,
  __indexPWAIT_GDMA_WAITFOR_REQUEST = 732,
  __indexPWAIT_GDMA_WAITFOR_SHUTDOWN_COMPLETION = 733,
  __indexPWAIT_GDM_INTER_CYCLE_SLEEP = 734,
  __indexPWAIT_GDM_WAITFOR_REPLY = 735,
  __indexPWAIT_GDM_WAITFOR_SHUTDOWN_COMPLETION = 736,
  __indexPWAIT_TCMA_XACT_RESOLVE = 737,
  __indexPWAIT_GDMA_GET_RESOURCE_OWNER = 738,
  __indexPWAIT_TRANSIENTSTATE_RPC_REQUEST = 739,
  __indexPWAIT_QUERY_RPC = 740,
  __indexPWAIT_STVF_RPC = 741,
  __indexPWAIT_DATA_CONSUMER = 742,
  __indexPWAIT_DATA_PRODUCER = 743,
  __indexPWAIT_WORKSPACE_SYNC = 744,
  __indexPWAIT_DISTRIBUTED_CACHE_FETCH = 745,
  __indexPWAIT_REMOTE_DB_OP = 746,
  __indexPWAIT_REMOTE_DB_START = 747,
  __indexPWAIT_REMOTE_DB_SHUTDOWN = 748,
  __indexPWAIT_TCMA_XACT_END_REQUEST = 749,
  __indexPWAIT_RESOURCE_SEMAPHORE_REMOTE_EXCHANGE_QUERY = 750,
  __indexPWAIT_ALL_COMPONENTS_INITIALIZED = 751,
  __indexPWAIT_XE_LIVE_TARGET_TVF = 752,
  __indexPWAIT_PREEMPTIVE_SP_SERVER_DIAGNOSTICS = 753,
  __indexPWAIT_SP_SERVER_DIAGNOSTICS_SLEEP = 754,
  __indexPWAIT_AM_INDBUILD_ALLOCATION = 755,
  __indexPWAIT_STARTUP_DEPENDENCY_MANAGER = 756,
  __indexPWAIT_CM_ENLISTMENT_MAIN = 757,
  __indexPWAIT_CMA_COMM = 758,
  __indexPWAIT_CM_ENLISTMENT_QUEUE_ACCESS = 759,
  __indexPWAIT_CMA_QUEUE_ACCESS = 760,
  __indexPWAIT_CMA_UPDATE_INCARNATION = 761,
  __indexPWAIT_CMA_ENLISTMENT_SHUTDOWN = 762,
  __indexPWAIT_XEVENT_DDL_RPC_REQUEST = 763,
  __indexPWAIT_SECURITY_CACHE_INVALIDATION = 764,
  __indexPWAIT_XDES_HISTORY = 765,
  __indexPWAIT_XDES_SNAPSHOT = 766,
  __indexPWAIT_THREAD_CACHE_MAINTENANCE = 767,
  __indexPWAIT_FT_MASTER_MERGE_COORDINATOR = 768,
  __indexPWAIT_RESOURCE_SEMAPHORE_FT_PARALLEL_QUERY_SYNC = 769,
  __indexPWAIT_REDO_SIGNAL = 770,
  __indexPWAIT_REDO_SYNC = 771,
  __indexPWAIT_COUNTRECOVERYMGR = 772,
  __indexPWAIT_HADR_DB_COMMAND = 773,
  __indexPWAIT_HADR_TRANSPORT_SESSION = 774,
  __indexPWAIT_HADR_CLUSAPI_CALL = 775,
  __indexPWAIT_HADR_CHANGE_NOTIFIER_TERMINATION_SYNC = 776,
  __indexPWAIT_HADR_ACTION_COMPLETED = 777,
  __indexPWAIT_HADR_OFFLINE_COMPLETED = 778,
  __indexPWAIT_HADR_ONLINE_COMPLETED = 779,
  __indexPWAIT_HADR_FAILOVER_COMPLETED = 780,
  __indexPWAIT_HADR_WORKITEM_COMPLETED = 781,
  __indexPWAIT_HADR_WORK_POOL = 782,
  __indexPWAIT_HADR_WORK_QUEUE = 783,
  __indexPWAIT_HADR_LOGCAPTURE_SYNC = 784,
  __indexPWAIT_HADR_CLUSTER_INTEGRATION = 785,
  __indexPWAIT_LOGCAPTURE_LOGPOOLTRUNCPOINT = 786,
  __indexPWAIT_LOGPOOL_CACHESIZE = 787,
  __indexPWAIT_LOGPOOL_FREEPOOLS = 788,
  __indexPWAIT_LOGPOOL_REPLACEMENTSET = 789,
  __indexPWAIT_LOGPOOL_CONSUMERSET = 790,
  __indexPWAIT_LOGPOOL_MGRSET = 791,
  __indexPWAIT_LOGPOOL_CONSUMER = 792,
  __indexPWAIT_LOGPOOLREFCOUNTEDOBJECT_REFDONE = 793,
  __indexPWAIT_HADR_SYNC_COMMIT = 794,
  __indexPWAIT_HADR_AG_MUTEX = 795,
  __indexPWAIT_HADR_SERVER_READY_CONNECTIONS = 796,
  __indexPWAIT_HADRFS_MANAGER = 797,
  __indexPWAIT_HADRFS_BLOCK_FLUSH = 798,
  __indexPWAIT_HADRFS_IOMGR = 799,
  __indexPWAIT_HADRFS_IOMGR_IOCOMPLETION = 800,
  __indexPWAIT_UCS_SESSION_REGISTRATION = 801,
  __indexPWAIT_ENABLE_EMPTY_VERSIONING = 802,
  __indexPWAIT_HADR_DB_OP_START_SYNC = 803,
  __indexPWAIT_HADR_DB_OP_COMPLETION_SYNC = 804,
  __indexPWAIT_HADR_LOGPROGRESS_SYNC = 805,
  __indexPWAIT_HADR_TRANSPORT_DBRLIST = 806,
  __indexPWAIT_HADR_CONNECTIVITY_INFO = 807,
  __indexPWAIT_XDESTSVERMGR = 808,
  __indexPWAIT_GHOSTCLEANUPSYNCMGR = 809,
  __indexPWAIT_HADR_AR_UNLOAD_COMPLETED = 810,
  __indexPWAIT_HADR_PARTNER_SYNC = 811,
  __indexPWAIT_HADR_DBSTATECHANGE_SYNC = 812,
  __indexPWAIT_DIRTY_PAGE_SYNC = 813,
  __indexPWAIT_DIRTY_PAGE_POLL = 814,
  __indexPWAIT_HTTP_STORAGE_CONNECTION = 815,
  __indexPWAIT_THREAD_CACHE = 816,
  __indexPWAIT_MESSAGE_HOARDER = 817,
  __indexPWAIT_XEVENT_PREDICATE_PARSE = 818,
  __indexPWAIT_WAITFOR_GDMA_VERTEX_OBJECT_POOL_ACCESS = 819,
  __indexPWAIT_WAITFOR_GDMA_EDGE_OBJECT_POOL_ACCESS = 820,
  __indexPWAIT_SECURITY_CRYPTO_CONTEXT_MUTEX = 821,
  __indexPWAIT_SECURITY_RULETABLE_MUTEX = 822,
  __indexPWAIT_SEMPLAT_DSI_BUILD = 823,
  __indexPWAIT_FILESTREAM_CHUNKER_INIT = 824,
  __indexPWAIT_FILESTREAM_CHUNKER = 825,
  __indexPWAIT_FFT_RSFX_COMM = 826,
  __indexPWAIT_FFT_RSFX_WAIT_FOR_MEMORY = 827,
  __indexPWAIT_FFT_STARTUP_SHUTDOWN = 828,
  __indexPWAIT_FFT_RECOVERY = 829,
  __indexPWAIT_FFT_NSO_FCB = 830,
  __indexPWAIT_FFT_NSO_FCB_PARENT = 831,
  __indexPWAIT_FFT_NSO_FCB_FIND = 832,
  __indexPWAIT_FFT_NSO_FCB_RELEASE_CACHED_ENTRIES = 833,
  __indexPWAIT_FFT_NSO_FILEOBJECT = 834,
  __indexPWAIT_FFT_NSO_DB_LIST = 835,
  __indexPWAIT_FFT_NSO_DB_KILL_FLAG = 836,
  __indexPWAIT_FFT_NSO_TABLE_LIST = 837,
  __indexPWAIT_FFT_STORE_DB = 838,
  __indexPWAIT_FFT_STORE_TABLE = 839,
  __indexPWAIT_FFT_STORE_ROWSET_LIST = 840,
  __indexPWAIT_FFT_NTFS_STORE = 841,
  __indexPWAIT_HADRFS_FILE_REQUEST = 842,
  __indexPWAIT_MD_UPGRADE_CONFIG = 843,
  __indexPWAIT_COOP_SCAN = 844,
  __indexPWAIT_QRY_PARALLEL_THREAD_MUTEX = 845,
  __indexPWAIT_QRY_BPMEMORY = 846,
  __indexPWAIT_TCMA_XACT_WAITFOR_PARTICIPANTS_TO_END = 847,
  __indexPWAIT_WAITFOR_PER_QUEUE = 848,
  __indexPWAIT_GET_DATINISERVICE = 849,
  __indexPWAIT_AM_SCHEMAMGR_UNSHARED_CACHE = 850,
  __indexPWAIT_HADR_REPLICAINFO_SYNC = 851,
  __indexPWAIT_HADR_COMPRESSED_CACHE_SYNC = 852,
  __indexPWAIT_HADR_AR_MANAGER_MUTEX = 853,
  __indexPWAIT_HADR_NOTIFICATION_WORKER_TERMINATION_SYNC = 854,
  __indexPWAIT_HADR_NOTIFICATION_DEQUEUE = 855,
  __indexPWAIT_HADR_ARPROXY_NOTIFICATION_SUBSCRIBER_LIST = 856,
  __indexPWAIT_HADR_DBR_SUBSCRIBER_FILTER_LIST = 857,
  __indexPWAIT_HADR_DBR_SUBSCRIBER = 858,
  __indexPWAIT_HADR_NOTIFICATION_WORKER_STARTUP_SYNC = 859,
  __indexPWAIT_HADR_NOTIFICATION_WORKER_EXCLUSIVE_ACCESS = 860,
  __indexMUTEX_HADR_RECOVERY_WAIT_FOR_UNDO = 861,
  __indexMUTEX_HADR_DATABASE_WAIT_FOR_RESTART = 862,
  __indexPWAIT_HADR_XRF_STACK_ACCESS = 863,
  __indexMUTEX_HADR_RECOVERY_WAIT_FOR_CONNECTION = 864,
  __indexPWAIT_HADR_TRANSPORT_FLOW = 865,
  __indexPWAIT_HADR_PARTNER_FLOW = 866,
  __indexPWAIT_HADR_POST_ONLINE_COMPLETED = 867,
  __indexPWAIT_HADR_WAIT_FOR_TRANSITION_TO_VERSIONING = 868,
  __indexPWAIT_XDES_OUT_OF_ORDER_LIST = 869,
  __indexPWAIT_HADR_BACKUP_BULK_LOCK = 870,
  __indexPWAIT_HADR_BACKUP_QUEUE = 871,
  __indexPWAIT_HADR_LOGCAPTURE_WAIT = 872,
  __indexPWAIT_HADR_AR_CRITICAL_SECTION_ENTRY = 873,
  __indexPWAIT_HADR_TDS_LISTENER_SYNC = 874,
  __indexPWAIT_HADR_READ_ALL_NETWORKS = 875,
  __indexPWAIT_HADR_TDS_LISTENER_SYNC_PROCESSING = 876,
  __indexPWAIT_XTP_FSSTORAGE_MAINTENANCE = 877,
  __indexPWAIT_XTP_GUEST = 878,
  __indexPWAIT_XTP_TASK_SHUTDOWN = 879,
  __indexXTPPROC_PARTITIONED_STACK_CREATE = 880,
  __indexPWAIT_PREEMPTIVE_HADR_LEASE_MECHANISM = 881,
  __indexPWAIT_HADR_TIMER_TASK = 882,
  __indexPWAIT_EVENT_SESSION_INIT_MUTEX = 883,
  __indexPWAIT_REPLICA_ONLINE_INIT_MUTEX = 884,
  __indexPWAIT_HADR_GROUP_COMMIT = 885,
  __indexPWAIT_HADR_SYNCHRONIZING_THROTTLE = 886,
  __indexPWAIT_HADR_VERSIONING_STATE = 887,
  __indexPXTPPROC_CACHE_ACCESS = 888,
  __indexPWAIT_SP_SERVER_DIAGNOSTICS_BUFFER_ACCESS = 889,
  __indexPWAIT_SCHEDULER_IDLE = 890,
  __indexPWAIT_HADRFS_FILE_CLOSE = 891,
  __indexPWAIT_VERSIONING_COMMITTING = 892,
  __indexPWAIT_FILETABLE_SHUTDOWN = 893,
  __indexPWAIT_PRU_ROLLBACK_DEFERRED = 894,
  __indexPWAIT_XTP_TRAN_DEPENDENCY = 895,
  __indexPWAIT_XTP_HOST_WAIT = 896,
  __indexPWAIT_XTP_HOST_STORAGE_WAIT = 897,
  __indexPWAIT_UCS_TRANSPORT_CONNECT = 898,
  __indexPWAIT_XE_CONFIG_CHANGE = 899,
  __indexPWAIT_PREEMPTIVE_XE_CONFIG_CHANGE = 900,
  __indexPWAIT_HADR_FABRIC_CALLBACK = 901,
  __indexPWAIT_ASYNC_OP_CONTEXT_READ = 902,
  __indexPWAIT_ASYNC_OP_CONTEXT_WRITE = 903,
  __indexPWAIT_ASYNC_OP_COMPLETION = 904,
  __indexPWAIT_FABRIC_REPLICA_PUBLISHER_SUBSCRIBER_LIST = 905,
  __indexPWAIT_FABRIC_REPLICA_CONTROLLER_STATE_AND_CONFIG = 906,
  __indexPWAIT_FABRIC_REPLICA_CONTROLLER_LIST = 907,
  __indexPWAIT_FABRIC_HADR_TRANSPORT_CONNECTION = 908,
  __indexPWAIT_FABRIC_WAIT_FOR_BUILD_REPLICA_EVENT_PROCESSING = 909,
  __indexPWAIT_VDICLIENT_GETCOMMAND = 910,
  __indexPWAIT_VDICLIENT_COMPLETECOMMAND = 911,
  __indexPWAIT_VDICLIENT_OTHER = 912,
  __indexPWAIT_VDICLIENT_OPERATION = 913,
  __indexPWAIT_HADR_DBSEEDING = 914,
  __indexPWAIT_HADR_DBSEEDING_LIST = 915,
  __indexPWAIT_SLO_UPDATE = 916,
  __indexPWAIT_UCS_CLUSTER_PROXY_ROUTER = 917,
  __indexPWAIT_UCS_CLUSTER_PROXY_FORWARDER = 918,
  __indexPWAIT_PREEMPTIVE_AUDIT_ACCESS_MDSLOG = 919,
  __indexPWAIT_SE_REPL_QUEUE_XACT_ACK = 920,
  __indexPWAIT_SE_REPL_QUEUE_TRUNCATE = 921,
  __indexPWAIT_SE_REPL_LAST_CSN_LOCK = 922,
  __indexPWAIT_XTP_RECOVERY = 923,
  __indexPWAIT_XTP_OFFLINE_CKPT_NEW_LOG = 924,
  __indexPWAIT_XTP_OFFLINE_CKPT_LOG_IO = 925,
  __indexPWAIT_XTP_OFFLINE_CKPT_BEFORE_REDO = 926,
  __indexPWAIT_XTP_PROCEDURE_ENTRY = 927,
  __indexPWAIT_XTP_CKPT_ENABLED = 928,
  __indexPWAIT_XTP_CKPT_AGENT = 929,
  __indexPWAIT_XTP_CKPT_CLOSE = 930,
  __indexPWAIT_XTP_CKPT_STATE_LOCK = 931,
  __indexPWAIT_XTP_ASYNC_TX_COMPLETION = 932,
  __indexPWAIT_LCK_M_SCH_S_LOW_PRIORITY = 933,
  __indexPWAIT_LCK_M_SCH_M_LOW_PRIORITY = 934,
  __indexPWAIT_LCK_M_S_LOW_PRIORITY = 935,
  __indexPWAIT_LCK_M_U_LOW_PRIORITY = 936,
  __indexPWAIT_LCK_M_X_LOW_PRIORITY = 937,
  __indexPWAIT_LCK_M_IS_LOW_PRIORITY = 938,
  __indexPWAIT_LCK_M_IU_LOW_PRIORITY = 939,
  __indexPWAIT_LCK_M_IX_LOW_PRIORITY = 940,
  __indexPWAIT_LCK_M_SIU_LOW_PRIORITY = 941,
  __indexPWAIT_LCK_M_SIX_LOW_PRIORITY = 942,
  __indexPWAIT_LCK_M_UIX_LOW_PRIORITY = 943,
  __indexPWAIT_LCK_M_BU_LOW_PRIORITY = 944,
  __indexPWAIT_LCK_M_RS_S_LOW_PRIORITY = 945,
  __indexPWAIT_LCK_M_RS_U_LOW_PRIORITY = 946,
  __indexPWAIT_LCK_M_RIn_NL_LOW_PRIORITY = 947,
  __indexPWAIT_LCK_M_RIn_S_LOW_PRIORITY = 948,
  __indexPWAIT_LCK_M_RIn_U_LOW_PRIORITY = 949,
  __indexPWAIT_LCK_M_RIn_X_LOW_PRIORITY = 950,
  __indexPWAIT_LCK_M_RX_S_LOW_PRIORITY = 951,
  __indexPWAIT_LCK_M_RX_U_LOW_PRIORITY = 952,
  __indexPWAIT_LCK_M_RX_X_LOW_PRIORITY = 953,
  __indexPWAIT_LCK_M_SCH_S_ABORT_BLOCKERS = 954,
  __indexPWAIT_LCK_M_SCH_M_ABORT_BLOCKERS = 955,
  __indexPWAIT_LCK_M_S_ABORT_BLOCKERS = 956,
  __indexPWAIT_LCK_M_U_ABORT_BLOCKERS = 957,
  __indexPWAIT_LCK_M_X_ABORT_BLOCKERS = 958,
  __indexPWAIT_LCK_M_IS_ABORT_BLOCKERS = 959,
  __indexPWAIT_LCK_M_IU_ABORT_BLOCKERS = 960,
  __indexPWAIT_LCK_M_IX_ABORT_BLOCKERS = 961,
  __indexPWAIT_LCK_M_SIU_ABORT_BLOCKERS = 962,
  __indexPWAIT_LCK_M_SIX_ABORT_BLOCKERS = 963,
  __indexPWAIT_LCK_M_UIX_ABORT_BLOCKERS = 964,
  __indexPWAIT_LCK_M_BU_ABORT_BLOCKERS = 965,
  __indexPWAIT_LCK_M_RS_S_ABORT_BLOCKERS = 966,
  __indexPWAIT_LCK_M_RS_U_ABORT_BLOCKERS = 967,
  __indexPWAIT_LCK_M_RIn_NL_ABORT_BLOCKERS = 968,
  __indexPWAIT_LCK_M_RIn_S_ABORT_BLOCKERS = 969,
  __indexPWAIT_LCK_M_RIn_U_ABORT_BLOCKERS = 970,
  __indexPWAIT_LCK_M_RIn_X_ABORT_BLOCKERS = 971,
  __indexPWAIT_LCK_M_RX_S_ABORT_BLOCKERS = 972,
  __indexPWAIT_LCK_M_RX_U_ABORT_BLOCKERS = 973,
  __indexPWAIT_LCK_M_RX_X_ABORT_BLOCKERS = 974,
  __indexPWAIT_TERMINATE_LISTENER = 975,
  __indexPWAIT_SCRIPTDEPLOYMENT_REQUEST = 976,
  __indexPWAIT_SCRIPTDEPLOYMENT_WORKER = 977,
  __indexPWAIT_FEATURE_SWITCHES_UPDATE = 978,
  __indexPWAIT_XTP_HOST_DB_COLLECTION = 979,
  __indexPWAIT_XTP_HOST_LOG_ACTIVITY = 980,
  __indexPWAIT_QDS_DYN_VECTOR = 981,
  __indexPWAIT_QDS_OPEN_ADDR_HASH_MAP = 982,
  __indexPWAIT_QDS_CTXS = 983,
  __indexPWAIT_QDS_BCKG_TASK = 984,
  __indexPWAIT_QDS_DB_DISK = 985,
  __indexPWAIT_QDS_STMT_DISK = 986,
  __indexPWAIT_QDS_ASYNC_PERSIST_TASK = 987,
  __indexPWAIT_QDS_LOADDB = 988,
  __indexPWAIT_QDS_ASYNC_PERSIST_TASK_START = 989,
  __indexPWAIT_QDS_ASYNC_CHECK_CONSISTENCY_TASK = 990,
  __indexPWAIT_QDS_TASK_START = 991,
  __indexPWAIT_QDS_PERSIST_TASK_MAIN_LOOP_SLEEP = 992,
  __indexPWAIT_QDS_TASK_SHUTDOWN = 993,
  __indexPWAIT_QDS_SHUTDOWN_QUEUE = 994,
  __indexPWAIT_PREEMPTIVE_XE_CX_FILE_OPEN = 995,
  __indexPWAIT_XE_CX_FILE_READ = 996,
  __indexPWAIT_XDB_GATEWAY_RESOLVE = 997,
  __indexPWAIT_XDB_URI_CACHE = 998,
  __indexPWAIT_XDB_MONITOR_HASH = 999,
  __indexPWAIT_WINFAB_API_CALL = 1000,
  __indexPWAIT_PREEMPTIVE_XE_CX_HTTP_CALL = 1001,
  __indexPWAIT_CLOUD_ALL_PARTITIONS_STARTUP = 1002,
  __indexPWAIT_SE_REPL_QUEUE_LOG_TRUNCATION = 1003,
  __indexPWAIT_SE_REPL_QUEUE_LOG_THROTTLE_LIST = 1004,
  __indexPWAIT_LOG_CONSOLIDATION_POLL = 1005,
  __indexPWAIT_LOG_CONSOLIDATION_IO = 1006,
  __indexPWAIT_SE_REPL_PARTITION_STARTUP_EVENT = 1007,
  __indexPWAIT_COLUMNSTORE_BUILD_THROTTLE = 1008,
  __indexPWAIT_DBSEEDING_OPERATION = 1009,
  __indexPWAIT_DBSEEDING_FLOWCONTROL = 1010,
  __indexPWAIT_PHYSICAL_SEEDING_DMV = 1011,
  __indexPWAIT_DROP_DATABASE = 1012,
  __indexPWAIT_SE_REPL_PARTITION_WAITING_QUEUE = 1013,
  __indexPWAIT_SNI_CONN_DUP = 1014,
  __indexPWAIT_SEQUENCE_GENERATION = 1015,
  __indexPWAIT_XTP_RTDATA_LIST = 1016,
  __indexPWAIT_XDB_MONITOR_LIST = 1017,
  __indexPWAIT_SE_REPL_QUEUE_THROTTLING = 1018,
  __indexPWAIT_HADR_JOIN = 1019,
  __indexPWAIT_WINFAB_REPLICA_BUILD_OPERATION = 1020,
  __indexPWAIT_FABRIC_REPLICA_PUBLISHER_EVENT_PUBLISH = 1021,
  __indexPWAIT_QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP = 1022,
  __indexPWAIT_XDB_HOST_PROPERTY_READ = 1023,
  __indexPWAIT_LAST = 1024,
};

struct XE_TEvent<4,1,11>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,11> m_dynamicAttr;
  /* 0x0290 */ struct XEEvent m_event;
}; /* size: 0x02d8 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 15,
  NVld = 0,
  VldEddOffset = 14,
  BufSize = 66,
} TAG_UNNAMED_515, *PTAG_UNNAMED_515;

struct IWbemObjectTextSrc
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_516, *PTAG_UNNAMED_516;

typedef union _RTL_RUN_ONCE
{
  /* 0x0000 */ void* Ptr;
} RTL_RUN_ONCE, *PRTL_RUN_ONCE; /* size: 0x0008 */

enum SOSHOST_MEMORYCLERK_TYPE
{
  MEMORYCLERK_SQLGENERAL = 0,
  MEMORYCLERK_SQLBUFFERPOOL = 1,
  MEMORYCLERK_SQLQUERYCOMPILE = 2,
  MEMORYCLERK_SQLQUERYPLAN = 3,
  MEMORYCLERK_SQLQUERYEXEC = 4,
  MEMORYCLERK_SQLOPTIMIZER = 5,
  MEMORYCLERK_QUERYDISKSTORE = 6,
  MEMORYCLERK_SQLUTILITIES = 7,
  MEMORYCLERK_SQLSTORENG = 8,
  MEMORYCLERK_SQLCONNECTIONPOOL = 9,
  MEMORYCLERK_SQLCLR = 10,
  MEMORYCLERK_SQLCLRASSEMBLY = 11,
  MEMORYCLERK_SQLSERVICEBROKER = 12,
  MEMORYCLERK_SQLXML = 13,
  MEMORYCLERK_SQLHTTP = 14,
  MEMORYCLERK_SQLSOAP = 15,
  MEMORYCLERK_SQLSOAPSESSIONSTORE = 16,
  MEMORYCLERK_SNI = 17,
  MEMORYCLERK_SERIALIZATION = 18,
  MEMORYCLERK_FULLTEXT = 19,
  MEMORYCLERK_SQLXP = 20,
  MEMORYCLERK_QSRANGEPREFETCH = 21,
  MEMORYCLERK_BHF = 22,
  MEMORYCLERK_SQLQERESERVATIONS = 23,
  MEMORYCLERK_XE_BUFFER = 24,
  MEMORYCLERK_TRACE_EVTNOTIF = 25,
  MEMORYCLERK_XTP = 26,
  MEMORYCLERK_LANGSVC = 27,
  MEMORYCLERK_SQLLAST = 28,
  MEMORYCLERK_HOST = 29,
  MEMORYCLERK_SOSNODE = 30,
  MEMORYCLERK_SOSOS = 31,
  MEMORYCLERK_SOSMEMMANAGER = 32,
  MEMORYCLERK_FULLTEXT_SHMEM = 33,
  MEMORYCLERK_GUARDIAN = 34,
  MEMORYCLERK_TEST = 35,
  MEMORYCLERK_SQLSERVICEBROKERTRANSPORT = 36,
  MEMORYCLERK_ASYNC_TRANSPORT = 37,
  MEMORYCLERK_SEREPL = 38,
  MEMORYCLERK_FSAGENT = 39,
  MEMORYCLERK_FILETABLE = 40,
  MEMORYCLERK_ABR = 41,
  MEMORYCLERK_WSM = 42,
  MEMORYCLERK_MATRIXDBMCI = 43,
  MEMORYCLERK_XE = 44,
  MEMORYCLERK_RPC = 45,
  MEMORYCLERK_SPATIAL = 46,
  MEMORYCLERK_MATRIXDBMTM = 47,
  MEMORYCLERK_MATRIXDBPRISM = 48,
  MEMORYCLERK_MATRIXDB_MGRS_AGENTS = 49,
  MEMORYCLERK_MATRIXCOMM = 50,
  MEMORYCLERK_MATRIX_COMMFABRIC = 51,
  MEMORYCLERK_HADR = 52,
  MEMORYCLERK_SQLLOGPOOL = 53,
  MEMORYCLERK_LWC = 54,
  MEMORYCLERK_FSCHUNKER = 55,
  MEMORYCLERK_SQLFABRIC = 56,
  MEMORYCLERK_DBCOPY = 57,
  MEMORYCLERK_LAST = 58,
};

typedef union _GDI_OBJECT::__MIDL_IAdviseSink_0002
{
  union
  {
    /* 0x0000 */ struct _userHBITMAP* hBitmap;
    /* 0x0000 */ struct _userHPALETTE* hPalette;
    /* 0x0000 */ struct _userHGLOBAL* hGeneric;
  }; /* size: 0x0008 */
} GDI_OBJECT::__MIDL_IAdviseSink_0002, *PGDI_OBJECT::__MIDL_IAdviseSink_0002; /* size: 0x0008 */

typedef struct _GDI_OBJECT
{
  /* 0x0000 */ unsigned long ObjectType;
  /* 0x0004 */ long Padding_197;
  /* 0x0008 */ union _GDI_OBJECT::__MIDL_IAdviseSink_0002 u;
} GDI_OBJECT, *PGDI_OBJECT; /* size: 0x0010 */

typedef enum
{
  offset = 16,
} TAG_UNNAMED_517, *PTAG_UNNAMED_517;

enum WORKER_STATUS
{
  WORKER_STATUS_NONPREEMPTIVE = 1,
  WORKER_STATUS_PREEMPTIVE_ONENTRY = 2,
  WORKER_STATUS_PREEMPTIVE = 4,
  WORKER_STATUS_FIBERMODE = 8,
  WORKER_STATUS_SICK = 16,
  WORKER_STATUS_INCCEXCEPTION = 32,
  WORKER_STATUS_INACCESSVIOLATION = 64,
  WORKER_STATUS_INSIDECATCH = 128,
  WORKER_STATUS_STACKUNWIND = 256,
  WORKER_STATUS_MICRO = 512,
  WORKER_STATUS_MINI = 1024,
  WORKER_STATUS_LAZYPREEMPTIVE = 2048,
  WORKER_STATUS_SINGLEWORKER_PREEMPTIVE = 4096,
  WORKER_STATUS_INPOLLINGIOCOMPROUTINE = 8192,
  WORKER_STATUS_TRACERECURSIONDISABLED = 16384,
  WORKER_STATUS_INASSERT = 0x10000,
  WORKER_STATUS_DOOM = 0x40000,
  WORKER_STATUS_HAS_RETAIL_ASSERTED = 0x80000,
  WORKER_STATUS_NONYIELD_ALLOWED = 0x100000,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 6,
} TAG_UNNAMED_518, *PTAG_UNNAMED_518;

enum SOS_ERROR_CODES
{
  SOS_OK = 0,
  SOS_WAIT_OK = 0,
  SOS_ABORT = 2,
  SOS_WAIT_DEADLOCK = 3,
  SOS_WAIT_PREMATURE_WAKEUP = 4,
  SOS_WAIT_FREE_WORKER = 5,
  SOS_ENUMERATION_DONE = 6,
  SOS_WAIT_TIMEOUT = 258,
  SOS_DUPLICATE = 8,
  SOS_ENUMERATION_NOTFOUND = 9,
  SOS_ROUND_COMPLETED = 10,
  SOS_FAIL = -2147483648,
  SOS_FAILMEM = -1073741824,
  SOS_FAILTHREAD = -536870912,
  SOS_FAILMEM_RESERVE = -268435456,
  SOS_FAILMEM_COMMIT = -134217728,
  SOS_FAILNODEOFFLINE = -67108864,
  SOS_FAILPOOLMAX = -33554432,
  SOSMEM_EMPTY = 0,
  SOSMEM_FULL = -2147483648,
  SOS_PINNED = -2147483648,
  SOS_UNPINNED = 0,
};

struct CLUSPROP_DWORD
{
  /* 0x0000 */ long Padding_198[2];
  /* 0x0008 */ unsigned long dw;
}; /* size: 0x000c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 3,
  VldEddOffset = 6,
  BufSize = 56,
} TAG_UNNAMED_519, *PTAG_UNNAMED_519;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_520, *PTAG_UNNAMED_520;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_521, *PTAG_UNNAMED_521;

enum SOSHOST_MEMOBJCAPABILITIES
{
  SOSHOST_MEMOBJ_FLAG_NONE = 0,
  SOSHOST_MEMOBJ_FLAG_THREAD_SAFE = 1,
  SOSHOST_MEMOBJ_FLAG_NO_LEAK_TRACE = 2,
  SOSHOST_MEMOBJ_FLAG_PAGE_HEAP = 4,
  SOSHOST_MEMOBJ_FLAG_PAGE_HEAP_UNALIGNED = 8,
  SOSHOST_MEMOBJ_FLAG_STRICT_MALLOC_SPY = 16,
  SOSHOST_MEMOBJ_FLAG_INCREMENTAL = 32,
  SOSHOST_MEMOBJ_FLAG_FIXED_SIZE = 64,
  SOSHOST_MEMOBJ_FLAG_NO_SLOTS = 128,
  SOSHOST_MEMOBJ_FLAG_PARTITIONED_CPU = 256,
  SOSHOST_MEMOBJ_FLAG_PARTITIONED_NODE = 512,
  SOSHOST_MEMOBJ_FLAG_ALL = 1023,
};

typedef enum
{
  activation_stateIdx = 0,
  active_task_countIdx = 1,
  cpu_timeIdx = 2,
  durationIdx = 3,
  queue_idIdx = 4,
  physical_readsIdx = 5,
  logical_readsIdx = 6,
  writesIdx = 7,
  activation_messageIdx = 8,
  LastField = 9,
} TAG_UNNAMED_522, *PTAG_UNNAMED_522;

struct ISWbemPrivilege
{
}; /* size: 0x0008 */

enum StackDumpOptions
{
  StackDumpShortStack = 1,
  StackDumpFrames = 2,
  StackDumpModules = 4,
  StackDumpRegisters = 8,
  StackDumpExternalDebugger = 16,
  StackDumpWatsonReporting = 32,
  StackDumpSkipOwnEC = 64,
  StackDumpMiniDumpAllThreads = 128,
  StackDumpUserInitiatedDump = 256,
  StackDumpSkipPssDump = 512,
  StackDumpCriticalClrDump = 1024,
  StackDumpLocalDumpOnly = 2048,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_523, *PTAG_UNNAMED_523;

class CAutoBase<XE_FileProcessor>
{
  /* 0x0000 */ class XE_FileProcessor* m_pt;
}; /* size: 0x0008 */

class TEnumerator<TList<GroupList,SOS_ResourceGroup,16,TListSLock> >
{
  /* 0x0000 */ class SOS_ResourceGroup* m_currentObject;
  /* 0x0008 */ class SOS_ResourceGroup* m_lastObjectSeen;
  /* 0x0010 */ class TList<GroupList,SOS_ResourceGroup,16,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

enum SOS_QUEUE_PLACE
{
  SOS_QUEUE_HEAD = 0,
  SOS_QUEUE_TAIL = 1,
};

enum SOS_OS::enum_debugflags
{
  DEBUG_EXHANDLER = 1,
  DEBUG_THREAD = 4,
};

class XeSqlPkg::collect_all_Init
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_199[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_524, *PTAG_UNNAMED_524;

class TTemplateInfo<1333,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

typedef enum
{
  database_idIdx = 0,
  resource_idIdx = 1,
  request_sourceIdx = 2,
  resource_typeIdx = 3,
  lock_modeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_525, *PTAG_UNNAMED_525;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 52,
} TAG_UNNAMED_526, *PTAG_UNNAMED_526;

struct tagMENUINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long fMask;
  /* 0x0008 */ unsigned long dwStyle;
  /* 0x000c */ unsigned int cyMax;
  /* 0x0010 */ struct HBRUSH__* hbrBack;
  /* 0x0018 */ unsigned long dwContextHelpID;
  /* 0x001c */ long Padding_200;
  /* 0x0020 */ unsigned __int64 dwMenuData;
}; /* size: 0x0028 */

enum OOM_EXCEPTIONS
{
  OOM_CHECKPOI_ENQUEUETASK = 0,
  OOM_CREATEACCBINDINGS = 1,
  OOM_APPDOMAIN_CREATE_DATAACCESS_STORE = 2,
  OOM_APPDOMAIN_CREATE_DATAACCESS_MEMOBJ = 3,
  OOM_APPDOMAIN_CREATE_CLRPROC_CALLBACK = 4,
  OOM_APPDOMAIN_CREATE_CLRPROC_STORE = 5,
  OOM_APPDOMAIN_CREATE_CLRPROC_MEMOBJ = 6,
  OOM_APPDOMAIN_CACHE_CLRPROC_OBJECT = 7,
  OOM_APPDOMAIN_CREATE_CLRUDX_STORE = 8,
  OOM_APPDOMAIN_CACHE_CLRUDX_OBJECT = 9,
  OOM_RESOLVE_ASSEMBLY_IN_DB = 10,
  OOM_RESOLVE_ASSEMBLY_NOT_IN_DB = 11,
  OOM_CREATE_PUBLIC_KEY_SET_ASMREF = 12,
  OOM_ASSEMBLY_BUFFER = 13,
  OOM_ASSEMBLY_SET_PUBLIC_KEY = 14,
  OOM_ASYNCDISKUNIT_INIT = 15,
  OOM_BACKUP_VERIFICATION_BUFFER = 16,
  OOM_BACKUP_BUFFER = 17,
  OOM_BACKUP_LOG_BUFFER_SETUP = 18,
  OOM_BACKUP_LOG_BUFFER_REDO = 19,
  OOM_BACKUPMEDIUM_SCRATCH_BUFFER_CREATE = 20,
  OOM_BACKUPMEDIUM_VERIFICATION_BUFFER_CREATE = 21,
  OOM_BACKUPMEDIUM_SCRATCH_BUFFER_OPEN = 22,
  OOM_BACKUPMEDIUM_VERIFICATION_BUFFER_OPEN = 23,
  OOM_RAISEXMLREADEREXCEPTION = 24,
  OOM_STREAMFILEMGR_GETSHARENAMEFORLOCALPATH = 25,
  OOM_CSET_PBCLONEBITMAP = 26,
  OOM_BACKUPTAPEFILE_BUFFER = 27,
  OOM_SSB_ACTMGR_SCANQUEUE = 28,
  OOM_SSB_MAPPINGMGR_STARTUP = 29,
  OOM_LISTBUCKET_INSERT = 30,
  OOM_CREATE_ASSEMBLY_STMT = 31,
  OOM_SSB_TRANSMISSION_STATUS = 32,
  OOM_ASSEMBLY_SETUP_ASM_STRING = 33,
  OOM_ASSEMBLY_SETUP_TYPE_STRING = 34,
  OOM_APPDOMAIN_CREATE = 35,
  OOM_CLRPROC_CREATE_SCRATCH_MEMOBJ = 36,
  OOM_CLRPROC_CREATE_PAGE_ALLOCATOR = 37,
  OOM_CLRPROC_CREATE_CACHE_MEMOBJ = 38,
  OOM_BATCHEXECENV_QNI_CREATE = 39,
  OOM_CMED_CACHE_FACTORY_CREATE_DESCRIPTOR = 40,
  OOM_COMPPLAN_CREATE_SKELETON_MEMOBJ = 41,
  OOM_COMPPLAN_CREATE_SKELETON = 42,
  OOM_PBMEMALLOC = 43,
  OOM_URTEXEC_READNAME = 44,
  OOM_AUTOCTX_SETLS = 45,
  OOM_CLREXECCACHE_CREATE_PAGEALLOCATOR = 46,
  OOM_CLREXECCACHE_CREATE_SCRATCH_MEMOBJ = 47,
  OOM_XE_ENGINE_DMV = 48,
  OOM_CLREXECCACHE_CREATE_CACHEDREQUEST_MEMOBJ = 49,
  OOM_ALLOC_DES = 50,
  OOM_CSTMTEXECAS_XRETEXECUTE = 51,
  OOM_APPENDILB2ILB_READ = 52,
  OOM_APPENDILB2ILB_WRITE = 53,
  OOM_EXECCTXT_XSTMT_MEMOBJ = 54,
  OOM_TWOTHREADPRODUCER_CREATEPRODUCER = 55,
  OOM_TWOTHREADPRODUCER_INITBATCH = 56,
  OOM_OBJPERM_MEMOBJ = 57,
  OOM_TWOTHREADPRODUCER_ENQUEUETASK = 58,
  OOM_GETFTROWSETINTERFACE = 59,
  OOM_MSSQLFT_CREATETKNVALUE_TOKENSTRING = 60,
  OOM_MSSQLFT_CREATETKNVALUE_DBCOMMANDTREE = 61,
  OOM_HASHSTRATEGY_CREATE_WFRESOURCEMGR = 62,
  OOM_HASHMATCH_ALLOC_UTILPAGE = 63,
  OOM_HTTPEXECENV_FORMATWIRETYPE = 64,
  OOM_CREATE_MEMOBJ = 65,
  OOM_LBSS_CREATE_CACHESTORE = 66,
  OOM_LBSS_CREATE_MEMOBJ = 67,
  OOM_LBSS_CREATE_CACHEENTRY = 68,
  OOM_LBSS_UNCACHE = 69,
  OOM_LOGMGR_INIT_ALLOCLOGBLK = 70,
  OOM_LOGMGR_INIT_ALLOCUTILPAGE = 71,
  OOM_LOGMGR_RESERVEANDAPPEND = 72,
  OOM_LOGMGR_FORMATVIRTUALLOGFILE = 73,
  OOM_LOGITER_ALLOCSCANCACHE = 74,
  OOM_LSEVENT_ALLOC = 75,
  OOM_LSBUFFER_INIT = 76,
  OOM_LSMGR_PROCESSPAGE = 77,
  OOM_LSREDOMGR_CREATE_FILEMAPPING = 78,
  OOM_LSREDOMGR_ALLOCRESOURCES_GETBUFFER = 79,
  OOM_LSREDOMGR_ALLOCRESOURCES = 80,
  OOM_LSSTATEMGR_POSTEVENTNOX = 81,
  OOM_LSSTATEMGR_POSTEVENT = 82,
  OOM_TABLEMD_NEWRANGE = 83,
  OOM_PBALLOCUTILPAGESLOWFAIL = 84,
  OOM_TASKALLOC = 85,
  OOM_CMEMMGRLOWFAIL_INIT = 86,
  OOM_COPYDBPROPSETBSTRDEEP = 87,
  OOM_OLEDBCONNECT_SETINITPROPS = 88,
  OOM_OLEDBRANGEROWSET_GATHERRMTSCHEMA = 89,
  OOM_OLEDBRANGEROWSET_GATHERCOLUMNSCHEMA = 90,
  OOM_SSB_TRANSMISSION_MSGINFO_ELE = 91,
  OOM_OLEDBRANGEROWSET_GATHERSTATS = 92,
  OOM_OLEDBUTIL_INITDBPARAMPROPERTIES_ALLOCSYSSTRING = 93,
  OOM_SOAP_RPC_TRACE_INFO_INIT = 94,
  OOM_COPTEXPR_GENSHOWPLAN = 95,
  OOM_XE_TVF = 96,
  OOM_CCACHEOBJECT_MEMALLOC = 97,
  OOM_COPTCONTEXT_REWRITEFROSUBANDSWEEP = 98,
  OOM_CBITMAPSET_MEMALLOC = 99,
  OOM_QNOTIFMGR_PQNICREATE = 100,
  OOM_QNOTIFMGR_ENQUEUENOTIF = 101,
  OOM_QNOTIFMGR_COMMITREGISTRATION = 102,
  OOM_QNOTIFMGR_CHK = 103,
  OOM_CQNMPROXY_INIT = 104,
  OOM_QPEVENT_DROPDB = 105,
  OOM_CQHASHSCAN_CREATEWFMANAGER = 106,
  OOM_CQHASHSCAN_CREATEWFGROUP = 107,
  OOM_CQSCANHASHMATCH_CREATEWFGROUP = 108,
  OOM_RECOVERYUNIT_INIT_CREATE_SYSTEM_ROWSET_STORE = 109,
  OOM_RFSDBACCESS_STARTUP_ALLOCEVERYONESID = 110,
  OOM_RFSDBACCESS_STARTUP_ALLOCADMINSID = 111,
  OOM_RFSDBACCESS_STARTUP_ALLOCCREATORSID = 112,
  OOM_RFSDBC_SETCONTENTSINDEX = 113,
  OOM_SEDYNVECTOR_GROW_ALLOC_LISTELEM = 114,
  OOM_SEDYNVECTOR_GROW_ALLOC_NEW_VECTOR = 115,
  OOM_SQLFATALHANDLER = 116,
  OOM_SHOWPLANSTRINGOVERFLOW_REALLOC = 117,
  OOM_SHOWPLANSTRINGOVERFLOW_INIT = 118,
  OOM_SHOWPLANSTRINGOVERFLOW_APPEND = 119,
  OOM_CSCAOP_CONST_GENSHOWPLANXML = 120,
  OOM_EX_SET_DUMP_TRIGGER = 121,
  OOM_CSTMTERROR_XRETEXEC = 122,
  OOM_NEW_CB_PMO = 123,
  OOM_NEW_CB_FILE_LINE = 124,
  OOM_NEW_CB = 125,
  OOM_PREFIX_TEST1 = 126,
  OOM_PREFIX_TEST2 = 127,
  OOM_CFTADMIN_INTERNAL_CREATE_CATALOG = 128,
  OOM_DBCCCALLFULLTEXT = 129,
  OOM_CSQLSOURCE_CREATEPARSE = 130,
  OOM_CSQLSOURCE_CREATECOMPPLAN_CREATE_MEMOBJ = 131,
  OOM_EX_SET_DUMP_TRIGGER_INIT = 132,
  OOM_CSQLSOURCE_CREATECOMPPLAN_CREATE_PAGEALLOCATOR = 133,
  OOM_CCOMPPLAN_DPS_INIT = 134,
  OOM_CSQLSOURCE_CREATEMSQLEXECCTXT_CREATE_MEMOBJ = 135,
  OOM_TVPFILL = 136,
  OOM_CSQLSOURCE_CREATEMSQLEXECCTXT_CREATE_PAGEALLOCATOR = 137,
  OOM_CSQLSOURCE_CREATEMSQLEXECCTXT_CREATE_BATCH_MEMOBJ = 138,
  OOM_CSQLSOURCE_FCOMPILE_CREATE_STMT_MEMOBJ = 139,
  OOM_PWCH_FROM_UNALIGNED_PB = 140,
  OOM_CNETBYTESTREAM_GETBYTES_MEMBUFHOLDER = 141,
  OOM_SSBDLGTMREV_GET = 142,
  OOM_SQLMGR_MEMORYOBJECT = 143,
  OOM_SSBCONNENDPOINT_STARTLOGIN_SNIPACKET = 144,
  OOM_SSBCONNENDPOINT_STARTLOGIN_MSGBINARY = 145,
  OOM_SSBCONNENDPOINT_REPLYLOGIN_SNIPACKET = 146,
  OOM_SSBCONNENDPOINT_REPLYLOGIN_MSGBINARY = 147,
  OOM_SSBCONNENDPOINT_HANDLESSPILOGIN_SNIPACKET = 148,
  OOM_SSBCONNENDPOINT_HANDLESSPILOGIN_MSGBINARY = 149,
  OOM_SSBCONNENDPOINT_HANDLEPKLOGIN_SNIPACKET = 150,
  OOM_SSBCONNENDPOINT_HANDLEPKLOGIN_MSGBINARY = 151,
  OOM_SSBCONNENDPOINT_SENDLOGIN = 152,
  OOM_SSBADJENDPOINT_INITDEEP1 = 153,
  OOM_SSBADJENDPOINT_INITDEEP2 = 154,
  OOM_SSB_TRANSPORT_RECV_MSG_CREATE = 155,
  OOM_SSBDIALOGENDPOINT_END = 156,
  OOM_SSBMSGDISPATCHER_CREATEUSERSTORE = 157,
  OOM_SSBMSGDISPATCHER_CREATEUSERSTORE_MEMORYOBJECT = 158,
  OOM_SSBDIALOGENDPOINT_SENDERROR = 159,
  OOM_SSBDIALOGENDPOINT_ENQUEUEERROR = 160,
  OOM_SSBDIALOGENDPOINT_BROKERERROR = 161,
  OOM_SSBTRANSMISSION_CREATE = 162,
  OOM_SSBTIMEREVENT_DISPATCH_RANDOM = 163,
  OOM_SSBTIMEREVENT_DISPATCH = 164,
  OOM_SSBMSGDISPATCH_STARTUP = 165,
  OOM_SSBLOCALMSG_INIT = 166,
  OOM_SSBTRANSMISSION_ARMTIMERS_RANDOM = 167,
  OOM_SSBDISPATCH_FETCHXMITMSG = 168,
  OOM_SSBEXPR_EVALUATE1 = 169,
  OOM_SSBEXPR_EVALUATE2 = 170,
  OOM_SSBREADCACHE_CREATE_MEMOBJ = 171,
  OOM_CROWSETTRACETABLE_INIT = 172,
  OOM_CROWSETTRACEFILTERINFO_INIT = 173,
  OOM_SSBREADCACHE_ADD = 174,
  OOM_SSBSECURITYMGR_STARTUP = 175,
  OOM_SSBSECURITYMGR_CREATE_DSH_MEMOBJ = 176,
  OOM_SSBSECURITYMGR_CREATE_RSB_MEMOBJ = 177,
  OOM_SSBTABACCESSCACHE_CREATE_MEMOBJ = 178,
  OOM_DTCXACTRMONLY_PREPARE = 179,
  OOM_ILLEGAL10 = 180,
  OOM_SSBTRANSPORTMGR_STARTUP = 181,
  OOM_ILLEGAL11 = 182,
  OOM_SSBMSGXMITTER_STARTUP = 183,
  OOM_CRSRSELECTSTMT_CREATECURSOREXEC_MEMOBJ = 184,
  OOM_CQDYNARRAY_CREATE_ARRAY1 = 185,
  OOM_CQDYNARRAY_CREATE_ARRAY2 = 186,
  OOM_CQDYNARRAY_RESIZE = 187,
  OOM_CQHASHTABLE_CREATE = 188,
  OOM_CQHASHTABLE_RESIZE = 189,
  OOM_ORPHANLOB_ILOCKBYTESS = 190,
  OOM_RAISE_NET_ERROR = 191,
  OOM_PROCESS_RPC = 192,
  OOM_SRVRPCINFO_CREATE_MEMOBJ = 193,
  OOM_TREEUTIL_CREATENODE = 194,
  OOM_TREEUTIL_CREATEWSTRNODE = 195,
  OOM_VALREFPARAM_GENSTRINGVAL = 196,
  OOM_IVDMANAGER_CREATE_VIEWDEF = 197,
  OOM_CVDMANAGER_CREATE_VIEWDEF_STORE = 198,
  OOM_CVDMANAGER_ADJUST_CREATE_SMALLMEMOBJ = 199,
  OOM_CVDMANAGER_STORE_CREATE_SMALLMEMOBJ = 200,
  OOM_XMLDBCACHE_CREATE_XMLDBTYPE_MEMOBJ = 201,
  OOM_XMLDBCACHE_XMLDBTYPE_CACHEEXCLUSIVE = 202,
  OOM_XMLDBCACHE_CREATE_XMLDBELEM_MEMOBJ = 203,
  OOM_XMLDBCACHE_XMLDBELEM_CACHEEXCLUSIVE = 204,
  OOM_XMLDBCACHE_CREATE_XMLDBATTRIB_MEMOBJ = 205,
  OOM_XMLDBCACHE_XMLDBATTRIB_CACHEEXCLUSIVE = 206,
  OOM_XMLROWSET_PREPXMLTEXTOVERFLOW = 207,
  OOM_XMLUTIL_GETXMLIDENTIFIER = 208,
  OOM_BCPROWSET_EXECINSSTMT = 209,
  OOM_BCP_CREATEINPROCPROV = 210,
  OOM_FSAHELPER_LOCKSCHEMA = 211,
  OOM_FTRANGE_GETROWSETINTERFACE = 212,
  OOM_HTTP_SPRESERVENAME = 213,
  OOM_HTTP_SPDELETERESERVATION = 214,
  OOM_HTTP_SPREGISTERSSLCERT = 215,
  OOM_HTTP_SPDELETESSLCERT = 216,
  OOM_HTTP_REGUNREGKERBOROS = 217,
  OOM_NTSEC_GENSERVERCTXT = 218,
  OOM_CDYNPVARRAY_GROWTOSIZE = 219,
  OOM_CCACHEOBJECT_GETSQLWITHBLOCKTEXT = 220,
  OOM_RECOVERYMGR_ANALYSISPASS_ALLOC_DIRTY_PAGE_TABLE = 221,
  OOM_DIRTYPAGETABLE_INIT = 222,
  OOM_DIRTYPAGETABLE_ADDENTRY = 223,
  OOM_CSECPVARRAY_GROWTOSIZE = 224,
  OOM_SEHASHTABLE_INIT = 225,
  OOM_SNI_SSPI_SNISECGENSERVERCTXT = 226,
  OOM_SPGETSCHEMALOCK = 227,
  OOM_CXPROC_EXECUTE = 228,
  OOM_CFNGETSQLTABLE_GETNEXTROW = 229,
  OOM_MSQLXACTYIELDDQ = 230,
  OOM_TEMP2 = 231,
  OOM_ILLEGAL1 = 232,
  OOM_ILLEGAL2 = 233,
  OOM_ILLEGAL3 = 234,
  OOM_CSQLSOURCE_CREATEXPROC = 235,
  OOM_METADATA_DBCACHE_STORE = 236,
  OOM_METADATE_DBCACHE_MEMOBJ = 237,
  OOM_FTCRAWLMGR_SETRTPATH = 238,
  OOM_EVENT_TSQLCMD_FILTER = 239,
  OOM_RPC_READLOBCHUNK = 240,
  OOM_ASYNC_CURSOR_POPL_CREATE_CONN = 241,
  OOM_ASYNC_CURSOR_POPL_INIT_BATCH = 242,
  OOM_ASYNC_CURSOR_POPL_ADD_BATCH = 243,
  OOM_ASYNC_CURSOR_POPL_ENQUEUETASK = 244,
  OOM_ASYNC_CURSOR_POPL_SETUP_CONN = 245,
  OOM_ASYNC_CURSOR_POPL_STARTUP = 246,
  OOM_SECCTXT_USERSTORE = 247,
  OOM_SECCTXT_MEMOBJ = 248,
  OOM_SECCTXT_CREATE_DESCRIPTOR = 249,
  OOM_FTCRAWLMGR_SETDUMPFLAG = 250,
  OOM_FTCRAWLMGR_SETDUMPERPATH = 251,
  OOM_CLREXECCACHE_CREATE_DYNAMICREQUEST_MEMOBJ = 252,
  OOM_CLREXECCACHE_CREATE_PIPE_MEMOBJ = 253,
  OOM_CLREXECCACHE_CREATE_BLOB_MEMOBJ = 254,
  OOM_QNOTIF_MGR_INSERT = 255,
  OOM_QNOTIF_MGR_REGISTRATION = 0,
  OOM_QNOTIF_TM_CREATE = 1,
  OOM_CVDMANAGER_INSERT = 2,
  OOM_APPDOMAIN_CREATECHEAP = 3,
  OOM_APPDOMAIN_CREATEDDL = 4,
  OOM_FSM_GETCACHE1 = 5,
  OOM_FSM_GETCACHE2 = 6,
  OOM_FSM_GETCACHE3 = 7,
  OOM_FSM_UNCACHE = 8,
  OOM_TREEUTIL_TREECOPY = 9,
  OOM_ASMBYTES_CACHE = 10,
  OOM_CREATE_ASMBYTES_CACHE = 11,
  OOM_RLSAC_MEMOBJ = 12,
  OOM_CREATE_HOBT = 13,
  OOM_DQ_OLEDBRANGESCHEMA_GETROWSET = 14,
  OOM_SSBXMLVALIDATION = 15,
  OOM_ENDPOINTCOLLECTION_CREATE1 = 16,
  OOM_ENDPOINTCOLLECTION_CREATE2 = 17,
  OOM_IULCONTROLLER_CREATE1 = 18,
  OOM_IULCONTROLLER_CREATE2 = 19,
  OOM_SOAPSESSIONCACHE = 20,
  OOM_MXCPARTITIONEDSTACK = 21,
  OOM_FSNAME_ACCESSOR = 22,
  OOM_SLACCPRIM_INIT = 23,
  OOM_RECOVERYUNIT_INIT_CREATE_SYSTEM_ROWSET_STORE_CONTROLLER = 24,
  OOM_ALTERXMLSCHEMA_MEMOBJ = 25,
  OOM_XSTMTPARTITIONEDSTACK = 26,
  OOM_LOB_OPERATION = 27,
  OOM_TREEGEN_ALLOCATERAW = 28,
  OOM_SSBXMITQUEUETRANELEM_GET = 29,
  OOM_NEW_ARRAY_PMO = 30,
  OOM_NEW_ARRAY_PMO_FILE_LINE = 31,
  OOM_NEW_ARRAY_PLAIN = 32,
  OOM_XSD_DERIVED_TYPES_FINDER_REALLOC = 33,
  OOM_DBM_START_TRANSACTION = 34,
  OOM_SSBTRANSMISSION_CREATECACHESTORE = 35,
  OOM_SSBMSGXMITTER_PERIODIC_WORK_NOTIFICATION = 36,
  OOM_SSBMSGXMITTER_ADD_SERVICE_INFO_ENTRY = 37,
  OOM_CSBTASKLOCALSTORAGE_GET = 38,
  OOM_SSBXMITXACTDATA_GET = 39,
  OOM_PAGE_FLUSH_MANAGER = 40,
  OOM_SSBDIALOGDATACACHE_CREATE = 41,
  OOM_CREATE_QUERYEXECCNTXTFORSE_MEMOBJ = 42,
  OOM_TWOTHREADPRODUCER_ENQUEUETASK_TIMEOUT = 43,
  OOM_QO_MEMORY_PRESSURE_NO_PLAN_AVAILABLE = 44,
  OOM_QO_MEMORY_PRESSURE_PLAN_AVAILABLE_NOT_USED_ENOUGH_MEMORY = 45,
  OOM_SSBTRANSMISSION_GET_FROMSERVICE = 46,
  OOM_SSBTRANSMISSION_GET_SERVICECONTRACT = 47,
  OOM_FSA_SYNC_EA_BUFFER = 48,
  OOM_ABR_STATEMACHINE = 49,
  OOM_ABR_BACKUP_FILE_CREATE = 50,
  OOM_ABR_STACK_ALLOC = 51,
  OOM_ABR_BUILD_BACKUPFILE_SQL = 52,
  OOM_ABR_BACKUP_FILE_OPEN = 53,
  OOM_ABR_BUILD_VERIFY_SQL = 54,
  OOM_ABR_DEVICE_SET_CREATE = 55,
  OOM_ABR_ENQUEUE_SQL_TASK = 56,
  OOM_ABR_DEVICE_CREATION = 57,
  OOM_ABR_FILE_METADATA_GET = 58,
  OOM_ABR_FILE_ITER_HANDLE_CLOSE = 59,
  OOM_ABR_BACKUP_FILE_GET_ERROR = 60,
  OOM_ABR_IMS_FILE_CREATION = 61,
  OOM_ABR_IMS_FILE_INIT = 62,
  OOM_ABR_TEMP_FILE_METADATA_GET = 63,
  OOM_ABR_TEMP_FILE_ITER_HANDLE_CLOSE = 64,
  OOM_ABR_TEMP_BACKUP_FILE_GET_ERROR = 65,
  OOM_ABR_EXECUTE_SQL = 66,
  OOM_ABR_BUILD_RESTOREFILE_SQL = 67,
  OOM_ABR_BUILD_RECOVERDATABASE_SQL = 68,
  OOM_ABR_IOTHROTTLER_REGISTER_DEVICE = 69,
  OOM_MTX_ERRORHANDLING_THREAD = 70,
  OOM_XE_STARTUP_MEMOBJ = 71,
  OOM_XTP_DBALLOC = 72,
  OOM_FILESTREAM_PATH = 73,
  OOM_SSB_CONVPRICACHE_ADD = 74,
  OOM_OSF_ADD_MAP_PAGE = 75,
  OOM_MTM_WORKSPACE_ADD = 76,
  OOM_FORMATTER_ALLOCATE_PAGE = 77,
  OOM_PIPELINE_STORAGE = 78,
  OOM_DISPATCH_HANDLER = 79,
  OOM_MATRIX_RPCRUNTIME = 80,
  OOM_MATRIX_CMA = 81,
  OOM_SECAUDIT_TVF = 82,
  OOM_SECAUDIT_STARTUP = 83,
  OOM_SORTEDLIST_GROWINDEX = 84,
  OOM_INPROC_CREATE_TABLE_WRITER = 85,
  OOM_INPROC_CREATE_TABLE_PARAMETER = 86,
  OOM_SEBUFSTREAM_REALLOC = 87,
  OOM_QO_INDEXUSAGESTATS = 88,
  OOM_SEC_ACRUSERSTORE = 89,
  OOM_MATRIX_STVF_RPC = 90,
  OOM_MATRIX_GDM = 91,
  OOM_MATRIX_GDMA = 92,
  OOM_MATRIX_GDM_OBJ_POOL = 93,
  OOM_MATRIX_GDM_CYCLE = 94,
  OOM_MATRIX_GDM_ALLOC_MSG = 95,
  OOM_MATRIX_GDMA_ALLOC_MSG = 96,
  OOM_MATRIX_MTM_UNRESOLVEDXACTTABLE = 97,
  OOM_MATRIX_RPCRUNTIME_COLLECTION = 98,
  OOM_SP_SERVER_DIAGNOSTICS_DEADLOCK_INIT = 99,
  OOM_TTCACHE = 100,
  OOM_DQ_MEMORY_PROTECTION = 101,
  OOM_MAKEFUNCTOR = 102,
  OOM_HADR_MEMORY_CLERK = 103,
  OOM_HADR_AGH_NOTIFICATION = 104,
  OOM_LOGMGR_CREATELOGPOOLMGR = 105,
  OOM_LOGCONSUMER_REFERENCE = 106,
  OOM_LOGPOOL_PRIVATE = 107,
  OOM_LOGPOOL_CREATELOGCONSUMER = 108,
  OOM_HADRFS_OBJECT_POOLS_INIT = 109,
  OOM_HADRFS_POOLED_OBJECT_GET = 110,
  OOM_HADR_TRANSPORT = 111,
  OOM_HADR_POOLED_OBJECT_GET = 112,
  OOM_LOGPOOL_PRIVATECOVERING = 113,
  OOM_MATRIX_STP = 114,
  OOM_MATRIX_PLAN_FRAGMENT = 115,
  OOM_MATRIX_TCM_MANAGER = 116,
  OOM_MATRIX_TCM_AGENT = 117,
  OOM_MATRIX_SESSION_FINIT = 118,
  OOM_MATRIX_SESSION_FINITXACTMGRANDLOCKLIST = 119,
  OOM_SESSION_MGR_CREATE_THREAD_POOL = 120,
  OOM_SESSION_MGMT_HANDLER = 121,
  OOM_MATRIX_COMM_PMO = 122,
  OOM_LDM_INIT_MEMOBJ_XML_REPORT = 123,
  OOM_LDM_INIT_MEMOBJ_WFG = 124,
  OOM_LDM_INIT_MEMOBJ_RING_BUFFER = 125,
  OOM_LDM_INIT_MEMOBJ_XML_REPORT_CONTENT = 126,
  OOM_LDM_INIT_BLOCKED_PROCESS_REPORT_TING_BUFFER = 127,
  OOM_COLUMNSTORE_CREATION = 128,
  OOM_COLUMNSTOREOBJECTPOOL_FIX_OBJECT = 129,
  OOM_COLUMNSTORE_DESERIALIZE_COMPRESSEDPAGE = 130,
  OOM_COLUMNSTORE_DESERIALIZE_ADDSTRINGPAGE = 131,
  OOM_QUERY_EXECUTION_CREATE_SYNCPOINT = 132,
  OOM_COLUMNSTOREOBJECTPOOL_FIX_CREATE_PMO = 133,
  OOM_XE_LIVE_TVF = 128,
  OOM_LWC_INIT = 129,
  OOM_FILESTREAM_CHUNKER_INIT = 130,
  OOM_FILESTREAM_CHUNKER_CONTEXT = 131,
  OOM_FILETABLE_STORE = 132,
  OOM_SEREPL_SESSION_XACT = 133,
  OOM_SEREPL_PARTITIONID_INIT = 134,
  OOM_SEREPL_ROWSET_CACHESTORE = 135,
  OOM_SEREPL_ROWSET = 136,
  OOM_REFHASH_INIT = 137,
  OOM_ASYNC_TRANSPORT_POST = 138,
  OOM_SCALAR_VLR = 139,
  OOM_LIST_VLR = 140,
  OOM_ENQUEUE_PREPARE_FOR_COPY = 141,
  OOM_ENQUEUE_COPY = 142,
  OOM_REF_VLR = 143,
  OOM_LOGMGR_INIT_CACHESTORE = 144,
  OOM_STACK_HASH_VLR = 145,
  OOM_ALLOC_MSG_PAGE = 146,
  OOM_XE_BROADCAST_MEMOBJ = 147,
  OOM_HADR_TDSSNI_SYNC = 148,
  OOM_SQLHKHOST_TX_EXTENSION = 148,
  OOM_SQLHKHOST_DB_CACHE = 149,
  OOM_SQLHKPROC_PARTITIONED_STACK = 150,
  OOM_HADR_DBPARTNER_TASK_ENQUEUE = 151,
  OOM_XMLDBCACHE_CREATE_SELECTIVEDG_MEMOBJ = 152,
  OOM_XMLDBCACHE_SELECTIVEDG_CACHEEXCLUSIVE = 153,
  OOM_CLOUDSPECPROC_STRING = 154,
  OOM_SQL_FABRIC_MEMORY_CLERK = 155,
  OOM_SQLHKPROC = 156,
  OOM_XTP_DMV = 157,
  OOM_XTP_HOSTADDDB = 158,
  OOM_SCRIPTDEPLOYMENT_PROTECTION = 159,
  OOM_XTP_HOSTREDO = 160,
  OOM_QDS_MANAGER_INIT = 161,
  OOM_QDS_RT_STATS = 162,
  OOM_QDS_STMT_USERSTORE = 163,
  OOM_QDS_DB_INIT = 164,
  OOM_XFCB = 165,
  OOM_COLUMNSTORE_DESERIALIZE_ADDVLDPAGE = 166,
  OOM_DECOMP_CSI_ARCHIVAL_COMPRESSION = 167,
  OOM_XTP_BACKUP = 168,
  OOM_EXCEPTIONID_LAST = 169,
};

struct _HNODE;

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_527, *PTAG_UNNAMED_527;

class SEListEnum<XListEnumerator<SOS_DispatcherBase>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<SOS_DispatcherBase>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<SOS_DispatcherBase>* m_pNext;
}; /* size: 0x0010 */

typedef enum
{
  bUseDefaults = 0,
  bIncrementalAlloc = 1,
  bThreadSafe = 2,
  bNoSlots = 4,
  bFixedSize = 8,
  bCache = 16,
  bOS = 32,
  bPartitionedByCpu = 64,
  bPartitionedByNode = 128,
  bLargePage = 256,
  bDebugConfigOffset = 16,
  bTraceAlloc = 0x80000,
  bTraceFree = 0x10000,
  bTraceMark = 0x20000,
  bTraceShrink = 0x40000,
  bTraceAll = 0xf0000,
  bNoDebug = 0x100000,
  bNoLeakTrace = 0x200000,
  bPageHeap = 0x400000,
  bPageHeapUnaligned = 0x800000,
  bStrictMallocSpy = 0x1000000,
  bCheckThreadAccess = 0x2000000,
  bFailureInjection = 0x10000,
  bInvalidCombination = -1,
} TAG_UNNAMED_528, *PTAG_UNNAMED_528;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_529, *PTAG_UNNAMED_529;

enum ResourceMonitor::notification_states
{
  STATE_PHYSICAL_STEADY = 0,
  STATE_PHYSICAL_HIGH = 1,
  STATE_PHYSICAL_LOW = 2,
  STATE_PHYSICAL_LOW_VIRTUAL_LOW = 3,
  STATE_PHYSICAL_STEADY_VIRTUAL_LOW = 4,
  STATE_EMPTY = 5,
  STATE_LAST = 6,
  STATE_UNREACHABLE = 7,
};

class UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

enum entry_state
{
  ACTUAL_ENTRY = 1,
  SIMULATED_ENTRY = 2,
  HISTORY_ENTRY = 4,
  DEAD_ENTRY = 8,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_530, *PTAG_UNNAMED_530;

enum MemoryBrokerType
{
  MEMORYBROKER_FOR_CACHE = 0,
  MEMORYBROKER_FOR_STEAL = 1,
  MEMORYBROKER_FOR_RESERVE = 2,
  MEMORYBROKER_FOR_COMMITTED = 3,
  MEMORYBROKER_FOR_HASHED_DATA_PAGES = 4,
  MEMORYBROKER_FOR_XTP = 5,
  MEMORYBROKER_LAST_REAL = 6,
  MEMORYBROKER_FOR_CACHE_INFLIGHT = 6,
  MEMORYBROKER_LAST = 7,
  MEMORYBROKER_FOR_HASHED = 7,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_531, *PTAG_UNNAMED_531;

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_532, *PTAG_UNNAMED_532;

struct IViewObjectEx
{
}; /* size: 0x0008 */

struct IInternetProtocolSink
{
}; /* size: 0x0008 */

struct ITypeInfo
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_533, *PTAG_UNNAMED_533;

struct IRowsetBookmark
{
}; /* size: 0x0008 */

enum ChangeCPUIdSequence
{
  ChangeCPUIdBeforeBinding = 0,
  ChangeCPUIdAfterBinding = 1,
};

enum ntTagTypes
{
  ntTOTAL = 0,
  ntQP = 1,
  ntES = 2,
  ntMSQL = 3,
  ntCRS = 4,
  ntSE = 5,
  ntGENERIC = 6,
  ntTRACE = 7,
  ntSSB = 8,
  ntFT = 9,
  ntSL = 10,
  ntMATRIX = 11,
  ntTS = 12,
  ntCLOUDDB = 13,
  x_cTagLast = 14,
  x_cTagMax = 32,
};

typedef union _userHBITMAP::__MIDL_IWinTypes_0007
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct _userBITMAP* hRemote;
    /* 0x0000 */ __int64 hInproc64;
  }; /* size: 0x0008 */
} userHBITMAP::__MIDL_IWinTypes_0007, *PuserHBITMAP::__MIDL_IWinTypes_0007; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_534, *PTAG_UNNAMED_534;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_535, *PTAG_UNNAMED_535;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_536, *PTAG_UNNAMED_536;

struct XECollectedEvent
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ unsigned short m_eddCount;
  /* 0x0004 */ unsigned short m_addCount;
  /* 0x0006 */ char Padding_201[2];
  /* 0x0008 */ unsigned int m_eddBytes;
  /* 0x000c */ unsigned int m_addBytes;
  /* 0x0010 */ struct XECollectedEventData* m_edds;
  /* 0x0018 */ struct XECollectedActionData* m_adds;
  /* 0x0020 */ unsigned __int64 m_ticks;
}; /* size: 0x0028 */

enum eXcursionAction
{
  ACTION_PASS = 0,
  ACTION_QUIT = 1,
  ACTION_RAISE = 2,
  ACTION_PAUSE = 3,
  ACTION_FAIL = 4,
};

union _DL_EUI48;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_537, *PTAG_UNNAMED_537;

enum XListOperation
{
  XLO_None = 0,
  XLO_Append = 1,
  XLO_Insert = 2,
  XLO_Delete = 3,
  XLO_Invalidate = 4,
  XLO_GetNext = 5,
  XLO_GetPrev = 6,
  XLO_GetHead = 7,
  XLO_IterNext = 8,
  XLO_IterInv = 9,
  XLO_IterAttach = 10,
  XLO_IterDetach = 11,
  XLO_IterHead = 12,
};

class XeSqlPkg::object_deleted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_202[140];
      /* 0x0240 */ unsigned char m_buf[43];
    }; /* size: 0x003b */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int related_object_idOffset;
    /* 0x0000 */ const int ddl_phaseOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 2,
} TAG_UNNAMED_538, *PTAG_UNNAMED_538;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_539, *PTAG_UNNAMED_539;

struct HUMPD__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  eventIdx = 4,
  stateIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_540, *PTAG_UNNAMED_540;

enum MemoryNode::MemoryPhase
{
  MPGrowth = 0,
  MPDiscardAway = 1,
  MPSteady = 2,
};

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  from_brick_idIdx = 2,
  database_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_541, *PTAG_UNNAMED_541;

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_542, *PTAG_UNNAMED_542;

typedef struct _SE_ACCESS_REQUEST
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_203;
  /* 0x0008 */ struct _SE_SECURITY_DESCRIPTOR* SeSecurityDescriptor;
  /* 0x0010 */ unsigned long DesiredAccess;
  /* 0x0014 */ unsigned long PreviouslyGrantedAccess;
  /* 0x0018 */ void* PrincipalSelfSid;
  /* 0x0020 */ struct _GENERIC_MAPPING* GenericMapping;
  /* 0x0028 */ unsigned long ObjectTypeListCount;
  /* 0x002c */ long Padding_204;
  /* 0x0030 */ struct _OBJECT_TYPE_LIST* ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST; /* size: 0x0038 */

enum SOSHOST_TASK_CALLBACK_TYPE
{
  SOSHOST_TASK_CALLBACK_SUSPEND = 0,
  SOSHOST_TASK_CALLBACK_RESUME = 1,
  SOSHOST_TASK_CALLBACK_DONE = 2,
  SOSHOST_TASK_CALLBACK_INSTANT_RESUME = 3,
  SOSHOST_TASK_CALLBACK_LAST = 4,
};

enum SOS_OS::OS_AFFINITY
{
  OS_HARD_AFFINITY = 1,
  OS_SOFT_AFFINITY = 2,
};

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  index_idIdx = 2,
  hobt_idIdx = 3,
  logical_readsIdx = 4,
  physical_readsIdx = 5,
  database_nameIdx = 6,
  LastField = 7,
} TAG_UNNAMED_543, *PTAG_UNNAMED_543;

typedef struct _PROCESS_MEMORY_COUNTERS
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long PageFaultCount;
  /* 0x0008 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x0010 */ unsigned __int64 WorkingSetSize;
  /* 0x0018 */ unsigned __int64 QuotaPeakPagedPoolUsage;
  /* 0x0020 */ unsigned __int64 QuotaPagedPoolUsage;
  /* 0x0028 */ unsigned __int64 QuotaPeakNonPagedPoolUsage;
  /* 0x0030 */ unsigned __int64 QuotaNonPagedPoolUsage;
  /* 0x0038 */ unsigned __int64 PagefileUsage;
  /* 0x0040 */ unsigned __int64 PeakPagefileUsage;
} PROCESS_MEMORY_COUNTERS, *PPROCESS_MEMORY_COUNTERS; /* size: 0x0048 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_544, *PTAG_UNNAMED_544;

typedef struct _SERVICE_TIMECHANGE_INFO
{
  /* 0x0000 */ union _LARGE_INTEGER liNewTime;
  /* 0x0008 */ union _LARGE_INTEGER liOldTime;
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO; /* size: 0x0010 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_545, *PTAG_UNNAMED_545;

class SpinlockHolder<216,2,1>;

enum SOS_WaitInfo::Reason
{
  UNSPECIFIED = 0,
  SLEEP = 1,
  STARTUP = 2,
  SHUTDOWN = 3,
  DISPATCH = 4,
  EXECUTE = 5,
  IO = 6,
  RESOURCE_WAIT = 7,
  LOCK = 8,
  RESULTS = 9,
};

typedef struct _tagSOFTDISTINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwAdState;
  /* 0x000c */ long Padding_205;
  /* 0x0010 */ wchar_t* szTitle;
  /* 0x0018 */ wchar_t* szAbstract;
  /* 0x0020 */ wchar_t* szHREF;
  /* 0x0028 */ unsigned long dwInstalledVersionMS;
  /* 0x002c */ unsigned long dwInstalledVersionLS;
  /* 0x0030 */ unsigned long dwUpdateVersionMS;
  /* 0x0034 */ unsigned long dwUpdateVersionLS;
  /* 0x0038 */ unsigned long dwAdvertisedVersionMS;
  /* 0x003c */ unsigned long dwAdvertisedVersionLS;
  /* 0x0040 */ unsigned long dwReserved;
  /* 0x0044 */ long __PADDING__[1];
} tagSOFTDISTINFO, *PtagSOFTDISTINFO; /* size: 0x0048 */

typedef struct _LDR_RESLOADER_RET
{
  /* 0x0000 */ void* Module;
  /* 0x0008 */ void* DataEntry;
  /* 0x0010 */ void* TargetModule;
} LDR_RESLOADER_RET, *PLDR_RESLOADER_RET; /* size: 0x0018 */

enum DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc::PageDescState
{
  Active = 0,
  Full = 1,
  Partial = 2,
  Empty = 3,
};

class CAutoBase<XMLActionTransformRule>
{
  /* 0x0000 */ struct XMLActionTransformRule* m_pt;
}; /* size: 0x0008 */

typedef struct _USER_MODALS_INFO_1006
{
  /* 0x0000 */ unsigned long usrmod1006_role;
} USER_MODALS_INFO_1006, *PUSER_MODALS_INFO_1006; /* size: 0x0004 */

typedef enum
{
  new_stateIdx = 0,
  prior_stateIdx = 1,
  database_idIdx = 2,
  database_nameIdx = 3,
  state_change_descIdx = 4,
  LastField = 5,
} TAG_UNNAMED_546, *PTAG_UNNAMED_546;

enum SOS_WaitInfo::SpinlockOper
{
  SPO_GET = 0,
  SPO_RELEASE = 1,
};

typedef struct _OSVERSIONINFOEXW
{
  /* 0x0000 */ unsigned long dwOSVersionInfoSize;
  /* 0x0004 */ unsigned long dwMajorVersion;
  /* 0x0008 */ unsigned long dwMinorVersion;
  /* 0x000c */ unsigned long dwBuildNumber;
  /* 0x0010 */ unsigned long dwPlatformId;
  /* 0x0014 */ wchar_t szCSDVersion[128];
  /* 0x0114 */ unsigned short wServicePackMajor;
  /* 0x0116 */ unsigned short wServicePackMinor;
  /* 0x0118 */ unsigned short wSuiteMask;
  /* 0x011a */ unsigned char wProductType;
  /* 0x011b */ unsigned char wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW; /* size: 0x011c */

typedef enum
{
  Value = 0,
} TAG_UNNAMED_547, *PTAG_UNNAMED_547;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_548, *PTAG_UNNAMED_548;

class SpinlockHolder<301,1,1>
{
  /* 0x0000 */ class Spinlock<301,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

enum PWAIT_enum
{
  PWAIT_UNKNOWN = 0x400000,
  PWAIT_LCK_M_SCH_S = 1,
  PWAIT_LCK_M_SCH_M = 2,
  PWAIT_LCK_M_S = 3,
  PWAIT_LCK_M_U = 4,
  PWAIT_LCK_M_X = 5,
  PWAIT_LCK_M_IS = 6,
  PWAIT_LCK_M_IU = 7,
  PWAIT_LCK_M_IX = 8,
  PWAIT_LCK_M_SIU = 9,
  PWAIT_LCK_M_SIX = 10,
  PWAIT_LCK_M_UIX = 11,
  PWAIT_LCK_M_BU = 12,
  PWAIT_LCK_M_RS_S = 13,
  PWAIT_LCK_M_RS_U = 14,
  PWAIT_LCK_M_RIn_NL = 15,
  PWAIT_LCK_M_RIn_S = 16,
  PWAIT_LCK_M_RIn_U = 17,
  PWAIT_LCK_M_RIn_X = 18,
  PWAIT_LCK_M_RX_S = 19,
  PWAIT_LCK_M_RX_U = 20,
  PWAIT_LCK_M_RX_X = 21,
  PWAIT_PADDING_111 = 22,
  PWAIT_PADDING_112 = 23,
  PWAIT_PADDING_113 = 24,
  PWAIT_PADDING_114 = 25,
  PWAIT_PADDING_115 = 26,
  PWAIT_PADDING_116 = 27,
  PWAIT_PADDING_117 = 28,
  PWAIT_PADDING_118 = 29,
  PWAIT_PADDING_119 = 30,
  PWAIT_PADDING_120 = 31,
  PWAIT_LATCH_NL = 0x4000020,
  PWAIT_LATCH_KP = 0x4000021,
  PWAIT_LATCH_SH = 0x4000022,
  PWAIT_LATCH_UP = 0x4000023,
  PWAIT_LATCH_EX = 0x4000024,
  PWAIT_LATCH_DT = 0x4000025,
  PWAIT_PADDING_1 = 0x4000026,
  PWAIT_PADDING_2 = 0x4000027,
  PWAIT_PADDING_3 = 0x4000028,
  PWAIT_PADDING_4 = 0x4000029,
  PWAIT_PADDING_5 = 0x400002a,
  PWAIT_PADDING_6 = 0x400002b,
  PWAIT_PADDING_7 = 0x400002c,
  PWAIT_PADDING_8 = 0x400002d,
  PWAIT_PADDING_9 = 0x400002e,
  PWAIT_PADDING_10 = 0x400002f,
  PWAIT_PAGELATCH_NL = 0x4000030,
  PWAIT_PAGELATCH_KP = 0x4000031,
  PWAIT_PAGELATCH_SH = 0x4000032,
  PWAIT_PAGELATCH_UP = 0x4000033,
  PWAIT_PAGELATCH_EX = 0x4000034,
  PWAIT_PAGELATCH_DT = 0x4000035,
  PWAIT_PADDING_11 = 0x4000036,
  PWAIT_PADDING_12 = 0x4000037,
  PWAIT_PADDING_13 = 0x4000038,
  PWAIT_PADDING_14 = 0x4000039,
  PWAIT_PADDING_15 = 0x400003a,
  PWAIT_PADDING_16 = 0x400003b,
  PWAIT_PADDING_17 = 0x400003c,
  PWAIT_PADDING_18 = 0x400003d,
  PWAIT_PADDING_19 = 0x400003e,
  PWAIT_PADDING_20 = 0x400003f,
  PWAIT_PAGEIOLATCH_NL = 0x4000040,
  PWAIT_PAGEIOLATCH_KP = 0x4000041,
  PWAIT_PAGEIOLATCH_SH = 0x4000042,
  PWAIT_PAGEIOLATCH_UP = 0x4000043,
  PWAIT_PAGEIOLATCH_EX = 0x4000044,
  PWAIT_PAGEIOLATCH_DT = 0x4000045,
  PWAIT_PADDING_21 = 0x4000046,
  PWAIT_PADDING_22 = 0x4000047,
  PWAIT_PADDING_23 = 0x4000048,
  PWAIT_PADDING_24 = 0x4000049,
  PWAIT_PADDING_25 = 0x400004a,
  PWAIT_PADDING_26 = 0x400004b,
  PWAIT_PADDING_27 = 0x400004c,
  PWAIT_PADDING_28 = 0x400004d,
  PWAIT_PADDING_29 = 0x400004e,
  PWAIT_PADDING_30 = 0x400004f,
  PWAIT_TRANMARKLATCH_NL = 0x4000050,
  PWAIT_TRANMARKLATCH_KP = 0x4000051,
  PWAIT_TRANMARKLATCH_SH = 0x4000052,
  PWAIT_TRANMARKLATCH_UP = 0x4000053,
  PWAIT_TRANMARKLATCH_EX = 0x4000054,
  PWAIT_TRANMARKLATCH_DT = 0x4000055,
  PWAIT_PADDING_31 = 0x4000056,
  PWAIT_PADDING_32 = 0x4000057,
  PWAIT_PADDING_33 = 0x4000058,
  PWAIT_PADDING_34 = 0x4000059,
  PWAIT_PADDING_35 = 0x400005a,
  PWAIT_PADDING_36 = 0x400005b,
  PWAIT_PADDING_37 = 0x400005c,
  PWAIT_PADDING_38 = 0x400005d,
  PWAIT_PADDING_39 = 0x400005e,
  PWAIT_PADDING_40 = 0x400005f,
  PWAIT_LZW_SLEEP = 0x400060,
  PWAIT_IO_COMPLETION = 0x400061,
  PWAIT_ASYNC_IO_COMPLETION = 0x400062,
  PWAIT_NETWORK_IO = 0x400063,
  PWAIT_SLEEP_BPOOL_FLUSH = 0x400064,
  PWAIT_CHKPT = 0x400065,
  PWAIT_SLEEP_DBSTARTUP = 0x400066,
  PWAIT_DB_STATE = 0x400067,
  PWAIT_SLEEP_MASTERMDREADY = 0x400068,
  PWAIT_SLEEP_MASTERUPGRADED = 0x400069,
  PWAIT_SLEEP_MASTERDBREADY = 0x40006a,
  PWAIT_SLEEP_TEMPDBSTARTUP = 0x40006b,
  PWAIT_SLEEP_DCOMSTARTUP = 0x40006c,
  PWAIT_SLEEP_TASK = 0x40006d,
  PWAIT_SLEEP_SYSTEMTASK = 0x40006e,
  PWAIT_RESOURCE_SEMAPHORE = 0x40006f,
  PWAIT_DTC = 0x400070,
  PWAIT_OLEDB = 0x400071,
  PWAIT_FAILPOINT = 0x400072,
  PWAIT_RESOURCE_QUEUE = 0x400073,
  PWAIT_ASYNC_DISKPOOL_LOCK = 0x400074,
  PWAIT_SOS_WORKER = 0x400075,
  PWAIT_HOLDER1 = 0x400076,
  PWAIT_DEBUG = 0x400077,
  PWAIT_REPLICA_WRITES = 0x400078,
  PWAIT_BROKER_RECEIVE_WAITFOR = 0x400079,
  PWAIT_DBMIRRORING_CMD = 0x40007a,
  PWAIT_WAIT_FOR_RESULTS = 0x40007b,
  PWAIT_SOS_SCHEDULER_YIELD = 0x40007c,
  PWAIT_HOLDER2 = 0x40007d,
  PWAIT_SOS_VIRTUALMEMORY_LOW = 0x40007e,
  PWAIT_SOS_CALLBACK_REMOVAL = 0x40007f,
  PWAIT_SOS_MEMORY_TOPLEVELBLOCKALLOCATOR = 0x400080,
  PWAIT_SOS_PHYS_PAGE_CACHE = 0x400081,
  PWAIT_ONDEMAND_TASK_QUEUE = 0x400082,
  PWAIT_LOGMGR_QUEUE = 0x400083,
  PWAIT_REQUEST_FOR_DEADLOCK_SEARCH = 0x400084,
  PWAIT_CHECKPOINT_QUEUE = 0x400085,
  PWAIT_PARALLEL_BACKUP_QUEUE = 0x400086,
  PWAIT_DUMP_LOG_COORDINATOR_QUEUE = 0x400087,
  PWAIT_LOWFAIL_MEMMGR_QUEUE = 0x400088,
  PWAIT_BACKUP = 0x400089,
  PWAIT_BACKUPBUFFER = 0x40008a,
  PWAIT_BACKUPIO = 0x40008b,
  PWAIT_BACKUPTHREAD = 0x40008c,
  PWAIT_DBMIRROR_DBM_MUTEX = 0x40008d,
  PWAIT_DBMIRROR_DBM_EVENT = 0x40008e,
  PWAIT_DBMIRROR_SEND = 0x40008f,
  PWAIT_DBMIRROR_EVENTS_QUEUE = 0x400090,
  PWAIT_DBMIRROR_WORKER_QUEUE = 0x400091,
  PWAIT_HOLDER3 = 0x400092,
  PWAIT_HTTP_START = 0x400093,
  PWAIT_HTTP_ENUMERATION = 0x400094,
  PWAIT_SOAP_READ = 0x400095,
  PWAIT_SOAP_WRITE = 0x400096,
  PWAIT_DUMP_LOG_COORDINATOR = 0x400097,
  PWAIT_DISKIO_SUSPEND = 0x400098,
  PWAIT_IMPPROV_IOWAIT = 0x400099,
  PWAIT_HOLDER4 = 0x40009a,
  PWAIT_DEADLOCK_TASK_SEARCH = 0x40009b,
  PWAIT_REPL_SCHEMA_ACCESS = 0x40009c,
  PWAIT_REPL_CACHE_ACCESS = 0x40009d,
  PWAIT_HOLDER5 = 0x40009e,
  PWAIT_HOLDER6 = 0x40009f,
  PWAIT_HOLDER7 = 0x4000a0,
  PWAIT_KSOURCE_WAKEUP = 0x4000a1,
  PWAIT_SQLSORT_SORTMUTEX = 0x4000a2,
  PWAIT_SQLSORT_NORMMUTEX = 0x4000a3,
  PWAIT_SQLTRACE_WAIT_ENTRIES = 0x4000a4,
  PWAIT_SQLTRACE_FILE_BUFFER = 0x4000a5,
  PWAIT_SQLTRACE_INCREMENTAL_FLUSH_SLEEP = 0x4000a6,
  PWAIT_SQLTRACE_SHUTDOWN = 0x4000a7,
  PWAIT_HOLDER8 = 0x4000a8,
  PWAIT_QUERY_TRACEOUT = 0x4000a9,
  PWAIT_DTC_STATE = 0x4000aa,
  PWAIT_HOLDER9 = 0x4000ab,
  PWAIT_HOLDER10 = 0x4000ac,
  PWAIT_BROKER_TRANSMITTER = 0x4000ad,
  PWAIT_BROKER_SERVICE = 0x4000ae,
  PWAIT_BROKER_SHUTDOWN = 0x4000af,
  PWAIT_BROKER_MASTERSTART = 0x4000b0,
  PWAIT_BROKER_REGISTERALLENDPOINTS = 0x4000b1,
  PWAIT_BROKER_EVENTHANDLER = 0x4000b2,
  PWAIT_FCB_REPLICA_WRITE = 0x4000b3,
  PWAIT_FCB_REPLICA_READ = 0x4000b4,
  PWAIT_HOLDER11 = 0x4000b5,
  PWAIT_WRITELOG = 0x4000b6,
  PWAIT_HOLDER12 = 0x4000b7,
  PWAIT_EXCHANGE = 0x20000b8,
  PWAIT_HOLDER13 = 0x20000b9,
  PWAIT_EC = 0x20000ba,
  PWAIT_TEMPOBJ = 0x20000bb,
  PWAIT_XACTLOCKINFO = 0x20000bc,
  PWAIT_LOGMGR = 0x20000bd,
  PWAIT_CMEMTHREAD = 0x20000be,
  PWAIT_CXPACKET = 0x20000bf,
  PWAIT_HASH_TABLE_REPARTITION = 0x20000c0,
  PWAIT_HASH_TABLE_BUILD = 0x20000c1,
  PWAIT_HASH_TABLE_MEMO = 0x20000c2,
  PWAIT_HASH_TABLE_DELETE = 0x20000c3,
  PWAIT_HASH_TABLE_REINIT = 0x20000c4,
  PWAIT_BITMAP_REPARTITION = 0x20000c5,
  PWAIT_BITMAP_ALLOCATION = 0x20000c6,
  PWAIT_BITMAP_REPLICATION = 0x20000c7,
  PWAIT_BITMAP_BUILD = 0x20000c8,
  PWAIT_SHUTDOWN = 0x20000c9,
  PWAIT_WAITFOR = 0x20000ca,
  PWAIT_HOLDER14 = 0x20000cb,
  PWAIT_EXECSYNC = 0x20000cc,
  PWAIT_DTCPNTSYNC = 0x20000cd,
  PWAIT_SOSHOST_INTERNAL = 0x80000ce,
  PWAIT_SOSHOST_SLEEP = 0x80000cf,
  PWAIT_SOSHOST_WAITFORDONE = 0x80000d0,
  PWAIT_SOSHOST_MUTEX = 0x80000d1,
  PWAIT_SOSHOST_EVENT = 0x80000d2,
  PWAIT_SOSHOST_SEMAPHORE = 0x80000d3,
  PWAIT_SOSHOST_RWLOCK = 0x80000d4,
  PWAIT_SOSHOST_TRACELOCK = 0x80000d5,
  PWAIT_MSQL_XP = 0x4000d6,
  PWAIT_MSQL_DQ = 0x4000d7,
  PWAIT_LOGBUFFER = 0x4000d8,
  PWAIT_TRANSACTION_MUTEX = 0x4000d9,
  PWAIT_SLEEP_MSDBSTARTUP = 0x4000da,
  PWAIT_MSSEARCH_COM = 0x4000db,
  PWAIT_XACTWORKSPACE_MUTEX = 0x4000dc,
  PWAIT_TRACEWRITE = 0x4000dd,
  PWAIT_WAITSTAT_MUTEX = 0x4000de,
  PWAIT_TASKSHUTDOWN = 0x4000df,
  PWAIT_HOLDER15 = 0x4000e0,
  PWAIT_WINFS_SHARES = 0x4000e1,
  PWAIT_GUARDIAN = 0x4000e2,
  PWAIT_CLR_TASK_START = 0x4000e3,
  PWAIT_CLR_TASK_JOIN = 0x4000e4,
  PWAIT_CLR_CRST = 0x4000e5,
  PWAIT_CLR_SEMAPHORE = 0x4000e6,
  PWAIT_CLR_MANUAL_EVENT = 0x4000e7,
  PWAIT_CLR_AUTO_EVENT = 0x4000e8,
  PWAIT_CLR_MONITOR = 0x4000e9,
  PWAIT_CLR_RWLOCK_READER = 0x4000ea,
  PWAIT_CLR_RWLOCK_WRITER = 0x4000eb,
  PWAIT_SQLCLR_QUANTUM_PUNISHMENT = 0x4000ec,
  PWAIT_SQLCLR_APPDOMAIN = 0x4000ed,
  PWAIT_SQLCLR_ASSEMBLY = 0x4000ee,
  PWAIT_KTM_ENLISTMENT = 0x4000ef,
  PWAIT_KTM_RECOVERY_RESOLUTION = 0x4000f0,
  PWAIT_KTM_RECOVERY_MANAGER = 0x4000f1,
  PWAIT_SQLCLR_DEADLOCK_DETECTION = 0x4000f2,
  PWAIT_QPJOB_WAITFOR_ABORT = 0x4000f3,
  PWAIT_QPJOB_KILL = 0x4000f4,
  PWAIT_BAD_PAGE_PROCESS = 0x4000f5,
  PWAIT_BACKUP_OPERATOR = 0x4000f6,
  PWAIT_PRINT_ROLLBACK_PROGRESS = 0x4000f7,
  PWAIT_ENABLE_VERSIONING = 0x4000f8,
  PWAIT_DISABLE_VERSIONING = 0x4000f9,
  PWAIT_REQUEST_DISPENSER_PAUSE = 0x4000fa,
  PWAIT_DROPTEMP = 0x4000fb,
  PWAIT_FT_RESTART_CRAWL = 0x4000fc,
  PWAIT_HOLDER16 = 0x4000fd,
  PWAIT_LOGMGR_RESERVE_APPEND = 0x4000fe,
  PWAIT_LOGMGR_FLUSH = 0x4000ff,
  PWAIT_XACT_OWN_TRANSACTION = 0x400100,
  PWAIT_XACT_RECLAIM_SESSION = 0x400101,
  PWAIT_DTC_WAITFOR_OUTCOME = 0x400102,
  PWAIT_DTC_RESOLVE = 0x400103,
  PWAIT_SEC_DROP_TEMP_KEY = 0x400104,
  PWAIT_SRVPROC_SHUTDOWN = 0x400105,
  PWAIT_BROKER_INIT = 0x400106,
  PWAIT_BROKER_CONNECTION_RECEIVE_TASK = 0x400107,
  PWAIT_NET_WAITFOR_PACKET = 0x400108,
  PWAIT_DTC_ABORT_REQUEST = 0x400109,
  PWAIT_DTC_TMDOWN_REQUEST = 0x40010a,
  PWAIT_RECOVER_CHANGEDB = 0x40010b,
  PWAIT_WORKTBL_DROP = 0x40010c,
  PWAIT_HOLDER17 = 0x40010d,
  PWAIT_HOLDER18 = 0x40010e,
  PWAIT_SNI_HTTP_WAITFOR_0_DISCON = 0x40010f,
  PWAIT_UTIL_PAGE_ALLOC = 0x400110,
  PWAIT_SERVER_IDLE_LOCK = 0x400111,
  PWAIT_HOLDER19 = 0x400112,
  PWAIT_DEADLOCK_ENUM_MUTEX = 0x400113,
  PWAIT_HOLDER20 = 0x400114,
  PWAIT_VIEW_DEFINITION_MUTEX = 0x400115,
  PWAIT_QUERY_NOTIFICATION_MGR_MUTEX = 0x400116,
  PWAIT_QUERY_NOTIFICATION_TABLE_MGR_MUTEX = 0x400117,
  PWAIT_QUERY_NOTIFICATION_SUBSCRIPTION_MUTEX = 0x400118,
  PWAIT_QUERY_NOTIFICATION_UNITTEST_MUTEX = 0x400119,
  PWAIT_HOLDER21 = 0x40011a,
  PWAIT_RESOURCE_SEMAPHORE_MUTEX = 0x40011b,
  PWAIT_IO_AUDIT_MUTEX = 0x40011c,
  PWAIT_BUILTIN_HASHKEY_MUTEX = 0x40011d,
  PWAIT_SOS_PROCESS_AFFINITY_MUTEX = 0x40011e,
  PWAIT_MSQL_XACT_MGR_MUTEX = 0x40011f,
  PWAIT_MSQL_XACT_MUTEX = 0x400120,
  PWAIT_QRY_MEM_GRANT_INFO_MUTEX = 0x400121,
  PWAIT_SNI_CRITICAL_SECTION = 0x400122,
  PWAIT_SOS_STACKSTORE_INIT_MUTEX = 0x400123,
  PWAIT_SOS_SYNC_TASK_ENQUEUE_EVENT = 0x400124,
  PWAIT_SOS_OBJECT_STORE_DESTROY_MUTEX = 0x400125,
  PWAIT_EE_PMOLOCK = 0x400126,
  PWAIT_QUERY_OPTIMIZER_PRINT_MUTEX = 0x400127,
  PWAIT_DLL_LOAD = 0x400128,
  PWAIT_RESOURCE_SEMAPHORE_QUERY_COMPILE = 0x400129,
  PWAIT_BROKER_ENDPOINT_STATE_MUTEX = 0x40012a,
  PWAIT_QUERY_EXEC_INDEXSORT_OPEN = 0x40012b,
  PWAIT_ERROR_REPORTING_MGR = 0x40012c,
  PWAIT_EE_SPECPROC_MAP_INIT = 0x40012d,
  PWAIT_FULLTEXT_GATHERER = 0x40012e,
  PWAIT_SE_REPL_COMMIT_ACK = 0x40012f,
  PWAIT_SE_REPL_ROLLBACK_ACK = 0x400130,
  PWAIT_SE_REPL_CSN_VECTOR = 0x400131,
  PWAIT_SE_REPL_QUEUE = 0x400132,
  PWAIT_SE_REPL_THROTTLE = 0x400133,
  PWAIT_SE_REPL_WAIT_FOR_ENOUGH_SECONDARIES = 0x400134,
  PWAIT_SE_REPL_WAIT_PRIMARY_FAILURE = 0x400135,
  PWAIT_ASYNC_TRANSPORT_DISPATCH = 0x400136,
  PWAIT_ASYNC_TRANSPORT_PERIODIC_WORK = 0x400137,
  PWAIT_ASYNC_TRANSPORT_CONNECTION_DISPATCH = 0x400138,
  PWAIT_ASYNC_TRANSPORT_STREAM = 0x400139,
  PWAIT_ASYNC_TRANSPORT_FLOW_CONTROL = 0x40013a,
  PWAIT_ASYNC_TRANSPORT_TASK_ABORT = 0x40013b,
  PWAIT_ASYNC_TRANSPORT_DISPATCH_MUTEX = 0x40013c,
  PWAIT_SE_REPL_SECONDARY_CLOSED = 0x40013d,
  PWAIT_SE_REPL_SECONDARY_CATCHUP_COMPLETE = 0x40013e,
  PWAIT_SE_REPL_SPECIFIC_SECONDARY_FLUSH = 0x40013f,
  PWAIT_SE_REPL_KILL_SYNCHRONIZE = 0x400140,
  PWAIT_SE_REPL_PARTITION_EVENT = 0x400141,
  PWAIT_SE_REPL_COMMIT_TURN = 0x400142,
  PWAIT_SE_REPL_CSN_ALLOC_TURN = 0x400143,
  PWAIT_SE_REPL_DEFERRED_COMMIT_TURN = 0x400144,
  PWAIT_SE_REPL_SECONDARY_XACT = 0x400145,
  PWAIT_SE_REPL_WORKER_POOL_MGMT = 0x400146,
  PWAIT_CLOUD_FABRIC_PAIRUP = 0x400147,
  PWAIT_CLOUD_FABRIC_WAIT = 0x20000148,
  PWAIT_CLOUD_FABRIC_RELEASE_ALL = 0x20000149,
  PWAIT_CLOUD_FABRIC_ENQUEUE = 0x2000014a,
  PWAIT_SE_REPL_DELETE_COMPLETE = 0x40014b,
  PWAIT_SE_REPL_LOG_TRUNC = 0x40014c,
  PWAIT_SE_REPL_BACKGROUND = 0x40014d,
  PWAIT_SE_REPL_BACKGROUND_FORWARDER = 0x40014e,
  PWAIT_SE_REPL_METADATA_COMPLETE_ACK = 0x40014f,
  PWAIT_SE_REPL_PARTIAL_XACT_DRAIN_ACK = 0x400150,
  PWAIT_SE_REPL_FLOW_CONTROL = 0x400151,
  PWAIT_SE_REPL_ITEM_COMPLETION = 0x400152,
  PWAIT_SE_REPL_METADATA_COMPLETION = 0x400153,
  PWAIT_SE_REPL_PREPARE_COPY_FROM_PRIMARY = 0x400154,
  PWAIT_SE_REPL_DISPATCH_ITEM_COMPLETION = 0x400155,
  PWAIT_SE_REPL_BACKGROUND_KILL = 0x400156,
  PWAIT_FABRIC_PAIRING = 0x400157,
  PWAIT_SE_REPL_ROWSET_METADATA = 0x400158,
  PWAIT_SE_REPL_SECONDARY_XACT_REMOTE_KILL = 0x400159,
  PWAIT_SE_REPL_SECONDARY_CATCHUP_YIELD = 0x40015a,
  PWAIT_SEQUENTIAL_GUID = 0x40015b,
  PWAIT_SSB_TASK_STOP = 0x40015c,
  PWAIT_SSB_TASK_SHUTDOWN = 0x40015d,
  PWAIT_SSB_TASK_SUBMIT = 0x40015e,
  PWAIT_SNI_WAIT_TASK_FINISH = 0x40015f,
  PWAIT_LISTENER_UPDATE = 0x400160,
  PWAIT_TWO_THREAD_PIPE_EVENT = 0x400161,
  PWAIT_CLR_MEMORY_SPY_ACCESS = 0x400162,
  PWAIT_CLRHOST_STATE_ACCESS = 0x400163,
  PWAIT_DAC_INIT = 0x400164,
  PWAIT_ASSEMBLY_LOAD = 0x400165,
  PWAIT_VIA_ACCEPT_DONE = 0x400166,
  PWAIT_CHECK_PRINT_RECORD = 0x400167,
  PWAIT_TESTING = 0x400168,
  PWAIT_SCAN_CHAR_HASH_ARRAY_INIT = 0x400169,
  PWAIT_YUKON_RESERVED14 = 0x40016a,
  PWAIT_YUKON_RESERVED15 = 0x40016b,
  PWAIT_YUKON_RESERVED16 = 0x40016c,
  PWAIT_YUKON_RESERVED17 = 0x40016d,
  PWAIT_YUKON_RESERVED18 = 0x40016e,
  PWAIT_YUKON_RESERVED19 = 0x40016f,
  PWAIT_YUKON_RESERVED20 = 0x400170,
  PWAIT_YUKON_RESERVED21 = 0x400171,
  PWAIT_YUKON_RESERVED22 = 0x400172,
  PWAIT_YUKON_RESERVED23 = 0x400173,
  PWAIT_YUKON_RESERVED24 = 0x400174,
  PWAIT_YUKON_RESERVED25 = 0x400175,
  PWAIT_YUKON_RESERVED26 = 0x400176,
  PWAIT_YUKON_RESERVED27 = 0x400177,
  PWAIT_YUKON_RESERVED28 = 0x400178,
  PWAIT_YUKON_RESERVED29 = 0x400179,
  PWAIT_YUKON_RESERVED30 = 0x40017a,
  PWAIT_YUKON_RESERVED31 = 0x40017b,
  PWAIT_YUKON_RESERVED32 = 0x40017c,
  PWAIT_FS_GARBAGE_COLLECTOR_SHUTDOWN = 0x40017d,
  PWAIT_FSAGENT = 0x40017e,
  PWAIT_FILESTREAM_WORKITEM_QUEUE = 0x40017f,
  PWAIT_FILESTREAM_FILE_OBJECT = 0x400180,
  PWAIT_FILESTREAM_FCB = 0x400181,
  PWAIT_FILESTREAM_CACHE = 0x400182,
  PWAIT_ABR = 0x400183,
  PWAIT_WCC = 0x400184,
  PWAIT_DUMPTRIGGER = 0x400185,
  PWAIT_REMOTEBRICKS = 0x400186,
  PWAIT_ERRHDL_SVC = 0x400187,
  PWAIT_TIMEPRIV_TIMEPERIOD = 0x400188,
  PWAIT_DISPATCHER_QUEUE_SEMAPHORE = 0x400189,
  PWAIT_XE_MODULEMGR_SYNC = 0x40018a,
  PWAIT_XE_STM_CREATE = 0x40018b,
  PWAIT_XE_SESSION_SYNC = 0x40018c,
  PWAIT_XE_SESSION_CREATE_SYNC = 0x40018d,
  PWAIT_XE_SERVICES_MUTEX = 0x40018e,
  PWAIT_XE_SERVICES_RWLOCK = 0x40018f,
  PWAIT_XE_SERVICES_EVENTMANUAL = 0x400190,
  PWAIT_XE_OLS_LOCK = 0x400191,
  PWAIT_SOS_DISPATCHER_MUTEX = 0x400192,
  PWAIT_XE_BUFFERMGR_FREEBUF_EVENT = 0x400193,
  PWAIT_XE_BUFFERMGR_ALLPROCESSED_EVENT = 0x400194,
  PWAIT_XE_DISPATCHER_JOIN = 0x400195,
  PWAIT_XE_TIMER_MUTEX = 0x400196,
  PWAIT_XE_TIMER_EVENT = 0x400197,
  PWAIT_XE_TIMER_TASK_DONE = 0x400198,
  PWAIT_XE_DISPATCHER_WAIT = 0x400199,
  PWAIT_XE_DISPATCHER_CONFIG_SESSION_LIST = 0x40019a,
  PWAIT_XE_SESSION_FLUSH = 0x40019b,
  PWAIT_XE_CALLBACK = 0x40019c,
  PWAIT_BROKER_TO_FLUSH = 0x40019d,
  PWAIT_NODE_CACHE_MUTEX = 0x40019e,
  PWAIT_RG_RECONFIG = 0x40019f,
  PWAIT_RESMGR_THROTTLED = 0x4001a0,
  PWAIT_SOS_MEMORY_USAGE_ADJUSTMENT = 0x4001a1,
  PWAIT_SECURITY_MUTEX = 0x4001a2,
  PWAIT_FS_HEADER_RWLOCK = 0x4001a3,
  PWAIT_FS_LOGTRUNC_RWLOCK = 0x4001a4,
  PWAIT_FS_GC_RWLOCK = 0x4001a5,
  PWAIT_FSTR_CONFIG_RWLOCK = 0x4001a6,
  PWAIT_FSTR_CONFIG_MUTEX = 0x4001a7,
  PWAIT_FSA_FORCE_OWN_XACT = 0x4001a8,
  PWAIT_COMMIT_TABLE = 0x4001a9,
  PWAIT_CXROWSET_SYNC = 0x4001aa,
  PWAIT_PREEMPTIVE_OS_GENERICOPS = 0x200001ab,
  PWAIT_PREEMPTIVE_OS_AUTHENTICATIONOPS = 0x200001ac,
  PWAIT_PREEMPTIVE_OS_ACCEPTSECURITYCONTEXT = 0x200001ad,
  PWAIT_PREEMPTIVE_OS_ACQUIRECREDENTIALSHANDLE = 0x200001ae,
  PWAIT_PREEMPTIVE_OS_COMPLETEAUTHTOKEN = 0x200001af,
  PWAIT_PREEMPTIVE_OS_DECRYPTMESSAGE = 0x200001b0,
  PWAIT_PREEMPTIVE_OS_DELETESECURITYCONTEXT = 0x200001b1,
  PWAIT_PREEMPTIVE_OS_ENCRYPTMESSAGE = 0x200001b2,
  PWAIT_PREEMPTIVE_OS_FREECREDENTIALSHANDLE = 0x200001b3,
  PWAIT_PREEMPTIVE_OS_INITIALIZESECURITYCONTEXT = 0x200001b4,
  PWAIT_PREEMPTIVE_OS_LOGONUSER = 0x200001b5,
  PWAIT_PREEMPTIVE_OS_QUERYSECURITYCONTEXTTOKEN = 0x200001b6,
  PWAIT_PREEMPTIVE_OS_QUERYCONTEXTATTRIBUTES = 0x200001b7,
  PWAIT_PREEMPTIVE_OS_VERIFYSIGNATURE = 0x200001b8,
  PWAIT_PREEMPTIVE_OS_AUTHORIZATIONOPS = 0x200001b9,
  PWAIT_PREEMPTIVE_OS_AUTHZGETINFORMATIONFROMCONTEXT = 0x200001ba,
  PWAIT_PREEMPTIVE_OS_AUTHZINITIALIZECONTEXTFROMSID = 0x200001bb,
  PWAIT_PREEMPTIVE_OS_AUTHZINITIALIZERESOURCEMANAGER = 0x200001bc,
  PWAIT_PREEMPTIVE_OS_LOOKUPACCOUNTSID = 0x200001bd,
  PWAIT_PREEMPTIVE_OS_REVERTTOSELF = 0x200001be,
  PWAIT_PREEMPTIVE_OS_SETNAMEDSECURITYINFO = 0x200001bf,
  PWAIT_PREEMPTIVE_OS_CLUSTEROPS = 0x200001c0,
  PWAIT_PREEMPTIVE_CLUSAPI_CLUSTERRESOURCECONTROL = 0x200001c1,
  PWAIT_PREEMPTIVE_OS_COMOPS = 0x200001c2,
  PWAIT_PREEMPTIVE_COM_COCREATEINSTANCE = 0x200001c3,
  PWAIT_PREEMPTIVE_COM_COGETCLASSOBJECT = 0x200001c4,
  PWAIT_PREEMPTIVE_COM_CREATEACCESSOR = 0x200001c5,
  PWAIT_PREEMPTIVE_COM_DELETEROWS = 0x200001c6,
  PWAIT_PREEMPTIVE_COM_GETCOMMANDTEXT = 0x200001c7,
  PWAIT_PREEMPTIVE_COM_GETDATA = 0x200001c8,
  PWAIT_PREEMPTIVE_COM_GETNEXTROWS = 0x200001c9,
  PWAIT_PREEMPTIVE_COM_GETRESULT = 0x200001ca,
  PWAIT_PREEMPTIVE_COM_GETROWSBYBOOKMARK = 0x200001cb,
  PWAIT_PREEMPTIVE_COM_LBFLUSH = 0x200001cc,
  PWAIT_PREEMPTIVE_COM_LBLOCKREGION = 0x200001cd,
  PWAIT_PREEMPTIVE_COM_LBREADAT = 0x200001ce,
  PWAIT_PREEMPTIVE_COM_LBSETSIZE = 0x200001cf,
  PWAIT_PREEMPTIVE_COM_LBSTAT = 0x200001d0,
  PWAIT_PREEMPTIVE_COM_LBUNLOCKREGION = 0x200001d1,
  PWAIT_PREEMPTIVE_COM_LBWRITEAT = 0x200001d2,
  PWAIT_PREEMPTIVE_COM_QUERYINTERFACE = 0x200001d3,
  PWAIT_PREEMPTIVE_COM_RELEASE = 0x200001d4,
  PWAIT_PREEMPTIVE_COM_RELEASEACCESSOR = 0x200001d5,
  PWAIT_PREEMPTIVE_COM_RELEASEROWS = 0x200001d6,
  PWAIT_PREEMPTIVE_COM_RELEASESESSION = 0x200001d7,
  PWAIT_PREEMPTIVE_COM_RESTARTPOSITION = 0x200001d8,
  PWAIT_PREEMPTIVE_COM_SEQSTRMREAD = 0x200001d9,
  PWAIT_PREEMPTIVE_COM_SEQSTRMREADANDWRITE = 0x200001da,
  PWAIT_PREEMPTIVE_COM_SETDATAFAILURE = 0x200001db,
  PWAIT_PREEMPTIVE_COM_SETPARAMETERINFO = 0x200001dc,
  PWAIT_PREEMPTIVE_COM_SETPARAMETERPROPERTIES = 0x200001dd,
  PWAIT_PREEMPTIVE_COM_STRMLOCKREGION = 0x200001de,
  PWAIT_PREEMPTIVE_COM_STRMSEEKANDREAD = 0x200001df,
  PWAIT_PREEMPTIVE_COM_STRMSEEKANDWRITE = 0x200001e0,
  PWAIT_PREEMPTIVE_COM_STRMSETSIZE = 0x200001e1,
  PWAIT_PREEMPTIVE_COM_STRMSTAT = 0x200001e2,
  PWAIT_PREEMPTIVE_COM_STRMUNLOCKREGION = 0x200001e3,
  PWAIT_PREEMPTIVE_OS_CRYPTOPS = 0x200001e4,
  PWAIT_PREEMPTIVE_OS_CRYPTACQUIRECONTEXT = 0x200001e5,
  PWAIT_PREEMPTIVE_OS_CRYPTIMPORTKEY = 0x200001e6,
  PWAIT_PREEMPTIVE_OS_DEVICEOPS = 0x200001e7,
  PWAIT_PREEMPTIVE_OS_RSFXDEVICEOPS = 0x200001e8,
  PWAIT_PREEMPTIVE_OS_DIRSVC_NETWORKOPS = 0x200001e9,
  PWAIT_PREEMPTIVE_OS_DSGETDCNAME = 0x200001ea,
  PWAIT_PREEMPTIVE_OS_NETGROUPGETUSERS = 0x200001eb,
  PWAIT_PREEMPTIVE_OS_NETLOCALGROUPGETMEMBERS = 0x200001ec,
  PWAIT_PREEMPTIVE_OS_NETUSERGETGROUPS = 0x200001ed,
  PWAIT_PREEMPTIVE_OS_NETUSERGETLOCALGROUPS = 0x200001ee,
  PWAIT_PREEMPTIVE_OS_NETUSERMODALSGET = 0x200001ef,
  PWAIT_PREEMPTIVE_OS_NETVALIDATEPASSWORDPOLICY = 0x200001f0,
  PWAIT_PREEMPTIVE_OS_NETVALIDATEPASSWORDPOLICYFREE = 0x200001f1,
  PWAIT_PREEMPTIVE_OS_DOMAINSERVICESOPS = 0x200001f2,
  PWAIT_PREEMPTIVE_OS_DTCOPS = 0x200001f3,
  PWAIT_PREEMPTIVE_DTC_ABORT = 0x200001f4,
  PWAIT_PREEMPTIVE_DTC_ABORTREQUESTDONE = 0x200001f5,
  PWAIT_PREEMPTIVE_DTC_BEGINTRANSACTION = 0x200001f6,
  PWAIT_PREEMPTIVE_DTC_COMMITREQUESTDONE = 0x200001f7,
  PWAIT_PREEMPTIVE_DTC_ENLIST = 0x200001f8,
  PWAIT_PREEMPTIVE_DTC_PREPAREREQUESTDONE = 0x200001f9,
  PWAIT_PREEMPTIVE_OS_FILEOPS = 0x200001fa,
  PWAIT_PREEMPTIVE_OS_CLOSEHANDLE = 0x200001fb,
  PWAIT_PREEMPTIVE_OS_COPYFILE = 0x200001fc,
  PWAIT_PREEMPTIVE_OS_CREATEDIRECTORY = 0x200001fd,
  PWAIT_PREEMPTIVE_OS_CREATEFILE = 0x200001fe,
  PWAIT_PREEMPTIVE_OS_DELETEFILE = 0x200001ff,
  PWAIT_PREEMPTIVE_OS_DEVICEIOCONTROL = 0x20000200,
  PWAIT_PREEMPTIVE_OS_FINDFILE = 0x20000201,
  PWAIT_PREEMPTIVE_FILESIZEGET = 0x20000202,
  PWAIT_PREEMPTIVE_OS_FLUSHFILEBUFFERS = 0x20000203,
  PWAIT_PREEMPTIVE_OS_GETCOMPRESSEDFILESIZE = 0x20000204,
  PWAIT_PREEMPTIVE_OS_GETDISKFREESPACE = 0x20000205,
  PWAIT_PREEMPTIVE_OS_GETFILEATTRIBUTES = 0x20000206,
  PWAIT_PREEMPTIVE_OS_GETFILESIZE = 0x20000207,
  PWAIT_PREEMPTIVE_OS_GETLONGPATHNAME = 0x20000208,
  PWAIT_PREEMPTIVE_OS_GETVOLUMEPATHNAME = 0x20000209,
  PWAIT_PREEMPTIVE_OS_GETVOLUMENAMEFORVOLUMEMOUNTPOINT = 0x2000020a,
  PWAIT_PREEMPTIVE_OS_MOVEFILE = 0x2000020b,
  PWAIT_PREEMPTIVE_OS_OPENDIRECTORY = 0x2000020c,
  PWAIT_PREEMPTIVE_OS_REMOVEDIRECTORY = 0x2000020d,
  PWAIT_PREEMPTIVE_OS_SETENDOFFILE = 0x2000020e,
  PWAIT_PREEMPTIVE_OS_SETFILEPOINTER = 0x2000020f,
  PWAIT_PREEMPTIVE_OS_SETFILEVALIDDATA = 0x20000210,
  PWAIT_PREEMPTIVE_OS_WRITEFILE = 0x20000211,
  PWAIT_PREEMPTIVE_OS_WRITEFILEGATHER = 0x20000212,
  PWAIT_PREEMPTIVE_OS_LIBRARYOPS = 0x20000213,
  PWAIT_PREEMPTIVE_OS_FREELIBRARY = 0x20000214,
  PWAIT_PREEMPTIVE_OS_GETPROCADDRESS = 0x20000215,
  PWAIT_PREEMPTIVE_OS_LOADLIBRARY = 0x20000216,
  PWAIT_PREEMPTIVE_OS_MESSAGEQUEUEOPS = 0x20000217,
  PWAIT_PREEMPTIVE_ODBCOPS = 0x20000218,
  PWAIT_PREEMPTIVE_OLEDBOPS = 0x20000219,
  PWAIT_PREEMPTIVE_OLEDB_ABORTTRAN = 0x2000021a,
  PWAIT_PREEMPTIVE_OLEDB_ABORTORCOMMITTRAN = 0x2000021b,
  PWAIT_PREEMPTIVE_OLEDB_GETDATASOURCE = 0x2000021c,
  PWAIT_PREEMPTIVE_OLEDB_GETLITERALINFO = 0x2000021d,
  PWAIT_PREEMPTIVE_OLEDB_GETPROPERTIES = 0x2000021e,
  PWAIT_PREEMPTIVE_OLEDB_GETPROPERTYINFO = 0x2000021f,
  PWAIT_PREEMPTIVE_OLEDB_GETSCHEMALOCK = 0x20000220,
  PWAIT_PREEMPTIVE_OLEDB_JOINTRANSACTION = 0x20000221,
  PWAIT_PREEMPTIVE_OLEDB_RELEASE = 0x20000222,
  PWAIT_PREEMPTIVE_OLEDB_SETPROPERTIES = 0x20000223,
  PWAIT_PREEMPTIVE_OS_PIPEOPS = 0x20000224,
  PWAIT_PREEMPTIVE_OS_DISCONNECTNAMEDPIPE = 0x20000225,
  PWAIT_PREEMPTIVE_OS_PROCESSOPS = 0x20000226,
  PWAIT_PREEMPTIVE_OS_SECURITYOPS = 0x20000227,
  PWAIT_PREEMPTIVE_OS_SERVICEOPS = 0x20000228,
  PWAIT_PREEMPTIVE_OS_SQLCLROPS = 0x20000229,
  PWAIT_PREEMPTIVE_OS_WINSOCKOPS = 0x2000022a,
  PWAIT_PREEMPTIVE_OS_GETADDRINFO = 0x2000022b,
  PWAIT_PREEMPTIVE_OS_WSASETLASTERROR = 0x2000022c,
  PWAIT_PREEMPTIVE_OS_FORMATMESSAGE = 0x2000022d,
  PWAIT_PREEMPTIVE_OS_REPORTEVENT = 0x2000022e,
  PWAIT_PREEMPTIVE_OS_BACKUPREAD = 0x2000022f,
  PWAIT_PREEMPTIVE_OS_WAITFORSINGLEOBJECT = 0x20000230,
  PWAIT_PREEMPTIVE_OS_QUERYREGISTRY = 0x20000231,
  PWAIT_PREEMPTIVE_CLOSEBACKUPMEDIA = 0x20000232,
  PWAIT_PREEMPTIVE_CLOSEBACKUPTAPE = 0x20000233,
  PWAIT_PREEMPTIVE_CLOSEBACKUPVDIDEVICE = 0x20000234,
  PWAIT_PREEMPTIVE_OS_VSSOPS = 0x20000235,
  PWAIT_PREEMPTIVE_VSS_CREATESNAPSHOT = 0x20000236,
  PWAIT_PREEMPTIVE_VSS_CREATEVOLUMESNAPSHOT = 0x20000237,
  PWAIT_PREEMPTIVE_DFSADDLINK = 0x20000238,
  PWAIT_PREEMPTIVE_DFSLINKEXISTCHECK = 0x20000239,
  PWAIT_PREEMPTIVE_DFSLINKHEALTHCHECK = 0x2000023a,
  PWAIT_PREEMPTIVE_DFSREMOVELINK = 0x2000023b,
  PWAIT_PREEMPTIVE_DFSREMOVEROOT = 0x2000023c,
  PWAIT_PREEMPTIVE_DFSROOTFOLDERCHECK = 0x2000023d,
  PWAIT_PREEMPTIVE_DFSROOTINIT = 0x2000023e,
  PWAIT_PREEMPTIVE_DFSROOTSHARECHECK = 0x2000023f,
  PWAIT_PREEMPTIVE_OLE_UNINIT = 0x20000240,
  PWAIT_PREEMPTIVE_FSAOLEDB_ABORTTRANSACTION = 0x20000241,
  PWAIT_PREEMPTIVE_FSAOLEDB_COMMITTRANSACTION = 0x20000242,
  PWAIT_PREEMPTIVE_FSAOLEDB_STARTTRANSACTION = 0x20000243,
  PWAIT_PREEMPTIVE_FSRECOVER_CONDITIONALUNDO = 0x20000244,
  PWAIT_PREEMPTIVE_SERVER_STARTUP = 0x20000245,
  PWAIT_PREEMPTIVE_SHAREDMEM_GETDATA = 0x20000246,
  PWAIT_PREEMPTIVE_CONSOLEWRITE = 0x20000247,
  PWAIT_PREEMPTIVE_SQMLAUNCH = 0x20000248,
  PWAIT_PREEMPTIVE_TESTING = 0x20000249,
  PWAIT_PREEMPTIVE_SOSHOST = 0x2000024a,
  PWAIT_PREEMPTIVE_SOSTESTING = 0x2000024b,
  PWAIT_PREEMPTIVE_XETESTING = 0x2000024c,
  PWAIT_PREEMPTIVE_SB_STOPENDPOINT = 0x2000024d,
  PWAIT_PREEMPTIVE_STARTRM = 0x2000024e,
  PWAIT_PREEMPTIVE_GETRMINFO = 0x2000024f,
  PWAIT_PREEMPTIVE_SETRMINFO = 0x20000250,
  PWAIT_PREEMPTIVE_ROLLFORWARDREDO = 0x20000251,
  PWAIT_PREEMPTIVE_ROLLFORWARDUNDO = 0x20000252,
  PWAIT_PREEMPTIVE_RESIZELOG = 0x20000253,
  PWAIT_PREEMPTIVE_REENLIST = 0x20000254,
  PWAIT_PREEMPTIVE_TRANSIMPORT = 0x20000255,
  PWAIT_PREEMPTIVE_UNMARSHALPROPAGATIONTOKEN = 0x20000256,
  PWAIT_PREEMPTIVE_CREATEPARAM = 0x20000257,
  PWAIT_PREEMPTIVE_STREAMFCB_RECOVER = 0x20000258,
  PWAIT_PREEMPTIVE_STREAMFCB_CHECKPOINT = 0x20000259,
  PWAIT_PREEMPTIVE_XE_CALLBACKEXECUTE = 0x2000025a,
  PWAIT_PREEMPTIVE_XE_DISPATCHER = 0x2000025b,
  PWAIT_PREEMPTIVE_XE_ENGINEINIT = 0x2000025c,
  PWAIT_PREEMPTIVE_XE_GETTARGETSTATE = 0x2000025d,
  PWAIT_PREEMPTIVE_XE_SESSIONCOMMIT = 0x2000025e,
  PWAIT_PREEMPTIVE_XE_TARGETFINALIZE = 0x2000025f,
  PWAIT_PREEMPTIVE_XE_TARGETINIT = 0x20000260,
  PWAIT_PREEMPTIVE_XE_TIMERRUN = 0x20000261,
  PWAIT_PREEMPTIVE_SNIOPEN = 0x20000262,
  PWAIT_PREEMPTIVE_DEBUG = 0x20000263,
  PWAIT_PREEMPTIVE_MSS_RELEASE = 0x20000264,
  PWAIT_PREEMPTIVE_LOCKMONITOR = 0x20000265,
  PWAIT_PREEMPTIVE_STRESSDRIVER = 0x20000266,
  PWAIT_CLEAR_DB = 0x20000267,
  PWAIT_PREEMPTIVE_ABR = 0x20000268,
  PWAIT_RPCRESPONSE = -2147483031,
  PWAIT_CHANNELMAPLIST = 0x40026a,
  PWAIT_LOGGENERATION = 0x40026b,
  PWAIT_TCM_SYNCHRONIZATION = 0x40026c,
  PWAIT_CM_FC_QUEUE_MANAGER = 0x40026d,
  PWAIT_CM_FC_AGENT = 0x40026e,
  PWAIT_CM_FORCED_CLOSE_SVC = 0x40026f,
  PWAIT_RPC_COMMAND = -2147483024,
  PWAIT_MATRIXCOMM_FC = 0x400271,
  PWAIT_MATRIXCOMM_EXPIRE = 0x400272,
  PWAIT_MATRIXCOMM_EXPIRE_RUNDOWN = 0x400273,
  PWAIT_CM_SHUTDOWN = 0x400274,
  PWAIT_CM_DIRECTORY = 0x400275,
  PWAIT_CM_CONFIG = 0x400276,
  PWAIT_CM_NOTIFICATION = 0x400277,
  PWAIT_CM_MAIN = 0x400278,
  PWAIT_CMA_MAIN = 0x400279,
  PWAIT_CM_STATE = 0x40027a,
  PWAIT_CMA_STATE = 0x40027b,
  PWAIT_STP_RESERVE_BRICK = 0x40027c,
  PWAIT_STP_UNRESERVE_BRICK = 0x40027d,
  PWAIT_TCMA_XACT_WAITFOR_COMMIT = 0x40027e,
  PWAIT_TCMA_XACT_WAITFOR_ROLLBACK = 0x40027f,
  PWAIT_TCM_WAITFOR_SHUTDOWN = 0x400280,
  PWAIT_TCM_DEDICATED_THREAD = 0x400281,
  PWAIT_TCMA_XACT_WAITFOR_COMMIT_NO_MGR = 0x400282,
  PWAIT_IO_RETRY = 0x400283,
  PWAIT_WRITE_COMPLETION = 0x400284,
  PWAIT_AUDIT_XE_SESSION_MGR = 0x400285,
  PWAIT_AUDIT_ON_DEMAND_TARGET_LOCK = 0x400286,
  PWAIT_PREEMPTIVE_AUDIT_ACCESS_WINDOWSLOG = 0x20000287,
  PWAIT_AUDIT_LOGINCACHE_LOCK = 0x400288,
  PWAIT_AUDIT_GROUPCACHE_LOCK = 0x400289,
  PWAIT_FT_METADATA_MUTEX = 0x40028a,
  PWAIT_FT_IFTSHC_MUTEX = 0x40028b,
  PWAIT_FT_IFTSISM_MUTEX = 0x40028c,
  PWAIT_FT_RWLOCK = 0x40028d,
  PWAIT_FT_COMPROWSET_RWLOCK = 0x40028e,
  PWAIT_FT_MASTER_MERGE = 0x40028f,
  PWAIT_TRACE_EVTNOTIF = 0x400290,
  PWAIT_SOS_SMALL_PAGE_ALLOC = 0x400291,
  PWAIT_METADATA_LAZYCACHE_RWLOCK = 0x400292,
  PWAIT_METADATA_AGENT_YIELD = 0x400293,
  PWAIT_IOAFF_RANGE_QUEUE = 0x400294,
  PWAIT_FT_SCHEDULER_IDLE_WAIT = 0x400295,
  PWAIT_REPL_HISTORYCACHE_ACCESS = 0x400296,
  PWAIT_REPL_TRANHASHTABLE_ACCESS = 0x400297,
  PWAIT_REPL_TRANTEXTINFO_ACCESS = 0x400298,
  PWAIT_REPL_TRANFSINFO_ACCESS = 0x400299,
  PWAIT_SERVER_RECONFIGURE = 0x40029a,
  PWAIT_CHANGE_TRACKING_WAITFORCHANGES = 0x40029b,
  PWAIT_ERRHDL_OUTBOX_MUTEX = 0x40029c,
  PWAIT_QD_CREATE = 0x40029d,
  PWAIT_QD_AGGREGATION = 0x40029e,
  PWAIT_MD_RELATION_CACHE = 0x40029f,
  PWAIT_MD_SERVER_CACHE = 0x4002a0,
  PWAIT_MD_LOGIN_STATS = 0x4002a1,
  PWAIT_PRISM_ASYNC_OPERATION_COMPLETION = 0x4002a2,
  PWAIT_DISPATCHER_PRIORITY_QUEUE_SEMAPHORE = 0x4002a3,
  PWAIT_MATRIXCHANNEL_START = 0x4002a4,
  PWAIT_MATRIXFABRIC_WORKSPACE_CANCEL_TASKABORT = 0x4002a5,
  PWAIT_MATRIXFABRIC_RECEIVEMSG = -2147482970,
  PWAIT_MATRIXFABRIC_JOINRESPONSE = 0x4002a7,
  PWAIT_MATRIXFABRIC_OBJECT_REGISTRATION = 0x4002a8,
  PWAIT_MATRIXMCI_NETWORK_IO = 0x4002a9,
  PWAIT_MATRIXMCI_TASK_JOIN = 0x4002aa,
  PWAIT_MATRIXMCI_CLOSE = 0x4002ab,
  PWAIT_MATRIXMCI_RECEIVEMSG = 0x4002ac,
  PWAIT_MATRIXMCI_RECV_PKT = 0x200002ad,
  PWAIT_MATRIXMCI_ERRORNOTIFY = 0x200002ae,
  PWAIT_MATRIXMCI_PIPESTATE = 0x4002af,
  PWAIT_MATRIXMCI_PIPE_IO = 0x4002b0,
  PWAIT_MATRIXMCI_SSPI_SRV = 0x200002b1,
  PWAIT_MATRIXMCI_SSPI_CLI = 0x200002b2,
  PWAIT_MATRIXMCI_CONN_VALIDATION = 0x200002b3,
  PWAIT_MATRIXMCI_CONN_CLOSE = 0x200002b4,
  PWAIT_FT_PROPERTYLIST_CACHE = 0x4002b5,
  PWAIT_PERFORMANCE_COUNTERS_RWLOCK = 0x4002b6,
  PWAIT_HIGHSEVERR_CONFIG_LOCK = 0x4002b7,
  PWAIT_SECURITY_KEYRING_RWLOCK = 0x4002b8,
  PWAIT_SFW_SPLIST = 0x4002b9,
  PWAIT_SFW_XPLIST = 0x4002ba,
  PWAIT_SFW_BUILTINLIST = 0x4002bb,
  PWAIT_SQLTRACE_FILE_WRITE_IO_COMPLETION = 0x4002bc,
  PWAIT_SQLTRACE_FILE_READ_IO_COMPLETION = 0x4002bd,
  PWAIT_SQLTRACE_PENDING_BUFFER_WRITERS = 0x4002be,
  PWAIT_PREEMPTIVE_OS_PDH_WMI_INIT = 0x200002bf,
  PWAIT_BROKER_TRANSMISSION_WORK = 0x4002c0,
  PWAIT_BROKER_TRANSMISSION_OBJECT = 0x4002c1,
  PWAIT_BROKER_TRANSMISSION_TABLE = 0x4002c2,
  PWAIT_BROKER_DISPATCHER = 0x4002c3,
  PWAIT_BROKER_FORWARDER = 0x4002c4,
  PWAIT_UCS_MANAGER = 0x4002c5,
  PWAIT_UCS_TRANSPORT = 0x4002c6,
  PWAIT_UCS_MEMORY_NOTIFICATION = 0x4002c7,
  PWAIT_UCS_ENDPOINT_CHANGE = 0x4002c8,
  PWAIT_UCS_TRANSPORT_STREAM_CHANGE = 0x4002c9,
  PWAIT_QUERY_TASK_ENQUEUE_MUTEX = 0x4002ca,
  PWAIT_SM_WAITFOR_SHUTDOWN_COMPLETION = 0x4002cb,
  PWAIT_SM_WAITFOR_EVENT = 0x4002cc,
  PWAIT_SM_WAITFOR_REPLY = 0x4002cd,
  PWAIT_SM_CLIENT_WAITFOR_RESULT = 0x4002ce,
  PWAIT_DATAPORT_DATASEND = 0x4002cf,
  PWAIT_DATAPORT_ONCLOSE = 0x4002d0,
  PWAIT_MATRIX_WORKSPACE_RECONFIG = 0x4002d1,
  PWAIT_MATRIX_WORKSPACE_TASK_WAIT = -2147482926,
  PWAIT_TRANSIENTSTATE = 0x4002d3,
  PWAIT_PREEMPTIVE_SP_SERVER_DIAGNOSTICS_SLEEP = 0x200002d4,
  PWAIT_SP_SERVER_DIAGNOSTICS_INIT_MUTEX = 0x4002d5,
  PWAIT_CHECK_EXPRESSION_CACHE = 0x4002d6,
  PWAIT_TCM_AGE_TO_COMMIT = 0x4002d7,
  PWAIT_TCM_SEND_RECEIVE = 0x4002d8,
  PWAIT_TCMA_NOTIFICATION = 0x4002d9,
  PWAIT_WAITFOR_GDMA_BUFFER_ACCESS = 0x4002da,
  PWAIT_GDMA_WAITFOR_EVENT_QUEUE_ACCESS = 0x4002db,
  PWAIT_GDMA_WAITFOR_REQUEST = 0x4002dc,
  PWAIT_GDMA_WAITFOR_SHUTDOWN_COMPLETION = 0x4002dd,
  PWAIT_GDM_INTER_CYCLE_SLEEP = 0x4002de,
  PWAIT_GDM_WAITFOR_REPLY = 0x4002df,
  PWAIT_GDM_WAITFOR_SHUTDOWN_COMPLETION = 0x4002e0,
  PWAIT_TCMA_XACT_RESOLVE = 0x4002e1,
  PWAIT_GDMA_GET_RESOURCE_OWNER = 0x4002e2,
  PWAIT_TRANSIENTSTATE_RPC_REQUEST = 0x400002e3,
  PWAIT_QUERY_RPC = -2147482908,
  PWAIT_STVF_RPC = -2147482907,
  PWAIT_DATA_CONSUMER = -2147482906,
  PWAIT_DATA_PRODUCER = 0x400002e7,
  PWAIT_WORKSPACE_SYNC = 0x4002e8,
  PWAIT_DISTRIBUTED_CACHE_FETCH = 0x4002e9,
  PWAIT_REMOTE_DB_OP = 0x4002ea,
  PWAIT_REMOTE_DB_START = 0x4002eb,
  PWAIT_REMOTE_DB_SHUTDOWN = 0x4002ec,
  PWAIT_TCMA_XACT_END_REQUEST = 0x4002ed,
  PWAIT_RESOURCE_SEMAPHORE_REMOTE_EXCHANGE_QUERY = 0x4002ee,
  PWAIT_ALL_COMPONENTS_INITIALIZED = 0x4002ef,
  PWAIT_XE_LIVE_TARGET_TVF = 0x4002f0,
  PWAIT_PREEMPTIVE_SP_SERVER_DIAGNOSTICS = 0x200002f1,
  PWAIT_SP_SERVER_DIAGNOSTICS_SLEEP = 0x4002f2,
  PWAIT_AM_INDBUILD_ALLOCATION = 0x4002f3,
  PWAIT_STARTUP_DEPENDENCY_MANAGER = 0x4002f4,
  PWAIT_CM_ENLISTMENT_MAIN = 0x4002f5,
  PWAIT_CMA_COMM = 0x4002f6,
  PWAIT_CM_ENLISTMENT_QUEUE_ACCESS = 0x4002f7,
  PWAIT_CMA_QUEUE_ACCESS = 0x4002f8,
  PWAIT_CMA_UPDATE_INCARNATION = 0x4002f9,
  PWAIT_CMA_ENLISTMENT_SHUTDOWN = 0x4002fa,
  PWAIT_XEVENT_DDL_RPC_REQUEST = -2147482885,
  PWAIT_SECURITY_CACHE_INVALIDATION = 0x4002fc,
  PWAIT_XDES_HISTORY = 0x4002fd,
  PWAIT_XDES_SNAPSHOT = 0x4002fe,
  PWAIT_THREAD_CACHE_MAINTENANCE = 0x4002ff,
  PWAIT_FT_MASTER_MERGE_COORDINATOR = 0x400300,
  PWAIT_RESOURCE_SEMAPHORE_FT_PARALLEL_QUERY_SYNC = 0x400301,
  PWAIT_REDO_SIGNAL = 0x400302,
  PWAIT_REDO_SYNC = 0x400303,
  PWAIT_COUNTRECOVERYMGR = 0x400304,
  PWAIT_HADR_DB_COMMAND = 0x400305,
  PWAIT_HADR_TRANSPORT_SESSION = 0x400306,
  PWAIT_HADR_CLUSAPI_CALL = 0x400307,
  PWAIT_HADR_CHANGE_NOTIFIER_TERMINATION_SYNC = 0x400308,
  PWAIT_HADR_ACTION_COMPLETED = 0x400309,
  PWAIT_HADR_OFFLINE_COMPLETED = 0x40030a,
  PWAIT_HADR_ONLINE_COMPLETED = 0x40030b,
  PWAIT_HADR_FAILOVER_COMPLETED = 0x40030c,
  PWAIT_HADR_WORKITEM_COMPLETED = 0x40030d,
  PWAIT_HADR_WORK_POOL = 0x40030e,
  PWAIT_HADR_WORK_QUEUE = 0x40030f,
  PWAIT_HADR_LOGCAPTURE_SYNC = 0x400310,
  PWAIT_HADR_CLUSTER_INTEGRATION = 0x400311,
  PWAIT_LOGCAPTURE_LOGPOOLTRUNCPOINT = 0x400312,
  PWAIT_LOGPOOL_CACHESIZE = 0x400313,
  PWAIT_LOGPOOL_FREEPOOLS = 0x400314,
  PWAIT_LOGPOOL_REPLACEMENTSET = 0x400315,
  PWAIT_LOGPOOL_CONSUMERSET = 0x400316,
  PWAIT_LOGPOOL_MGRSET = 0x400317,
  PWAIT_LOGPOOL_CONSUMER = 0x400318,
  PWAIT_LOGPOOLREFCOUNTEDOBJECT_REFDONE = 0x400319,
  PWAIT_HADR_SYNC_COMMIT = 0x40031a,
  PWAIT_HADR_AG_MUTEX = 0x40031b,
  PWAIT_HADR_SERVER_READY_CONNECTIONS = 0x40031c,
  PWAIT_HADRFS_MANAGER = 0x40031d,
  PWAIT_HADRFS_BLOCK_FLUSH = 0x40031e,
  PWAIT_HADRFS_IOMGR = 0x40031f,
  PWAIT_HADRFS_IOMGR_IOCOMPLETION = 0x400320,
  PWAIT_UCS_SESSION_REGISTRATION = 0x400321,
  PWAIT_ENABLE_EMPTY_VERSIONING = 0x400322,
  PWAIT_HADR_DB_OP_START_SYNC = 0x400323,
  PWAIT_HADR_DB_OP_COMPLETION_SYNC = 0x400324,
  PWAIT_HADR_LOGPROGRESS_SYNC = 0x400325,
  PWAIT_HADR_TRANSPORT_DBRLIST = 0x400326,
  PWAIT_HADR_CONNECTIVITY_INFO = 0x400327,
  PWAIT_XDESTSVERMGR = 0x400328,
  PWAIT_GHOSTCLEANUPSYNCMGR = 0x400329,
  PWAIT_HADR_AR_UNLOAD_COMPLETED = 0x40032a,
  PWAIT_HADR_PARTNER_SYNC = 0x40032b,
  PWAIT_HADR_DBSTATECHANGE_SYNC = 0x40032c,
  PWAIT_DIRTY_PAGE_SYNC = 0x40032d,
  PWAIT_DIRTY_PAGE_POLL = 0x40032e,
  PWAIT_HTTP_STORAGE_CONNECTION = 0x40032f,
  PWAIT_THREAD_CACHE = 0x400330,
  PWAIT_MESSAGE_HOARDER = 0x400331,
  PWAIT_XEVENT_PREDICATE_PARSE = 0x400332,
  PWAIT_WAITFOR_GDMA_VERTEX_OBJECT_POOL_ACCESS = 0x400333,
  PWAIT_WAITFOR_GDMA_EDGE_OBJECT_POOL_ACCESS = 0x400334,
  PWAIT_SECURITY_CRYPTO_CONTEXT_MUTEX = 0x400335,
  PWAIT_SECURITY_RULETABLE_MUTEX = 0x400336,
  PWAIT_SEMPLAT_DSI_BUILD = 0x400337,
  PWAIT_FILESTREAM_CHUNKER_INIT = 0x400338,
  PWAIT_FILESTREAM_CHUNKER = 0x400339,
  PWAIT_FFT_RSFX_COMM = 0x40033a,
  PWAIT_FFT_RSFX_WAIT_FOR_MEMORY = 0x40033b,
  PWAIT_FFT_STARTUP_SHUTDOWN = 0x40033c,
  PWAIT_FFT_RECOVERY = 0x40033d,
  PWAIT_FFT_NSO_FCB = 0x40033e,
  PWAIT_FFT_NSO_FCB_PARENT = 0x40033f,
  PWAIT_FFT_NSO_FCB_FIND = 0x400340,
  PWAIT_FFT_NSO_FCB_RELEASE_CACHED_ENTRIES = 0x400341,
  PWAIT_FFT_NSO_FILEOBJECT = 0x400342,
  PWAIT_FFT_NSO_DB_LIST = 0x400343,
  PWAIT_FFT_NSO_DB_KILL_FLAG = 0x400344,
  PWAIT_FFT_NSO_TABLE_LIST = 0x400345,
  PWAIT_FFT_STORE_DB = 0x400346,
  PWAIT_FFT_STORE_TABLE = 0x400347,
  PWAIT_FFT_STORE_ROWSET_LIST = 0x400348,
  PWAIT_FFT_NTFS_STORE = 0x400349,
  PWAIT_HADRFS_FILE_REQUEST = 0x40034a,
  PWAIT_MD_UPGRADE_CONFIG = 0x40034b,
  PWAIT_COOP_SCAN = 0x40034c,
  PWAIT_QRY_PARALLEL_THREAD_MUTEX = 0x40034d,
  PWAIT_QRY_BPMEMORY = 0x40034e,
  PWAIT_TCMA_XACT_WAITFOR_PARTICIPANTS_TO_END = 0x40034f,
  PWAIT_WAITFOR_PER_QUEUE = 0x400350,
  PWAIT_GET_DATINISERVICE = 0x400351,
  PWAIT_AM_SCHEMAMGR_UNSHARED_CACHE = 0x400352,
  PWAIT_HADR_REPLICAINFO_SYNC = 0x400353,
  PWAIT_HADR_COMPRESSED_CACHE_SYNC = 0x400354,
  PWAIT_HADR_AR_MANAGER_MUTEX = 0x400355,
  PWAIT_HADR_NOTIFICATION_WORKER_TERMINATION_SYNC = 0x400356,
  PWAIT_HADR_NOTIFICATION_DEQUEUE = 0x400357,
  PWAIT_HADR_ARPROXY_NOTIFICATION_SUBSCRIBER_LIST = 0x400358,
  PWAIT_HADR_DBR_SUBSCRIBER_FILTER_LIST = 0x400359,
  PWAIT_HADR_DBR_SUBSCRIBER = 0x40035a,
  PWAIT_HADR_NOTIFICATION_WORKER_STARTUP_SYNC = 0x40035b,
  PWAIT_HADR_NOTIFICATION_WORKER_EXCLUSIVE_ACCESS = 0x40035c,
  MUTEX_HADR_RECOVERY_WAIT_FOR_UNDO = 0x40035d,
  MUTEX_HADR_DATABASE_WAIT_FOR_RESTART = 0x40035e,
  PWAIT_HADR_XRF_STACK_ACCESS = 0x40035f,
  MUTEX_HADR_RECOVERY_WAIT_FOR_CONNECTION = 0x400360,
  PWAIT_HADR_TRANSPORT_FLOW = 0x400361,
  PWAIT_HADR_PARTNER_FLOW = 0x400362,
  PWAIT_HADR_POST_ONLINE_COMPLETED = 0x400363,
  PWAIT_HADR_WAIT_FOR_TRANSITION_TO_VERSIONING = 0x400364,
  PWAIT_XDES_OUT_OF_ORDER_LIST = 0x400365,
  PWAIT_HADR_BACKUP_BULK_LOCK = 0x400366,
  PWAIT_HADR_BACKUP_QUEUE = 0x400367,
  PWAIT_HADR_LOGCAPTURE_WAIT = 0x400368,
  PWAIT_HADR_AR_CRITICAL_SECTION_ENTRY = 0x400369,
  PWAIT_HADR_TDS_LISTENER_SYNC = 0x40036a,
  PWAIT_HADR_READ_ALL_NETWORKS = 0x40036b,
  PWAIT_HADR_TDS_LISTENER_SYNC_PROCESSING = 0x40036c,
  PWAIT_XTP_FSSTORAGE_MAINTENANCE = 0x40036d,
  PWAIT_XTP_GUEST = 0x40036e,
  PWAIT_XTP_TASK_SHUTDOWN = 0x40036f,
  XTPPROC_PARTITIONED_STACK_CREATE = 0x400370,
  PWAIT_PREEMPTIVE_HADR_LEASE_MECHANISM = 0x20000371,
  PWAIT_HADR_TIMER_TASK = 0x400372,
  PWAIT_EVENT_SESSION_INIT_MUTEX = 0x400373,
  PWAIT_REPLICA_ONLINE_INIT_MUTEX = 0x400374,
  PWAIT_HADR_GROUP_COMMIT = 0x400375,
  PWAIT_HADR_SYNCHRONIZING_THROTTLE = 0x400376,
  PWAIT_HADR_VERSIONING_STATE = 0x400377,
  PXTPPROC_CACHE_ACCESS = 0x400378,
  PWAIT_SP_SERVER_DIAGNOSTICS_BUFFER_ACCESS = 0x400379,
  PWAIT_SCHEDULER_IDLE = 0x2000037a,
  PWAIT_HADRFS_FILE_CLOSE = 0x40037b,
  PWAIT_VERSIONING_COMMITTING = 0x40037c,
  PWAIT_FILETABLE_SHUTDOWN = 0x40037d,
  PWAIT_PRU_ROLLBACK_DEFERRED = 0x40037e,
  PWAIT_XTP_TRAN_DEPENDENCY = 0x40037f,
  PWAIT_XTP_HOST_WAIT = 0x400380,
  PWAIT_XTP_HOST_STORAGE_WAIT = 0x400381,
  PWAIT_UCS_TRANSPORT_CONNECT = 0x400382,
  PWAIT_XE_CONFIG_CHANGE = 0x400383,
  PWAIT_PREEMPTIVE_XE_CONFIG_CHANGE = 0x20000384,
  PWAIT_HADR_FABRIC_CALLBACK = 0x400385,
  PWAIT_ASYNC_OP_CONTEXT_READ = 0x400386,
  PWAIT_ASYNC_OP_CONTEXT_WRITE = 0x400387,
  PWAIT_ASYNC_OP_COMPLETION = 0x400388,
  PWAIT_FABRIC_REPLICA_PUBLISHER_SUBSCRIBER_LIST = 0x400389,
  PWAIT_FABRIC_REPLICA_CONTROLLER_STATE_AND_CONFIG = 0x40038a,
  PWAIT_FABRIC_REPLICA_CONTROLLER_LIST = 0x40038b,
  PWAIT_FABRIC_HADR_TRANSPORT_CONNECTION = 0x40038c,
  PWAIT_FABRIC_WAIT_FOR_BUILD_REPLICA_EVENT_PROCESSING = 0x40038d,
  PWAIT_VDICLIENT_GETCOMMAND = 0x40038e,
  PWAIT_VDICLIENT_COMPLETECOMMAND = 0x40038f,
  PWAIT_VDICLIENT_OTHER = 0x400390,
  PWAIT_VDICLIENT_OPERATION = 0x400391,
  PWAIT_HADR_DBSEEDING = 0x400392,
  PWAIT_HADR_DBSEEDING_LIST = 0x400393,
  PWAIT_SLO_UPDATE = 0x400394,
  PWAIT_UCS_CLUSTER_PROXY_ROUTER = 0x400395,
  PWAIT_UCS_CLUSTER_PROXY_FORWARDER = 0x400396,
  PWAIT_PREEMPTIVE_AUDIT_ACCESS_MDSLOG = 0x20000397,
  PWAIT_SE_REPL_QUEUE_XACT_ACK = 0x400398,
  PWAIT_SE_REPL_QUEUE_TRUNCATE = 0x400399,
  PWAIT_SE_REPL_LAST_CSN_LOCK = 0x40039a,
  PWAIT_XTP_RECOVERY = 0x40039b,
  PWAIT_XTP_OFFLINE_CKPT_NEW_LOG = 0x40039c,
  PWAIT_XTP_OFFLINE_CKPT_LOG_IO = 0x40039d,
  PWAIT_XTP_OFFLINE_CKPT_BEFORE_REDO = 0x40039e,
  PWAIT_XTP_PROCEDURE_ENTRY = 0x40039f,
  PWAIT_XTP_CKPT_ENABLED = 0x4003a0,
  PWAIT_XTP_CKPT_AGENT = 0x4003a1,
  PWAIT_XTP_CKPT_CLOSE = 0x4003a2,
  PWAIT_XTP_CKPT_STATE_LOCK = 0x4003a3,
  PWAIT_XTP_ASYNC_TX_COMPLETION = 0x4003a4,
  PWAIT_LCK_M_SCH_S_LOW_PRIORITY = 933,
  PWAIT_LCK_M_SCH_M_LOW_PRIORITY = 934,
  PWAIT_LCK_M_S_LOW_PRIORITY = 935,
  PWAIT_LCK_M_U_LOW_PRIORITY = 936,
  PWAIT_LCK_M_X_LOW_PRIORITY = 937,
  PWAIT_LCK_M_IS_LOW_PRIORITY = 938,
  PWAIT_LCK_M_IU_LOW_PRIORITY = 939,
  PWAIT_LCK_M_IX_LOW_PRIORITY = 940,
  PWAIT_LCK_M_SIU_LOW_PRIORITY = 941,
  PWAIT_LCK_M_SIX_LOW_PRIORITY = 942,
  PWAIT_LCK_M_UIX_LOW_PRIORITY = 943,
  PWAIT_LCK_M_BU_LOW_PRIORITY = 944,
  PWAIT_LCK_M_RS_S_LOW_PRIORITY = 945,
  PWAIT_LCK_M_RS_U_LOW_PRIORITY = 946,
  PWAIT_LCK_M_RIn_NL_LOW_PRIORITY = 947,
  PWAIT_LCK_M_RIn_S_LOW_PRIORITY = 948,
  PWAIT_LCK_M_RIn_U_LOW_PRIORITY = 949,
  PWAIT_LCK_M_RIn_X_LOW_PRIORITY = 950,
  PWAIT_LCK_M_RX_S_LOW_PRIORITY = 951,
  PWAIT_LCK_M_RX_U_LOW_PRIORITY = 952,
  PWAIT_LCK_M_RX_X_LOW_PRIORITY = 953,
  PWAIT_LCK_M_SCH_S_ABORT_BLOCKERS = 954,
  PWAIT_LCK_M_SCH_M_ABORT_BLOCKERS = 955,
  PWAIT_LCK_M_S_ABORT_BLOCKERS = 956,
  PWAIT_LCK_M_U_ABORT_BLOCKERS = 957,
  PWAIT_LCK_M_X_ABORT_BLOCKERS = 958,
  PWAIT_LCK_M_IS_ABORT_BLOCKERS = 959,
  PWAIT_LCK_M_IU_ABORT_BLOCKERS = 960,
  PWAIT_LCK_M_IX_ABORT_BLOCKERS = 961,
  PWAIT_LCK_M_SIU_ABORT_BLOCKERS = 962,
  PWAIT_LCK_M_SIX_ABORT_BLOCKERS = 963,
  PWAIT_LCK_M_UIX_ABORT_BLOCKERS = 964,
  PWAIT_LCK_M_BU_ABORT_BLOCKERS = 965,
  PWAIT_LCK_M_RS_S_ABORT_BLOCKERS = 966,
  PWAIT_LCK_M_RS_U_ABORT_BLOCKERS = 967,
  PWAIT_LCK_M_RIn_NL_ABORT_BLOCKERS = 968,
  PWAIT_LCK_M_RIn_S_ABORT_BLOCKERS = 969,
  PWAIT_LCK_M_RIn_U_ABORT_BLOCKERS = 970,
  PWAIT_LCK_M_RIn_X_ABORT_BLOCKERS = 971,
  PWAIT_LCK_M_RX_S_ABORT_BLOCKERS = 972,
  PWAIT_LCK_M_RX_U_ABORT_BLOCKERS = 973,
  PWAIT_LCK_M_RX_X_ABORT_BLOCKERS = 974,
  PWAIT_TERMINATE_LISTENER = 0x4003cf,
  PWAIT_SCRIPTDEPLOYMENT_REQUEST = 0x4003d0,
  PWAIT_SCRIPTDEPLOYMENT_WORKER = 0x4003d1,
  PWAIT_FEATURE_SWITCHES_UPDATE = 0x4003d2,
  PWAIT_XTP_HOST_DB_COLLECTION = 0x4003d3,
  PWAIT_XTP_HOST_LOG_ACTIVITY = 0x4003d4,
  PWAIT_QDS_DYN_VECTOR = 0x4003d5,
  PWAIT_QDS_OPEN_ADDR_HASH_MAP = 0x4003d6,
  PWAIT_QDS_CTXS = 0x4003d7,
  PWAIT_QDS_BCKG_TASK = 0x4003d8,
  PWAIT_QDS_DB_DISK = 0x4003d9,
  PWAIT_QDS_STMT_DISK = 0x4003da,
  PWAIT_QDS_ASYNC_PERSIST_TASK = 0x4003db,
  PWAIT_QDS_LOADDB = 0x4003dc,
  PWAIT_QDS_ASYNC_PERSIST_TASK_START = 0x4003dd,
  PWAIT_QDS_ASYNC_CHECK_CONSISTENCY_TASK = 0x4003de,
  PWAIT_QDS_TASK_START = 0x4003df,
  PWAIT_QDS_PERSIST_TASK_MAIN_LOOP_SLEEP = 0x4003e0,
  PWAIT_QDS_TASK_SHUTDOWN = 0x4003e1,
  PWAIT_QDS_SHUTDOWN_QUEUE = 0x4003e2,
  PWAIT_PREEMPTIVE_XE_CX_FILE_OPEN = 0x200003e3,
  PWAIT_XE_CX_FILE_READ = 0x4003e4,
  PWAIT_XDB_GATEWAY_RESOLVE = 0x4003e5,
  PWAIT_XDB_URI_CACHE = 0x4003e6,
  PWAIT_XDB_MONITOR_HASH = 0x4003e7,
  PWAIT_WINFAB_API_CALL = 0x4003e8,
  PWAIT_PREEMPTIVE_XE_CX_HTTP_CALL = 0x200003e9,
  PWAIT_CLOUD_ALL_PARTITIONS_STARTUP = 0x4003ea,
  PWAIT_SE_REPL_QUEUE_LOG_TRUNCATION = 0x4003eb,
  PWAIT_SE_REPL_QUEUE_LOG_THROTTLE_LIST = 0x4003ec,
  PWAIT_LOG_CONSOLIDATION_POLL = 0x4003ed,
  PWAIT_LOG_CONSOLIDATION_IO = 0x4003ee,
  PWAIT_SE_REPL_PARTITION_STARTUP_EVENT = 0x4003ef,
  PWAIT_COLUMNSTORE_BUILD_THROTTLE = 0x4003f0,
  PWAIT_DBSEEDING_OPERATION = 0x4003f1,
  PWAIT_DBSEEDING_FLOWCONTROL = 0x4003f2,
  PWAIT_PHYSICAL_SEEDING_DMV = 0x4003f3,
  PWAIT_DROP_DATABASE = 0x4003f4,
  PWAIT_SE_REPL_PARTITION_WAITING_QUEUE = 0x4003f5,
  PWAIT_SNI_CONN_DUP = 0x4003f6,
  PWAIT_SEQUENCE_GENERATION = 0x4003f7,
  PWAIT_XTP_RTDATA_LIST = 0x4003f8,
  PWAIT_XDB_MONITOR_LIST = 0x4003f9,
  PWAIT_SE_REPL_QUEUE_THROTTLING = 0x4003fa,
  PWAIT_HADR_JOIN = 0x4003fb,
  PWAIT_WINFAB_REPLICA_BUILD_OPERATION = 0x4003fc,
  PWAIT_FABRIC_REPLICA_PUBLISHER_EVENT_PUBLISH = 0x4003fd,
  PWAIT_QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP = 0x4003fe,
  PWAIT_XDB_HOST_PROPERTY_READ = 0x4003ff,
  PWAIT_LAST = 0x400400,
};

typedef union _RATE_QUOTA_LIMIT
{
  union
  {
    /* 0x0000 */ unsigned long RateData;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long RatePercent : 7; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved0 : 25; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT; /* size: 0x0004 */

typedef struct _QUOTA_LIMITS_EX
{
  /* 0x0000 */ unsigned __int64 PagedPoolLimit;
  /* 0x0008 */ unsigned __int64 NonPagedPoolLimit;
  /* 0x0010 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x0018 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0020 */ unsigned __int64 PagefileLimit;
  /* 0x0028 */ union _LARGE_INTEGER TimeLimit;
  /* 0x0030 */ unsigned __int64 WorkingSetLimit;
  /* 0x0038 */ unsigned __int64 Reserved2;
  /* 0x0040 */ unsigned __int64 Reserved3;
  /* 0x0048 */ unsigned __int64 Reserved4;
  /* 0x0050 */ unsigned long Flags;
  /* 0x0054 */ union _RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX; /* size: 0x0058 */

typedef enum
{
  ListElementOffset = 144,
  NextPtrOffset = 8,
} TAG_UNNAMED_549, *PTAG_UNNAMED_549;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_550, *PTAG_UNNAMED_550;

typedef union __m128i
{
  union
  {
    /* 0x0000 */ char m128i_i8[16];
    /* 0x0000 */ short m128i_i16[8];
    /* 0x0000 */ int m128i_i32[4];
    /* 0x0000 */ __int64 m128i_i64[2];
    /* 0x0000 */ unsigned char m128i_u8[16];
    /* 0x0000 */ unsigned short m128i_u16[8];
    /* 0x0000 */ unsigned int m128i_u32[4];
    /* 0x0000 */ unsigned __int64 m128i_u64[2];
  }; /* size: 0x0010 */
} _m128i, *P_m128i; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_551, *PTAG_UNNAMED_551;

enum resource_idx
{
  IDX_MEMPHYSICAL_HIGH = 0,
  IDX_MEMPHYSICAL_LOW = 1,
  IDX_MEMVIRTUALL_LOW = 2,
  IDX_RESOURCEMAX = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_552, *PTAG_UNNAMED_552;

struct std::tr1::_Is_integral<bool>
{
}; /* size: 0x0001 */

class CMemPartitioned<CMemThread<CMemDbg<CMemLargePageObj> > >
{
  /* 0x0000 */ long Padding_206[392];
  /* 0x0620 */ class IMemObj** m_partitionMemObj;
  /* 0x0628 */ int m_numberOfPartitions;
  /* 0x062c */ enum PartitioningType m_partType;
  /* 0x0630 */ enum AllocatorType m_allocatorType;
  /* 0x0634 */ long Padding_207;
  /* 0x0638 */ __int64 m_cPages;
}; /* size: 0x0640 */

enum SOSHOST_RWLOCKMODE
{
  SOSHOST_RWLOCKMODE_INVALID = 0,
  SOSHOST_RWLOCKMODE_READ = 1,
  SOSHOST_RWLOCKMODE_WRITE = 2,
  SOSHOST_RWLOCKMODE_LAST = 3,
};

enum IMemObj::status
{
  MEMOBJ_PARENT = 1,
  MEMOBJ_PAGEHEAP = 2,
  MEMOBJ_MALLOCSPY = 4,
  MEMOBJ_INCREMENTAL = 8,
  MEMOBJ_THREADSAFE = 16,
  MEMOBJ_FIXED = 32,
  MEMOBJ_PARTITIONED = 64,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_553, *PTAG_UNNAMED_553;

class CAutoP<XE_FileBufferEnum>
{
}; /* size: 0x0008 */

enum destroy_type
{
  USERDATA = 0,
  CACHEKEY = 1,
  FULLOBJECT = 2,
};

class CAutoRg<XMLActionTransformRule>
{
}; /* size: 0x0008 */

typedef struct _MEMORY_RANGE_ENTRY
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0008 */ unsigned __int64 NumberOfBytes;
} MEMORY_RANGE_ENTRY, *PMEMORY_RANGE_ENTRY; /* size: 0x0010 */

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_554, *PTAG_UNNAMED_554;

class CMemThread<CMemObj>
{
  /* 0x0000 */ long Padding_208[68];
  /* 0x0110 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x0188 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x01b0 */

enum eXcursionEntryType
{
  TYPE_WAYPOINT = 0,
  TYPE_ENTRY = 1,
  TYPE_EXIT = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_555, *PTAG_UNNAMED_555;

class CAutoBase<unsigned __int64>
{
  /* 0x0000 */ unsigned __int64* m_pt;
}; /* size: 0x0008 */

enum SOS_MemoryBroker::NOTIFICATION
{
  STABLE = 0,
  GROW = 1,
  SHRINK = 2,
  NOTIFICATION_LAST = 3,
};

struct ITypeMarshal
{
}; /* size: 0x0008 */

enum SOSHOST_MEMOBJ_ID
{
  MEMOBJ_UNINITIALIZED = 0,
  MEMOBJ_SOSBOOT = 1,
  MEMOBJ_SOSNODE = 2,
  MEMOBJ_HOST = 3,
  MEMOBJ_SOSSCHEDULER = 4,
  MEMOBJ_SOSWORKER = 5,
  MEMOBJ_SOSSCHEDULERTASK = 6,
  MEMOBJ_SOSSCHEDULERMEMOBJPROXY = 7,
  MEMOBJ_STACKSTORE = 8,
  MEMOBJ_DUMPTRIGGERS = 9,
  MEMOBJ_RESOURCEINVENTORY = 10,
  MEMOBJ_RESOURCEMANAGEMENT = 11,
  MEMOBJ_PLANSKELETON = 12,
  MEMOBJ_UDX = 13,
  MEMOBJ_UDXPARENT = 14,
  MEMOBJ_STATEMENT = 15,
  MEMOBJ_COMPILE_ADHOC = 16,
  MEMOBJ_REPLICATION = 17,
  MEMOBJ_ASYNCHSTATS = 18,
  MEMOBJ_SQLCLRHOSTING = 19,
  MEMOBJ_SQLCLRAPPDOMAIN = 20,
  MEMOBJ_SQLCLR_UDXCACHE = 21,
  MEMOBJ_SQLCLR_CLR_EE = 22,
  MEMOBJ_SQLCLR_CLR_LARGE = 23,
  MEMOBJ_SQLCLR_VMSPY = 24,
  MEMOBJ_SYSTASKSESSION = 25,
  MEMOBJ_SESSION_MANAGER = 26,
  MEMOBJ_TSQLDEBUGGING = 27,
  MEMOBJ_DIAGNOSTIC = 28,
  MEMOBJ_EVENTSUBSYSTEM = 29,
  MEMOBJ_FULLTEXTGLOBAL = 30,
  MEMOBJ_FULLTEXTEXECUTION = 31,
  MEMOBJ_FULLTEXTEXECUTIONOVERFLOW = 32,
  MEMOBJ_HTTPSNICONTROLLER = 33,
  MEMOBJ_HTTPSRVCONN = 34,
  MEMOBJ_SOAPLANGPIPE = 35,
  MEMOBJ_SOAPPARAMEXCHANGELANGPIPE = 36,
  MEMOBJ_SOAPPARAMEXCHANGEWSDL = 37,
  MEMOBJ_SOAPOUTPUTRESULTSET = 38,
  MEMOBJ_SOAPOUTPUTXMLWRITER = 39,
  MEMOBJ_SOAPSESSIONS = 40,
  MEMOBJ_SOAPSESSIONSTORE = 41,
  MEMOBJ_SOAPWSDLGENERATOR = 42,
  MEMOBJ_LOCKBLOCKS = 43,
  MEMOBJ_LOCKOWNERS = 44,
  MEMOBJ_APPLOCKLVB = 45,
  MEMOBJ_GLOBALPMO = 46,
  MEMOBJ_XP = 47,
  MEMOBJ_REMOTESESSIONCACHE = 48,
  MEMOBJ_SRVPROC = 49,
  MEMOBJ_SERVICEBROKER = 50,
  MEMOBJ_SERVICEBROKERMSGDISPATCHER = 51,
  MEMOBJ_SERVICEBROKERTRANSOBJ = 52,
  MEMOBJ_SESCHEMAMGR = 53,
  MEMOBJ_SESCHEMA = 54,
  MEMOBJ_SECOLMETACACHE = 55,
  MEMOBJ_SORTTABLE = 56,
  MEMOBJ_RESOURCE = 57,
  MEMOBJ_RESOURCESEINTERNALTLS = 58,
  MEMOBJ_RESOURCESUBPROCESSDESCRIPTOR = 59,
  MEMOBJ_RESOURCEDATASESSION = 60,
  MEMOBJ_RESOURCEXACT = 61,
  MEMOBJ_SQLMGR = 62,
  MEMOBJ_SQLTRACE = 63,
  MEMOBJ_TRACE_EVTNOTIF = 64,
  MEMOBJ_SUBPROC = 65,
  MEMOBJ_MDBREMOTETHREAD = 66,
  MEMOBJ_EXCHANGEPORTS = 67,
  MEMOBJ_EXCHANGEXID = 68,
  MEMOBJ_SYNCPOINT = 69,
  MEMOBJ_MSXML = 70,
  MEMOBJ_BACKUPRESTORE = 71,
  MEMOBJ_BADPAGELIST = 72,
  MEMOBJ_BACKUPSYNC = 73,
  MEMOBJ_BCPPROVIDER = 74,
  MEMOBJ_BCPIMPORTPROVIDER = 75,
  MEMOBJ_GENERATEMAXDIFFHIST = 76,
  MEMOBJ_CHECKALLOC = 77,
  MEMOBJ_CHECKCONSTRAINTS = 78,
  MEMOBJ_CHECKDATABASE = 79,
  MEMOBJ_CHECKCATALOG = 80,
  MEMOBJ_CHECKTABLE = 81,
  MEMOBJ_CHECKICC = 82,
  MEMOBJ_CHECKTRACELIST = 83,
  MEMOBJ_INDEXANALYSIS = 84,
  MEMOBJ_DBCCOPERATION = 85,
  MEMOBJ_UTILDBCCOPURGEHEAP = 86,
  MEMOBJ_UPDATEUSAGE = 87,
  MEMOBJ_MOVEHEAPPAGEINUPGRADE = 88,
  MEMOBJ_MOVESYSFILES1PAGE = 89,
  MEMOBJ_UPGRADEHEAPICC = 90,
  MEMOBJ_DBUPGRADEBSTFACTORY = 91,
  MEMOBJ_ASYNCHPOPULATIONPRODUCER = 92,
  MEMOBJ_METADATADB = 93,
  MEMOBJ_SPCURSORS = 94,
  MEMOBJ_CURSOREXEC = 95,
  MEMOBJ_OPTIMIZEREXPR = 96,
  MEMOBJ_EXECCOMPILETEMP = 97,
  MEMOBJ_PERDATABASE = 98,
  MEMOBJ_DECORATESCALAREXPRFORPARSER = 99,
  MEMOBJ_DECODESCALAREXPR = 100,
  MEMOBJ_RESYNCQUERYUNIQUETABLE = 101,
  MEMOBJ_FCBSYNC = 102,
  MEMOBJ_INDEXCREATE = 103,
  MEMOBJ_DBMIRRORING = 104,
  MEMOBJ_CREATEINSTANCEDATASOURCE = 105,
  MEMOBJ_CREATEINSTANCEDBINITIALIZE = 106,
  MEMOBJ_PEXPRBUILDREMOTEQUERY = 107,
  MEMOBJ_COMPILECOMPCOL = 108,
  MEMOBJ_QUERYOPTIMIZER = 109,
  MEMOBJ_QUERYDISKSTORE = 110,
  MEMOBJ_QUERYSTOREPARTITIONEDHEAP = 111,
  MEMOBJ_SHOWPLANTEMP = 112,
  MEMOBJ_HASHGENERAL = 113,
  MEMOBJ_HASHWORKFILEPARTITION = 114,
  MEMOBJ_HASHBITMAP = 115,
  MEMOBJ_HASHSTRATEGY = 116,
  MEMOBJ_QSCANSORTNEW = 117,
  MEMOBJ_QSCANSORTTHREADSAFE = 118,
  MEMOBJ_EXCHANGEPRODUCER = 119,
  MEMOBJ_SHOWPLAN = 120,
  MEMOBJ_QUERYEXECCNTXTFORPARALLELISM = 121,
  MEMOBJ_QUERYEXECCNTXTFORSE = 122,
  MEMOBJ_RECOVERYDPTFACTORY = 123,
  MEMOBJ_RECOVERYIDTFACTORY = 124,
  MEMOBJ_RECOVERYIETFACTORY = 125,
  MEMOBJ_RECOVERYXDESFACTORY = 126,
  MEMOBJ_RECOVERYFEDXACTFACTORY = 127,
  MEMOBJ_STATICOPTIMIZERRULES = 128,
  MEMOBJ_SQLPROFMANAGER = 129,
  MEMOBJ_FLUSHIDENTITYDURINGRECOVERY = 130,
  MEMOBJ_SECURITY = 131,
  MEMOBJ_SQLSAXXMLREADER = 132,
  MEMOBJ_PARSE = 133,
  MEMOBJ_EXECUTE = 134,
  MEMOBJ_XPROC = 135,
  MEMOBJ_CLRPROC = 136,
  MEMOBJ_ASSEMBLYBYTES = 137,
  MEMOBJ_SBPSMGR = 138,
  MEMOBJ_SBCREATEMETADATA = 139,
  MEMOBJ_BLOBHANDLEFACTORYMAIN = 140,
  MEMOBJ_VIEWDEFINITIONS = 141,
  MEMOBJ_XMLVALIDATION = 142,
  MEMOBJ_XMLSCHEMACHECKER = 143,
  MEMOBJ_XMLSCHEMACHECKERCTX = 144,
  MEMOBJ_XMLSCHEMAGENERATOR = 145,
  MEMOBJ_XMLCONVERT = 146,
  MEMOBJ_XMLCONVERTPARSER = 147,
  MEMOBJ_XMLCONVERTVALIDATOR = 148,
  MEMOBJ_SPARSEVECTORCONVERTTOXMLWRITER = 149,
  MEMOBJ_XMLCONVERTTOSPARSEVECTORREADER = 150,
  MEMOBJ_XMLCONVERTTOSPARSEVECTORWRITER = 151,
  MEMOBJ_XRETEXECUTEDDLXMLSCHEMA = 152,
  MEMOBJ_DEADLOCKXML = 153,
  MEMOBJ_SOSDEADLOCKMONITOR = 154,
  MEMOBJ_SOSDEADLOCKMONITORRINGBUFFER = 155,
  MEMOBJ_SOSDEADLOCKMONITORXMLREPORT = 156,
  MEMOBJ_CACHESTORESQLCP = 157,
  MEMOBJ_CACHESTOREOBJCP = 158,
  MEMOBJ_CACHESTOREOBJMXC = 159,
  MEMOBJ_CACHESTORESQLMXC = 160,
  MEMOBJ_CACHESTOREPHDR = 161,
  MEMOBJ_CACHESTOREXPROC = 162,
  MEMOBJ_CACHESTORETEMPTABLE = 163,
  MEMOBJ_CACHESTORESXC = 164,
  MEMOBJ_CACHESTOREQNOTIFMGR = 165,
  MEMOBJ_CACHESTOREVIEWDEFINITIONS = 166,
  MEMOBJ_CACHESTOREHTTPCONCACHE = 167,
  MEMOBJ_CACHESTORESOAPSESSIONS = 168,
  MEMOBJ_CACHESTOREXMLDBTYPE = 169,
  MEMOBJ_CACHESTOREXMLDBELEMENT = 170,
  MEMOBJ_CACHESTOREXMLDBATTRIBUTE = 171,
  MEMOBJ_PROCESSRPC = 172,
  MEMOBJ_CACHESTOREBROKERTBLACS = 173,
  MEMOBJ_CACHESTOREBROKERKEK = 174,
  MEMOBJ_CACHESTOREBROKERDSH = 175,
  MEMOBJ_CACHESTORE_BROKERUSERCERTLOOKUP = 176,
  MEMOBJ_CACHESTOREBROKERRSB = 177,
  MEMOBJ_CACHESTOREBROKERREADONLY = 178,
  MEMOBJ_CACHESTOREVENT = 179,
  MEMOBJ_CACHESTORESEHOBTCOLUMNATTR = 180,
  MEMOBJ_ENTITYVERSIONINFO = 181,
  MEMOBJ_XSTMT = 182,
  MEMOBJ_QUERYNOTIFICATON = 183,
  MEMOBJ_INDEXSTATSMGR = 184,
  MEMOBJ_INDEXRECMGR = 185,
  MEMOBJ_OPTINFOMGR = 186,
  MEMOBJ_RULETABLEGLOBAL = 187,
  MEMOBJ_APPENDONLYSTORAGEUNITMGR = 188,
  MEMOBJ_CACHESTORETOKENPERM = 189,
  MEMOBJ_CACHEOBJPERM = 190,
  MEMOBJ_SQLACCESS = 191,
  MEMOBJ_SNI = 192,
  MEMOBJ_SNIPACKETOBJECTSTORE = 193,
  MEMOBJ_TEST = 194,
  MEMOBJ_SYSTEMROWSET = 195,
  MEMOBJ_LBSSCACHE = 196,
  MEMOBJ_QUERYEXECROWSETDEBUG = 197,
  MEMOBJ_SECURITYIMPCACHE = 198,
  MEMOBJ_SBTRANSPORT = 199,
  MEMOBJ_QPMEMGRANTINFO = 200,
  MEMOBJ_WFSSHAREMGR = 201,
  MEMOBJ_SEFSM_CACHE = 202,
  MEMOBJ_GUARDIAN = 203,
  MEMOBJ_CACHERLSAC = 204,
  MEMOBJ_QSRANGEPREFETCH = 205,
  MEMOBJ_PROCCACHEPARTITIONEDHEAP = 206,
  MEMOBJ_STACKHASHER = 207,
  MEMOBJ_SUPERLATCHESPARTITIONEDHEAP = 208,
  MEMOBJ_SUPERLATCH_BLOCK = 209,
  MEMOBJ_CHECK_ADB_CACHE = 210,
  MEMOBJ_SCHEMAMGRHEAP = 211,
  MEMOBJ_EVENTXMLWRITER = 212,
  MEMOBJ_SEREPL = 213,
  MEMOBJ_SEREPL_XDES = 214,
  MEMOBJ_SEREPL_SECONDARY_XACT = 215,
  MEMOBJ_SEREPL_WORKITEM = 216,
  MEMOBJ_SEREPL_ACTIVE_XACT = 217,
  MEMOBJ_SEREPL_QUEUE_METADATA = 218,
  MEMOBJ_SEREPL_ROWSET_METADATA = 219,
  MEMOBJ_SEREPL_COPY_MSGBUFREF = 220,
  MEMOBJ_ASYNC_TRANSPORT = 221,
  MEMOBJ_SEREPL_ROWSET = 222,
  MEMOBJ_SEREPL_PARTITIONCOPY = 223,
  MEMOBJ_FSAGENT = 224,
  MEMOBJ_FILETABLE_NSO = 225,
  MEMOBJ_FILETABLE_STORE = 226,
  MEMOBJ_FILETABLE_USERSTOREFCB = 227,
  MEMOBJ_FILETABLE_WORKITEM = 228,
  MEMOBJ_FILETABLE_TUNNELCACHE = 229,
  MEMOBJ_ABR = 230,
  MEMOBJ_WSM = 231,
  MEMOBJ_SBASBMANAGER = 232,
  MEMOBJ_SBMESSAGEDISPATCHER = 233,
  MEMOBJ_SBTIMEREVENTCACHE = 234,
  MEMOBJ_SBACTIVATIONMANAGER = 235,
  MEMOBJ_SBOBJECTPOOLS = 236,
  MEMOBJ_MATRIXDBMCI = 237,
  MEMOBJ_MATRIXDBMCIMAILBOX = 238,
  MEMOBJ_MATRIXDBMCIMESSAGE = 239,
  MEMOBJ_MATRIXDBMCIMAILBOXNAME = 240,
  MEMOBJ_MATRIXDB_MCIINMESSAGE = 241,
  MEMOBJ_MATRIXDB_MCIOUTMESSAGE = 242,
  MEMOBJ_MATRIXDB_MCICONNECTION = 243,
  MEMOBJ_MATRIXDB_MCIPIPE = 244,
  MEMOBJ_MATRIXDB_MCICHANNEL = 245,
  MEMOBJ_TVPFILL = 246,
  MEMOBJ_XE_ENGINE = 247,
  MEMOBJ_RPC_ENGINE = 248,
  MEMOBJ_XE_SESSION = 249,
  MEMOBJ_OPTIMIZERTESTHOOKXML = 250,
  MEMOBJ_XE_STARTUP = 251,
  MEMOBJ_XE_DMV = 252,
  MEMOBJ_XRETEXECUTEDDLTABLESWITCH = 253,
  MEMOBJ_SPATIAL = 254,
  MEMOBJ_SCTCLEANUP = 255,
  MEMOBJ_CONVPRI = 256,
  MEMOBJ_MATRIX_TCM = 257,
  MEMOBJ_MATRIX_TCM_XACT_RESOLVE = 258,
  MEMOBJ_MATRIXCOMM = 259,
  MEMOBJ_MATRIX_MESSAGES = 260,
  MEMOBJ_MATRIXDBPRISM = 261,
  MEMOBJ_MATRIX_CM = 262,
  MEMOBJ_MATRIX_CM_AGENT = 263,
  MEMOBJ_MATRIXDB_DVM = 264,
  MEMOBJ_MATRIXDB_DVM_AGENT = 265,
  MEMOBJ_CACHESTOREMATRIXRPC = 266,
  MEMOBJ_MATRIX_RPCRUNTIME = 267,
  MEMOBJ_MATRIX_RPCRUNTIME_COLLECTION = 268,
  MEMOBJ_UCS = 269,
  MEMOBJ_AUDIT_EVENT_BUFFER = 270,
  MEMOBJ_AUDIT_MGR = 271,
  MEMOBJ_AUDIT_STARTUP = 272,
  MEMOBJ_FULLTEXTSTOPLIST = 273,
  MEMOBJ_SFW = 274,
  MEMOBJ_MATRIXDB_STVFRPC_CACHESTORE = 275,
  MEMOBJ_MATRIXDB_STVFRPC = 276,
  MEMOBJ_MATRIX_COMM_FABRIC = 277,
  MEMOBJ_QUERY_DRIVER = 278,
  MEMOBJ_SEARCHPROPERTYLIST = 279,
  MEMOBJ_PROFILECONTEXT = 280,
  MEMOBJ_MATRIX_SM = 281,
  MEMOBJ_MATRIX_SM_AGENT = 282,
  MEMOBJ_MATRIX_DBCONTROLLER = 283,
  MEMOBJ_SP_SERVER_DIAGNOSTICS_DEADLOCK_MONITOR = 284,
  MEMOBJ_CHECK_REMOTE_CONTROLLER = 285,
  MEMOBJ_MATRIX_GDM = 286,
  MEMOBJ_MATRIX_GDM_GWFG = 287,
  MEMOBJ_MATRIX_GDMA = 288,
  MEMOBJ_MATRIX_GDM_GDMA_TEST = 289,
  MEMOBJ_LANGSVC_PROJECT = 290,
  MEMOBJ_LANGSVC_BLOB_HANDLE_FACTORY = 291,
  MEMOBJ_LANGSVC_CLR = 292,
  MEMOBJ_HADR = 293,
  MEMOBJ_LOGPOOL = 294,
  MEMOBJ_XACT_CACHE = 295,
  MEMOBJ_TICACHE = 296,
  MEMOBJ_LMCACHE = 297,
  MEMOBJ_FSCHUNKER = 298,
  MEMOBJ_XTPMAT = 299,
  MEMOBJ_XTPPROCCACHE = 300,
  MEMOBJ_XTPDB = 301,
  MEMOBJ_XTPBLOCKALLOC = 302,
  MEMOBJ_XTPTEMPTABLE = 303,
  MEMOBJ_XTPPROC = 304,
  MEMOBJ_XTPPROCRTDATA = 305,
  MEMOBJ_XTPPROCPARTITIONEDHEAP = 306,
  MEMOBJ_COLUMNBATCH = 307,
  MEMOBJ_COLUMNSTOREOBJECTPOOL = 308,
  MEMOBJ_QPMEMGRANT = 309,
  MEMOBJ_COLUMNSTOREINDEXBUILDGLOBAL = 310,
  MEMOBJ_XE_BROADCAST = 311,
  MEMOBJ_RECORD_DECODE = 312,
  MEMOBJ_XML_SXI_SHRED = 313,
  MEMOBJ_CACHESTORE_XML_SELECTIVE_DG = 314,
  MEMOBJ_SQLFABRIC = 315,
  MEMOBJ_QDSCONTEXTSETTINGSCACHE = 316,
  MEMOBJ_QDSRUNTIMESTATSCACHE = 317,
  MEMOBJ_QDSSTMTCACHE = 318,
  MEMOBJ_FEATURESWITCHES_SINGLETON = 319,
  MEMOBJ_FEATURESWITCHES_PARSER = 320,
  MEMOBJ_SCRIPT_DEPLOYMENT = 321,
  MEMOBJ_DBCOPY = 322,
  MEMOBJ_LAST = 323,
};

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_556, *PTAG_UNNAMED_556;

typedef enum
{
  object_idIdx = 0,
  database_idIdx = 1,
  cache_typeIdx = 2,
  keyIdx = 3,
  LastField = 4,
} TAG_UNNAMED_557, *PTAG_UNNAMED_557;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 17,
} TAG_UNNAMED_558, *PTAG_UNNAMED_558;

typedef enum
{
  OsPagesPerMemPage = 2,
} TAG_UNNAMED_559, *PTAG_UNNAMED_559;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 2,
} TAG_UNNAMED_560, *PTAG_UNNAMED_560;

struct IDispError
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 29,
} TAG_UNNAMED_561, *PTAG_UNNAMED_561;

enum CostModelCombiner::CombineOption
{
  CombinePageSizes = 0,
  CombineEntryCounts = 1,
};

class CAutoBase<XEPackage0::XE_LiveTarget>
{
  /* 0x0000 */ class XEPackage0::XE_LiveTarget* m_pt;
}; /* size: 0x0008 */

enum XEPackage0::Messages
{
  XE_ENGINE_INIT = 0,
  XE_ENGINE_FINAL = 1,
  XE_CLIENT_INIT_START = 2,
  XE_CLIENT_INIT_FINISH = 3,
  XE_ENGINE_BUILD_MODULE_LIST = 4,
  XE_ENGINE_BUILD_MODULE_LIST_FINISH = 5,
  MSG_OOM = 6,
  CATTR_TYPE_MISMATCH = 7,
  CATTR_DUPLICATE = 8,
  CATTR_NONEXISTENT = 9,
  INVALID_TARGET_PARAM = 10,
  TARGET_CATTR_MISSING = 11,
  TARGET_CATTR_INVALID = 12,
  TARGET_CATTR_DUPLICATE = 13,
  FILE_TARGET_SYNCERROR = 14,
  FILE_TARGET_LOG_CREATE_FAIL = 15,
  FILE_TARGET_MD_SER_FAIL = 16,
  FILE_TARGET_LOG_WRITE_FAIL = 17,
  FILE_TARGET_LOG_DISK_FULL = 18,
  FILE_TARGET_LOG_OP_FAIL = 19,
  FILE_TARGET_CANONICALIZE_PATH = 20,
  ETW_TARGET_INSUFFICIENT_BUF = 21,
  ETW_TARGET_INVALID_PATH = 22,
  ETW_OS_ERROR = 23,
  ETW_NAME_IN_USE = 24,
  ETW_ACCESS_DENIED = 25,
  ETW_BAD_X0_NAME = 26,
  ETW_NO_X0 = 27,
  HISTOGRAM_INVALID_FIELD = 28,
  HISTOGRAM_INVALID_ACTION = 29,
  HISTOGRAM_INVALID_FILTER = 30,
  HISTOGRAM_INVALID_SRC = 31,
  HISTOGRAM_INVALID_SLOTS = 32,
  HISTOGRAM_EVENT_REQUIRED = 33,
  PAIRING_NAME_TOO_BIG = 34,
  PAIRING_EVENT_NOT_FOUND = 35,
  PAIRING_COLUMN_NOT_FOUND = 36,
  PAIRING_ACTION_NOT_FOUND = 37,
  PAIRING_MISMATCH_NUMBER_COLUMN = 38,
  PAIRING_MISMATCH_NUMBER_ACTION = 39,
  PAIRING_MISMATCH_TYPE_COLUMN = 40,
  PAIRING_MISMATCH_TYPE_ACTION = 41,
  PAIRING_SAME_EVENT = 42,
  PAIRING_MISSING_ACTION = 43,
  CT_PKG_ADD_FAIL_LOG = 44,
  CT_PKG_ADD_FAIL = 45,
  RB_PKG_ADD_FAIL_LOG = 46,
  RB_PKG_ADD_FAIL = 47,
  RB_LIMIT_REQUIRED = 48,
  DB_ZERO_PARAM = 49,
  CX_PKG_ADD_FAIL = 50,
  CX_TRANSFORMATION_PARSE_FAIL = 51,
  CX_PKG_ADD_FAIL_LOG = 52,
  CX_TARGET_BAD_PATH = 53,
  CX_TARGET_OPEN_FAILURE = 54,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 72,
} TAG_UNNAMED_562, *PTAG_UNNAMED_562;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_563, *PTAG_UNNAMED_563;

enum resource_notification
{
  RESOURCE_NOINFO = 0,
  RESOURCE_MEMPHYSICAL_HIGH = 1,
  RESOURCE_MEMPHYSICAL_LOW = 2,
  RESOURCE_MEM_STEADY = 4,
  RESOURCE_MEMVIRTUAL_LOW = 8,
};

struct IWbemEventProvider
{
}; /* size: 0x0008 */

typedef struct _UNIVERSAL_NAME_INFOA
{
  /* 0x0000 */ char* lpUniversalName;
} UNIVERSAL_NAME_INFOA, *PUNIVERSAL_NAME_INFOA; /* size: 0x0008 */

enum CMallocSpy::SpyResult
{
  DetailedInfoRetrieved = 0,
  DetailedInfoNone = 1,
  DetailedInfoAV = 2,
};

struct SERVICE_TRIGGER_CUSTOM_STATE_ID
{
  /* 0x0000 */ unsigned long Data[2];
}; /* size: 0x0008 */

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
{
  union
  {
    union
    {
      /* 0x0000 */ struct SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
      struct
      {
        /* 0x0000 */ unsigned long DataOffset;
        /* 0x0004 */ unsigned char Data[1];
        /* 0x0005 */ char __PADDING__[3];
      } /* size: 0x0008 */ s;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *PSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM; /* size: 0x0008 */

typedef enum
{
  log_block_idIdx = 0,
  log_block_sizeIdx = 1,
  log_block_acknowledgment_sequenceIdx = 2,
  modeIdx = 3,
  database_replica_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_564, *PTAG_UNNAMED_564;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_565, *PTAG_UNNAMED_565;

enum UMSWorkerState
{
  WorkerStateNone = 0,
  WorkerYielded = 1,
  WorkerStateUMSRunnable = 2,
  WorkerStateUMSBlocked = 3,
  WorkerStateUMSRunning = 4,
  WorkerStateUMSIdle = 5,
  WorkerStateUMSExitingIdle = 6,
  WorkerStateUMSSwitchFailed = 7,
  WorkerStateUMSRunnable2 = 8,
  WorkerStateUMSRunnable3 = 9,
};

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_566, *PTAG_UNNAMED_566;

enum XeSosPkg::LargeCacheEntryState
{
  ACTUAL = 0,
  SIMULATED = 1,
  HISTORY = 2,
  DESTROYED = 3,
};

struct tagPROPBAG2
{
  /* 0x0000 */ unsigned long dwType;
  /* 0x0004 */ unsigned short vt;
  /* 0x0006 */ unsigned short cfType;
  /* 0x0008 */ unsigned long dwHint;
  /* 0x000c */ long Padding_209;
  /* 0x0010 */ wchar_t* pstrName;
  /* 0x0018 */ struct _GUID clsid;
}; /* size: 0x0028 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_567, *PTAG_UNNAMED_567;

struct IPersist
{
}; /* size: 0x0008 */

struct tagMENUBARINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcBar;
  /* 0x0014 */ long Padding_210;
  /* 0x0018 */ struct HMENU__* hMenu;
  /* 0x0020 */ struct HWND__* hwndMenu;
  struct /* bitfield */
  {
    /* 0x0028 */ int fBarFocused : 1; /* bit position: 0 */
    /* 0x0028 */ int fFocused : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

typedef struct _SYSTEM_POWER_STATUS
{
  /* 0x0000 */ unsigned char ACLineStatus;
  /* 0x0001 */ unsigned char BatteryFlag;
  /* 0x0002 */ unsigned char BatteryLifePercent;
  /* 0x0003 */ unsigned char Reserved1;
  /* 0x0004 */ unsigned long BatteryLifeTime;
  /* 0x0008 */ unsigned long BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *PSYSTEM_POWER_STATUS; /* size: 0x000c */

typedef enum
{
  fail_locationIdx = 0,
  LastField = 1,
} TAG_UNNAMED_568, *PTAG_UNNAMED_568;

struct tagOleMenuGroupWidths
{
  /* 0x0000 */ long width[6];
}; /* size: 0x0018 */

enum SOS_EVENT_TYPE
{
  EVENT_UNINITIALIZED = 0,
  EVENT_AUTORESET = 1,
  EVENT_MANUALRESET = 2,
};

enum SOS_TIMERRESULT
{
  SOS_TIMER_CONTINUE = 0,
  SOS_TIMER_END = 1,
  SOS_TIMER_RESCHEDULE = 2,
  SOS_TIMER_IDLE = 3,
  SOS_TIMER_IDLE_NOW = 4,
};

struct tagRAWMOUSE
{
  /* 0x0000 */ unsigned short usFlags;
  /* 0x0002 */ char Padding_211[2];
  union
  {
    /* 0x0004 */ unsigned long ulButtons;
    struct
    {
      /* 0x0004 */ unsigned short usButtonFlags;
      /* 0x0006 */ unsigned short usButtonData;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ulRawButtons;
  /* 0x000c */ long lLastX;
  /* 0x0010 */ long lLastY;
  /* 0x0014 */ unsigned long ulExtraInformation;
}; /* size: 0x0018 */

struct tagRAWKEYBOARD
{
  /* 0x0000 */ unsigned short MakeCode;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short Reserved;
  /* 0x0006 */ unsigned short VKey;
  /* 0x0008 */ unsigned int Message;
  /* 0x000c */ unsigned long ExtraInformation;
}; /* size: 0x0010 */

struct tagRAWHID
{
  /* 0x0000 */ unsigned long dwSizeHid;
  /* 0x0004 */ unsigned long dwCount;
  /* 0x0008 */ unsigned char bRawData[1];
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

typedef enum
{
  rowset_idIdx = 0,
  allocation_unit_idIdx = 1,
  database_idIdx = 2,
  filegroup_idIdx = 3,
  event_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_569, *PTAG_UNNAMED_569;

class DmpPointer<unsigned __int64>
{
  /* 0x0000 */ unsigned __int64* m_pRaw;
}; /* size: 0x0008 */

enum Worker::SuspendExpectation
{
  WillNotSuspend = 0,
  WillDefinitelySuspend = 1,
  MaySuspend = 2,
};

class XeSqlPkg::metadata_cache_miss
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_212[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cache_typeOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  document_idIdx = 2,
  column_idIdx = 3,
  language_model_foundIdx = 4,
  language_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_570, *PTAG_UNNAMED_570;

typedef enum
{
  ListElementOffset = 40,
  NextPtrOffset = 8,
} TAG_UNNAMED_571, *PTAG_UNNAMED_571;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 40,
} TAG_UNNAMED_572, *PTAG_UNNAMED_572;

typedef struct _WOW64_LDT_ENTRY
{
  /* 0x0000 */ unsigned short LimitLow;
  /* 0x0002 */ unsigned short BaseLow;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned char BaseMid;
        /* 0x0005 */ unsigned char Flags1;
        /* 0x0006 */ unsigned char Flags2;
        /* 0x0007 */ unsigned char BaseHi;
      } /* size: 0x0004 */ Bytes;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long BaseMid : 8; /* bit position: 0 */
          /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
          /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
          /* 0x0004 */ unsigned long Pres : 1; /* bit position: 15 */
          /* 0x0004 */ unsigned long LimitHi : 4; /* bit position: 16 */
          /* 0x0004 */ unsigned long Sys : 1; /* bit position: 20 */
          /* 0x0004 */ unsigned long Reserved_0 : 1; /* bit position: 21 */
          /* 0x0004 */ unsigned long Default_Big : 1; /* bit position: 22 */
          /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
          /* 0x0004 */ unsigned long BaseHi : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ Bits;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY; /* size: 0x0008 */

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY
{
  /* 0x0000 */ unsigned long Selector;
  /* 0x0004 */ struct _WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY; /* size: 0x000c */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_573, *PTAG_UNNAMED_573;

typedef enum
{
  source_database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  stateIdx = 3,
  nest_levelIdx = 4,
  line_numberIdx = 5,
  offsetIdx = 6,
  offset_endIdx = 7,
  object_nameIdx = 8,
  statementIdx = 9,
  LastField = 10,
} TAG_UNNAMED_574, *PTAG_UNNAMED_574;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_575, *PTAG_UNNAMED_575;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 13,
} TAG_UNNAMED_576, *PTAG_UNNAMED_576;

typedef enum
{
  SYSTHREAD_STATUS_WORKER_MICRO = 1,
  SYSTHREAD_STATUS_WORKER_MINI = 2,
  SYSTHREAD_PREEMPTIVE_AFFINITY = 4,
  SYSTHREAD_DOOM = 8,
  SYSTHREAD_SOS_STARTED = 16,
} TAG_UNNAMED_577, *PTAG_UNNAMED_577;

typedef enum
{
  acquisition_stateIdx = 0,
  LastField = 1,
} TAG_UNNAMED_578, *PTAG_UNNAMED_578;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_579, *PTAG_UNNAMED_579;

enum Worker::CallbackType
{
  CALLBACK_SUSPEND = 0,
  CALLBACK_RESUME = 1,
  CALLBACK_DONE = 2,
  CALLBACK_INSTANT_RESUME = 3,
  CALLBACK_LAST = 4,
};

typedef struct _SECURITY_ATTRIBUTES
{
  /* 0x0000 */ unsigned long nLength;
  /* 0x0004 */ long Padding_213;
  /* 0x0008 */ void* lpSecurityDescriptor;
  /* 0x0010 */ int bInheritHandle;
  /* 0x0014 */ long __PADDING__[1];
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES; /* size: 0x0018 */

typedef struct _tagBINDINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_214;
  /* 0x0008 */ wchar_t* szExtraInfo;
  /* 0x0010 */ struct tagSTGMEDIUM stgmedData;
  /* 0x0028 */ unsigned long grfBindInfoF;
  /* 0x002c */ unsigned long dwBindVerb;
  /* 0x0030 */ wchar_t* szCustomVerb;
  /* 0x0038 */ unsigned long cbstgmedData;
  /* 0x003c */ unsigned long dwOptions;
  /* 0x0040 */ unsigned long dwOptionsFlags;
  /* 0x0044 */ unsigned long dwCodePage;
  /* 0x0048 */ struct _SECURITY_ATTRIBUTES securityAttributes;
  /* 0x0060 */ struct _GUID iid;
  /* 0x0070 */ struct IUnknown* pUnk;
  /* 0x0078 */ unsigned long dwReserved;
  /* 0x007c */ long __PADDING__[1];
} tagBINDINFO, *PtagBINDINFO; /* size: 0x0080 */

class TSyncHashTable_EntryAccessor<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>
{
  /* 0x0000 */ class TSyncHashTableBase<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>::Bucket* const m_pbucket;
  /* 0x0008 */ const unsigned __int64 m_key;
}; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_580, *PTAG_UNNAMED_580;

typedef struct _ACTRL_ACCESS_ENTRY_LISTW
{
  /* 0x0000 */ unsigned long cEntries;
  /* 0x0004 */ long Padding_215;
  /* 0x0008 */ struct _ACTRL_ACCESS_ENTRYW* pAccessList;
} ACTRL_ACCESS_ENTRY_LISTW, *PACTRL_ACCESS_ENTRY_LISTW; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_581, *PTAG_UNNAMED_581;

typedef enum
{
  x_waitStatsHashSize = 16,
} TAG_UNNAMED_582, *PTAG_UNNAMED_582;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  termination_causeIdx = 2,
  last_completed_stepIdx = 3,
  LastField = 4,
} TAG_UNNAMED_583, *PTAG_UNNAMED_583;

typedef enum
{
  ListElementOffset = 3224,
  NextPtrOffset = 8,
} TAG_UNNAMED_584, *PTAG_UNNAMED_584;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_585, *PTAG_UNNAMED_585;

enum XeSqlPkg::lock_timeout_greater_than_0::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_586, *PTAG_UNNAMED_586;

typedef enum
{
  ArgCount = 4,
} TAG_UNNAMED_587, *PTAG_UNNAMED_587;

typedef struct _LOAD_ASDATA_TABLE
{
  /* 0x0000 */ void* Module;
  /* 0x0008 */ wchar_t* FilePath;
  /* 0x0010 */ unsigned __int64 Size;
  /* 0x0018 */ void* Handle;
  /* 0x0020 */ long RefCount;
  /* 0x0024 */ long Padding_216;
  /* 0x0028 */ struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
} LOAD_ASDATA_TABLE, *PLOAD_ASDATA_TABLE; /* size: 0x0030 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 41,
} TAG_UNNAMED_588, *PTAG_UNNAMED_588;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_589, *PTAG_UNNAMED_589;

typedef struct __vc_attributes::hookAttribute
{
  /* 0x0000 */ const char* event;
  /* 0x0008 */ const char* source;
  /* 0x0010 */ const char* handler;
  /* 0x0018 */ const char* receiver;
} _vc_attributes::hookAttribute, *P_vc_attributes::hookAttribute; /* size: 0x0020 */

struct SOS_DebugBreakHookMgr::Hook::Sequence
{
  /* 0x0000 */ unsigned char m_len;
  /* 0x0001 */ unsigned char m_seq[16];
}; /* size: 0x0011 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_590, *PTAG_UNNAMED_590;

typedef enum
{
  log_operationIdx = 0,
  rowset_idIdx = 1,
  text_pointer_timestampIdx = 2,
  text_pointer_file_idIdx = 3,
  text_pointer_page_idIdx = 4,
  text_pointer_slot_idIdx = 5,
  current_lsnIdx = 6,
  LastField = 7,
} TAG_UNNAMED_591, *PTAG_UNNAMED_591;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_592, *PTAG_UNNAMED_592;

class XEPackage0::XE_LiveWriter::LiveClientEntry
{
  /* 0x0000 */ class XEPackage0::XE_LiveWriter::LiveClientEntry* m_pNext;
  /* 0x0008 */ void* m_hClient;
  /* 0x0010 */ const struct XELiveTargetClientAPI* m_pLiveClientApi;
  /* 0x0018 */ unsigned int m_bufferCount;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 6,
  VldEddOffset = 3,
  BufSize = 69,
} TAG_UNNAMED_593, *PTAG_UNNAMED_593;

typedef enum
{
  modeIdx = 0,
  durationIdx = 1,
  file_handleIdx = 2,
  offsetIdx = 3,
  database_idIdx = 4,
  file_idIdx = 5,
  filegroup_idIdx = 6,
  sizeIdx = 7,
  pathIdx = 8,
  io_dataIdx = 9,
  LastField = 10,
} TAG_UNNAMED_594, *PTAG_UNNAMED_594;

typedef enum
{
  SYSTEMWIDE = 1,
  PROCESSWIDE = 2,
  POOLWIDE = 4,
} TAG_UNNAMED_595, *PTAG_UNNAMED_595;

typedef struct _NDR_CS_ROUTINES
{
  /* 0x0000 */ struct _NDR_CS_SIZE_CONVERT_ROUTINES* pSizeConvertRoutines;
  /* 0x0008 */ void** pTagGettingRoutines /* function */;
} NDR_CS_ROUTINES, *PNDR_CS_ROUTINES; /* size: 0x0010 */

class XeSqlPkg::broker_transmission_acksm_event_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_217[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

typedef enum
{
  BucketCount = 5,
  PageDescOffset = 8128,
  PageMask = -8192,
  FragmentDescSize = 128,
  AdditionalFragmentSize = 0x10000,
  UseNativeVirtualAlloc = 1,
  AllowAdditionalFragments = 1,
  NodeCount = 64,
  InvalidCpuId = -1,
  InvalidDescNo = -1,
  BlocksPerBucket = 32,
} TAG_UNNAMED_596, *PTAG_UNNAMED_596;

typedef struct _SYSTEM_SPECIAL_POOL_INFORMATION
{
  /* 0x0000 */ unsigned long PoolTag;
  /* 0x0004 */ unsigned long Flags;
} SYSTEM_SPECIAL_POOL_INFORMATION, *PSYSTEM_SPECIAL_POOL_INFORMATION; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 13,
} TAG_UNNAMED_597, *PTAG_UNNAMED_597;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_598, *PTAG_UNNAMED_598;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_599, *PTAG_UNNAMED_599;

enum SOS_DebugBreakHookMgr::HookPoint
{
  DBH_ExitProces = 0,
  DBH_ZwTerminateProcess = 1,
  DBH_Last = 2,
};

struct SOS_DebugBreakHookMgr::Hook
{
  /* 0x0000 */ enum SOS_DebugBreakHookMgr::HookPoint m_hookPoint;
  /* 0x0004 */ long Padding_218;
  /* 0x0008 */ const wchar_t* m_dllName;
  /* 0x0010 */ const char* m_funcName;
  /* 0x0018 */ struct SOS_DebugBreakHookMgr::Hook::Sequence m_prevSeq;
  /* 0x0029 */ char Padding_219[3];
  /* 0x002c */ unsigned int m_unhookCount;
}; /* size: 0x0030 */

struct SOS_DebugHookSLock
{
}; /* size: 0x0004 */

class SOS_DebugBreakHookMgr
{
  union
  {
    /* 0x0000 */ struct SOS_DebugBreakHookMgr::Hook sm_hooks[2];
    /* 0x0000 */ struct SOS_DebugHookSLock sm_locks[2];
  }; /* size: 0x0060 */
}; /* size: 0x0001 */

typedef enum
{
  ListElementOffset = 8,
} TAG_UNNAMED_600, *PTAG_UNNAMED_600;

typedef enum
{
  ListElementOffset = 24,
  NextPtrOffset = 8,
} TAG_UNNAMED_601, *PTAG_UNNAMED_601;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_602, *PTAG_UNNAMED_602;

enum ClockHand::CLOCKHAND_STATE
{
  SUSPENDED = 0,
  RUNNING = 1,
  LAST = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 33,
} TAG_UNNAMED_603, *PTAG_UNNAMED_603;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_604, *PTAG_UNNAMED_604;

struct IWbemUnboundObjectSink
{
}; /* size: 0x0008 */

enum ClockAlgorithm::CLOCK_HANDS
{
  HAND_EXTERNAL = 0,
  HAND_INTERNAL = 1,
  HAND_LAST = 2,
};

struct tagTEXTMETRICA
{
  /* 0x0000 */ long tmHeight;
  /* 0x0004 */ long tmAscent;
  /* 0x0008 */ long tmDescent;
  /* 0x000c */ long tmInternalLeading;
  /* 0x0010 */ long tmExternalLeading;
  /* 0x0014 */ long tmAveCharWidth;
  /* 0x0018 */ long tmMaxCharWidth;
  /* 0x001c */ long tmWeight;
  /* 0x0020 */ long tmOverhang;
  /* 0x0024 */ long tmDigitizedAspectX;
  /* 0x0028 */ long tmDigitizedAspectY;
  /* 0x002c */ unsigned char tmFirstChar;
  /* 0x002d */ unsigned char tmLastChar;
  /* 0x002e */ unsigned char tmDefaultChar;
  /* 0x002f */ unsigned char tmBreakChar;
  /* 0x0030 */ unsigned char tmItalic;
  /* 0x0031 */ unsigned char tmUnderlined;
  /* 0x0032 */ unsigned char tmStruckOut;
  /* 0x0033 */ unsigned char tmPitchAndFamily;
  /* 0x0034 */ unsigned char tmCharSet;
  /* 0x0035 */ char __PADDING__[3];
}; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_605, *PTAG_UNNAMED_605;

struct tagFILTERKEYS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long iWaitMSec;
  /* 0x000c */ unsigned long iDelayMSec;
  /* 0x0010 */ unsigned long iRepeatMSec;
  /* 0x0014 */ unsigned long iBounceMSec;
}; /* size: 0x0018 */

typedef enum
{
  WAITING_FORNEW_ROUND = 1,
  NEW_ROUND = 2,
} TAG_UNNAMED_606, *PTAG_UNNAMED_606;

struct tagMETAHEADER
{
  /* 0x0000 */ unsigned short mtType;
  /* 0x0002 */ unsigned short mtHeaderSize;
  /* 0x0004 */ unsigned short mtVersion;
  /* 0x0006 */ unsigned long mtSize;
  /* 0x000a */ unsigned short mtNoObjects;
  /* 0x000c */ unsigned long mtMaxRecord;
  /* 0x0010 */ unsigned short mtNoParameters;
}; /* size: 0x0012 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_607, *PTAG_UNNAMED_607;

typedef enum
{
  cpu_timeIdx = 0,
  logical_reads_pagesIdx = 1,
  logical_writes_pagesIdx = 2,
  physical_reads_pagesIdx = 3,
  active_worker_countIdx = 4,
  active_session_countIdx = 5,
  blocked_task_countIdx = 6,
  lck_wait_timeIdx = 7,
  page_io_latch_wait_timeIdx = 8,
  async_network_io_wait_timeIdx = 9,
  sos_scheduler_yield_wait_timeIdx = 10,
  writelog_wait_timeIdx = 11,
  repl_slow_secondary_throttle_wait_timeIdx = 12,
  repl_item_completion_wait_timeIdx = 13,
  repl_commit_ack_wait_timeIdx = 14,
  repl_rollback_ack_wait_timeIdx = 15,
  lck_wait_countIdx = 16,
  page_io_latch_wait_countIdx = 17,
  async_network_io_wait_countIdx = 18,
  sos_scheduler_yield_wait_countIdx = 19,
  writelog_wait_countIdx = 20,
  repl_slow_secondary_throttle_wait_countIdx = 21,
  repl_item_completion_wait_countIdx = 22,
  repl_commit_ack_wait_countIdx = 23,
  repl_rollback_ack_wait_countIdx = 24,
  cpu_time_scopedIdx = 25,
  logical_reads_pages_scopedIdx = 26,
  logical_writes_pages_scopedIdx = 27,
  physical_reads_pages_scopedIdx = 28,
  physical_reads_scopedIdx = 29,
  physical_writes_scopedIdx = 30,
  cpu_time_secondaryIdx = 31,
  physical_reads_secondaryIdx = 32,
  physical_writes_secondaryIdx = 33,
  page_io_latch_wait_time_scopedIdx = 34,
  async_network_io_wait_time_scopedIdx = 35,
  sos_scheduler_yield_wait_time_scopedIdx = 36,
  writelog_wait_time_scopedIdx = 37,
  repl_slow_secondary_throttle_wait_time_scopedIdx = 38,
  repl_item_completion_wait_time_scopedIdx = 39,
  repl_commit_ack_wait_time_scopedIdx = 40,
  repl_rollback_ack_wait_time_scopedIdx = 41,
  page_io_latch_wait_count_scopedIdx = 42,
  async_network_io_wait_count_scopedIdx = 43,
  sos_scheduler_yield_wait_count_scopedIdx = 44,
  writelog_wait_count_scopedIdx = 45,
  repl_slow_secondary_throttle_wait_count_scopedIdx = 46,
  repl_item_completion_wait_count_scopedIdx = 47,
  repl_commit_ack_wait_count_scopedIdx = 48,
  repl_rollback_ack_wait_count_scopedIdx = 49,
  resource_pool_idIdx = 50,
  replica_typeIdx = 51,
  app_nameIdx = 52,
  tablegroup_nameIdx = 53,
  low_keyIdx = 54,
  high_keyIdx = 55,
  LastField = 56,
} TAG_UNNAMED_608, *PTAG_UNNAMED_608;

enum SOSHOST_CACHESTORE_TYPE
{
  CACHESTORE_TEST = 0,
  CACHESTORE_OBJCP = 1,
  CACHESTORE_SQLCP = 2,
  CACHESTORE_OBJMXC = 3,
  CACHESTORE_SQLMXC = 4,
  CACHESTORE_PHDR = 5,
  CACHESTORE_XPROC = 6,
  CACHESTORE_TEMPTABLES = 7,
  CACHESTORE_HTTP = 8,
  CACHESTORE_HTTPCONCACHE = 9,
  CACHESTORE_SOAPSESSIONS = 10,
  CACHESTORE_NOTIF = 11,
  CACHESTORE_VIEWDEFINITIONS = 12,
  CACHESTORE_XMLDBTYPE = 13,
  CACHESTORE_XMLDBELEMENT = 14,
  CACHESTORE_XMLDBATTRIBUTE = 15,
  CACHESTORE_STACKFRAMES = 16,
  CACHESTORE_RESOURCEINVENTORY = 17,
  CACHESTORE_BROKERTBLACS = 18,
  CACHESTORE_BROKERKEK = 19,
  CACHESTORE_BROKERDSH = 20,
  CACHESTORE_BROKERUSERCERTLOOKUP = 21,
  CACHESTORE_BROKERRSB = 22,
  CACHESTORE_BROKERREADONLY = 23,
  CACHESTORE_BROKERTO = 24,
  CACHESTORE_EVENTS = 25,
  CACHESTORE_TOKENPERM = 26,
  CACHESTORE_SQLACCESS = 27,
  CACHESTORE_CLRPROC = 28,
  CACHESTORE_CLRUDTINFO = 29,
  CACHESTORE_ASSEMBLYBYTES = 30,
  CACHESTORE_SEHOBTCOLUMNATTRIBUTE = 31,
  CACHESTORE_SYSTEMROWSET = 32,
  CACHESTORE_SEREPL_ROWSET = 33,
  CACHESTORE_CONVPRI = 34,
  CACHESTORE_MATRIXRPC = 35,
  CACHESTORE_FULLTEXTSTOPLIST = 36,
  CACHESTORE_MATRIXDB_STVF_RPC = 37,
  CACHESTORE_MATRIXDB_WORKSPACE = 38,
  CACHESTORE_SEARCHPROPERTYLIST = 39,
  CACHESTORE_FILETABLETUNNELCACHE = 40,
  CACHESTORE_COLUMNSTOREOBJECTPOOL = 41,
  CACHESTORE_QDSCONTEXTSETTINGS = 42,
  CACHESTORE_QDSRUNTIMESTATS = 43,
  CACHESTORE_XML_SELECTIVE_DG = 44,
  CACHESTORE_LAST = 45,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 13,
} TAG_UNNAMED_609, *PTAG_UNNAMED_609;

struct IWrappedProtocol
{
}; /* size: 0x0008 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_610, *PTAG_UNNAMED_610;

typedef enum
{
  OomGracePeriodMs = 5000,
} TAG_UNNAMED_611, *PTAG_UNNAMED_611;

typedef struct _MEMORY_WORKING_SET_EX_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 ShareCount : 3; /* bit position: 1 */
    /* 0x0000 */ unsigned __int64 Win32Protection : 11; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 15 */
    /* 0x0000 */ unsigned __int64 Node : 6; /* bit position: 16 */
    /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 22 */
    /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 23 */
    /* 0x0000 */ unsigned __int64 Priority : 3; /* bit position: 24 */
    /* 0x0000 */ unsigned __int64 Reserved : 5; /* bit position: 27 */
    /* 0x0000 */ unsigned __int64 ReservedUlong : 32; /* bit position: 32 */
  }; /* bitfield */
} MEMORY_WORKING_SET_EX_BLOCK, *PMEMORY_WORKING_SET_EX_BLOCK; /* size: 0x0008 */

typedef enum
{
  PageSize = 8192,
  BlockSize = 64,
  TotalBlocksPerPage = 128,
  PhantomsPerPage = 1,
  RealBlocksPerPage = 127,
} TAG_UNNAMED_612, *PTAG_UNNAMED_612;

struct CLUS_NETNAME_VS_TOKEN_INFO
{
  /* 0x0000 */ unsigned long ProcessID;
  /* 0x0004 */ unsigned long DesiredAccess;
  /* 0x0008 */ int InheritHandle;
}; /* size: 0x000c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_613, *PTAG_UNNAMED_613;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_614, *PTAG_UNNAMED_614;

struct tagDELETEITEMSTRUCT
{
  /* 0x0000 */ unsigned int CtlType;
  /* 0x0004 */ unsigned int CtlID;
  /* 0x0008 */ unsigned int itemID;
  /* 0x000c */ long Padding_220;
  /* 0x0010 */ struct HWND__* hwndItem;
  /* 0x0018 */ unsigned __int64 itemData;
}; /* size: 0x0020 */

typedef enum
{
  BucketCount = 5,
  PageDescOffset = 8128,
  PageMask = -8192,
  FragmentDescSize = 128,
  AdditionalFragmentSize = 0x10000,
  UseNativeVirtualAlloc = 1,
  AllowAdditionalFragments = 1,
  NodeCount = 64,
  InvalidCpuId = -1,
  InvalidDescNo = -1,
  BlocksPerBucket = 32,
} TAG_UNNAMED_615, *PTAG_UNNAMED_615;

typedef struct _SERVICE_STATUS_PROCESS
{
  /* 0x0000 */ unsigned long dwServiceType;
  /* 0x0004 */ unsigned long dwCurrentState;
  /* 0x0008 */ unsigned long dwControlsAccepted;
  /* 0x000c */ unsigned long dwWin32ExitCode;
  /* 0x0010 */ unsigned long dwServiceSpecificExitCode;
  /* 0x0014 */ unsigned long dwCheckPoint;
  /* 0x0018 */ unsigned long dwWaitHint;
  /* 0x001c */ unsigned long dwProcessId;
  /* 0x0020 */ unsigned long dwServiceFlags;
} SERVICE_STATUS_PROCESS, *PSERVICE_STATUS_PROCESS; /* size: 0x0024 */

class XEPackage0::Wrapper_XE_StreamReader
{
  /* 0x0000 */ long Padding_221[2];
  /* 0x0008 */ class XE_StreamReader* m_reader;
}; /* size: 0x0010 */

enum DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc::PageDescState
{
  Active = 0,
  Full = 1,
  Partial = 2,
  Empty = 3,
};

class XeSqlPkg::query_cache_removal_statistics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_222[140];
      /* 0x0240 */ unsigned char m_buf[45];
    }; /* size: 0x003d */
    /* 0x0000 */ const int recompile_countOffset;
    /* 0x0000 */ const int compiled_object_typeOffset;
    /* 0x0000 */ const int compiled_object_idOffset;
    /* 0x0000 */ const int begin_offsetOffset;
    /* 0x0000 */ const int end_offsetOffset;
    /* 0x0000 */ const int plan_handleOffset;
    /* 0x0000 */ const int sql_handleOffset;
    /* 0x0000 */ const int execution_statisticsOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_616, *PTAG_UNNAMED_616;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 41,
} TAG_UNNAMED_617, *PTAG_UNNAMED_617;

class XE_AutoEnum
{
  /* 0x0000 */ void* m_h;
}; /* size: 0x0008 */

struct FlushRecord
{
  /* 0x0000 */ __int64 targetFlushTime;
  /* 0x0008 */ __int64 startFlushTime;
  /* 0x0010 */ __int64 endFlushTime;
  /* 0x0018 */ unsigned int numberOfTablesFlushed;
  /* 0x001c */ unsigned long prevFlushRecord;
  /* 0x0020 */ unsigned long mdRecord;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

enum MemoryClerkInternal::TYPE
{
  TYPE_MEMORYCLERK = 1,
  TYPE_CACHESTORE = 2,
  TYPE_USERSTORE = 3,
  TYPE_OBJECTSTORE = 4,
};

enum MemoryBrokerClerk::PeriodicAction
{
  BuildModel = 0,
  AdjustSize = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_618, *PTAG_UNNAMED_618;

typedef enum
{
  IsAbortable = 0,
} TAG_UNNAMED_619, *PTAG_UNNAMED_619;

struct tagVARIANT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short vt;
      /* 0x0002 */ unsigned short wReserved1;
      /* 0x0004 */ unsigned short wReserved2;
      /* 0x0006 */ unsigned short wReserved3;
      union
      {
        /* 0x0008 */ __int64 llVal;
        /* 0x0008 */ long lVal;
        /* 0x0008 */ unsigned char bVal;
        /* 0x0008 */ short iVal;
        /* 0x0008 */ float fltVal;
        /* 0x0008 */ double dblVal;
        /* 0x0008 */ short boolVal;
        /* 0x0008 */ long scode;
        /* 0x0008 */ union tagCY cyVal;
        /* 0x0008 */ double date;
        /* 0x0008 */ wchar_t* bstrVal;
        /* 0x0008 */ struct IUnknown* punkVal;
        /* 0x0008 */ struct IDispatch* pdispVal;
        /* 0x0008 */ struct tagSAFEARRAY* parray;
        /* 0x0008 */ unsigned char* pbVal;
        /* 0x0008 */ short* piVal;
        /* 0x0008 */ long* plVal;
        /* 0x0008 */ __int64* pllVal;
        /* 0x0008 */ float* pfltVal;
        /* 0x0008 */ double* pdblVal;
        /* 0x0008 */ short* pboolVal;
        /* 0x0008 */ long* pscode;
        /* 0x0008 */ union tagCY* pcyVal;
        /* 0x0008 */ double* pdate;
        /* 0x0008 */ wchar_t** pbstrVal;
        /* 0x0008 */ struct IUnknown** ppunkVal;
        /* 0x0008 */ struct IDispatch** ppdispVal;
        /* 0x0008 */ struct tagSAFEARRAY** pparray;
        /* 0x0008 */ struct tagVARIANT* pvarVal;
        /* 0x0008 */ void* byref;
        /* 0x0008 */ char cVal;
        /* 0x0008 */ unsigned short uiVal;
        /* 0x0008 */ unsigned long ulVal;
        /* 0x0008 */ unsigned __int64 ullVal;
        /* 0x0008 */ int intVal;
        /* 0x0008 */ unsigned int uintVal;
        /* 0x0008 */ struct tagDEC* pdecVal;
        /* 0x0008 */ char* pcVal;
        /* 0x0008 */ unsigned short* puiVal;
        /* 0x0008 */ unsigned long* pulVal;
        /* 0x0008 */ unsigned __int64* pullVal;
        /* 0x0008 */ int* pintVal;
        /* 0x0008 */ unsigned int* puintVal;
        struct
        {
          /* 0x0008 */ void* pvRecord;
          /* 0x0010 */ struct IRecordInfo* pRecInfo;
        }; /* size: 0x0010 */
      }; /* size: 0x0010 */
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0000 */ struct tagDEC decVal;
      /* 0x0010 */ long __PADDING__[2];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
}; /* size: 0x0018 */

class XeSqlPkg::database_segment_local_creation_end
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_223[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_620, *PTAG_UNNAMED_620;

typedef enum
{
  xact_idIdx = 0,
  transaction_time_stampIdx = 1,
  xact_for_idempotent_flushIdx = 2,
  LastField = 3,
} TAG_UNNAMED_621, *PTAG_UNNAMED_621;

typedef struct __vc_attributes::nonbrowsableAttribute
{
} _vc_attributes::nonbrowsableAttribute, *P_vc_attributes::nonbrowsableAttribute; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_622, *PTAG_UNNAMED_622;

enum SOSHOST_TIMERRESULT
{
  SOSHOST_TIMER_CONTINUE = 0,
  SOSHOST_TIMER_END = 1,
  SOSHOST_TIMER_RESCHEDULE = 2,
  SOSHOST_TIMER_IDLE = 3,
};

enum DBGSTRM_ERR_TYPE
{
  E_DBGSTRM_ERROR_NONE = 0,
  E_DBGSTRM_ERROR_OS = 1,
  E_DBGSTRM_ERROR_USER = 2,
  E_DBGSTRM_ERROR_OTHER = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 16,
} TAG_UNNAMED_623, *PTAG_UNNAMED_623;

typedef struct _XSAVE_FORMAT
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128A FloatRegisters[8];
  /* 0x00a0 */ struct _M128A XmmRegisters[16];
  /* 0x01a0 */ unsigned char Reserved4[96];
} XSAVE_FORMAT, *PXSAVE_FORMAT; /* size: 0x0200 */

typedef struct _XSAVE_AREA_HEADER
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned __int64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER; /* size: 0x0040 */

typedef struct _XSAVE_AREA
{
  /* 0x0000 */ struct _XSAVE_FORMAT LegacyState;
  /* 0x0200 */ struct _XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA; /* size: 0x0240 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 28,
} TAG_UNNAMED_624, *PTAG_UNNAMED_624;

typedef struct __vc_attributes::defaultvalueAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::defaultvalueAttribute, *P_vc_attributes::defaultvalueAttribute; /* size: 0x0008 */

enum SPINLOCK_ALGORITHM
{
  SPLA_SPIN_TO_ACQUIRE_MASK = 255,
  SPLA_GET_NO_WAIT_MASK = 0xffffff00,
  SPLA_SPIN_BACKOFF_MASK = 0xff0000,
  SPLA_SPIN_TO_ACQUIRE_OPTIMISTIC = 0,
  SPLA_SPIN_TO_ACQUIRE_EXPONENTIAL_BACKOFF = 1,
  SPLA_GET_NO_WAIT_DIRECT = 0,
  SPLA_GET_NOWAIT_TASTAS = 256,
  SPLA_DEFAULT = 1,
};

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_625, *PTAG_UNNAMED_625;

struct IUnknown
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  filegroup_idIdx = 3,
  is_log_fileIdx = 4,
  file_logical_nameIdx = 5,
  file_physical_nameIdx = 6,
  LastField = 7,
} TAG_UNNAMED_626, *PTAG_UNNAMED_626;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 19,
} TAG_UNNAMED_627, *PTAG_UNNAMED_627;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_628, *PTAG_UNNAMED_628;

typedef struct __vc_attributes::dualAttribute
{
} _vc_attributes::dualAttribute, *P_vc_attributes::dualAttribute; /* size: 0x0001 */

enum MemoryUtilizationEffects::Effects
{
  APPLY_LOWPM = 0,
  APPLY_HIGHPM = 1,
  REVERT_HIGHPM = 2,
  EFFECT_LAST = 3,
};

typedef struct _RPC_VERSION
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
} RPC_VERSION, *PRPC_VERSION; /* size: 0x0004 */

typedef struct _RPC_SYNTAX_IDENTIFIER
{
  /* 0x0000 */ struct _GUID SyntaxGUID;
  /* 0x0010 */ struct _RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, *PRPC_SYNTAX_IDENTIFIER; /* size: 0x0014 */

typedef struct _MIDL_SYNTAX_INFO
{
  /* 0x0000 */ struct _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  /* 0x0014 */ long Padding_224;
  /* 0x0018 */ struct RPC_DISPATCH_TABLE* DispatchTable;
  /* 0x0020 */ const unsigned char* ProcString;
  /* 0x0028 */ const unsigned short* FmtStringOffset;
  /* 0x0030 */ const unsigned char* TypeString;
  /* 0x0038 */ const void* aUserMarshalQuadruple;
  /* 0x0040 */ unsigned __int64 pReserved1;
  /* 0x0048 */ unsigned __int64 pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO; /* size: 0x0050 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 37,
} TAG_UNNAMED_629, *PTAG_UNNAMED_629;

class SinglyLinkedListBase
{
}; /* size: 0x0008 */

class SOS_StateProtectors<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

enum MemoryUtilizationEffects::UtilizationState
{
  EFFECT_ON = 0,
  EFFECT_OFF = 1,
  EFFECT_IGNORE = 2,
  EFFECT_LASTSTATE = 3,
};

class CMemThread<CMemProc>
{
  /* 0x0000 */ long Padding_225[34];
  /* 0x0088 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x0100 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0128 */

enum MemoryUtilizationEffects::Effect::UpdateResult
{
  NoChange = 0,
  Change = 1,
};

typedef struct _NTFS_STATISTICS
{
  /* 0x0000 */ unsigned long LogFileFullExceptions;
  /* 0x0004 */ unsigned long OtherExceptions;
  /* 0x0008 */ unsigned long MftReads;
  /* 0x000c */ unsigned long MftReadBytes;
  /* 0x0010 */ unsigned long MftWrites;
  /* 0x0014 */ unsigned long MftWriteBytes;
  struct
  {
    /* 0x0018 */ unsigned short Write;
    /* 0x001a */ unsigned short Create;
    /* 0x001c */ unsigned short SetInfo;
    /* 0x001e */ unsigned short Flush;
  } /* size: 0x0008 */ MftWritesUserLevel;
  /* 0x0020 */ unsigned short MftWritesFlushForLogFileFull;
  /* 0x0022 */ unsigned short MftWritesLazyWriter;
  /* 0x0024 */ unsigned short MftWritesUserRequest;
  /* 0x0026 */ char Padding_226[2];
  /* 0x0028 */ unsigned long Mft2Writes;
  /* 0x002c */ unsigned long Mft2WriteBytes;
  struct
  {
    /* 0x0030 */ unsigned short Write;
    /* 0x0032 */ unsigned short Create;
    /* 0x0034 */ unsigned short SetInfo;
    /* 0x0036 */ unsigned short Flush;
  } /* size: 0x0008 */ Mft2WritesUserLevel;
  /* 0x0038 */ unsigned short Mft2WritesFlushForLogFileFull;
  /* 0x003a */ unsigned short Mft2WritesLazyWriter;
  /* 0x003c */ unsigned short Mft2WritesUserRequest;
  /* 0x003e */ char Padding_227[2];
  /* 0x0040 */ unsigned long RootIndexReads;
  /* 0x0044 */ unsigned long RootIndexReadBytes;
  /* 0x0048 */ unsigned long RootIndexWrites;
  /* 0x004c */ unsigned long RootIndexWriteBytes;
  /* 0x0050 */ unsigned long BitmapReads;
  /* 0x0054 */ unsigned long BitmapReadBytes;
  /* 0x0058 */ unsigned long BitmapWrites;
  /* 0x005c */ unsigned long BitmapWriteBytes;
  /* 0x0060 */ unsigned short BitmapWritesFlushForLogFileFull;
  /* 0x0062 */ unsigned short BitmapWritesLazyWriter;
  /* 0x0064 */ unsigned short BitmapWritesUserRequest;
  struct
  {
    /* 0x0066 */ unsigned short Write;
    /* 0x0068 */ unsigned short Create;
    /* 0x006a */ unsigned short SetInfo;
  } /* size: 0x0006 */ BitmapWritesUserLevel;
  /* 0x006c */ unsigned long MftBitmapReads;
  /* 0x0070 */ unsigned long MftBitmapReadBytes;
  /* 0x0074 */ unsigned long MftBitmapWrites;
  /* 0x0078 */ unsigned long MftBitmapWriteBytes;
  /* 0x007c */ unsigned short MftBitmapWritesFlushForLogFileFull;
  /* 0x007e */ unsigned short MftBitmapWritesLazyWriter;
  /* 0x0080 */ unsigned short MftBitmapWritesUserRequest;
  struct
  {
    /* 0x0082 */ unsigned short Write;
    /* 0x0084 */ unsigned short Create;
    /* 0x0086 */ unsigned short SetInfo;
    /* 0x0088 */ unsigned short Flush;
  } /* size: 0x0008 */ MftBitmapWritesUserLevel;
  /* 0x008a */ char Padding_228[2];
  /* 0x008c */ unsigned long UserIndexReads;
  /* 0x0090 */ unsigned long UserIndexReadBytes;
  /* 0x0094 */ unsigned long UserIndexWrites;
  /* 0x0098 */ unsigned long UserIndexWriteBytes;
  /* 0x009c */ unsigned long LogFileReads;
  /* 0x00a0 */ unsigned long LogFileReadBytes;
  /* 0x00a4 */ unsigned long LogFileWrites;
  /* 0x00a8 */ unsigned long LogFileWriteBytes;
  struct
  {
    /* 0x00ac */ unsigned long Calls;
    /* 0x00b0 */ unsigned long Clusters;
    /* 0x00b4 */ unsigned long Hints;
    /* 0x00b8 */ unsigned long RunsReturned;
    /* 0x00bc */ unsigned long HintsHonored;
    /* 0x00c0 */ unsigned long HintsClusters;
    /* 0x00c4 */ unsigned long Cache;
    /* 0x00c8 */ unsigned long CacheClusters;
    /* 0x00cc */ unsigned long CacheMiss;
    /* 0x00d0 */ unsigned long CacheMissClusters;
  } /* size: 0x0028 */ Allocate;
} NTFS_STATISTICS, *PNTFS_STATISTICS; /* size: 0x00d4 */

typedef enum
{
  remote_server_idIdx = 0,
  user_idIdx = 1,
  nt_user_idIdx = 2,
  provider_string_openrowsetIdx = 3,
  datasource_openrowsetIdx = 4,
  location_openrowsetIdx = 5,
  catalog_openrowsetIdx = 6,
  LastField = 7,
} TAG_UNNAMED_630, *PTAG_UNNAMED_630;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_631, *PTAG_UNNAMED_631;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_632, *PTAG_UNNAMED_632;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_633, *PTAG_UNNAMED_633;

struct XE_ConfigCrc
{
  /* 0x0000 */ long Padding_229[2];
  /* 0x0008 */ wchar_t m_sessionName[256];
  /* 0x0208 */ unsigned long m_crc;
  /* 0x020c */ long __PADDING__[1];
}; /* size: 0x0210 */

typedef enum
{
  error_numberIdx = 0,
  directory_pathIdx = 1,
  LastField = 2,
} TAG_UNNAMED_634, *PTAG_UNNAMED_634;

typedef enum
{
  epochIdx = 0,
  csnIdx = 1,
  forwarder_epochIdx = 2,
  forwarder_csnIdx = 3,
  copied_bytesIdx = 4,
  remote_versionIdx = 5,
  remote_portIdx = 6,
  remote_cluster_nameIdx = 7,
  remote_server_nameIdx = 8,
  remote_app_nameIdx = 9,
  remote_table_group_nameIdx = 10,
  remote_low_keyIdx = 11,
  remote_high_keyIdx = 12,
  LastField = 13,
} TAG_UNNAMED_635, *PTAG_UNNAMED_635;

typedef enum
{
  cpu_ticksIdx = 0,
  inst_retiredIdx = 1,
  thread_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_636, *PTAG_UNNAMED_636;

enum SOS_Scheduler::IOType
{
  DiskIO = 0,
  NetworkIO = 1,
  LastIO = 2,
};

enum XeSqlPkg::commit_tran_completed::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_637, *PTAG_UNNAMED_637;

class XE_PackageEnumerator
{
  /* 0x0000 */ void* m_packageEnum;
  /* 0x0008 */ void* m_packagesHolder;
  /* 0x0010 */ void* m_hPackage;
  /* 0x0018 */ const struct XEPackageMetadata* m_pMetadata;
}; /* size: 0x0020 */

enum SOS_Scheduler::Transition
{
  Resuming = 0,
  InstantResuming = 1,
  Suspending = 2,
  SwitchToPreemptive = 3,
  SwitchToNonPreemptive = 4,
  Attach = 5,
  Detach = 6,
};

typedef enum
{
  startlsnIdx = 0,
  serepllsnIdx = 1,
  LastField = 2,
} TAG_UNNAMED_638, *PTAG_UNNAMED_638;

typedef struct _currencyfmtA
{
  /* 0x0000 */ unsigned int NumDigits;
  /* 0x0004 */ unsigned int LeadingZero;
  /* 0x0008 */ unsigned int Grouping;
  /* 0x000c */ long Padding_230;
  /* 0x0010 */ char* lpDecimalSep;
  /* 0x0018 */ char* lpThousandSep;
  /* 0x0020 */ unsigned int NegativeOrder;
  /* 0x0024 */ unsigned int PositiveOrder;
  /* 0x0028 */ char* lpCurrencySymbol;
} currencyfmtA, *PcurrencyfmtA; /* size: 0x0030 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_639, *PTAG_UNNAMED_639;

typedef struct _NETRESOURCEW
{
  /* 0x0000 */ unsigned long dwScope;
  /* 0x0004 */ unsigned long dwType;
  /* 0x0008 */ unsigned long dwDisplayType;
  /* 0x000c */ unsigned long dwUsage;
  /* 0x0010 */ wchar_t* lpLocalName;
  /* 0x0018 */ wchar_t* lpRemoteName;
  /* 0x0020 */ wchar_t* lpComment;
  /* 0x0028 */ wchar_t* lpProvider;
} NETRESOURCEW, *PNETRESOURCEW; /* size: 0x0030 */

class FunctionCallBinder_1<void,void (__cdecl*)(SOSHost_IOCompRequest *),SOSHost_IOCompRequest *>
{
  /* 0x0000 */ void* m_f /* function */;
  /* 0x0008 */ class SOSHost_IOCompRequest* m_p1;
}; /* size: 0x0010 */

enum IOQueue::IOCheck
{
  Fast = 0,
  All = 1,
  Last = 2,
};

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>
{
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 24,
  NVld = 1,
  VldEddOffset = 22,
  BufSize = 164,
} TAG_UNNAMED_640, *PTAG_UNNAMED_640;

typedef enum
{
  database_idIdx = 0,
  page_addressIdx = 1,
  file_idIdx = 2,
  page_idIdx = 3,
  dirty_pageIdx = 4,
  database_nameIdx = 5,
  file_pathIdx = 6,
  LastField = 7,
} TAG_UNNAMED_641, *PTAG_UNNAMED_641;

typedef enum
{
  has_been_sentIdx = 0,
  log_block_idIdx = 1,
  log_block_sizeIdx = 2,
  log_buffer_sizeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_642, *PTAG_UNNAMED_642;

struct CXFileWriterStats
{
  /* 0x0000 */ unsigned __int64 ioStalls;
  /* 0x0008 */ unsigned __int64 ioStallTotalWaitTime;
  /* 0x0010 */ unsigned __int64 totalFlushes;
  /* 0x0018 */ unsigned __int64 dirFlushCount;
  /* 0x0020 */ unsigned __int64 dirFlushWaitCount;
  /* 0x0028 */ unsigned __int64 compressionRatio;
  /* 0x0030 */ unsigned __int64 buffersNotCompressable;
  /* 0x0038 */ unsigned __int64 nativeFlushTotalTime;
  /* 0x0040 */ unsigned __int64 syncWrites;
  /* 0x0048 */ unsigned __int64 compressionTime;
  /* 0x0050 */ unsigned __int64 compressionCount;
  /* 0x0058 */ unsigned __int64 maxCompressionTime;
  /* 0x0060 */ unsigned __int64 compressedSizeWritten;
  /* 0x0068 */ unsigned __int64 uncompressedSizeWritten;
  /* 0x0070 */ unsigned __int64 fragmentationLoss;
}; /* size: 0x0078 */

class XE_CXFileWriter
{
  /* 0x0000 */ long Padding_231[146];
  /* 0x0248 */ void* m_fileHandle;
  /* 0x0250 */ unsigned long m_openFlags;
  /* 0x0254 */ long Padding_232;
  /* 0x0258 */ struct CXFilePage* m_pageArray;
  /* 0x0260 */ unsigned int m_cachedPagesCount;
  /* 0x0264 */ unsigned int m_curPage;
  /* 0x0268 */ unsigned int m_curDirectoryEntry;
  /* 0x026c */ unsigned int m_lastWrittenEntry;
  /* 0x0270 */ unsigned int m_currentlyWritingTillThisEntry;
  /* 0x0274 */ long Padding_233;
  /* 0x0278 */ struct _OVERLAPPED m_dirOverlapped;
  /* 0x0298 */ unsigned __int64 m_maxFileSize;
  /* 0x02a0 */ void* m_ioEvent;
  /* 0x02a8 */ int m_timeToSwitchFile;
  /* 0x02ac */ long Padding_234;
  /* 0x02b0 */ unsigned __int64 m_initializedFileLength;
  /* 0x02b8 */ const struct XPRESS9_ENCODER_T* m_pCompressor;
  /* 0x02c0 */ unsigned long m_compressionLevel;
  /* 0x02c4 */ long Padding_235;
  /* 0x02c8 */ struct CXFileWriterStats m_stats;
  /* 0x0340 */ int m_abandoned;
  /* 0x0344 */ long Padding_236;
  /* 0x0348 */ class XE_ILogWriteMessageHandler* m_msgHandler;
}; /* size: 0x0350 */

struct IWinInetHttpInfo
{
}; /* size: 0x0008 */

class XeSqlPkg::buffer_pool_extension_pages_read
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_237[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int first_page_file_idOffset;
    /* 0x0000 */ const int first_page_idOffset;
    /* 0x0000 */ const int page_file_offsetOffset;
    /* 0x0000 */ const int numa_node_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

typedef struct _ACCESS_INFO_1
{
  /* 0x0000 */ wchar_t* acc1_resource_name;
  /* 0x0008 */ unsigned long acc1_attr;
  /* 0x000c */ unsigned long acc1_count;
} ACCESS_INFO_1, *PACCESS_INFO_1; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 12,
  NVld = 1,
  VldEddOffset = 10,
  BufSize = 48,
} TAG_UNNAMED_643, *PTAG_UNNAMED_643;

typedef enum
{
  task_addressIdx = 0,
  entry_pointIdx = 1,
  pending_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_644, *PTAG_UNNAMED_644;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 17,
} TAG_UNNAMED_645, *PTAG_UNNAMED_645;

typedef enum
{
  ListElementOffset = 40,
  NextPtrOffset = 8,
} TAG_UNNAMED_646, *PTAG_UNNAMED_646;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 32,
} TAG_UNNAMED_647, *PTAG_UNNAMED_647;

enum XeSqlPkg::app_domain_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

enum XeSosPkg::memory_broker_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef struct _PROCESS_DISK_COUNTERS
{
  /* 0x0000 */ unsigned __int64 BytesRead;
  /* 0x0008 */ unsigned __int64 BytesWritten;
  /* 0x0010 */ unsigned __int64 ReadOperationCount;
  /* 0x0018 */ unsigned __int64 WriteOperationCount;
  /* 0x0020 */ unsigned __int64 FlushOperationCount;
} PROCESS_DISK_COUNTERS, *PPROCESS_DISK_COUNTERS; /* size: 0x0028 */

typedef struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION
{
  /* 0x0000 */ struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
  /* 0x0030 */ struct _IO_COUNTERS IoInfo;
  /* 0x0060 */ struct _PROCESS_DISK_COUNTERS DiskIoInfo;
  /* 0x0088 */ unsigned __int64 ContextSwitches;
  /* 0x0090 */ union _LARGE_INTEGER TotalCycleTime;
} JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION, *PJOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION; /* size: 0x0098 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 3,
  VldEddOffset = 9,
  BufSize = 96,
} TAG_UNNAMED_648, *PTAG_UNNAMED_648;

typedef enum
{
  _BUF_SIZE = 8,
} TAG_UNNAMED_649, *PTAG_UNNAMED_649;

struct tagMENUGETOBJECTINFO
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ unsigned int uPos;
  /* 0x0008 */ struct HMENU__* hmenu;
  /* 0x0010 */ void* riid;
  /* 0x0018 */ void* pvObj;
}; /* size: 0x0020 */

typedef enum
{
  ok = 0,
  partial = 1,
  error = 2,
  noconv = 3,
} TAG_UNNAMED_650, *PTAG_UNNAMED_650;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_651, *PTAG_UNNAMED_651;

enum XeSosPkg::scheduler_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

struct tagCAUL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_238;
  /* 0x0008 */ unsigned long* pElems;
}; /* size: 0x0010 */

typedef enum
{
  _ALLOC_MASK = 15,
} TAG_UNNAMED_652, *PTAG_UNNAMED_652;

class XeSqlPkg::security_authentication_perf_create_logintoken
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_239[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int create_logintoken_durationOffset;
    /* 0x0000 */ const int is_sql_authenticationOffset;
    /* 0x0000 */ const int is_cache_hitOffset;
    /* 0x0000 */ const int is_db_authOffset;
    /* 0x0000 */ const int is_publicOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_653, *PTAG_UNNAMED_653;

class XE_AutoP<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > >
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_654, *PTAG_UNNAMED_654;

struct std::is_error_condition_enum<enum std::errc::errc>
{
}; /* size: 0x0001 */

class XE_CustomizableAttributes
{
  /* 0x0000 */ unsigned short m_Count;
  /* 0x0002 */ char Padding_240[6];
  /* 0x0008 */ const struct XECustomizableAttribute* m_Attributes;
}; /* size: 0x0010 */

enum SOS_MemoryBroker::BrokerPressureType
{
  BrokerActive = 0,
  BrokerPassive = 1,
  BrokerLocalPressureOnly = 2,
};

class XE_LogSpecs::LogSpec
{
  /* 0x0000 */ unsigned int m_Affinity;
  /* 0x0004 */ wchar_t m_LogPath[260];
  /* 0x020c */ wchar_t m_LogName[260];
  /* 0x0414 */ wchar_t m_LogExtension[260];
  /* 0x061c */ unsigned int m_BytesPerSector;
}; /* size: 0x0620 */

typedef enum
{
  database_idIdx = 0,
  owner_rowsetIdx = 1,
  tracking_table_rowsetIdx = 2,
  secondary_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_655, *PTAG_UNNAMED_655;

struct IXTLRuntime
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_656, *PTAG_UNNAMED_656;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_657, *PTAG_UNNAMED_657;

typedef struct _FIXED
{
  /* 0x0000 */ unsigned short fract;
  /* 0x0002 */ short value;
} FIXED, *PFIXED; /* size: 0x0004 */

typedef struct _MAT2
{
  /* 0x0000 */ struct _FIXED eM11;
  /* 0x0004 */ struct _FIXED eM12;
  /* 0x0008 */ struct _FIXED eM21;
  /* 0x000c */ struct _FIXED eM22;
} MAT2, *PMAT2; /* size: 0x0010 */

typedef enum
{
  successIdx = 0,
  current_stateIdx = 1,
  target_stateIdx = 2,
  hadr_database_idIdx = 3,
  availability_replica_idIdx = 4,
  availability_group_resource_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_658, *PTAG_UNNAMED_658;

typedef struct __vc_attributes::atl::db_paramAttribute
{
  /* 0x0000 */ const char* ordinal;
  /* 0x0008 */ const char* paramtype;
  /* 0x0010 */ const char* dbtype;
  /* 0x0018 */ const char* precision;
  /* 0x0020 */ const char* scale;
  /* 0x0028 */ const char* status;
  /* 0x0030 */ const char* length;
} _vc_attributes::atl::db_paramAttribute, *P_vc_attributes::atl::db_paramAttribute; /* size: 0x0038 */

class DmpPointer<ExcHandler>
{
  /* 0x0000 */ class ExcHandler* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  task_addressIdx = 2,
  error_numberIdx = 3,
  severityIdx = 4,
  stateIdx = 5,
  user_definedIdx = 6,
  originIdx = 7,
  call_stackIdx = 8,
  LastField = 9,
} TAG_UNNAMED_659, *PTAG_UNNAMED_659;

class CAutoBase<TSinglyLinkedList<XE_ConfigCrc> >
{
  /* 0x0000 */ class TSinglyLinkedList<XE_ConfigCrc>* m_pt;
}; /* size: 0x0008 */

typedef struct _ACCESS_ALLOWED_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} ACCESS_ALLOWED_ACE, *PACCESS_ALLOWED_ACE; /* size: 0x000c */

struct IAdviseSink2
{
}; /* size: 0x0008 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  dialog_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_660, *PTAG_UNNAMED_660;

typedef enum
{
  _Openprot = 64,
} TAG_UNNAMED_661, *PTAG_UNNAMED_661;

typedef struct _OUTPUT_DEBUG_STRING_INFO
{
  /* 0x0000 */ char* lpDebugStringData;
  /* 0x0008 */ unsigned short fUnicode;
  /* 0x000a */ unsigned short nDebugStringLength;
  /* 0x000c */ long __PADDING__[1];
} OUTPUT_DEBUG_STRING_INFO, *POUTPUT_DEBUG_STRING_INFO; /* size: 0x0010 */

typedef enum
{
  new_timeoutIdx = 0,
  id_or_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_662, *PTAG_UNNAMED_662;

typedef struct __vc_attributes::atl::synchronizeAttribute
{
} _vc_attributes::atl::synchronizeAttribute, *P_vc_attributes::atl::synchronizeAttribute; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_663, *PTAG_UNNAMED_663;

enum HardwareCheckResult
{
  HardwareSupported = 0,
  CPUNotSupported = 1,
};

class Spinlock<28,19,1>
{
}; /* size: 0x0004 */

typedef struct _SERVICE_SID_INFO
{
  /* 0x0000 */ unsigned long dwServiceSidType;
} SERVICE_SID_INFO, *PSERVICE_SID_INFO; /* size: 0x0004 */

enum std::ios_base::event
{
  erase_event = 0,
  imbue_event = 1,
  copyfmt_event = 2,
};

class CMemPartitioned<CMemThread<CMemDbg<PageHeapMemObj> > >
{
  /* 0x0000 */ long Padding_241[310];
  /* 0x04d8 */ class IMemObj** m_partitionMemObj;
  /* 0x04e0 */ int m_numberOfPartitions;
  /* 0x04e4 */ enum PartitioningType m_partType;
  /* 0x04e8 */ enum AllocatorType m_allocatorType;
  /* 0x04ec */ long Padding_242;
  /* 0x04f0 */ __int64 m_cPages;
}; /* size: 0x04f8 */

typedef enum
{
  _MINSIZE = 32,
} TAG_UNNAMED_664, *PTAG_UNNAMED_664;

typedef enum
{
  ListElementOffset = 16,
} TAG_UNNAMED_665, *PTAG_UNNAMED_665;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 9,
} TAG_UNNAMED_666, *PTAG_UNNAMED_666;

enum XeSqlPkg::lock_cancel::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

enum UsedbPrintAccessErrorBehavior
{
  DefaultBehavior = 0,
  PrintMessages = 1,
  DontPrintMessages = 2,
};

typedef enum
{
  ListElementOffset = 16,
} TAG_UNNAMED_667, *PTAG_UNNAMED_667;

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_668, *PTAG_UNNAMED_668;

typedef struct _WKSTA_INFO_1054
{
  /* 0x0000 */ int wki1054_use_raw_read;
} WKSTA_INFO_1054, *PWKSTA_INFO_1054; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_669, *PTAG_UNNAMED_669;

struct IRowset
{
}; /* size: 0x0008 */

typedef enum
{
  statement_start_offsetIdx = 0,
  statement_end_offsetIdx = 1,
  source_brick_idIdx = 2,
  plan_handleIdx = 3,
  parent_plan_handleIdx = 4,
  LastField = 5,
} TAG_UNNAMED_670, *PTAG_UNNAMED_670;

class CAutoBase<XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > > >
{
  /* 0x0000 */ class XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > >* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  accessorIdx = 0,
  rowIdx = 1,
  LastField = 2,
} TAG_UNNAMED_671, *PTAG_UNNAMED_671;

enum SOS_CacheStoreBase::RemoveOptions
{
  NoRemoveOptions = 0,
  RemoveHistoryEntries = 1,
};

enum TCacheStore<CacheProbabilisticAlgorithm>::InitOption
{
  MakeVisible = 0,
  LeaveInvisible = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 44,
} TAG_UNNAMED_672, *PTAG_UNNAMED_672;

class std::tr1::_Ref_count_base
{
  /* 0x0000 */ long Padding_243[2];
  /* 0x0008 */ long _Uses;
  /* 0x000c */ long _Weaks;
}; /* size: 0x0010 */

typedef struct _MEMORY_WORKING_SET_BLOCK
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 ShareCount : 3; /* bit position: 5 */
    /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 Node : 3; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 VirtualPage : 52; /* bit position: 12 */
  }; /* bitfield */
} MEMORY_WORKING_SET_BLOCK, *PMEMORY_WORKING_SET_BLOCK; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 0,
  VldEddOffset = 16,
  BufSize = 66,
} TAG_UNNAMED_673, *PTAG_UNNAMED_673;

enum indicators_bits
{
  INDICATOR_MEMPHYSICAL_HIGH = 1,
  INDICATOR_MEMPHYSICAL_LOW = 2,
  INDICATOR_MEMVIRTUAL_LOW = 4,
};

typedef struct _ACL
{
  /* 0x0000 */ unsigned char AclRevision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short AclSize;
  /* 0x0004 */ unsigned short AceCount;
  /* 0x0006 */ unsigned short Sbz2;
} ACL, *PACL; /* size: 0x0008 */

class XeSqlPkg::query_driver_sending_activation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_244[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

enum SOS_ResourceManager::ReconfigureFailReason
{
  Unknown = 0,
  GroupInUse = 1,
  PoolInUse = 2,
};

class MemObjCache<CMemThread<CMemFixed> >
{
  /* 0x0000 */ long Padding_245[100];
  /* 0x0190 */ void* m_cacheEntryDescriptor;
  /* 0x0198 */ class CostInfo m_costInfo;
}; /* size: 0x01e0 */

enum SOS_ResourceManager::UnitOfFairness
{
  FairnessPerWorker = 0,
  FairnessPerGroup = 1,
  FairnessPerPool = 2,
};

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_674, *PTAG_UNNAMED_674;

typedef enum
{
  destination_idIdx = 0,
  eventIdx = 1,
  state_oldIdx = 2,
  state_newIdx = 3,
  stream_statusIdx = 4,
  connection_idIdx = 5,
  target_addressIdx = 6,
  LastField = 7,
} TAG_UNNAMED_675, *PTAG_UNNAMED_675;

struct IThumbnailExtractor
{
}; /* size: 0x0008 */

enum XeSqlPkg::sp_statement_completed::CustomizableSlots
{
  collect_object_nameSlot = 0,
  collect_statementSlot = 1,
};

struct tagEVENTMSG
{
  /* 0x0000 */ unsigned int message;
  /* 0x0004 */ unsigned int paramL;
  /* 0x0008 */ unsigned int paramH;
  /* 0x000c */ unsigned long time;
  /* 0x0010 */ struct HWND__* hwnd;
}; /* size: 0x0018 */

typedef enum
{
  phase_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_676, *PTAG_UNNAMED_676;

enum SOS_OS::enum_action
{
  ACTION_OFF = 0,
  ACTION_ON = 1,
  ACTION_DUMP = 2,
};

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_677, *PTAG_UNNAMED_677;

struct std::identity<std::istrstream>
{
}; /* size: 0x0001 */

struct tagCREATESTRUCTA
{
  /* 0x0000 */ void* lpCreateParams;
  /* 0x0008 */ struct HINSTANCE__* hInstance;
  /* 0x0010 */ struct HMENU__* hMenu;
  /* 0x0018 */ struct HWND__* hwndParent;
  /* 0x0020 */ int cy;
  /* 0x0024 */ int cx;
  /* 0x0028 */ int y;
  /* 0x002c */ int x;
  /* 0x0030 */ long style;
  /* 0x0034 */ long Padding_246;
  /* 0x0038 */ const char* lpszName;
  /* 0x0040 */ const char* lpszClass;
  /* 0x0048 */ unsigned long dwExStyle;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

typedef enum
{
  QUOTA_SOFT_REACHED = 1,
  QUOTA_HARD_REACHED = 2,
  CONSUMPTION_RATE_REQUIRES_UPDATES = 8,
} TAG_UNNAMED_678, *PTAG_UNNAMED_678;

typedef struct _IMAGE_DATA_DIRECTORY
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY; /* size: 0x0008 */

class AutoSpinlockHolder<257,1,1>;

struct IBinding
{
}; /* size: 0x0008 */

typedef enum
{
  BitIncrement = 2,
  SizeOfBitMapBlock = 64,
} TAG_UNNAMED_679, *PTAG_UNNAMED_679;

enum SQLDUMPER_FLAGS
{
  SQLDUMPER_DBGBREAK = 1,
  SQLDUMPER_NOMINIDUMP = 2,
  SQLDUMPER_VALIDATE_IMAGE = 4,
  SQLDUMPER_REFERENCED_MEMORY = 8,
  SQLDUMPER_ALL_MEMORY = 16,
  SQLDUMPER_DUMP_ALL_THREADS = 32,
  SQLDUMPER_MATCH_FILE_NAME = 64,
  SQLDUMPER_NO_LONGER_USED_2 = 128,
  SQLDUMPER_VERBOSE = 256,
  SQLDUMPER_WAIT_AT_EXIT = 512,
  SQLDUMPER_SEND_TO_WATSON = 1024,
  SQLDUMPER_DEFAULTFLAGS = 2048,
  SQLDUMPER_MAXIMUMDUMP = 4096,
  SQLDUMPER_DOUBLEDUMP = 8192,
  SQLDUMPER_FORCE_WATSON = 16384,
  SQLDUMPER_FILTERED = 0xffff8000,
  SQLDUMPER_CRITICALCLR = 0x10000,
  SQLDUMPER_NO_REGISTRY = 0x20000,
  SQLDUMPER_LOCAL_ONLY = 0x40000,
  SQLDUMPER_DELETE_FILES = 0x80000,
  SQLDUMPER_SHOW_UI = 0x100000,
  SQLDUMPER_FORCE_USERTHREAD = 0x200000,
  SQLDUMPER_MATCH_SIGNATURE_TIME = 0x400000,
  SQLDUMPER_FILTERED_DOUBLEDUMP = 0x800000,
};

enum DISPATCHERPOOL_TYPE
{
  DISP_POOL_TEST = 0,
  DISP_POOL_XE_ENGINE = 1,
  DISP_POOL_XE_SESSION = 2,
  DISP_POOL_BACKUP = 3,
  DVM_THREAD_POOL = 4,
  DVM_AGENT_THREAD_POOL = 5,
  DISP_POOL_RPC_ENGINE = 6,
  DISP_POOL_FSAGENT = 7,
  DISP_POOL_HADR = 8,
  SESSION_MGR_THREAD_POOL = 9,
  DISP_POOL_FFT_NSO = 10,
  DISP_POOL_XTP = 11,
  DISP_POOL_LAST = 12,
};

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_680, *PTAG_UNNAMED_680;

class MemObjCache<CMemDbg<CMemFixed> >
{
  /* 0x0000 */ long Padding_247[304];
  /* 0x04c0 */ void* m_cacheEntryDescriptor;
  /* 0x04c8 */ class CostInfo m_costInfo;
}; /* size: 0x0510 */

typedef enum
{
  ArgCount = 3,
} TAG_UNNAMED_681, *PTAG_UNNAMED_681;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_682, *PTAG_UNNAMED_682;

typedef struct _RPC_SECURITY_QOS_V2_A
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Capabilities;
  /* 0x0008 */ unsigned long IdentityTracking;
  /* 0x000c */ unsigned long ImpersonationType;
  /* 0x0010 */ unsigned long AdditionalSecurityInfoType;
  /* 0x0014 */ long Padding_248;
  union
  {
    /* 0x0018 */ struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
  } /* size: 0x0008 */ u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A; /* size: 0x0020 */

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_683, *PTAG_UNNAMED_683;

struct IXMLDOMNamedNodeMap
{
}; /* size: 0x0008 */

struct ISWbemQualifier
{
}; /* size: 0x0008 */

typedef struct _SINGLE_LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Next;
} SINGLE_LIST_ENTRY32, *PSINGLE_LIST_ENTRY32; /* size: 0x0004 */

typedef enum
{
  MaxBlocks = 32,
} TAG_UNNAMED_684, *PTAG_UNNAMED_684;

class XeSqlPkg::databases_data_file_size_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_249[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  in_clone_loopIdx = 0,
  use_local_rowsetIdx = 1,
  LastField = 2,
} TAG_UNNAMED_685, *PTAG_UNNAMED_685;

typedef enum
{
  database_idIdx = 0,
  commit_policyIdx = 1,
  commit_policy_targetIdx = 2,
  delayIdx = 3,
  group_idIdx = 4,
  replica_idIdx = 5,
  ag_database_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_686, *PTAG_UNNAMED_686;

typedef struct _REPARSE_GUID_DATA_BUFFER
{
  /* 0x0000 */ unsigned long ReparseTag;
  /* 0x0004 */ unsigned short ReparseDataLength;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ struct _GUID ReparseGuid;
  struct
  {
    /* 0x0018 */ unsigned char DataBuffer[1];
  } /* size: 0x0001 */ GenericReparseBuffer;
  /* 0x0019 */ char __PADDING__[3];
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER; /* size: 0x001c */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_687, *PTAG_UNNAMED_687;

enum SOS_Task::TASK_STATE
{
  PENDING = 0,
  RUNNABLE = 1,
  RUNNING = 2,
  SPINLOOP = 3,
  SUSPENDED = 4,
  DONE = 5,
  TASK_STATE_LAST = 6,
};

enum XeSqlPkg::lock_deadlock::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_688, *PTAG_UNNAMED_688;

class XE_ResolvedObjectXML<XEEvent>
{
}; /* size: 0x0020 */

typedef struct _PROCESSOR_NUMBER
{
  /* 0x0000 */ unsigned short Group;
  /* 0x0002 */ unsigned char Number;
  /* 0x0003 */ unsigned char Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER; /* size: 0x0004 */

typedef struct _ICONINFO
{
  /* 0x0000 */ int fIcon;
  /* 0x0004 */ unsigned long xHotspot;
  /* 0x0008 */ unsigned long yHotspot;
  /* 0x000c */ long Padding_250;
  /* 0x0010 */ struct HBITMAP__* hbmMask;
  /* 0x0018 */ struct HBITMAP__* hbmColor;
} ICONINFO, *PICONINFO; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_689, *PTAG_UNNAMED_689;

struct HPEN__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 7,
  VldEddOffset = 3,
  BufSize = 75,
} TAG_UNNAMED_690, *PTAG_UNNAMED_690;

enum TraceLine::OutputType
{
  OutputToErrorlog = 1,
  OutputToTrace = 2,
  AccumulateOutput = 4,
  AccumulateOutputNoNewline = 8,
};

typedef enum
{
  stateIdx = 0,
  LastField = 1,
} TAG_UNNAMED_691, *PTAG_UNNAMED_691;

enum CacheProbabilisticAlgorithm::ShouldEntryBeCachedOption
{
  INSERTION = 0,
  EVICTION_WITH_POLE = 1,
  EVICTION_NO_POLE = 2,
};

class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,1>,1>
{
  /* 0x0000 */ wchar_t m_buffer[1024];
  /* 0x0800 */ const wchar_t* m_comperand;
  /* 0x0808 */ unsigned int m_cbCompRemaining;
  /* 0x080c */ int m_result;
}; /* size: 0x0810 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 50,
} TAG_UNNAMED_692, *PTAG_UNNAMED_692;

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  eventIdx = 4,
  actionIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_693, *PTAG_UNNAMED_693;

enum ExternalCache::PressureAction
{
  PressureOff = 0,
  PressureOn = 1,
};

enum SchedulerMonitor::Track::WorkerUtilization
{
  Low = 0,
  Average = 1,
  High = 2,
};

class DmpListIterator<PageHeapPageInfo,8,40,SEList<PageHeapPageInfo,40>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

enum PageAllocator::QUOTA_CONTROLLER_ID
{
  SINGLE = 0,
  EMERGENCY = 1,
  LARGE = 2,
  RESERVATION = 3,
  LAST = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_694, *PTAG_UNNAMED_694;

typedef struct _wireSAFEARR_DISPATCH
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_251;
  /* 0x0008 */ struct IDispatch** apDispatch;
} wireSAFEARR_DISPATCH, *PwireSAFEARR_DISPATCH; /* size: 0x0010 */

enum XE_Session::ForEachListAction
{
  UNLINK = 0,
  LEAVE = 1,
};

typedef enum
{
  IoGovernanceEnabled = 1,
  IoStatsEnabled = 2,
} TAG_UNNAMED_695, *PTAG_UNNAMED_695;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 25,
} TAG_UNNAMED_696, *PTAG_UNNAMED_696;

class CAutoRg<unsigned int>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 12,
  NVld = 1,
  VldEddOffset = 10,
  BufSize = 66,
} TAG_UNNAMED_697, *PTAG_UNNAMED_697;

typedef struct _TOKEN_USER
{
  /* 0x0000 */ struct _SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER; /* size: 0x0010 */

enum SOS_MemoryTopLevelBlockAllocator::BlockState
{
  Free = 0,
  Committed = 1,
  Foreign = 2,
};

class Spinlock<194,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  cache_addressIdx = 0,
  descriptor_addressIdx = 1,
  user_data_addressIdx = 2,
  stateIdx = 3,
  size_in_pagesIdx = 4,
  time_to_generateIdx = 5,
  use_countIdx = 6,
  average_intervalIdx = 7,
  time_since_last_useIdx = 8,
  probability_of_reuseIdx = 9,
  old_valueIdx = 10,
  new_valueIdx = 11,
  LastField = 12,
} TAG_UNNAMED_698, *PTAG_UNNAMED_698;

struct OffRowActionData
{
  /* 0x0000 */ struct XERelativeObjectId actionRid;
  /* 0x0004 */ long Padding_252;
  union
  {
    /* 0x0008 */ unsigned long offRowStorage;
    /* 0x0008 */ unsigned __int64 value;
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_699, *PTAG_UNNAMED_699;

typedef enum
{
  database_idIdx = 0,
  root_idIdx = 1,
  transaction_idIdx = 2,
  file_pathIdx = 3,
  LastField = 4,
} TAG_UNNAMED_700, *PTAG_UNNAMED_700;

class SEList<XE_LogDeserializedPackage,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

enum SOS_MemoryModel
{
  MMUnknown = 0,
  MMLarge = 1,
  MMAwe = 2,
  MMConventional = 3,
};

typedef enum _ACCESS_MODE
{
  NOT_USED_ACCESS = 0,
  GRANT_ACCESS = 1,
  SET_ACCESS = 2,
  DENY_ACCESS = 3,
  REVOKE_ACCESS = 4,
  SET_AUDIT_SUCCESS = 5,
  SET_AUDIT_FAILURE = 6,
} ACCESS_MODE, *PACCESS_MODE;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_701, *PTAG_UNNAMED_701;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_702, *PTAG_UNNAMED_702;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_703, *PTAG_UNNAMED_703;

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_253;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0020 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_704, *PTAG_UNNAMED_704;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_705, *PTAG_UNNAMED_705;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 10,
  VldEddOffset = -1,
  BufSize = 80,
} TAG_UNNAMED_706, *PTAG_UNNAMED_706;

enum SOSHOST_CLIENTID
{
  SOSHOST_CLIENTID_DEFAULT = 0,
  SOSHOST_CLIENTID_TEST = 1,
  SOSHOST_CLIENTID_IMPPROV = 2,
  SOSHOST_CLIENTID_MSADCE = 3,
  SOSHOST_CLIENTID_MSADCF = 4,
  SOSHOST_CLIENTID_MSADCO = 5,
  SOSHOST_CLIENTID_MSADCS = 6,
  SOSHOST_CLIENTID_MSDAPRST = 7,
  SOSHOST_CLIENTID_MSDAREM = 8,
  SOSHOST_CLIENTID_MSADDS = 9,
  SOSHOST_CLIENTID_MSADO15 = 10,
  SOSHOST_CLIENTID_SQLOLEDB = 11,
  SOSHOST_CLIENTID_SQLXMLEX = 12,
  SOSHOST_CLIENTID_MSADRH15 = 13,
  SOSHOST_CLIENTID_MSADOX = 14,
  SOSHOST_CLIENTID_MSADOMD = 15,
  SOSHOST_CLIENTID_MSJRO = 16,
  SOSHOST_CLIENTID_MSDASQL = 17,
  SOSHOST_CLIENTID_MSDATL = 18,
  SOSHOST_CLIENTID_OLEDB32 = 19,
  SOSHOST_CLIENTID_ORACLEOLEB = 20,
  SOSHOST_CLIENTID_SQLISAPI = 21,
  SOSHOST_CLIENTID_CLIENTSNI = 22,
  SOSHOST_CLIENTID_SQLODBC = 23,
  SOSHOST_CLIENTID_MSDART = 24,
  SOSHOST_CLIENTID_SERVERSNI = 25,
  SOSHOST_CLIENTID_SQLNCLI = 26,
  SOSHOST_CLIENTID_MDAC_RESERVED_27 = 27,
  SOSHOST_CLIENTID_MDAC_RESERVED_28 = 28,
  SOSHOST_CLIENTID_MDAC_RESERVED_29 = 29,
  SOSHOST_CLIENTID_MDAC_RESERVED_30 = 30,
  SOSHOST_CLIENTID_MDAC_RESERVED_31 = 31,
  SOSHOST_CLIENTID_MDAC_RESERVED_32 = 32,
  SOSHOST_CLIENTID_MDAC_RESERVED_33 = 33,
  SOSHOST_CLIENTID_MDAC_RESERVED_34 = 34,
  SOSHOST_CLIENTID_MDAC_RESERVED_35 = 35,
  SOSHOST_CLIENTID_MDAC_RESERVED_36 = 36,
  SOSHOST_CLIENTID_MDAC_RESERVED_37 = 37,
  SOSHOST_CLIENTID_MDAC_RESERVED_38 = 38,
  SOSHOST_CLIENTID_MDAC_RESERVED_39 = 39,
  SOSHOST_CLIENTID_MDAC_RESERVED_40 = 40,
  SOSHOST_CLIENTID_MDAC_RESERVED_41 = 41,
  SOSHOST_CLIENTID_MDAC_RESERVED_42 = 42,
  SOSHOST_CLIENTID_MDAC_RESERVED_43 = 43,
  SOSHOST_CLIENTID_MDAC_RESERVED_44 = 44,
  SOSHOST_CLIENTID_MDAC_RESERVED_45 = 45,
  SOSHOST_CLIENTID_MDAC_RESERVED_46 = 46,
  SOSHOST_CLIENTID_MDAC_RESERVED_47 = 47,
  SOSHOST_CLIENTID_MDAC_RESERVED_48 = 48,
  SOSHOST_CLIENTID_MDAC_RESERVED_49 = 49,
  SOSHOST_CLIENTID_MDAC_RESERVED_50 = 50,
  SOSHOST_CLIENTID_MDAC_RESERVED_51 = 51,
  SOSHOST_CLIENTID_MDAC_RESERVED_52 = 52,
  SOSHOST_CLIENTID_MDAC_RESERVED_53 = 53,
  SOSHOST_CLIENTID_MDAC_RESERVED_54 = 54,
  SOSHOST_CLIENTID_MDAC_RESERVED_55 = 55,
  SOSHOST_CLIENTID_MDAC_RESERVED_56 = 56,
  SOSHOST_CLIENTID_MDAC_RESERVED_57 = 57,
  SOSHOST_CLIENTID_MDAC_RESERVED_58 = 58,
  SOSHOST_CLIENTID_MDAC_RESERVED_59 = 59,
  SOSHOST_CLIENTID_MDAC_RESERVED_60 = 60,
  SOSHOST_CLIENTID_MDAC_RESERVED_61 = 61,
  SOSHOST_CLIENTID_MDAC_RESERVED_62 = 62,
  SOSHOST_CLIENTID_MDAC_RESERVED_63 = 63,
  SOSHOST_CLIENTID_MDAC_RESERVED_64 = 64,
  SOSHOST_CLIENTID_SQLCLR = 65,
  SOSHOST_CLIENTID_SPATIAL = 66,
  SOSHOST_CLIENTID_XE = 67,
  SOSHOST_CLIENTID_LAST = 68,
};

struct ISWbemMethod
{
}; /* size: 0x0008 */

typedef enum _DMA_SPEED
{
  Compatible = 0,
  TypeA = 1,
  TypeB = 2,
  TypeC = 3,
  TypeF = 4,
  MaximumDmaSpeed = 5,
} DMA_SPEED, *PDMA_SPEED;

class TCallbackListBase<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >
{
}; /* size: 0x0010 */

enum SOS_Task::TASK_STATUS
{
  NONE = 0,
  DEADLOCK_VICTIM = 1,
  ABORT = 4,
  INVOLVED_IN_UNRESOLVABLE_DEADLOCK = 8,
  TASK_INTERRUPTED = 16,
  DEADLOCK_CTX_PRINTED = 0x400000,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_707, *PTAG_UNNAMED_707;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 4,
  VldEddOffset = 0,
  BufSize = 33,
} TAG_UNNAMED_708, *PTAG_UNNAMED_708;

enum SOS_Task::TASK_DEADLOCK_PRIORITY
{
  ALWAYS_CHOSEN_AS_VICTIM = 20,
  LIKELY_CHOSEN_AS_VICTIM = 10,
  NORMAL_PRIORITY = 0,
  UNLIKELY_CHOSEN_AS_VICTIM = -10,
  SYSTEMTASK_PRIORITY = -20,
  NEVER_CHOSEN_AS_VICTIM = -30,
  EDDLCKPRI_MINUS10 = -10,
  EDDLCKPRI_MINUS9 = -9,
  EDDLCKPRI_MINUS8 = -8,
  EDDLCKPRI_MINUS7 = -7,
  EDDLCKPRI_MINUS6 = -6,
  EDDLCKPRI_MINUS5 = -5,
  EDDLCKPRI_MINUS4 = -4,
  EDDLCKPRI_MINUS3 = -3,
  EDDLCKPRI_MINUS2 = -2,
  EDDLCKPRI_MINUS1 = -1,
  EDDLCKPRI_0 = 0,
  EDDLCKPRI_1 = 1,
  EDDLCKPRI_2 = 2,
  EDDLCKPRI_3 = 3,
  EDDLCKPRI_4 = 4,
  EDDLCKPRI_5 = 5,
  EDDLCKPRI_6 = 6,
  EDDLCKPRI_7 = 7,
  EDDLCKPRI_8 = 8,
  EDDLCKPRI_9 = 9,
  EDDLCKPRI_10 = 10,
};

struct tagDVTARGETDEVICE
{
  /* 0x0000 */ unsigned long tdSize;
  /* 0x0004 */ unsigned short tdDriverNameOffset;
  /* 0x0006 */ unsigned short tdDeviceNameOffset;
  /* 0x0008 */ unsigned short tdPortNameOffset;
  /* 0x000a */ unsigned short tdExtDevmodeOffset;
  /* 0x000c */ unsigned char tdData[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

typedef struct _numberfmtA
{
  /* 0x0000 */ unsigned int NumDigits;
  /* 0x0004 */ unsigned int LeadingZero;
  /* 0x0008 */ unsigned int Grouping;
  /* 0x000c */ long Padding_254;
  /* 0x0010 */ char* lpDecimalSep;
  /* 0x0018 */ char* lpThousandSep;
  /* 0x0020 */ unsigned int NegativeOrder;
  /* 0x0024 */ long __PADDING__[1];
} numberfmtA, *PnumberfmtA; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_709, *PTAG_UNNAMED_709;

class DmpPointer<CMemFixed>
{
  /* 0x0000 */ class CMemFixed* m_pRaw;
}; /* size: 0x0008 */

enum SOS_Task::TASK_QUEUE_STATE
{
  PENDING_QUEUE = 0,
  ACTIVE_QUEUE = 1,
  DONE_QUEUE = 2,
};

class XeSqlPkg::broker_transmission_deliverysm_event_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_255[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

typedef enum
{
  addressIdx = 0,
  modeIdx = 1,
  classIdx = 2,
  keep_countIdx = 3,
  shared_countIdx = 4,
  update_countIdx = 5,
  exclusive_countIdx = 6,
  destroy_countIdx = 7,
  has_waitersIdx = 8,
  is_superlatchIdx = 9,
  is_poisonedIdx = 10,
  database_idIdx = 11,
  file_idIdx = 12,
  page_idIdx = 13,
  LastField = 14,
} TAG_UNNAMED_710, *PTAG_UNNAMED_710;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 25,
} TAG_UNNAMED_711, *PTAG_UNNAMED_711;

struct IEnumUnknown
{
}; /* size: 0x0008 */

enum SOS_Task::TASK_ABORT_TYPE
{
  NO_ABORT_SET = 0,
  RESETTABLE_ABORT = 1,
  USER_ABORT = 2,
};

class XE_StreamCompare<char,XEPackage0::StringCompare<char,1>,1>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ const char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 0,
} TAG_UNNAMED_712, *PTAG_UNNAMED_712;

enum XeSqlPkg::sql_statement_starting::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 0,
  VldEddOffset = 10,
  BufSize = 74,
} TAG_UNNAMED_713, *PTAG_UNNAMED_713;

typedef struct __vc_attributes::helper_attributes::attributeAttribute
{
  union
  {
    /* 0x0000 */ const int All;
    /* 0x0000 */ const int Assembly;
    /* 0x0000 */ const int Class;
    /* 0x0000 */ const int Constructor;
    /* 0x0000 */ const int Delegate;
    /* 0x0000 */ const int Enum;
    /* 0x0000 */ const int Event;
    /* 0x0000 */ const int Field;
    /* 0x0000 */ const int GenericParameter;
    /* 0x0000 */ const int Interface;
    /* 0x0000 */ const int Method;
    /* 0x0000 */ const int Module;
    /* 0x0000 */ const int Parameter;
    /* 0x0000 */ const int Property;
    /* 0x0000 */ const int ReturnValue;
    /* 0x0000 */ const int Struct;
    /* 0x0000 */ int ValidOn;
  }; /* size: 0x0004 */
  /* 0x0004 */ BOOL AllowMultiple;
  /* 0x0005 */ BOOL Inherited;
  /* 0x0006 */ char __PADDING__[2];
} _vc_attributes::helper_attributes::attributeAttribute, *P_vc_attributes::helper_attributes::attributeAttribute; /* size: 0x0008 */

enum SOS_Task::enum_stack
{
  STACK_EX_UNWIND_RESERVATION = 0x10000,
  STACK_DEPTH = 0x200000,
  STACK_OS_PAGES = 8192,
  STACK_LAST_PAGE = 4096,
  STACK_MAXSIZE = 0x1ff000,
  STACK_DBGMINSIZE = 0x30000,
};

struct XE_SessionMgrSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 56,
} TAG_UNNAMED_714, *PTAG_UNNAMED_714;

enum DBCONSTRAINTTYPEENUM
{
  DBCONSTRAINTTYPE_UNIQUE = 0,
  DBCONSTRAINTTYPE_FOREIGNKEY = 1,
  DBCONSTRAINTTYPE_PRIMARYKEY = 2,
  DBCONSTRAINTTYPE_CHECK = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_715, *PTAG_UNNAMED_715;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_716, *PTAG_UNNAMED_716;

struct IAdviseSinkEx
{
}; /* size: 0x0008 */

typedef enum
{
  STACKS_SUPPORTED = 1,
} TAG_UNNAMED_717, *PTAG_UNNAMED_717;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_718, *PTAG_UNNAMED_718;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_719, *PTAG_UNNAMED_719;

struct tagCLIENTCREATESTRUCT
{
  /* 0x0000 */ void* hWindowMenu;
  /* 0x0008 */ unsigned int idFirstChild;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef struct __vc_attributes::transmit_asAttribute
{
  /* 0x0000 */ const char* xmit_type;
} _vc_attributes::transmit_asAttribute, *P_vc_attributes::transmit_asAttribute; /* size: 0x0008 */

enum RINGBUFFER_TYPE
{
  RING_BUFFER_RESOURCE_MONITOR = 0,
  RING_BUFFER_SCHEDULER = 1,
  RING_BUFFER_MEMORY_BROKER = 2,
  RING_BUFFER_MEMORY_BROKER_CLERKS = 3,
  RING_BUFFER_OOM = 4,
  RING_BUFFER_SPACEMGR_TRACE = 5,
  RING_BUFFER_EXCEPTION = 6,
  RING_BUFFER_CLRAPPDOMAIN = 7,
  RING_BUFFER_CLRHOSTTASK = 8,
  RING_BUFFER_BROKER_TRANSPORT = 9,
  RING_BUFFER_SCHEDULER_MONITOR = 10,
  RING_BUFFER_BACKEDOFF_SPINLOCKS = 11,
  RING_BUFFER_GUARDIAN_EVENTS = 12,
  RING_BUFFER_GUARDIAN_STATE_TRANSITIONS = 13,
  RING_BUFFER_GUARDIAN_DESCRIPTORS = 14,
  RING_BUFFER_ABR_TASK = 15,
  RING_BUFFER_ABR_IO_THROTTLER = 16,
  RING_BUFFER_SECURITY_ERROR = 17,
  RING_BUFFER_XE_BUFFER_STATE = 18,
  RING_BUFFER_XE_LOG = 19,
  RING_BUFFER_BLOCKED_PROCESS_REPORTS = 20,
  RING_BUFFER_CONNECTIVITY = 21,
  RING_BUFFER_NONYIELD_PROCESSTABLE = 22,
  RING_BUFFER_NONYIELD_THREADTABLE = 23,
  RING_BUFFER_MCI_MESSAGES = 24,
  RING_BUFFER_MATRIX_ERROR = 25,
  RING_BUFFER_HADRDBMGR_STATE = 26,
  RING_BUFFER_HADRDBMGR_API = 27,
  RING_BUFFER_HADRDBMGR_COMMIT = 28,
  RING_BUFFER_HOBT_SCHEMAMGR = 29,
  RING_BUFFER_HADR_TRANSPORT_STATE = 30,
  RING_BUFFER_METADATA_EVENT = 31,
  RING_BUFFER_PARTITIONS = 32,
  RINGBUFFER_LAST = 33,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 24,
} TAG_UNNAMED_720, *PTAG_UNNAMED_720;

struct tagEMRSETICMPROFILE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long dwFlags;
  /* 0x000c */ unsigned long cbName;
  /* 0x0010 */ unsigned long cbData;
  /* 0x0014 */ unsigned char Data[1];
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_721, *PTAG_UNNAMED_721;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_722, *PTAG_UNNAMED_722;

class AutoSpinlockHolder<154,3,1>;

struct tagEMRFORMAT
{
  /* 0x0000 */ unsigned long dSignature;
  /* 0x0004 */ unsigned long nVersion;
  /* 0x0008 */ unsigned long cbData;
  /* 0x000c */ unsigned long offData;
}; /* size: 0x0010 */

typedef enum
{
  NeedsZeroingMask = 1,
  NextPointerMask = -2,
} TAG_UNNAMED_723, *PTAG_UNNAMED_723;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 32,
} TAG_UNNAMED_724, *PTAG_UNNAMED_724;

class XE_IBufferWriter
{
}; /* size: 0x0008 */

enum XEPackage0::MinMaxType
{
  MMT_LT_MIN = 0,
  MMT_GT_MAX = 1,
};

struct IDataFilter
{
}; /* size: 0x0008 */

class Spinlock<178,3,1>
{
}; /* size: 0x0004 */

enum CACHE_ENTRY_CONTROL
{
  CACHE_ENTRY_COST_ON_USAGE = 1,
  CACHE_ENTRY_DEFER_COST = 2,
};

class XeSqlPkg::spatial_guess
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_256[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int compile_timeOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_725, *PTAG_UNNAMED_725;

class CAutoBase<XE_FileBufferEnum>
{
  /* 0x0000 */ class XE_FileBufferEnum* m_pt;
}; /* size: 0x0008 */

typedef struct _RTL_HEAP_INFORMATION
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned short EntryOverhead;
  /* 0x000e */ unsigned short CreatorBackTraceIndex;
  /* 0x0010 */ unsigned __int64 BytesAllocated;
  /* 0x0018 */ unsigned __int64 BytesCommitted;
  /* 0x0020 */ unsigned long NumberOfTags;
  /* 0x0024 */ unsigned long NumberOfEntries;
  /* 0x0028 */ unsigned long NumberOfPseudoTags;
  /* 0x002c */ unsigned long PseudoTagGranularity;
  /* 0x0030 */ unsigned long Reserved[5];
  /* 0x0044 */ long Padding_257;
  /* 0x0048 */ struct _RTL_HEAP_TAG* Tags;
  /* 0x0050 */ struct _RTL_HEAP_ENTRY* Entries;
} RTL_HEAP_INFORMATION, *PRTL_HEAP_INFORMATION; /* size: 0x0058 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_726, *PTAG_UNNAMED_726;

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_727, *PTAG_UNNAMED_727;

typedef struct _SERVER_INFO_1509
{
  /* 0x0000 */ unsigned long sv1509_maxrawbuflen;
} SERVER_INFO_1509, *PSERVER_INFO_1509; /* size: 0x0004 */

typedef enum _WNF_STATE_NAME_LIFETIME
{
  WnfWellKnownStateName = 0,
  WnfPermanentStateName = 1,
  WnfPersistentStateName = 2,
  WnfTemporaryStateName = 3,
} WNF_STATE_NAME_LIFETIME, *PWNF_STATE_NAME_LIFETIME;

typedef struct _FILE_ATTRIBUTE_CACHE_VALUE
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned short Size;
  /* 0x0006 */ unsigned short RequiredSize;
  /* 0x0008 */ unsigned char Data[1];
  /* 0x0009 */ char __PADDING__[3];
} FILE_ATTRIBUTE_CACHE_VALUE, *PFILE_ATTRIBUTE_CACHE_VALUE; /* size: 0x000c */

typedef struct _FILE_ATTRIBUTE_CACHE_PAIR
{
  /* 0x0000 */ wchar_t Name[100];
  /* 0x00c8 */ struct _FILE_ATTRIBUTE_CACHE_VALUE Value;
} FILE_ATTRIBUTE_CACHE_PAIR, *PFILE_ATTRIBUTE_CACHE_PAIR; /* size: 0x00d4 */

typedef struct _FILE_ATTRIBUTE_CACHE_VALUES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long NumberOfValues;
  /* 0x0008 */ struct _FILE_ATTRIBUTE_CACHE_PAIR Attributes[1];
} FILE_ATTRIBUTE_CACHE_VALUES, *PFILE_ATTRIBUTE_CACHE_VALUES; /* size: 0x00dc */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_728, *PTAG_UNNAMED_728;

struct IWbemDecoupledRegistrar
{
}; /* size: 0x0008 */

typedef enum
{
  cbucketsHashTable = 1031,
} TAG_UNNAMED_729, *PTAG_UNNAMED_729;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 36,
} TAG_UNNAMED_730, *PTAG_UNNAMED_730;

class XeSosPkg::ex_terminator_called
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_258[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int is_stack_unwindOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct tagCWPSTRUCT
{
  /* 0x0000 */ __int64 lParam;
  /* 0x0008 */ unsigned __int64 wParam;
  /* 0x0010 */ unsigned int message;
  /* 0x0014 */ long Padding_259;
  /* 0x0018 */ struct HWND__* hwnd;
}; /* size: 0x0020 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_731, *PTAG_UNNAMED_731;

typedef enum
{
  ArgCount = 2,
} TAG_UNNAMED_732, *PTAG_UNNAMED_732;

typedef enum
{
  retry_interval_msIdx = 0,
  max_retry_countIdx = 1,
  id_or_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_733, *PTAG_UNNAMED_733;

class Spinlock<220,2,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_734, *PTAG_UNNAMED_734;

typedef struct _USE_INFO_2
{
  /* 0x0000 */ wchar_t* ui2_local;
  /* 0x0008 */ wchar_t* ui2_remote;
  /* 0x0010 */ wchar_t* ui2_password;
  /* 0x0018 */ unsigned long ui2_status;
  /* 0x001c */ unsigned long ui2_asg_type;
  /* 0x0020 */ unsigned long ui2_refcount;
  /* 0x0024 */ unsigned long ui2_usecount;
  /* 0x0028 */ wchar_t* ui2_username;
  /* 0x0030 */ wchar_t* ui2_domainname;
} USE_INFO_2, *PUSE_INFO_2; /* size: 0x0038 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_735, *PTAG_UNNAMED_735;

struct XEPackage0::SourceAction
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ const struct XEType* m_pType;
  /* 0x0018 */ struct XERelativeObjectId m_actionId;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef enum
{
  descriptionIdx = 0,
  dataIdx = 1,
  LastField = 2,
} TAG_UNNAMED_736, *PTAG_UNNAMED_736;

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_737, *PTAG_UNNAMED_737;

struct tagCACY
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_260;
  /* 0x0008 */ union tagCY* pElems;
}; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_738, *PTAG_UNNAMED_738;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_739, *PTAG_UNNAMED_739;

enum XEPackage0::RingTarget::Mode
{
  MODE_NONE = 0,
  MODE_CAPPED = 1,
  MODE_INVALID = -1,
};

typedef struct _wireSAFEARR_BSTR
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_261;
  /* 0x0008 */ struct _FLAGGED_WORD_BLOB** aBstr;
} wireSAFEARR_BSTR, *PwireSAFEARR_BSTR; /* size: 0x0010 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_740, *PTAG_UNNAMED_740;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  cursor_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_741, *PTAG_UNNAMED_741;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_742, *PTAG_UNNAMED_742;

enum DkParameter::DkParameterStatus
{
  dpsUnknown = 0,
  dpsValid = 1,
  dpsIgnored = 2,
  dpsInvalid = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_743, *PTAG_UNNAMED_743;

enum DBLITERALENUM20
{
  DBLITERAL_CUBE_NAME = 21,
  DBLITERAL_DIMENSION_NAME = 22,
  DBLITERAL_HIERARCHY_NAME = 23,
  DBLITERAL_LEVEL_NAME = 24,
  DBLITERAL_MEMBER_NAME = 25,
  DBLITERAL_PROPERTY_NAME = 26,
  DBLITERAL_SCHEMA_SEPARATOR = 27,
  DBLITERAL_QUOTE_SUFFIX = 28,
};

typedef struct _OBJECTID
{
  /* 0x0000 */ struct _GUID Lineage;
  /* 0x0010 */ unsigned long Uniquifier;
} OBJECTID, *POBJECTID; /* size: 0x0014 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_744, *PTAG_UNNAMED_744;

typedef enum
{
  PageSize = 8192,
  BlockSize = 48,
  TotalBlocksPerPage = 170,
  PhantomsPerPage = 2,
  RealBlocksPerPage = 168,
} TAG_UNNAMED_745, *PTAG_UNNAMED_745;

class Spinlock<106,9,1>
{
}; /* size: 0x0004 */

typedef enum
{
  BucketCount = 5,
  PageDescOffset = 8064,
  PageMask = -8192,
  FragmentDescSize = 96,
  AdditionalFragmentSize = 0x10000,
  UseNativeVirtualAlloc = 1,
  AllowAdditionalFragments = 1,
  NodeCount = 64,
  InvalidCpuId = -1,
  InvalidDescNo = -1,
  BlocksPerBucket = 43,
} TAG_UNNAMED_746, *PTAG_UNNAMED_746;

struct ITrusteeAdmin
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_747, *PTAG_UNNAMED_747;

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_748, *PTAG_UNNAMED_748;

struct tagRemHPALETTE
{
  /* 0x0000 */ unsigned long cbData;
  /* 0x0004 */ unsigned char data[1];
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

typedef struct _SERVER_INFO_1556
{
  /* 0x0000 */ unsigned long sv1556_maxworkitemidletime;
} SERVER_INFO_1556, *PSERVER_INFO_1556; /* size: 0x0004 */

typedef enum
{
  request_typeIdx = 0,
  lease_stateIdx = 1,
  blob_sizeIdx = 2,
  request_idIdx = 3,
  file_pathIdx = 4,
  instance_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_749, *PTAG_UNNAMED_749;

class SpinlockHolder<159,3,1>;

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_750, *PTAG_UNNAMED_750;

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  is_eosIdx = 3,
  rowsIdx = 4,
  eos_countIdx = 5,
  query_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_751, *PTAG_UNNAMED_751;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_752, *PTAG_UNNAMED_752;

class Spinlock<121,8,1>
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_753, *PTAG_UNNAMED_753;

struct IWbemLocator
{
}; /* size: 0x0008 */

class Spinlock<176,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_754, *PTAG_UNNAMED_754;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  log_block_idIdx = 2,
  write_sizeIdx = 3,
  errorIdx = 4,
  LastField = 5,
} TAG_UNNAMED_755, *PTAG_UNNAMED_755;

class SEList<XEPackage0::SourceColumn,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEList<XEPackage0::SourceAction,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct XEPackage0::Source
{
  /* 0x0000 */ struct XERelativeObjectId m_eventId;
  /* 0x0004 */ long Padding_262;
  /* 0x0008 */ class SEList<XEPackage0::SourceColumn,0> m_columns;
  /* 0x0018 */ class SEList<XEPackage0::SourceAction,0> m_actions;
}; /* size: 0x0028 */

class XE_LiveSessionMetadata
{
  /* 0x0000 */ void* m_hSession;
}; /* size: 0x0008 */

struct XEPackage0::PairingTargetStats
{
  /* 0x0000 */ unsigned int m_matchedEvents;
  /* 0x0004 */ unsigned int m_droppedEvents;
}; /* size: 0x0008 */

class XEPackage0::PairingTarget
{
  union
  {
    /* 0x0000 */ const unsigned int ORPHANS_BUCKETS;
    /* 0x0000 */ const unsigned int ORPHANS_BUCKETS_MAX;
    /* 0x0000 */ const unsigned int ORPHANS_BUCKETS_FILL;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_263;
  /* 0x0008 */ struct XEPackage0::Source m_sourceBegin;
  /* 0x0030 */ struct XEPackage0::Source m_sourceEnd;
  /* 0x0058 */ class SEHashTableGrow<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator> m_orphansBegin;
  /* 0x0088 */ class SEHashTableGrow<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator> m_orphansEnd;
  /* 0x00b8 */ void* m_lock;
  /* 0x00c0 */ class XE_Auto m_packageHolder;
  /* 0x00c8 */ class XE_LiveSessionMetadata m_metadata;
  /* 0x00d0 */ int m_isMemoryPressure;
  /* 0x00d4 */ long Padding_264;
  /* 0x00d8 */ void* m_notificationId;
  /* 0x00e0 */ struct XEPackage0::PairingTargetStats m_stats;
  /* 0x00e8 */ unsigned int m_maxOrphans;
}; /* size: 0x00f0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_756, *PTAG_UNNAMED_756;

typedef struct _REMOTE_LINK_TRACKING_INFORMATION_
{
  /* 0x0000 */ void* TargetFileObject;
  /* 0x0008 */ unsigned long TargetLinkTrackingInformationLength;
  /* 0x000c */ unsigned char TargetLinkTrackingInformationBuffer[1];
  /* 0x000d */ char __PADDING__[3];
} REMOTE_LINK_TRACKING_INFORMATION_, *PREMOTE_LINK_TRACKING_INFORMATION_; /* size: 0x0010 */

enum CLUSTER_RESOURCE_CREATE_FLAGS
{
  CLUSTER_RESOURCE_DEFAULT_MONITOR = 0,
  CLUSTER_RESOURCE_SEPARATE_MONITOR = 1,
  CLUSTER_RESOURCE_VALID_FLAGS = 1,
};

enum XeSqlPkg::security_error_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>::FuncPtr<void,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

typedef enum
{
  HashEntryLinkOff = 0,
} TAG_UNNAMED_757, *PTAG_UNNAMED_757;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_758, *PTAG_UNNAMED_758;

struct MgrCacheSLock
{
}; /* size: 0x0004 */

typedef enum
{
  ClassId = 0x134000,
  IsTemplate = 0,
  SerializableVirtual = 1,
} TAG_UNNAMED_759, *PTAG_UNNAMED_759;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_760, *PTAG_UNNAMED_760;

struct ICreateErrorInfo
{
}; /* size: 0x0008 */

enum CLUSTER_RESOURCE_CLASS
{
  CLUS_RESCLASS_UNKNOWN = 0,
  CLUS_RESCLASS_STORAGE = 1,
  CLUS_RESCLASS_NETWORK = 2,
  CLUS_RESCLASS_USER = 0xffff8000,
};

struct tagCIEXYZ
{
  /* 0x0000 */ long ciexyzX;
  /* 0x0004 */ long ciexyzY;
  /* 0x0008 */ long ciexyzZ;
}; /* size: 0x000c */

struct tagICEXYZTRIPLE
{
  /* 0x0000 */ struct tagCIEXYZ ciexyzRed;
  /* 0x000c */ struct tagCIEXYZ ciexyzGreen;
  /* 0x0018 */ struct tagCIEXYZ ciexyzBlue;
}; /* size: 0x0024 */

struct tagLOGCOLORSPACEA
{
  /* 0x0000 */ unsigned long lcsSignature;
  /* 0x0004 */ unsigned long lcsVersion;
  /* 0x0008 */ unsigned long lcsSize;
  /* 0x000c */ long lcsCSType;
  /* 0x0010 */ long lcsIntent;
  /* 0x0014 */ struct tagICEXYZTRIPLE lcsEndpoints;
  /* 0x0038 */ unsigned long lcsGammaRed;
  /* 0x003c */ unsigned long lcsGammaGreen;
  /* 0x0040 */ unsigned long lcsGammaBlue;
  /* 0x0044 */ char lcsFilename[260];
}; /* size: 0x0148 */

struct tagEMRCREATECOLORSPACE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihCS;
  /* 0x000c */ struct tagLOGCOLORSPACEA lcs;
}; /* size: 0x0154 */

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_761, *PTAG_UNNAMED_761;

enum CLUSTER_RESOURCE_ENUM
{
  CLUSTER_RESOURCE_ENUM_DEPENDS = 1,
  CLUSTER_RESOURCE_ENUM_PROVIDES = 2,
  CLUSTER_RESOURCE_ENUM_NODES = 4,
  CLUSTER_RESOURCE_ENUM_ALL = 7,
};

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  slot_idIdx = 2,
  used_sizeIdx = 3,
  reservation_sizeIdx = 4,
  log_op_idIdx = 5,
  log_op_nameIdx = 6,
  LastField = 7,
} TAG_UNNAMED_762, *PTAG_UNNAMED_762;

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  worker_idIdx = 2,
  total_pages_readIdx = 3,
  total_pages_processedIdx = 4,
  total_ranges_processedIdx = 5,
  total_ranges_generated_for_localIdx = 6,
  total_ranges_generated_for_remoteIdx = 7,
  total_ranges_local_rebalanced_to_thisIdx = 8,
  total_ranges_remote_rebalanced_to_thisIdx = 9,
  total_pages_local_rebalanced_to_thisIdx = 10,
  total_pages_remote_rebalanced_to_thisIdx = 11,
  total_ranges_local_rebalanced_from_thisIdx = 12,
  total_ranges_remote_rebalanced_from_thisIdx = 13,
  total_pages_local_rebalanced_from_thisIdx = 14,
  total_pages_remote_rebalanced_from_thisIdx = 15,
  total_time_msIdx = 16,
  LastField = 17,
} TAG_UNNAMED_763, *PTAG_UNNAMED_763;

typedef struct _TOKEN_ELEVATION
{
  /* 0x0000 */ unsigned long TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION; /* size: 0x0004 */

enum Worker::StackSize
{
  MinStack = 8192,
  MaxStack = 0x80000,
};

typedef enum
{
  database_idIdx = 0,
  interestIdx = 1,
  LastField = 2,
} TAG_UNNAMED_764, *PTAG_UNNAMED_764;

struct tagMODULEENTRY32
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long th32ModuleID;
  /* 0x0008 */ unsigned long th32ProcessID;
  /* 0x000c */ unsigned long GlblcntUsage;
  /* 0x0010 */ unsigned long ProccntUsage;
  /* 0x0014 */ long Padding_265;
  /* 0x0018 */ unsigned char* modBaseAddr;
  /* 0x0020 */ unsigned long modBaseSize;
  /* 0x0024 */ long Padding_266;
  /* 0x0028 */ struct HINSTANCE__* hModule;
  /* 0x0030 */ char szModule[256];
  /* 0x0130 */ char szExePath[260];
  /* 0x0234 */ long __PADDING__[1];
}; /* size: 0x0238 */

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_765, *PTAG_UNNAMED_765;

typedef enum
{
  ListElementOffset = 0,
} TAG_UNNAMED_766, *PTAG_UNNAMED_766;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 8,
  VldEddOffset = 8,
  BufSize = 98,
} TAG_UNNAMED_767, *PTAG_UNNAMED_767;

typedef enum
{
  availability_group_idIdx = 0,
  local_availability_replica_idIdx = 1,
  target_availability_replica_idIdx = 2,
  ucs_connection_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_768, *PTAG_UNNAMED_768;

struct tagWNODE_SINGLE_ITEM
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
  /* 0x0030 */ unsigned long OffsetInstanceName;
  /* 0x0034 */ unsigned long InstanceIndex;
  /* 0x0038 */ unsigned long ItemId;
  /* 0x003c */ unsigned long DataBlockOffset;
  /* 0x0040 */ unsigned long SizeDataItem;
  union
  {
    /* 0x0044 */ unsigned char* VariableData /* zero-length array */;
    /* 0x0044 */ long __PADDING__[1];
  }; /* size: 0x0004 */
}; /* size: 0x0048 */

typedef enum _SYSTEM_INFORMATION_CLASS
{
  SystemBasicInformation = 0,
  SystemPerformanceInformation = 2,
  SystemTimeOfDayInformation = 3,
  SystemProcessInformation = 5,
  SystemProcessorPerformanceInformation = 8,
  SystemInterruptInformation = 23,
  SystemExceptionInformation = 33,
  SystemRegistryQuotaInformation = 37,
  SystemLookasideInformation = 45,
  SystemQueryPerformanceCounterInformation = 124,
} SYSTEM_INFORMATION_CLASS, *PSYSTEM_INFORMATION_CLASS;

typedef enum
{
  Result = 1000,
} TAG_UNNAMED_769, *PTAG_UNNAMED_769;

struct ILayoutStorage
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_770, *PTAG_UNNAMED_770;

enum CSerializeContext<RPCStream>::EMBEDDED_MODES
{
  NOT_EMBEDDED = 0,
  EMBEDDED_NOCOMPILEROFFSET = 1,
  EMBEDDED_ADDCOMPILEROFFSET = 2,
};

class AutoSpinlockHolder<275,1,1>;

typedef enum
{
  ListElementOffset = 160,
  NextPtrOffset = 8,
} TAG_UNNAMED_771, *PTAG_UNNAMED_771;

struct XEHostProperties
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_267[6];
  /* 0x0008 */ void* m_pfExstablishCtx /* function */;
  /* 0x0010 */ void* m_pfLogMessageCallback /* function */;
  /* 0x0018 */ void* m_pfCreateFileCallback /* function */;
  /* 0x0020 */ void* m_hostContext;
  /* 0x0028 */ void* m_pfCanonicalizePath /* function */;
  /* 0x0030 */ void* m_pfGetLocale /* function */;
}; /* size: 0x0038 */

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_772, *PTAG_UNNAMED_772;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
{
  /* 0x0000 */ unsigned __int64 IoReadBytesLimit;
  /* 0x0008 */ unsigned __int64 IoWriteBytesLimit;
  /* 0x0010 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x0018 */ unsigned __int64 JobMemoryLimit;
  /* 0x0020 */ enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
  /* 0x0024 */ enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
  /* 0x0028 */ unsigned long LimitFlags;
  /* 0x002c */ long __PADDING__[1];
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION; /* size: 0x0030 */

typedef enum _PROC_THREAD_ATTRIBUTE_NUM
{
  ProcThreadAttributeParentProcess = 0,
  ProcThreadAttributeExtendedFlags = 1,
  ProcThreadAttributeHandleList = 2,
  ProcThreadAttributeGroupAffinity = 3,
  ProcThreadAttributePreferredNode = 4,
  ProcThreadAttributeIdealProcessor = 5,
  ProcThreadAttributeUmsThread = 6,
  ProcThreadAttributeMitigationPolicy = 7,
  ProcThreadAttributeMax = 8,
} PROC_THREAD_ATTRIBUTE_NUM, *PPROC_THREAD_ATTRIBUTE_NUM;

typedef enum
{
  offset = 160,
} TAG_UNNAMED_773, *PTAG_UNNAMED_773;

struct XE_TEvent<4,0,6>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,6> m_dynamicAttr;
  /* 0x0198 */ struct XEEvent m_event;
}; /* size: 0x01e0 */

class XeSqlPkg::hadr_db_manager_suspend_resume
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_268[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int suspend_statusOffset;
    /* 0x0000 */ const int suspend_sourceOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

typedef enum
{
  is_initiatorIdx = 0,
  fragment_numberIdx = 1,
  message_sequenceIdx = 2,
  remaining_hop_countIdx = 3,
  time_to_live_secIdx = 4,
  live_time_secIdx = 5,
  conversation_idIdx = 6,
  message_type_nameIdx = 7,
  from_service_nameIdx = 8,
  from_broker_nameIdx = 9,
  to_service_nameIdx = 10,
  to_broker_nameIdx = 11,
  service_contract_nameIdx = 12,
  LastField = 13,
} TAG_UNNAMED_774, *PTAG_UNNAMED_774;

class XE_AutoP<PackageEntry>
{
}; /* size: 0x0008 */

class HistoryTargetTables
{
  /* 0x0000 */ class XE_AutoP<PackageEntry> m_packages[1024];
  /* 0x2000 */ struct XE_CXHistoryTargetConfig* m_config;
}; /* size: 0x2008 */

enum ResourceClerk::TYPE
{
  TYPE_MEMORYCLERKINTERNAL = 1,
};

typedef enum
{
  timestampIdx = 0,
  scheduler_idIdx = 1,
  workerIdx = 2,
  node_idIdx = 3,
  ranges_in_queueIdx = 4,
  pages_in_queueIdx = 5,
  read_ahead_distanceIdx = 6,
  fixup_range_idIdx = 7,
  fixup_base_posIdx = 8,
  range_idIdx = 9,
  start_file_idIdx = 10,
  end_file_idIdx = 11,
  start_page_idIdx = 12,
  end_page_idIdx = 13,
  LastField = 14,
} TAG_UNNAMED_775, *PTAG_UNNAMED_775;

typedef struct _SECURITY_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ long Padding_269;
  /* 0x0008 */ void* Owner;
  /* 0x0010 */ void* Group;
  /* 0x0018 */ struct _ACL* Sacl;
  /* 0x0020 */ struct _ACL* Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_776, *PTAG_UNNAMED_776;

struct IEncodingFilterFactory
{
}; /* size: 0x0008 */

struct BitOrdinal<2048>
{
}; /* size: 0x0001 */

enum CCompatLevel::compatibilitylevel
{
  x_bCmptLevelEmpty = 0,
  x_bCmptLevel42 = 42,
  x_bCmptLevel60 = 60,
  x_bCmptLevel65 = 65,
  x_bCmptLevel70 = 70,
  x_bCmptLevel80 = 80,
  x_bCmptLevel90 = 90,
  x_bCmptLevel100 = 100,
  x_bCmptLevel110 = 110,
  x_bCmptLevel120 = 120,
};

typedef struct _CREATE_THREAD_DEBUG_INFO
{
  /* 0x0000 */ void* hThread;
  /* 0x0008 */ void* lpThreadLocalBase;
  /* 0x0010 */ void* lpStartAddress /* function */;
} CREATE_THREAD_DEBUG_INFO, *PCREATE_THREAD_DEBUG_INFO; /* size: 0x0018 */

struct tagEMRSETCOLORSPACE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihCS;
}; /* size: 0x000c */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_777, *PTAG_UNNAMED_777;

typedef enum
{
  LocalStorageSize = 16,
} TAG_UNNAMED_778, *PTAG_UNNAMED_778;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_779, *PTAG_UNNAMED_779;

typedef enum
{
  x_waitStatsStaticSize = 32,
} TAG_UNNAMED_780, *PTAG_UNNAMED_780;

struct IOleInPlaceSite
{
}; /* size: 0x0008 */

typedef enum
{
  x_waitStatsPerPage = 169,
} TAG_UNNAMED_781, *PTAG_UNNAMED_781;

enum DequeueResult
{
  DR_OK = 0,
  DR_RETRY = 1,
  DR_TERMINATE = 2,
};

struct ColumnTransformRule
{
  /* 0x0000 */ unsigned int ruleTypes;
  /* 0x0004 */ unsigned int targetTableColumnIndex;
}; /* size: 0x0008 */

typedef enum
{
  availability_group_idIdx = 0,
  sql_instance_nameIdx = 1,
  cluster_node_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_782, *PTAG_UNNAMED_782;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_783, *PTAG_UNNAMED_783;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_784, *PTAG_UNNAMED_784;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_785, *PTAG_UNNAMED_785;

enum EVENT_DEBUG_FLAGS
{
  EVENT_DEBUG_ALLOW_WAITERS_AT_DESTRUCTION = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 19,
} TAG_UNNAMED_786, *PTAG_UNNAMED_786;

enum DBLITERALENUM
{
  DBLITERAL_INVALID = 0,
  DBLITERAL_BINARY_LITERAL = 1,
  DBLITERAL_CATALOG_NAME = 2,
  DBLITERAL_CATALOG_SEPARATOR = 3,
  DBLITERAL_CHAR_LITERAL = 4,
  DBLITERAL_COLUMN_ALIAS = 5,
  DBLITERAL_COLUMN_NAME = 6,
  DBLITERAL_CORRELATION_NAME = 7,
  DBLITERAL_CURSOR_NAME = 8,
  DBLITERAL_ESCAPE_PERCENT = 9,
  DBLITERAL_ESCAPE_UNDERSCORE = 10,
  DBLITERAL_INDEX_NAME = 11,
  DBLITERAL_LIKE_PERCENT = 12,
  DBLITERAL_LIKE_UNDERSCORE = 13,
  DBLITERAL_PROCEDURE_NAME = 14,
  DBLITERAL_QUOTE = 15,
  DBLITERAL_SCHEMA_NAME = 16,
  DBLITERAL_TABLE_NAME = 17,
  DBLITERAL_TEXT_COMMAND = 18,
  DBLITERAL_USER_NAME = 19,
  DBLITERAL_VIEW_NAME = 20,
};

typedef enum
{
  ListElementOffset = 0,
} TAG_UNNAMED_787, *PTAG_UNNAMED_787;

struct AsyncIPipeByte
{
}; /* size: 0x0008 */

typedef enum
{
  PageSize = 8192,
  BlockSize = 144,
  TotalBlocksPerPage = 56,
  PhantomsPerPage = 0,
  RealBlocksPerPage = 56,
} TAG_UNNAMED_788, *PTAG_UNNAMED_788;

class SpinlockHolder<282,1,1>;

typedef enum
{
  database_idIdx = 0,
  statement_typeIdx = 1,
  database_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_789, *PTAG_UNNAMED_789;

struct IProvideClassInfo
{
}; /* size: 0x0008 */

struct tagAXESLISTA
{
  /* 0x0000 */ unsigned long axlReserved;
  /* 0x0004 */ unsigned long axlNumAxes;
  /* 0x0008 */ struct tagAXISINFOA axlAxisInfo[16];
}; /* size: 0x0188 */

struct tagENUMTEXTMETRICA
{
  /* 0x0000 */ struct tagNEWTEXTMETRICEXA etmNewTextMetricEx;
  /* 0x0060 */ struct tagAXESLISTA etmAxesList;
}; /* size: 0x01e8 */

typedef enum
{
  BucketCount = 5,
  PageDescOffset = 8064,
  PageMask = -8192,
  FragmentDescSize = 144,
  AdditionalFragmentSize = 0x10000,
  UseNativeVirtualAlloc = 1,
  AllowAdditionalFragments = 1,
  NodeCount = 64,
  InvalidCpuId = -1,
  InvalidDescNo = -1,
  BlocksPerBucket = 14,
} TAG_UNNAMED_790, *PTAG_UNNAMED_790;

class XeSqlPkg::session_footprint_lifecycle_event
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_270[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int session_tokenOffset;
    /* 0x0000 */ const int brick_incarnation_idOffset;
    /* 0x0000 */ const int event_typeOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class Spinlock<196,3,1>
{
}; /* size: 0x0004 */

typedef union _UNWIND_CODE
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char CodeOffset;
      struct /* bitfield */
      {
        /* 0x0001 */ unsigned char UnwindOp : 4; /* bit position: 0 */
        /* 0x0001 */ unsigned char OpInfo : 4; /* bit position: 4 */
      }; /* bitfield */
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short FrameOffset;
  }; /* size: 0x0002 */
} UNWIND_CODE, *PUNWIND_CODE; /* size: 0x0002 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 33,
} TAG_UNNAMED_791, *PTAG_UNNAMED_791;

typedef enum _RTC_ErrorNumber
{
  _RTC_CHKSTK = 0,
  _RTC_CVRT_LOSS_INFO = 1,
  _RTC_CORRUPT_STACK = 2,
  _RTC_UNINIT_LOCAL_USE = 3,
  _RTC_CORRUPTED_ALLOCA = 4,
  _RTC_ILLEGAL = 5,
} RTC_ErrorNumber, *PRTC_ErrorNumber;

typedef enum
{
  database_idIdx = 0,
  recovery_log_bytesIdx = 1,
  recovery_log_read_time_estimateIdx = 2,
  recovery_log_target_timeIdx = 3,
  dirty_page_read_timeIdx = 4,
  dirty_page_countIdx = 5,
  dirty_page_target_timeIdx = 6,
  page_writes_loggedIdx = 7,
  page_writes_not_loggedIdx = 8,
  LastField = 9,
} TAG_UNNAMED_792, *PTAG_UNNAMED_792;

typedef enum
{
  error_numberIdx = 0,
  error_severityIdx = 1,
  error_stateIdx = 2,
  corruption_descriptionIdx = 3,
  LastField = 4,
} TAG_UNNAMED_793, *PTAG_UNNAMED_793;

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_794, *PTAG_UNNAMED_794;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES
{
  /* 0x0000 */ unsigned long SidCount;
  /* 0x0004 */ unsigned long SidLength;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* Sids;
  /* 0x0010 */ unsigned long RestrictedSidCount;
  /* 0x0014 */ unsigned long RestrictedSidLength;
  /* 0x0018 */ struct _SID_AND_ATTRIBUTES* RestrictedSids;
  /* 0x0020 */ unsigned long PrivilegeCount;
  /* 0x0024 */ unsigned long PrivilegeLength;
  /* 0x0028 */ struct _LUID_AND_ATTRIBUTES* Privileges;
  /* 0x0030 */ struct _LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES; /* size: 0x0038 */

class UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >::Elem
{
}; /* size: 0x0010 */

typedef enum
{
  Read = 1,
  Write = 2,
  Governed = 4,
  GroupOwned = 8,
  Throttled = 16,
} TAG_UNNAMED_795, *PTAG_UNNAMED_795;

typedef enum
{
  current_stateIdx = 0,
  ag_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_796, *PTAG_UNNAMED_796;

struct IOpenRowset
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_797, *PTAG_UNNAMED_797;

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  dialog_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_798, *PTAG_UNNAMED_798;

enum XE_StreamCompOperation
{
  XESC_EQ = 0,
  XESC_LT = 1,
  XESC_LTE = 2,
};

typedef enum
{
  vertex_pool_sizeIdx = 0,
  vertex_pool_utilizationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_799, *PTAG_UNNAMED_799;

typedef struct _s__CatchableTypeArray
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s__CatchableType** arrayOfCatchableTypes /* zero-length array */;
} s__CatchableTypeArray, *Ps__CatchableTypeArray; /* size: 0x0004 */

enum XeSqlPkg::QNParameterTableActivity
{
  QNPT_TABLE_CREATED = 1,
  QNPT_TABLE_DROP_ATTEMPT = 2,
  QNPT_TABLE_DROP_FAILED = 3,
  QNPT_TABLE_DROPPED = 4,
  QNPT_TABLE_PINNED = 5,
  QNPT_TABLE_UNPINNED = 6,
  QNPT_SUBS_COUNT_INC = 7,
  QNPT_SUBS_COUNT_DEC = 8,
  QNPT_SUBS_COUNT_RESET = 9,
  QNPT_SUBS_CLEANUP_STARTED = 10,
  QNPT_SUBS_CLEANUP_FINISHED = 11,
};

struct LockNotificationSLock
{
}; /* size: 0x0004 */

typedef enum
{
  SYSTHREAD_WORKER_TOBERESUMED = 1,
  SYSTHREAD_WORKER_TOBERESUMEDFAST = 2,
  SYSTHREAD_WORKER_TOBERELEASED = 4,
} TAG_UNNAMED_800, *PTAG_UNNAMED_800;

struct tagDBID
{
  union
  {
    union
    {
      /* 0x0000 */ struct _GUID guid;
      /* 0x0000 */ struct _GUID* pguid;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ uGuid;
  /* 0x0010 */ unsigned long eKind;
  /* 0x0014 */ long Padding_271;
  union
  {
    union
    {
      /* 0x0018 */ wchar_t* pwszName;
      /* 0x0018 */ unsigned long ulPropid;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ uName;
}; /* size: 0x0020 */

struct tagDBCOLUMNDESC
{
  /* 0x0000 */ wchar_t* pwszTypeName;
  /* 0x0008 */ struct ITypeInfo* pTypeInfo;
  /* 0x0010 */ struct tagDBPROPSET* rgPropertySets;
  /* 0x0018 */ struct _GUID* pclsid;
  /* 0x0020 */ unsigned long cPropertySets;
  /* 0x0024 */ long Padding_272;
  /* 0x0028 */ unsigned __int64 ulColumnSize;
  /* 0x0030 */ struct tagDBID dbcid;
  /* 0x0050 */ unsigned short wType;
  /* 0x0052 */ unsigned char bPrecision;
  /* 0x0053 */ unsigned char bScale;
  /* 0x0054 */ long __PADDING__[1];
}; /* size: 0x0058 */

typedef enum _CLUSTER_CSV_VOLUME_FAULT_STATE
{
  VolumeStateNoFaults = 0,
  VolumeStateNoDirectIO = 1,
  VolumeStateNoAccess = 2,
  VolumeStateInMaintenance = 4,
  VolumeStateDismounted = 8,
} CLUSTER_CSV_VOLUME_FAULT_STATE, *PCLUSTER_CSV_VOLUME_FAULT_STATE;

typedef enum
{
  is_emptyIdx = 0,
  is_primaryIdx = 1,
  is_routing_replica_not_foundIdx = 2,
  portIdx = 3,
  host_nameIdx = 4,
  ag_database_idIdx = 5,
  ag_primary_replica_idIdx = 6,
  ag_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_801, *PTAG_UNNAMED_801;

class TCallbackListBase<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >
{
}; /* size: 0x0010 */

typedef enum
{
  TEB_TLSSLOTS_OFFSET = 5248,
} TAG_UNNAMED_802, *PTAG_UNNAMED_802;

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  dialog_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_803, *PTAG_UNNAMED_803;

typedef enum
{
  Deleted = 1,
  Cataloged = 2,
} TAG_UNNAMED_804, *PTAG_UNNAMED_804;

typedef struct _COMM_FAULT_OFFSETS
{
  /* 0x0000 */ short CommOffset;
  /* 0x0002 */ short FaultOffset;
} COMM_FAULT_OFFSETS, *PCOMM_FAULT_OFFSETS; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_805, *PTAG_UNNAMED_805;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_806, *PTAG_UNNAMED_806;

typedef enum
{
  successIdx = 0,
  current_stateIdx = 1,
  target_stateIdx = 2,
  availability_group_idIdx = 3,
  local_availability_replica_idIdx = 4,
  target_availability_replica_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_807, *PTAG_UNNAMED_807;

struct IOplockStorage
{
}; /* size: 0x0008 */

typedef enum
{
  HashEntryLinkOff = 0,
} TAG_UNNAMED_808, *PTAG_UNNAMED_808;

typedef struct _RASTERIZER_STATUS
{
  /* 0x0000 */ short nSize;
  /* 0x0002 */ short wFlags;
  /* 0x0004 */ short nLanguageID;
} RASTERIZER_STATUS, *PRASTERIZER_STATUS; /* size: 0x0006 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_809, *PTAG_UNNAMED_809;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
  /* 0x0000 */ struct _SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long AuthenticationTarget;
  /* 0x0010 */ unsigned long NumberOfAuthnSchemes;
  /* 0x0014 */ long Padding_273;
  /* 0x0018 */ unsigned long* AuthnSchemes;
  /* 0x0020 */ unsigned short* ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W; /* size: 0x0028 */

typedef struct _PDH_DATA_ITEM_PATH_ELEMENTS_A
{
  /* 0x0000 */ char* szMachineName;
  /* 0x0008 */ struct _GUID ObjectGUID;
  /* 0x0018 */ unsigned long dwItemId;
  /* 0x001c */ long Padding_274;
  /* 0x0020 */ char* szInstanceName;
} PDH_DATA_ITEM_PATH_ELEMENTS_A, *PPDH_DATA_ITEM_PATH_ELEMENTS_A; /* size: 0x0028 */

typedef struct _PDH_COUNTER_PATH_ELEMENTS_A
{
  /* 0x0000 */ char* szMachineName;
  /* 0x0008 */ char* szObjectName;
  /* 0x0010 */ char* szInstanceName;
  /* 0x0018 */ char* szParentInstance;
  /* 0x0020 */ unsigned long dwInstanceIndex;
  /* 0x0024 */ long Padding_275;
  /* 0x0028 */ char* szCounterName;
} PDH_COUNTER_PATH_ELEMENTS_A, *PPDH_COUNTER_PATH_ELEMENTS_A; /* size: 0x0030 */

typedef struct _PDH_COUNTER_INFO_A
{
  /* 0x0000 */ unsigned long dwLength;
  /* 0x0004 */ unsigned long dwType;
  /* 0x0008 */ unsigned long CVersion;
  /* 0x000c */ unsigned long CStatus;
  /* 0x0010 */ long lScale;
  /* 0x0014 */ long lDefaultScale;
  /* 0x0018 */ unsigned __int64 dwUserData;
  /* 0x0020 */ unsigned __int64 dwQueryUserData;
  /* 0x0028 */ char* szFullPath;
  union
  {
    /* 0x0030 */ struct _PDH_DATA_ITEM_PATH_ELEMENTS_A DataItemPath;
    /* 0x0030 */ struct _PDH_COUNTER_PATH_ELEMENTS_A CounterPath;
    struct
    {
      /* 0x0030 */ char* szMachineName;
      /* 0x0038 */ char* szObjectName;
      /* 0x0040 */ char* szInstanceName;
      /* 0x0048 */ char* szParentInstance;
      /* 0x0050 */ unsigned long dwInstanceIndex;
      /* 0x0054 */ long Padding_276;
      /* 0x0058 */ char* szCounterName;
    }; /* size: 0x002c */
  }; /* size: 0x0030 */
  /* 0x0060 */ char* szExplainText;
  /* 0x0068 */ unsigned long DataBuffer[1];
  /* 0x006c */ long __PADDING__[1];
} PDH_COUNTER_INFO_A, *PPDH_COUNTER_INFO_A; /* size: 0x0070 */

enum SchedulerManager::SchedCreateOptions
{
  FAIL_FAST = 0,
  FAIL_CONTINUE = 1,
};

enum DBCOMMANDPERSISTFLAGENUM21
{
  DBCOMMANDPERSISTFLAG_DEFAULT = 0,
  DBCOMMANDPERSISTFLAG_PERSISTVIEW = 2,
  DBCOMMANDPERSISTFLAG_PERSISTPROCEDURE = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_810, *PTAG_UNNAMED_810;

enum SchedulerManager::SchedulerList::HoldLock
{
  ACQUIRELOCK = 0,
  HOLDINGLOCK = 1,
};

typedef enum
{
  ListElementOffset = 8,
} TAG_UNNAMED_811, *PTAG_UNNAMED_811;

struct XEPredicateValue
{
  /* 0x0000 */ unsigned __int64 m_value;
  /* 0x0008 */ unsigned int m_length;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_812, *PTAG_UNNAMED_812;

typedef enum
{
  offset = 8,
} TAG_UNNAMED_813, *PTAG_UNNAMED_813;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 3,
  VldEddOffset = 5,
  BufSize = 68,
} TAG_UNNAMED_814, *PTAG_UNNAMED_814;

typedef enum
{
  ListElementOffset = 64,
  NextPtrOffset = 8,
} TAG_UNNAMED_815, *PTAG_UNNAMED_815;

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  is_volume_limit_hitIdx = 7,
  pathIdx = 8,
  LastField = 9,
} TAG_UNNAMED_816, *PTAG_UNNAMED_816;

enum CLUSTER_SHARED_VOLUME_STATE
{
  SharedVolumeStateUnavailable = 0,
  SharedVolumeStatePaused = 1,
  SharedVolumeStateActive = 2,
};

class AutoSpinlockHolder<164,3,1>;

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_817, *PTAG_UNNAMED_817;

typedef enum
{
  transaction_id_highIdx = 0,
  transaction_id_lowIdx = 1,
  rowset_idIdx = 2,
  rowgroup_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_818, *PTAG_UNNAMED_818;

typedef enum
{
  offset = 0,
} TAG_UNNAMED_819, *PTAG_UNNAMED_819;

typedef enum
{
  request_typeIdx = 0,
  errorcodeIdx = 1,
  http_errorcodeIdx = 2,
  mapped_errorcodeIdx = 3,
  callback_statusIdx = 4,
  retry_countIdx = 5,
  file_byte_offsetIdx = 6,
  file_byte_countIdx = 7,
  request_idIdx = 8,
  file_pathIdx = 9,
  LastField = 10,
} TAG_UNNAMED_820, *PTAG_UNNAMED_820;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  brick_idIdx = 2,
  local_brick_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_821, *PTAG_UNNAMED_821;

typedef struct __vc_attributes::aggregatableAttribute
{
  /* 0x0000 */ enum __vc_attributes::aggregatableAttribute::type_e type;
} _vc_attributes::aggregatableAttribute, *P_vc_attributes::aggregatableAttribute; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_822, *PTAG_UNNAMED_822;

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  is_eosIdx = 3,
  rowsIdx = 4,
  query_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_823, *PTAG_UNNAMED_823;

struct tagEMRRESIZEPALETTE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPal;
  /* 0x000c */ unsigned long cEntries;
}; /* size: 0x0010 */

class DmpPointer<SOS_ResourceManager>
{
  /* 0x0000 */ class SOS_ResourceManager* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 8,
} TAG_UNNAMED_824, *PTAG_UNNAMED_824;

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_825, *PTAG_UNNAMED_825;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_826, *PTAG_UNNAMED_826;

enum CLUSCTL_CLUSTER_CODES
{
  CLUSCTL_CLUSTER_UNKNOWN = 0x7000000,
  CLUSCTL_CLUSTER_GET_FQDN = 0x700003d,
  CLUSCTL_CLUSTER_ENUM_COMMON_PROPERTIES = 0x7000051,
  CLUSCTL_CLUSTER_GET_RO_COMMON_PROPERTIES = 0x7000055,
  CLUSCTL_CLUSTER_GET_COMMON_PROPERTIES = 0x7000059,
  CLUSCTL_CLUSTER_SET_COMMON_PROPERTIES = 0x740005e,
  CLUSCTL_CLUSTER_VALIDATE_COMMON_PROPERTIES = 0x7000061,
  CLUSCTL_CLUSTER_ENUM_PRIVATE_PROPERTIES = 0x7000079,
  CLUSCTL_CLUSTER_GET_RO_PRIVATE_PROPERTIES = 0x700007d,
  CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTIES = 0x7000081,
  CLUSCTL_CLUSTER_SET_PRIVATE_PROPERTIES = 0x7400086,
  CLUSCTL_CLUSTER_VALIDATE_PRIVATE_PROPERTIES = 0x7000089,
  CLUSCTL_CLUSTER_GET_COMMON_PROPERTY_FMTS = 0x7000065,
  CLUSCTL_CLUSTER_GET_PRIVATE_PROPERTY_FMTS = 0x700008d,
  CLUSCTL_CLUSTER_CHECK_VOTER_EVICT = 0x7000045,
  CLUSCTL_CLUSTER_CHECK_VOTER_DOWN = 0x7000049,
  CLUSCTL_CLUSTER_SHUTDOWN = 0x700004d,
  CLUSCTL_CLUSTER_BATCH_BLOCK_KEY = 0x700023e,
  CLUSCTL_CLUSTER_BATCH_UNBLOCK_KEY = 0x7000241,
  CLUSCTL_CLUSTER_GET_SHARED_VOLUME_ID = 0x7000291,
  CLUSCTL_CLUSTER_GET_CLUSDB_TIMESTAMP = 0x70002a9,
};

typedef enum
{
  error_numberIdx = 0,
  error_severityIdx = 1,
  error_stateIdx = 2,
  is_initiatorIdx = 3,
  conversation_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_827, *PTAG_UNNAMED_827;

class SList
{
  /* 0x0000 */ class SList* pNext;
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_828, *PTAG_UNNAMED_828;

typedef enum
{
  cursor_typeIdx = 0,
  protocol_execution_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_829, *PTAG_UNNAMED_829;

typedef enum
{
  Deleted = 1,
  Cataloged = 2,
} TAG_UNNAMED_830, *PTAG_UNNAMED_830;

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  escalation_causeIdx = 11,
  object_idIdx = 12,
  hobt_idIdx = 13,
  escalated_lock_countIdx = 14,
  hobt_lock_countIdx = 15,
  statementIdx = 16,
  database_nameIdx = 17,
  LastField = 18,
} TAG_UNNAMED_831, *PTAG_UNNAMED_831;

enum DBBINDURLSTATUSENUM
{
  DBBINDURLSTATUS_S_OK = 0,
  DBBINDURLSTATUS_S_DENYNOTSUPPORTED = 1,
  DBBINDURLSTATUS_S_DENYTYPENOTSUPPORTED = 4,
  DBBINDURLSTATUS_S_REDIRECTED = 8,
};

struct tagTPMPARAMS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ struct tagRECT rcExclude;
}; /* size: 0x0014 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 22,
} TAG_UNNAMED_832, *PTAG_UNNAMED_832;

enum SOS_PARTITIONEDHEAP
{
  PARTIONEDHEAP_SQLGENERAL = 0,
  PARTIONEDHEAP_COMPILEDPLAN = 1,
  PARTITIONEDHEAP_SUPERLATCHES = 2,
  PARTIONEDHEAP_SCHEMAMGR = 3,
  PARTIONEDHEAP_RPCCACHE = 4,
  PARTIONEDHEAP_XTPPROCRTDATA = 5,
  PARTIONEDHEAP_QDSRTSTATSDATA = 6,
  PARTIONEDHEAP_LAST = 7,
};

enum PARTITIONING_TYPE
{
  SINGLE_PARTITIONING = 0,
  CPU_PARTITIONING = 1,
  NODE_PARTITIONING = 2,
};

enum XeSqlPkg::scan_stopped::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 45,
} TAG_UNNAMED_833, *PTAG_UNNAMED_833;

struct IRpcHelper
{
}; /* size: 0x0008 */

enum DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc::PageDescState
{
  Active = 0,
  Full = 1,
  Partial = 2,
  Empty = 3,
};

class DmpPointer<SEList<SOS_ResourceGroup,16> >
{
  /* 0x0000 */ class SEList<SOS_ResourceGroup,16>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_834, *PTAG_UNNAMED_834;

class XeCloudMinPkg::set_partition_prepare_full_commit_mode
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_277[140];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x001b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int prepare_full_commit_modeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

enum XeSqlPkg::object_deleted::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef enum
{
  task_addressIdx = 0,
  cpu_timeIdx = 1,
  durationIdx = 2,
  LastField = 3,
} TAG_UNNAMED_835, *PTAG_UNNAMED_835;

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  lock_modeIdx = 2,
  timeoutIdx = 3,
  lock_policyIdx = 4,
  request_sourceIdx = 5,
  error_numberIdx = 6,
  severityIdx = 7,
  stateIdx = 8,
  LastField = 9,
} TAG_UNNAMED_836, *PTAG_UNNAMED_836;

enum CLUSCTL_NETWORK_CODES
{
  CLUSCTL_NETWORK_UNKNOWN = 0x5000000,
  CLUSCTL_NETWORK_GET_CHARACTERISTICS = 0x5000005,
  CLUSCTL_NETWORK_GET_FLAGS = 0x5000009,
  CLUSCTL_NETWORK_GET_NAME = 0x5000029,
  CLUSCTL_NETWORK_GET_ID = 0x5000039,
  CLUSCTL_NETWORK_ENUM_COMMON_PROPERTIES = 0x5000051,
  CLUSCTL_NETWORK_GET_RO_COMMON_PROPERTIES = 0x5000055,
  CLUSCTL_NETWORK_GET_COMMON_PROPERTIES = 0x5000059,
  CLUSCTL_NETWORK_SET_COMMON_PROPERTIES = 0x540005e,
  CLUSCTL_NETWORK_VALIDATE_COMMON_PROPERTIES = 0x5000061,
  CLUSCTL_NETWORK_ENUM_PRIVATE_PROPERTIES = 0x5000079,
  CLUSCTL_NETWORK_GET_RO_PRIVATE_PROPERTIES = 0x500007d,
  CLUSCTL_NETWORK_GET_PRIVATE_PROPERTIES = 0x5000081,
  CLUSCTL_NETWORK_SET_PRIVATE_PROPERTIES = 0x5400086,
  CLUSCTL_NETWORK_VALIDATE_PRIVATE_PROPERTIES = 0x5000089,
  CLUSCTL_NETWORK_GET_COMMON_PROPERTY_FMTS = 0x5000065,
  CLUSCTL_NETWORK_GET_PRIVATE_PROPERTY_FMTS = 0x500008d,
};

struct IXMLElement
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_837, *PTAG_UNNAMED_837;

enum XeSqlPkg::sql_statement_recompile::CustomizableSlots
{
  collect_object_nameSlot = 0,
  collect_statementSlot = 1,
};

struct IPointerInactive
{
}; /* size: 0x0008 */

class Spinlock<101,10,1>
{
}; /* size: 0x0004 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  memory_utilization_pctIdx = 2,
  total_physical_memory_kbIdx = 3,
  available_physical_memory_kbIdx = 4,
  total_page_file_kbIdx = 5,
  available_page_file_kbIdx = 6,
  total_virtual_address_space_kbIdx = 7,
  available_virtual_address_space_kbIdx = 8,
  available_extended_virtual_address_space_kbIdx = 9,
  memory_node_idIdx = 10,
  target_kbIdx = 11,
  reserved_kbIdx = 12,
  committed_kbIdx = 13,
  shared_committed_kbIdx = 14,
  awe_kbIdx = 15,
  pages_kbIdx = 16,
  notificationIdx = 17,
  process_indicatorsIdx = 18,
  system_indicatorsIdx = 19,
  node_idIdx = 20,
  apply_low_pmIdx = 21,
  apply_high_pmIdx = 22,
  revert_high_pmIdx = 23,
  call_stackIdx = 24,
  LastField = 25,
} TAG_UNNAMED_838, *PTAG_UNNAMED_838;

enum XeSosPkg::resource_monitor_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_839, *PTAG_UNNAMED_839;

struct XEPackage0::HistoryTargetParams
{
  /* 0x0000 */ unsigned __int64 m_maxMemory_text;
  /* 0x0008 */ unsigned __int64 m_maxMemory_sql;
  /* 0x0010 */ unsigned __int64 m_maxMemory_guid;
  /* 0x0018 */ unsigned int m_compressionLevel;
  /* 0x001c */ unsigned int m_summaryFrameFreq;
  /* 0x0020 */ wchar_t m_filePath[260];
  /* 0x0228 */ wchar_t m_dirName[260];
  /* 0x0430 */ wchar_t* m_transformationRuleSet;
  /* 0x0438 */ wchar_t* m_summaryRuleSet;
}; /* size: 0x0440 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_840, *PTAG_UNNAMED_840;

class AtomicBits<unsigned long>
{
  /* 0x0000 */ unsigned long m_bits;
}; /* size: 0x0004 */

class Indicator
{
  /* 0x0000 */ void* m_Handle;
  /* 0x0008 */ void* m_QueryIndicatorRoutine /* function */;
  /* 0x0010 */ class AtomicBits<unsigned long> m_stateMask;
  /* 0x0014 */ long Padding_278;
  /* 0x0018 */ unsigned __int64 m_poolMask[7];
}; /* size: 0x0050 */

class TSimpleStateMachine<6,8>
{
  /* 0x0000 */ unsigned long* m_stateMatrix;
  /* 0x0008 */ unsigned long m_currentState;
  /* 0x000c */ unsigned long m_numberOfStates;
  /* 0x0010 */ unsigned long m_numberOfSignals;
  /* 0x0014 */ unsigned long m_unreachable;
}; /* size: 0x0018 */

class ResourceClerkList
{
}; /* size: 0x0018 */

class MemoryBrokerClerkList
{
}; /* size: 0x0018 */

class ExternalCacheList
{
}; /* size: 0x0018 */

class MemoryUtilizationEffects::Effect
{
  /* 0x0000 */ enum MemoryUtilizationEffects::UtilizationState m_state;
  /* 0x0004 */ unsigned char m_applied;
  /* 0x0005 */ char Padding_279[3];
  /* 0x0008 */ unsigned int m_min;
  /* 0x000c */ unsigned int m_max;
  /* 0x0010 */ __int64 m_damper;
  /* 0x0018 */ __int64 m_onTimeout;
  /* 0x0020 */ __int64 m_ignoreTimeout;
  /* 0x0028 */ __int64 m_lastTime;
  /* 0x0030 */ __int64 m_duration;
}; /* size: 0x0038 */

class MemoryUtilizationEffects
{
  union
  {
    /* 0x0000 */ const wchar_t** sm_effectNames /* zero-length array */;
    /* 0x0000 */ const wchar_t** sm_stateNames /* zero-length array */;
    /* 0x0000 */ class MemoryUtilizationEffects::Effect m_effects[3];
  }; /* size: 0x00a8 */
}; /* size: 0x00a8 */

class SOS_Mutex
{
  /* 0x0000 */ class EventAutoInternal<SuspendQueueSLock> m_event;
  /* 0x0028 */ class SOS_Task* m_pOwningTaskNoRef;
}; /* size: 0x0030 */

class PeriodicTimer<5000>
{
  union
  {
    /* 0x0000 */ const class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> PeriodTicks;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastPeriodTime;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class CAutoRg<double>
{
}; /* size: 0x0008 */

class CAutoRg<DynInterval *>
{
}; /* size: 0x0008 */

class CostModelCombiner
{
  /* 0x0000 */ unsigned long m_costDistCount;
  /* 0x0004 */ unsigned long m_intervalCount;
  /* 0x0008 */ class CAutoRg<double> m_intervalEnds;
  /* 0x0010 */ class CAutoRg<double> m_cumulativeCostDist;
  /* 0x0018 */ class CAutoRg<DynInterval *> m_intervals;
}; /* size: 0x0020 */

class ResourceMonitor
{
  union
  {
    struct
    {
      /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_NotificationStarted;
      /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_NotificationStopped;
      /* 0x0010 */ unsigned long m_NextSuspendTime;
      /* 0x0014 */ volatile long m_NotificationsSent;
      /* 0x0018 */ __int64 m_MemoryLastNotification;
      /* 0x0020 */ class Worker* m_Worker;
      /* 0x0028 */ class SOS_RingBuffer* m_RingBuffer;
      /* 0x0030 */ class SOS_RingBuffer* m_MemoryBrokerClerkRingBuffer;
    }; /* size: 0x0038 */
    /* 0x0000 */ __int64 sm_StartIdleTime;
    struct
    {
      /* 0x0000 */ void* sm_IdleEvent;
      /* 0x0008 */ long Padding_280[12];
      /* 0x0038 */ double m_ExternalBenefit;
      /* 0x0040 */ class Indicator m_indicators[3];
      /* 0x0130 */ class TSimpleStateMachine<6,8> m_memoryStateMachine;
      /* 0x0148 */ class SOS_Node* m_node;
      /* 0x0150 */ class MemoryNode* m_memoryNode;
      /* 0x0158 */ class ResourceClerkList m_memClerks;
      /* 0x0170 */ class SOS_Scheduler* m_scheduler;
      /* 0x0178 */ unsigned long m_prevIndicators;
      /* 0x017c */ unsigned long m_status;
      /* 0x0180 */ unsigned long m_lastNotifications;
      /* 0x0184 */ long Padding_281;
      /* 0x0188 */ __int64 m_memoryTaskLastTime;
      /* 0x0190 */ unsigned long m_sleepingTime;
      /* 0x0194 */ long Padding_282;
      /* 0x0198 */ unsigned __int64 m_roundIdToUpdateSleepingTime;
      /* 0x01a0 */ unsigned long m_nodeCyclesInIdleReady;
      /* 0x01a4 */ int m_flushMemoryOnIdle;
    }; /* size: 0x0170 */
    /* 0x0000 */ class Indicator sm_configIndicators[3];
    /* 0x0000 */ const wchar_t** sm_NotificationNames /* zero-length array */;
    /* 0x0000 */ unsigned long sm_runningTime;
    struct
    {
      /* 0x0000 */ unsigned long sm_sleepingTime;
      /* 0x0004 */ long Padding_283[105];
      /* 0x01a8 */ class ResourceClerk* m_lastClerkNoAddRef;
    }; /* size: 0x000c */
    struct
    {
      /* 0x0000 */ void* sm_processWideEvent;
      /* 0x0008 */ long Padding_284[106];
      /* 0x01b0 */ class MemoryBrokerClerkList m_memBrokerClerks;
      /* 0x01c8 */ class ExternalCacheList m_externalCaches;
    }; /* size: 0x0038 */
    /* 0x0000 */ class MemoryUtilizationEffects sm_memEffects;
    /* 0x0000 */ unsigned long sm_memStateMatrix[8][6];
    /* 0x0000 */ const unsigned long sm_mapStateToNotification[6];
    /* 0x0000 */ const unsigned long sm_indicatorTypeMask[1];
    /* 0x0000 */ void* sm_queryHighMemoryResourceNotification /* function */;
    /* 0x0000 */ void* sm_queryLowMemoryResourceNotification /* function */;
    /* 0x0000 */ __int64 sm_IdleThreshold;
    struct
    {
      /* 0x0000 */ class SOS_Mutex sm_enterIdleMutex;
      /* 0x0030 */ long Padding_285[108];
      /* 0x01e0 */ class PeriodicTimer<5000> m_periodicNotificationTimer;
      /* 0x01e8 */ class PeriodicTimer<5000> m_resourceMonitorCallbackTimer;
    }; /* size: 0x0040 */
    /* 0x0000 */ class CostModelCombiner sm_costModelCombiner;
  }; /* size: 0x0170 */
}; /* size: 0x01f0 */

enum XeSqlPkg::background_job_error::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

class XE_AutoRg<CXFilePageForRead>
{
}; /* size: 0x0008 */

class XE_CXFileReader
{
  /* 0x0000 */ long Padding_286[146];
  /* 0x0248 */ class XE_AutoRg<CXFilePageForRead> m_cachedPages;
  /* 0x0250 */ unsigned int m_cachedPagesCount;
  /* 0x0254 */ unsigned int m_cachedPagesCurrent;
  /* 0x0258 */ struct CXFilePageForRead* m_currentPage;
  /* 0x0260 */ const struct XPRESS9_DECODER_T* m_pDecoder;
  /* 0x0268 */ unsigned char* m_pScratchPage;
  /* 0x0270 */ class XE_ILogReadMessageHandler* m_msgHandler;
  /* 0x0278 */ class CXFileReaderInterface* m_pReaderInterface;
  /* 0x0280 */ class CXFileReaderInterfaceFactory* m_pReaderInterfaceFactory;
}; /* size: 0x0288 */

typedef enum
{
  Value = 3,
} TAG_UNNAMED_841, *PTAG_UNNAMED_841;

typedef enum
{
  msg_sourceIdx = 0,
  message_log_idIdx = 1,
  flushed_logIdx = 2,
  end_of_logIdx = 3,
  recovery_pointIdx = 4,
  log_truncation_blockIdx = 5,
  hadr_truncation_blockIdx = 6,
  log_backup_lsnIdx = 7,
  minimum_skip_lsnIdx = 8,
  redo_pointIdx = 9,
  redo_timeIdx = 10,
  LastField = 11,
} TAG_UNNAMED_842, *PTAG_UNNAMED_842;

enum DBSTATUSENUM26
{
  DBSTATUS_S_ROWSETCOLUMN = 29,
};

typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION
{
  /* 0x0000 */ unsigned __int64 ReserveSize;
  /* 0x0008 */ unsigned __int64 ZeroBits;
  /* 0x0010 */ void* StackBase;
} PROCESS_STACK_ALLOCATION_INFORMATION, *PPROCESS_STACK_ALLOCATION_INFORMATION; /* size: 0x0018 */

typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX
{
  /* 0x0000 */ unsigned long PreferredNode;
  /* 0x0004 */ unsigned long Reserved0;
  /* 0x0008 */ unsigned long Reserved1;
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ struct _PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
} PROCESS_STACK_ALLOCATION_INFORMATION_EX, *PPROCESS_STACK_ALLOCATION_INFORMATION_EX; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 25,
  NVld = 1,
  VldEddOffset = 23,
  BufSize = 160,
} TAG_UNNAMED_843, *PTAG_UNNAMED_843;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 44,
} TAG_UNNAMED_844, *PTAG_UNNAMED_844;

typedef struct _IMAGE_IMPORT_BY_NAME
{
  /* 0x0000 */ unsigned short Hint;
  /* 0x0002 */ char Name[1];
  /* 0x0003 */ char __PADDING__[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME; /* size: 0x0004 */

typedef enum
{
  worker_addressIdx = 0,
  number_pagesIdx = 1,
  page_sizeIdx = 2,
  page_locationIdx = 3,
  allocator_typeIdx = 4,
  pool_idIdx = 5,
  memory_clerk_addressIdx = 6,
  memory_clerk_nameIdx = 7,
  LastField = 8,
} TAG_UNNAMED_845, *PTAG_UNNAMED_845;

class XeSosPkg::page_heap_memory_freed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_287[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_typeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

struct IWbemClientTransport
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_846, *PTAG_UNNAMED_846;

class HostedResourceGroupData
{
  /* 0x0000 */ unsigned long m_MaxGrantSize;
  /* 0x0004 */ unsigned long m_QueryTimeout;
  /* 0x0008 */ unsigned long m_MaxCpuTime;
  /* 0x000c */ unsigned long m_MaxDop;
}; /* size: 0x0010 */

struct tagMOUSEHOOKSTRUCT
{
  /* 0x0000 */ struct tagPOINT pt;
  /* 0x0008 */ struct HWND__* hwnd;
  /* 0x0010 */ unsigned int wHitTestCode;
  /* 0x0014 */ long Padding_288;
  /* 0x0018 */ unsigned __int64 dwExtraInfo;
}; /* size: 0x0020 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  dialog_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_847, *PTAG_UNNAMED_847;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 56,
} TAG_UNNAMED_848, *PTAG_UNNAMED_848;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_849, *PTAG_UNNAMED_849;

struct IRowsetView
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_850, *PTAG_UNNAMED_850;

typedef enum
{
  object_idIdx = 0,
  update_typeIdx = 1,
  from_brick_idIdx = 2,
  database_idIdx = 3,
  keyIdx = 4,
  LastField = 5,
} TAG_UNNAMED_851, *PTAG_UNNAMED_851;

enum CLUSPROP_PIFLAGS
{
  CLUSPROP_PIFLAG_STICKY = 1,
  CLUSPROP_PIFLAG_REMOVABLE = 2,
  CLUSPROP_PIFLAG_USABLE = 4,
  CLUSPROP_PIFLAG_DEFAULT_QUORUM = 8,
};

enum XeSosPkg::EventOpcode
{
  EVENT_OPCODE_BEGIN = 0,
  EVENT_OPCODE_END = 1,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_852, *PTAG_UNNAMED_852;

typedef enum
{
  Value = 2,
} TAG_UNNAMED_853, *PTAG_UNNAMED_853;

typedef enum _THREADINFOCLASS
{
  ThreadBasicInformation = 0,
  ThreadTimes = 1,
  ThreadPriority = 2,
  ThreadBasePriority = 3,
  ThreadAffinityMask = 4,
  ThreadImpersonationToken = 5,
  ThreadDescriptorTableEntry = 6,
  ThreadEnableAlignmentFaultFixup = 7,
  ThreadEventPair_Reusable = 8,
  ThreadQuerySetWin32StartAddress = 9,
  ThreadZeroTlsCell = 10,
  ThreadPerformanceCount = 11,
  ThreadAmILastThread = 12,
  ThreadIdealProcessor = 13,
  ThreadPriorityBoost = 14,
  ThreadSetTlsArrayAddress = 15,
  ThreadIsIoPending = 16,
  ThreadHideFromDebugger = 17,
  ThreadBreakOnTermination = 18,
  ThreadSwitchLegacyState = 19,
  ThreadIsTerminated = 20,
  ThreadLastSystemCall = 21,
  ThreadIoPriority = 22,
  ThreadCycleTime = 23,
  ThreadPagePriority = 24,
  ThreadActualBasePriority = 25,
  ThreadTebInformation = 26,
  ThreadCSwitchMon = 27,
  ThreadCSwitchPmu = 28,
  ThreadWow64Context = 29,
  ThreadGroupInformation = 30,
  ThreadUmsInformation = 31,
  ThreadCounterProfiling = 32,
  ThreadIdealProcessorEx = 33,
  ThreadCpuAccountingInformation = 34,
  ThreadSwitchStackCheck = 35,
  MaxThreadInfoClass = 36,
} THREADINFOCLASS, *PTHREADINFOCLASS;

struct tagRID_DEVICE_INFO_MOUSE
{
  /* 0x0000 */ unsigned long dwId;
  /* 0x0004 */ unsigned long dwNumberOfButtons;
  /* 0x0008 */ unsigned long dwSampleRate;
  /* 0x000c */ int fHasHorizontalWheel;
}; /* size: 0x0010 */

struct tagRID_DEVICE_INFO_KEYBOARD
{
  /* 0x0000 */ unsigned long dwType;
  /* 0x0004 */ unsigned long dwSubType;
  /* 0x0008 */ unsigned long dwKeyboardMode;
  /* 0x000c */ unsigned long dwNumberOfFunctionKeys;
  /* 0x0010 */ unsigned long dwNumberOfIndicators;
  /* 0x0014 */ unsigned long dwNumberOfKeysTotal;
}; /* size: 0x0018 */

struct tagRID_DEVICE_INFO_HID
{
  /* 0x0000 */ unsigned long dwVendorId;
  /* 0x0004 */ unsigned long dwProductId;
  /* 0x0008 */ unsigned long dwVersionNumber;
  /* 0x000c */ unsigned short usUsagePage;
  /* 0x000e */ unsigned short usUsage;
}; /* size: 0x0010 */

struct tagRID_DEVICE_INFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwType;
  union
  {
    /* 0x0008 */ struct tagRID_DEVICE_INFO_MOUSE mouse;
    /* 0x0008 */ struct tagRID_DEVICE_INFO_KEYBOARD keyboard;
    struct
    {
      /* 0x0008 */ struct tagRID_DEVICE_INFO_HID hid;
      /* 0x0018 */ long __PADDING__[2];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
}; /* size: 0x0020 */

typedef enum
{
  opcodeIdx = 0,
  worker_addressIdx = 1,
  callback_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_854, *PTAG_UNNAMED_854;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 53,
} TAG_UNNAMED_855, *PTAG_UNNAMED_855;

typedef enum
{
  database_idIdx = 0,
  database_reference_typeIdx = 1,
  lock_modeIdx = 2,
  timeoutIdx = 3,
  lock_optionIdx = 4,
  lock_policyIdx = 5,
  request_sourceIdx = 6,
  error_numberIdx = 7,
  severityIdx = 8,
  stateIdx = 9,
  LastField = 10,
} TAG_UNNAMED_856, *PTAG_UNNAMED_856;

typedef struct __vc_attributes::wire_marshalAttribute
{
  /* 0x0000 */ const char* wire_type;
} _vc_attributes::wire_marshalAttribute, *P_vc_attributes::wire_marshalAttribute; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 4,
  VldEddOffset = 5,
  BufSize = 60,
} TAG_UNNAMED_857, *PTAG_UNNAMED_857;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_858, *PTAG_UNNAMED_858;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_859, *PTAG_UNNAMED_859;

enum DBCOLUMNFLAGSENUM20
{
  DBCOLUMNFLAGS_SCALEISNEGATIVE = 16384,
  DBCOLUMNFLAGS_RESERVED = 0xffff8000,
};

typedef enum
{
  query_operation_node_idIdx = 0,
  first_acquireIdx = 1,
  max_dopIdx = 2,
  required_memory_serialIdx = 3,
  exchange_memoryIdx = 4,
  memory_max_useful_serialIdx = 5,
  desired_memoryIdx = 6,
  max_memoryIdx = 7,
  available_memoryIdx = 8,
  timeoutIdx = 9,
  LastField = 10,
} TAG_UNNAMED_860, *PTAG_UNNAMED_860;

typedef enum
{
  error_codeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_861, *PTAG_UNNAMED_861;

typedef enum
{
  NStatic = 4,
  NCustomizable = 3,
  NDynamic = 12,
  NVld = 4,
  VldEddOffset = 7,
  BufSize = 82,
} TAG_UNNAMED_862, *PTAG_UNNAMED_862;

class Spinlock<231,2,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_863, *PTAG_UNNAMED_863;

typedef enum
{
  is_cachedIdx = 0,
  is_recoveredIdx = 1,
  is_dacIdx = 2,
  database_idIdx = 3,
  packet_sizeIdx = 4,
  optionsIdx = 5,
  options_textIdx = 6,
  database_nameIdx = 7,
  LastField = 8,
} TAG_UNNAMED_864, *PTAG_UNNAMED_864;

struct BitmapWord
{
  /* 0x0000 */ const unsigned int m_wordIdx;
  /* 0x0004 */ unsigned int m_bitVal;
}; /* size: 0x0008 */

typedef enum
{
  Value = 0,
} TAG_UNNAMED_865, *PTAG_UNNAMED_865;

typedef struct _SINGLE_LIST_ENTRY
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY; /* size: 0x0008 */

class SpinlockHolder<170,3,1>;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  scheduler_addressIdx = 2,
  ticksIdx = 3,
  source_workerIdx = 4,
  target_workerIdx = 5,
  worker_signal_timeIdx = 6,
  disk_io_completedIdx = 7,
  timer_expiredIdx = 8,
  actionIdx = 9,
  call_stackIdx = 10,
  LastField = 11,
} TAG_UNNAMED_866, *PTAG_UNNAMED_866;

typedef struct _RTL_BALANCED_LINKS
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS* Parent;
  /* 0x0008 */ struct _RTL_BALANCED_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_BALANCED_LINKS* RightChild;
  /* 0x0018 */ char Balance;
  /* 0x0019 */ unsigned char Reserved[3];
  /* 0x001c */ long __PADDING__[1];
} RTL_BALANCED_LINKS, *PRTL_BALANCED_LINKS; /* size: 0x0020 */

typedef struct _RTL_AVL_TABLE
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS BalancedRoot;
  /* 0x0020 */ void* OrderedPointer;
  /* 0x0028 */ unsigned long WhichOrderedElement;
  /* 0x002c */ unsigned long NumberGenericTableElements;
  /* 0x0030 */ unsigned long DepthOfTree;
  /* 0x0034 */ long Padding_289;
  /* 0x0038 */ struct _RTL_BALANCED_LINKS* RestartKey;
  /* 0x0040 */ unsigned long DeleteCount;
  /* 0x0044 */ long Padding_290;
  /* 0x0048 */ void* CompareRoutine /* function */;
  /* 0x0050 */ void* AllocateRoutine /* function */;
  /* 0x0058 */ void* FreeRoutine /* function */;
  /* 0x0060 */ void* TableContext;
} RTL_AVL_TABLE, *PRTL_AVL_TABLE; /* size: 0x0068 */

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_867, *PTAG_UNNAMED_867;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_868, *PTAG_UNNAMED_868;

typedef enum
{
  database_idIdx = 0,
  commit_policyIdx = 1,
  commit_policy_targetIdx = 2,
  sync_stateIdx = 3,
  sync_log_blockIdx = 4,
  group_idIdx = 5,
  replica_idIdx = 6,
  ag_database_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_869, *PTAG_UNNAMED_869;

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  is_volume_limit_hitIdx = 7,
  pathIdx = 8,
  io_dataIdx = 9,
  LastField = 10,
} TAG_UNNAMED_870, *PTAG_UNNAMED_870;

class std::numeric_limits<signed char>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 11,
  NVld = 2,
  VldEddOffset = 8,
  BufSize = 76,
} TAG_UNNAMED_871, *PTAG_UNNAMED_871;

struct IStorage
{
}; /* size: 0x0008 */

typedef enum _THREAD_UMS_INFORMATION_COMMAND
{
  UmsInformationCommandInvalid = 0,
  UmsInformationCommandAttach = 1,
  UmsInformationCommandDetach = 2,
} THREAD_UMS_INFORMATION_COMMAND, *PTHREAD_UMS_INFORMATION_COMMAND;

struct SEReplPrefetchStatsSLock
{
}; /* size: 0x0004 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  memory_utilization_pctIdx = 2,
  total_physical_memory_kbIdx = 3,
  available_physical_memory_kbIdx = 4,
  total_page_file_kbIdx = 5,
  available_page_file_kbIdx = 6,
  total_virtual_address_space_kbIdx = 7,
  available_virtual_address_space_kbIdx = 8,
  available_extended_virtual_address_space_kbIdx = 9,
  memory_node_idIdx = 10,
  target_kbIdx = 11,
  reserved_kbIdx = 12,
  committed_kbIdx = 13,
  shared_committed_kbIdx = 14,
  awe_kbIdx = 15,
  pages_kbIdx = 16,
  failureIdx = 17,
  resourcesIdx = 18,
  factorIdx = 19,
  last_errorIdx = 20,
  taskIdx = 21,
  pool_metadata_idIdx = 22,
  call_stackIdx = 23,
  LastField = 24,
} TAG_UNNAMED_872, *PTAG_UNNAMED_872;

struct XE_StaticPackage<1>::LocaleEntry
{
  /* 0x0000 */ unsigned long locale;
  /* 0x0004 */ long Padding_291;
  /* 0x0008 */ struct HINSTANCE__* hModule;
}; /* size: 0x0010 */

class XE_StaticPackage<1>
{
  /* 0x0000 */ long Padding_292[2];
  /* 0x0008 */ struct XEPackageMetadata* m_pMetadata;
  /* 0x0010 */ struct XBitmap<StaticStorage<1> >* const m_enabled;
  /* 0x0018 */ wchar_t m_baseRllPath[260];
  /* 0x0220 */ struct XE_StaticPackage<1>::LocaleEntry m_CurrentLocale;
  /* 0x0230 */ void* m_localeLock;
  /* 0x0238 */ void* m_pfnLoadString /* function */;
  /* 0x0240 */ struct HINSTANCE__* m_hUser32;
}; /* size: 0x0248 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_873, *PTAG_UNNAMED_873;

class XeSqlPkg::stack_trace
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_293[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int dump_optionsOffset;
    /* 0x0000 */ const int bucket_hintOffset;
    /* 0x0000 */ const int dump_classOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int messageOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

typedef enum
{
  Value = 2,
} TAG_UNNAMED_874, *PTAG_UNNAMED_874;

class Spinlock<82,13,1>
{
}; /* size: 0x0004 */

enum XeSosPkg::memory_node_oom_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef struct _RTL_PROCESS_MODULE_INFORMATION
{
  /* 0x0000 */ void* Section;
  /* 0x0008 */ void* MappedBase;
  /* 0x0010 */ void* ImageBase;
  /* 0x0018 */ unsigned long ImageSize;
  /* 0x001c */ unsigned long Flags;
  /* 0x0020 */ unsigned short LoadOrderIndex;
  /* 0x0022 */ unsigned short InitOrderIndex;
  /* 0x0024 */ unsigned short LoadCount;
  /* 0x0026 */ unsigned short OffsetToFileName;
  /* 0x0028 */ unsigned char FullPathName[256];
} RTL_PROCESS_MODULE_INFORMATION, *PRTL_PROCESS_MODULE_INFORMATION; /* size: 0x0128 */

typedef struct _RTL_PROCESS_MODULES
{
  /* 0x0000 */ unsigned long NumberOfModules;
  /* 0x0004 */ long Padding_294;
  /* 0x0008 */ struct _RTL_PROCESS_MODULE_INFORMATION Modules[1];
} RTL_PROCESS_MODULES, *PRTL_PROCESS_MODULES; /* size: 0x0130 */

typedef enum
{
  database_idIdx = 0,
  log_operationIdx = 1,
  is_passive_stateIdx = 2,
  state_logIdx = 3,
  log_recordIdx = 4,
  error_code_pointerIdx = 5,
  current_lsnIdx = 6,
  LastField = 7,
} TAG_UNNAMED_875, *PTAG_UNNAMED_875;

class Spinlock<20,19,1>
{
}; /* size: 0x0004 */

typedef enum
{
  Value = 0,
} TAG_UNNAMED_876, *PTAG_UNNAMED_876;

class XeSqlPkg::buffer_pool_page_allocated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_295[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int page_sizeOffset;
    /* 0x0000 */ const int page_locationOffset;
    /* 0x0000 */ const int allocator_typeOffset;
    /* 0x0000 */ const int numa_node_idOffset;
    /* 0x0000 */ const int steal_optionsOffset;
    /* 0x0000 */ const int pool_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

typedef enum
{
  retry_interval_msIdx = 0,
  retry_countIdx = 1,
  id_or_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_877, *PTAG_UNNAMED_877;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  total_pagesIdx = 2,
  simulated_pagesIdx = 3,
  simulation_benefitIdx = 4,
  internal_benefitIdx = 5,
  external_benefitIdx = 6,
  value_of_memoryIdx = 7,
  periodic_freed_pagesIdx = 8,
  internal_freed_pagesIdx = 9,
  clerk_nameIdx = 10,
  call_stackIdx = 11,
  LastField = 12,
} TAG_UNNAMED_878, *PTAG_UNNAMED_878;

typedef enum
{
  login_durationIdx = 0,
  is_sql_authenticationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_879, *PTAG_UNNAMED_879;

enum XeSqlPkg::BrokerRouteType
{
  BRT_LOCAL = 1,
  BRT_REMOTE = 2,
  BRT_DELAYED = 3,
};

enum XeSosPkg::memory_broker_clerks_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_880, *PTAG_UNNAMED_880;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_881, *PTAG_UNNAMED_881;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 12,
  NVld = 2,
  VldEddOffset = 9,
  BufSize = 92,
} TAG_UNNAMED_882, *PTAG_UNNAMED_882;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 44,
} TAG_UNNAMED_883, *PTAG_UNNAMED_883;

struct IXMLDOMEntityReference
{
}; /* size: 0x0008 */

struct IEnumWbemClassObject
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 0,
} TAG_UNNAMED_884, *PTAG_UNNAMED_884;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_885, *PTAG_UNNAMED_885;

enum XeSosPkg::exception_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 42,
} TAG_UNNAMED_886, *PTAG_UNNAMED_886;

typedef enum
{
  database_idIdx = 0,
  previous_valueIdx = 1,
  new_valueIdx = 2,
  LastField = 3,
} TAG_UNNAMED_887, *PTAG_UNNAMED_887;

enum DBCOMPAREOPSENUM20
{
  DBCOMPAREOPS_NOTBEGINSWITH = 9,
  DBCOMPAREOPS_NOTCONTAINS = 10,
};

enum WaitForGraphEdge::WaitForGraphEdgeState
{
  EDGE_UNSAFE = 0,
  EDGE_SAFE = 1,
  EDGE_TEMP_SAFE = 2,
  EDGE_INVALID_STATE = 3,
};

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  LastField = 2,
} TAG_UNNAMED_888, *PTAG_UNNAMED_888;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_889, *PTAG_UNNAMED_889;

typedef enum
{
  availability_group_idIdx = 0,
  availability_group_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_890, *PTAG_UNNAMED_890;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  delta_timeIdx = 2,
  memory_ratioIdx = 3,
  new_targetIdx = 4,
  overallIdx = 5,
  rateIdx = 6,
  currently_predicatedIdx = 7,
  currently_allocatedIdx = 8,
  previously_allocatedIdx = 9,
  brokerIdx = 10,
  notificationIdx = 11,
  call_stackIdx = 12,
  LastField = 13,
} TAG_UNNAMED_891, *PTAG_UNNAMED_891;

struct XESessionBufferProperties
{
  /* 0x0000 */ enum XEBufferPartitionOption m_partitionOption;
  /* 0x0004 */ enum XESessionLocality m_bufferLocality;
  /* 0x0008 */ unsigned __int64 m_bufferSize;
  /* 0x0010 */ unsigned short m_minBuffers;
  /* 0x0012 */ unsigned short m_maxBuffers;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct XESessionProperties
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_296[2];
  /* 0x0004 */ enum XESessionFlags m_flags;
  /* 0x0008 */ enum XESessionBufferPolicy m_flushPolicy;
  /* 0x000c */ long Padding_297;
  /* 0x0010 */ struct XESessionBufferProperties m_bufferProperties;
  /* 0x0028 */ unsigned __int64 m_lbaSize;
  /* 0x0030 */ enum XELargeSessionBufferPolicy m_lbaPolicy;
  /* 0x0034 */ unsigned int m_flushTimeout;
  /* 0x0038 */ wchar_t m_name[256];
  /* 0x0238 */ struct _GUID m_tag;
  /* 0x0248 */ int m_isDumpFullData;
  /* 0x024c */ long __PADDING__[1];
}; /* size: 0x0250 */

class XE_SessionObjectEnumerator
{
  /* 0x0000 */ enum XEHandleType m_objectType;
  /* 0x0004 */ long Padding_298;
  /* 0x0008 */ void* m_sessionEnum;
  /* 0x0010 */ void* m_hSession;
  /* 0x0018 */ struct XESessionProperties m_sessionProps;
  /* 0x0268 */ void* m_objectEnum;
  /* 0x0270 */ void* m_hObject;
  /* 0x0278 */ void* m_packagesHolder;
  /* 0x0280 */ struct _GUID m_tag;
  /* 0x0290 */ int m_fMatchTag;
}; /* size: 0x0298 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 0,
  VldEddOffset = 12,
  BufSize = 83,
} TAG_UNNAMED_892, *PTAG_UNNAMED_892;

enum XeSqlPkg::ESpCacheRemoveMethod
{
  SCRM_COMPPLAN_REMOVE = 1,
  SCRM_PROC_CACHE_FLUSH = 2,
  SCRM_OBJ_CACHE_FLUSH = 3,
  SCRM_SQL_CACHE_FLUSH = 4,
  SCRM_PROCHDR_CACHE_FLUSH = 5,
};

struct IInternetProtocol
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 100,
} TAG_UNNAMED_893, *PTAG_UNNAMED_893;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 13,
  NVld = 3,
  VldEddOffset = 9,
  BufSize = 96,
} TAG_UNNAMED_894, *PTAG_UNNAMED_894;

typedef enum
{
  idIdx = 0,
  is_onlineIdx = 1,
  LastField = 2,
} TAG_UNNAMED_895, *PTAG_UNNAMED_895;

class XeSqlPkg::database_poll_segment_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_299[143];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int sender_brick_idOffset;
    /* 0x0000 */ const int receiver_brick_idOffset;
    /* 0x0000 */ const int remote_database_segment_idOffset;
    /* 0x0000 */ const int remote_database_segment_stateOffset;
  }; /* size: 0x0015 */
}; /* size: 0x0258 */

typedef enum
{
  current_stateIdx = 0,
  availability_group_idIdx = 1,
  availability_group_nameIdx = 2,
  availability_replica_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_896, *PTAG_UNNAMED_896;

typedef enum
{
  opcodeIdx = 0,
  wake_up_reasonIdx = 1,
  intervalIdx = 2,
  LastField = 3,
} TAG_UNNAMED_897, *PTAG_UNNAMED_897;

class XeSqlPkg::producer_receive_correlated_params
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_300[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int query_operation_node_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_898, *PTAG_UNNAMED_898;

typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
  /* 0x0000 */ unsigned long ulFlags;
  /* 0x0004 */ unsigned long ulEncodedAssemblyIdentityLength;
  /* 0x0008 */ unsigned long ulManifestPathType;
  /* 0x000c */ unsigned long ulManifestPathLength;
  /* 0x0010 */ union _LARGE_INTEGER liManifestLastWriteTime;
  /* 0x0018 */ unsigned long ulPolicyPathType;
  /* 0x001c */ unsigned long ulPolicyPathLength;
  /* 0x0020 */ union _LARGE_INTEGER liPolicyLastWriteTime;
  /* 0x0028 */ unsigned long ulMetadataSatelliteRosterIndex;
  /* 0x002c */ unsigned long ulManifestVersionMajor;
  /* 0x0030 */ unsigned long ulManifestVersionMinor;
  /* 0x0034 */ unsigned long ulPolicyVersionMajor;
  /* 0x0038 */ unsigned long ulPolicyVersionMinor;
  /* 0x003c */ unsigned long ulAssemblyDirectoryNameLength;
  /* 0x0040 */ const wchar_t* lpAssemblyEncodedAssemblyIdentity;
  /* 0x0048 */ const wchar_t* lpAssemblyManifestPath;
  /* 0x0050 */ const wchar_t* lpAssemblyPolicyPath;
  /* 0x0058 */ const wchar_t* lpAssemblyDirectoryName;
  /* 0x0060 */ unsigned long ulFileCount;
  /* 0x0064 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION; /* size: 0x0068 */

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  is_loggedIdx = 2,
  rollbackIdx = 3,
  successIdx = 4,
  database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_899, *PTAG_UNNAMED_899;

struct IMarshal
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 5,
} TAG_UNNAMED_900, *PTAG_UNNAMED_900;

typedef enum
{
  query_operation_node_idIdx = 0,
  actual_memory_grantIdx = 1,
  exchange_required_memoryIdx = 2,
  max_query_memory_usedIdx = 3,
  max_exchange_memory_usedIdx = 4,
  max_misc_memory_usedIdx = 5,
  max_misc_grantsIdx = 6,
  LastField = 7,
} TAG_UNNAMED_901, *PTAG_UNNAMED_901;

struct tagENHMETARECORD
{
  /* 0x0000 */ unsigned long iType;
  /* 0x0004 */ unsigned long nSize;
  /* 0x0008 */ unsigned long dParm[1];
}; /* size: 0x000c */

typedef enum
{
  Value = 2,
} TAG_UNNAMED_902, *PTAG_UNNAMED_902;

class DmpPointer<StackFrames<40> >
{
  /* 0x0000 */ class StackFrames<40>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 160,
} TAG_UNNAMED_903, *PTAG_UNNAMED_903;

struct XE_TEvent<3,0,1>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,1> m_dynamicAttr;
  /* 0x00a8 */ struct XEEvent m_event;
}; /* size: 0x00f0 */

class XeSqlPkg::failed_hresult
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_301[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int hresultOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

typedef enum
{
  addressIdx = 0,
  current_countIdx = 1,
  LastField = 2,
} TAG_UNNAMED_904, *PTAG_UNNAMED_904;

enum DBACCESSORFLAGSENUM
{
  DBACCESSOR_INVALID = 0,
  DBACCESSOR_PASSBYREF = 1,
  DBACCESSOR_ROWDATA = 2,
  DBACCESSOR_PARAMETERDATA = 4,
  DBACCESSOR_OPTIMIZED = 8,
  DBACCESSOR_INHERITED = 16,
};

class XE_TCollection<0,0>
{
  /* 0x0000 */ struct XEObjectCollection* const m_pCollection;
}; /* size: 0x0008 */

enum PostCatchActions
{
  EX_RESET_STACK = 1,
  EX_RETHROW_SAVED = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_905, *PTAG_UNNAMED_905;

struct XE_BufferMap::SortByBufferIndex
{
  /* 0x0000 */ class XE_FileSetMemoryMap* const m_mapSet;
}; /* size: 0x0008 */

typedef enum
{
  Value = 9,
} TAG_UNNAMED_906, *PTAG_UNNAMED_906;

typedef enum
{
  source_database_idIdx = 0,
  line_noIdx = 1,
  feature_idIdx = 2,
  statementIdx = 3,
  LastField = 4,
} TAG_UNNAMED_907, *PTAG_UNNAMED_907;

struct IWbemEventConsumerProvider
{
}; /* size: 0x0008 */

enum SOS_MemoryPool::AllocationOptions
{
  AllocDefault = 0,
  AllocFailFast = 1,
  AllocFailSilent = 2,
  AllocOverrideLimits = 4,
  AllocIgnoreLimits = 8,
};

typedef enum
{
  database_idIdx = 0,
  redo_statusIdx = 1,
  shutdown_typeIdx = 2,
  stopatIdx = 3,
  group_idIdx = 4,
  replica_idIdx = 5,
  ag_database_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_908, *PTAG_UNNAMED_908;

class CAutoBase<XE_DeserializedMetadata>
{
  /* 0x0000 */ class XE_DeserializedMetadata* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  opcodeIdx = 2,
  node_idIdx = 3,
  process_utilizationIdx = 4,
  system_idleIdx = 5,
  user_mode_timeIdx = 6,
  kernel_mode_timeIdx = 7,
  page_faultsIdx = 8,
  working_set_deltaIdx = 9,
  memory_utilizationIdx = 10,
  call_stackIdx = 11,
  LastField = 12,
} TAG_UNNAMED_909, *PTAG_UNNAMED_909;

typedef enum
{
  source_database_idIdx = 0,
  object_idIdx = 1,
  line_numberIdx = 2,
  offsetIdx = 3,
  offset_endIdx = 4,
  error_numberIdx = 5,
  partial_textIdx = 6,
  LastField = 7,
} TAG_UNNAMED_910, *PTAG_UNNAMED_910;

enum CLUSTER_QUORUM_TYPE
{
  OperationalQuorum = 0,
  ModifyQuorum = 1,
};

typedef enum
{
  BasePct = 100,
} TAG_UNNAMED_911, *PTAG_UNNAMED_911;

typedef enum
{
  crawl_operationIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  database_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_912, *PTAG_UNNAMED_912;

class SpinlockHolder<261,1,1>;

struct PPM_WMI_LEGACY_PERFSTATE
{
  /* 0x0000 */ unsigned long Frequency;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long PercentFrequency;
}; /* size: 0x000c */

enum SOS_SchedulerRingRecord::scheduler_action
{
  SCHEDULER_SWITCH_CONTEXT = 0,
  SCHEDULER_ABORT = 1,
  SCHEDULER_SWITCH_PREEMPTIVE = 2,
  SCHEDULER_IDLE = 3,
  SCHEDULER_PREEMPTIVE_WAIT = 4,
  SCHEDULER_PREEMPTIVE_RESUME = 5,
  ENTER_CALLBACK = 6,
  BEFORE_CALLBACK_WAIT = 7,
  BEFORE_CALLBACK_SWITCH = 8,
  FAILED_CALLBACK_SWITCH = 9,
  BEFORE_UMS_SWITCH = 10,
  AFTER_UMS_SWITCH = 11,
  BEFORE_UMS_PRIMARY_SWITCH = 12,
  AFTER_UMS_IDLE_SWITCH = 13,
  AFTER_UMS_PRIMARY_SWITCH = 14,
  BEFORE_BOOTSTRAP_SWITCH = 15,
  AFTER_BOOTSTRAP_SWITCH = 16,
  BOOTSTRAP_COMPLETED = 17,
  SCHEDULER_NONPREEMPTIVE_RESUME = 18,
  SCHEDULER_IDLE_ENQUEUE = 19,
  SCHEDULER_IDLE_CONSUME = 20,
};

struct IInternetProtocolRoot
{
}; /* size: 0x0008 */

enum XeSosPkg::scheduler_monitor_stalled_dispatcher_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

struct IWbemCallResult
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_913, *PTAG_UNNAMED_913;

class AutoSpinlockHolder<133,4,1>;

typedef enum
{
  COST_STATUS_CALCULATED = 1,
  COST_STATUS_TRANSFER_NEEDED = 2,
} TAG_UNNAMED_914, *PTAG_UNNAMED_914;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_915, *PTAG_UNNAMED_915;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_916, *PTAG_UNNAMED_916;

typedef enum
{
  MAX_ENTRIES = 18,
} TAG_UNNAMED_917, *PTAG_UNNAMED_917;

struct tagCAPROPVARIANT
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_302;
  /* 0x0008 */ struct tagPROPVARIANT* pElems;
}; /* size: 0x0010 */

enum DBSOURCETYPEENUM20
{
  DBSOURCETYPE_DATASOURCE_TDP = 1,
  DBSOURCETYPE_DATASOURCE_MDP = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_918, *PTAG_UNNAMED_918;

class SpinlockHolder<204,3,1>;

typedef enum
{
  HashEntryLinkOff = 0,
} TAG_UNNAMED_919, *PTAG_UNNAMED_919;

typedef enum
{
  Value = 15,
} TAG_UNNAMED_920, *PTAG_UNNAMED_920;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  filegroup_idIdx = 3,
  is_log_fileIdx = 4,
  file_logical_nameIdx = 5,
  file_physical_nameIdx = 6,
  LastField = 7,
} TAG_UNNAMED_921, *PTAG_UNNAMED_921;

typedef enum
{
  exit_codeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_922, *PTAG_UNNAMED_922;

class AutoSpinlockHolder<34,18,1>;

enum SchedulerPoolData::MAX_SUM_USAGE
{
  MAX_SUM_UNKNOWN = 0,
  MAX_SUM_LT100 = 1,
  CAP_SUM_LT100 = 2,
};

typedef enum
{
  protocol_execution_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_923, *PTAG_UNNAMED_923;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

typedef struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION
{
  /* 0x0000 */ unsigned long FileNameLength;
  /* 0x0004 */ wchar_t FileName[1];
  /* 0x0006 */ char __PADDING__[2];
} FILE_NETWORK_PHYSICAL_NAME_INFORMATION, *PFILE_NETWORK_PHYSICAL_NAME_INFORMATION; /* size: 0x0008 */

enum XeSqlPkg::SortSubEventId
{
  SORT_INPUT_TRANSITION = 0,
  SORT_MERGE_TRANSITION = 1,
  SORT_POSTINPUT_TRANSITION = 2,
  SORT_OUTPUT_TRANSITION = 3,
  SORT_FINISHED_TRANSITION = 4,
  SORT_CLEANUP_TRANSITION = 5,
  SORT_BEST_MERGE = 6,
};

struct CSerializeContext<RPCStream>::ClassSerializer
{
}; /* size: 0x0001 */

struct TransmitterPendingTransportUsersSLock
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_924, *PTAG_UNNAMED_924;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_925, *PTAG_UNNAMED_925;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 36,
} TAG_UNNAMED_926, *PTAG_UNNAMED_926;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_927, *PTAG_UNNAMED_927;

class SpinlockHolder<128,7,1>;

class XE_IMetadata
{
  /* 0x0000 */ long Padding_303[2];
  /* 0x0008 */ struct _GUID m_Signature;
  /* 0x0018 */ unsigned short m_Generation;
  /* 0x001a */ char Padding_304[6];
  /* 0x0020 */ class SEListElem m_link;
}; /* size: 0x0030 */

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_928, *PTAG_UNNAMED_928;

struct DelayedPartitionedStackSLock
{
}; /* size: 0x0004 */

struct IPropertyPageSite
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_929, *PTAG_UNNAMED_929;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  recovery_unit_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_930, *PTAG_UNNAMED_930;

struct PROCESSOR_IDLESTATE_POLICY
{
  /* 0x0000 */ unsigned short Revision;
  union
  {
    union
    {
      /* 0x0002 */ unsigned short AsWORD;
      struct /* bitfield */
      {
        /* 0x0002 */ unsigned short AllowScaling : 1; /* bit position: 0 */
        /* 0x0002 */ unsigned short Disabled : 1; /* bit position: 1 */
        /* 0x0002 */ unsigned short Reserved : 14; /* bit position: 2 */
      }; /* bitfield */
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ Flags;
  /* 0x0004 */ unsigned long PolicyCount;
  /* 0x0008 */ struct PROCESSOR_IDLESTATE_INFO Policy[3];
}; /* size: 0x0020 */

enum WORKER_QUEUE_TYPE
{
  NORMAL_WORKERS = 0,
  PRIMARY_WORKERS = 1,
  LAST_QUEUE_TYPE = 2,
};

class std::tr1::bad_weak_ptr
{
}; /* size: 0x0018 */

typedef struct _FILE_SFIO_RESERVE_INFORMATION
{
  /* 0x0000 */ unsigned long RequestsPerPeriod;
  /* 0x0004 */ unsigned long Period;
  /* 0x0008 */ unsigned char RetryFailures;
  /* 0x0009 */ unsigned char Discardable;
  /* 0x000a */ char Padding_305[2];
  /* 0x000c */ unsigned long RequestSize;
  /* 0x0010 */ unsigned long NumOutstandingRequests;
} FILE_SFIO_RESERVE_INFORMATION, *PFILE_SFIO_RESERVE_INFORMATION; /* size: 0x0014 */

typedef enum
{
  index_nameIdx = 0,
  LastField = 1,
} TAG_UNNAMED_931, *PTAG_UNNAMED_931;

class SpinlockHolder<201,3,1>;

typedef enum
{
  HashEntryLinkOff = 248,
} TAG_UNNAMED_932, *PTAG_UNNAMED_932;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_933, *PTAG_UNNAMED_933;

enum XeSqlPkg::HekatonSlowParamPassReason
{
  ReasonNone = 0,
  ParameterDefaults = 1,
  NamedParameters = 2,
  ParameterConversion = 3,
  ParameterError = 4,
};

struct tagHELPINFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iContextType;
  /* 0x0008 */ int iCtrlId;
  /* 0x000c */ long Padding_306;
  /* 0x0010 */ void* hItemHandle;
  /* 0x0018 */ unsigned __int64 dwContextId;
  /* 0x0020 */ struct tagPOINT MousePos;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 20,
} TAG_UNNAMED_934, *PTAG_UNNAMED_934;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_935, *PTAG_UNNAMED_935;

class CAutoBase<XEPackage0::PairingTarget>
{
  /* 0x0000 */ class XEPackage0::PairingTarget* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 32,
  NRemainder = 0,
} TAG_UNNAMED_936, *PTAG_UNNAMED_936;

class XeSqlPkg::query_rpc_prepare_to_delete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_307[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_937, *PTAG_UNNAMED_937;

class RefCountImpl<XE_ConfiguredSessionEnumerator>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct XE_TArray<XEDataAttribute,19>
{
  /* 0x0000 */ struct XEDataAttribute m_array[19];
}; /* size: 0x02f8 */

struct XE_TEvent<4,0,19>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,19> m_dynamicAttr;
  /* 0x03a0 */ struct XEEvent m_event;
}; /* size: 0x03e8 */

typedef enum
{
  database_idIdx = 0,
  resource_pool_idIdx = 1,
  xtp_memory_broker_target_allocationsIdx = 2,
  xtp_memory_broker_allocationsIdx = 3,
  xtp_memory_broker_overall_memoryIdx = 4,
  system_physical_memory_highIdx = 5,
  system_virtual_memory_lowIdx = 6,
  process_physical_memory_lowIdx = 7,
  process_virtual_memory_lowIdx = 8,
  grace_periodIdx = 9,
  LastField = 10,
} TAG_UNNAMED_938, *PTAG_UNNAMED_938;

typedef enum
{
  NodeCount = 64,
  NotInPartialList = 0xffffffff,
} TAG_UNNAMED_939, *PTAG_UNNAMED_939;

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_940, *PTAG_UNNAMED_940;

enum XeSqlPkg::AlterDBOptionType
{
  SE = 1,
  RE = 2,
  STATE = 3,
  COLLATION = 5,
};

enum SOS_MemoryBlockAllocator::CheckNuma
{
  NoCheck = 0,
  CheckAlways = 1,
  CheckAndIgnore = 2,
};

class SpinlockHolder<283,1,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_941, *PTAG_UNNAMED_941;

typedef enum
{
  blockShift = 16,
  blockAlignment = 0x10000,
  blockMask = -65536,
  LookupArraySize = 0x10000,
} TAG_UNNAMED_942, *PTAG_UNNAMED_942;

typedef struct _RPC_SECURITY_QOS_V3_A
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Capabilities;
  /* 0x0008 */ unsigned long IdentityTracking;
  /* 0x000c */ unsigned long ImpersonationType;
  /* 0x0010 */ unsigned long AdditionalSecurityInfoType;
  /* 0x0014 */ long Padding_308;
  union
  {
    /* 0x0018 */ struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
  } /* size: 0x0008 */ u;
  /* 0x0020 */ void* Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A; /* size: 0x0028 */

class XeCloudMinPkg::dummy_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_309[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int replica_typeOffset;
    /* 0x0000 */ const int optionsOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 36,
} TAG_UNNAMED_943, *PTAG_UNNAMED_943;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_944, *PTAG_UNNAMED_944;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 0,
  VldEddOffset = 10,
  BufSize = 68,
} TAG_UNNAMED_945, *PTAG_UNNAMED_945;

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_946, *PTAG_UNNAMED_946;

typedef struct __vc_attributes::helper_attributes::help_stringAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::helper_attributes::help_stringAttribute, *P_vc_attributes::helper_attributes::help_stringAttribute; /* size: 0x0008 */

enum SOS_MemoryBlockAllocator::CommitResult
{
  CommitOk = 0,
  CommitFail = 1,
  CommitAway = 2,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_947, *PTAG_UNNAMED_947;

struct IWbemBackupRestore
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_948, *PTAG_UNNAMED_948;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_949, *PTAG_UNNAMED_949;

typedef enum
{
  database_idIdx = 0,
  commit_policyIdx = 1,
  delayIdx = 2,
  prior_hardened_log_blockIdx = 3,
  new_hardened_log_blockIdx = 4,
  harden_statusIdx = 5,
  group_idIdx = 6,
  replica_idIdx = 7,
  ag_database_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_950, *PTAG_UNNAMED_950;

enum XE_ConstantElimination<char,4096>::STREAM_STATE
{
  NOT_A_LETTER = 0,
  SOME_LETTER = 1,
  INSIDE_STRING_CONSTANT = 2,
  INSIDE_NUMERIC_CONSTANT = 3,
  INSIDE_BINARY_CONSTANT = 4,
  INSIDE_COMMENT_BLOCK = 5,
  INSIDE_COMMENT_LINE = 6,
};

class XE_ConstantElimination<char,4096>
{
  /* 0x0000 */ const char* m_userBuffer;
  /* 0x0008 */ unsigned int m_userBufSize;
  /* 0x000c */ unsigned int m_pos;
  /* 0x0010 */ enum XE_ConstantElimination<char,4096>::STREAM_STATE m_streamState;
  /* 0x0014 */ char m_outBuffer[4096];
  /* 0x1014 */ unsigned int m_endOfOutBuffer;
  /* 0x1018 */ char m_prevItem;
}; /* size: 0x1020 */

enum NLSIndex
{
  NLS_QUERYRGM = 0,
  NLS_SNI_MEMOBJ = 1,
  NLS_SNI_CACHE = 2,
  NLS_SNI_HOST = 3,
  NLS_SXC_USERSTORE = 4,
  NLS_BUILTIN_HASHTABLE = 5,
  NLS_SOAP_SESSPOOL = 6,
  NLS_LATCH_STATS = 7,
  NLS_SNI_NODE_PENDING_IO_QUEUE = 8,
  NLS_LAST = 9,
};

typedef struct _INHERITED_FROMA
{
  /* 0x0000 */ long GenerationGap;
  /* 0x0004 */ long Padding_310;
  /* 0x0008 */ char* AncestorName;
} INHERITED_FROMA, *PINHERITED_FROMA; /* size: 0x0010 */

typedef enum
{
  MinAdjustmentInterval = 100,
} TAG_UNNAMED_951, *PTAG_UNNAMED_951;

typedef enum
{
  BucketSetCount = 4,
} TAG_UNNAMED_952, *PTAG_UNNAMED_952;

struct tagSOLE_AUTHENTICATION_SERVICE
{
  /* 0x0000 */ unsigned long dwAuthnSvc;
  /* 0x0004 */ unsigned long dwAuthzSvc;
  /* 0x0008 */ wchar_t* pPrincipalName;
  /* 0x0010 */ HRESULT hr;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_953, *PTAG_UNNAMED_953;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_954, *PTAG_UNNAMED_954;

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_955, *PTAG_UNNAMED_955;

typedef enum
{
  query_operation_node_idIdx = 0,
  parent_idIdx = 1,
  qte_typeIdx = 2,
  logical_operatorIdx = 3,
  physical_operatorIdx = 4,
  dynamic_attributesIdx = 5,
  LastField = 6,
} TAG_UNNAMED_956, *PTAG_UNNAMED_956;

enum XeSqlPkg::statistic_object_type
{
  SOT_STATEMENT = 1,
  SOT_STORED_PROC = 2,
  SOT_TRIGGER = 3,
};

typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX
{
  /* 0x0000 */ unsigned long ulAssemblyIndex;
  /* 0x0004 */ unsigned long ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, *PACTIVATION_CONTEXT_QUERY_INDEX; /* size: 0x0008 */

typedef enum
{
  VolumeHashtableBuckets = 17,
} TAG_UNNAMED_957, *PTAG_UNNAMED_957;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_958, *PTAG_UNNAMED_958;

typedef struct _SERVICE_NOTIFY_1
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ long Padding_311;
  /* 0x0008 */ void* pfnNotifyCallback /* function */;
  /* 0x0010 */ void* pContext;
  /* 0x0018 */ unsigned long dwNotificationStatus;
  /* 0x001c */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1; /* size: 0x0040 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_959, *PTAG_UNNAMED_959;

typedef enum
{
  ListElementOffset = 64,
} TAG_UNNAMED_960, *PTAG_UNNAMED_960;

typedef enum
{
  database_idIdx = 0,
  filegroup_idIdx = 1,
  log_filegroup_idIdx = 2,
  typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_961, *PTAG_UNNAMED_961;

class CAutoBase<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > >
{
  /* 0x0000 */ class XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > >* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_962, *PTAG_UNNAMED_962;

typedef enum
{
  ArgCount = 2,
} TAG_UNNAMED_963, *PTAG_UNNAMED_963;

class XeCloudMinPkg::async_transport_stream_status_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_312[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int status_versionOffset;
    /* 0x0000 */ const int stream_statusOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_idOffset;
    /* 0x0000 */ const int destination_addressOffset;
    /* 0x0000 */ const int destination_circuit_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0270 */

typedef enum
{
  compile_timeIdx = 0,
  unmatched_database_nameIdx = 1,
  unmatched_schema_nameIdx = 2,
  unmatched_table_nameIdx = 3,
  unmatched_index_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_964, *PTAG_UNNAMED_964;

typedef enum
{
  SlotArrayLength = 8,
  SlotLast = -1,
} TAG_UNNAMED_965, *PTAG_UNNAMED_965;

enum XeSqlPkg::query_post_compilation_showplan::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

class Spinlock<25,19,1>
{
}; /* size: 0x0004 */

struct IDropSourceNotify
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_966, *PTAG_UNNAMED_966;

enum DBTYPEENUM20
{
  DBTYPE_FILETIME = 64,
  DBTYPE_PROPVARIANT = 138,
  DBTYPE_VARNUMERIC = 139,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_967, *PTAG_UNNAMED_967;

enum ResourceInventory::usage_type
{
  MULTI_USER = 0,
  SINGLE_USER = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_968, *PTAG_UNNAMED_968;

struct XEEventDataDescriptor
{
  /* 0x0000 */ unsigned int m_offset;
  /* 0x0004 */ unsigned int m_length;
}; /* size: 0x0008 */

typedef enum
{
  thread_idIdx = 0,
  brick_idIdx = 1,
  phase_idIdx = 2,
  database_idIdx = 3,
  message_opcodeIdx = 4,
  split_ageIdx = 5,
  LastField = 6,
} TAG_UNNAMED_969, *PTAG_UNNAMED_969;

class Spinlock<16,19,1>
{
}; /* size: 0x0004 */

typedef enum
{
  offset = 8,
} TAG_UNNAMED_970, *PTAG_UNNAMED_970;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_971, *PTAG_UNNAMED_971;

typedef enum
{
  error_numberIdx = 0,
  error_messageIdx = 1,
  LastField = 2,
} TAG_UNNAMED_972, *PTAG_UNNAMED_972;

enum XeSqlPkg::XACT_STATE
{
  TRANS_BEGIN_EVENT_SUB_CLASS = 0,
  TRANS_COMMIT_EVENT_SUB_CLASS = 1,
  TRANS_ROLLBACK_EVENT_SUB_CLASS = 2,
  TRANS_SAVEPOINT_EVENT_SUB_CLASS = 3,
};

struct IWbemProviderInitSink
{
}; /* size: 0x0008 */

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
  /* 0x0000 */ unsigned long LogPathLength;
  /* 0x0004 */ wchar_t LogPath[1];
  /* 0x0006 */ char __PADDING__[2];
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_973, *PTAG_UNNAMED_973;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 10,
} TAG_UNNAMED_974, *PTAG_UNNAMED_974;

struct MENUITEMTEMPLATEHEADER
{
  /* 0x0000 */ unsigned short versionNumber;
  /* 0x0002 */ unsigned short offset;
}; /* size: 0x0004 */

struct XE_TArray<XEPredicateCompare *,0>
{
  /* 0x0000 */ struct XEPredicateCompare** m_array;
}; /* size: 0x0008 */

struct XE_TObjects<XEPredicateCompare,0>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEPredicateCompare *,0> m_objectPtrs;
}; /* size: 0x0018 */

typedef enum
{
  offset = 8,
} TAG_UNNAMED_975, *PTAG_UNNAMED_975;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  cached_textIdx = 3,
  object_nameIdx = 4,
  database_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_976, *PTAG_UNNAMED_976;

class CXRLEZeroColumn<unsigned char>
{
  union
  {
    /* 0x0000 */ const unsigned char ZERO_HEADER_HIGH;
    /* 0x0000 */ const unsigned char ZERO_HEADER_LOW;
    /* 0x0000 */ const unsigned char ZERO_HEADER_MASK;
    /* 0x0000 */ const unsigned char DUAL_SYMBOL;
  }; /* size: 0x0001 */
  /* 0x0001 */ char Padding_313[23];
  /* 0x0018 */ unsigned char m_currentValue;
  /* 0x0019 */ char Padding_314[7];
  /* 0x0020 */ unsigned char* m_startPointer;
  /* 0x0028 */ unsigned char m_zeroLength;
  /* 0x0029 */ char Padding_315[3];
  /* 0x002c */ int m_fDecompressed;
  /* 0x0030 */ unsigned int m_realPosition;
}; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_977, *PTAG_UNNAMED_977;

struct tagENUMLOGFONTA
{
  /* 0x0000 */ struct tagLOGFONTA elfLogFont;
  /* 0x003c */ unsigned char elfFullName[64];
  /* 0x007c */ unsigned char elfStyle[32];
}; /* size: 0x009c */

typedef enum
{
  offset = 0,
} TAG_UNNAMED_978, *PTAG_UNNAMED_978;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_979, *PTAG_UNNAMED_979;

class Spinlock<71,16,1>
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_980, *PTAG_UNNAMED_980;

typedef struct _CLUS_CHKDSK_INFO
{
  /* 0x0000 */ unsigned long PartitionNumber;
  /* 0x0004 */ unsigned long ChkdskState;
  /* 0x0008 */ unsigned long FileIdCount;
  /* 0x000c */ long Padding_316;
  /* 0x0010 */ unsigned __int64 FileIdList[1];
} CLUS_CHKDSK_INFO, *PCLUS_CHKDSK_INFO; /* size: 0x0018 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_981, *PTAG_UNNAMED_981;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_982, *PTAG_UNNAMED_982;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 16,
} TAG_UNNAMED_983, *PTAG_UNNAMED_983;

typedef enum
{
  offset = 0,
} TAG_UNNAMED_984, *PTAG_UNNAMED_984;

struct IXMLDOMEntity
{
}; /* size: 0x0008 */

typedef enum
{
  durationIdx = 0,
  database_idIdx = 1,
  file_idIdx = 2,
  file_typeIdx = 3,
  is_automaticIdx = 4,
  total_size_kbIdx = 5,
  size_change_kbIdx = 6,
  file_nameIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_985, *PTAG_UNNAMED_985;

typedef enum _COVERAGE_REQUEST_CODES
{
  CoverageAllModules = 0,
  CoverageSearchByHash = 1,
  CoverageSearchByName = 2,
} COVERAGE_REQUEST_CODES, *PCOVERAGE_REQUEST_CODES;

class CAutoBase<XEPackage0::CounterTarget>
{
  /* 0x0000 */ class XEPackage0::CounterTarget* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_986, *PTAG_UNNAMED_986;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_987, *PTAG_UNNAMED_987;

class XeSqlPkg::hadr_db_commit_mgr_harden
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_317[140];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0054 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int commit_policyOffset;
    /* 0x0000 */ const int delayOffset;
    /* 0x0000 */ const int time_to_commitOffset;
    /* 0x0000 */ const int resultOffset;
    /* 0x0000 */ const int valid_leaseOffset;
    /* 0x0000 */ const int wait_log_blockOffset;
    /* 0x0000 */ const int hardened_log_blockOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0288 */

typedef enum
{
  manager_idIdx = 0,
  notification_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_988, *PTAG_UNNAMED_988;

typedef enum
{
  node_idIdx = 0,
  memory_limit_kbIdx = 1,
  LastField = 2,
} TAG_UNNAMED_989, *PTAG_UNNAMED_989;

typedef struct __vc_attributes::noncreatableAttribute
{
} _vc_attributes::noncreatableAttribute, *P_vc_attributes::noncreatableAttribute; /* size: 0x0001 */

enum SOS_ParentBlockDescriptor::DescState
{
  Empty = 0,
  Active = 1,
  Partial = 2,
  Full = 3,
  PartialDeleted = 4,
  Standalone = 5,
  LastState = 6,
};

enum XeSqlPkg::HadrAvailabilityReplicaStatus
{
  HADR_AVAILABILITY_REPLICA_STARTING = 0,
  HADR_AVAILABILITY_REPLICA_STOPPING = 1,
};

typedef enum
{
  FreeBlockCountShift = 3,
  FreeBlockCountIncrement = 8,
  StateMask = 7,
} TAG_UNNAMED_990, *PTAG_UNNAMED_990;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_991, *PTAG_UNNAMED_991;

struct XE_TEvent<4,1,1>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,1> m_dynamicAttr;
  /* 0x0100 */ struct XEEvent m_event;
}; /* size: 0x0148 */

class XeSqlPkg::sql_batch_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_318[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int batch_textOffset;
  }; /* size: 0x0148 */
}; /* size: 0x0248 */

class XE_AutoP<XEPackage0::XE_FileTarget>
{
}; /* size: 0x0008 */

typedef enum
{
  plan_typeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_992, *PTAG_UNNAMED_992;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_993, *PTAG_UNNAMED_993;

struct ExternalStorage
{
  /* 0x0000 */ unsigned int* m_buf;
  /* 0x0008 */ unsigned int m_N;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct XBitmap<ExternalStorage>
{
  /* 0x0000 */ struct ExternalStorage m_storage;
}; /* size: 0x0010 */

class XE_AutoRg<unsigned int>
{
}; /* size: 0x0008 */

struct XE_PackageFilter::FilterHolder
{
  /* 0x0000 */ struct XBitmap<ExternalStorage> m_bitmap;
  /* 0x0010 */ class XE_AutoRg<unsigned int> m_memory;
}; /* size: 0x0018 */

class XE_PackageFilter
{
  /* 0x0000 */ unsigned short m_packageId;
  /* 0x0002 */ char Padding_319[6];
  /* 0x0008 */ struct XE_PackageFilter::FilterHolder m_events;
  /* 0x0020 */ struct XE_PackageFilter::FilterHolder m_actions;
  /* 0x0038 */ struct XE_PackageFilter::FilterHolder m_maps;
  /* 0x0050 */ struct XE_PackageFilter::FilterHolder m_types;
}; /* size: 0x0068 */

typedef enum
{
  DESCRIPTOR_STATUS_ACTIVE = 1,
} TAG_UNNAMED_994, *PTAG_UNNAMED_994;

typedef enum
{
  ArgCount = 0,
} TAG_UNNAMED_995, *PTAG_UNNAMED_995;

typedef struct _WKSTA_INFO_1032
{
  /* 0x0000 */ unsigned long wki1032_wrk_heuristics;
} WKSTA_INFO_1032, *PWKSTA_INFO_1032; /* size: 0x0004 */

typedef enum
{
  database_idIdx = 0,
  primary_idIdx = 1,
  caller_functionIdx = 2,
  LastField = 3,
} TAG_UNNAMED_996, *PTAG_UNNAMED_996;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 28,
} TAG_UNNAMED_997, *PTAG_UNNAMED_997;

class Spinlock<67,16,1>
{
}; /* size: 0x0004 */

enum SOS_TraceFlagSizes
{
  SOS_MAX_DEBUG_FLAGS = 100,
  SOS_MAX_RETAIL_FLAGS = 1700,
};

typedef enum
{
  stats_collection_idIdx = 0,
  query_hashIdx = 1,
  creation_timeIdx = 2,
  input_relationIdx = 3,
  calculatorIdx = 4,
  stats_collectionIdx = 5,
  LastField = 6,
} TAG_UNNAMED_998, *PTAG_UNNAMED_998;

class CAutoRg<unsigned __int64>
{
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 320,
  NextPtrOffset = 8,
} TAG_UNNAMED_999, *PTAG_UNNAMED_999;

typedef struct _TAPE_CREATE_PARTITION
{
  /* 0x0000 */ unsigned long Method;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned long Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION; /* size: 0x000c */

struct tagGCP_RESULTSA
{
  /* 0x0000 */ unsigned long lStructSize;
  /* 0x0004 */ long Padding_320;
  /* 0x0008 */ char* lpOutString;
  /* 0x0010 */ unsigned int* lpOrder;
  /* 0x0018 */ int* lpDx;
  /* 0x0020 */ int* lpCaretPos;
  /* 0x0028 */ char* lpClass;
  /* 0x0030 */ wchar_t* lpGlyphs;
  /* 0x0038 */ unsigned int nGlyphs;
  /* 0x003c */ int nMaxFit;
}; /* size: 0x0040 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1000, *PTAG_UNNAMED_1000;

typedef enum _IRQ_GROUP_POLICY
{
  GroupAffinityAllGroupZero = 0,
  GroupAffinityDontCare = 1,
} IRQ_GROUP_POLICY, *PIRQ_GROUP_POLICY;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 40,
} TAG_UNNAMED_1001, *PTAG_UNNAMED_1001;

typedef enum
{
  NOTIFY_RUNSTARTS = 1,
  NOTIFY_RUNCOMPLETES = 2,
  NOTIFY_STEPPED_ON_NOT_PINNED_ENTRY = 4,
  NOTIFY_STEPPED_ON_PINNED_ENTRY = 8,
  CALLBACK_SERIALIZE = 16,
  NOTIFY_FORCE_CLEANUP = 32,
  NOTIFY_FORCE_CLEANUP_STARTS = 64,
  NOTIFY_FORCE_CLEANUP_COMPLETES = 128,
  IS_ENTRY_QUOTA_REACHED = 256,
  NOTIFY_ANY_CLEANUP_COMPLETES = 512,
} TAG_UNNAMED_1002, *PTAG_UNNAMED_1002;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 27,
} TAG_UNNAMED_1003, *PTAG_UNNAMED_1003;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1004, *PTAG_UNNAMED_1004;

typedef enum
{
  current_stateIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1005, *PTAG_UNNAMED_1005;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 4,
  VldEddOffset = -1,
  BufSize = 32,
} TAG_UNNAMED_1006, *PTAG_UNNAMED_1006;

enum DBCOMMANDPERSISTFLAGENUM
{
  DBCOMMANDPERSISTFLAG_NOSAVE = 1,
};

class AutoSpinlockHolder<283,1,1>;

enum MemoryObjectFactory::CreationOptions
{
  UseDefaults = 0,
  SpyDisabled = 1,
  NoMinPageSize = 2,
};

enum MemoryObjectFactory::WrappingOptions
{
  NoWrap = 0,
  DebugWrap = 1,
  ThreadSafeWrap = 2,
  CacheWrap = 4,
  PartitionedWrap = 8,
};

typedef struct _XMIT_ROUTINE_QUINTUPLE
{
  /* 0x0000 */ void* pfnTranslateToXmit /* function */;
  /* 0x0008 */ void* pfnTranslateFromXmit /* function */;
  /* 0x0010 */ void* pfnFreeXmit /* function */;
  /* 0x0018 */ void* pfnFreeInst /* function */;
} XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE; /* size: 0x0020 */

typedef enum
{
  field_offsetIdx = 0,
  field_sizeIdx = 1,
  field_valueIdx = 2,
  field_nameIdx = 3,
  archive_file_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1007, *PTAG_UNNAMED_1007;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_1008, *PTAG_UNNAMED_1008;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_1009, *PTAG_UNNAMED_1009;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_1010, *PTAG_UNNAMED_1010;

struct ISWbemPropertySet
{
}; /* size: 0x0008 */

enum SOSHOST_OBJECTSTORE_TYPE
{
  OBJECTSTORE_TEST = 0,
  OBJECTSTORE_TASKPOOL = 1,
  OBJECTSTORE_LBSS = 2,
  OBJECTSTORE_SNI_PACKET = 3,
  OBJECTSTORE_SERVICE_BROKER = 4,
  OBJECTSTORE_LOCK_MANAGER = 5,
  OBJECTSTORE_MATRIXDB_MCIMESSAGE = 6,
  OBJECTSTORE_MATRIXDB_MCIINMESSAGE = 7,
  OBJECTSTORE_MATRIXDB_MCIOUTMESSAGE = 8,
  OBJECTSTORE_MATRIXDB_MCIMAILBOX = 9,
  OBJECTSTORE_MATRIXDB_MCIMAILBOXNAME = 10,
  OBJECTSTORE_SECAUDIT_EVENT_BUFFER = 11,
  OBJECTSTORE_XACT_CACHE = 12,
  OBJECTSTORE_LAST = 13,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1011, *PTAG_UNNAMED_1011;

struct XEEngineAPISet
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ unsigned short m_packageVersion;
  /* 0x0006 */ unsigned short m_targetVersion;
  /* 0x0008 */ unsigned short m_clientVersion;
  /* 0x000a */ char Padding_321[6];
  /* 0x0010 */ const struct XEEngineClientAPI** m_clientAPI;
  /* 0x0018 */ unsigned short m_servicesVersion;
  /* 0x001a */ char Padding_322[6];
  /* 0x0020 */ const struct XEEngineServicesAPI** m_servicesAPI;
  /* 0x0028 */ unsigned short m_registerVersion;
  /* 0x002a */ char Padding_323[6];
  /* 0x0030 */ const struct XEEngineRegisterAPI** m_registerAPI;
}; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 48,
} TAG_UNNAMED_1012, *PTAG_UNNAMED_1012;

typedef enum _RTL_STACK_TRACE_DATABASE_CONTROL
{
  BackTraceDatabaseCreate = 0,
  BackTraceDatabaseDelete = 1,
  BackTraceDatabaseFlush = 2,
  BackTraceDatabaseMaxControl = 3,
} RTL_STACK_TRACE_DATABASE_CONTROL, *PRTL_STACK_TRACE_DATABASE_CONTROL;

enum SOS_Node::NodeFlags
{
  LAZY_PREEMPTIVE = 1,
  OFFLINE = 2,
  DAC = 4,
  THREAD_RESOURCES_LOW = 8,
  INITIALIZING = 16,
  HOT_ADDED = 32,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 3,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 42,
} TAG_UNNAMED_1013, *PTAG_UNNAMED_1013;

class CAutoBase<XE_AutoRg<unsigned short> >
{
  /* 0x0000 */ class XE_AutoRg<unsigned short>* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  brick_idIdx = 0,
  session_idIdx = 1,
  object_idIdx = 2,
  object_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1014, *PTAG_UNNAMED_1014;

enum SOS_Node::NodeIdleState
{
  NODE_BUSY = 0,
  NODE_IDLE_READY = 1,
  NODE_IDLE = 2,
};

class SpinlockHolder<248,1,1>;

typedef struct _DMA_CONFIGURATION_BYTE1
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Reserved0 : 2; /* bit position: 0 */
    /* 0x0000 */ unsigned char TransferSize : 2; /* bit position: 2 */
    /* 0x0000 */ unsigned char Timing : 2; /* bit position: 4 */
    /* 0x0000 */ unsigned char Reserved1 : 2; /* bit position: 6 */
  }; /* bitfield */
} DMA_CONFIGURATION_BYTE1, *PDMA_CONFIGURATION_BYTE1; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 41,
} TAG_UNNAMED_1015, *PTAG_UNNAMED_1015;

typedef enum _SECTION_INHERIT
{
  ViewShare = 1,
  ViewUnmap = 2,
} SECTION_INHERIT, *PSECTION_INHERIT;

typedef enum
{
  offset = 8,
} TAG_UNNAMED_1016, *PTAG_UNNAMED_1016;

struct XE_TMap<14>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[14];
  }; /* size: 0x00e0 */
  /* 0x00e0 */ struct XEMap m_map;
}; /* size: 0x0110 */

typedef enum
{
  ListElementOffset = 0,
} TAG_UNNAMED_1017, *PTAG_UNNAMED_1017;

class XeSqlPkg::glm_lock_acquire_end
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_324[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int resource_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int lock_modeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1018, *PTAG_UNNAMED_1018;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1019, *PTAG_UNNAMED_1019;

typedef struct _POWER_PLATFORM_INFORMATION
{
  /* 0x0000 */ enum _POWER_PLATFORM_ROLE Role;
  /* 0x0004 */ unsigned char AoAc;
  /* 0x0005 */ char __PADDING__[3];
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION; /* size: 0x0008 */

typedef enum
{
  offset = 0,
} TAG_UNNAMED_1020, *PTAG_UNNAMED_1020;

typedef enum
{
  offset = 16,
} TAG_UNNAMED_1021, *PTAG_UNNAMED_1021;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1022, *PTAG_UNNAMED_1022;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1023, *PTAG_UNNAMED_1023;

class XeSqlPkg::cursor_unprepare
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_325[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int protocol_execution_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  object_typeIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  object_nameIdx = 3,
  cached_textIdx = 4,
  database_nameIdx = 5,
  plan_handleIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1024, *PTAG_UNNAMED_1024;

enum CLUSTER_SHARED_VOLUME_SNAPSHOT_STATE
{
  ClusterSharedVolumeSnapshotStateUnknown = 0,
  ClusterSharedVolumePrepareForHWSnapshot = 1,
  ClusterSharedVolumeHWSnapshotCompleted = 2,
  ClusterSharedVolumePrepareForFreeze = 3,
};

struct IWbemObjectSinkEx
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1025, *PTAG_UNNAMED_1025;

enum SOS_WaitableAddress::WaitableState
{
  STATE_INVALID = 0,
  STATE_IN_HASH_TABLE = 1,
  STATE_ABOUT_TO_BE_SIGNALED = 2,
  STATE_UNTOUCHABLE = 3,
};

struct tagHEAPENTRY32
{
  /* 0x0000 */ unsigned __int64 dwSize;
  /* 0x0008 */ void* hHandle;
  /* 0x0010 */ unsigned __int64 dwAddress;
  /* 0x0018 */ unsigned __int64 dwBlockSize;
  /* 0x0020 */ unsigned long dwFlags;
  /* 0x0024 */ unsigned long dwLockCount;
  /* 0x0028 */ unsigned long dwResvd;
  /* 0x002c */ unsigned long th32ProcessID;
  /* 0x0030 */ unsigned __int64 th32HeapID;
}; /* size: 0x0038 */

typedef enum
{
  preconnect_typeIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  object_typeIdx = 3,
  durationIdx = 4,
  cpu_timeIdx = 5,
  physical_readsIdx = 6,
  logical_readsIdx = 7,
  writesIdx = 8,
  error_numberIdx = 9,
  error_stateIdx = 10,
  object_nameIdx = 11,
  workload_group_nameIdx = 12,
  database_nameIdx = 13,
  LastField = 14,
} TAG_UNNAMED_1026, *PTAG_UNNAMED_1026;

typedef struct _FILEMUIINFO
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwVersion;
  /* 0x0008 */ unsigned long dwFileType;
  /* 0x000c */ unsigned char pChecksum[16];
  /* 0x001c */ unsigned char pServiceChecksum[16];
  /* 0x002c */ unsigned long dwLanguageNameOffset;
  /* 0x0030 */ unsigned long dwTypeIDMainSize;
  /* 0x0034 */ unsigned long dwTypeIDMainOffset;
  /* 0x0038 */ unsigned long dwTypeNameMainOffset;
  /* 0x003c */ unsigned long dwTypeIDMUISize;
  /* 0x0040 */ unsigned long dwTypeIDMUIOffset;
  /* 0x0044 */ unsigned long dwTypeNameMUIOffset;
  /* 0x0048 */ unsigned char abBuffer[8];
} FILEMUIINFO, *PFILEMUIINFO; /* size: 0x0050 */

typedef enum
{
  win32errorIdx = 0,
  file_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1027, *PTAG_UNNAMED_1027;

struct tagSTATPROPSETSTG
{
  /* 0x0000 */ struct _GUID fmtid;
  /* 0x0010 */ struct _GUID clsid;
  /* 0x0020 */ unsigned long grfFlags;
  /* 0x0024 */ struct _FILETIME mtime;
  /* 0x002c */ struct _FILETIME ctime;
  /* 0x0034 */ struct _FILETIME atime;
  /* 0x003c */ unsigned long dwOSVersion;
}; /* size: 0x0040 */

typedef enum
{
  ListElementOffset = 16,
} TAG_UNNAMED_1028, *PTAG_UNNAMED_1028;

enum SOS_SchedulerMonitorRecord::EventType
{
  SMR_NONYIELD_SCHED_BEGIN = 0,
  SMR_NONYIELD_SCHED_END = 1,
  SMR_DEADLOCK_BEGIN = 2,
  SMR_DEADLOCK_END = 3,
  SMR_SYSTEM_HEALTH = 4,
  SMR_NONYIELD_IOCP_BEGIN = 5,
  SMR_NONYIELD_IOCP_END = 6,
  SMR_NONYIELD_RM_BEGIN = 7,
  SMR_NONYIELD_RM_END = 8,
  SMR_STUCK_DISPATCHER_BEGIN = 9,
  SMR_STUCK_DISPATCHER_END = 10,
  SMR_LAST = 11,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_1029, *PTAG_UNNAMED_1029;

enum CLUSPROP_IPADDR_ENABLENETBIOS
{
  CLUSPROP_IPADDR_ENABLENETBIOS_DISABLED = 0,
  CLUSPROP_IPADDR_ENABLENETBIOS_ENABLED = 1,
  CLUSPROP_IPADDR_ENABLENETBIOS_TRACK_NIC = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_1030, *PTAG_UNNAMED_1030;

struct QITAB
{
  /* 0x0000 */ const struct _GUID* piid;
  /* 0x0008 */ int dwOffset;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef enum
{
  ArgCount = 1,
} TAG_UNNAMED_1031, *PTAG_UNNAMED_1031;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1032, *PTAG_UNNAMED_1032;

struct IRpcChannelBuffer2
{
}; /* size: 0x0008 */

class Spinlock<37,18,1>
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1033, *PTAG_UNNAMED_1033;

class AutoSpinlockHolder<42,18,1>;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1034, *PTAG_UNNAMED_1034;

typedef struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short NameLength;
  /* 0x0004 */ unsigned short Type;
  /* 0x0006 */ unsigned short DataLength;
  /* 0x0008 */ unsigned long Attributes;
  /* 0x000c */ unsigned long Reserved;
  /* 0x0010 */ wchar_t Name[1];
  /* 0x0012 */ char __PADDING__[2];
} SL_KMEM_CACHE_VALUE_DESCRIPTOR, *PSL_KMEM_CACHE_VALUE_DESCRIPTOR; /* size: 0x0014 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  column_idIdx = 2,
  datatypeIdx = 3,
  collationIdx = 4,
  nullableIdx = 5,
  maxlenIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1035, *PTAG_UNNAMED_1035;

enum SQLError::ERROR_ORIGIN
{
  SYSTEM_DEFINED_ERROR = 0,
  USER_DEFINED_ERROR = 1,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1036, *PTAG_UNNAMED_1036;

enum SYSTHREAD_DISPATCH_TYPE
{
  SYSTHREAD_DISPATCH_ASYNC = 1,
  SYSTHREAD_DISPATCH_ASYNC_NOFAIL = 2,
  SYSTHREAD_DISPATCH_PRIMARY_NOFAIL = 4,
};

struct ITypeFactory
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 3,
  VldEddOffset = 3,
  BufSize = 34,
} TAG_UNNAMED_1037, *PTAG_UNNAMED_1037;

typedef enum _CLUSTER_REG_COMMAND
{
  CLUSREG_COMMAND_NONE = 0,
  CLUSREG_SET_VALUE = 1,
  CLUSREG_CREATE_KEY = 2,
  CLUSREG_DELETE_KEY = 3,
  CLUSREG_DELETE_VALUE = 4,
  CLUSREG_SET_KEY_SECURITY = 5,
  CLUSREG_VALUE_DELETED = 6,
  CLUSREG_READ_KEY = 7,
  CLUSREG_READ_VALUE = 8,
  CLUSREG_READ_ERROR = 9,
  CLUSREG_LAST_COMMAND = 10,
} CLUSTER_REG_COMMAND, *PCLUSTER_REG_COMMAND;

typedef enum
{
  database_idIdx = 0,
  transaction_idIdx = 1,
  log_record_sizeIdx = 2,
  operationIdx = 3,
  contextIdx = 4,
  replication_commandIdx = 5,
  transaction_start_timeIdx = 6,
  alloc_unit_idIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1038, *PTAG_UNNAMED_1038;

class SpinlockHolder<325,1,1>;

enum GenericEvent::PublishResult
{
  NotPublished = 0,
  PublishSuccess = 1,
  PublishFail = 2,
};

typedef struct _RTL_DYNAMIC_HASH_TABLE
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long Shift;
  /* 0x0008 */ unsigned long TableSize;
  /* 0x000c */ unsigned long Pivot;
  /* 0x0010 */ unsigned long DivisorMask;
  /* 0x0014 */ unsigned long NumEntries;
  /* 0x0018 */ unsigned long NonEmptyBuckets;
  /* 0x001c */ unsigned long NumEnumerators;
  /* 0x0020 */ void* Directory;
} RTL_DYNAMIC_HASH_TABLE, *PRTL_DYNAMIC_HASH_TABLE; /* size: 0x0028 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 0,
  VldEddOffset = 9,
  BufSize = 40,
} TAG_UNNAMED_1039, *PTAG_UNNAMED_1039;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_1040, *PTAG_UNNAMED_1040;

struct IOleAdviseHolder
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 24,
  NVld = 0,
  VldEddOffset = 23,
  BufSize = 144,
} TAG_UNNAMED_1041, *PTAG_UNNAMED_1041;

typedef enum
{
  ACTIVE = 1,
  IN_NOTIFICATION = 2,
  IN_CALLBACK = 4,
} TAG_UNNAMED_1042, *PTAG_UNNAMED_1042;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1043, *PTAG_UNNAMED_1043;

typedef struct _TRANSACTION_BASIC_INFORMATION
{
  /* 0x0000 */ struct _GUID TransactionId;
  /* 0x0010 */ unsigned long State;
  /* 0x0014 */ unsigned long Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_1044, *PTAG_UNNAMED_1044;

struct XESessionStats
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_326[6];
  /* 0x0008 */ unsigned __int64 m_timeWhenCreatedMS;
  /* 0x0010 */ unsigned int m_bufferCount;
  /* 0x0014 */ long Padding_327;
  /* 0x0018 */ unsigned __int64 m_singleBufferSize;
  /* 0x0020 */ unsigned int m_lbaCount;
  /* 0x0024 */ long Padding_328;
  /* 0x0028 */ unsigned __int64 m_singleLbaSize;
  /* 0x0030 */ unsigned __int64 m_totalBufferSize;
  /* 0x0038 */ unsigned __int64 m_totalBufferAllocSize;
  /* 0x0040 */ unsigned int m_droppedBufferCount;
  /* 0x0044 */ unsigned int m_droppedEventCount;
  /* 0x0048 */ unsigned int m_pendingBuffers;
  /* 0x004c */ unsigned int m_blockedTimeMS;
  /* 0x0050 */ unsigned int m_largestEventDropped;
  /* 0x0054 */ long Padding_329;
  /* 0x0058 */ unsigned __int64 m_timeLastTargetDetachMS;
}; /* size: 0x0060 */

class UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >
{
}; /* size: 0x0001 */

enum ResourceMonitor::IdleHelperFlags
{
  ShrinkMemory = 0,
  NoShrinkMemory = 1,
};

class CAutoBase<SOS_ResourceGroup>
{
  /* 0x0000 */ class SOS_ResourceGroup* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  one_rowIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1045, *PTAG_UNNAMED_1045;

struct IDispatchEx
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1046, *PTAG_UNNAMED_1046;

typedef struct _wfinddata32_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long time_create;
  /* 0x0008 */ long time_access;
  /* 0x000c */ long time_write;
  /* 0x0010 */ unsigned long size;
  /* 0x0014 */ wchar_t name[260];
} wfinddata32_t, *Pwfinddata32_t; /* size: 0x021c */

class XE_CompressionBufferRefCount
{
  /* 0x0000 */ long Padding_330[2];
  /* 0x0008 */ class XE_CompressionCache* m_pCompCache;
}; /* size: 0x0010 */

typedef enum
{
  MaxMemoryBrokerClerks = 16,
} TAG_UNNAMED_1047, *PTAG_UNNAMED_1047;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1048, *PTAG_UNNAMED_1048;

struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
  /* 0x0000 */ void* lpInformation;
  /* 0x0008 */ void* lpSectionBase;
  /* 0x0010 */ unsigned long ulSectionLength;
  /* 0x0014 */ long Padding_331;
  /* 0x0018 */ void* lpSectionGlobalDataBase;
  /* 0x0020 */ unsigned long ulSectionGlobalDataLength;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1049, *PTAG_UNNAMED_1049;

class XE_PublishedDescriptor::DataSource
{
  /* 0x0000 */ union XE_PublishedDescriptor::DataSource::Data m_data;
  /* 0x0008 */ int m_isStream;
}; /* size: 0x0010 */

enum ResourceMonitor::Const
{
  MaxState = 6,
  MaxSignal = 8,
  InitState = 0,
  Unreachable = 7,
  NotifyOnceMask = 1,
  NumberOfWorkers = 1,
  MaxSleepingTime = 1000,
  WaitTime = 5040,
};

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1050, *PTAG_UNNAMED_1050;

enum SOSHOST_USERSTORE_TYPE
{
  USERSTORE_TEST = 0,
  USERSTORE_SCHEMAMGR = 1,
  USERSTORE_DBMETADATA = 2,
  USERSTORE_SERVICEBROKERMSGDISPATCHER = 3,
  USERSTORE_TOKENPERM = 4,
  USERSTORE_OBJPERM = 5,
  USERSTORE_SXC = 6,
  USERSTORE_RLSAC = 7,
  USERSTORE_FILETABLEFCB = 8,
  USERSTORE_QDSSTMT = 9,
  USERSTORE_LAST = 10,
};

struct XE_TEvent<4,1,6>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,6> m_dynamicAttr;
  /* 0x01c8 */ struct XEEvent m_event;
}; /* size: 0x0210 */

class XeSqlPkg::preconnect_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_332[140];
      /* 0x0240 */ unsigned char m_buf[27];
    }; /* size: 0x002b */
    /* 0x0000 */ const int preconnect_typeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0210 */
}; /* size: 0x0260 */

class Spinlock<331,0,1>
{
}; /* size: 0x0004 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  start_file_idIdx = 7,
  end_file_idIdx = 8,
  start_page_idIdx = 9,
  end_page_idIdx = 10,
  page_countIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1051, *PTAG_UNNAMED_1051;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1052, *PTAG_UNNAMED_1052;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1053, *PTAG_UNNAMED_1053;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 7,
  VldEddOffset = 5,
  BufSize = 78,
} TAG_UNNAMED_1054, *PTAG_UNNAMED_1054;

class XE_AutoP<XE_FileMemoryMap>
{
}; /* size: 0x0008 */

class XE_AutoP<XE_FileReaderDefaultPolicy>
{
}; /* size: 0x0008 */

class XE_FileBufferEnum
{
  /* 0x0000 */ unsigned __int64 m_offset;
  /* 0x0008 */ unsigned int m_currentFile;
  /* 0x000c */ long Padding_333;
  /* 0x0010 */ class XE_AutoP<XE_FileMemoryMap> m_mappedFile;
  /* 0x0018 */ class XE_AutoP<XE_FileReaderDefaultPolicy> m_readerPolicy;
  /* 0x0020 */ class XE_FileSet* m_fileSet;
  /* 0x0028 */ class XE_ILogReadMessageHandler* m_pMsgHandler;
}; /* size: 0x0030 */

typedef enum
{
  ListElementOffset = 16,
} TAG_UNNAMED_1055, *PTAG_UNNAMED_1055;

enum DBPROPFLAGSENUM25
{
  DBPROPFLAGS_VIEW = 16384,
};

struct tagStorageLayout
{
  /* 0x0000 */ unsigned long LayoutType;
  /* 0x0004 */ long Padding_334;
  /* 0x0008 */ wchar_t* pwcsElementName;
  /* 0x0010 */ union _LARGE_INTEGER cOffset;
  /* 0x0018 */ union _LARGE_INTEGER cBytes;
}; /* size: 0x0020 */

typedef enum
{
  session_idIdx = 0,
  task_addressIdx = 1,
  resultIdx = 2,
  source_ip_addressIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1056, *PTAG_UNNAMED_1056;

enum XEPackage0::CompareDiscriminant
{
  XE_CD_NONE = 0,
  XE_CD_CASE_INSENSITIVE_VLD = 1,
  XE_CD_CASE_SENSITIVE_VLD = 2,
};

class XeSqlPkg::broker_transmission_lazyflusher_processing_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_335[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int objects_flushedOffset;
    /* 0x0000 */ const int sleep_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_1057, *PTAG_UNNAMED_1057;

enum DBPROPSTATUSENUM21
{
  DBPROPSTATUS_NOTAVAILABLE = 9,
};

class ClockAlgorithm::ControlInfo
{
  /* 0x0000 */ unsigned __int64 m_RoundId;
  /* 0x0008 */ class ClockAlgorithm* m_LastToRun;
  /* 0x0010 */ unsigned long m_EntriesPerTick;
  /* 0x0014 */ long Padding_336;
  /* 0x0018 */ unsigned __int64 m_EntriesPerRound;
  /* 0x0020 */ unsigned __int64 m_ProgressCounter;
  /* 0x0028 */ unsigned long m_status;
}; /* size: 0x0030 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  is_from_worktableIdx = 4,
  is_new_objectIdx = 5,
  is_get_onlyIdx = 6,
  exception_occurredIdx = 7,
  dialog_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1058, *PTAG_UNNAMED_1058;

typedef enum
{
  PPCACHESIZE = 2048,
} TAG_UNNAMED_1059, *PTAG_UNNAMED_1059;

typedef enum
{
  ArgCount = 1,
} TAG_UNNAMED_1060, *PTAG_UNNAMED_1060;

typedef enum
{
  schema_mgr_database_idIdx = 0,
  versionIdx = 1,
  operationIdx = 2,
  hobt_idIdx = 3,
  allocation_unitIdx = 4,
  hobt_allocation_pageIdx = 5,
  page_idIdx = 6,
  file_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1061, *PTAG_UNNAMED_1061;

struct XE_SessionEventMgrSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_1062, *PTAG_UNNAMED_1062;

struct IColumnsInfo
{
}; /* size: 0x0008 */

typedef enum
{
  queue_idIdx = 0,
  database_idIdx = 1,
  time_since_receive_secsIdx = 2,
  database_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1063, *PTAG_UNNAMED_1063;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 48,
} TAG_UNNAMED_1064, *PTAG_UNNAMED_1064;

class XE_AutoRg<unsigned short>
{
}; /* size: 0x0008 */

struct XE_LoadedLibrary
{
  /* 0x0000 */ long Padding_337[2];
  /* 0x0008 */ struct HINSTANCE__* m_hInstance;
  /* 0x0010 */ void* m_pfnLifetimeControl /* function */;
  /* 0x0018 */ class XE_AutoRg<unsigned short> m_wchName;
}; /* size: 0x0020 */

enum SOS_Tracing::OS_TRACE_FLAGS
{
  OS_TRACE_EXCEPTION_HANDLER_DUMP = 1,
  OS_TRACE_EXCEPTION_NOAVHANDLER = 2,
  OS_TRACE_EXCEPTION_HANDLERMATCH = 4,
  OS_TRACE_EXCEPTION_OUTPUTTOCONSOLE = 8,
  OS_TRACE_EXCEPTION_NOTIFICATION = 16,
  OS_TRACE_EXCEPTION_DEBUGBREAK = 32,
  OS_TRACE_PAGEHEAP = 64,
  OS_TRACE_ABORT = 128,
  OS_TRACE_STACKS = 256,
  OS_TRACE_RESOURCEMONITOR = 512,
  OS_TRACE_FREEPAGEPROT = 1024,
  OS_TRACE_FREEPAGEPROT_EVERON = 2048,
};

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
{
  /* 0x0000 */ void* pfnNetSize /* function */;
  /* 0x0008 */ void* pfnToNetCs /* function */;
  /* 0x0010 */ void* pfnLocalSize /* function */;
  /* 0x0018 */ void* pfnFromNetCs /* function */;
} NDR_CS_SIZE_CONVERT_ROUTINES, *PNDR_CS_SIZE_CONVERT_ROUTINES; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  recovery_unit_idIdx = 1,
  database_segment_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1065, *PTAG_UNNAMED_1065;

struct IProvideClassInfo2
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1066, *PTAG_UNNAMED_1066;

struct tagCURSORINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long flags;
  /* 0x0008 */ struct HICON__* hCursor;
  /* 0x0010 */ struct tagPOINT ptScreenPos;
}; /* size: 0x0018 */

typedef struct _SYSTEM_POWER_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ struct POWER_ACTION_POLICY PowerButton;
  /* 0x0010 */ struct POWER_ACTION_POLICY SleepButton;
  /* 0x001c */ struct POWER_ACTION_POLICY LidClose;
  /* 0x0028 */ enum _SYSTEM_POWER_STATE LidOpenWake;
  /* 0x002c */ unsigned long Reserved;
  /* 0x0030 */ struct POWER_ACTION_POLICY Idle;
  /* 0x003c */ unsigned long IdleTimeout;
  /* 0x0040 */ unsigned char IdleSensitivity;
  /* 0x0041 */ unsigned char DynamicThrottle;
  /* 0x0042 */ unsigned char Spare2[2];
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinSleep;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE MaxSleep;
  /* 0x004c */ enum _SYSTEM_POWER_STATE ReducedLatencySleep;
  /* 0x0050 */ unsigned long WinLogonFlags;
  /* 0x0054 */ unsigned long Spare3;
  /* 0x0058 */ unsigned long DozeS4Timeout;
  /* 0x005c */ unsigned long BroadcastCapacityResolution;
  /* 0x0060 */ struct SYSTEM_POWER_LEVEL DischargePolicy[4];
  /* 0x00c0 */ unsigned long VideoTimeout;
  /* 0x00c4 */ unsigned char VideoDimDisplay;
  /* 0x00c5 */ char Padding_338[3];
  /* 0x00c8 */ unsigned long VideoReserved[3];
  /* 0x00d4 */ unsigned long SpindownTimeout;
  /* 0x00d8 */ unsigned char OptimizeForPower;
  /* 0x00d9 */ unsigned char FanThrottleTolerance;
  /* 0x00da */ unsigned char ForcedThrottle;
  /* 0x00db */ unsigned char MinThrottle;
  /* 0x00dc */ struct POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY; /* size: 0x00e8 */

enum TCacheStore<CacheClockAlgorithm>::HashBucketAction
{
  INSERT = 0,
  REMOVE = 1,
};

struct IWbemEventProviderSecurity
{
}; /* size: 0x0008 */

enum TCacheStore<CacheClockAlgorithm>::InitOption
{
  MakeVisible = 0,
  LeaveInvisible = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1067, *PTAG_UNNAMED_1067;

typedef struct _SYSDBG_MSR
{
  /* 0x0000 */ unsigned long Msr;
  /* 0x0004 */ long Padding_339;
  /* 0x0008 */ unsigned __int64 Data;
} SYSDBG_MSR, *PSYSDBG_MSR; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  previous_stateIdx = 1,
  new_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1068, *PTAG_UNNAMED_1068;

typedef struct _SYSTEM_BIGPOOL_ENTRY
{
  union
  {
    /* 0x0000 */ void* VirtualAddress;
    /* 0x0000 */ unsigned __int64 NonPaged : 1; /* bit position: 0 */
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 SizeInBytes;
  union
  {
    /* 0x0010 */ unsigned char Tag[4];
    /* 0x0010 */ unsigned long TagUlong;
  }; /* size: 0x0004 */
  /* 0x0014 */ long __PADDING__[1];
} SYSTEM_BIGPOOL_ENTRY, *PSYSTEM_BIGPOOL_ENTRY; /* size: 0x0018 */

typedef enum _TRUSTEE_TYPE
{
  TRUSTEE_IS_UNKNOWN = 0,
  TRUSTEE_IS_USER = 1,
  TRUSTEE_IS_GROUP = 2,
  TRUSTEE_IS_DOMAIN = 3,
  TRUSTEE_IS_ALIAS = 4,
  TRUSTEE_IS_WELL_KNOWN_GROUP = 5,
  TRUSTEE_IS_DELETED = 6,
  TRUSTEE_IS_INVALID = 7,
  TRUSTEE_IS_COMPUTER = 8,
} TRUSTEE_TYPE, *PTRUSTEE_TYPE;

typedef struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING
{
  /* 0x0000 */ const void* Data;
  /* 0x0008 */ unsigned long AssemblyRosterIndex;
  /* 0x000c */ long Padding_340;
  /* 0x0010 */ void* ResolutionContext;
  /* 0x0018 */ struct _UNICODE_STRING Root;
  /* 0x0028 */ unsigned char KnownRoot;
  /* 0x0029 */ char Padding_341[7];
  /* 0x0030 */ unsigned __int64 RootCount;
  /* 0x0038 */ unsigned char CancelResolution;
  /* 0x0039 */ char __PADDING__[7];
} ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING, *PASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING; /* size: 0x0040 */

enum TCacheStore<CacheClockAlgorithm>::InsertOptions
{
  SkipNoHashTable = 0,
  SkipMainHashTable = 1,
  SkipTokenHashTable = 2,
};

class Spinlock<93,11,1>
{
}; /* size: 0x0004 */

enum XELiveTargetClientAPI::ForcedUnregisterReason
{
  XEFUR_SESSION_STOP = 0,
  XEFUR_OUT_OF_BUFFERS = 1,
  XEFUR_METADATA_ERROR = 2,
  XEFUR_FAIL = 3,
  XEFUR_LAST = 4,
};

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1069, *PTAG_UNNAMED_1069;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1070, *PTAG_UNNAMED_1070;

enum SOS_OS::enum_statusflags
{
  OS_STATUS_BOOTED = 1,
  OS_STATUS_SYSEXCEPTION_OCCURED = 2,
  OS_STATUS_REALNUMA = 4,
  OS_STATUS_DAC_ENABLED = 8,
  OS_STATUS_SUPPORT_LARGE_PAGES = 16,
  OS_STATUS_STATIC_AFFINITY = 32,
  OS_STATUS_DETOURS_INITIALIZED = 64,
  OS_STATUS_SOFTNUMA = 128,
  OS_STATUS_FAKENUMA = 256,
  OS_STATUS_PREBOOTED = 512,
  OS_STATUS_HYPERVISOR_ENABLED = 1024,
  OS_STATUS_LOCKED_PAGES_ENABLED = 2048,
  OS_STATUS_USING_UMS = 4096,
  OS_STATUS_SOFT_MAX_MEM_LIMIT = 8192,
  OS_STATUS_HYPERVISOR_ROOT_PARTITION = 16384,
};

class XeSqlPkg::memory_manager_total_server_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_342[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

enum SOS_OS::OS_STATS_FLAGS
{
  OS_STATS_SPINLOCK = 1,
  OS_STATS_IO = 2,
  OS_STATS_WAITS = 4,
  OS_STATS_HOSTING = 8,
  OS_STATS_WORKER_WAITS = 16,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1071, *PTAG_UNNAMED_1071;

typedef enum
{
  retry_countIdx = 0,
  operationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1072, *PTAG_UNNAMED_1072;

enum SOS_OS::OS_OPTION_FLAGS
{
  OS_OPTION_CHANGE_TIMER_RESOLUTION = 1,
  OS_OPTION_USE_EXIT_PROCESS = 2,
  OS_OPTION_ALLOC_STACK_STORE_ON_INIT = 4,
  OS_OPTION_EXCEPTION_COUNTER = 8,
};

typedef struct _TRACE_GUID_PROPERTIES
{
  /* 0x0000 */ struct _GUID Guid;
  /* 0x0010 */ unsigned long GuidType;
  /* 0x0014 */ unsigned long LoggerId;
  /* 0x0018 */ unsigned long EnableLevel;
  /* 0x001c */ unsigned long EnableFlags;
  /* 0x0020 */ unsigned char IsEnable;
  /* 0x0021 */ char __PADDING__[3];
} TRACE_GUID_PROPERTIES, *PTRACE_GUID_PROPERTIES; /* size: 0x0024 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1073, *PTAG_UNNAMED_1073;

typedef struct _FILE_LINK_ENTRY_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ long Padding_343;
  /* 0x0008 */ __int64 ParentFileId;
  /* 0x0010 */ unsigned long FileNameLength;
  /* 0x0014 */ wchar_t FileName[1];
  /* 0x0016 */ char __PADDING__[2];
} FILE_LINK_ENTRY_INFORMATION, *PFILE_LINK_ENTRY_INFORMATION; /* size: 0x0018 */

typedef struct _FILE_LINKS_INFORMATION
{
  /* 0x0000 */ unsigned long BytesNeeded;
  /* 0x0004 */ unsigned long EntriesReturned;
  /* 0x0008 */ struct _FILE_LINK_ENTRY_INFORMATION Entry;
} FILE_LINKS_INFORMATION, *PFILE_LINKS_INFORMATION; /* size: 0x0020 */

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  pathIdx = 7,
  io_dataIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1074, *PTAG_UNNAMED_1074;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 50,
} TAG_UNNAMED_1075, *PTAG_UNNAMED_1075;

enum SOS_OS::HOT_ADD_CPU_UNSUPPORTED_REASON
{
  HAC_DISABLED = 0,
  HAC_SOFT_NUMA = 1,
  HAC_STATIC_AFFINITY = 2,
  HAC_MISSING_OS_SUPPORT = 3,
  HAC_DISABLED_TRACE_FLAG = 4,
};

typedef enum
{
  thread_internal_idIdx = 0,
  file_idIdx = 1,
  extents_numberIdx = 2,
  breaks_numberIdx = 3,
  first_extent_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1076, *PTAG_UNNAMED_1076;

typedef struct __vc_attributes::objectAttribute
{
} _vc_attributes::objectAttribute, *P_vc_attributes::objectAttribute; /* size: 0x0001 */

enum SOS_OS::MaxWorkersConfigType
{
  MWCT_AUTO = 0,
  MWCT_MANUAL = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 52,
} TAG_UNNAMED_1077, *PTAG_UNNAMED_1077;

struct IEnumSTATSTG
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1078, *PTAG_UNNAMED_1078;

enum NODE_CLUSTER_STATE
{
  ClusterStateNotInstalled = 0,
  ClusterStateNotConfigured = 1,
  ClusterStateNotRunning = 3,
  ClusterStateRunning = 19,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1079, *PTAG_UNNAMED_1079;

enum SOS_DBG_BUFFER_TYPE
{
  SOS_DBGTYPE_NORMALBUFFER = 1,
  SOS_DBGTYPE_CYCLEBUFFER = 2,
  SOS_DBGTYPE_NOBUFFERING = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1080, *PTAG_UNNAMED_1080;

class CAutoBase<XE_LogSpecs>
{
  /* 0x0000 */ class XE_LogSpecs* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_1081, *PTAG_UNNAMED_1081;

enum XEPackage0::HistoryTargetFailureInterface::FailureCategories
{
  FTFT_LogWrite = 1,
  FTFT_LogCreate = 2,
  FTFT_MetadataSerialize = 4,
  FTFT_LogMiscOp = 8,
  FTFT_SyncOp = 16,
  FTFT_Oom = 32,
  FTFT_Param = 64,
  FTFT_LogWriteDiskFull = 128,
};

class Spinlock<213,2,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NonFullLists = 8,
  MaxFixedInfoLists = 9,
  LastList = 8,
  FullList = 0,
  AlmostFullList = 1,
} TAG_UNNAMED_1082, *PTAG_UNNAMED_1082;

class XeSqlPkg::glm_local_brick_undo_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_344[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  forced_quorumIdx = 0,
  joined_and_synchronizedIdx = 1,
  previous_primary_or_automatic_failover_targetIdx = 2,
  availability_group_idIdx = 3,
  availability_group_nameIdx = 4,
  availability_replica_idIdx = 5,
  availability_replica_nameIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1083, *PTAG_UNNAMED_1083;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_1084, *PTAG_UNNAMED_1084;

typedef struct __vc_attributes::readonlyAttribute
{
} _vc_attributes::readonlyAttribute, *P_vc_attributes::readonlyAttribute; /* size: 0x0001 */

typedef enum
{
  offset = 8,
} TAG_UNNAMED_1085, *PTAG_UNNAMED_1085;

struct tagDISPPARAMS
{
  /* 0x0000 */ struct tagVARIANT* rgvarg;
  /* 0x0008 */ long* rgdispidNamedArgs;
  /* 0x0010 */ unsigned int cArgs;
  /* 0x0014 */ unsigned int cNamedArgs;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 36,
} TAG_UNNAMED_1086, *PTAG_UNNAMED_1086;

struct ITypeLib
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1087, *PTAG_UNNAMED_1087;

class SESinglyLinkedStruct<WaitForGraphVertex,24>
{
  /* 0x0000 */ class WaitForGraphVertex* m_head;
  /* 0x0008 */ class WaitForGraphVertex* m_tail;
  /* 0x0010 */ unsigned int m_numElements;
}; /* size: 0x0018 */

enum SOS_CacheStoreBase::configuration_flags
{
  SMALL_OBJECTS = 1,
  NO_DEBUG_HEAP = 2,
  SINGLE_USER_PEROBJECT = 4,
  KEEP_EMPTY = 8,
  KEEP_INFLIGHT = 16,
  PARTITIONING = 32,
  POOL_FILTERED_LOOKUP = 64,
  PARENT_ALLOCATOR_PEROBJECT = 128,
  SMALL_OBJECTS_COOKIE_ONLY = 256,
  GLOBAL_TOKENS = 512,
  SUPPORTS_SIMULATION = 1024,
  SUPPORTS_HISTORY = 2048,
  LARGE_PAGE_INTERNAL_MEMOBJ = 4096,
};

class XeSqlPkg::query_rpc_server_runtime_wake_up
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_345[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int table_nameOffset;
    /* 0x0000 */ const int index_nameOffset;
    /* 0x0000 */ const int schema_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  manager_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1088, *PTAG_UNNAMED_1088;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 28,
} TAG_UNNAMED_1089, *PTAG_UNNAMED_1089;

class CAutoBase<ColumnDescriptor>
{
  /* 0x0000 */ struct ColumnDescriptor* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1090, *PTAG_UNNAMED_1090;

struct tagPOINTS
{
  /* 0x0000 */ short x;
  /* 0x0002 */ short y;
}; /* size: 0x0004 */

typedef enum
{
  offset = 0,
} TAG_UNNAMED_1091, *PTAG_UNNAMED_1091;

struct SEReplPartitionVersionSLock
{
}; /* size: 0x0004 */

enum MemoryNode::MemoryNodeOptions
{
  StartLazyWriter = 1,
  Offline = 2,
};

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1092, *PTAG_UNNAMED_1092;

struct ICreateTypeInfo
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1093, *PTAG_UNNAMED_1093;

enum MemoryNode::MemStatusFlags
{
  CheckNuma = 1,
  EnforceStrictNuma = 2,
};

typedef struct _REMOTE_NAME_INFOA
{
  /* 0x0000 */ char* lpUniversalName;
  /* 0x0008 */ char* lpConnectionName;
  /* 0x0010 */ char* lpRemainingPath;
} REMOTE_NAME_INFOA, *PREMOTE_NAME_INFOA; /* size: 0x0018 */

enum CLUSTER_NETWORK_ROLE
{
  ClusterNetworkRoleNone = 0,
  ClusterNetworkRoleInternalUse = 1,
  ClusterNetworkRoleClientAccess = 2,
  ClusterNetworkRoleInternalAndClient = 3,
};

typedef struct _XMM_SAVE_AREA32
{
  /* 0x0000 */ unsigned short ControlWord;
  /* 0x0002 */ unsigned short StatusWord;
  /* 0x0004 */ unsigned char TagWord;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short ErrorOpcode;
  /* 0x0008 */ unsigned long ErrorOffset;
  /* 0x000c */ unsigned short ErrorSelector;
  /* 0x000e */ unsigned short Reserved2;
  /* 0x0010 */ unsigned long DataOffset;
  /* 0x0014 */ unsigned short DataSelector;
  /* 0x0016 */ unsigned short Reserved3;
  /* 0x0018 */ unsigned long MxCsr;
  /* 0x001c */ unsigned long MxCsr_Mask;
  /* 0x0020 */ struct _M128 FloatRegisters[8];
  /* 0x00a0 */ struct _M128 XmmRegisters[16];
  /* 0x01a0 */ unsigned char Reserved4[96];
} XMM_SAVE_AREA32, *PXMM_SAVE_AREA32; /* size: 0x0200 */

typedef enum
{
  AtStart = -1,
} TAG_UNNAMED_1094, *PTAG_UNNAMED_1094;

struct tagPELARRAY
{
  /* 0x0000 */ long paXCount;
  /* 0x0004 */ long paYCount;
  /* 0x0008 */ long paXExt;
  /* 0x000c */ long paYExt;
  /* 0x0010 */ unsigned char paRGBs;
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1095, *PTAG_UNNAMED_1095;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1096, *PTAG_UNNAMED_1096;

typedef struct _TRANSACTION_LIST_ENTRY
{
  /* 0x0000 */ struct _GUID UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY; /* size: 0x0010 */

typedef struct _TRANSACTION_LIST_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfTransactions;
  /* 0x0004 */ struct _TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION; /* size: 0x0014 */

typedef enum
{
  LocalNodeId = 64,
} TAG_UNNAMED_1097, *PTAG_UNNAMED_1097;

struct ITimeAndNoticeControl
{
}; /* size: 0x0008 */

struct std::_Pair_base<XEPackage0::BucketizingTarget::Entry * *,XEPackage0::BucketizingTarget::Entry * *>
{
  /* 0x0000 */ class XEPackage0::BucketizingTarget::Entry** first;
  /* 0x0008 */ class XEPackage0::BucketizingTarget::Entry** second;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 29,
} TAG_UNNAMED_1098, *PTAG_UNNAMED_1098;

struct XactLockInfoTaskSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1099, *PTAG_UNNAMED_1099;

class std::numeric_limits<int>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1100, *PTAG_UNNAMED_1100;

typedef union _GDI_NONREMOTE::__MIDL_IWinTypes_0002
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct _DWORD_BLOB* hRemote;
  }; /* size: 0x0008 */
} GDI_NONREMOTE::__MIDL_IWinTypes_0002, *PGDI_NONREMOTE::__MIDL_IWinTypes_0002; /* size: 0x0008 */

typedef struct _GDI_NONREMOTE
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_346;
  /* 0x0008 */ union _GDI_NONREMOTE::__MIDL_IWinTypes_0002 u;
} GDI_NONREMOTE, *PGDI_NONREMOTE; /* size: 0x0010 */

enum DBASYNCHPHASEENUM
{
  DBASYNCHPHASE_INITIALIZATION = 0,
  DBASYNCHPHASE_POPULATION = 1,
  DBASYNCHPHASE_COMPLETE = 2,
  DBASYNCHPHASE_CANCELED = 3,
};

struct IWbemLevel1Login
{
}; /* size: 0x0008 */

class TypeList<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_1101, *PTAG_UNNAMED_1101;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_1102, *PTAG_UNNAMED_1102;

typedef enum
{
  offset = 16,
} TAG_UNNAMED_1103, *PTAG_UNNAMED_1103;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_1104, *PTAG_UNNAMED_1104;

class SpinlockHolder<37,18,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1105, *PTAG_UNNAMED_1105;

typedef struct _USER_INFO_10
{
  /* 0x0000 */ wchar_t* usri10_name;
  /* 0x0008 */ wchar_t* usri10_comment;
  /* 0x0010 */ wchar_t* usri10_usr_comment;
  /* 0x0018 */ wchar_t* usri10_full_name;
} USER_INFO_10, *PUSER_INFO_10; /* size: 0x0020 */

enum XeSqlPkg::filestream_file_io_request::CustomizableSlots
{
  collect_workitem_descriptionSlot = 0,
  collect_transaction_idSlot = 1,
  collect_correlation_idsSlot = 2,
  collect_logical_pathSlot = 3,
  collect_physical_pathSlot = 4,
  collect_original_pathSlot = 5,
};

struct XidArraySLock
{
}; /* size: 0x0004 */

typedef enum _MEMORY_WORKING_SET_EX_LOCATION
{
  MemoryLocationInvalid = 0,
  MemoryLocationResident = 1,
  MemoryLocationPagefile = 2,
  MemoryLocationReserved = 3,
} MEMORY_WORKING_SET_EX_LOCATION, *PMEMORY_WORKING_SET_EX_LOCATION;

typedef struct _PROFILE_SOURCE_INFO
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long Source;
  /* 0x0008 */ unsigned long MinInterval;
  /* 0x000c */ unsigned long MaxInterval;
  /* 0x0010 */ unsigned __int64 Reserved;
  /* 0x0018 */ wchar_t Description[1];
  /* 0x001a */ char __PADDING__[6];
} PROFILE_SOURCE_INFO, *PPROFILE_SOURCE_INFO; /* size: 0x0020 */

typedef enum
{
  query_operation_node_idIdx = 0,
  is_primaryIdx = 1,
  is_hybridIdx = 2,
  is_segmentIdx = 3,
  is_multiparentIdx = 4,
  is_eagerIdx = 5,
  is_stackIdx = 6,
  keep_workfile_aroundIdx = 7,
  is_index_on_the_flyIdx = 8,
  is_index_cacheIdx = 9,
  has_one_row_optimizationIdx = 10,
  support_large_objectsIdx = 11,
  prefetch_large_objectsIdx = 12,
  is_top_oneIdx = 13,
  is_parallelIdx = 14,
  LastField = 15,
} TAG_UNNAMED_1106, *PTAG_UNNAMED_1106;

enum SOS_UserStore::configuration_flags
{
  KEEP_EMPTY = 1,
};

typedef enum
{
  proc_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1107, *PTAG_UNNAMED_1107;

typedef enum
{
  idIdx = 0,
  old_affinity_maskIdx = 1,
  new_affinity_maskIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1108, *PTAG_UNNAMED_1108;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1109, *PTAG_UNNAMED_1109;

typedef enum
{
  schema_mgr_database_idIdx = 0,
  versionIdx = 1,
  operationIdx = 2,
  schema_mgr_addrIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1110, *PTAG_UNNAMED_1110;

enum XeSosPkg::ASSERT_TYPE
{
  AT_DEBUG = 0,
  AT_RETAIL = 1,
  AT_SOFT = 2,
};

class Spinlock<84,13,1>
{
}; /* size: 0x0004 */

typedef enum
{
  assert_typeIdx = 0,
  line_numberIdx = 1,
  expressionIdx = 2,
  file_pathIdx = 3,
  descriptionIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1111, *PTAG_UNNAMED_1111;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1112, *PTAG_UNNAMED_1112;

enum CLUSTER_NETWORK_ENUM
{
  CLUSTER_NETWORK_ENUM_NETINTERFACES = 1,
  CLUSTER_NETWORK_ENUM_ALL = 1,
};

typedef enum
{
  brick_idIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1113, *PTAG_UNNAMED_1113;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 32,
} TAG_UNNAMED_1114, *PTAG_UNNAMED_1114;

typedef enum
{
  MAX_ENTRIES = 16,
} TAG_UNNAMED_1115, *PTAG_UNNAMED_1115;

class XeSqlPkg::flush_file_buffers
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_347[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int succeededOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_1116, *PTAG_UNNAMED_1116;

struct tagWNODE_EVENT_ITEM
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
}; /* size: 0x0030 */

struct tagLOCALESIGNATURE
{
  /* 0x0000 */ unsigned long lsUsb[4];
  /* 0x0010 */ unsigned long lsCsbDefault[2];
  /* 0x0018 */ unsigned long lsCsbSupported[2];
}; /* size: 0x0020 */

enum CLUSTER_PROPERTY_TYPE
{
  CLUSPROP_TYPE_UNKNOWN = -1,
  CLUSPROP_TYPE_ENDMARK = 0,
  CLUSPROP_TYPE_LIST_VALUE = 1,
  CLUSPROP_TYPE_RESCLASS = 2,
  CLUSPROP_TYPE_RESERVED1 = 3,
  CLUSPROP_TYPE_NAME = 4,
  CLUSPROP_TYPE_SIGNATURE = 5,
  CLUSPROP_TYPE_SCSI_ADDRESS = 6,
  CLUSPROP_TYPE_DISK_NUMBER = 7,
  CLUSPROP_TYPE_PARTITION_INFO = 8,
  CLUSPROP_TYPE_FTSET_INFO = 9,
  CLUSPROP_TYPE_DISK_SERIALNUMBER = 10,
  CLUSPROP_TYPE_DISK_GUID = 11,
  CLUSPROP_TYPE_DISK_SIZE = 12,
  CLUSPROP_TYPE_PARTITION_INFO_EX = 13,
  CLUSPROP_TYPE_NODE_BITMASK = 14,
  CLUSPROP_TYPE_NODE_NAME = 15,
  CLUSPROP_TYPE_DISK_HEADER_IDS = 16,
  CLUSPROP_TYPE_DISK_VALUES = 17,
  CLUSPROP_TYPE_DISK_PRIV_PROPERTIES = 18,
  CLUSPROP_TYPE_CSV_PARTITION_INFO_EX = 19,
  CLUSPROP_TYPE_NODE_INDEX = 20,
  CLUSPROP_TYPE_DISKID = 21,
  CLUSPROP_TYPE_VOLUME_INFO = 22,
  CLUSPROP_TYPE_USER = 0xffff8000,
};

struct tagCADWORD
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_348;
  /* 0x0008 */ unsigned long* pElems;
}; /* size: 0x0010 */

enum TLSIndex
{
  TLS_COMP_EXEC_CTXT = 0,
  TLS_EC = 1,
  TLS_BROKER = 2,
  TLS_TASKPROXY = 3,
  TLS_MSQLXACT = 4,
  TLS_SQLPROF = 5,
  TLS_STACKCHECKER = 6,
  TLS_SQLCLRHOSTTASK = 7,
  TLS_SNIERROR = 8,
  TLS_QRYINSTANCE = 9,
  TLS_DIAG = 10,
  TLS_FILESTREAM = 11,
  TLS_SNIERRORPROVIDER = 12,
  TLS_SNINATIVEERROR = 13,
  TLS_QUERYDRIVER = 14,
  TLS_QE_CC = 15,
  TLS_FEDERATEDXACT = 16,
  TLS_HEKATON = 17,
  TLS_LAST = 18,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1117, *PTAG_UNNAMED_1117;

class CAutoP<ColumnDescriptor>
{
}; /* size: 0x0008 */

enum DBCOMPAREENUM
{
  DBCOMPARE_LT = 0,
  DBCOMPARE_EQ = 1,
  DBCOMPARE_GT = 2,
  DBCOMPARE_NE = 3,
  DBCOMPARE_NOTCOMPARABLE = 4,
};

typedef enum _WNF_DATA_SCOPE
{
  WnfDataScopeSystem = 0,
  WnfDataScopeSession = 1,
  WnfDataScopeUser = 2,
  WnfDataScopeProcess = 3,
} WNF_DATA_SCOPE, *PWNF_DATA_SCOPE;

enum SERIALIZE_EXCEPTIONS
{
  OSFERR_WRONG_MEMOBJ = 0,
  OSFERR_EMBEDDED_POINTER = 1,
  OSFERR_BAD_ALLOCATION = 2,
  OSFERR_ERR_IN_STREAM = 3,
  OSFERR_BASE_CLASS_NOT_FOUND = 4,
  OSFERR_ABSTRACT_CLASS = 5,
  OSFERR_NULL_STATICPTR = 6,
  OSFERR_CLASS_NOT_SERIALIZABLE = 7,
  OSFERR_STDOBJ_CLASS_NOT_ARRAY_SERIALIZABLE = 8,
};

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1118, *PTAG_UNNAMED_1118;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1119, *PTAG_UNNAMED_1119;

enum DBINDEX_COL_ORDERENUM
{
  DBINDEX_COL_ORDER_ASC = 0,
  DBINDEX_COL_ORDER_DESC = 1,
};

class Spinlock<264,1,1>
{
}; /* size: 0x0004 */

enum DBREASONENUM
{
  DBREASON_ROWSET_FETCHPOSITIONCHANGE = 0,
  DBREASON_ROWSET_RELEASE = 1,
  DBREASON_COLUMN_SET = 2,
  DBREASON_COLUMN_RECALCULATED = 3,
  DBREASON_ROW_ACTIVATE = 4,
  DBREASON_ROW_RELEASE = 5,
  DBREASON_ROW_DELETE = 6,
  DBREASON_ROW_FIRSTCHANGE = 7,
  DBREASON_ROW_INSERT = 8,
  DBREASON_ROW_RESYNCH = 9,
  DBREASON_ROW_UNDOCHANGE = 10,
  DBREASON_ROW_UNDOINSERT = 11,
  DBREASON_ROW_UNDODELETE = 12,
  DBREASON_ROW_UPDATE = 13,
  DBREASON_ROWSET_CHANGED = 14,
};

struct XE_TCollection<0,0>::TCol<0>
{
}; /* size: 0x0001 */

enum DBREASONENUM15
{
  DBREASON_ROWPOSITION_CHANGED = 15,
  DBREASON_ROWPOSITION_CHAPTERCHANGED = 16,
  DBREASON_ROWPOSITION_CLEARED = 17,
  DBREASON_ROW_ASYNCHINSERT = 18,
};

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1120, *PTAG_UNNAMED_1120;

typedef struct _PMD
{
  /* 0x0000 */ int mdisp;
  /* 0x0004 */ int pdisp;
  /* 0x0008 */ int vdisp;
} PMD, *PPMD; /* size: 0x000c */

typedef struct _s__RTTIBaseClassDescriptor2
{
  /* 0x0000 */ struct _TypeDescriptor* pTypeDescriptor;
  /* 0x0008 */ unsigned long numContainedBases;
  /* 0x000c */ struct _PMD where;
  /* 0x0018 */ unsigned long attributes;
  /* 0x001c */ const struct _s__RTTIClassHierarchyDescriptor* pClassDescriptor;
} s__RTTIBaseClassDescriptor2, *Ps__RTTIBaseClassDescriptor2; /* size: 0x0024 */

enum CSerializeContext<CMemBufFormatter>::DESERIALIZE_MODES
{
  NEWMEMORY = 0,
  PREALLOCATED = 1,
  IGNOREDUP = 2,
};

class DmpPointer<SEList<SOS_Node,16> >
{
  /* 0x0000 */ class SEList<SOS_Node,16>* m_pRaw;
}; /* size: 0x0008 */

enum CLUSTER_ENUM
{
  CLUSTER_ENUM_NODE = 1,
  CLUSTER_ENUM_RESTYPE = 2,
  CLUSTER_ENUM_RESOURCE = 4,
  CLUSTER_ENUM_GROUP = 8,
  CLUSTER_ENUM_NETWORK = 16,
  CLUSTER_ENUM_NETINTERFACE = 32,
  CLUSTER_ENUM_SHARED_VOLUME_RESOURCE = 0x40000000,
  CLUSTER_ENUM_INTERNAL_NETWORK = -2147483648,
  CLUSTER_ENUM_ALL = 63,
};

typedef enum
{
  error_numberIdx = 0,
  successIdx = 1,
  statementIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1121, *PTAG_UNNAMED_1121;

typedef struct __vc_attributes::atl::com_interface_entryAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::atl::com_interface_entryAttribute, *P_vc_attributes::atl::com_interface_entryAttribute; /* size: 0x0008 */

enum CLUSTER_PROPERTY_FORMAT
{
  CLUSPROP_FORMAT_UNKNOWN = 0,
  CLUSPROP_FORMAT_BINARY = 1,
  CLUSPROP_FORMAT_DWORD = 2,
  CLUSPROP_FORMAT_SZ = 3,
  CLUSPROP_FORMAT_EXPAND_SZ = 4,
  CLUSPROP_FORMAT_MULTI_SZ = 5,
  CLUSPROP_FORMAT_ULARGE_INTEGER = 6,
  CLUSPROP_FORMAT_LONG = 7,
  CLUSPROP_FORMAT_EXPANDED_SZ = 8,
  CLUSPROP_FORMAT_SECURITY_DESCRIPTOR = 9,
  CLUSPROP_FORMAT_LARGE_INTEGER = 10,
  CLUSPROP_FORMAT_WORD = 11,
  CLUSPROP_FORMAT_FILETIME = 12,
  CLUSPROP_FORMAT_VALUE_LIST = 13,
  CLUSPROP_FORMAT_PROPERTY_LIST = 14,
  CLUSPROP_FORMAT_USER = 0xffff8000,
};

typedef struct _CONSOLE_SCREEN_BUFFER_INFO
{
  /* 0x0000 */ struct _COORD dwSize;
  /* 0x0004 */ struct _COORD dwCursorPosition;
  /* 0x0008 */ unsigned short wAttributes;
  /* 0x000a */ struct _SMALL_RECT srWindow;
  /* 0x0012 */ struct _COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO; /* size: 0x0016 */

enum CLUSTER_GROUP_ENUM
{
  CLUSTER_GROUP_ENUM_CONTAINS = 1,
  CLUSTER_GROUP_ENUM_NODES = 2,
  CLUSTER_GROUP_ENUM_ALL = 3,
};

class CAutoP<XEPackage0::HistoryTarget>
{
}; /* size: 0x0008 */

typedef enum _KEY_VALUE_INFORMATION_CLASS
{
  KeyValueBasicInformation = 0,
  KeyValueFullInformation = 1,
  KeyValuePartialInformation = 2,
  KeyValueFullInformationAlign64 = 3,
  KeyValuePartialInformationAlign64 = 4,
  MaxKeyValueInfoClass = 5,
} KEY_VALUE_INFORMATION_CLASS, *PKEY_VALUE_INFORMATION_CLASS;

enum XeSqlPkg::auto_stats::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

enum ISOFLAG
{
  ISOFLAG_RETAIN_COMMIT_DC = 1,
  ISOFLAG_RETAIN_COMMIT = 2,
  ISOFLAG_RETAIN_COMMIT_NO = 3,
  ISOFLAG_RETAIN_ABORT_DC = 4,
  ISOFLAG_RETAIN_ABORT = 8,
  ISOFLAG_RETAIN_ABORT_NO = 12,
  ISOFLAG_RETAIN_DONTCARE = 5,
  ISOFLAG_RETAIN_BOTH = 10,
  ISOFLAG_RETAIN_NONE = 15,
  ISOFLAG_OPTIMISTIC = 16,
  ISOFLAG_READONLY = 32,
};

enum DBKINDENUM
{
  DBKIND_GUID_NAME = 0,
  DBKIND_GUID_PROPID = 1,
  DBKIND_NAME = 2,
  DBKIND_PGUID_NAME = 3,
  DBKIND_PGUID_PROPID = 4,
  DBKIND_PROPID = 5,
  DBKIND_GUID = 6,
};

class std::bad_alloc
{
}; /* size: 0x0018 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1122, *PTAG_UNNAMED_1122;

struct HIMC__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

enum ClassIdEnum
{
  e_DuplicateClassId__1 = 76,
  e_isTemplateSOS_CacheTokenMessage = 0,
  e_classidSOS_CacheTokenMessage = 1,
  e_DuplicateClassId__2 = 76,
  e_isTemplateSOS_CacheEntryMessage = 0,
  e_classidSOS_CacheEntryMessage = 2,
  e_DuplicateClassId__3 = 76,
  e_isTemplateSOS_CacheRequestMessage = 0,
  e_classidSOS_CacheRequestMessage = 3,
  e_DuplicateClassId__4 = 76,
  e_isTemplateSOS_CacheReplyMessage = 0,
  e_classidSOS_CacheReplyMessage = 4,
  e_DuplicateClassId__5 = 76,
  e_isTemplateSOS_CacheUserExtensionBase = 0,
  e_classidSOS_CacheUserExtensionBase = 5,
  e_DuplicateClassId__6 = 76,
  e_isTemplateSOS_CacheUserExtensionDefault = 0,
  e_classidSOS_CacheUserExtensionDefault = 6,
  e_DuplicateClassId__7 = 76,
  e_isTemplateSOS_CacheMemBufferMessage = 0,
  e_classidSOS_CacheMemBufferMessage = 7,
  e_DuplicateClassId__10 = 76,
  e_isTemplateCMatrixCacheExtension = 0,
  e_classidCMatrixCacheExtension = 10,
  e_DuplicateClassId__200 = 76,
  e_isTemplateRPCMessage = 0,
  e_classidRPCMessage = 200,
  e_DuplicateClassId__201 = 76,
  e_isTemplateGenericMessage = 0,
  e_classidGenericMessage = 201,
  e_DuplicateClassId__202 = 76,
  e_isTemplateTranRPCRequest = 0,
  e_classidTranRPCRequest = 202,
  e_DuplicateClassId__203 = 76,
  e_isTemplateTranRPCReply = 0,
  e_classidTranRPCReply = 203,
  e_DuplicateClassId__204 = 76,
  e_isTemplateChannelMap = 0,
  e_classidChannelMap = 204,
  e_DuplicateClassId__205 = 76,
  e_isTemplateChannelMapKey = 0,
  e_classidChannelMapKey = 205,
  e_DuplicateClassId__206 = 76,
  e_isTemplateRoutingTable = 0,
  e_classidRoutingTable = 206,
  e_DuplicateClassId__207 = 76,
  e_isTemplateMemberInfo = 0,
  e_classidMemberInfo = 207,
  e_DuplicateClassId__208 = 76,
  e_isTemplateBaseErrorMessage = 0,
  e_classidBaseErrorMessage = 208,
  e_DuplicateClassId__209 = 76,
  e_isTemplateBrickDownError = 0,
  e_classidBrickDownError = 209,
  e_DuplicateClassId__210 = 76,
  e_isTemplateChannelForceCloseError = 0,
  e_classidChannelForceCloseError = 210,
  e_DuplicateClassId__211 = 76,
  e_isTemplatePipelineDisconnectError = 0,
  e_classidPipelineDisconnectError = 211,
  e_DuplicateClassId__212 = 76,
  e_isTemplatePipelineKey = 0,
  e_classidPipelineKey = 212,
  e_DuplicateClassId__213 = 76,
  e_isTemplateAddressDiscriminator = 0,
  e_classidAddressDiscriminator = 213,
  e_DuplicateClassId__214 = 76,
  e_isTemplateAddressCommonPart = 0,
  e_classidAddressCommonPart = 214,
  e_DuplicateClassId__215 = 76,
  e_isTemplateChannelKey = 0,
  e_classidChannelKey = 215,
  e_DuplicateClassId__216 = 76,
  e_isTemplateMatrixError = 0,
  e_classidMatrixError = 216,
  e_DuplicateClassId__217 = 76,
  e_isTemplateExecutionErrorMessage = 0,
  e_classidExecutionErrorMessage = 217,
  e_DuplicateClassId__218 = 76,
  e_isTemplateMatrixErrorCollection = 0,
  e_classidMatrixErrorCollection = 218,
  e_DuplicateClassId__220 = 76,
  e_isTemplateAbortRemoteOperation = 0,
  e_classidAbortRemoteOperation = 220,
  e_DuplicateClassId__221 = 76,
  e_isTemplateAbortConfirmed = 0,
  e_classidAbortConfirmed = 221,
  e_DuplicateClassId__222 = 76,
  e_isTemplateRemoteOpRequestBase = 0,
  e_classidRemoteOpRequestBase = 222,
  e_DuplicateClassId__223 = 76,
  e_isTemplateRemoteOpReplyBase = 0,
  e_classidRemoteOpReplyBase = 223,
  e_DuplicateClassId__224 = 76,
  e_isTemplateCloseChannelRequest = 0,
  e_classidCloseChannelRequest = 224,
  e_DuplicateClassId__225 = 76,
  e_isTemplateCloseChannelReply = 0,
  e_classidCloseChannelReply = 225,
  e_DuplicateClassId__226 = 76,
  e_isTemplateMapKeyList = 0,
  e_classidMapKeyList = 226,
  e_DuplicateClassId__227 = 76,
  e_isTemplateCommAgeData = 0,
  e_classidCommAgeData = 227,
  e_DuplicateClassId__228 = 76,
  e_isTemplateCommAgeResponse = 0,
  e_classidCommAgeResponse = 228,
  e_DuplicateClassId__229 = 76,
  e_isTemplatePipelineSuspect = 0,
  e_classidPipelineSuspect = 229,
  e_DuplicateClassId__230 = 76,
  e_isTemplateCommAgeReq = 0,
  e_classidCommAgeReq = 230,
  e_DuplicateClassId__231 = 76,
  e_isTemplateCommAgeResp = 0,
  e_classidCommAgeResp = 231,
  e_DuplicateClassId__232 = 76,
  e_isTemplateRemoteOpRequestBaseNonTransactional = 0,
  e_classidRemoteOpRequestBaseNonTransactional = 232,
  e_DuplicateClassId__233 = 76,
  e_isTemplateRemoteOpReplyBaseNonTransactional = 0,
  e_classidRemoteOpReplyBaseNonTransactional = 233,
  e_DuplicateClassId__234 = 76,
  e_isTemplateRemoteOpCtxtMessageData = 0,
  e_classidRemoteOpCtxtMessageData = 234,
  e_DuplicateClassId__235 = 76,
  e_isTemplateStartRemoteThread = 0,
  e_classidStartRemoteThread = 235,
  e_DuplicateClassId__236 = 76,
  e_isTemplateRemoteThreadFinished = 0,
  e_classidRemoteThreadFinished = 236,
  e_DuplicateClassId__237 = 76,
  e_isTemplateStartRemoteThreadTransactional = 0,
  e_classidStartRemoteThreadTransactional = 237,
  e_DuplicateClassId__238 = 76,
  e_isTemplateRemoteThreadFinishedTransactional = 0,
  e_classidRemoteThreadFinishedTransactional = 238,
  e_DuplicateClassId__239 = 76,
  e_isTemplateProbeRemoteThread = 0,
  e_classidProbeRemoteThread = 239,
  e_DuplicateClassId__240 = 76,
  e_isTemplateProbeRemoteThreadReply = 0,
  e_classidProbeRemoteThreadReply = 240,
  e_DuplicateClassId__241 = 76,
  e_isTemplateRemoteThreadBaseRequest = 0,
  e_classidRemoteThreadBaseRequest = 241,
  e_DuplicateClassId__242 = 76,
  e_isTemplateRemoteThreadBaseReply = 0,
  e_classidRemoteThreadBaseReply = 242,
  e_DuplicateClassId__243 = 76,
  e_isTemplateRemoteThreadKey = 0,
  e_classidRemoteThreadKey = 243,
  e_DuplicateClassId__244 = 76,
  e_isTemplateOriginatorContext = 0,
  e_classidOriginatorContext = 244,
  e_DuplicateClassId__245 = 76,
  e_isTemplateMatrixRpcRequestBase = 0,
  e_classidMatrixRpcRequestBase = 245,
  e_DuplicateClassId__246 = 76,
  e_isTemplateMatrixRpcReplyBase = 0,
  e_classidMatrixRpcReplyBase = 246,
  e_DuplicateClassId__247 = 76,
  e_isTemplateRemoteOperationNoContext = 0,
  e_classidRemoteOperationNoContext = 247,
  e_DuplicateClassId__248 = 76,
  e_isTemplateStartThread = 0,
  e_classidStartThread = 248,
  e_DuplicateClassId__249 = 76,
  e_isTemplateThreadFinished = 0,
  e_classidThreadFinished = 249,
  e_DuplicateClassId__300 = 76,
  e_isTemplateMatrixXactContext = 0,
  e_classidMatrixXactContext = 300,
  e_DuplicateClassId__301 = 76,
  e_isTemplateMatrixXactId = 0,
  e_classidMatrixXactId = 301,
  e_DuplicateClassId__302 = 76,
  e_isTemplateMatrixXactReport = 0,
  e_classidMatrixXactReport = 302,
  e_DuplicateClassId__303 = 76,
  e_isTemplateWorkspaceIdRoot = 0,
  e_classidWorkspaceIdRoot = 303,
  e_DuplicateClassId__304 = 76,
  e_isTemplateCMatrixOpId = 0,
  e_classidCMatrixOpId = 304,
  e_DuplicateClassId__500 = 76,
  e_isTemplateFederatedXactId = 0,
  e_classidFederatedXactId = 500,
  e_DuplicateClassId__501 = 76,
  e_isTemplateCDiagAggregatedStats = 0,
  e_classidCDiagAggregatedStats = 501,
  e_DuplicateClassId__502 = 76,
  e_isTemplateSEExecutionStatistics = 0,
  e_classidSEExecutionStatistics = 502,
  e_DuplicateClassId__503 = 76,
  e_isTemplateTaskSessAllocCounters = 0,
  e_classidTaskSessAllocCounters = 503,
  e_DuplicateClassId__504 = 76,
  e_isTemplateLockStateInfo = 0,
  e_classidLockStateInfo = 504,
  e_DuplicateClassId__600 = 76,
  e_isTemplateTCMMessageHeader = 0,
  e_classidTCMMessageHeader = 600,
  e_DuplicateClassId__601 = 76,
  e_isTemplateNestInfo = 0,
  e_classidNestInfo = 601,
  e_DuplicateClassId__602 = 76,
  e_isTemplateTCMAgeCloseMessage = 0,
  e_classidTCMAgeCloseMessage = 602,
  e_DuplicateClassId__603 = 76,
  e_isTemplateTCMBrickStatusMessage = 0,
  e_classidTCMBrickStatusMessage = 603,
  e_DuplicateClassId__604 = 76,
  e_isTemplateTCMBrickCleanupData = 0,
  e_classidTCMBrickCleanupData = 604,
  e_DuplicateClassId__605 = 76,
  e_isTemplatePendingBindUnbindUSM = 0,
  e_classidPendingBindUnbindUSM = 605,
  e_DuplicateClassId__606 = 76,
  e_isTemplateUpdateSequenceMarkerInfo = 0,
  e_classidUpdateSequenceMarkerInfo = 606,
  e_DuplicateClassId__607 = 76,
  e_isTemplateTCMCommitOrders = 0,
  e_classidTCMCommitOrders = 607,
  e_DuplicateClassId__608 = 76,
  e_isTemplateTCMBrickStatus = 0,
  e_classidTCMBrickStatus = 608,
  e_DuplicateClassId__609 = 76,
  e_isTemplateTCMBrickAgeVector = 0,
  e_classidTCMBrickAgeVector = 609,
  e_DuplicateClassId__610 = 76,
  e_isTemplateCSerializedParticipant = 0,
  e_classidCSerializedParticipant = 610,
  e_DuplicateClassId__611 = 76,
  e_isTemplateCParticipantReport = 0,
  e_classidCParticipantReport = 611,
  e_DuplicateClassId__612 = 76,
  e_isTemplateLockClass = 0,
  e_classidLockClass = 612,
  e_DuplicateClassId__613 = 76,
  e_isTemplateMtmRpcRequest = 0,
  e_classidMtmRpcRequest = 613,
  e_DuplicateClassId__614 = 76,
  e_isTemplateLSN = 0,
  e_classidLSN = 614,
  e_DuplicateClassId__615 = 76,
  e_isTemplateAGEForXactResolve = 0,
  e_classidAGEForXactResolve = 615,
  e_DuplicateClassId__616 = 76,
  e_isTemplateListOfAGESForXactResolve = 0,
  e_classidListOfAGESForXactResolve = 616,
  e_DuplicateClassId__617 = 76,
  e_isTemplateTCMAgentXactOutcomesRequest = 0,
  e_classidTCMAgentXactOutcomesRequest = 617,
  e_DuplicateClassId__618 = 76,
  e_isTemplateTCMManagerXactOutcomesResponse = 0,
  e_classidTCMManagerXactOutcomesResponse = 618,
  e_DuplicateClassId__703 = 76,
  e_isTemplateCH04MessageRequest = 0,
  e_classidCH04MessageRequest = 703,
  e_DuplicateClassId__704 = 76,
  e_isTemplateCH04MessageReply = 0,
  e_classidCH04MessageReply = 704,
  e_DuplicateClassId__705 = 76,
  e_isTemplateCMyMessage = 0,
  e_classidCMyMessage = 705,
  e_DuplicateClassId__706 = 76,
  e_isTemplateChannelOperationMessage = 0,
  e_classidChannelOperationMessage = 706,
  e_DuplicateClassId__707 = 76,
  e_isTemplateChannelOperationMessageReply = 0,
  e_classidChannelOperationMessageReply = 707,
  e_DuplicateClassId__709 = 76,
  e_isTemplateSampleMessage = 0,
  e_classidSampleMessage = 709,
  e_DuplicateClassId__710 = 76,
  e_isTemplateSampleMessageReply = 0,
  e_classidSampleMessageReply = 710,
  e_DuplicateClassId__711 = 76,
  e_isTemplateUtChannelMessage = 0,
  e_classidUtChannelMessage = 711,
  e_DuplicateClassId__712 = 76,
  e_isTemplateUtOkReply = 0,
  e_classidUtOkReply = 712,
  e_DuplicateClassId__713 = 76,
  e_isTemplateAppChannelMessage = 0,
  e_classidAppChannelMessage = 713,
  e_DuplicateClassId__714 = 76,
  e_isTemplateAppChannelReply = 0,
  e_classidAppChannelReply = 714,
  e_DuplicateClassId__715 = 76,
  e_isTemplateAppChannelRequest = 0,
  e_classidAppChannelRequest = 715,
  e_DuplicateClassId__716 = 76,
  e_isTemplateChannelUnitTestMessage = 0,
  e_classidChannelUnitTestMessage = 716,
  e_DuplicateClassId__717 = 76,
  e_isTemplateXCWUnitTestMessage = 0,
  e_classidXCWUnitTestMessage = 717,
  e_DuplicateClassId__750 = 76,
  e_isTemplateForceCloseRequest = 0,
  e_classidForceCloseRequest = 750,
  e_DuplicateClassId__751 = 76,
  e_isTemplateForceCloseRequestReply = 0,
  e_classidForceCloseRequestReply = 751,
  e_DuplicateClassId__752 = 76,
  e_isTemplateForceCloseOrder = 0,
  e_classidForceCloseOrder = 752,
  e_DuplicateClassId__753 = 76,
  e_isTemplateForceCloseOrderReply = 0,
  e_classidForceCloseOrderReply = 753,
  e_DuplicateClassId__754 = 76,
  e_isTemplateCMatrixCMChannelEventMsg = 0,
  e_classidCMatrixCMChannelEventMsg = 754,
  e_DuplicateClassId__755 = 76,
  e_isTemplateCMatrixCMAChannelEventAckMsg = 0,
  e_classidCMatrixCMAChannelEventAckMsg = 755,
  e_DuplicateClassId__758 = 76,
  e_isTemplateCMatrixBroadcastNotification = 0,
  e_classidCMatrixBroadcastNotification = 758,
  e_DuplicateClassId__759 = 76,
  e_isTemplateCMatrixCMBitmapBuffer = 0,
  e_classidCMatrixCMBitmapBuffer = 759,
  e_DuplicateClassId__760 = 76,
  e_isTemplateCMatrixSerializableBitmap = 0,
  e_classidCMatrixSerializableBitmap = 760,
  e_DuplicateClassId__761 = 76,
  e_isTemplateCMatrixCMBitmap = 0,
  e_classidCMatrixCMBitmap = 761,
  e_DuplicateClassId__762 = 76,
  e_isTemplateCMatrixRosterMementoEntry = 0,
  e_classidCMatrixRosterMementoEntry = 762,
  e_DuplicateClassId__763 = 76,
  e_isTemplateCMatrixRosterMemento = 0,
  e_classidCMatrixRosterMemento = 763,
  e_DuplicateClassId__764 = 76,
  e_isTemplateCMatrixCMBaseMsg = 0,
  e_classidCMatrixCMBaseMsg = 764,
  e_DuplicateClassId__765 = 76,
  e_isTemplateCMatrixCMUpdateMsg = 0,
  e_classidCMatrixCMUpdateMsg = 765,
  e_DuplicateClassId__766 = 76,
  e_isTemplateCMatrixCMABrickAckMsg = 0,
  e_classidCMatrixCMABrickAckMsg = 766,
  e_DuplicateClassId__767 = 76,
  e_isTemplateCMatrixCMCommMsg = 0,
  e_classidCMatrixCMCommMsg = 767,
  e_DuplicateClassId__768 = 76,
  e_isTemplateCMatrixCMMgrNotifyMsg = 0,
  e_classidCMatrixCMMgrNotifyMsg = 768,
  e_DuplicateClassId__769 = 76,
  e_isTemplateCMatrixCMAgentEventMsg = 0,
  e_classidCMatrixCMAgentEventMsg = 769,
  e_DuplicateClassId__770 = 76,
  e_isTemplateCMatrixCMAAgentEventAckMsg = 0,
  e_classidCMatrixCMAAgentEventAckMsg = 770,
  e_DuplicateClassId__771 = 76,
  e_isTemplateCMatrixCMManagerEventMsg = 0,
  e_classidCMatrixCMManagerEventMsg = 771,
  e_DuplicateClassId__772 = 76,
  e_isTemplateCMatrixCMAManagerEventAckMsg = 0,
  e_classidCMatrixCMAManagerEventAckMsg = 772,
  e_DuplicateClassId__774 = 76,
  e_isTemplateCMatrixCMPlacementMsg = 0,
  e_classidCMatrixCMPlacementMsg = 774,
  e_DuplicateClassId__775 = 76,
  e_isTemplateCMatrixPlacementMemento = 0,
  e_classidCMatrixPlacementMemento = 775,
  e_DuplicateClassId__776 = 76,
  e_isTemplateCMatrixCMAShutdownMsg = 0,
  e_classidCMatrixCMAShutdownMsg = 776,
  e_DuplicateClassId__777 = 76,
  e_isTemplateSMatrixCMBrickEvent = 0,
  e_classidSMatrixCMBrickEvent = 777,
  e_DuplicateClassId__778 = 76,
  e_isTemplateSMatrixCMManagerEvent = 0,
  e_classidSMatrixCMManagerEvent = 778,
  e_DuplicateClassId__779 = 76,
  e_isTemplateUMatrixEventInfo = 0,
  e_classidUMatrixEventInfo = 779,
  e_DuplicateClassId__780 = 76,
  e_isTemplateSMatrixCMEventInfo = 0,
  e_classidSMatrixCMEventInfo = 780,
  e_DuplicateClassId__781 = 76,
  e_isTemplateCMatrixCMTimeEventMsg = 0,
  e_classidCMatrixCMTimeEventMsg = 781,
  e_DuplicateClassId__786 = 76,
  e_isTemplateCMatrixConfigMementoEntry = 0,
  e_classidCMatrixConfigMementoEntry = 786,
  e_DuplicateClassId__787 = 76,
  e_isTemplateCMatrixConfigMemento = 0,
  e_classidCMatrixConfigMemento = 787,
  e_DuplicateClassId__788 = 76,
  e_isTemplateSMatrixConfigMgrMetadata = 0,
  e_classidSMatrixConfigMgrMetadata = 788,
  e_DuplicateClassId__789 = 76,
  e_isTemplateCMatrixErrorMessage = 0,
  e_classidCMatrixErrorMessage = 789,
  e_DuplicateClassId__790 = 76,
  e_isTemplateMDAttrMatrixBrick = 0,
  e_classidMDAttrMatrixBrick = 790,
  e_DuplicateClassId__791 = 76,
  e_isTemplateSMatrixEnlistmentHeader = 0,
  e_classidSMatrixEnlistmentHeader = 791,
  e_DuplicateClassId__792 = 76,
  e_isTemplateCMatrixCMAEnlistmentMsg = 0,
  e_classidCMatrixCMAEnlistmentMsg = 792,
  e_DuplicateClassId__793 = 76,
  e_isTemplateCMatrixCMEnlistmentReplyMsg = 0,
  e_classidCMatrixCMEnlistmentReplyMsg = 793,
  e_DuplicateClassId__804 = 76,
  e_isTemplateCMdbSessionContextMessage = 0,
  e_classidCMdbSessionContextMessage = 804,
  e_DuplicateClassId__805 = 76,
  e_isTemplateCMdbBatchAndLevelContextMessage = 0,
  e_classidCMdbBatchAndLevelContextMessage = 805,
  e_DuplicateClassId__806 = 76,
  e_isTemplateCMdbStmtQueryContextMessage = 0,
  e_classidCMdbStmtQueryContextMessage = 806,
  e_DuplicateClassId__807 = 76,
  e_isTemplateCExecContext = 0,
  e_classidCExecContext = 807,
  e_DuplicateClassId__808 = 76,
  e_isTemplateCESExecParamListCollection = 0,
  e_classidCESExecParamListCollection = 808,
  e_DuplicateClassId__809 = 76,
  e_isTemplateCESExecParamList = 0,
  e_classidCESExecParamList = 809,
  e_DuplicateClassId__811 = 76,
  e_isTemplateCDbAndSetOpts = 0,
  e_classidCDbAndSetOpts = 811,
  e_DuplicateClassId__812 = 76,
  e_isTemplateCEsExecContext = 0,
  e_classidCEsExecContext = 812,
  e_DuplicateClassId__821 = 76,
  e_isTemplateCSessCmdPayload = 0,
  e_classidCSessCmdPayload = 821,
  e_DuplicateClassId__822 = 76,
  e_isTemplateCSessCmdRequestData = 0,
  e_classidCSessCmdRequestData = 822,
  e_DuplicateClassId__823 = 76,
  e_isTemplateCSessCmdReplyData = 0,
  e_classidCSessCmdReplyData = 823,
  e_DuplicateClassId__824 = 76,
  e_isTemplateCSessCmdRequest = 0,
  e_classidCSessCmdRequest = 824,
  e_DuplicateClassId__825 = 76,
  e_isTemplateCSessCmdReply = 0,
  e_classidCSessCmdReply = 825,
  e_DuplicateClassId__826 = 76,
  e_isTemplateCSessFootprintResetRequest = 0,
  e_classidCSessFootprintResetRequest = 826,
  e_DuplicateClassId__827 = 76,
  e_isTemplateCSessFootprintResetReply = 0,
  e_classidCSessFootprintResetReply = 827,
  e_DuplicateClassId__828 = 76,
  e_isTemplateCLogicalConnectionCloseRequest = 0,
  e_classidCLogicalConnectionCloseRequest = 828,
  e_DuplicateClassId__829 = 76,
  e_isTemplateCLogicalConnectionCloseReply = 0,
  e_classidCLogicalConnectionCloseReply = 829,
  e_DuplicateClassId__831 = 76,
  e_isTemplateSSessionKey = 0,
  e_classidSSessionKey = 831,
  e_DuplicateClassId__832 = 76,
  e_isTemplateCSMWorkItemTableInfo = 0,
  e_classidCSMWorkItemTableInfo = 832,
  e_DuplicateClassId__833 = 76,
  e_isTemplateCSMSessionFootprintTableInfo = 0,
  e_classidCSMSessionFootprintTableInfo = 833,
  e_DuplicateClassId__834 = 76,
  e_isTemplateCSessLogoutRequest = 0,
  e_classidCSessLogoutRequest = 834,
  e_DuplicateClassId__835 = 76,
  e_isTemplateCSessLogoutReply = 0,
  e_classidCSessLogoutReply = 835,
  e_DuplicateClassId__836 = 76,
  e_isTemplateCLogonSessionKillRequest = 0,
  e_classidCLogonSessionKillRequest = 836,
  e_DuplicateClassId__837 = 76,
  e_isTemplateCLogonSessionKillReply = 0,
  e_classidCLogonSessionKillReply = 837,
  e_DuplicateClassId__838 = 76,
  e_isTemplateCSessionContext = 0,
  e_classidCSessionContext = 838,
  e_DuplicateClassId__839 = 76,
  e_isTemplateCRemoteRequestFragmentTableInfo = 0,
  e_classidCRemoteRequestFragmentTableInfo = 839,
  e_DuplicateClassId__840 = 76,
  e_isTemplateCInputBufferRequest = 0,
  e_classidCInputBufferRequest = 840,
  e_DuplicateClassId__841 = 76,
  e_isTemplateCInputBufferReply = 0,
  e_classidCInputBufferReply = 841,
  e_DuplicateClassId__842 = 76,
  e_isTemplateCOutputBufferRequest = 0,
  e_classidCOutputBufferRequest = 842,
  e_DuplicateClassId__843 = 76,
  e_isTemplateCOutputBufferReply = 0,
  e_classidCOutputBufferReply = 843,
  e_DuplicateClassId__844 = 76,
  e_isTemplateCSessionTraceFlags = 0,
  e_classidCSessionTraceFlags = 844,
  e_DuplicateClassId__845 = 76,
  e_isTemplateCUserContext = 0,
  e_classidCUserContext = 845,
  e_DuplicateClassId__851 = 76,
  e_isTemplatePartitionPlacement = 0,
  e_classidPartitionPlacement = 851,
  e_DuplicateClassId__852 = 76,
  e_isTemplateFragmentPlacement = 0,
  e_classidFragmentPlacement = 852,
  e_DuplicateClassId__853 = 76,
  e_isTemplateClonePlacement = 0,
  e_classidClonePlacement = 853,
  e_DuplicateClassId__900 = 76,
  e_isTemplateCRpcRequest = 0,
  e_classidCRpcRequest = 900,
  e_DuplicateClassId__901 = 76,
  e_isTemplateCRpcReply = 0,
  e_classidCRpcReply = 901,
  e_DuplicateClassId__902 = 76,
  e_isTemplateCRpcCommand = 0,
  e_classidCRpcCommand = 902,
  e_DuplicateClassId__903 = 76,
  e_isTemplateCRpcCommand_WakeUp = 0,
  e_classidCRpcCommand_WakeUp = 903,
  e_DuplicateClassId__904 = 76,
  e_isTemplateCRpcCommand_GetData = 0,
  e_classidCRpcCommand_GetData = 904,
  e_DuplicateClassId__905 = 76,
  e_isTemplateCRpcCommand_FetchData = 0,
  e_classidCRpcCommand_FetchData = 905,
  e_DuplicateClassId__906 = 76,
  e_isTemplateCRpcCommand_SetRange = 0,
  e_classidCRpcCommand_SetRange = 906,
  e_DuplicateClassId__907 = 76,
  e_isTemplateCRpcCommand_SetData = 0,
  e_classidCRpcCommand_SetData = 907,
  e_DuplicateClassId__908 = 76,
  e_isTemplateCRpcCommand_InsertRow = 0,
  e_classidCRpcCommand_InsertRow = 908,
  e_DuplicateClassId__909 = 76,
  e_isTemplateCRpcCommand_DeleteRow = 0,
  e_classidCRpcCommand_DeleteRow = 909,
  e_DuplicateClassId__910 = 76,
  e_isTemplateCRpcCommandWithData = 0,
  e_classidCRpcCommandWithData = 910,
  e_DuplicateClassId__911 = 76,
  e_isTemplateCRpcRow = 0,
  e_classidCRpcRow = 911,
  e_DuplicateClassId__912 = 76,
  e_isTemplateCRpcAccessor = 0,
  e_classidCRpcAccessor = 912,
  e_DuplicateClassId__913 = 76,
  e_isTemplateCRpcRequestHeader = 0,
  e_classidCRpcRequestHeader = 913,
  e_DuplicateClassId__914 = 76,
  e_isTemplateCRpcTableInfo = 0,
  e_classidCRpcTableInfo = 914,
  e_DuplicateClassId__915 = 76,
  e_isTemplateCRpcIoStats = 0,
  e_classidCRpcIoStats = 915,
  e_DuplicateClassId__916 = 76,
  e_isTemplateCRpcMDRowsetOwner = 0,
  e_classidCRpcMDRowsetOwner = 916,
  e_DuplicateClassId__917 = 76,
  e_isTemplateCRpc_DBBINDING = 0,
  e_classidCRpc_DBBINDING = 917,
  e_DuplicateClassId__918 = 76,
  e_isTemplateCRpc_SQL_DBBIND_EXT = 0,
  e_classidCRpc_SQL_DBBIND_EXT = 918,
  e_DuplicateClassId__919 = 76,
  e_isTemplateCRpcCommand_LobAction = 0,
  e_classidCRpcCommand_LobAction = 919,
  e_DuplicateClassId__920 = 76,
  e_isTemplateCRpcSTATSTG = 0,
  e_classidCRpcSTATSTG = 920,
  e_DuplicateClassId__921 = 76,
  e_isTemplateCRpcCommand_SetMarker = 0,
  e_classidCRpcCommand_SetMarker = 921,
  e_DuplicateClassId__922 = 76,
  e_isTemplateCRpcCommand_GotoMarker = 0,
  e_classidCRpcCommand_GotoMarker = 922,
  e_DuplicateClassId__923 = 76,
  e_isTemplateCRpcCommand_PrepareToDelete = 0,
  e_classidCRpcCommand_PrepareToDelete = 923,
  e_DuplicateClassId__924 = 76,
  e_isTemplateCRemoteThreadStart = 0,
  e_classidCRemoteThreadStart = 924,
  e_DuplicateClassId__925 = 76,
  e_isTemplateCRemoteThreadFinish = 0,
  e_classidCRemoteThreadFinish = 925,
  e_DuplicateClassId__930 = 76,
  e_isTemplateCStvfStreamSessionHandle = 0,
  e_classidCStvfStreamSessionHandle = 930,
  e_DuplicateClassId__931 = 76,
  e_isTemplateCXVarArrayTransport = 0,
  e_classidCXVarArrayTransport = 931,
  e_DuplicateClassId__932 = 76,
  e_isTemplateCStvfStreamRow = 0,
  e_classidCStvfStreamRow = 932,
  e_DuplicateClassId__933 = 76,
  e_isTemplateCStvfStreamRpcCommand = 0,
  e_classidCStvfStreamRpcCommand = 933,
  e_DuplicateClassId__934 = 76,
  e_isTemplateCStvfRpcRequestWithXact = 0,
  e_classidCStvfRpcRequestWithXact = 934,
  e_DuplicateClassId__935 = 76,
  e_isTemplateCStvfStreamRpcCommandReply = 0,
  e_classidCStvfStreamRpcCommandReply = 935,
  e_DuplicateClassId__936 = 76,
  e_isTemplateCStvfRpcReplyWithXact = 0,
  e_classidCStvfRpcReplyWithXact = 936,
  e_DuplicateClassId__937 = 76,
  e_isTemplateCStvfStreamRpcCommandOpen = 0,
  e_classidCStvfStreamRpcCommandOpen = 937,
  e_DuplicateClassId__938 = 76,
  e_isTemplateCStvfStreamRpcCommandGetRows = 0,
  e_classidCStvfStreamRpcCommandGetRows = 938,
  e_DuplicateClassId__939 = 76,
  e_isTemplateCStvfStreamRpcCommandGetLobBytes = 0,
  e_classidCStvfStreamRpcCommandGetLobBytes = 939,
  e_DuplicateClassId__940 = 76,
  e_isTemplateCStvfStreamRpcCommandReplyOpen = 0,
  e_classidCStvfStreamRpcCommandReplyOpen = 940,
  e_DuplicateClassId__941 = 76,
  e_isTemplateCStvfStreamRpcCommandReplyGetBytes = 0,
  e_classidCStvfStreamRpcCommandReplyGetBytes = 941,
  e_DuplicateClassId__950 = 76,
  e_isTemplateQueryContextMessage = 0,
  e_classidQueryContextMessage = 950,
  e_DuplicateClassId__951 = 76,
  e_isTemplateQueryTopology = 0,
  e_classidQueryTopology = 951,
  e_DuplicateClassId__952 = 76,
  e_isTemplateQueryTopologyMap = 0,
  e_classidQueryTopologyMap = 952,
  e_DuplicateClassId__953 = 76,
  e_isTemplateProfileAggregationMessage = 0,
  e_classidProfileAggregationMessage = 953,
  e_DuplicateClassId__954 = 76,
  e_isTemplateCProfileElement = 0,
  e_classidCProfileElement = 954,
  e_DuplicateClassId__955 = 76,
  e_isTemplateCProfileInfo = 0,
  e_classidCProfileInfo = 955,
  e_DuplicateClassId__956 = 76,
  e_isTemplateUpdateRowsAggMessage = 0,
  e_classidUpdateRowsAggMessage = 956,
  e_DuplicateClassId__957 = 76,
  e_isTemplateQueryRXSync = 0,
  e_classidQueryRXSync = 957,
  e_DuplicateClassId__958 = 76,
  e_isTemplateQueryXactReportMessage = 0,
  e_classidQueryXactReportMessage = 958,
  e_DuplicateClassId__959 = 76,
  e_isTemplateCRemotableQueryCtxt = 0,
  e_classidCRemotableQueryCtxt = 959,
  e_DuplicateClassId__960 = 76,
  e_isTemplateQueryPlanCacheKey = 0,
  e_classidQueryPlanCacheKey = 960,
  e_DuplicateClassId__961 = 76,
  e_isTemplateQueryDriverKey = 0,
  e_classidQueryDriverKey = 961,
  e_DuplicateClassId__962 = 76,
  e_isTemplateQueryDriversTableInfo = 0,
  e_classidQueryDriversTableInfo = 962,
  e_DuplicateClassId__963 = 76,
  e_isTemplateQueryDriverTasksTableInfo = 0,
  e_classidQueryDriverTasksTableInfo = 963,
  e_DuplicateClassId__964 = 76,
  e_isTemplateQueryDriverTopologiesTableInfo = 0,
  e_classidQueryDriverTopologiesTableInfo = 964,
  e_DuplicateClassId__966 = 76,
  e_isTemplateCRXContextMessage = 0,
  e_classidCRXContextMessage = 966,
  e_DuplicateClassId__967 = 76,
  e_isTemplateQueryTaskResult = 0,
  e_classidQueryTaskResult = 967,
  e_DuplicateClassId__968 = 76,
  e_isTemplateCRowcountTracker = 0,
  e_classidCRowcountTracker = 968,
  e_DuplicateClassId__969 = 76,
  e_isTemplateCRowcountTrackerList = 0,
  e_classidCRowcountTrackerList = 969,
  e_DuplicateClassId__1000 = 76,
  e_isTemplateCQte = 0,
  e_classidCQte = 1000,
  e_DuplicateClassId__1001 = 76,
  e_isTemplateCXte = 0,
  e_classidCXte = 1001,
  e_DuplicateClassId__1002 = 76,
  e_isTemplateCXteRowset = 0,
  e_classidCXteRowset = 1002,
  e_DuplicateClassId__1003 = 76,
  e_isTemplateCXteTableScan = 0,
  e_classidCXteTableScan = 1003,
  e_DuplicateClassId__1004 = 76,
  e_isTemplateCXteRange = 0,
  e_classidCXteRange = 1004,
  e_DuplicateClassId__1005 = 76,
  e_isTemplateCXteHash = 0,
  e_classidCXteHash = 1005,
  e_DuplicateClassId__1006 = 76,
  e_isTemplateCXteBitmap = 0,
  e_classidCXteBitmap = 1006,
  e_DuplicateClassId__1007 = 76,
  e_isTemplateCXteProject = 0,
  e_classidCXteProject = 1007,
  e_DuplicateClassId__1008 = 76,
  e_isTemplateCQtePrjList = 0,
  e_classidCQtePrjList = 1008,
  e_DuplicateClassId__1009 = 76,
  e_isTemplateCQtePrjEl = 0,
  e_classidCQtePrjEl = 1009,
  e_DuplicateClassId__1010 = 76,
  e_isTemplateCQtePrjElVector = 0,
  e_classidCQtePrjElVector = 1010,
  e_DuplicateClassId__1011 = 76,
  e_isTemplateCXteUpdate = 0,
  e_classidCXteUpdate = 1011,
  e_DuplicateClassId__1012 = 76,
  e_isTemplateCXteScalarInsert = 0,
  e_classidCXteScalarInsert = 1012,
  e_DuplicateClassId__1013 = 76,
  e_isTemplateCXteSimpleUpdate = 0,
  e_classidCXteSimpleUpdate = 1013,
  e_DuplicateClassId__1014 = 76,
  e_isTemplateCXteTop = 0,
  e_classidCXteTop = 1014,
  e_DuplicateClassId__1015 = 76,
  e_isTemplateCQteScalar = 0,
  e_classidCQteScalar = 1015,
  e_DuplicateClassId__1016 = 76,
  e_isTemplateCXteStreamAggregate = 0,
  e_classidCXteStreamAggregate = 1016,
  e_DuplicateClassId__1017 = 76,
  e_isTemplateCXteSort = 0,
  e_classidCXteSort = 1017,
  e_DuplicateClassId__1018 = 76,
  e_isTemplateCXteNLJoin = 0,
  e_classidCXteNLJoin = 1018,
  e_DuplicateClassId__1019 = 76,
  e_isTemplateCXteRangePrefetch = 0,
  e_classidCXteRangePrefetch = 1019,
  e_DuplicateClassId__1020 = 76,
  e_isTemplateCXteSeqProject = 0,
  e_classidCXteSeqProject = 1020,
  e_DuplicateClassId__1021 = 76,
  e_isTemplateCXteSegment = 0,
  e_classidCXteSegment = 1021,
  e_DuplicateClassId__1022 = 76,
  e_isTemplateCXteExchange = 0,
  e_classidCXteExchange = 1022,
  e_DuplicateClassId__1023 = 76,
  e_isTemplateCXteConstScan = 0,
  e_classidCXteConstScan = 1023,
  e_DuplicateClassId__1024 = 76,
  e_isTemplateCXteSequence = 0,
  e_classidCXteSequence = 1024,
  e_DuplicateClassId__1025 = 76,
  e_isTemplateCSpoolSet = 0,
  e_classidCSpoolSet = 1025,
  e_DuplicateClassId__1026 = 76,
  e_isTemplateCXteSpool = 0,
  e_classidCXteSpool = 1026,
  e_DuplicateClassId__1027 = 76,
  e_isTemplateCXteSplit = 0,
  e_classidCXteSplit = 1027,
  e_DuplicateClassId__1028 = 76,
  e_isTemplateCXteFilter = 0,
  e_classidCXteFilter = 1028,
  e_DuplicateClassId__1029 = 76,
  e_isTemplateCXteCollapse = 0,
  e_classidCXteCollapse = 1029,
  e_DuplicateClassId__1030 = 76,
  e_isTemplateCXteTVFStream = 0,
  e_classidCXteTVFStream = 1030,
  e_DuplicateClassId__1031 = 76,
  e_isTemplateCXteIndex = 0,
  e_classidCXteIndex = 1031,
  e_DuplicateClassId__1032 = 76,
  e_isTemplateCXteIndexSort = 0,
  e_classidCXteIndexSort = 1032,
  e_DuplicateClassId__1033 = 76,
  e_isTemplateCXteRmtScan = 0,
  e_classidCXteRmtScan = 1033,
  e_DuplicateClassId__1034 = 76,
  e_isTemplateCXteAssert = 0,
  e_classidCXteAssert = 1034,
  e_DuplicateClassId__1035 = 76,
  e_isTemplateCIndexCommon = 0,
  e_classidCIndexCommon = 1035,
  e_DuplicateClassId__1036 = 76,
  e_isTemplateCXteTopSort = 0,
  e_classidCXteTopSort = 1036,
  e_DuplicateClassId__1037 = 76,
  e_isTemplateCXteMergeJoin = 0,
  e_classidCXteMergeJoin = 1037,
  e_DuplicateClassId__1038 = 76,
  e_isTemplateCXteRowCountSpool = 0,
  e_classidCXteRowCountSpool = 1038,
  e_DuplicateClassId__1039 = 76,
  e_isTemplateCXteConcat = 0,
  e_classidCXteConcat = 1039,
  e_DuplicateClassId__1040 = 76,
  e_isTemplateCXteMergeInterval = 0,
  e_classidCXteMergeInterval = 1040,
  e_DuplicateClassId__1041 = 76,
  e_isTemplateCXteStatAgg = 0,
  e_classidCXteStatAgg = 1041,
  e_DuplicateClassId__1042 = 76,
  e_isTemplateCXteMergeStat = 0,
  e_classidCXteMergeStat = 1042,
  e_DuplicateClassId__1043 = 76,
  e_isTemplateCXteVersionScan = 0,
  e_classidCXteVersionScan = 1043,
  e_DuplicateClassId__1044 = 76,
  e_isTemplateCXtePrint = 0,
  e_classidCXtePrint = 1044,
  e_DuplicateClassId__1045 = 76,
  e_isTemplateCXteWindow = 0,
  e_classidCXteWindow = 1045,
  e_DuplicateClassId__1101 = 76,
  e_isTemplateCValRef = 0,
  e_classidCValRef = 1101,
  e_DuplicateClassId__1103 = 76,
  e_isTemplateCValRefOrdinal = 0,
  e_classidCValRefOrdinal = 1103,
  e_DuplicateClassId__1104 = 76,
  e_isTemplateCValRefPrefetch = 0,
  e_classidCValRefPrefetch = 1104,
  e_DuplicateClassId__1105 = 76,
  e_isTemplateCValRefExecTable = 0,
  e_classidCValRefExecTable = 1105,
  e_DuplicateClassId__1106 = 76,
  e_isTemplateCValRefSS = 0,
  e_classidCValRefSS = 1106,
  e_DuplicateClassId__1107 = 76,
  e_isTemplateCValConstant = 0,
  e_classidCValConstant = 1107,
  e_DuplicateClassId__1108 = 76,
  e_isTemplateCValRefParameter = 0,
  e_classidCValRefParameter = 1108,
  e_DuplicateClassId__1109 = 76,
  e_isTemplateParamID = 0,
  e_classidParamID = 1109,
  e_DuplicateClassId__1110 = 76,
  e_isTemplateCParamBase = 0,
  e_classidCParamBase = 1110,
  e_DuplicateClassId__1111 = 76,
  e_isTemplateCValRefRTConst = 0,
  e_classidCValRefRTConst = 1111,
  e_DuplicateClassId__1112 = 76,
  e_isTemplateCValRefCachedExpr = 0,
  e_classidCValRefCachedExpr = 1112,
  e_DuplicateClassId__1113 = 76,
  e_isTemplateCValRefRow = 0,
  e_classidCValRefRow = 1113,
  e_DuplicateClassId__1114 = 76,
  e_isTemplateCValRefSetRange = 0,
  e_classidCValRefSetRange = 1114,
  e_DuplicateClassId__1115 = 76,
  e_isTemplateCValEsConstXVar = 0,
  e_classidCValEsConstXVar = 1115,
  e_DuplicateClassId__1116 = 76,
  e_isTemplateCValRefInRow = 0,
  e_classidCValRefInRow = 1116,
  e_DuplicateClassId__1117 = 76,
  e_isTemplateCValRefJoin = 0,
  e_classidCValRefJoin = 1117,
  e_DuplicateClassId__1118 = 76,
  e_isTemplateCValRefOrdinalEx = 0,
  e_classidCValRefOrdinalEx = 1118,
  e_DuplicateClassId__1119 = 76,
  e_isTemplateCValRefWork = 0,
  e_classidCValRefWork = 1119,
  e_DuplicateClassId__1120 = 76,
  e_isTemplateCValRefCalculated = 0,
  e_classidCValRefCalculated = 1120,
  e_DuplicateClassId__1121 = 76,
  e_isTemplateCValRefGrouping = 0,
  e_classidCValRefGrouping = 1121,
  e_DuplicateClassId__1122 = 76,
  e_isTemplateCValRefSpecial = 0,
  e_classidCValRefSpecial = 1122,
  e_DuplicateClassId__1123 = 76,
  e_isTemplateCValOdsRowRef = 0,
  e_classidCValOdsRowRef = 1123,
  e_DuplicateClassId__1124 = 76,
  e_isTemplateCValOdsRow = 0,
  e_classidCValOdsRow = 1124,
  e_DuplicateClassId__1125 = 76,
  e_isTemplateCValRefParallel = 0,
  e_classidCValRefParallel = 1125,
  e_DuplicateClassId__1126 = 76,
  e_isTemplateCValRefExchange = 0,
  e_classidCValRefExchange = 1126,
  e_DuplicateClassId__1127 = 76,
  e_isTemplateCValRefCatLookup = 0,
  e_classidCValRefCatLookup = 1127,
  e_DuplicateClassId__1128 = 76,
  e_isTemplateCValRefPartitionId = 0,
  e_classidCValRefPartitionId = 1128,
  e_DuplicateClassId__1129 = 76,
  e_isTemplateCValRefRmt = 0,
  e_classidCValRefRmt = 1129,
  e_DuplicateClassId__1130 = 76,
  e_isTemplateCValRefUnionNth = 0,
  e_classidCValRefUnionNth = 1130,
  e_DuplicateClassId__1131 = 76,
  e_isTemplateCValEsChecksumInfo = 0,
  e_classidCValEsChecksumInfo = 1131,
  e_DuplicateClassId__1132 = 76,
  e_isTemplateCValRefCoordinated = 0,
  e_classidCValRefCoordinated = 1132,
  e_DuplicateClassId__1133 = 76,
  e_isTemplateCValCompileTimeClrUdxInfo = 0,
  e_classidCValCompileTimeClrUdxInfo = 1133,
  e_DuplicateClassId__1134 = 76,
  e_isTemplateCValComp = 0,
  e_classidCValComp = 1134,
  e_DuplicateClassId__1135 = 76,
  e_isTemplateCValRefComp = 0,
  e_classidCValRefComp = 1135,
  e_DuplicateClassId__1136 = 76,
  e_isTemplateCValRefCompTypeInfo = 0,
  e_classidCValRefCompTypeInfo = 1136,
  e_DuplicateClassId__1137 = 76,
  e_isTemplateCValSSInRowCompile = 0,
  e_classidCValSSInRowCompile = 1137,
  e_DuplicateClassId__1138 = 76,
  e_isTemplateCValRefGetRange = 0,
  e_classidCValRefGetRange = 1138,
  e_DuplicateClassId__1139 = 76,
  e_isTemplateCValRefGetRangeWithMismatchedTypes = 0,
  e_classidCValRefGetRangeWithMismatchedTypes = 1139,
  e_DuplicateClassId__1140 = 76,
  e_isTemplateCValRefGetRangeThroughConvert = 0,
  e_classidCValRefGetRangeThroughConvert = 1140,
  e_DuplicateClassId__1141 = 76,
  e_isTemplateCValRefIndexColumn = 0,
  e_classidCValRefIndexColumn = 1141,
  e_DuplicateClassId__1200 = 76,
  e_isTemplateCTypeInfo = 0,
  e_classidCTypeInfo = 1200,
  e_DuplicateClassId__1201 = 76,
  e_isTemplateCColumnInfo = 0,
  e_classidCColumnInfo = 1201,
  e_DuplicateClassId__1202 = 76,
  e_isTemplateRowsetUsageDescriptor = 0,
  e_classidRowsetUsageDescriptor = 1202,
  e_DuplicateClassId__1203 = 76,
  e_isTemplateCTableAlias = 0,
  e_classidCTableAlias = 1203,
  e_DuplicateClassId__1204 = 76,
  e_isTemplateCBndOutputs = 0,
  e_classidCBndOutputs = 1204,
  e_DuplicateClassId__1205 = 76,
  e_isTemplateCBitVector = 0,
  e_classidCBitVector = 1205,
  e_DuplicateClassId__1206 = 76,
  e_isTemplateCNonSargPred = 0,
  e_classidCNonSargPred = 1206,
  e_DuplicateClassId__1208 = 76,
  e_isTemplateDRgULONG = 0,
  e_classidDRgULONG = 1208,
  e_DuplicateClassId__1209 = 76,
  e_isTemplateCTDynArray = 1,
  e_classidCTDynArray = 1209,
  e_DuplicateClassId__1210 = 76,
  e_isTemplateIQueryObj = 0,
  e_classidIQueryObj = 1210,
  e_DuplicateClassId__1211 = 76,
  e_isTemplateCQuery = 0,
  e_classidCQuery = 1211,
  e_DuplicateClassId__1212 = 76,
  e_isTemplateCLockCollection = 0,
  e_classidCLockCollection = 1212,
  e_DuplicateClassId__1213 = 76,
  e_isTemplateCVRTable = 0,
  e_classidCVRTable = 1213,
  e_DuplicateClassId__1214 = 76,
  e_isTemplateCQODouble = 0,
  e_classidCQODouble = 1214,
  e_DuplicateClassId__1215 = 76,
  e_isTemplateCRangeInterval = 0,
  e_classidCRangeInterval = 1215,
  e_DuplicateClassId__1216 = 76,
  e_isTemplateCBitmapCollection = 0,
  e_classidCBitmapCollection = 1216,
  e_DuplicateClassId__1217 = 76,
  e_isTemplateCBitmapReference = 0,
  e_classidCBitmapReference = 1217,
  e_DuplicateClassId__1218 = 76,
  e_isTemplateCXCacheMgr = 0,
  e_classidCXCacheMgr = 1218,
  e_DuplicateClassId__1220 = 76,
  e_isTemplateCHashPartitionGroupCompile = 0,
  e_classidCHashPartitionGroupCompile = 1220,
  e_DuplicateClassId__1221 = 76,
  e_isTemplateCHashWorkfilePartitionGroupCompile = 0,
  e_classidCHashWorkfilePartitionGroupCompile = 1221,
  e_DuplicateClassId__1222 = 76,
  e_isTemplateCHashWorktablePartitionGroupCompile = 0,
  e_classidCHashWorktablePartitionGroupCompile = 1222,
  e_DuplicateClassId__1223 = 76,
  e_isTemplateCPerIndexMetaXte = 0,
  e_classidCPerIndexMetaXte = 1223,
  e_DuplicateClassId__1224 = 76,
  e_isTemplateCTStack = 1,
  e_classidCTStack = 1224,
  e_DuplicateClassId__1225 = 76,
  e_isTemplateCReloadList = 0,
  e_classidCReloadList = 1225,
  e_DuplicateClassId__1226 = 76,
  e_isTemplateCParamList = 0,
  e_classidCParamList = 1226,
  e_DuplicateClassId__1227 = 76,
  e_isTemplateSortColDesc = 0,
  e_classidSortColDesc = 1227,
  e_DuplicateClassId__1228 = 76,
  e_isTemplateCRiCompInfo = 0,
  e_classidCRiCompInfo = 1228,
  e_DuplicateClassId__1229 = 76,
  e_isTemplateQueryPlanInfoForLinearization = 0,
  e_classidQueryPlanInfoForLinearization = 1229,
  e_DuplicateClassId__1230 = 76,
  e_isTemplateTableInfoBase = 0,
  e_classidTableInfoBase = 1230,
  e_DuplicateClassId__1231 = 76,
  e_isTemplateCTDynArrayBase = 1,
  e_classidCTDynArrayBase = 1231,
  e_DuplicateClassId__1232 = 76,
  e_isTemplateCRefCount = 0,
  e_classidCRefCount = 1232,
  e_DuplicateClassId__1233 = 76,
  e_isTemplateDRgCId = 0,
  e_classidDRgCId = 1233,
  e_DuplicateClassId__1234 = 76,
  e_isTemplateCLinkedMapEntry = 1,
  e_classidCLinkedMapEntry = 1234,
  e_DuplicateClassId__1235 = 76,
  e_isTemplateCLinkedMap = 1,
  e_classidCLinkedMap = 1235,
  e_DuplicateClassId__1236 = 76,
  e_isTemplateIoStats = 0,
  e_classidIoStats = 1236,
  e_DuplicateClassId__1237 = 76,
  e_isTemplateMDRowsetOwner = 0,
  e_classidMDRowsetOwner = 1237,
  e_DuplicateClassId__1238 = 76,
  e_isTemplateProfileIOStatsInfo = 0,
  e_classidProfileIOStatsInfo = 1238,
  e_DuplicateClassId__1239 = 76,
  e_isTemplateCXPortDesc = 0,
  e_classidCXPortDesc = 1239,
  e_DuplicateClassId__1240 = 76,
  e_isTemplateCXPacketDesc = 0,
  e_classidCXPacketDesc = 1240,
  e_DuplicateClassId__1241 = 76,
  e_isTemplateCXValDesc = 0,
  e_classidCXValDesc = 1241,
  e_DuplicateClassId__1242 = 76,
  e_isTemplateCExMem = 0,
  e_classidCExMem = 1242,
  e_DuplicateClassId__1243 = 76,
  e_isTemplateCCATInfo = 0,
  e_classidCCATInfo = 1243,
  e_DuplicateClassId__1244 = 76,
  e_isTemplateCXRoutingDesc = 0,
  e_classidCXRoutingDesc = 1244,
  e_DuplicateClassId__1245 = 76,
  e_isTemplateCXActivateDesc = 0,
  e_classidCXActivateDesc = 1245,
  e_DuplicateClassId__1246 = 76,
  e_isTemplateCCloneAccessManager = 0,
  e_classidCCloneAccessManager = 1246,
  e_DuplicateClassId__1247 = 76,
  e_isTemplateCloneAccessMetadata = 0,
  e_classidCloneAccessMetadata = 1247,
  e_DuplicateClassId__1248 = 76,
  e_isTemplateCBitSetNoPmo = 0,
  e_classidCBitSetNoPmo = 1248,
  e_DuplicateClassId__1249 = 76,
  e_isTemplateCBitSet = 0,
  e_classidCBitSet = 1249,
  e_DuplicateClassId__1250 = 76,
  e_isTemplateSLinkedBitSet = 0,
  e_classidSLinkedBitSet = 1250,
  e_DuplicateClassId__1251 = 76,
  e_isTemplateCTVFInfo = 0,
  e_classidCTVFInfo = 1251,
  e_DuplicateClassId__1252 = 76,
  e_isTemplateCStreamingInternalTVFInfo = 0,
  e_classidCStreamingInternalTVFInfo = 1252,
  e_DuplicateClassId__1253 = 76,
  e_isTemplateTTableInfoBase = 1,
  e_classidTTableInfoBase = 1253,
  e_DuplicateClassId__1254 = 76,
  e_isTemplateCMatrixBricksTableInfo = 0,
  e_classidCMatrixBricksTableInfo = 1254,
  e_DuplicateClassId__1255 = 76,
  e_isTemplateCMatrixAgentsTableInfo = 0,
  e_classidCMatrixAgentsTableInfo = 1255,
  e_DuplicateClassId__1256 = 76,
  e_isTemplateCMatrixManagersTableInfo = 0,
  e_classidCMatrixManagersTableInfo = 1256,
  e_DuplicateClassId__1257 = 76,
  e_isTemplateCMatrixTableInfo = 0,
  e_classidCMatrixTableInfo = 1257,
  e_DuplicateClassId__1261 = 76,
  e_isTemplateCMatrixChannelTypesInfo = 0,
  e_classidCMatrixChannelTypesInfo = 1261,
  e_DuplicateClassId__1262 = 76,
  e_isTemplateCMatrixChannelMapsInfo = 0,
  e_classidCMatrixChannelMapsInfo = 1262,
  e_DuplicateClassId__1263 = 76,
  e_isTemplateCMatrixChannelTopologiesInfo = 0,
  e_classidCMatrixChannelTopologiesInfo = 1263,
  e_DuplicateClassId__1264 = 76,
  e_isTemplateCMatrixChannelsInfo = 0,
  e_classidCMatrixChannelsInfo = 1264,
  e_DuplicateClassId__1266 = 76,
  e_isTemplateCMatrixChannelPipelinesInfo = 0,
  e_classidCMatrixChannelPipelinesInfo = 1266,
  e_DuplicateClassId__1267 = 76,
  e_isTemplateCMatrixChannelMessagesInfo = 0,
  e_classidCMatrixChannelMessagesInfo = 1267,
  e_DuplicateClassId__1268 = 76,
  e_isTemplateCFabricConversationTableInfo = 0,
  e_classidCFabricConversationTableInfo = 1268,
  e_DuplicateClassId__1269 = 76,
  e_isTemplateCFabricChannelTableInfo = 0,
  e_classidCFabricChannelTableInfo = 1269,
  e_DuplicateClassId__1270 = 76,
  e_isTemplateCFabricMessageTableInfo = 0,
  e_classidCFabricMessageTableInfo = 1270,
  e_DuplicateClassId__1271 = 76,
  e_isTemplateCompositeScopeTableInfo = 0,
  e_classidCompositeScopeTableInfo = 1271,
  e_DuplicateClassId__1272 = 76,
  e_isTemplateScopeFragmentTableInfo = 0,
  e_classidScopeFragmentTableInfo = 1272,
  e_DuplicateClassId__1273 = 76,
  e_isTemplateCMciPipeInfo = 0,
  e_classidCMciPipeInfo = 1273,
  e_DuplicateClassId__1274 = 76,
  e_isTemplateCObjectsTableInfo = 0,
  e_classidCObjectsTableInfo = 1274,
  e_DuplicateClassId__1275 = 76,
  e_isTemplateCPackagesTableInfo = 0,
  e_classidCPackagesTableInfo = 1275,
  e_DuplicateClassId__1276 = 76,
  e_isTemplateCObjectColumnsTableInfo = 0,
  e_classidCObjectColumnsTableInfo = 1276,
  e_DuplicateClassId__1277 = 76,
  e_isTemplateCSessionsTableInfo = 0,
  e_classidCSessionsTableInfo = 1277,
  e_DuplicateClassId__1278 = 76,
  e_isTemplateCSessionEventsTableInfo = 0,
  e_classidCSessionEventsTableInfo = 1278,
  e_DuplicateClassId__1279 = 76,
  e_isTemplateCSessionTargetsTableInfo = 0,
  e_classidCSessionTargetsTableInfo = 1279,
  e_DuplicateClassId__1280 = 76,
  e_isTemplateCSessionObjectColumnsTableInfo = 0,
  e_classidCSessionObjectColumnsTableInfo = 1280,
  e_DuplicateClassId__1281 = 76,
  e_isTemplateCMapValuesTableInfo = 0,
  e_classidCMapValuesTableInfo = 1281,
  e_DuplicateClassId__1282 = 76,
  e_isTemplateCSessionEventActionsTableInfo = 0,
  e_classidCSessionEventActionsTableInfo = 1282,
  e_DuplicateClassId__1283 = 76,
  e_isTemplateCOledbRange = 0,
  e_classidCOledbRange = 1283,
  e_DuplicateClassId__1284 = 76,
  e_isTemplateCOLUMNDATANODE = 0,
  e_classidCOLUMNDATANODE = 1284,
  e_DuplicateClassId__1285 = 76,
  e_isTemplateINDEXDATANODE = 0,
  e_classidINDEXDATANODE = 1285,
  e_DuplicateClassId__1286 = 76,
  e_isTemplateKEYDATANODE = 0,
  e_classidKEYDATANODE = 1286,
  e_DuplicateClassId__1287 = 76,
  e_isTemplateCIndexInfo = 0,
  e_classidCIndexInfo = 1287,
  e_DuplicateClassId__1288 = 76,
  e_isTemplateDBPROPSET_SERIALIZABLE = 0,
  e_classidDBPROPSET_SERIALIZABLE = 1288,
  e_DuplicateClassId__1289 = 76,
  e_isTemplateMDObjectVersion = 0,
  e_classidMDObjectVersion = 1289,
  e_DuplicateClassId__1290 = 76,
  e_isTemplateGUID = 0,
  e_classidGUID = 1290,
  e_DuplicateClassId__1291 = 76,
  e_isTemplateCOledbRangeStream = 0,
  e_classidCOledbRangeStream = 1291,
  e_DuplicateClassId__1292 = 76,
  e_isTemplateCOledbRangeStreamBulk = 0,
  e_classidCOledbRangeStreamBulk = 1292,
  e_DuplicateClassId__1293 = 76,
  e_isTemplateCBulkImp = 0,
  e_classidCBulkImp = 1293,
  e_DuplicateClassId__1294 = 76,
  e_isTemplateCConstraintTag = 0,
  e_classidCConstraintTag = 1294,
  e_DuplicateClassId__1295 = 76,
  e_isTemplateCDynObjNames = 0,
  e_classidCDynObjNames = 1295,
  e_DuplicateClassId__1296 = 76,
  e_isTemplateCConstraintMaxLevel = 0,
  e_classidCConstraintMaxLevel = 1296,
  e_DuplicateClassId__1297 = 76,
  e_isTemplateTVFActiveTransInfo = 0,
  e_classidTVFActiveTransInfo = 1297,
  e_DuplicateClassId__1298 = 76,
  e_isTemplateTVFDatabaseTransInfo = 0,
  e_classidTVFDatabaseTransInfo = 1298,
  e_DuplicateClassId__1299 = 76,
  e_isTemplateDbFileSpaceUsageTableInfo = 0,
  e_classidDbFileSpaceUsageTableInfo = 1299,
  e_DuplicateClassId__1300 = 76,
  e_isTemplateCEsComp = 0,
  e_classidCEsComp = 1300,
  e_DuplicateClassId__1301 = 76,
  e_isTemplateCEsCompFull = 0,
  e_classidCEsCompFull = 1301,
  e_DuplicateClassId__1302 = 76,
  e_isTemplateCEsCompValSeg = 0,
  e_classidCEsCompValSeg = 1302,
  e_DuplicateClassId__1303 = 76,
  e_isTemplateCXCodeInst = 0,
  e_classidCXCodeInst = 1303,
  e_DuplicateClassId__1304 = 76,
  e_isTemplateCXCodeInstMultiData = 0,
  e_classidCXCodeInstMultiData = 1304,
  e_DuplicateClassId__1305 = 76,
  e_isTemplateCXVariant = 0,
  e_classidCXVariant = 1305,
  e_DuplicateClassId__1306 = 76,
  e_isTemplateCXVariantBase = 0,
  e_classidCXVariantBase = 1306,
  e_DuplicateClassId__1307 = 76,
  e_isTemplateCXVarValue = 0,
  e_classidCXVarValue = 1307,
  e_DuplicateClassId__1308 = 76,
  e_isTemplateCSsNumericBase = 0,
  e_classidCSsNumericBase = 1308,
  e_DuplicateClassId__1309 = 76,
  e_isTemplateCSsUdtBase = 0,
  e_classidCSsUdtBase = 1309,
  e_DuplicateClassId__1310 = 76,
  e_isTemplatePtrAndLen = 0,
  e_classidPtrAndLen = 1310,
  e_DuplicateClassId__1311 = 76,
  e_isTemplateSQLDATEBASE = 0,
  e_classidSQLDATEBASE = 1311,
  e_DuplicateClassId__1312 = 76,
  e_isTemplateDATE4BASE = 0,
  e_classidDATE4BASE = 1312,
  e_DuplicateClassId__1313 = 76,
  e_isTemplateCCrsRefBase = 0,
  e_classidCCrsRefBase = 1313,
  e_DuplicateClassId__1314 = 76,
  e_isTemplateCSsGuidBase = 0,
  e_classidCSsGuidBase = 1314,
  e_DuplicateClassId__1315 = 76,
  e_isTemplateMONY4BASE = 0,
  e_classidMONY4BASE = 1315,
  e_DuplicateClassId__1316 = 76,
  e_isTemplateCSsMoney8Base = 0,
  e_classidCSsMoney8Base = 1316,
  e_DuplicateClassId__1317 = 76,
  e_isTemplateCTimeStampBase = 0,
  e_classidCTimeStampBase = 1317,
  e_DuplicateClassId__1318 = 76,
  e_isTemplateArrayOfBytes = 0,
  e_classidArrayOfBytes = 1318,
  e_DuplicateClassId__1319 = 76,
  e_isTemplateCCompareHashInfo = 0,
  e_classidCCompareHashInfo = 1319,
  e_DuplicateClassId__1320 = 76,
  e_isTemplateCSQLCollation = 0,
  e_classidCSQLCollation = 1320,
  e_DuplicateClassId__1321 = 76,
  e_isTemplateCCompareString = 0,
  e_classidCCompareString = 1321,
  e_DuplicateClassId__1322 = 76,
  e_isTemplateCHashString = 0,
  e_classidCHashString = 1322,
  e_DuplicateClassId__1323 = 76,
  e_isTemplateCCompareVarTimeInfo = 0,
  e_classidCCompareVarTimeInfo = 1323,
  e_DuplicateClassId__1324 = 76,
  e_isTemplateCHashVarTimeInfo = 0,
  e_classidCHashVarTimeInfo = 1324,
  e_DuplicateClassId__1325 = 76,
  e_isTemplateCEsCompareP = 0,
  e_classidCEsCompareP = 1325,
  e_DuplicateClassId__1326 = 76,
  e_isTemplateCEsHashP = 0,
  e_classidCEsHashP = 1326,
  e_DuplicateClassId__1327 = 76,
  e_isTemplateCEsCacheObj = 0,
  e_classidCEsCacheObj = 1327,
  e_DuplicateClassId__1328 = 76,
  e_isTemplateCEsCacheObjUdtToBinConvert = 0,
  e_classidCEsCacheObjUdtToBinConvert = 1328,
  e_DuplicateClassId__1329 = 76,
  e_isTemplateCEsCompGroup = 0,
  e_classidCEsCompGroup = 1329,
  e_DuplicateClassId__1330 = 76,
  e_isTemplateCAutoXVarArray = 0,
  e_classidCAutoXVarArray = 1330,
  e_DuplicateClassId__1331 = 76,
  e_isTemplateSTVFCurrentXactInfo = 0,
  e_classidSTVFCurrentXactInfo = 1331,
  e_DuplicateClassId__1332 = 76,
  e_isTemplateTTraceMetaTVFInfoBase = 1,
  e_classidTTraceMetaTVFInfoBase = 1332,
  e_DuplicateClassId__1333 = 76,
  e_isTemplateTTraceMetaTVFInfo = 1,
  e_classidTTraceMetaTVFInfo = 1333,
  e_DuplicateClassId__1334 = 76,
  e_isTemplateCSysTraceEventsSTVFInfo = 0,
  e_classidCSysTraceEventsSTVFInfo = 1334,
  e_DuplicateClassId__1335 = 76,
  e_isTemplateCSysTraceCategoriesSTVFInfo = 0,
  e_classidCSysTraceCategoriesSTVFInfo = 1335,
  e_DuplicateClassId__1336 = 76,
  e_isTemplateCSysTraceColumnsSTVFInfo = 0,
  e_classidCSysTraceColumnsSTVFInfo = 1336,
  e_DuplicateClassId__1337 = 76,
  e_isTemplateCSysTraceEventBindingsSTVFInfo = 0,
  e_classidCSysTraceEventBindingsSTVFInfo = 1337,
  e_DuplicateClassId__1338 = 76,
  e_isTemplateCSysTraceSubclassValuesSTVFInfo = 0,
  e_classidCSysTraceSubclassValuesSTVFInfo = 1338,
  e_DuplicateClassId__1339 = 76,
  e_isTemplateCValEsCompLobReaderInfo = 0,
  e_classidCValEsCompLobReaderInfo = 1339,
  e_DuplicateClassId__1340 = 76,
  e_isTemplateCTableAliasClass = 0,
  e_classidCTableAliasClass = 1340,
  e_DuplicateClassId__1341 = 76,
  e_isTemplatePbhAndLen = 0,
  e_classidPbhAndLen = 1341,
  e_DuplicateClassId__1342 = 76,
  e_isTemplateIRemoteableBlobHandle = 0,
  e_classidIRemoteableBlobHandle = 1342,
  e_DuplicateClassId__1343 = 76,
  e_isTemplateCBlobHandleBaseTable = 0,
  e_classidCBlobHandleBaseTable = 1343,
  e_DuplicateClassId__1344 = 76,
  e_isTemplateCBlobHandleInlined = 0,
  e_classidCBlobHandleInlined = 1344,
  e_DuplicateClassId__1345 = 76,
  e_isTemplateCRowsetTraceTableSTVFInfo = 0,
  e_classidCRowsetTraceTableSTVFInfo = 1345,
  e_DuplicateClassId__1346 = 76,
  e_isTemplateCMemoryGrantEstimate = 0,
  e_classidCMemoryGrantEstimate = 1346,
  e_DuplicateClassId__1347 = 76,
  e_isTemplateSERowsetId = 0,
  e_classidSERowsetId = 1347,
  e_DuplicateClassId__1348 = 76,
  e_isTemplateCSingleLinkedPtrs = 1,
  e_classidCSingleLinkedPtrs = 1348,
  e_DuplicateClassId__1349 = 76,
  e_isTemplateQueryHintsForTest = 0,
  e_classidQueryHintsForTest = 1349,
  e_DuplicateClassId__1350 = 76,
  e_isTemplateCCompatLevel = 0,
  e_classidCCompatLevel = 1350,
  e_DuplicateClassId__1351 = 76,
  e_isTemplateCCompareObject = 0,
  e_classidCCompareObject = 1351,
  e_DuplicateClassId__1352 = 76,
  e_isTemplateCCompareLob = 0,
  e_classidCCompareLob = 1352,
  e_DuplicateClassId__1353 = 76,
  e_isTemplateCCompareBlob = 0,
  e_classidCCompareBlob = 1353,
  e_DuplicateClassId__1354 = 76,
  e_isTemplateCCompareWlob = 0,
  e_classidCCompareWlob = 1354,
  e_DuplicateClassId__1355 = 76,
  e_isTemplateCCompareClob = 0,
  e_classidCCompareClob = 1355,
  e_DuplicateClassId__1356 = 76,
  e_isTemplateCEsCompBase = 0,
  e_classidCEsCompBase = 1356,
  e_DuplicateClassId__1400 = 76,
  e_isTemplateCMdmRequest = 0,
  e_classidCMdmRequest = 1400,
  e_DuplicateClassId__1401 = 76,
  e_isTemplateCMdmReply = 0,
  e_classidCMdmReply = 1401,
  e_DuplicateClassId__1402 = 76,
  e_isTemplateDDLMessage = 0,
  e_classidDDLMessage = 1402,
  e_DuplicateClassId__1403 = 76,
  e_isTemplateDDLMessageReply = 0,
  e_classidDDLMessageReply = 1403,
  e_DuplicateClassId__1404 = 76,
  e_isTemplateCMDStartScan = 0,
  e_classidCMDStartScan = 1404,
  e_DuplicateClassId__1405 = 76,
  e_isTemplateCMDFinishScan = 0,
  e_classidCMDFinishScan = 1405,
  e_DuplicateClassId__1406 = 76,
  e_isTemplateCMDScanRequest = 0,
  e_classidCMDScanRequest = 1406,
  e_DuplicateClassId__1407 = 76,
  e_isTemplateCMDScanReply = 0,
  e_classidCMDScanReply = 1407,
  e_DuplicateClassId__1500 = 76,
  e_isTemplateMessageHeader = 0,
  e_classidMessageHeader = 1500,
  e_DuplicateClassId__1501 = 76,
  e_isTemplateMessage = 0,
  e_classidMessage = 1501,
  e_DuplicateClassId__1502 = 76,
  e_isTemplateBroadcastMessage = 0,
  e_classidBroadcastMessage = 1502,
  e_DuplicateClassId__1510 = 76,
  e_isTemplateTopologyMap = 0,
  e_classidTopologyMap = 1510,
  e_DuplicateClassId__1511 = 76,
  e_isTemplateTopologyMapEntry = 0,
  e_classidTopologyMapEntry = 1511,
  e_DuplicateClassId__1512 = 76,
  e_isTemplateTopologyMapEntryArray = 0,
  e_classidTopologyMapEntryArray = 1512,
  e_DuplicateClassId__1513 = 76,
  e_isTemplateParticipantId = 0,
  e_classidParticipantId = 1513,
  e_DuplicateClassId__1515 = 76,
  e_isTemplateConversationDescriptor = 0,
  e_classidConversationDescriptor = 1515,
  e_DuplicateClassId__1518 = 76,
  e_isTemplateWorkspaceFragmentId = 0,
  e_classidWorkspaceFragmentId = 1518,
  e_DuplicateClassId__1519 = 76,
  e_isTemplateWorkspaceDescriptor = 0,
  e_classidWorkspaceDescriptor = 1519,
  e_DuplicateClassId__1521 = 76,
  e_isTemplateWorkspaceTaskId = 0,
  e_classidWorkspaceTaskId = 1521,
  e_DuplicateClassId__1522 = 76,
  e_isTemplateWorkspaceTaskDescriptor = 0,
  e_classidWorkspaceTaskDescriptor = 1522,
  e_DuplicateClassId__1523 = 76,
  e_isTemplateWorkspaceTopology = 0,
  e_classidWorkspaceTopology = 1523,
  e_DuplicateClassId__1524 = 76,
  e_isTemplateActivationHeader = 0,
  e_classidActivationHeader = 1524,
  e_DuplicateClassId__1526 = 76,
  e_isTemplateConvTaskParticipantBinding = 0,
  e_classidConvTaskParticipantBinding = 1526,
  e_DuplicateClassId__1527 = 76,
  e_isTemplateTaskResult = 0,
  e_classidTaskResult = 1527,
  e_DuplicateClassId__1528 = 76,
  e_isTemplateTaskResultMessage = 0,
  e_classidTaskResultMessage = 1528,
  e_DuplicateClassId__1529 = 76,
  e_isTemplateFragmentShutdownMessage = 0,
  e_classidFragmentShutdownMessage = 1529,
  e_DuplicateClassId__1530 = 76,
  e_isTemplateFragmentShutdownCompleted = 0,
  e_classidFragmentShutdownCompleted = 1530,
  e_DuplicateClassId__1531 = 76,
  e_isTemplateIActivationContextFragment = 0,
  e_classidIActivationContextFragment = 1531,
  e_DuplicateClassId__1532 = 76,
  e_isTemplateXactAcf = 0,
  e_classidXactAcf = 1532,
  e_DuplicateClassId__1533 = 76,
  e_isTemplateIAcfResult = 0,
  e_classidIAcfResult = 1533,
  e_DuplicateClassId__1534 = 76,
  e_isTemplateXactAcfResult = 0,
  e_classidXactAcfResult = 1534,
  e_DuplicateClassId__1535 = 76,
  e_isTemplateActivationHandlerAcf = 0,
  e_classidActivationHandlerAcf = 1535,
  e_DuplicateClassId__1536 = 76,
  e_isTemplateDataPortCreditGrant = 0,
  e_classidDataPortCreditGrant = 1536,
  e_DuplicateClassId__1541 = 76,
  e_isTemplateTransientStateChangeRequest = 0,
  e_classidTransientStateChangeRequest = 1541,
  e_DuplicateClassId__1542 = 76,
  e_isTemplateTransientStateChangeReply = 0,
  e_classidTransientStateChangeReply = 1542,
  e_DuplicateClassId__1606 = 76,
  e_isTemplateXactReportMsg = 0,
  e_classidXactReportMsg = 1606,
  e_DuplicateClassId__1710 = 76,
  e_isTemplateDataEndOfStreamMsg = 0,
  e_classidDataEndOfStreamMsg = 1710,
  e_DuplicateClassId__1713 = 76,
  e_isTemplatePingMsg = 0,
  e_classidPingMsg = 1713,
  e_DuplicateClassId__1714 = 76,
  e_isTemplatePongMsg = 0,
  e_classidPongMsg = 1714,
  e_DuplicateClassId__1715 = 76,
  e_isTemplateStringMsg = 0,
  e_classidStringMsg = 1715,
  e_DuplicateClassId__1719 = 76,
  e_isTemplateSampleACF = 0,
  e_classidSampleACF = 1719,
  e_DuplicateClassId__1721 = 76,
  e_isTemplateDataPortKickMsg = 0,
  e_classidDataPortKickMsg = 1721,
  e_DuplicateClassId__1722 = 76,
  e_isTemplateDataPortTestConfig = 0,
  e_classidDataPortTestConfig = 1722,
  e_DuplicateClassId__1801 = 76,
  e_isTemplateCFW_MessageDWORD = 0,
  e_classidCFW_MessageDWORD = 1801,
  e_DuplicateClassId__1802 = 76,
  e_isTemplateCFW_MessageByteArray = 0,
  e_classidCFW_MessageByteArray = 1802,
  e_DuplicateClassId__1900 = 76,
  e_isTemplateCStreamingSysDmSessionTransactionTVFInfo = 0,
  e_classidCStreamingSysDmSessionTransactionTVFInfo = 1900,
  e_DuplicateClassId__1901 = 76,
  e_isTemplateCStreamingSysTVFInfo = 0,
  e_classidCStreamingSysTVFInfo = 1901,
  e_DuplicateClassId__1902 = 76,
  e_isTemplateTasksTableInfo = 0,
  e_classidTasksTableInfo = 1902,
  e_DuplicateClassId__1903 = 76,
  e_isTemplateCExecCachedPlansSTVFInfo = 0,
  e_classidCExecCachedPlansSTVFInfo = 1903,
  e_DuplicateClassId__1904 = 76,
  e_isTemplateCDMVBaseSTVFInfo = 0,
  e_classidCDMVBaseSTVFInfo = 1904,
  e_DuplicateClassId__1905 = 76,
  e_isTemplateCRuleStatsTableSTVFInfo = 0,
  e_classidCRuleStatsTableSTVFInfo = 1905,
  e_DuplicateClassId__1906 = 76,
  e_isTemplateCSecurableClassSTVFInfo = 0,
  e_classidCSecurableClassSTVFInfo = 1906,
  e_DuplicateClassId__1907 = 76,
  e_isTemplateCOpenTapesSTVFInfo = 0,
  e_classidCOpenTapesSTVFInfo = 1907,
  e_DuplicateClassId__1908 = 76,
  e_isTemplateCTranslatePermissionsSTVFInfo = 0,
  e_classidCTranslatePermissionsSTVFInfo = 1908,
  e_DuplicateClassId__1909 = 76,
  e_isTemplateCTVFInfoCatalog = 0,
  e_classidCTVFInfoCatalog = 1909,
  e_DuplicateClassId__1910 = 76,
  e_isTemplateCRowsetCfgInstantiate = 0,
  e_classidCRowsetCfgInstantiate = 1910,
  e_DuplicateClassId__1911 = 76,
  e_isTemplateCSysPartFragTVFInstantiate = 0,
  e_classidCSysPartFragTVFInstantiate = 1911,
  e_DuplicateClassId__1912 = 76,
  e_isTemplateCDBPropTVFInstantiate = 0,
  e_classidCDBPropTVFInstantiate = 1912,
  e_DuplicateClassId__1913 = 76,
  e_isTemplateCDBMirrorTVFInstantiate = 0,
  e_classidCDBMirrorTVFInstantiate = 1913,
  e_DuplicateClassId__1914 = 76,
  e_isTemplateCDBRecoveryStateTVFInstantiate = 0,
  e_classidCDBRecoveryStateTVFInstantiate = 1914,
  e_DuplicateClassId__1915 = 76,
  e_isTemplateCSysComTVFInstantiate = 0,
  e_classidCSysComTVFInstantiate = 1915,
  e_DuplicateClassId__1916 = 76,
  e_isTemplateCPersistedSkuFeaturesTVFInstantiate = 0,
  e_classidCPersistedSkuFeaturesTVFInstantiate = 1916,
  e_DuplicateClassId__1917 = 76,
  e_isTemplateCRowsetRefInstantiate = 0,
  e_classidCRowsetRefInstantiate = 1917,
  e_DuplicateClassId__1918 = 76,
  e_isTemplateCRowsetALUInstantiate = 0,
  e_classidCRowsetALUInstantiate = 1918,
  e_DuplicateClassId__1919 = 76,
  e_isTemplateCRowsetRSCPropInstantiate = 0,
  e_classidCRowsetRSCPropInstantiate = 1919,
  e_DuplicateClassId__1920 = 76,
  e_isTemplateCRowsetIndexPropInstantiate = 0,
  e_classidCRowsetIndexPropInstantiate = 1920,
  e_DuplicateClassId__1921 = 76,
  e_isTemplateCSysPlanGuidesTVFInstantiate = 0,
  e_classidCSysPlanGuidesTVFInstantiate = 1921,
  e_DuplicateClassId__1922 = 76,
  e_isTemplateCPartitionCountTVFInstantiate = 0,
  e_classidCPartitionCountTVFInstantiate = 1922,
  e_DuplicateClassId__1923 = 76,
  e_isTemplateCDBMirrorAutoPageRepairTVFInstantiate = 0,
  e_classidCDBMirrorAutoPageRepairTVFInstantiate = 1923,
  e_DuplicateClassId__1924 = 76,
  e_isTemplateCDBMWitnessTVFInstantiate = 0,
  e_classidCDBMWitnessTVFInstantiate = 1924,
  e_DuplicateClassId__1925 = 76,
  e_isTemplateCDBMPastActionsTVFInstantiate = 0,
  e_classidCDBMPastActionsTVFInstantiate = 1925,
  e_DuplicateClassId__1926 = 76,
  e_isTemplateCDBScriptLevelTVFInstantiate = 0,
  e_classidCDBScriptLevelTVFInstantiate = 1926,
  e_DuplicateClassId__1927 = 76,
  e_isTemplateIOledbRange = 0,
  e_classidIOledbRange = 1927,
  e_DuplicateClassId__1928 = 76,
  e_isTemplateCVRTableComp = 0,
  e_classidCVRTableComp = 1928,
  e_DuplicateClassId__1929 = 76,
  e_isTemplateCMatrixSegmentStatsInfo = 0,
  e_classidCMatrixSegmentStatsInfo = 1929,
  e_DuplicateClassId__1930 = 76,
  e_isTemplateIMPORT_COLINFO = 0,
  e_classidIMPORT_COLINFO = 1930,
  e_DuplicateClassId__1931 = 76,
  e_isTemplateIMPORT_KEYINFO = 0,
  e_classidIMPORT_KEYINFO = 1931,
  e_DuplicateClassId__1932 = 76,
  e_isTemplateMetaDataBlob = 0,
  e_classidMetaDataBlob = 1932,
  e_DuplicateClassId__1933 = 76,
  e_isTemplateCTVFInfoSysMessagesTVF = 0,
  e_classidCTVFInfoSysMessagesTVF = 1933,
  e_DuplicateClassId__1934 = 76,
  e_isTemplateCTVFInfoSequences = 0,
  e_classidCTVFInfoSequences = 1934,
  e_DuplicateClassId__1935 = 76,
  e_isTemplateCMatrixDBSegmentStateInfo = 0,
  e_classidCMatrixDBSegmentStateInfo = 1935,
  e_DuplicateClassId__1936 = 76,
  e_isTemplateCMatrixDBFilePropInfo = 0,
  e_classidCMatrixDBFilePropInfo = 1936,
  e_DuplicateClassId__1937 = 76,
  e_isTemplateCFilePropTVFInstantiate = 0,
  e_classidCFilePropTVFInstantiate = 1937,
  e_DuplicateClassId__1938 = 76,
  e_isTemplateCFFtDatabaseOptionsTVFInstantiate = 0,
  e_classidCFFtDatabaseOptionsTVFInstantiate = 1938,
  e_DuplicateClassId__1939 = 76,
  e_isTemplateCFFtTableOptionsTVFInstantiate = 0,
  e_classidCFFtTableOptionsTVFInstantiate = 1939,
  e_DuplicateClassId__1940 = 76,
  e_isTemplateCSysTempStatsTVFInstantiate = 0,
  e_classidCSysTempStatsTVFInstantiate = 1940,
  e_DuplicateClassId__1941 = 76,
  e_isTemplateSymbolicNameInfo = 0,
  e_classidSymbolicNameInfo = 1941,
  e_DuplicateClassId__1942 = 76,
  e_isTemplateCReplSTVFSchemasInfo = 0,
  e_classidCReplSTVFSchemasInfo = 1942,
  e_DuplicateClassId__1943 = 76,
  e_isTemplateCReplSTVFTranHashInfo = 0,
  e_classidCReplSTVFTranHashInfo = 1943,
  e_DuplicateClassId__1944 = 76,
  e_isTemplateCReplSTVFTranInfoInfo = 0,
  e_classidCReplSTVFTranInfoInfo = 1944,
  e_DuplicateClassId__1945 = 76,
  e_isTemplateCBuiltinPermissionsSTVFInfo = 0,
  e_classidCBuiltinPermissionsSTVFInfo = 1945,
  e_DuplicateClassId__1946 = 76,
  e_isTemplateCDbLogSpaceUsageInfo = 0,
  e_classidCDbLogSpaceUsageInfo = 1946,
  e_DuplicateClassId__1947 = 76,
  e_isTemplateCMatrixPartitionsInfo = 0,
  e_classidCMatrixPartitionsInfo = 1947,
  e_DuplicateClassId__1948 = 76,
  e_isTemplateCNtUserOrGroupSTVFInfo = 0,
  e_classidCNtUserOrGroupSTVFInfo = 1948,
  e_DuplicateClassId__1949 = 76,
  e_isTemplateCHadrAutoPageRepairTVFInstantiate = 0,
  e_classidCHadrAutoPageRepairTVFInstantiate = 1949,
  e_DuplicateClassId__1950 = 76,
  e_isTemplateCMatrixNYAFeaturesTVFInfo = 0,
  e_classidCMatrixNYAFeaturesTVFInfo = 1950,
  e_DuplicateClassId__1960 = 76,
  e_isTemplateGlobalDbId = 0,
  e_classidGlobalDbId = 1960,
  e_DuplicateClassId__1961 = 76,
  e_isTemplateColumnStoreRowGroupsTableInfo = 0,
  e_classidColumnStoreRowGroupsTableInfo = 1961,
  e_DuplicateClassId__2000 = 76,
  e_isTemplateDBOpRequest = 0,
  e_classidDBOpRequest = 2000,
  e_DuplicateClassId__2001 = 76,
  e_isTemplateDBOpReply = 0,
  e_classidDBOpReply = 2001,
  e_DuplicateClassId__2002 = 76,
  e_isTemplateCFileDecl = 0,
  e_classidCFileDecl = 2002,
  e_DuplicateClassId__2003 = 76,
  e_isTemplateCFileGroupDecl = 0,
  e_classidCFileGroupDecl = 2003,
  e_DuplicateClassId__2004 = 76,
  e_isTemplateDBFragmentPlacement = 0,
  e_classidDBFragmentPlacement = 2004,
  e_DuplicateClassId__2005 = 76,
  e_isTemplateCDBDDLBaseRequest = 0,
  e_classidCDBDDLBaseRequest = 2005,
  e_DuplicateClassId__2006 = 76,
  e_isTemplateCDBDDLBaseReply = 0,
  e_classidCDBDDLBaseReply = 2006,
  e_DuplicateClassId__2007 = 76,
  e_isTemplateCCreateDbFragRequest = 0,
  e_classidCCreateDbFragRequest = 2007,
  e_DuplicateClassId__2008 = 76,
  e_isTemplateCDropDbFragRequest = 0,
  e_classidCDropDbFragRequest = 2008,
  e_DuplicateClassId__2009 = 76,
  e_isTemplateRemapFileEntry = 0,
  e_classidRemapFileEntry = 2009,
  e_DuplicateClassId__2010 = 76,
  e_isTemplateCFileOpRequest = 0,
  e_classidCFileOpRequest = 2010,
  e_DuplicateClassId__2011 = 76,
  e_isTemplateCValidateFileReply = 0,
  e_classidCValidateFileReply = 2011,
  e_DuplicateClassId__2012 = 76,
  e_isTemplateCAttachDbFragRequest = 0,
  e_classidCAttachDbFragRequest = 2012,
  e_DuplicateClassId__2013 = 76,
  e_isTemplateCCreateDbFragReply = 0,
  e_classidCCreateDbFragReply = 2013,
  e_DuplicateClassId__2014 = 76,
  e_isTemplateDBStartupRequest = 0,
  e_classidDBStartupRequest = 2014,
  e_DuplicateClassId__2015 = 76,
  e_isTemplateDBShutdownRequest = 0,
  e_classidDBShutdownRequest = 2015,
  e_DuplicateClassId__2016 = 76,
  e_isTemplateDBStateOptionChange = 0,
  e_classidDBStateOptionChange = 2016,
  e_DuplicateClassId__2017 = 76,
  e_isTemplateCCreateFileGroup = 0,
  e_classidCCreateFileGroup = 2017,
  e_DuplicateClassId__2018 = 76,
  e_isTemplateCDropFileGroup = 0,
  e_classidCDropFileGroup = 2018,
  e_DuplicateClassId__2019 = 76,
  e_isTemplateCModifyFileGroup = 0,
  e_classidCModifyFileGroup = 2019,
  e_DuplicateClassId__2020 = 76,
  e_isTemplateCDBDDLRequest = 0,
  e_classidCDBDDLRequest = 2020,
  e_DuplicateClassId__2021 = 76,
  e_isTemplateCDBDDLReply = 0,
  e_classidCDBDDLReply = 2021,
  e_DuplicateClassId__2022 = 76,
  e_isTemplateCPrepareDbFragRequest = 0,
  e_classidCPrepareDbFragRequest = 2022,
  e_DuplicateClassId__2023 = 76,
  e_isTemplateCCacheDbFragRequest = 0,
  e_classidCCacheDbFragRequest = 2023,
  e_DuplicateClassId__2024 = 76,
  e_isTemplateCCreateSnapshotRequest = 0,
  e_classidCCreateSnapshotRequest = 2024,
  e_DuplicateClassId__2025 = 76,
  e_isTemplateCCreateSnapshotReply = 0,
  e_classidCCreateSnapshotReply = 2025,
  e_DuplicateClassId__2026 = 76,
  e_isTemplateCheckpointRequest = 0,
  e_classidCheckpointRequest = 2026,
  e_DuplicateClassId__2102 = 76,
  e_isTemplateDbccOptions = 0,
  e_classidDbccOptions = 2102,
  e_DuplicateClassId__2103 = 76,
  e_isTemplateDbccStateObject = 0,
  e_classidDbccStateObject = 2103,
  e_DuplicateClassId__2104 = 76,
  e_isTemplateCheckAggRemotePhaseComplete = 0,
  e_classidCheckAggRemotePhaseComplete = 2104,
  e_DuplicateClassId__2106 = 76,
  e_isTemplateCheckAggRemoteRequestHeader = 0,
  e_classidCheckAggRemoteRequestHeader = 2106,
  e_DuplicateClassId__2107 = 76,
  e_isTemplateCheckResultSetBuffer = 0,
  e_classidCheckResultSetBuffer = 2107,
  e_DuplicateClassId__2108 = 76,
  e_isTemplateDbccCombinedId = 0,
  e_classidDbccCombinedId = 2108,
  e_DuplicateClassId__2109 = 76,
  e_isTemplateCheckAggResultSetMessageReply = 0,
  e_classidCheckAggResultSetMessageReply = 2109,
  e_DuplicateClassId__2110 = 76,
  e_isTemplateCheckAggRemoteReplyHeader = 0,
  e_classidCheckAggRemoteReplyHeader = 2110,
  e_DuplicateClassId__2113 = 76,
  e_isTemplateCheckAggRemoteThreadInitRequest = 0,
  e_classidCheckAggRemoteThreadInitRequest = 2113,
  e_DuplicateClassId__2114 = 76,
  e_isTemplateCheckAggRemoteThreadInitReply = 0,
  e_classidCheckAggRemoteThreadInitReply = 2114,
  e_DuplicateClassId__2115 = 76,
  e_isTemplateCheckAggResultSetMessageRequest = 0,
  e_classidCheckAggResultSetMessageRequest = 2115,
  e_DuplicateClassId__2116 = 76,
  e_isTemplateCheckAggRemotePhaseStart = 0,
  e_classidCheckAggRemotePhaseStart = 2116,
  e_DuplicateClassId__2117 = 76,
  e_isTemplateCheckAggRemoteShutdownRequest = 0,
  e_classidCheckAggRemoteShutdownRequest = 2117,
  e_DuplicateClassId__2118 = 76,
  e_isTemplateCheckAggRemoteShutdownReply = 0,
  e_classidCheckAggRemoteShutdownReply = 2118,
  e_DuplicateClassId__2119 = 76,
  e_isTemplateCheckAggExtendedIndexRequest = 0,
  e_classidCheckAggExtendedIndexRequest = 2119,
  e_DuplicateClassId__2120 = 76,
  e_isTemplateCheckAggExtendedIndexReply = 0,
  e_classidCheckAggExtendedIndexReply = 2120,
  e_DuplicateClassId__2126 = 76,
  e_isTemplateCheckAggCrossRowsetRequest = 0,
  e_classidCheckAggCrossRowsetRequest = 2126,
  e_DuplicateClassId__2127 = 76,
  e_isTemplateCheckAggCrossRowsetReply = 0,
  e_classidCheckAggCrossRowsetReply = 2127,
  e_DuplicateClassId__2128 = 76,
  e_isTemplateCheckCrossRowsetFact = 0,
  e_classidCheckCrossRowsetFact = 2128,
  e_DuplicateClassId__2129 = 76,
  e_isTemplateRowsetFactData = 0,
  e_classidRowsetFactData = 2129,
  e_DuplicateClassId__2130 = 76,
  e_isTemplateRowsetFactDataList = 0,
  e_classidRowsetFactDataList = 2130,
  e_DuplicateClassId__2131 = 76,
  e_isTemplateFactMetadataIdentifier = 0,
  e_classidFactMetadataIdentifier = 2131,
  e_DuplicateClassId__2132 = 76,
  e_isTemplateCheckCrossRowsetParentFact = 0,
  e_classidCheckCrossRowsetParentFact = 2132,
  e_DuplicateClassId__2133 = 76,
  e_isTemplateCheckCrossRowsetActualFact = 0,
  e_classidCheckCrossRowsetActualFact = 2133,
  e_DuplicateClassId__2200 = 76,
  e_isTemplateCMatrixGDMBaseMessage = 0,
  e_classidCMatrixGDMBaseMessage = 2200,
  e_DuplicateClassId__2201 = 76,
  e_isTemplateCMatrixGDMXactListMessage = 0,
  e_classidCMatrixGDMXactListMessage = 2201,
  e_DuplicateClassId__2202 = 76,
  e_isTemplateCMatrixGDMAGWFGEdge = 0,
  e_classidCMatrixGDMAGWFGEdge = 2202,
  e_DuplicateClassId__2203 = 76,
  e_isTemplateCMatrixGDMAGWFGEdgeDesc = 0,
  e_classidCMatrixGDMAGWFGEdgeDesc = 2203,
  e_DuplicateClassId__2204 = 76,
  e_isTemplateCMatrixGDMAGWFGFragment = 0,
  e_classidCMatrixGDMAGWFGFragment = 2204,
  e_DuplicateClassId__2205 = 76,
  e_isTemplateCMatrixGWFGFragmentReply = 0,
  e_classidCMatrixGWFGFragmentReply = 2205,
  e_DuplicateClassId__2206 = 76,
  e_isTemplateCMatrixGDMAXactLocalStateDescriptor = 0,
  e_classidCMatrixGDMAXactLocalStateDescriptor = 2206,
  e_DuplicateClassId__2207 = 76,
  e_isTemplateCMatrixXactLocalStateReply = 0,
  e_classidCMatrixXactLocalStateReply = 2207,
  e_DuplicateClassId__2208 = 76,
  e_isTemplateCMatrixGDMAXactLocalStabilityDescriptor = 0,
  e_classidCMatrixGDMAXactLocalStabilityDescriptor = 2208,
  e_DuplicateClassId__2209 = 76,
  e_isTemplateCMatrixXactLocalStabilityReply = 0,
  e_classidCMatrixXactLocalStabilityReply = 2209,
  e_DuplicateClassId__2210 = 76,
  e_isTemplateCMatrixGDMDeadlockResolutionReq = 0,
  e_classidCMatrixGDMDeadlockResolutionReq = 2210,
  e_DuplicateClassId__2300 = 76,
  e_isTemplateCMatrixSampleRequest = 0,
  e_classidCMatrixSampleRequest = 2300,
  e_DuplicateClassId__2301 = 76,
  e_isTemplateCMatrixSampleReply = 0,
  e_classidCMatrixSampleReply = 2301,
  e_DuplicateClassId__2302 = 76,
  e_isTemplateCloudPartitionMapTableInfo = 0,
  e_classidCloudPartitionMapTableInfo = 2302,
  e_DuplicateClassId__2303 = 76,
  e_isTemplateAsyncTransportWorkersTableInfo = 0,
  e_classidAsyncTransportWorkersTableInfo = 2303,
  e_DuplicateClassId__2304 = 76,
  e_isTemplateRecordDecodeTableInfo = 0,
  e_classidRecordDecodeTableInfo = 2304,
  e_DuplicateClassId__2305 = 76,
  e_isTemplateCloudPartitionStatsTableInfo = 0,
  e_classidCloudPartitionStatsTableInfo = 2305,
  e_DuplicateClassId__2306 = 76,
  e_isTemplateReplDecodeMessageInfo = 0,
  e_classidReplDecodeMessageInfo = 2306,
  e_DuplicateClassId__2307 = 76,
  e_isTemplateAsyncTransportDestinationsTableInfo = 0,
  e_classidAsyncTransportDestinationsTableInfo = 2307,
  e_DuplicateClassId__2308 = 76,
  e_isTemplateAsyncTransportStreamsTableInfo = 0,
  e_classidAsyncTransportStreamsTableInfo = 2308,
  e_DuplicateClassId__2309 = 76,
  e_isTemplateCSFWSTVFRulesInfo = 0,
  e_classidCSFWSTVFRulesInfo = 2309,
  e_DuplicateClassId__2310 = 76,
  e_isTemplateCfgTableInfo = 0,
  e_classidCfgTableInfo = 2310,
  e_DuplicateClassId__2311 = 76,
  e_isTemplateCloudPartitionWaitStatsTableInfo = 0,
  e_classidCloudPartitionWaitStatsTableInfo = 2311,
  e_DuplicateClassId__2312 = 76,
  e_isTemplateCloudPartitionSloTableInfo = 0,
  e_classidCloudPartitionSloTableInfo = 2312,
  e_DuplicateClassId__2313 = 76,
  e_isTemplateUcsTaskManagersTableInfo = 0,
  e_classidUcsTaskManagersTableInfo = 2313,
  e_DuplicateClassId__2314 = 76,
  e_isTemplateUcsTaskManagerWorkersTableInfo = 0,
  e_classidUcsTaskManagerWorkersTableInfo = 2314,
  e_DuplicateClassId__2315 = 76,
  e_isTemplateCloudBackgroundTasksTableInfo = 0,
  e_classidCloudBackgroundTasksTableInfo = 2315,
  e_DuplicateClassId__2316 = 76,
  e_isTemplateScriptDeploymentRequestsTableInfo = 0,
  e_classidScriptDeploymentRequestsTableInfo = 2316,
  e_DuplicateClassId__2317 = 76,
  e_isTemplateScriptDeploymentWorkersTableInfo = 0,
  e_classidScriptDeploymentWorkersTableInfo = 2317,
  e_DuplicateClassId__2318 = 76,
  e_isTemplateCloudPhysicalSeedingStatsTableInfo = 0,
  e_classidCloudPhysicalSeedingStatsTableInfo = 2318,
  e_DuplicateClassId__2400 = 76,
  e_isTemplateTSimpleTableInfoEngineHost = 1,
  e_classidTSimpleTableInfoEngineHost = 2400,
  e_DuplicateClassId__2401 = 76,
  e_isTemplateCRowsetLanguageInstantiate = 0,
  e_classidCRowsetLanguageInstantiate = 2401,
  e_DuplicateClassId__2402 = 76,
  e_isTemplateCRowsetCharsetInstantiate = 0,
  e_classidCRowsetCharsetInstantiate = 2402,
  e_DuplicateClassId__2403 = 76,
  e_isTemplateCCollationsSTVFInfo = 0,
  e_classidCCollationsSTVFInfo = 2403,
  e_DuplicateClassId__2404 = 76,
  e_isTemplateCPlanPersistRuntimeStatsInMemoryTVFInfo = 0,
  e_classidCPlanPersistRuntimeStatsInMemoryTVFInfo = 2404,
  e_DuplicateClassId__2405 = 76,
  e_isTemplateCPlanPersistQueryTextInMemoryTVFInfo = 0,
  e_classidCPlanPersistQueryTextInMemoryTVFInfo = 2405,
  e_DuplicateClassId__2406 = 76,
  e_isTemplateCPlanPersistQueryInMemoryTVFInfo = 0,
  e_classidCPlanPersistQueryInMemoryTVFInfo = 2406,
  e_DuplicateClassId__2407 = 76,
  e_isTemplateCPlanPersistPlanInMemoryTVFInfo = 0,
  e_classidCPlanPersistPlanInMemoryTVFInfo = 2407,
  e_DuplicateClassId__2408 = 76,
  e_isTemplateCQueryStoreStatementHandleTVFInfo = 0,
  e_classidCQueryStoreStatementHandleTVFInfo = 2408,
  e_DuplicateClassId__2409 = 76,
  e_isTemplateCQueryStoreOptionsTVFInfo = 0,
  e_classidCQueryStoreOptionsTVFInfo = 2409,
  e_DuplicateClassId__2410 = 76,
  e_isTemplateCQueryStoreRuntimeStatsTVFInfo = 0,
  e_classidCQueryStoreRuntimeStatsTVFInfo = 2410,
  e_DuplicateClassId__2411 = 76,
  e_isTemplateCQueryStoreQueryTextTVFInfo = 0,
  e_classidCQueryStoreQueryTextTVFInfo = 2411,
  e_DuplicateClassId__2412 = 76,
  e_isTemplateCQueryStoreQueryTVFInfo = 0,
  e_classidCQueryStoreQueryTVFInfo = 2412,
  e_DuplicateClassId__2413 = 76,
  e_isTemplateCQueryStorePlanTVFInfo = 0,
  e_classidCQueryStorePlanTVFInfo = 2413,
  e_DuplicateClassId__2414 = 76,
  e_isTemplateCQueryStoreRuntimeStatsIntervalTVFInfo = 0,
  e_classidCQueryStoreRuntimeStatsIntervalTVFInfo = 2414,
  e_DuplicateClassId__2415 = 76,
  e_isTemplateCQueryStoreContextSettingsTVFInfo = 0,
  e_classidCQueryStoreContextSettingsTVFInfo = 2415,
  e_DuplicateClassId__2416 = 76,
  e_isTemplateCQueryStoreGlobalHealthTVFInfo = 0,
  e_classidCQueryStoreGlobalHealthTVFInfo = 2416,
  e_DuplicateClassId__2500 = 76,
  e_isTemplateCExecDumpLoadDevice = 0,
  e_classidCExecDumpLoadDevice = 2500,
  e_DuplicateClassId__2501 = 76,
  e_isTemplateCExecDumpLoadFile = 0,
  e_classidCExecDumpLoadFile = 2501,
  e_DuplicateClassId__2502 = 76,
  e_isTemplateCExecDumpLoadRelocatedFile = 0,
  e_classidCExecDumpLoadRelocatedFile = 2502,
  e_DuplicateClassId__2503 = 76,
  e_isTemplateBackupEntry = 0,
  e_classidBackupEntry = 2503,
  e_DuplicateClassId__2504 = 76,
  e_isTemplateCMbrRequest = 0,
  e_classidCMbrRequest = 2504,
  e_DuplicateClassId__2505 = 76,
  e_isTemplateCMbrReply = 0,
  e_classidCMbrReply = 2505,
  e_DuplicateClassId__2506 = 76,
  e_isTemplateCMbrRestoreDoPermissionCheckReply = 0,
  e_classidCMbrRestoreDoPermissionCheckReply = 2506,
  e_DuplicateClassId__2507 = 76,
  e_isTemplateCMbrRestorePermissionCheckCompleteRequest = 0,
  e_classidCMbrRestorePermissionCheckCompleteRequest = 2507,
  e_DuplicateClassId__2508 = 76,
  e_isTemplateCMbrBootstrapRequest = 0,
  e_classidCMbrBootstrapRequest = 2508,
  e_DuplicateClassId__2509 = 76,
  e_isTemplateCMbrBackupDatabaseReadyForUseDbReply = 0,
  e_classidCMbrBackupDatabaseReadyForUseDbReply = 2509,
  e_DuplicateClassId__2510 = 76,
  e_isTemplateCMbrBackupDatabaseGetProposedRestoreAGERequest = 0,
  e_classidCMbrBackupDatabaseGetProposedRestoreAGERequest = 2510,
  e_DuplicateClassId__2511 = 76,
  e_isTemplateCMbrBackupDatabaseGetProposedRestoreAGEReply = 0,
  e_classidCMbrBackupDatabaseGetProposedRestoreAGEReply = 2511,
  e_DuplicateClassId__2512 = 76,
  e_isTemplateCMbrRestoreRequest = 0,
  e_classidCMbrRestoreRequest = 2512,
  e_DuplicateClassId__2513 = 76,
  e_isTemplateCMbrRestoreReply = 0,
  e_classidCMbrRestoreReply = 2513,
  e_DuplicateClassId__2514 = 76,
  e_isTemplateCMbrRestoreReadyForAttachDbReply = 0,
  e_classidCMbrRestoreReadyForAttachDbReply = 2514,
  e_DuplicateClassId__2515 = 76,
  e_isTemplateCMbrRestoreAttachDbOnPrimaryRequest = 0,
  e_classidCMbrRestoreAttachDbOnPrimaryRequest = 2515,
  e_DuplicateClassId__2516 = 76,
  e_isTemplateCMbrRestoreAttachDbOnPrimaryCompleteReply = 0,
  e_classidCMbrRestoreAttachDbOnPrimaryCompleteReply = 2516,
  e_DuplicateClassId__2517 = 76,
  e_isTemplateCMbrRestoreAttachDbCompleteRequest = 0,
  e_classidCMbrRestoreAttachDbCompleteRequest = 2517,
  e_DuplicateClassId__2518 = 76,
  e_isTemplateCMbrRestoreReadyForStartDbForFixupsReply = 0,
  e_classidCMbrRestoreReadyForStartDbForFixupsReply = 2518,
  e_DuplicateClassId__2519 = 76,
  e_isTemplateCMbrRestoreStartDbForFixupsRequest = 0,
  e_classidCMbrRestoreStartDbForFixupsRequest = 2519,
  e_DuplicateClassId__2520 = 76,
  e_isTemplateCMbrRestoreReadyForStartRecoveryOnNonPrimaryReply = 0,
  e_classidCMbrRestoreReadyForStartRecoveryOnNonPrimaryReply = 2520,
  e_DuplicateClassId__2521 = 76,
  e_isTemplateCMbrRestoreStartRecoveryOnNonPrimaryRequest = 0,
  e_classidCMbrRestoreStartRecoveryOnNonPrimaryRequest = 2521,
  e_DuplicateClassId__2522 = 76,
  e_isTemplateCMbrRestoreReadyForShutdownDbForOnlineReply = 0,
  e_classidCMbrRestoreReadyForShutdownDbForOnlineReply = 2522,
  e_DuplicateClassId__2523 = 76,
  e_isTemplateCMbrRestoreShutdownDbForOnlineRequest = 0,
  e_classidCMbrRestoreShutdownDbForOnlineRequest = 2523,
  e_DuplicateClassId__2524 = 76,
  e_isTemplateCMbrRestoreReadyForStartDbForOnlineReply = 0,
  e_classidCMbrRestoreReadyForStartDbForOnlineReply = 2524,
  e_DuplicateClassId__2525 = 76,
  e_isTemplateCMbrRestoreStartDbForOnlineOnPrimaryRequest = 0,
  e_classidCMbrRestoreStartDbForOnlineOnPrimaryRequest = 2525,
  e_DuplicateClassId__2526 = 76,
  e_isTemplateCMbrRestoreReadyForStartDbForOnlineOnNonPrimaryReply = 0,
  e_classidCMbrRestoreReadyForStartDbForOnlineOnNonPrimaryReply = 2526,
  e_DuplicateClassId__2527 = 76,
  e_isTemplateCMbrRestoreStartDbForOnlineOnNonPrimaryRequest = 0,
  e_classidCMbrRestoreStartDbForOnlineOnNonPrimaryRequest = 2527,
  e_DuplicateClassId__2528 = 76,
  e_isTemplateBackupEntryCoordinator = 0,
  e_classidBackupEntryCoordinator = 2528,
  e_DuplicateClassId__2529 = 76,
  e_isTemplateCMbrBackupDatabaseAllocateContextRequest = 0,
  e_classidCMbrBackupDatabaseAllocateContextRequest = 2529,
  e_DuplicateClassId__2530 = 76,
  e_isTemplateCMbrBackupDatabaseAllocateContextReply = 0,
  e_classidCMbrBackupDatabaseAllocateContextReply = 2530,
  e_DuplicateClassId__2531 = 76,
  e_isTemplateCMbrBackupDatabaseStartSynchronizationRequest = 0,
  e_classidCMbrBackupDatabaseStartSynchronizationRequest = 2531,
  e_DuplicateClassId__2532 = 76,
  e_isTemplateCMbrBackupDatabaseStartSynchronizationReply = 0,
  e_classidCMbrBackupDatabaseStartSynchronizationReply = 2532,
  e_DuplicateClassId__2533 = 76,
  e_isTemplateCMbrBackupDatabaseCheckPermissionsRequest = 0,
  e_classidCMbrBackupDatabaseCheckPermissionsRequest = 2533,
  e_DuplicateClassId__2534 = 76,
  e_isTemplateCMbrBackupDatabaseCheckPermissionsReply = 0,
  e_classidCMbrBackupDatabaseCheckPermissionsReply = 2534,
  e_DuplicateClassId__2535 = 76,
  e_isTemplateCMbrBackupDatabaseInitiateOperationRequest = 0,
  e_classidCMbrBackupDatabaseInitiateOperationRequest = 2535,
  e_DuplicateClassId__2536 = 76,
  e_isTemplateCMbrBackupDatabaseInitiateOperationReply = 0,
  e_classidCMbrBackupDatabaseInitiateOperationReply = 2536,
  e_DuplicateClassId__2537 = 76,
  e_isTemplateCMbrBackupDatabaseInvokePreOperationHookRequest = 0,
  e_classidCMbrBackupDatabaseInvokePreOperationHookRequest = 2537,
  e_DuplicateClassId__2538 = 76,
  e_isTemplateCMbrBackupDatabaseInvokePreOperationHookReply = 0,
  e_classidCMbrBackupDatabaseInvokePreOperationHookReply = 2538,
  e_DuplicateClassId__2539 = 76,
  e_isTemplateCMbrBackupDatabaseCopyDataRequest = 0,
  e_classidCMbrBackupDatabaseCopyDataRequest = 2539,
  e_DuplicateClassId__2540 = 76,
  e_isTemplateCMbrBackupDatabaseCopyDataReply = 0,
  e_classidCMbrBackupDatabaseCopyDataReply = 2540,
  e_DuplicateClassId__2541 = 76,
  e_isTemplateCMbrBackupDatabaseCopyLogRequest = 0,
  e_classidCMbrBackupDatabaseCopyLogRequest = 2541,
  e_DuplicateClassId__2542 = 76,
  e_isTemplateCMbrBackupDatabaseCopyLogReply = 0,
  e_classidCMbrBackupDatabaseCopyLogReply = 2542,
  e_DuplicateClassId__2543 = 76,
  e_isTemplateCMbrBackupDatabaseFinalizeOperationRequest = 0,
  e_classidCMbrBackupDatabaseFinalizeOperationRequest = 2543,
  e_DuplicateClassId__2544 = 76,
  e_isTemplateCMbrBackupDatabaseFinalizeOperationReply = 0,
  e_classidCMbrBackupDatabaseFinalizeOperationReply = 2544,
  e_DuplicateClassId__2545 = 76,
  e_isTemplateCMbrBackupDatabaseInvokePostOperationHookRequest = 0,
  e_classidCMbrBackupDatabaseInvokePostOperationHookRequest = 2545,
  e_DuplicateClassId__2546 = 76,
  e_isTemplateCMbrBackupDatabaseInvokePostOperationHookReply = 0,
  e_classidCMbrBackupDatabaseInvokePostOperationHookReply = 2546,
  e_DuplicateClassId__2547 = 76,
  e_isTemplateCMbrBackupDatabaseCloseOperationRequest = 0,
  e_classidCMbrBackupDatabaseCloseOperationRequest = 2547,
  e_DuplicateClassId__2548 = 76,
  e_isTemplateCMbrBackupDatabaseCloseOperationReply = 0,
  e_classidCMbrBackupDatabaseCloseOperationReply = 2548,
  e_DuplicateClassId__2549 = 76,
  e_isTemplateCMbrBackupDatabaseEndSynchronizationRequest = 0,
  e_classidCMbrBackupDatabaseEndSynchronizationRequest = 2549,
  e_DuplicateClassId__2550 = 76,
  e_isTemplateCMbrBackupDatabaseEndSynchronizationReply = 0,
  e_classidCMbrBackupDatabaseEndSynchronizationReply = 2550,
  e_DuplicateClassId__2551 = 76,
  e_isTemplateCMbrBackupDatabaseReleaseResourcesRequest = 0,
  e_classidCMbrBackupDatabaseReleaseResourcesRequest = 2551,
  e_DuplicateClassId__2552 = 76,
  e_isTemplateCMbrBackupDatabaseReleaseResourcesReply = 0,
  e_classidCMbrBackupDatabaseReleaseResourcesReply = 2552,
  e_DuplicateClassId__2553 = 76,
  e_isTemplateCMbrBackupDatabaseCommitTransactionRequest = 0,
  e_classidCMbrBackupDatabaseCommitTransactionRequest = 2553,
  e_DuplicateClassId__2554 = 76,
  e_isTemplateCMbrBackupDatabaseCommitTransactionReply = 0,
  e_classidCMbrBackupDatabaseCommitTransactionReply = 2554,
  e_DuplicateClassId__2555 = 76,
  e_isTemplateCMbrBackupDatabaseUpdateHistoryRequest = 0,
  e_classidCMbrBackupDatabaseUpdateHistoryRequest = 2555,
  e_DuplicateClassId__2556 = 76,
  e_isTemplateCMbrBackupDatabaseUpdateHistoryReply = 0,
  e_classidCMbrBackupDatabaseUpdateHistoryReply = 2556,
  e_DuplicateClassId__2557 = 76,
  e_isTemplateCMbrBackupDatabaseReportResultRequest = 0,
  e_classidCMbrBackupDatabaseReportResultRequest = 2557,
  e_DuplicateClassId__2558 = 76,
  e_isTemplateCMbrBackupDatabaseReportResultReply = 0,
  e_classidCMbrBackupDatabaseReportResultReply = 2558,
  e_DuplicateClassId__2559 = 76,
  e_isTemplateCMbrRestoreArchiveQueryRequest = 0,
  e_classidCMbrRestoreArchiveQueryRequest = 2559,
  e_DuplicateClassId__2560 = 76,
  e_isTemplateCMbrRestoreArchiveQueryReply = 0,
  e_classidCMbrRestoreArchiveQueryReply = 2560,
  e_DuplicateClassId__2561 = 76,
  e_isTemplateCMbrRestoreReadyForFixupPostRollforwardReply = 0,
  e_classidCMbrRestoreReadyForFixupPostRollforwardReply = 2561,
  e_DuplicateClassId__2562 = 76,
  e_isTemplateCMbrRestoreStartFixupPostRollforwardOnPrimaryRequest = 0,
  e_classidCMbrRestoreStartFixupPostRollforwardOnPrimaryRequest = 2562,
  e_DuplicateClassId__2563 = 76,
  e_isTemplateCMbrRestoreReadyForFixupPostRollforwardOnNonPrimaryReply = 0,
  e_classidCMbrRestoreReadyForFixupPostRollforwardOnNonPrimaryReply = 2563,
  e_DuplicateClassId__2564 = 76,
  e_isTemplateCMbrRestoreStartFixupPostRollforwardOnNonPrimaryRequest = 0,
  e_classidCMbrRestoreStartFixupPostRollforwardOnNonPrimaryRequest = 2564,
  e_DuplicateClassId__2565 = 76,
  e_isTemplateCMbrWorkerRequestingSyncReply = 0,
  e_classidCMbrWorkerRequestingSyncReply = 2565,
  e_DuplicateClassId__2566 = 76,
  e_isTemplateCMbrWorkerSyncCompletedRequest = 0,
  e_classidCMbrWorkerSyncCompletedRequest = 2566,
  e_DuplicateClassId__2567 = 76,
  e_isTemplateCMbrBackupLogAllocateContextRequest = 0,
  e_classidCMbrBackupLogAllocateContextRequest = 2567,
  e_DuplicateClassId__2568 = 76,
  e_isTemplateCMbrBackupLogAllocateContextReply = 0,
  e_classidCMbrBackupLogAllocateContextReply = 2568,
  e_DuplicateClassId__2569 = 76,
  e_isTemplateCMbrRestoreReadyForRecoveryReply = 0,
  e_classidCMbrRestoreReadyForRecoveryReply = 2569,
  e_DuplicateClassId__2570 = 76,
  e_isTemplateCMbrRestoreRecoverDatabaseRequest = 0,
  e_classidCMbrRestoreRecoverDatabaseRequest = 2570,
  e_DuplicateClassId__2571 = 76,
  e_isTemplateCMbrRestoreStartRecoveryOnPrimaryRequest = 0,
  e_classidCMbrRestoreStartRecoveryOnPrimaryRequest = 2571,
  e_DuplicateClassId__2572 = 76,
  e_isTemplateWorkerMetadataForArchiveQuery = 0,
  e_classidWorkerMetadataForArchiveQuery = 2572,
  e_DuplicateClassId__2573 = 76,
  e_isTemplateWorkerMetadataInfo = 0,
  e_classidWorkerMetadataInfo = 2573,
  e_DuplicateClassId__2574 = 76,
  e_isTemplateRestoreVerifyOnlyInfo = 0,
  e_classidRestoreVerifyOnlyInfo = 2574,
  e_DuplicateClassId__2575 = 76,
  e_isTemplateCMbrRestoreCheckBindingsCompleteReply = 0,
  e_classidCMbrRestoreCheckBindingsCompleteReply = 2575,
  e_DuplicateClassId__2576 = 76,
  e_isTemplateCMbrRestoreCheckBindingsResultRequest = 0,
  e_classidCMbrRestoreCheckBindingsResultRequest = 2576,
  e_DuplicateClassId__2577 = 76,
  e_isTemplateCMbrRestoreReadyToDeleteDatabaseReply = 0,
  e_classidCMbrRestoreReadyToDeleteDatabaseReply = 2577,
  e_DuplicateClassId__2578 = 76,
  e_isTemplateCMbrRestoreDatabaseDeleteCompleteRequest = 0,
  e_classidCMbrRestoreDatabaseDeleteCompleteRequest = 2578,
  e_DuplicateClassId__2579 = 76,
  e_isTemplateCMbrRestoreCatalogUpdateCompleteReply = 0,
  e_classidCMbrRestoreCatalogUpdateCompleteReply = 2579,
  e_DuplicateClassId__2580 = 76,
  e_isTemplateCMbrRestoreCatalogUpdateCommittedRequest = 0,
  e_classidCMbrRestoreCatalogUpdateCommittedRequest = 2580,
  e_DuplicateClassId__2581 = 76,
  e_isTemplateCMbrBackupDatabaseUseDbCompleteRequest = 0,
  e_classidCMbrBackupDatabaseUseDbCompleteRequest = 2581,
  e_DuplicateClassId__2582 = 76,
  e_isTemplateCMbrBackupDatabaseReadyForUnUseDbReply = 0,
  e_classidCMbrBackupDatabaseReadyForUnUseDbReply = 2582,
  e_DuplicateClassId__2583 = 76,
  e_isTemplateCMbrBackupDatabaseUnUseDbCompleteRequest = 0,
  e_classidCMbrBackupDatabaseUnUseDbCompleteRequest = 2583,
  e_DuplicateClassId__2600 = 76,
  e_isTemplateGlmRequestMessage = 0,
  e_classidGlmRequestMessage = 2600,
  e_DuplicateClassId__2601 = 76,
  e_isTemplateGlmResponseMessage = 0,
  e_classidGlmResponseMessage = 2601,
  e_DuplicateClassId__2602 = 76,
  e_isTemplateGlmUndoMessage = 0,
  e_classidGlmUndoMessage = 2602,
  e_DuplicateClassId__2603 = 76,
  e_isTemplateGlmRequestPayload = 0,
  e_classidGlmRequestPayload = 2603,
  e_DuplicateClassId__2604 = 76,
  e_isTemplateGlmResponsePayload = 0,
  e_classidGlmResponsePayload = 2604,
  e_DuplicateClassId__2605 = 76,
  e_isTemplateGlmUndoPayload = 0,
  e_classidGlmUndoPayload = 2605,
  e_DuplicateClassId__2606 = 76,
  e_isTemplateGlmDatabaseParams = 0,
  e_classidGlmDatabaseParams = 2606,
  e_DuplicateClassId__2607 = 76,
  e_isTemplateCSysLockInformationSTVFInfo = 0,
  e_classidCSysLockInformationSTVFInfo = 2607,
  e_DuplicateClassId__2608 = 76,
  e_isTemplateCGlmTaskResult = 0,
  e_classidCGlmTaskResult = 2608,
  e_DuplicateClassId__2609 = 76,
  e_isTemplateGlmTableParams = 0,
  e_classidGlmTableParams = 2609,
  e_DuplicateClassId__2700 = 76,
  e_isTemplateXEventDDLRequest = 0,
  e_classidXEventDDLRequest = 2700,
  e_DuplicateClassId__2701 = 76,
  e_isTemplateXEventDDLReply = 0,
  e_classidXEventDDLReply = 2701,
  e_DuplicateClassId__2702 = 76,
  e_isTemplateCXE_Obj = 0,
  e_classidCXE_Obj = 2702,
  e_DuplicateClassId__2703 = 76,
  e_isTemplateCXE_ObjList = 0,
  e_classidCXE_ObjList = 2703,
  e_DuplicateClassId__2704 = 76,
  e_isTemplateCXE_Option = 0,
  e_classidCXE_Option = 2704,
  e_DuplicateClassId__2705 = 76,
  e_isTemplateCXE_Action = 0,
  e_classidCXE_Action = 2705,
  e_DuplicateClassId__2706 = 76,
  e_isTemplateCXE_Target = 0,
  e_classidCXE_Target = 2706,
  e_DuplicateClassId__2707 = 76,
  e_isTemplateCXE_Predicate = 0,
  e_classidCXE_Predicate = 2707,
  e_DuplicateClassId__2708 = 76,
  e_isTemplateCXE_Event = 0,
  e_classidCXE_Event = 2708,
  e_DuplicateClassId__2709 = 76,
  e_isTemplateCXE_Field = 0,
  e_classidCXE_Field = 2709,
  e_DuplicateClassId__2710 = 76,
  e_isTemplateMDName = 0,
  e_classidMDName = 2710,
  e_DuplicateClassId__2711 = 76,
  e_isTemplateCObjName = 0,
  e_classidCObjName = 2711,
  e_DuplicateClassId__2800 = 76,
  e_isTemplateTransientStateChangeRequestPayload = 0,
  e_classidTransientStateChangeRequestPayload = 2800,
  e_DuplicateClassId__2801 = 76,
  e_isTemplateDWORDPayload = 0,
  e_classidDWORDPayload = 2801,
  e_DuplicateClassId__2802 = 76,
  e_isTemplateSecurityCacheInvalidationPayload = 0,
  e_classidSecurityCacheInvalidationPayload = 2802,
  e_DuplicateClassId__2803 = 76,
  e_isTemplateFreeSystemCachePayload = 0,
  e_classidFreeSystemCachePayload = 2803,
  e_DuplicateClassId__2804 = 76,
  e_isTemplateFreeProcCachePayload = 0,
  e_classidFreeProcCachePayload = 2804,
  e_DuplicateClassId__2805 = 76,
  e_isTemplateFlushPayload = 0,
  e_classidFlushPayload = 2805,
  e_DuplicateClassId__2806 = 76,
  e_isTemplateStackDumpPayload = 0,
  e_classidStackDumpPayload = 2806,
  e_DuplicateClassId__2900 = 76,
  e_isTemplateHkTvfTransactions = 0,
  e_classidHkTvfTransactions = 2900,
  e_DuplicateClassId__2901 = 76,
  e_isTemplateHkTvfTxIterator = 0,
  e_classidHkTvfTxIterator = 2901,
  e_DuplicateClassId__2902 = 76,
  e_isTemplateHkTvfTransactionEvents = 0,
  e_classidHkTvfTransactionEvents = 2902,
  e_DuplicateClassId__2903 = 76,
  e_isTemplateHkTvfTxEventIterator = 0,
  e_classidHkTvfTxEventIterator = 2903,
  e_DuplicateClassId__2904 = 76,
  e_isTemplateHkTvfRecentRowTransactions = 0,
  e_classidHkTvfRecentRowTransactions = 2904,
  e_DuplicateClassId__2905 = 76,
  e_isTemplateHkTvfTxRecentRowIterator = 0,
  e_classidHkTvfTxRecentRowIterator = 2905,
  e_DuplicateClassId__2906 = 76,
  e_isTemplateHkTvfSystemStats = 0,
  e_classidHkTvfSystemStats = 2906,
  e_DuplicateClassId__2907 = 76,
  e_isTemplateHkTvfSystemStatsIterator = 0,
  e_classidHkTvfSystemStatsIterator = 2907,
  e_DuplicateClassId__2908 = 76,
  e_isTemplateHkTvfTableStats = 0,
  e_classidHkTvfTableStats = 2908,
  e_DuplicateClassId__2909 = 76,
  e_isTemplateHkTvfTableStatsIterator = 0,
  e_classidHkTvfTableStatsIterator = 2909,
  e_DuplicateClassId__2910 = 76,
  e_isTemplateHkTvfIndexStats = 0,
  e_classidHkTvfIndexStats = 2910,
  e_DuplicateClassId__2911 = 76,
  e_isTemplateHkTvfIndexStatsIterator = 0,
  e_classidHkTvfIndexStatsIterator = 2911,
  classidMax = 2912,
  classidLimit = 0x3fffff,
  classidNULL = -1023,
  classidCycle = -1022,
  classidError = -1021,
  classidCompilerOffset = -1020,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 36,
} TAG_UNNAMED_1123, *PTAG_UNNAMED_1123;

typedef enum
{
  table_nameIdx = 0,
  index_nameIdx = 1,
  schema_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1124, *PTAG_UNNAMED_1124;

typedef struct __vc_attributes::atl::request_handlerAttribute
{
  /* 0x0000 */ const char* name;
  /* 0x0008 */ const char* sdl;
} _vc_attributes::atl::request_handlerAttribute, *P_vc_attributes::atl::request_handlerAttribute; /* size: 0x0010 */

enum XeSqlPkg::RpcReturnResult
{
  RRR_OK = 0,
  RRR_ERROR = 1,
  RRR_ABORT = 2,
  RRR_SKIPPED = 3,
};

enum CLUSTER_CHANGE
{
  CLUSTER_CHANGE_NODE_STATE = 1,
  CLUSTER_CHANGE_NODE_DELETED = 2,
  CLUSTER_CHANGE_NODE_ADDED = 4,
  CLUSTER_CHANGE_NODE_PROPERTY = 8,
  CLUSTER_CHANGE_REGISTRY_NAME = 16,
  CLUSTER_CHANGE_REGISTRY_ATTRIBUTES = 32,
  CLUSTER_CHANGE_REGISTRY_VALUE = 64,
  CLUSTER_CHANGE_REGISTRY_SUBTREE = 128,
  CLUSTER_CHANGE_RESOURCE_STATE = 256,
  CLUSTER_CHANGE_RESOURCE_DELETED = 512,
  CLUSTER_CHANGE_RESOURCE_ADDED = 1024,
  CLUSTER_CHANGE_RESOURCE_PROPERTY = 2048,
  CLUSTER_CHANGE_GROUP_STATE = 4096,
  CLUSTER_CHANGE_GROUP_DELETED = 8192,
  CLUSTER_CHANGE_GROUP_ADDED = 16384,
  CLUSTER_CHANGE_GROUP_PROPERTY = 0xffff8000,
  CLUSTER_CHANGE_RESOURCE_TYPE_DELETED = 0x10000,
  CLUSTER_CHANGE_RESOURCE_TYPE_ADDED = 0x20000,
  CLUSTER_CHANGE_RESOURCE_TYPE_PROPERTY = 0x40000,
  CLUSTER_CHANGE_CLUSTER_RECONNECT = 0x80000,
  CLUSTER_CHANGE_NETWORK_STATE = 0x100000,
  CLUSTER_CHANGE_NETWORK_DELETED = 0x200000,
  CLUSTER_CHANGE_NETWORK_ADDED = 0x400000,
  CLUSTER_CHANGE_NETWORK_PROPERTY = 0x800000,
  CLUSTER_CHANGE_NETINTERFACE_STATE = 0x1000000,
  CLUSTER_CHANGE_NETINTERFACE_DELETED = 0x2000000,
  CLUSTER_CHANGE_NETINTERFACE_ADDED = 0x4000000,
  CLUSTER_CHANGE_NETINTERFACE_PROPERTY = 0x8000000,
  CLUSTER_CHANGE_QUORUM_STATE = 0x10000000,
  CLUSTER_CHANGE_CLUSTER_STATE = 0x20000000,
  CLUSTER_CHANGE_CLUSTER_PROPERTY = 0x40000000,
  CLUSTER_CHANGE_HANDLE_CLOSE = -2147483648,
  CLUSTER_CHANGE_ALL = -1,
};

typedef struct _CONNECTDLGSTRUCTW
{
  /* 0x0000 */ unsigned long cbStructure;
  /* 0x0004 */ long Padding_349;
  /* 0x0008 */ struct HWND__* hwndOwner;
  /* 0x0010 */ struct _NETRESOURCEW* lpConnRes;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ unsigned long dwDevNum;
} CONNECTDLGSTRUCTW, *PCONNECTDLGSTRUCTW; /* size: 0x0020 */

typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
  /* 0x0000 */ struct _GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION; /* size: 0x0010 */

enum CGlobalTraceFlags::FlagUsage
{
  FlagUsage_Internal = 0,
  FlagUsage_Startup = 1,
  FlagUsage_DBCC = 2,
  FlagUsage_Remote = 3,
};

enum FileIdEnum
{
  e_DuplicateFileId__1 = 21,
  e_fileidPutYourFirstFileHere = 1,
  e_DuplicateFileId__3 = 25,
  e_fileidcommtest = 3,
  e_DuplicateFileId__4 = 26,
  e_fileidch_distr = 4,
  e_DuplicateFileId__5 = 27,
  e_fileidch_owners = 5,
  e_DuplicateFileId__6 = 28,
  e_fileidcm_channel = 6,
  e_DuplicateFileId__7 = 29,
  e_fileidcm_expiration = 7,
  e_DuplicateFileId__8 = 30,
  e_fileidcm_transientstate = 8,
  e_DuplicateFileId__9 = 34,
  e_fileidcrpcrowset = 9,
  e_DuplicateFileId__11 = 38,
  e_fileidordmap = 11,
  e_DuplicateFileId__13 = 39,
  e_fileidfndatamv = 13,
  e_DuplicateFileId__18 = 40,
  e_fileidfncomp = 18,
  e_DuplicateFileId__19 = 41,
  e_fileidfnarith = 19,
  e_DuplicateFileId__25 = 42,
  e_fileidChannelUnitTest = 25,
  e_DuplicateFileId__26 = 43,
  e_fileidSendReceiveTest = 26,
  e_DuplicateFileId__27 = 44,
  e_fileidfncomp_md_ordmap = 27,
  e_DuplicateFileId__50 = 52,
  e_fileidqsxremote = 50,
  e_DuplicateFileId__51 = 53,
  e_fileidqxdriver = 51,
  e_DuplicateFileId__52 = 54,
  e_fileidqryimp = 52,
  e_DuplicateFileId__54 = 55,
  e_fileidqxdriver_m2 = 54,
  e_DuplicateFileId__55 = 56,
  e_fileidoptutil = 55,
  e_DuplicateFileId__60 = 60,
  e_fileidfabricperf = 60,
  e_DuplicateFileId__61 = 61,
  e_fileidcfw_test = 61,
  e_DuplicateFileId__62 = 62,
  e_fileiddataport = 62,
  e_DuplicateFileId__63 = 63,
  e_fileidsosmatrixcache = 63,
  e_DuplicateFileId__64 = 64,
  e_fileiddbchannel = 64,
  e_DuplicateFileId__65 = 65,
  e_fileidmtmrpcchannel = 65,
  e_DuplicateFileId__66 = 66,
  e_fileiddbremote = 66,
  e_DuplicateFileId__67 = 67,
  e_fileidindcreat = 67,
  e_DuplicateFileId__68 = 68,
  e_fileidmdmchannel = 68,
  e_DuplicateFileId__70 = 71,
  e_fileidstdbcomm = 70,
  e_DuplicateFileId__80 = 75,
  e_fileidsession_manager = 80,
  e_DuplicateFileId__100 = 78,
  e_fileidcmedcfg = 100,
  e_DuplicateFileId__101 = 79,
  e_fileidMDview = 101,
  e_DuplicateFileId__102 = 80,
  e_fileidstvfrpc = 102,
  e_DuplicateFileId__110 = 83,
  e_fileidxeventstate = 110,
  e_DuplicateFileId__201 = 93,
  e_fileidchkscaleout = 201,
  e_DuplicateFileId__202 = 97,
  e_fileidmbrremoteoperationcontroller = 202,
  e_DuplicateFileId__210 = 101,
  e_fileidchkptcomm = 210,
  e_DuplicateFileId__300 = 105,
  e_fileidglm_manager = 300,
  e_DuplicateFileId__301 = 106,
  e_fileidglma_agent = 301,
  fileidMax = 302,
  fileidLimit = 0xffffffff,
};

typedef enum
{
  agent_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1125, *PTAG_UNNAMED_1125;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 11,
} TAG_UNNAMED_1126, *PTAG_UNNAMED_1126;

class CAutoBase<EventTransformer *>
{
  /* 0x0000 */ struct EventTransformer** m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1127, *PTAG_UNNAMED_1127;

struct RpcChannelPoolSLock
{
}; /* size: 0x0004 */

enum DBPROPENUM20
{
  DBPROP_IMultipleResults = 217,
  DBPROP_DATASOURCE_TYPE = 251,
  MDPROP_AXES = 252,
  MDPROP_FLATTENING_SUPPORT = 253,
  MDPROP_MDX_JOINCUBES = 254,
  MDPROP_NAMED_LEVELS = 255,
  MDPROP_RANGEROWSET = 256,
  MDPROP_MDX_SLICER = 218,
  MDPROP_MDX_CUBEQUALIFICATION = 219,
  MDPROP_MDX_OUTERREFERENCE = 220,
  MDPROP_MDX_QUERYBYPROPERTY = 221,
  MDPROP_MDX_CASESUPPORT = 222,
  MDPROP_MDX_STRING_COMPOP = 224,
  MDPROP_MDX_DESCFLAGS = 225,
  MDPROP_MDX_SET_FUNCTIONS = 226,
  MDPROP_MDX_MEMBER_FUNCTIONS = 227,
  MDPROP_MDX_NUMERIC_FUNCTIONS = 228,
  MDPROP_MDX_FORMULAS = 229,
  MDPROP_AGGREGATECELL_UPDATE = 230,
  MDPROP_MDX_AGGREGATECELL_UPDATE = 230,
  MDPROP_MDX_OBJQUALIFICATION = 261,
  MDPROP_MDX_NONMEASURE_EXPRESSIONS = 262,
  DBPROP_ACCESSORDER = 231,
  DBPROP_BOOKMARKINFO = 232,
  DBPROP_INIT_CATALOG = 233,
  DBPROP_ROW_BULKOPS = 234,
  DBPROP_PROVIDERFRIENDLYNAME = 235,
  DBPROP_LOCKMODE = 236,
  DBPROP_MULTIPLECONNECTIONS = 237,
  DBPROP_UNIQUEROWS = 238,
  DBPROP_SERVERDATAONINSERT = 239,
  DBPROP_STORAGEFLAGS = 240,
  DBPROP_CONNECTIONSTATUS = 244,
  DBPROP_ALTERCOLUMN = 245,
  DBPROP_COLUMNLCID = 246,
  DBPROP_RESETDATASOURCE = 247,
  DBPROP_INIT_OLEDBSERVICES = 248,
  DBPROP_IRowsetRefresh = 249,
  DBPROP_SERVERNAME = 250,
  DBPROP_IParentRowset = 257,
  DBPROP_HIDDENCOLUMNS = 258,
  DBPROP_PROVIDERMEMORY = 259,
  DBPROP_CLIENTCURSOR = 260,
};

struct IAlterTable
{
}; /* size: 0x0008 */

enum XeSqlPkg::file_write_completed::CustomizableSlots
{
  collect_pathSlot = 0,
};

enum DkParametersProcessor::BOMtype
{
  bomNone = 0,
  bomUTF8 = 1,
  bomUTF16be = 2,
  bomUTF16le = 3,
  bomUTF32be = 4,
  bomUTF32le = 5,
  bomUTF7 = 6,
  bomUTF1 = 7,
  bomUTFEBCDIC = 8,
  bomSCSU = 9,
  bomBOCU1 = 10,
  bomGB18030 = 11,
};

class Spinlock<259,1,1>
{
}; /* size: 0x0004 */

enum SESSION_KILL_EXCEPTIONS
{
  SESSION_KILL_TWOTHREADPIPE = 0,
  SESSION_KILL_EXCEPTIONID_LAST = 1,
};

class XeSqlPkg::backup_restore_before_filestream
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_350[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

typedef enum
{
  setup_typeIdx = 0,
  last_session_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1128, *PTAG_UNNAMED_1128;

enum DkParameterErrorEnum
{
  dkpeSuccess = 0,
  dkpeInsufficientSpace = 1,
  dkpeFileNotFound = 2,
  dkpeExpressionTooBig = 3,
  dkpeFileTooBig = 4,
  dkpeOutOfMemoryWhileReadingFile = 5,
  dkpeFailedToReadFile = 6,
  dkpeFileEncodingNotSupported = 7,
  dkpeFileDecodingFailed = 8,
  dkpeOutOfMemoryWhileDecodingFile = 9,
  dkpeMaxFileRecursion = 10,
  dkpeDuplicateMetadata = 11,
  dkpeUnknownKeyword = 12,
  dkpeInvalidParameterDetectedInExecution = 13,
  dkpeInvalidArgument = 14,
  dkpeMissingArgument = 15,
  dkpeOutOfMemoryWhileIncreasingPositionalsCapacity = 16,
  dkpeOutOfMemoryWhileAllocatingDkParameter = 17,
  dkpeOutOfMemoryWhileAllocatingNameOrQuotedExpression = 18,
};

enum XeSqlPkg::query_plan_type
{
  eQueryPlanType_Standalone = 0,
  eQueryPlanType_RX = 1,
  eQueryPlanType_RPC = 2,
  eQueryPlanType_Mixed = 3,
};

struct tagWNODE_SINGLE_INSTANCE
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
  /* 0x0030 */ unsigned long OffsetInstanceName;
  /* 0x0034 */ unsigned long InstanceIndex;
  /* 0x0038 */ unsigned long DataBlockOffset;
  /* 0x003c */ unsigned long SizeDataBlock;
  /* 0x0040 */ unsigned char* VariableData /* zero-length array */;
}; /* size: 0x0040 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1129, *PTAG_UNNAMED_1129;

typedef enum
{
  brick_idIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1130, *PTAG_UNNAMED_1130;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1131, *PTAG_UNNAMED_1131;

struct SubLatchSLock
{
}; /* size: 0x0004 */

struct IOleInPlaceSiteEx
{
}; /* size: 0x0008 */

enum EMDVisitorState
{
  x_emvs_Match = 0,
  x_emvs_EndSearch = 1,
  x_emvs_KeepLooking = 2,
  x_emvs_Locked = 3,
};

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 8,
} TAG_UNNAMED_1132, *PTAG_UNNAMED_1132;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 25,
} TAG_UNNAMED_1133, *PTAG_UNNAMED_1133;

typedef enum
{
  opcodeIdx = 0,
  working_setIdx = 1,
  commitedIdx = 2,
  utilizationIdx = 3,
  effectIdx = 4,
  effect_durationIdx = 5,
  effect_stateIdx = 6,
  effect_reversed_indicatorIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1134, *PTAG_UNNAMED_1134;

enum RPCStream::BufferType
{
  x_readBuffer = 0,
  x_writeBuffer = 1,
  x_Buffers = 2,
};

class SpinlockHolder<163,3,1>;

typedef enum
{
  LocalStorageSize = 16,
} TAG_UNNAMED_1135, *PTAG_UNNAMED_1135;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1136, *PTAG_UNNAMED_1136;

struct IMonikerProp
{
}; /* size: 0x0008 */

enum tagDBBOOKMARK
{
  DBBMK_INVALID = 0,
  DBBMK_FIRST = 1,
  DBBMK_LAST = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_1137, *PTAG_UNNAMED_1137;

struct WMIREGGUIDW
{
  /* 0x0000 */ struct _GUID Guid;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long InstanceCount;
  union
  {
    /* 0x0018 */ unsigned long InstanceNameList;
    /* 0x0018 */ unsigned long BaseNameOffset;
    /* 0x0018 */ unsigned __int64 Pdo;
    /* 0x0018 */ unsigned __int64 InstanceInfo;
  }; /* size: 0x0008 */
}; /* size: 0x0020 */

enum DkParametersEnum::EnumFilter
{
  AllParameters = 0,
  SwitchParameters = 1,
  PositionalParameters = 2,
};

enum CGlobalTraceFlags::FlagScope
{
  FS_SESSION = 0,
  FS_GLOBAL = -1,
  FS_BRICK = -2,
};

struct CSessionTraceFlags::ClassName
{
}; /* size: 0x0001 */

typedef enum
{
  ClassId = 0xd3000,
  IsTemplate = 0,
  SerializableVirtual = 0,
} TAG_UNNAMED_1138, *PTAG_UNNAMED_1138;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1139, *PTAG_UNNAMED_1139;

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1140, *PTAG_UNNAMED_1140;

typedef enum
{
  session_idIdx = 0,
  is_dacIdx = 1,
  database_idIdx = 2,
  packet_sizeIdx = 3,
  transaction_countIdx = 4,
  group_idIdx = 5,
  durationIdx = 6,
  client_pidIdx = 7,
  optionsIdx = 8,
  options_textIdx = 9,
  started_event_session_nameIdx = 10,
  database_nameIdx = 11,
  client_app_nameIdx = 12,
  client_hostnameIdx = 13,
  nt_domainIdx = 14,
  nt_userIdx = 15,
  session_nt_domainIdx = 16,
  session_nt_userIdx = 17,
  server_principal_nameIdx = 18,
  server_principal_sidIdx = 19,
  session_server_principal_nameIdx = 20,
  session_server_principal_sidIdx = 21,
  LastField = 22,
} TAG_UNNAMED_1141, *PTAG_UNNAMED_1141;

class Spinlock<128,7,1>
{
}; /* size: 0x0004 */

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1142, *PTAG_UNNAMED_1142;

typedef struct _COMPOUND_ACCESS_ALLOWED_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned short CompoundAceType;
  /* 0x000a */ unsigned short Reserved;
  /* 0x000c */ unsigned long SidStart;
} COMPOUND_ACCESS_ALLOWED_ACE, *PCOMPOUND_ACCESS_ALLOWED_ACE; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_1143, *PTAG_UNNAMED_1143;

class Spinlock<56,16,1>
{
}; /* size: 0x0004 */

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1144, *PTAG_UNNAMED_1144;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1145, *PTAG_UNNAMED_1145;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1146, *PTAG_UNNAMED_1146;

typedef struct __vc_attributes::localAttribute
{
} _vc_attributes::localAttribute, *P_vc_attributes::localAttribute; /* size: 0x0001 */

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1147, *PTAG_UNNAMED_1147;

class TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1148, *PTAG_UNNAMED_1148;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1149, *PTAG_UNNAMED_1149;

typedef struct __vc_attributes::call_asAttribute
{
  /* 0x0000 */ void* local_proc;
} _vc_attributes::call_asAttribute, *P_vc_attributes::call_asAttribute; /* size: 0x0008 */

struct IXMLDOMProcessingInstruction
{
}; /* size: 0x0008 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1150, *PTAG_UNNAMED_1150;

struct sConstNameAndLength
{
  /* 0x0000 */ const wchar_t* m_wszName;
  /* 0x0008 */ unsigned long m_cbName;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct _EVENT_FILTER_DESCRIPTOR;

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1151, *PTAG_UNNAMED_1151;

class Spinlock<159,3,1>
{
}; /* size: 0x0004 */

class UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1152, *PTAG_UNNAMED_1152;

typedef struct _FILE_REPARSE_POINT_INFORMATION
{
  /* 0x0000 */ __int64 FileReference;
  /* 0x0008 */ unsigned long Tag;
  /* 0x000c */ long __PADDING__[1];
} FILE_REPARSE_POINT_INFORMATION, *PFILE_REPARSE_POINT_INFORMATION; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 10,
} TAG_UNNAMED_1153, *PTAG_UNNAMED_1153;

typedef struct _PS_ATTRIBUTE
{
  /* 0x0000 */ unsigned __int64 Attribute;
  /* 0x0008 */ unsigned __int64 Size;
  union
  {
    /* 0x0010 */ unsigned __int64 Value;
    /* 0x0010 */ void* ValuePtr;
  }; /* size: 0x0008 */
  /* 0x0018 */ unsigned __int64* ReturnLength;
} PS_ATTRIBUTE, *PPS_ATTRIBUTE; /* size: 0x0020 */

typedef enum
{
  isPointer = 0,
} TAG_UNNAMED_1154, *PTAG_UNNAMED_1154;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1155, *PTAG_UNNAMED_1155;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1156, *PTAG_UNNAMED_1156;

typedef enum
{
  object_idIdx = 0,
  database_idIdx = 1,
  cache_typeIdx = 2,
  in_cacheIdx = 3,
  aged_outIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1157, *PTAG_UNNAMED_1157;

typedef struct _EVENT_TRACE_HEADER
{
  /* 0x0000 */ unsigned short Size;
  union
  {
    /* 0x0002 */ unsigned short FieldTypeFlags;
    struct
    {
      /* 0x0002 */ unsigned char HeaderType;
      /* 0x0003 */ unsigned char MarkerFlags;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char Type;
      /* 0x0005 */ unsigned char Level;
      /* 0x0006 */ unsigned short Version;
    } /* size: 0x0004 */ Class;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  union
  {
    /* 0x0018 */ struct _GUID Guid;
    /* 0x0018 */ unsigned __int64 GuidPtr;
  }; /* size: 0x0010 */
  union
  {
    struct
    {
      /* 0x0028 */ unsigned long KernelTime;
      /* 0x002c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0028 */ unsigned __int64 ProcessorTime;
    struct
    {
      /* 0x0028 */ unsigned long ClientContext;
      /* 0x002c */ unsigned long Flags;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} EVENT_TRACE_HEADER, *PEVENT_TRACE_HEADER; /* size: 0x0030 */

typedef struct _ETW_BUFFER_CONTEXT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char ProcessorNumber;
      /* 0x0001 */ unsigned char Alignment;
    }; /* size: 0x0002 */
    /* 0x0000 */ unsigned short ProcessorIndex;
  }; /* size: 0x0002 */
  /* 0x0002 */ unsigned short LoggerId;
} ETW_BUFFER_CONTEXT, *PETW_BUFFER_CONTEXT; /* size: 0x0004 */

typedef struct _EVENT_TRACE
{
  /* 0x0000 */ struct _EVENT_TRACE_HEADER Header;
  /* 0x0030 */ unsigned long InstanceId;
  /* 0x0034 */ unsigned long ParentInstanceId;
  /* 0x0038 */ struct _GUID ParentGuid;
  /* 0x0048 */ void* MofData;
  /* 0x0050 */ unsigned long MofLength;
  union
  {
    /* 0x0054 */ unsigned long ClientContext;
    /* 0x0054 */ struct _ETW_BUFFER_CONTEXT BufferContext;
  }; /* size: 0x0004 */
} EVENT_TRACE, *PEVENT_TRACE; /* size: 0x0058 */

typedef struct _EVENT_TRACE_LOGFILEW
{
  /* 0x0000 */ wchar_t* LogFileName;
  /* 0x0008 */ wchar_t* LoggerName;
  /* 0x0010 */ __int64 CurrentTime;
  /* 0x0018 */ unsigned long BuffersRead;
  union
  {
    /* 0x001c */ unsigned long LogFileMode;
    /* 0x001c */ unsigned long ProcessTraceMode;
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _EVENT_TRACE CurrentEvent;
  /* 0x0078 */ struct _TRACE_LOGFILE_HEADER LogfileHeader;
  /* 0x0190 */ void* BufferCallback /* function */;
  /* 0x0198 */ unsigned long BufferSize;
  /* 0x019c */ unsigned long Filled;
  /* 0x01a0 */ unsigned long EventsLost;
  /* 0x01a4 */ long Padding_351;
  union
  {
    /* 0x01a8 */ void* EventCallback /* function */;
    /* 0x01a8 */ void* EventRecordCallback /* function */;
  }; /* size: 0x0008 */
  /* 0x01b0 */ unsigned long IsKernelTrace;
  /* 0x01b4 */ long Padding_352;
  /* 0x01b8 */ void* Context;
} EVENT_TRACE_LOGFILEW, *PEVENT_TRACE_LOGFILEW; /* size: 0x01c0 */

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1158, *PTAG_UNNAMED_1158;

struct IPicture
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1159, *PTAG_UNNAMED_1159;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_1160, *PTAG_UNNAMED_1160;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 0,
  VldEddOffset = 12,
  BufSize = 74,
} TAG_UNNAMED_1161, *PTAG_UNNAMED_1161;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  user_counterIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1162, *PTAG_UNNAMED_1162;

typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long FuncStart;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long PrologLen : 8; /* bit position: 0 */
    /* 0x0004 */ unsigned long FuncLen : 22; /* bit position: 8 */
    /* 0x0004 */ unsigned long ThirtyTwoBit : 1; /* bit position: 30 */
    /* 0x0004 */ unsigned long ExceptionFlag : 1; /* bit position: 31 */
  }; /* bitfield */
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY; /* size: 0x0008 */

typedef enum
{
  count_cyclesIdx = 0,
  prev_cycle_start_timeIdx = 1,
  prev_cycle_duration_msIdx = 2,
  curr_cycle_end_causeIdx = 3,
  prev_cycle_deadlock_participant_countIdx = 4,
  count_cycles_with_deadlockIdx = 5,
  count_cycles_with_deadlock_ended_normallyIdx = 6,
  count_cycles_with_deadlock_failed_deadlock_resolution_prepIdx = 7,
  count_cycles_with_deadlock_out_of_memoryIdx = 8,
  count_cycles_with_deadlock_timeoutIdx = 9,
  avg_cycle_duration_msIdx = 10,
  max_cycle_duration_msIdx = 11,
  avg_deadlock_participant_countIdx = 12,
  max_deadlock_participant_countIdx = 13,
  LastField = 14,
} TAG_UNNAMED_1163, *PTAG_UNNAMED_1163;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_1164, *PTAG_UNNAMED_1164;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  range_optionsIdx = 3,
  use_local_rowsetIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1165, *PTAG_UNNAMED_1165;

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1166, *PTAG_UNNAMED_1166;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1167, *PTAG_UNNAMED_1167;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1168, *PTAG_UNNAMED_1168;

class XeSqlPkg::oledb_query_interface
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_353[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int parametersOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1169, *PTAG_UNNAMED_1169;

typedef enum
{
  objects_flushedIdx = 0,
  sleep_timeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1170, *PTAG_UNNAMED_1170;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1171, *PTAG_UNNAMED_1171;

class CAutoBase<XE_FileMemoryMap>
{
  /* 0x0000 */ class XE_FileMemoryMap* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1172, *PTAG_UNNAMED_1172;

typedef enum
{
  Value = 13,
} TAG_UNNAMED_1173, *PTAG_UNNAMED_1173;

class Spinlock<323,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1174, *PTAG_UNNAMED_1174;

struct XE_TEvent<3,0,9>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,9> m_dynamicAttr;
  /* 0x01e8 */ struct XEEvent m_event;
}; /* size: 0x0230 */

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1175, *PTAG_UNNAMED_1175;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1176, *PTAG_UNNAMED_1176;

typedef struct _SHARE_INFO_2
{
  /* 0x0000 */ wchar_t* shi2_netname;
  /* 0x0008 */ unsigned long shi2_type;
  /* 0x000c */ long Padding_354;
  /* 0x0010 */ wchar_t* shi2_remark;
  /* 0x0018 */ unsigned long shi2_permissions;
  /* 0x001c */ unsigned long shi2_max_uses;
  /* 0x0020 */ unsigned long shi2_current_uses;
  /* 0x0024 */ long Padding_355;
  /* 0x0028 */ wchar_t* shi2_path;
  /* 0x0030 */ wchar_t* shi2_passwd;
} SHARE_INFO_2, *PSHARE_INFO_2; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 48,
} TAG_UNNAMED_1177, *PTAG_UNNAMED_1177;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1178, *PTAG_UNNAMED_1178;

struct tagRemHBITMAP
{
  /* 0x0000 */ unsigned long cbData;
  /* 0x0004 */ unsigned char data[1];
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1179, *PTAG_UNNAMED_1179;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 21,
} TAG_UNNAMED_1180, *PTAG_UNNAMED_1180;

struct IWinInetInfo
{
}; /* size: 0x0008 */

class RollingDictionaryInterface
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1181, *PTAG_UNNAMED_1181;

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1182, *PTAG_UNNAMED_1182;

typedef enum
{
  build_stageIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  index_idIdx = 3,
  partition_numberIdx = 4,
  partition_idIdx = 5,
  durationIdx = 6,
  rows_insertedIdx = 7,
  parallel_process_thread_idIdx = 8,
  index_nameIdx = 9,
  object_nameIdx = 10,
  database_nameIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1183, *PTAG_UNNAMED_1183;

typedef enum
{
  opcodeIdx = 0,
  task_addressIdx = 1,
  passesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1184, *PTAG_UNNAMED_1184;

typedef enum
{
  database_idIdx = 0,
  consumer_idIdx = 1,
  activity_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1185, *PTAG_UNNAMED_1185;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_1186, *PTAG_UNNAMED_1186;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1187, *PTAG_UNNAMED_1187;

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1188, *PTAG_UNNAMED_1188;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  brick_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1189, *PTAG_UNNAMED_1189;

typedef enum
{
  Value = 6,
} TAG_UNNAMED_1190, *PTAG_UNNAMED_1190;

struct tagLOGPALETTE
{
  /* 0x0000 */ unsigned short palVersion;
  /* 0x0002 */ unsigned short palNumEntries;
  /* 0x0004 */ struct tagPALETTEENTRY palPalEntry[1];
}; /* size: 0x0008 */

struct tagEMRCREATEPALETTE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPal;
  /* 0x000c */ struct tagLOGPALETTE lgpl;
}; /* size: 0x0014 */

typedef enum
{
  cluster_incarnationIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1191, *PTAG_UNNAMED_1191;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1192, *PTAG_UNNAMED_1192;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  lock_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1193, *PTAG_UNNAMED_1193;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1194, *PTAG_UNNAMED_1194;

typedef enum
{
  request_typeIdx = 0,
  file_byte_offsetIdx = 1,
  file_byte_countIdx = 2,
  bytes_writtenIdx = 3,
  request_idIdx = 4,
  file_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1195, *PTAG_UNNAMED_1195;

typedef struct _REASON_CONTEXT
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ struct HINSTANCE__* LocalizedReasonModule;
        /* 0x0010 */ unsigned long LocalizedReasonId;
        /* 0x0014 */ unsigned long ReasonStringCount;
        /* 0x0018 */ wchar_t** ReasonStrings;
      } /* size: 0x0018 */ Detailed;
      /* 0x0008 */ wchar_t* SimpleReasonString;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ Reason;
} REASON_CONTEXT, *PREASON_CONTEXT; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_1196, *PTAG_UNNAMED_1196;

class XE_AutoRg<unsigned __int64>
{
}; /* size: 0x0008 */

class XEPackage0::CounterTarget::Counters
{
  /* 0x0000 */ unsigned int m_Size;
  /* 0x0004 */ long Padding_356;
  /* 0x0008 */ class XE_AutoRg<unsigned __int64> m_memory;
  /* 0x0010 */ unsigned __int64* m_counters;
}; /* size: 0x0018 */

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1197, *PTAG_UNNAMED_1197;

struct XETarget
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ unsigned short m_customizableCount;
  /* 0x0022 */ char Padding_357[6];
  /* 0x0028 */ struct XECustomizableAttribute* m_customizableAttributes;
  /* 0x0030 */ void* m_binding;
}; /* size: 0x0038 */

struct XE_TTarget<2>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  }; /* size: 0x0070 */
  /* 0x0070 */ struct XETarget m_target;
}; /* size: 0x00a8 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1198, *PTAG_UNNAMED_1198;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_1199, *PTAG_UNNAMED_1199;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  log_block_idIdx = 2,
  write_sizeIdx = 3,
  rowsIdx = 4,
  pending_writesIdx = 5,
  pending_bytesIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1200, *PTAG_UNNAMED_1200;

typedef enum
{
  opcodeIdx = 0,
  task_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1201, *PTAG_UNNAMED_1201;

struct tagCALPOLESTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_358;
  /* 0x0008 */ wchar_t** pElems;
}; /* size: 0x0010 */

typedef enum
{
  countIdx = 0,
  cache_entry_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1202, *PTAG_UNNAMED_1202;

struct XEPackageAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* Init /* function */;
  /* 0x0018 */ void* Finalize /* function */;
  /* 0x0020 */ void* GetMetadata /* function */;
  /* 0x0028 */ void* EnableEvent /* function */;
  /* 0x0030 */ void* IsEventEnabled /* function */;
  /* 0x0038 */ void* DisableEvent /* function */;
  /* 0x0040 */ void* GetLastErrorContext /* function */;
  /* 0x0048 */ void* GetLocalizedString /* function */;
  /* 0x0050 */ void* StreamRead /* function */;
  /* 0x0058 */ void* StreamGetFragment /* function */;
  /* 0x0060 */ void* StreamReset /* function */;
}; /* size: 0x0068 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1203, *PTAG_UNNAMED_1203;

struct IOleCacheControl
{
}; /* size: 0x0008 */

class Spinlock<62,16,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_1204, *PTAG_UNNAMED_1204;

typedef enum
{
  countIdx = 0,
  node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1205, *PTAG_UNNAMED_1205;

class CAutoP<XE_FileSetMemoryMap>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1206, *PTAG_UNNAMED_1206;

typedef union _ULARGE_INTEGER
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    }; /* size: 0x0008 */
    struct
    {
      /* 0x0000 */ unsigned long LowPart;
      /* 0x0004 */ unsigned long HighPart;
    } /* size: 0x0008 */ u;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} ULARGE_INTEGER, *PULARGE_INTEGER; /* size: 0x0008 */

struct tagSTATSTG
{
  /* 0x0000 */ wchar_t* pwcsName;
  /* 0x0008 */ unsigned long type;
  /* 0x000c */ long Padding_359;
  /* 0x0010 */ union _ULARGE_INTEGER cbSize;
  /* 0x0018 */ struct _FILETIME mtime;
  /* 0x0020 */ struct _FILETIME ctime;
  /* 0x0028 */ struct _FILETIME atime;
  /* 0x0030 */ unsigned long grfMode;
  /* 0x0034 */ unsigned long grfLocksSupported;
  /* 0x0038 */ struct _GUID clsid;
  /* 0x0048 */ unsigned long grfStateBits;
  /* 0x004c */ unsigned long reserved;
}; /* size: 0x0050 */

typedef enum
{
  database_idIdx = 0,
  wait_timeIdx = 1,
  wait_log_blockIdx = 2,
  group_idIdx = 3,
  replica_idIdx = 4,
  ag_database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1207, *PTAG_UNNAMED_1207;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1208, *PTAG_UNNAMED_1208;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1209, *PTAG_UNNAMED_1209;

struct IPropertyBag
{
}; /* size: 0x0008 */

typedef enum
{
  query_operation_node_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1210, *PTAG_UNNAMED_1210;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 26,
} TAG_UNNAMED_1211, *PTAG_UNNAMED_1211;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_1212, *PTAG_UNNAMED_1212;

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1213, *PTAG_UNNAMED_1213;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_1214, *PTAG_UNNAMED_1214;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1215, *PTAG_UNNAMED_1215;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1216, *PTAG_UNNAMED_1216;

enum XeSqlPkg::filestream_file_io_trace::CustomizableSlots
{
  collect_workitem_descriptionSlot = 0,
  collect_transaction_idSlot = 1,
  collect_correlation_idsSlot = 2,
  collect_logical_pathSlot = 3,
  collect_physical_pathSlot = 4,
  collect_original_pathSlot = 5,
  verbositySlot = 6,
};

struct IWbemUnsecuredApartment
{
}; /* size: 0x0008 */

struct LockFreelistSLock
{
}; /* size: 0x0004 */

typedef enum
{
  countIdx = 0,
  cache_entry_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1217, *PTAG_UNNAMED_1217;

typedef struct _CLIENT_ID
{
  /* 0x0000 */ void* UniqueProcess;
  /* 0x0008 */ void* UniqueThread;
} CLIENT_ID, *PCLIENT_ID; /* size: 0x0010 */

typedef struct _PORT_MESSAGE
{
  union
  {
    union
    {
      struct
      {
        /* 0x0000 */ short DataLength;
        /* 0x0002 */ short TotalLength;
      } /* size: 0x0004 */ s1;
      /* 0x0000 */ unsigned long Length;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u1;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ short Type;
        /* 0x0006 */ short DataInfoOffset;
      } /* size: 0x0004 */ s2;
      /* 0x0004 */ unsigned long ZeroInit;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u2;
  union
  {
    /* 0x0008 */ struct _CLIENT_ID ClientId;
    /* 0x0008 */ double DoNotUseThisField;
  }; /* size: 0x0010 */
  /* 0x0018 */ unsigned long MessageId;
  /* 0x001c */ long Padding_360;
  union
  {
    /* 0x0020 */ unsigned __int64 ClientViewSize;
    struct
    {
      /* 0x0020 */ unsigned long CallbackId;
      /* 0x0024 */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
} PORT_MESSAGE, *PPORT_MESSAGE; /* size: 0x0028 */

typedef struct _HARDERROR_MSG
{
  /* 0x0000 */ struct _PORT_MESSAGE h;
  /* 0x0028 */ long Status;
  /* 0x002c */ long Padding_361;
  /* 0x0030 */ union _LARGE_INTEGER ErrorTime;
  /* 0x0038 */ unsigned long ValidResponseOptions;
  /* 0x003c */ unsigned long Response;
  /* 0x0040 */ unsigned long NumberOfParameters;
  /* 0x0044 */ unsigned long UnicodeStringParameterMask;
  /* 0x0048 */ unsigned __int64 Parameters[5];
} HARDERROR_MSG, *PHARDERROR_MSG; /* size: 0x0070 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_1218, *PTAG_UNNAMED_1218;

class TypeListSize<TypeListNode<void *,TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1219, *PTAG_UNNAMED_1219;

typedef enum
{
  countIdx = 0,
  cursor_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1220, *PTAG_UNNAMED_1220;

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1221, *PTAG_UNNAMED_1221;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1222, *PTAG_UNNAMED_1222;

typedef enum
{
  session_idIdx = 0,
  durationIdx = 1,
  error_countIdx = 2,
  tran_countIdx = 3,
  log_record_countIdx = 4,
  schema_change_countIdx = 5,
  command_countIdx = 6,
  latencyIdx = 7,
  empty_scan_countIdx = 8,
  failed_sessions_countIdx = 9,
  start_timeIdx = 10,
  end_timeIdx = 11,
  last_commit_timeIdx = 12,
  last_commit_cdc_timeIdx = 13,
  start_lsnIdx = 14,
  current_lsnIdx = 15,
  end_lsnIdx = 16,
  last_commit_lsnIdx = 17,
  first_begin_cdc_lsnIdx = 18,
  last_commit_cdc_lsnIdx = 19,
  LastField = 20,
} TAG_UNNAMED_1223, *PTAG_UNNAMED_1223;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 2,
  VldEddOffset = 1,
  BufSize = 24,
} TAG_UNNAMED_1224, *PTAG_UNNAMED_1224;

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1225, *PTAG_UNNAMED_1225;

typedef struct _KEY_CACHED_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0008 */ unsigned long TitleIndex;
  /* 0x000c */ unsigned long SubKeys;
  /* 0x0010 */ unsigned long MaxNameLen;
  /* 0x0014 */ unsigned long Values;
  /* 0x0018 */ unsigned long MaxValueNameLen;
  /* 0x001c */ unsigned long MaxValueDataLen;
  /* 0x0020 */ unsigned long NameLength;
  /* 0x0024 */ long __PADDING__[1];
} KEY_CACHED_INFORMATION, *PKEY_CACHED_INFORMATION; /* size: 0x0028 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  worker_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1226, *PTAG_UNNAMED_1226;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 15,
  NVld = 1,
  VldEddOffset = 13,
  BufSize = 86,
} TAG_UNNAMED_1227, *PTAG_UNNAMED_1227;

typedef struct _WIN32_FIND_DATAA
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long nFileSizeHigh;
  /* 0x0020 */ unsigned long nFileSizeLow;
  /* 0x0024 */ unsigned long dwReserved0;
  /* 0x0028 */ unsigned long dwReserved1;
  /* 0x002c */ char cFileName[260];
  /* 0x0130 */ char cAlternateFileName[14];
  /* 0x013e */ char __PADDING__[2];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA; /* size: 0x0140 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1228, *PTAG_UNNAMED_1228;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1229, *PTAG_UNNAMED_1229;

typedef enum
{
  countIdx = 0,
  incrementIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1230, *PTAG_UNNAMED_1230;

typedef enum
{
  opcodeIdx = 0,
  node_idIdx = 1,
  waited_resourceIdx = 2,
  passesIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1231, *PTAG_UNNAMED_1231;

typedef struct _WKSTA_INFO_1053
{
  /* 0x0000 */ int wki1053_utilize_nt_caching;
} WKSTA_INFO_1053, *PWKSTA_INFO_1053; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 26,
} TAG_UNNAMED_1232, *PTAG_UNNAMED_1232;

class AutoSpinlockHolder<180,3,1>;

typedef enum
{
  countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1233, *PTAG_UNNAMED_1233;

typedef struct _KEY_VALUE_FULL_INFORMATION
{
  /* 0x0000 */ unsigned long TitleIndex;
  /* 0x0004 */ unsigned long Type;
  /* 0x0008 */ unsigned long DataOffset;
  /* 0x000c */ unsigned long DataLength;
  /* 0x0010 */ unsigned long NameLength;
  /* 0x0014 */ wchar_t Name[1];
  /* 0x0016 */ char __PADDING__[2];
} KEY_VALUE_FULL_INFORMATION, *PKEY_VALUE_FULL_INFORMATION; /* size: 0x0018 */

enum CLUSCTL_RESOURCE_CODES
{
  CLUSCTL_RESOURCE_UNKNOWN = 0x1000000,
  CLUSCTL_RESOURCE_GET_CHARACTERISTICS = 0x1000005,
  CLUSCTL_RESOURCE_GET_FLAGS = 0x1000009,
  CLUSCTL_RESOURCE_GET_CLASS_INFO = 0x100000d,
  CLUSCTL_RESOURCE_GET_REQUIRED_DEPENDENCIES = 0x1000011,
  CLUSCTL_RESOURCE_GET_NAME = 0x1000029,
  CLUSCTL_RESOURCE_GET_ID = 0x1000039,
  CLUSCTL_RESOURCE_GET_RESOURCE_TYPE = 0x100002d,
  CLUSCTL_RESOURCE_ENUM_COMMON_PROPERTIES = 0x1000051,
  CLUSCTL_RESOURCE_GET_RO_COMMON_PROPERTIES = 0x1000055,
  CLUSCTL_RESOURCE_GET_COMMON_PROPERTIES = 0x1000059,
  CLUSCTL_RESOURCE_SET_COMMON_PROPERTIES = 0x140005e,
  CLUSCTL_RESOURCE_VALIDATE_COMMON_PROPERTIES = 0x1000061,
  CLUSCTL_RESOURCE_GET_COMMON_PROPERTY_FMTS = 0x1000065,
  CLUSCTL_RESOURCE_ENUM_PRIVATE_PROPERTIES = 0x1000079,
  CLUSCTL_RESOURCE_GET_RO_PRIVATE_PROPERTIES = 0x100007d,
  CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTIES = 0x1000081,
  CLUSCTL_RESOURCE_SET_PRIVATE_PROPERTIES = 0x1400086,
  CLUSCTL_RESOURCE_VALIDATE_PRIVATE_PROPERTIES = 0x1000089,
  CLUSCTL_RESOURCE_GET_PRIVATE_PROPERTY_FMTS = 0x100008d,
  CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT = 0x14000a2,
  CLUSCTL_RESOURCE_DELETE_REGISTRY_CHECKPOINT = 0x14000a6,
  CLUSCTL_RESOURCE_GET_REGISTRY_CHECKPOINTS = 0x10000a9,
  CLUSCTL_RESOURCE_ADD_CRYPTO_CHECKPOINT = 0x14000ae,
  CLUSCTL_RESOURCE_DELETE_CRYPTO_CHECKPOINT = 0x14000b2,
  CLUSCTL_RESOURCE_GET_CRYPTO_CHECKPOINTS = 0x10000b5,
  CLUSCTL_RESOURCE_GET_LOADBAL_PROCESS_LIST = 0x10000c9,
  CLUSCTL_RESOURCE_GET_NETWORK_NAME = 0x1000169,
  CLUSCTL_RESOURCE_NETNAME_GET_VIRTUAL_SERVER_TOKEN = 0x100016d,
  CLUSCTL_RESOURCE_NETNAME_SET_PWD_INFO = 0x100017a,
  CLUSCTL_RESOURCE_NETNAME_DELETE_CO = 0x100017e,
  CLUSCTL_RESOURCE_NETNAME_VALIDATE_VCO = 0x1000181,
  CLUSCTL_RESOURCE_NETNAME_RESET_VCO = 0x1000185,
  CLUSCTL_RESOURCE_NETNAME_REGISTER_DNS_RECORDS = 0x1000172,
  CLUSCTL_RESOURCE_GET_DNS_NAME = 0x1000175,
  CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO = 0x1000191,
  CLUSCTL_RESOURCE_STORAGE_IS_PATH_VALID = 0x1000199,
  CLUSCTL_RESOURCE_QUERY_DELETE = 0x10001b9,
  CLUSCTL_RESOURCE_UPGRADE_DLL = 0x14000ba,
  CLUSCTL_RESOURCE_IPADDRESS_RENEW_LEASE = 0x14001be,
  CLUSCTL_RESOURCE_IPADDRESS_RELEASE_LEASE = 0x14001c2,
  CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_64BIT = 0x14000be,
  CLUSCTL_RESOURCE_ADD_REGISTRY_CHECKPOINT_32BIT = 0x14000c2,
  CLUSCTL_RESOURCE_QUERY_MAINTENANCE_MODE = 0x10001e1,
  CLUSCTL_RESOURCE_SET_MAINTENANCE_MODE = 0x14001e6,
  CLUSCTL_RESOURCE_STORAGE_SET_DRIVELETTER = 0x14001ea,
  CLUSCTL_RESOURCE_STORAGE_GET_DISK_INFO_EX = 0x10001f1,
  CLUSCTL_RESOURCE_STORAGE_GET_MOUNTPOINTS = 0x1000211,
  CLUSCTL_RESOURCE_STORAGE_CLUSTER_DISK = 0x1c00212,
  CLUSCTL_RESOURCE_STORAGE_GET_DIRTY = 0x1000219,
  CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_INFO = 0x1000225,
  CLUSCTL_RESOURCE_SET_CSV_MAINTENANCE_MODE = 0x1400296,
  CLUSCTL_RESOURCE_ENABLE_SHARED_VOLUME_DIRECTIO = 0x140028a,
  CLUSCTL_RESOURCE_DISABLE_SHARED_VOLUME_DIRECTIO = 0x140028e,
  CLUSCTL_RESOURCE_SET_SHARED_VOLUME_BACKUP_MODE = 0x140029a,
  CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_PARTITION_NAMES = 0x100029d,
  CLUSCTL_RESOURCE_GET_FAILURE_INFO = 0x1000019,
  CLUSCTL_RESOURCE_STORAGE_GET_DISKID = 0x1000205,
  CLUSCTL_RESOURCE_STORAGE_GET_SHARED_VOLUME_STATES = 0x14002a2,
  CLUSCTL_RESOURCE_STORAGE_IS_SHARED_VOLUME = 0x10002a5,
  CLUSCTL_RESOURCE_DELETE = 0x1500006,
  CLUSCTL_RESOURCE_INSTALL_NODE = 0x150000a,
  CLUSCTL_RESOURCE_EVICT_NODE = 0x150000e,
  CLUSCTL_RESOURCE_ADD_DEPENDENCY = 0x1500012,
  CLUSCTL_RESOURCE_REMOVE_DEPENDENCY = 0x1500016,
  CLUSCTL_RESOURCE_ADD_OWNER = 0x150001a,
  CLUSCTL_RESOURCE_REMOVE_OWNER = 0x150001e,
  CLUSCTL_RESOURCE_SET_NAME = 0x1500026,
  CLUSCTL_RESOURCE_CLUSTER_NAME_CHANGED = 0x150002a,
  CLUSCTL_RESOURCE_CLUSTER_VERSION_CHANGED = 0x150002e,
  CLUSCTL_RESOURCE_FORCE_QUORUM = 0x1500046,
  CLUSCTL_RESOURCE_INITIALIZE = 0x150004a,
  CLUSCTL_RESOURCE_STATE_CHANGE_REASON = 0x150004e,
  CLUSCTL_RESOURCE_PROVIDER_STATE_CHANGE = 0x1500052,
  CLUSCTL_RESOURCE_LEAVING_GROUP = 0x1500056,
  CLUSCTL_RESOURCE_JOINING_GROUP = 0x150005a,
  CLUSCTL_RESOURCE_FSWITNESS_GET_EPOCH_INFO = 0x110005d,
  CLUSCTL_RESOURCE_FSWITNESS_SET_EPOCH_INFO = 0x1500062,
  CLUSCTL_RESOURCE_FSWITNESS_RELEASE_LOCK = 0x1500066,
  CLUSCTL_RESOURCE_NETNAME_CREDS_UPDATED = 0x1c0018a,
  CLUSCTL_RESOURCE_NETNAME_CREDS_NOTIFYCAM = 0x150006a,
  CLUSCTL_RESOURCE_NETNAME_SHARED_ONLINE = 0x1c0018e,
  CLUSCTL_RESOURCE_SET_SHARED_PR_KEY = 0x150007a,
  CLUSCTL_RESOURCE_STORAGE_GET_DISK_NUMBER = 0x110006d,
  CLUSCTL_RESOURCE_STORAGE_GET_CSV_DISK_INFO = 0x1100071,
  CLUSCTL_RESOURCE_DNN_GET_LEADER_STATUS = 0x1001f41,
  CLUSCTL_RESOURCE_DNN_SEND_LEADER_STATUS = 0x1c01f46,
  CLUSCTL_RESOURCE_DNN_UPDATE_SODAFS_CLONE_STATUS = 0x1401f4a,
  CLUSCTL_RESOURCE_FILESERVER_SHARE_ADD = 0x1400246,
  CLUSCTL_RESOURCE_FILESERVER_SHARE_DEL = 0x140024a,
  CLUSCTL_RESOURCE_FILESERVER_SHARE_MODIFY = 0x140024e,
  CLUSCTL_RESOURCE_FILESERVER_SHARE_REPORT = 0x1000251,
  CLUSCTL_RESOURCE_FILESERVER_LEADER_ONLINE_BCAST = 0x1801f4e,
  CLUSCTL_RESOURCE_FILESERVER_LEADER_ONLINE = 0x1001f52,
  CLUSCTL_RESOURCE_FILESERVER_LEADER_OFFLINE_BCAST = 0x1801f56,
  CLUSCTL_RESOURCE_FILESERVER_CLONE_READY = 0x1001f59,
  CLUSCTL_RESOURCE_FILESERVER_SHARE_REFRESH_BCAST = 0x1c01f5e,
  CLUSCTL_RESOURCE_FILESERVER_ENABLE_SCOPE = 0x1001f62,
  CLUSCTL_RESOURCE_CSV_SW_PROVIDER_EVENT = 0x1401f6a,
  CLUSCTL_RESOURCE_STORAGE_CSV_UPDATE_INFO = 0x1401f6e,
  CLUSCTL_RESOURCE_CSV_INITIATE_CHKDSK_SPOTFIX = 0x1401f72,
  CLUSCTL_RESOURCE_NETNAME_SEND_IP_INFO_FOR_MULTICHANNEL = 0x1c01f76,
  CLUSCTL_RESOURCE_STORAGE_POOL_CLUSTER_POOL = 0x1401f7a,
  CLUSCTL_RESOURCE_GET_POOL_INTERNAL_STATE = 0x1401f82,
  CLUSCTL_RESOURCE_NOTIFY_POOL = 0x1401f86,
  CLUSCTL_RESOURCE_REFRESH_POOL = 0x1001f91,
  CLUSCTL_RESOURCE_POOL_GET_PRKEY = 0x1001f9d,
  CLUSCTL_RESOURCE_RELEASE_PR = 0x1001fa1,
  CLUSCTL_RESOURCE_POOL_CLUSTER_SERVICE_STARTED = 0x1001fa5,
  CLUSCTL_RESOURCE_TAKE_DEFENSE = 0x1001fa9,
  CLUSCTL_RESOURCE_GET_RELATED_RESOURCE_NAMES = 0x1001fad,
  CLUSCTL_RESOURCE_RELEASE_POOL = 0x1001f95,
  CLUSCTL_RESOURCE_TASKSCHEDULER_CREATE = 0x1401fb6,
  CLUSCTL_RESOURCE_TASKSCHEDULER_CHANGE = 0x1401fba,
  CLUSCTL_RESOURCE_TASKSCHEDULER_DELETE = 0x1401fbe,
  CLUSCTL_RESOURCE_TASKSCHEDULER_GET = 0x1001fc1,
  CLUSCTL_RESOURCE_TASKSCHEDULER_CHECK_EXISTS = 0x1001fc5,
  CLUSCTL_RESOURCE_TASKSCHEDULER_CREATE_TS_V1 = 0x1401fca,
  CLUSCTL_RESOURCE_TASKSCHEDULER_CHANGE_TS_V1 = 0x1401fce,
  CLUSCTL_RESOURCE_TASKSCHEDULER_DELETE_TS_V1 = 0x1401fd2,
  CLUSCTL_RESOURCE_TASKSCHEDULER_GET_TS_V1 = 0x1001fd5,
  CLUSCTL_RESOURCE_GET_UTILIZATION_INFO = 0x1001fd9,
  CLUSCTL_RESOURCE_STORAGE_SET_CSV_DISK = 0x15020d2,
  CLUSCTL_RESOURCE_CSV_PERFORM_CHKDSK = 0x15020d6,
  CLUSCTL_RESOURCE_CSV_SET_ISALIVE_STATE = 0x15020da,
  CLUSCTL_RESOURCE_CSV_TRIGGER_FS_MOUNT = 0x11020dd,
  CLUSCTL_RESOURCE_STORAGE_POOL_POST_ONLINE = 0x15020e2,
  CLUSCTL_RESOURCE_STORAGE_POOL_PRE_OFFLINE = 0x15020e6,
  CLUSCTL_RESOURCE_GET_OPERATION_CONTEXT = 0x11020e9,
  CLUSCTL_RESOURCE_CLONE_STARTUP = 0x15020ee,
  CLUSCTL_RESOURCE_CLONE_SHUTDOWN = 0x15020f2,
  CLUSCTL_RESOURCE_RW_MODIFY_NOOP = 0x1401fee,
};

class SEList<SOS_Task,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class Spinlock<135,4,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1234, *PTAG_UNNAMED_1234;

typedef struct _SYSTEM_VERIFIER_TRIAGE_INFORMATION
{
  /* 0x0000 */ unsigned long ActionTaken;
  /* 0x0004 */ long Padding_362;
  /* 0x0008 */ unsigned __int64 CrashData[5];
  /* 0x0030 */ unsigned long VerifierMode;
  /* 0x0034 */ unsigned long VerifierFlags;
  /* 0x0038 */ wchar_t VerifierTargets[256];
} SYSTEM_VERIFIER_TRIAGE_INFORMATION, *PSYSTEM_VERIFIER_TRIAGE_INFORMATION; /* size: 0x0238 */

typedef enum
{
  previous_stateIdx = 0,
  current_stateIdx = 1,
  availability_group_idIdx = 2,
  availability_group_nameIdx = 3,
  availability_replica_idIdx = 4,
  availability_replica_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1235, *PTAG_UNNAMED_1235;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1236, *PTAG_UNNAMED_1236;

typedef enum
{
  intrinsic_nameIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1237, *PTAG_UNNAMED_1237;

typedef enum _DPFLTR_TYPE
{
  DPFLTR_SYSTEM_ID = 0,
  DPFLTR_SMSS_ID = 1,
  DPFLTR_SETUP_ID = 2,
  DPFLTR_NTFS_ID = 3,
  DPFLTR_FSTUB_ID = 4,
  DPFLTR_CRASHDUMP_ID = 5,
  DPFLTR_CDAUDIO_ID = 6,
  DPFLTR_CDROM_ID = 7,
  DPFLTR_CLASSPNP_ID = 8,
  DPFLTR_DISK_ID = 9,
  DPFLTR_REDBOOK_ID = 10,
  DPFLTR_STORPROP_ID = 11,
  DPFLTR_SCSIPORT_ID = 12,
  DPFLTR_SCSIMINIPORT_ID = 13,
  DPFLTR_CONFIG_ID = 14,
  DPFLTR_I8042PRT_ID = 15,
  DPFLTR_SERMOUSE_ID = 16,
  DPFLTR_LSERMOUS_ID = 17,
  DPFLTR_KBDHID_ID = 18,
  DPFLTR_MOUHID_ID = 19,
  DPFLTR_KBDCLASS_ID = 20,
  DPFLTR_MOUCLASS_ID = 21,
  DPFLTR_TWOTRACK_ID = 22,
  DPFLTR_WMILIB_ID = 23,
  DPFLTR_ACPI_ID = 24,
  DPFLTR_AMLI_ID = 25,
  DPFLTR_HALIA64_ID = 26,
  DPFLTR_VIDEO_ID = 27,
  DPFLTR_SVCHOST_ID = 28,
  DPFLTR_VIDEOPRT_ID = 29,
  DPFLTR_TCPIP_ID = 30,
  DPFLTR_DMSYNTH_ID = 31,
  DPFLTR_NTOSPNP_ID = 32,
  DPFLTR_FASTFAT_ID = 33,
  DPFLTR_SAMSS_ID = 34,
  DPFLTR_PNPMGR_ID = 35,
  DPFLTR_NETAPI_ID = 36,
  DPFLTR_SCSERVER_ID = 37,
  DPFLTR_SCCLIENT_ID = 38,
  DPFLTR_SERIAL_ID = 39,
  DPFLTR_SERENUM_ID = 40,
  DPFLTR_UHCD_ID = 41,
  DPFLTR_RPCPROXY_ID = 42,
  DPFLTR_AUTOCHK_ID = 43,
  DPFLTR_DCOMSS_ID = 44,
  DPFLTR_UNIMODEM_ID = 45,
  DPFLTR_SIS_ID = 46,
  DPFLTR_FLTMGR_ID = 47,
  DPFLTR_WMICORE_ID = 48,
  DPFLTR_BURNENG_ID = 49,
  DPFLTR_IMAPI_ID = 50,
  DPFLTR_SXS_ID = 51,
  DPFLTR_FUSION_ID = 52,
  DPFLTR_IDLETASK_ID = 53,
  DPFLTR_SOFTPCI_ID = 54,
  DPFLTR_TAPE_ID = 55,
  DPFLTR_MCHGR_ID = 56,
  DPFLTR_IDEP_ID = 57,
  DPFLTR_PCIIDE_ID = 58,
  DPFLTR_FLOPPY_ID = 59,
  DPFLTR_FDC_ID = 60,
  DPFLTR_TERMSRV_ID = 61,
  DPFLTR_W32TIME_ID = 62,
  DPFLTR_PREFETCHER_ID = 63,
  DPFLTR_RSFILTER_ID = 64,
  DPFLTR_FCPORT_ID = 65,
  DPFLTR_PCI_ID = 66,
  DPFLTR_DMIO_ID = 67,
  DPFLTR_DMCONFIG_ID = 68,
  DPFLTR_DMADMIN_ID = 69,
  DPFLTR_WSOCKTRANSPORT_ID = 70,
  DPFLTR_VSS_ID = 71,
  DPFLTR_PNPMEM_ID = 72,
  DPFLTR_PROCESSOR_ID = 73,
  DPFLTR_DMSERVER_ID = 74,
  DPFLTR_SR_ID = 75,
  DPFLTR_INFINIBAND_ID = 76,
  DPFLTR_IHVDRIVER_ID = 77,
  DPFLTR_IHVVIDEO_ID = 78,
  DPFLTR_IHVAUDIO_ID = 79,
  DPFLTR_IHVNETWORK_ID = 80,
  DPFLTR_IHVSTREAMING_ID = 81,
  DPFLTR_IHVBUS_ID = 82,
  DPFLTR_HPS_ID = 83,
  DPFLTR_RTLTHREADPOOL_ID = 84,
  DPFLTR_LDR_ID = 85,
  DPFLTR_TCPIP6_ID = 86,
  DPFLTR_ISAPNP_ID = 87,
  DPFLTR_SHPC_ID = 88,
  DPFLTR_STORPORT_ID = 89,
  DPFLTR_STORMINIPORT_ID = 90,
  DPFLTR_PRINTSPOOLER_ID = 91,
  DPFLTR_VSSDYNDISK_ID = 92,
  DPFLTR_VERIFIER_ID = 93,
  DPFLTR_VDS_ID = 94,
  DPFLTR_VDSBAS_ID = 95,
  DPFLTR_VDSDYN_ID = 96,
  DPFLTR_VDSDYNDR_ID = 97,
  DPFLTR_VDSLDR_ID = 98,
  DPFLTR_VDSUTIL_ID = 99,
  DPFLTR_DFRGIFC_ID = 100,
  DPFLTR_DEFAULT_ID = 101,
  DPFLTR_MM_ID = 102,
  DPFLTR_DFSC_ID = 103,
  DPFLTR_WOW64_ID = 104,
  DPFLTR_ALPC_ID = 105,
  DPFLTR_WDI_ID = 106,
  DPFLTR_PERFLIB_ID = 107,
  DPFLTR_KTM_ID = 108,
  DPFLTR_IOSTRESS_ID = 109,
  DPFLTR_HEAP_ID = 110,
  DPFLTR_WHEA_ID = 111,
  DPFLTR_USERGDI_ID = 112,
  DPFLTR_MMCSS_ID = 113,
  DPFLTR_TPM_ID = 114,
  DPFLTR_THREADORDER_ID = 115,
  DPFLTR_ENVIRON_ID = 116,
  DPFLTR_EMS_ID = 117,
  DPFLTR_WDT_ID = 118,
  DPFLTR_FVEVOL_ID = 119,
  DPFLTR_NDIS_ID = 120,
  DPFLTR_NVCTRACE_ID = 121,
  DPFLTR_LUAFV_ID = 122,
  DPFLTR_APPCOMPAT_ID = 123,
  DPFLTR_USBSTOR_ID = 124,
  DPFLTR_SBP2PORT_ID = 125,
  DPFLTR_COVERAGE_ID = 126,
  DPFLTR_CACHEMGR_ID = 127,
  DPFLTR_MOUNTMGR_ID = 128,
  DPFLTR_CFR_ID = 129,
  DPFLTR_TXF_ID = 130,
  DPFLTR_KSECDD_ID = 131,
  DPFLTR_FLTREGRESS_ID = 132,
  DPFLTR_MPIO_ID = 133,
  DPFLTR_MSDSM_ID = 134,
  DPFLTR_UDFS_ID = 135,
  DPFLTR_PSHED_ID = 136,
  DPFLTR_STORVSP_ID = 137,
  DPFLTR_LSASS_ID = 138,
  DPFLTR_SSPICLI_ID = 139,
  DPFLTR_CNG_ID = 140,
  DPFLTR_EXFAT_ID = 141,
  DPFLTR_FILETRACE_ID = 142,
  DPFLTR_XSAVE_ID = 143,
  DPFLTR_SE_ID = 144,
  DPFLTR_DRIVEEXTENDER_ID = 145,
  DPFLTR_POWER_ID = 146,
  DPFLTR_CRASHDUMPXHCI_ID = 147,
  DPFLTR_GPIO_ID = 148,
  DPFLTR_ENDOFTABLE_ID = 149,
} DPFLTR_TYPE, *PDPFLTR_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1238, *PTAG_UNNAMED_1238;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_1239, *PTAG_UNNAMED_1239;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1240, *PTAG_UNNAMED_1240;

typedef enum _SYSTEM_VA_TYPE
{
  SystemVaTypeAll = 0,
  SystemVaTypeNonPagedPool = 1,
  SystemVaTypePagedPool = 2,
  SystemVaTypeSystemCache = 3,
  SystemVaTypeSystemPtes = 4,
  SystemVaTypeSessionSpace = 5,
  SystemVaTypeMax = 6,
} SYSTEM_VA_TYPE, *PSYSTEM_VA_TYPE;

enum DkParameter::ExecutionResult
{
  MarkedAsInvalid = 0,
  NeedsSecondPass = 1,
  ItIsFine = 2,
};

enum CSerializeContext<RPCStream>::DESERIALIZE_MODES
{
  NEWMEMORY = 0,
  PREALLOCATED = 1,
  IGNOREDUP = 2,
};

typedef enum
{
  build_rowsIdx = 0,
  probe_rowsIdx = 1,
  replicated_bitmapsIdx = 2,
  preferred_memoryIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1241, *PTAG_UNNAMED_1241;

enum DefBaseAllocator::Component
{
  SEHASH = 0,
  SORTEDLIST = 1,
};

enum XeSqlPkg::existing_connection::CustomizableSlots
{
  collect_options_textSlot = 0,
  collect_database_nameSlot = 1,
};

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

enum WFMERROR
{
  NO_APPEND = 1,
  NO_BUFSPACE = 2,
  NO_MEMORY = 3,
  NO_MODE_TRANSITION = 4,
  ROWTOOBIG = 5,
  NO_TEMPDB = 6,
  NO_EXTALLOC = 7,
  NO_SCAN = 8,
  WFEOF = 9,
  NO_READ = 10,
  TOO_MANY_SCANS = 11,
  NO_WORKFILE = 12,
  NEW_BUFFER = 13,
  BUFFERS_IN_USE = 14,
  SCAN_INCOMPLETE = 15,
  NO_EXTTRANSFER = 16,
};

typedef enum
{
  cpu_timeIdx = 0,
  logical_readsIdx = 1,
  logical_writesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1242, *PTAG_UNNAMED_1242;

enum DBBINDSTATUSENUM
{
  DBBINDSTATUS_OK = 0,
  DBBINDSTATUS_BADORDINAL = 1,
  DBBINDSTATUS_UNSUPPORTEDCONVERSION = 2,
  DBBINDSTATUS_BADBINDINFO = 3,
  DBBINDSTATUS_BADSTORAGEFLAGS = 4,
  DBBINDSTATUS_NOINTERFACE = 5,
  DBBINDSTATUS_MULTIPLESTORAGE = 6,
};

enum indicator_types
{
  INDICATOR_TYPE_MEMORY = 0,
};

enum XListReturnedElementSemantics
{
  XLR_NoRef = 0,
  XLR_WithRef = 1,
};

typedef struct _RTL_SRWLOCK
{
  /* 0x0000 */ void* Ptr;
} RTL_SRWLOCK, *PRTL_SRWLOCK; /* size: 0x0008 */

typedef struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CycleTime;
} SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION; /* size: 0x0008 */

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1243, *PTAG_UNNAMED_1243;

typedef enum
{
  rowset_idIdx = 0,
  allocation_unit_idIdx = 1,
  database_idIdx = 2,
  filegroup_idIdx = 3,
  run_idIdx = 4,
  run_length_in_pagesIdx = 5,
  run_first_page_file_idIdx = 6,
  run_first_page_page_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1244, *PTAG_UNNAMED_1244;

typedef struct _GROUP_AFFINITY
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned short Group;
  /* 0x000a */ unsigned short Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY; /* size: 0x0010 */

class GroupAffinity
{
  /* 0x0000 */ struct _GROUP_AFFINITY m_GroupAffinity;
}; /* size: 0x0010 */

class SOS_MemoryNodeInfo
{
  /* 0x0000 */ unsigned short m_Id;
  /* 0x0002 */ char Padding_363[6];
  /* 0x0008 */ class GroupAffinity m_Affinity;
  /* 0x0018 */ unsigned long m_CPUCount;
}; /* size: 0x0020 */

enum SOS_DBGCLERK_DEBUGTYPE
{
  SOS_DBGCLERK_TRACE = 1,
  SOS_DBGCLERK_RACES = 2,
  SOS_DBGCLERK_FAILPOINT = 4,
  SOS_DBGCLERK_PRE = 8,
  SOS_DBGCLERK_POST = 16,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1245, *PTAG_UNNAMED_1245;

struct XStringBuilder::Marker
{
  /* 0x0000 */ unsigned int m_mark;
  /* 0x0004 */ unsigned int m_remaining;
}; /* size: 0x0008 */

enum SOS_DBG_BUFFSIZE
{
  SOS_DBG_TEMPBUFF = 128,
  SOS_DBG_CLERK_BUFFSIZE = 8192,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1246, *PTAG_UNNAMED_1246;

enum PO_FIXED_WAKE_SOURCE_TYPE
{
  FixedWakeSourcePowerButton = 0,
  FixedWakeSourceSleepButton = 1,
  FixedWakeSourceRtc = 2,
  FixedWakeSourceDozeToHibernate = 3,
};

class AutoSpinlockHolder<308,1,1>;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1247, *PTAG_UNNAMED_1247;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1248, *PTAG_UNNAMED_1248;

typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION
{
  /* 0x0000 */ unsigned long ulFlags;
  /* 0x0004 */ unsigned long ulFilenameLength;
  /* 0x0008 */ unsigned long ulPathLength;
  /* 0x000c */ long Padding_364;
  /* 0x0010 */ const wchar_t* lpFileName;
  /* 0x0018 */ const wchar_t* lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION; /* size: 0x0020 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  resultIdx = 3,
  unique_idIdx = 4,
  dialog_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1249, *PTAG_UNNAMED_1249;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1250, *PTAG_UNNAMED_1250;

typedef enum
{
  availability_group_idIdx = 0,
  local_availability_replica_idIdx = 1,
  target_availability_replica_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1251, *PTAG_UNNAMED_1251;

typedef enum
{
  dbIdIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1252, *PTAG_UNNAMED_1252;

struct tagWNDCLASSA
{
  /* 0x0000 */ unsigned int style;
  /* 0x0004 */ long Padding_365;
  /* 0x0008 */ void* lpfnWndProc /* function */;
  /* 0x0010 */ int cbClsExtra;
  /* 0x0014 */ int cbWndExtra;
  /* 0x0018 */ struct HINSTANCE__* hInstance;
  /* 0x0020 */ struct HICON__* hIcon;
  /* 0x0028 */ struct HICON__* hCursor;
  /* 0x0030 */ struct HBRUSH__* hbrBackground;
  /* 0x0038 */ const char* lpszMenuName;
  /* 0x0040 */ const char* lpszClassName;
}; /* size: 0x0048 */

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1253, *PTAG_UNNAMED_1253;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_1254, *PTAG_UNNAMED_1254;

struct IEnumOleUndoUnits
{
}; /* size: 0x0008 */

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1255, *PTAG_UNNAMED_1255;

typedef enum
{
  table_nameIdx = 0,
  index_nameIdx = 1,
  schema_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1256, *PTAG_UNNAMED_1256;

enum CallStackHashTable::CSHTPersistStates
{
  DontPersist = 0,
  Persist = 1,
};

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1257, *PTAG_UNNAMED_1257;

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  lock_resultIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1258, *PTAG_UNNAMED_1258;

typedef struct __vc_attributes::displaybindAttribute
{
} _vc_attributes::displaybindAttribute, *P_vc_attributes::displaybindAttribute; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 29,
} TAG_UNNAMED_1259, *PTAG_UNNAMED_1259;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1260, *PTAG_UNNAMED_1260;

class Spinlock<199,3,1>
{
}; /* size: 0x0004 */

enum DLAttr
{
  dlattrRva = 1,
};

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  fragment_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1261, *PTAG_UNNAMED_1261;

typedef enum _BOOT_ENTROPY_SOURCE_ID
{
  BootEntropySourceNone = 0,
  BootEntropySourceSeedfile = 1,
  BootEntropySourceExternal = 2,
  BootEntropySourceTpm = 3,
  BootEntropySourceRdrand = 4,
  BootEntropySourceTime = 5,
  BootEntropySourceAcpiOem0 = 6,
  BootEntropySourceUefi = 7,
  BootMaxEntropySources = 7,
} BOOT_ENTROPY_SOURCE_ID, *PBOOT_ENTROPY_SOURCE_ID;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1262, *PTAG_UNNAMED_1262;

class CHdrFileInfo
{
  union
  {
    /* 0x0000 */ const class CHdrFileInfo* xsm_rgpHdrFileInfo[302];
    struct
    {
      /* 0x0000 */ const void** const xm_staticPtrs;
      /* 0x0008 */ const unsigned __int64 xm_staticPtrCount;
    }; /* size: 0x0010 */
  }; /* size: 0x0970 */
}; /* size: 0x0010 */

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1263, *PTAG_UNNAMED_1263;

typedef struct _PROCESS_ACCESS_TOKEN
{
  /* 0x0000 */ void* Token;
  /* 0x0008 */ void* Thread;
} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN; /* size: 0x0010 */

typedef enum
{
  notification_keyIdx = 0,
  availability_group_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1264, *PTAG_UNNAMED_1264;

typedef enum
{
  bad_page_countIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1265, *PTAG_UNNAMED_1265;

typedef struct __vc_attributes::defaultAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::defaultAttribute, *P_vc_attributes::defaultAttribute; /* size: 0x0008 */

struct BitOrdinal<16384>
{
}; /* size: 0x0001 */

enum SPINLOCK_REPORT_OPTIONS
{
  SPLR_REPORT_UNUSED = 0,
  SPLR_REPORT_CLOUDDB = 1,
  SPLR_REPORT_ALWAYS = 2,
};

enum ControlledResources
{
  Worker_Limit = 1,
  Session_Limit = 2,
};

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1266, *PTAG_UNNAMED_1266;

enum XeSosPkg::TaskAbortState
{
  TAS_RUNNING = 0,
  TAS_PENDING = 1,
  TAS_DONE = 2,
};

struct _TP_ALPC;

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1267, *PTAG_UNNAMED_1267;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1268, *PTAG_UNNAMED_1268;

struct CONFIRMSAFETY
{
  /* 0x0000 */ struct _GUID clsid;
  /* 0x0010 */ struct IUnknown* pUnk;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef enum
{
  query_operator_node_idIdx = 0,
  spilling_levelIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1269, *PTAG_UNNAMED_1269;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1270, *PTAG_UNNAMED_1270;

typedef enum
{
  ArgCount = 1,
} TAG_UNNAMED_1271, *PTAG_UNNAMED_1271;

class XE_FileSet
{
  /* 0x0000 */ unsigned int m_Count;
  /* 0x0004 */ long Padding_366;
  /* 0x0008 */ class XE_AutoRg<XE_FileSet::Entry> m_entries;
  /* 0x0010 */ unsigned int m_capacity;
}; /* size: 0x0018 */

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_unique_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1272, *PTAG_UNNAMED_1272;

struct ILockBytes
{
}; /* size: 0x0008 */

typedef enum
{
  acquisition_stateIdx = 0,
  id_or_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1273, *PTAG_UNNAMED_1273;

struct tagMENUITEMINFOW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int fMask;
  /* 0x0008 */ unsigned int fType;
  /* 0x000c */ unsigned int fState;
  /* 0x0010 */ unsigned int wID;
  /* 0x0014 */ long Padding_367;
  /* 0x0018 */ struct HMENU__* hSubMenu;
  /* 0x0020 */ struct HBITMAP__* hbmpChecked;
  /* 0x0028 */ struct HBITMAP__* hbmpUnchecked;
  /* 0x0030 */ unsigned __int64 dwItemData;
  /* 0x0038 */ wchar_t* dwTypeData;
  /* 0x0040 */ unsigned int cch;
  /* 0x0044 */ long Padding_368;
  /* 0x0048 */ struct HBITMAP__* hbmpItem;
}; /* size: 0x0050 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1274, *PTAG_UNNAMED_1274;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1275, *PTAG_UNNAMED_1275;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1276, *PTAG_UNNAMED_1276;

enum ResQueueBase::SignalMode
{
  SignalIfEmptyQueue = 0,
  NoSignal = 1,
  AlwaysSignal = 2,
};

typedef enum
{
  database_idIdx = 0,
  data_space_idIdx = 1,
  filegroup_typeIdx = 2,
  guidIdx = 3,
  filegroup_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1277, *PTAG_UNNAMED_1277;

struct tagAspectInfo
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long dwFlags;
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1278, *PTAG_UNNAMED_1278;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 48,
} TAG_UNNAMED_1279, *PTAG_UNNAMED_1279;

struct IWbemHiPerfEnum
{
}; /* size: 0x0008 */

typedef struct _COMMPROP
{
  /* 0x0000 */ unsigned short wPacketLength;
  /* 0x0002 */ unsigned short wPacketVersion;
  /* 0x0004 */ unsigned long dwServiceMask;
  /* 0x0008 */ unsigned long dwReserved1;
  /* 0x000c */ unsigned long dwMaxTxQueue;
  /* 0x0010 */ unsigned long dwMaxRxQueue;
  /* 0x0014 */ unsigned long dwMaxBaud;
  /* 0x0018 */ unsigned long dwProvSubType;
  /* 0x001c */ unsigned long dwProvCapabilities;
  /* 0x0020 */ unsigned long dwSettableParams;
  /* 0x0024 */ unsigned long dwSettableBaud;
  /* 0x0028 */ unsigned short wSettableData;
  /* 0x002a */ unsigned short wSettableStopParity;
  /* 0x002c */ unsigned long dwCurrentTxQueue;
  /* 0x0030 */ unsigned long dwCurrentRxQueue;
  /* 0x0034 */ unsigned long dwProvSpec1;
  /* 0x0038 */ unsigned long dwProvSpec2;
  /* 0x003c */ wchar_t wcProvChar[1];
  /* 0x003e */ char __PADDING__[2];
} COMMPROP, *PCOMMPROP; /* size: 0x0040 */

class ISOSHost_RecursiveMutexImpl
{
}; /* size: 0x00f0 */

typedef enum
{
  Value = 4,
} TAG_UNNAMED_1280, *PTAG_UNNAMED_1280;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
  /* 0x0000 */ unsigned long SecurityLimitFlags;
  /* 0x0004 */ long Padding_369;
  /* 0x0008 */ void* JobToken;
  /* 0x0010 */ struct _TOKEN_GROUPS* SidsToDisable;
  /* 0x0018 */ struct _TOKEN_PRIVILEGES* PrivilegesToDelete;
  /* 0x0020 */ struct _TOKEN_GROUPS* RestrictedSids;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION; /* size: 0x0028 */

typedef enum
{
  Result = 0xf4240,
} TAG_UNNAMED_1281, *PTAG_UNNAMED_1281;

typedef struct _RTL_BITMAP
{
  /* 0x0000 */ unsigned long SizeOfBitMap;
  /* 0x0004 */ long Padding_370;
  /* 0x0008 */ unsigned long* Buffer;
} RTL_BITMAP, *PRTL_BITMAP; /* size: 0x0010 */

typedef enum
{
  major_idIdx = 0,
  statement_line_numberIdx = 1,
  statement_offset_beginIdx = 2,
  database_nameIdx = 3,
  statement_typeIdx = 4,
  statement_infoIdx = 5,
  feature_nameIdx = 6,
  feature_type_nameIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1282, *PTAG_UNNAMED_1282;

typedef enum
{
  ArgCount = 2,
} TAG_UNNAMED_1283, *PTAG_UNNAMED_1283;

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  allocation_unit_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1284, *PTAG_UNNAMED_1284;

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1285, *PTAG_UNNAMED_1285;

typedef enum
{
  error_numberIdx = 0,
  open_modeIdx = 1,
  file_pathIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1286, *PTAG_UNNAMED_1286;

typedef enum
{
  BucketSetCount = 4,
} TAG_UNNAMED_1287, *PTAG_UNNAMED_1287;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1288, *PTAG_UNNAMED_1288;

class Spinlock<189,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1289, *PTAG_UNNAMED_1289;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1290, *PTAG_UNNAMED_1290;

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  lock_resultIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1291, *PTAG_UNNAMED_1291;

struct IAddrExclusionControl
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1292, *PTAG_UNNAMED_1292;

typedef enum
{
  Value = 3,
} TAG_UNNAMED_1293, *PTAG_UNNAMED_1293;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  transaction_local_state_descriptor_countIdx = 3,
  encoded_dataIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1294, *PTAG_UNNAMED_1294;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 9,
  VldEddOffset = 4,
  BufSize = 102,
} TAG_UNNAMED_1295, *PTAG_UNNAMED_1295;

class AutoSpinlockHolder<287,1,1>;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1296, *PTAG_UNNAMED_1296;

typedef enum
{
  ArgCount = 2,
} TAG_UNNAMED_1297, *PTAG_UNNAMED_1297;

class XeSqlPkg::glm_release_table_lock_exception
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_371[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int lock_modeOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int lock_policyOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class Spinlock<217,2,1>
{
}; /* size: 0x0004 */

typedef struct _STAT_WORKSTATION_0
{
  /* 0x0000 */ union _LARGE_INTEGER StatisticsStartTime;
  /* 0x0008 */ union _LARGE_INTEGER BytesReceived;
  /* 0x0010 */ union _LARGE_INTEGER SmbsReceived;
  /* 0x0018 */ union _LARGE_INTEGER PagingReadBytesRequested;
  /* 0x0020 */ union _LARGE_INTEGER NonPagingReadBytesRequested;
  /* 0x0028 */ union _LARGE_INTEGER CacheReadBytesRequested;
  /* 0x0030 */ union _LARGE_INTEGER NetworkReadBytesRequested;
  /* 0x0038 */ union _LARGE_INTEGER BytesTransmitted;
  /* 0x0040 */ union _LARGE_INTEGER SmbsTransmitted;
  /* 0x0048 */ union _LARGE_INTEGER PagingWriteBytesRequested;
  /* 0x0050 */ union _LARGE_INTEGER NonPagingWriteBytesRequested;
  /* 0x0058 */ union _LARGE_INTEGER CacheWriteBytesRequested;
  /* 0x0060 */ union _LARGE_INTEGER NetworkWriteBytesRequested;
  /* 0x0068 */ unsigned long InitiallyFailedOperations;
  /* 0x006c */ unsigned long FailedCompletionOperations;
  /* 0x0070 */ unsigned long ReadOperations;
  /* 0x0074 */ unsigned long RandomReadOperations;
  /* 0x0078 */ unsigned long ReadSmbs;
  /* 0x007c */ unsigned long LargeReadSmbs;
  /* 0x0080 */ unsigned long SmallReadSmbs;
  /* 0x0084 */ unsigned long WriteOperations;
  /* 0x0088 */ unsigned long RandomWriteOperations;
  /* 0x008c */ unsigned long WriteSmbs;
  /* 0x0090 */ unsigned long LargeWriteSmbs;
  /* 0x0094 */ unsigned long SmallWriteSmbs;
  /* 0x0098 */ unsigned long RawReadsDenied;
  /* 0x009c */ unsigned long RawWritesDenied;
  /* 0x00a0 */ unsigned long NetworkErrors;
  /* 0x00a4 */ unsigned long Sessions;
  /* 0x00a8 */ unsigned long FailedSessions;
  /* 0x00ac */ unsigned long Reconnects;
  /* 0x00b0 */ unsigned long CoreConnects;
  /* 0x00b4 */ unsigned long Lanman20Connects;
  /* 0x00b8 */ unsigned long Lanman21Connects;
  /* 0x00bc */ unsigned long LanmanNtConnects;
  /* 0x00c0 */ unsigned long ServerDisconnects;
  /* 0x00c4 */ unsigned long HungSessions;
  /* 0x00c8 */ unsigned long UseCount;
  /* 0x00cc */ unsigned long FailedUseCount;
  /* 0x00d0 */ unsigned long CurrentCommands;
  /* 0x00d4 */ long __PADDING__[1];
} STAT_WORKSTATION_0, *PSTAT_WORKSTATION_0; /* size: 0x00d8 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 36,
} TAG_UNNAMED_1298, *PTAG_UNNAMED_1298;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1299, *PTAG_UNNAMED_1299;

enum XeSqlPkg::progress_report_online_index_operation::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef enum
{
  Value = 2,
} TAG_UNNAMED_1300, *PTAG_UNNAMED_1300;

struct provider_info
{
  /* 0x0000 */ void* pi_R0_1val /* function */;
  /* 0x0008 */ void* pi_R0_allvals /* function */;
  /* 0x0010 */ void* pi_R3_1val /* function */;
  /* 0x0018 */ void* pi_R3_allvals /* function */;
  /* 0x0020 */ unsigned long pi_flags;
  /* 0x0024 */ long Padding_372;
  /* 0x0028 */ void* pi_key_context;
}; /* size: 0x0030 */

typedef enum
{
  ArgCount = 3,
} TAG_UNNAMED_1301, *PTAG_UNNAMED_1301;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 3,
  VldEddOffset = 3,
  BufSize = 48,
} TAG_UNNAMED_1302, *PTAG_UNNAMED_1302;

struct tagBITMAP
{
  /* 0x0000 */ long bmType;
  /* 0x0004 */ long bmWidth;
  /* 0x0008 */ long bmHeight;
  /* 0x000c */ long bmWidthBytes;
  /* 0x0010 */ unsigned short bmPlanes;
  /* 0x0012 */ unsigned short bmBitsPixel;
  /* 0x0014 */ long Padding_373;
  /* 0x0018 */ void* bmBits;
}; /* size: 0x0020 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1303, *PTAG_UNNAMED_1303;

typedef enum
{
  object_idIdx = 0,
  database_idIdx = 1,
  cache_typeIdx = 2,
  keyIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1304, *PTAG_UNNAMED_1304;

typedef enum
{
  Result = 0x186a0,
} TAG_UNNAMED_1305, *PTAG_UNNAMED_1305;

class AutoSpinlockHolder<17,19,1>;

typedef enum
{
  is_stack_unwindIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1306, *PTAG_UNNAMED_1306;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  opcodeIdx = 2,
  node_idIdx = 3,
  workerIdx = 4,
  yieldsIdx = 5,
  worker_utilizationIdx = 6,
  process_utilizationIdx = 7,
  system_idleIdx = 8,
  user_mode_timeIdx = 9,
  kernel_mode_timeIdx = 10,
  page_faultsIdx = 11,
  working_set_deltaIdx = 12,
  memory_utilizationIdx = 13,
  call_stackIdx = 14,
  LastField = 15,
} TAG_UNNAMED_1307, *PTAG_UNNAMED_1307;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 0,
  VldEddOffset = 11,
  BufSize = 89,
} TAG_UNNAMED_1308, *PTAG_UNNAMED_1308;

typedef enum
{
  database_idIdx = 0,
  new_versionIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1309, *PTAG_UNNAMED_1309;

class Spinlock<262,1,1>
{
}; /* size: 0x0004 */

enum XeSosPkg::scheduler_monitor_deadlock_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

struct CLUSPROP_PARTITION_INFO
{
}; /* size: 0x0468 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 20,
  NVld = 6,
  VldEddOffset = 13,
  BufSize = 148,
} TAG_UNNAMED_1310, *PTAG_UNNAMED_1310;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1311, *PTAG_UNNAMED_1311;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1312, *PTAG_UNNAMED_1312;

class SEList<SystemThread,144>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct IHttpNegotiate2
{
}; /* size: 0x0008 */

typedef enum
{
  addressIdx = 0,
  sizeIdx = 1,
  pmo_addressIdx = 2,
  pmo_typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1313, *PTAG_UNNAMED_1313;

typedef enum
{
  opcodeIdx = 0,
  task_addressIdx = 1,
  passesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1314, *PTAG_UNNAMED_1314;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1315, *PTAG_UNNAMED_1315;

typedef enum
{
  cache_addressIdx = 0,
  descriptor_addressIdx = 1,
  user_data_addressIdx = 2,
  start_stateIdx = 3,
  end_stateIdx = 4,
  size_in_pagesIdx = 5,
  time_to_generateIdx = 6,
  use_countIdx = 7,
  average_intervalIdx = 8,
  probability_of_reuseIdx = 9,
  valueIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1316, *PTAG_UNNAMED_1316;

typedef enum
{
  database_idIdx = 0,
  option_typeIdx = 1,
  previous_valueIdx = 2,
  new_valueIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1317, *PTAG_UNNAMED_1317;

enum MetadataRecordType
{
  MASTER_METADATA_RECORD = 0xbc614d,
  TABLE_FLUSH_RECORD = 0xbc614f,
  SUMMARY_RECORD = 0xbc6150,
  TIMELINE_ANCOR = 0xbc6151,
  FLUSH_RECORD = 0xbc6152,
  END_OF_STREAM_PAD = 0xbc6153,
  END_OF_FILE_RECORD = 0xbc6154,
};

typedef enum
{
  sizeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1318, *PTAG_UNNAMED_1318;

typedef enum
{
  spinlock_addressIdx = 0,
  workerIdx = 1,
  backoffsIdx = 2,
  durationIdx = 3,
  typeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1319, *PTAG_UNNAMED_1319;

typedef enum
{
  task_addressIdx = 0,
  worker_addressIdx = 1,
  scheduler_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1320, *PTAG_UNNAMED_1320;

class Spinlock<114,9,1>
{
}; /* size: 0x0004 */

class XE_BufferMap
{
  /* 0x0000 */ unsigned int m_Count;
  /* 0x0004 */ long Padding_374;
  /* 0x0008 */ class XE_AutoRg<unsigned __int64> m_buffers;
  /* 0x0010 */ unsigned int m_capacity;
  /* 0x0014 */ enum XE_BufferMap::SortOptions m_sortOption;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1321, *PTAG_UNNAMED_1321;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 29,
} TAG_UNNAMED_1322, *PTAG_UNNAMED_1322;

struct IEnumMoniker
{
}; /* size: 0x0008 */

typedef enum
{
  idIdx = 0,
  node_idIdx = 1,
  worker_typeIdx = 2,
  priorityIdx = 3,
  affinity_maskIdx = 4,
  ideal_worker_limitIdx = 5,
  is_hiddenIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1323, *PTAG_UNNAMED_1323;

typedef enum
{
  federated_xact_idIdx = 0,
  federated_xact_node_idIdx = 1,
  federated_xact_node_local_idIdx = 2,
  end_ageIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1324, *PTAG_UNNAMED_1324;

typedef enum
{
  timestampIdx = 0,
  start_timeIdx = 1,
  end_timeIdx = 2,
  file_handleIdx = 3,
  user_data_pointerIdx = 4,
  worker_addressIdx = 5,
  scheduler_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1325, *PTAG_UNNAMED_1325;

struct tagENUMUILANG
{
  /* 0x0000 */ unsigned long NumOfEnumUILang;
  /* 0x0004 */ unsigned long SizeOfEnumUIBuffer;
  /* 0x0008 */ unsigned short* pEnumUIBuffer;
}; /* size: 0x0010 */

typedef struct _SERVER_INFO_1572
{
  /* 0x0000 */ unsigned long sv1572_criticalthreads;
} SERVER_INFO_1572, *PSERVER_INFO_1572; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 52,
} TAG_UNNAMED_1326, *PTAG_UNNAMED_1326;

class XeSqlPkg::query_store_failed_to_capture_query
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_375[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int partial_textOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1327, *PTAG_UNNAMED_1327;

class CMemCopy
{
  /* 0x0000 */ unsigned char* m_pBuffer;
  /* 0x0008 */ unsigned char* m_pDest;
  /* 0x0010 */ unsigned __int64 m_cbCopied;
}; /* size: 0x0018 */

struct XEActivityId
{
  /* 0x0000 */ struct _GUID m_id;
  /* 0x0010 */ unsigned int m_sequence;
}; /* size: 0x0014 */

struct XE_ETWMof0
{
  /* 0x0000 */ unsigned int m_fragmentId;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int m_offset : 31; /* bit position: 0 */
    /* 0x0004 */ unsigned int m_lastFrag : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0008 */ struct XEActivityId m_activeId;
}; /* size: 0x001c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1328, *PTAG_UNNAMED_1328;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1329, *PTAG_UNNAMED_1329;

struct ISpecifyPropertyPages
{
}; /* size: 0x0008 */

enum ITaskProxy::_TaskProxyStates
{
  TASK_INVALID_STATE = 0,
  TASK_ABORTED_BY_DTC = 1,
  TASK_ABORTED_BY_FSA = 2,
  TASK_ABORTED_BY_TCM = 4,
};

typedef enum
{
  spinlock_addressIdx = 0,
  workerIdx = 1,
  backoffsIdx = 2,
  typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1330, *PTAG_UNNAMED_1330;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1331, *PTAG_UNNAMED_1331;

class AutoSpinlockHolder<253,1,1>
{
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_1332, *PTAG_UNNAMED_1332;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 96,
} TAG_UNNAMED_1333, *PTAG_UNNAMED_1333;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 28,
} TAG_UNNAMED_1334, *PTAG_UNNAMED_1334;

typedef union _PSAPI_WORKING_SET_EX_BLOCK
{
  union
  {
    /* 0x0000 */ unsigned __int64 Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ShareCount : 3; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Win32Protection : 11; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 Node : 6; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Bad : 1; /* bit position: 31 */
      /* 0x0000 */ unsigned __int64 ReservedUlong : 32; /* bit position: 32 */
    }; /* bitfield */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Reserved0 : 14; /* bit position: 1 */
        /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 15 */
        /* 0x0000 */ unsigned __int64 Reserved1 : 15; /* bit position: 16 */
        /* 0x0000 */ unsigned __int64 Bad : 1; /* bit position: 31 */
        /* 0x0000 */ unsigned __int64 ReservedUlong : 32; /* bit position: 32 */
      }; /* bitfield */
    } /* size: 0x0008 */ Invalid;
  }; /* size: 0x0008 */
} PSAPI_WORKING_SET_EX_BLOCK, *PPSAPI_WORKING_SET_EX_BLOCK; /* size: 0x0008 */

typedef enum
{
  exit_codeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1335, *PTAG_UNNAMED_1335;

typedef struct _HARDWARE_COUNTER_DATA
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned __int64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA; /* size: 0x0010 */

class CAutoRefc<IXMLDOMDocumentFragment>
{
  /* 0x0000 */ struct IXMLDOMDocumentFragment* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1336, *PTAG_UNNAMED_1336;

typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
  /* 0x0000 */ void* hActCtx;
  /* 0x0008 */ unsigned long dwFlags;
  /* 0x000c */ long __PADDING__[1];
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 50,
} TAG_UNNAMED_1337, *PTAG_UNNAMED_1337;

typedef enum
{
  statement_handleIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1338, *PTAG_UNNAMED_1338;

typedef enum
{
  wait_typeIdx = 0,
  opcodeIdx = 1,
  durationIdx = 2,
  signal_durationIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1339, *PTAG_UNNAMED_1339;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_1340, *PTAG_UNNAMED_1340;

class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>
{
}; /* size: 0x0020 */

typedef enum
{
  signalIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1341, *PTAG_UNNAMED_1341;

class TSList<XE_DeferredEvent>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1342, *PTAG_UNNAMED_1342;

class XBitmapEnum<XBitmap<StaticStorage<1024> > >
{
  /* 0x0000 */ const struct XBitmap<StaticStorage<1024> >* m_pBitmap;
  /* 0x0008 */ class BitEnum<unsigned int> m_bitEnum;
  /* 0x0010 */ unsigned int m_curIdx;
}; /* size: 0x0018 */

typedef enum
{
  old_cpu_maskIdx = 0,
  new_cpu_maskIdx = 1,
  cpu_groupIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1343, *PTAG_UNNAMED_1343;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_1344, *PTAG_UNNAMED_1344;

class SEList<XListElem<SOS_DispatcherBase>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEList<XListEnumerator<SOS_DispatcherBase>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct DispatcherListSLock
{
}; /* size: 0x0004 */

class XList<SOS_DispatcherBase>
{
  /* 0x0000 */ long Padding_376[2];
  /* 0x0008 */ class SEList<XListElem<SOS_DispatcherBase>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<SOS_DispatcherBase>,0> m_enumerators;
  /* 0x0028 */ struct DispatcherListSLock m_lock;
}; /* size: 0x0030 */

struct XE_LogBufferHeader
{
  /* 0x0000 */ unsigned short m_logVersion;
  /* 0x0002 */ unsigned short m_type;
  /* 0x0004 */ unsigned int m_paddedLengthInBytes;
  /* 0x0008 */ unsigned short m_unused;
  /* 0x000a */ unsigned short m_dataOffsetInBytes;
  /* 0x000c */ unsigned int m_dataLengthInBytes;
  /* 0x0010 */ unsigned int m_tailChecksum;
}; /* size: 0x0014 */

typedef enum
{
  task_addressIdx = 0,
  worker_addressIdx = 1,
  quantum_timeIdx = 2,
  kernel_timeIdx = 3,
  user_timeIdx = 4,
  idle_percentageIdx = 5,
  is_pagingIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1345, *PTAG_UNNAMED_1345;

class RefCountImpl<CRefCounterAutoDelete>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class XEPackage0::XE_ETWMofEntry
{
  union
  {
    /* 0x0000 */ const unsigned char* m_Data;
    /* 0x0000 */ unsigned char* m_StreamData;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned int m_RemainingLength;
  /* 0x000c */ long Padding_377;
  /* 0x0010 */ void* m_hStream;
  /* 0x0018 */ unsigned short m_packageId;
  /* 0x001a */ char Padding_378[2];
  /* 0x001c */ int m_streamFragmentSupported;
  /* 0x0020 */ class XEPackage0::XE_ETWBufferDispenser* m_pBufferDisp;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 42,
} TAG_UNNAMED_1346, *PTAG_UNNAMED_1346;

struct _HNETWORKENUM;

typedef enum
{
  ClassId = 0x1ea000,
  IsTemplate = 0,
  SerializableVirtual = 0,
} TAG_UNNAMED_1347, *PTAG_UNNAMED_1347;

class XE_FileSetMemoryMap
{
  /* 0x0000 */ class XE_FileSet* const m_files;
  /* 0x0008 */ class XE_AutoRg<unsigned __int64> m_virtualOffsets;
  /* 0x0010 */ class XE_FileMemoryMap* m_lastMap;
}; /* size: 0x0018 */

typedef enum
{
  offsetIdx = 0,
  file_handleIdx = 1,
  completion_routine_pointerIdx = 2,
  user_data_pointerIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1348, *PTAG_UNNAMED_1348;

class XE_AutoP<XE_IDecoder>
{
}; /* size: 0x0008 */

class XE_IDecoder
{
  /* 0x0000 */ long Padding_379[2];
  /* 0x0008 */ enum XE_DecoderType m_type;
  /* 0x000c */ long Padding_380;
  /* 0x0010 */ class XE_AutoP<XE_IDecoder> m_pNext;
}; /* size: 0x0018 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  process_utilizationIdx = 2,
  system_idleIdx = 3,
  user_mode_timeIdx = 4,
  kernel_mode_timeIdx = 5,
  page_faultsIdx = 6,
  working_set_deltaIdx = 7,
  memory_utilizationIdx = 8,
  call_stackIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1349, *PTAG_UNNAMED_1349;

typedef struct _XSTATE_FEATURE
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ unsigned long Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE; /* size: 0x0008 */

enum XeSosPkg::scheduler_monitor_system_health_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  ListElementOffset = 24,
  NextPtrOffset = 0,
} TAG_UNNAMED_1350, *PTAG_UNNAMED_1350;

typedef enum
{
  number_pagesIdx = 0,
  first_page_file_idIdx = 1,
  first_page_idIdx = 2,
  page_file_offsetIdx = 3,
  numa_node_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1351, *PTAG_UNNAMED_1351;

typedef struct _CRT_FLOAT
{
  /* 0x0000 */ float f;
} CRT_FLOAT, *PCRT_FLOAT; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 10,
  NVld = 1,
  VldEddOffset = 8,
  BufSize = 60,
} TAG_UNNAMED_1352, *PTAG_UNNAMED_1352;

typedef enum
{
  xml_reportIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1353, *PTAG_UNNAMED_1353;

struct IPropertyBag2
{
}; /* size: 0x0008 */

typedef enum
{
  wait_typeIdx = 0,
  wait_resultIdx = 1,
  durationIdx = 2,
  signal_durationIdx = 3,
  wait_resourceIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1354, *PTAG_UNNAMED_1354;

typedef struct _RUNTIME_FUNCTION
{
  /* 0x0000 */ unsigned long BeginAddress;
  /* 0x0004 */ unsigned long EndAddress;
  /* 0x0008 */ unsigned long UnwindData;
} RUNTIME_FUNCTION, *PRUNTIME_FUNCTION; /* size: 0x000c */

enum XeSosPkg::wait_completed::CustomizableSlots
{
  collect_wait_resourceSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_1355, *PTAG_UNNAMED_1355;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 36,
} TAG_UNNAMED_1356, *PTAG_UNNAMED_1356;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_1357, *PTAG_UNNAMED_1357;

typedef enum
{
  unhook_countIdx = 0,
  actionIdx = 1,
  dll_nameIdx = 2,
  function_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1358, *PTAG_UNNAMED_1358;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 4,
  VldEddOffset = -1,
  BufSize = 32,
} TAG_UNNAMED_1359, *PTAG_UNNAMED_1359;

class XE_AutoP<XEPackage0::BucketizingTarget>
{
}; /* size: 0x0008 */

typedef enum
{
  task_addressIdx = 0,
  stateIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1360, *PTAG_UNNAMED_1360;

class XeSqlPkg::metadata_change_notification_subscriber
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_381[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int entity_idOffset;
    /* 0x0000 */ const int universal_classOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int assembly_idOffset;
    /* 0x0000 */ const int owner_idOffset;
    /* 0x0000 */ const int notification_typeOffset;
    /* 0x0000 */ const int notification_contextOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

enum XeSqlPkg::lock_released::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

class XE_AutoRg<XEPackage0::EventTraceQueryProperties>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_1361, *PTAG_UNNAMED_1361;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  opcodeIdx = 2,
  node_idIdx = 3,
  workerIdx = 4,
  yieldsIdx = 5,
  worker_utilizationIdx = 6,
  process_utilizationIdx = 7,
  system_idleIdx = 8,
  user_mode_timeIdx = 9,
  kernel_mode_timeIdx = 10,
  page_faultsIdx = 11,
  working_set_deltaIdx = 12,
  memory_utilizationIdx = 13,
  memory_allocatedIdx = 14,
  call_stackIdx = 15,
  LastField = 16,
} TAG_UNNAMED_1362, *PTAG_UNNAMED_1362;

struct IInternetSession
{
}; /* size: 0x0008 */

enum XeSosPkg::scheduler_monitor_non_yielding_rm_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef struct _SERVICE_TABLE_ENTRYW
{
  /* 0x0000 */ wchar_t* lpServiceName;
  /* 0x0008 */ void* lpServiceProc /* function */;
} SERVICE_TABLE_ENTRYW, *PSERVICE_TABLE_ENTRYW; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 16,
  NVld = 1,
  VldEddOffset = 14,
  BufSize = 94,
} TAG_UNNAMED_1363, *PTAG_UNNAMED_1363;

enum XE_Buffer::State
{
  STATE_INITIAL = 0,
  STATE_FREE = 1,
  STATE_ACTIVE = 2,
  STATE_FLUSHING = 3,
  STATE_PENDING = 4,
  STATE_WAITING = 5,
  STATE_PROCESSING = 6,
};

struct IEnumOLEVERB
{
}; /* size: 0x0008 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  opcodeIdx = 2,
  node_idIdx = 3,
  workerIdx = 4,
  yieldsIdx = 5,
  worker_utilizationIdx = 6,
  process_utilizationIdx = 7,
  system_idleIdx = 8,
  user_mode_timeIdx = 9,
  kernel_mode_timeIdx = 10,
  page_faultsIdx = 11,
  working_set_deltaIdx = 12,
  memory_utilizationIdx = 13,
  call_stackIdx = 14,
  LastField = 15,
} TAG_UNNAMED_1364, *PTAG_UNNAMED_1364;

enum XeSosPkg::scheduler_monitor_non_yielding_iocp_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  addressIdx = 0,
  sizeIdx = 1,
  tagIdx = 2,
  allocation_stampIdx = 3,
  pmo_addressIdx = 4,
  pmo_typeIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1365, *PTAG_UNNAMED_1365;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_1366, *PTAG_UNNAMED_1366;

struct HICON__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  ArgCount = 3,
} TAG_UNNAMED_1367, *PTAG_UNNAMED_1367;

typedef enum
{
  opcodeIdx = 0,
  task_addressIdx = 1,
  transitionIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1368, *PTAG_UNNAMED_1368;

struct XE_TEvent<4,0,10>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,10> m_dynamicAttr;
  /* 0x0238 */ struct XEEvent m_event;
}; /* size: 0x0280 */

class XeCloudMinPkg::async_transport_receive_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_382[140];
      /* 0x0240 */ unsigned char m_buf[46];
    }; /* size: 0x003e */
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int destination_type_groupOffset;
    /* 0x0000 */ const int message_handleOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_flagsOffset;
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int ack_sequence_numberOffset;
    /* 0x0000 */ const int message_countOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_idOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 0,
  VldEddOffset = 13,
  BufSize = 60,
} TAG_UNNAMED_1369, *PTAG_UNNAMED_1369;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1370, *PTAG_UNNAMED_1370;

typedef enum
{
  query_operation_node_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1371, *PTAG_UNNAMED_1371;

typedef enum
{
  stateIdx = 0,
  line_numberIdx = 1,
  offsetIdx = 2,
  offset_endIdx = 3,
  statementIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1372, *PTAG_UNNAMED_1372;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  opcodeIdx = 2,
  node_idIdx = 3,
  schedulerIdx = 4,
  workerIdx = 5,
  yieldsIdx = 6,
  worker_utilizationIdx = 7,
  process_utilizationIdx = 8,
  system_idleIdx = 9,
  user_mode_timeIdx = 10,
  kernel_mode_timeIdx = 11,
  page_faultsIdx = 12,
  working_set_deltaIdx = 13,
  memory_utilizationIdx = 14,
  call_stackIdx = 15,
  LastField = 16,
} TAG_UNNAMED_1373, *PTAG_UNNAMED_1373;

class Spinlock<22,19,1>
{
}; /* size: 0x0004 */

class XE_AutoP<XE_AutoCustomizableAttributes>
{
}; /* size: 0x0008 */

enum XeSosPkg::scheduler_monitor_non_yielding_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

struct tag_CompileStatusInfo
{
  /* 0x0000 */ long lPhaseError;
  /* 0x0004 */ HRESULT hRes;
  /* 0x0008 */ long ObjectNum;
  /* 0x000c */ long FirstLine;
  /* 0x0010 */ long LastLine;
  /* 0x0014 */ unsigned long dwOutFlags;
}; /* size: 0x0018 */

typedef enum
{
  error_numberIdx = 0,
  error_severityIdx = 1,
  error_stateIdx = 2,
  is_initiatorIdx = 3,
  message_sequenceIdx = 4,
  fragment_numberIdx = 5,
  remaining_hop_countIdx = 6,
  time_to_live_secIdx = 7,
  live_time_secIdx = 8,
  conversation_idIdx = 9,
  dropped_reasonIdx = 10,
  from_service_nameIdx = 11,
  from_broker_nameIdx = 12,
  to_service_nameIdx = 13,
  to_broker_nameIdx = 14,
  message_type_nameIdx = 15,
  service_contract_nameIdx = 16,
  LastField = 17,
} TAG_UNNAMED_1374, *PTAG_UNNAMED_1374;

typedef union _userHGLOBAL::__MIDL_IWinTypes_0003
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct _FLAGGED_BYTE_BLOB* hRemote;
    /* 0x0000 */ __int64 hInproc64;
  }; /* size: 0x0008 */
} userHGLOBAL::__MIDL_IWinTypes_0003, *PuserHGLOBAL::__MIDL_IWinTypes_0003; /* size: 0x0008 */

typedef struct _userHGLOBAL
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_383;
  /* 0x0008 */ union _userHGLOBAL::__MIDL_IWinTypes_0003 u;
} userHGLOBAL, *PuserHGLOBAL; /* size: 0x0010 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1375, *PTAG_UNNAMED_1375;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 16,
  NVld = 1,
  VldEddOffset = 14,
  BufSize = 90,
} TAG_UNNAMED_1376, *PTAG_UNNAMED_1376;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_1377, *PTAG_UNNAMED_1377;

class Spinlock<212,2,1>
{
}; /* size: 0x0004 */

struct tagWINDOWPOS
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0008 */ struct HWND__* hwndInsertAfter;
  /* 0x0010 */ int x;
  /* 0x0014 */ int y;
  /* 0x0018 */ int cx;
  /* 0x001c */ int cy;
  /* 0x0020 */ unsigned int flags;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_1378, *PTAG_UNNAMED_1378;

struct tagMETARECORD
{
  /* 0x0000 */ unsigned long rdSize;
  /* 0x0004 */ unsigned short rdFunction;
  /* 0x0006 */ unsigned short rdParm[1];
}; /* size: 0x0008 */

class XE_ResolvedObject<XETarget>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XETarget* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XETarget* m_Object;
}; /* size: 0x0020 */

typedef enum
{
  addressIdx = 0,
  pmo_addressIdx = 1,
  pmo_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1379, *PTAG_UNNAMED_1379;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long DisallowWin32kSystemCalls : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ReservedFlags : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_1380, *PTAG_UNNAMED_1380;

typedef enum
{
  exception_codeIdx = 0,
  exception_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1381, *PTAG_UNNAMED_1381;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1382, *PTAG_UNNAMED_1382;

typedef enum
{
  idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1383, *PTAG_UNNAMED_1383;

enum XE_TargetEntry::Type
{
  Proxy = 0,
  Actual = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1384, *PTAG_UNNAMED_1384;

typedef struct _IMAGE_OS2_HEADER
{
  /* 0x0000 */ unsigned short ne_magic;
  /* 0x0002 */ char ne_ver;
  /* 0x0003 */ char ne_rev;
  /* 0x0004 */ unsigned short ne_enttab;
  /* 0x0006 */ unsigned short ne_cbenttab;
  /* 0x0008 */ long ne_crc;
  /* 0x000c */ unsigned short ne_flags;
  /* 0x000e */ unsigned short ne_autodata;
  /* 0x0010 */ unsigned short ne_heap;
  /* 0x0012 */ unsigned short ne_stack;
  /* 0x0014 */ long ne_csip;
  /* 0x0018 */ long ne_sssp;
  /* 0x001c */ unsigned short ne_cseg;
  /* 0x001e */ unsigned short ne_cmod;
  /* 0x0020 */ unsigned short ne_cbnrestab;
  /* 0x0022 */ unsigned short ne_segtab;
  /* 0x0024 */ unsigned short ne_rsrctab;
  /* 0x0026 */ unsigned short ne_restab;
  /* 0x0028 */ unsigned short ne_modtab;
  /* 0x002a */ unsigned short ne_imptab;
  /* 0x002c */ long ne_nrestab;
  /* 0x0030 */ unsigned short ne_cmovent;
  /* 0x0032 */ unsigned short ne_align;
  /* 0x0034 */ unsigned short ne_cres;
  /* 0x0036 */ unsigned char ne_exetyp;
  /* 0x0037 */ unsigned char ne_flagsothers;
  /* 0x0038 */ unsigned short ne_pretthunks;
  /* 0x003a */ unsigned short ne_psegrefbytes;
  /* 0x003c */ unsigned short ne_swaparea;
  /* 0x003e */ unsigned short ne_expver;
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER; /* size: 0x0040 */

class AutoSpinlockHolder<77,14,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 34,
} TAG_UNNAMED_1385, *PTAG_UNNAMED_1385;

typedef union __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005
{
  union
  {
    /* 0x0000 */ struct _GUID clsid;
    /* 0x0000 */ wchar_t* pFileExt;
    /* 0x0000 */ wchar_t* pMimeType;
    /* 0x0000 */ wchar_t* pProgId;
    /* 0x0000 */ wchar_t* pFileName;
    struct
    {
      /* 0x0000 */ wchar_t* pPackageName;
      /* 0x0008 */ struct _GUID PolicyId;
    } /* size: 0x0018 */ ByName;
    struct
    {
      /* 0x0000 */ struct _GUID ObjectId;
      /* 0x0010 */ struct _GUID PolicyId;
    } /* size: 0x0020 */ ByObjectId;
  }; /* size: 0x0020 */
} _MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005, *P_MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005; /* size: 0x0020 */

typedef struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
{
  /* 0x0000 */ unsigned long tyspec;
  /* 0x0004 */ long Padding_384;
  /* 0x0008 */ union __MIDL___MIDL_itf_wtypes_0000_0001_0001::__MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
} _MIDL___MIDL_itf_wtypes_0000_0001_0001, *P_MIDL___MIDL_itf_wtypes_0000_0001_0001; /* size: 0x0028 */

typedef enum
{
  offsetIdx = 0,
  file_handleIdx = 1,
  completion_routine_pointerIdx = 2,
  user_data_pointerIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1386, *PTAG_UNNAMED_1386;

struct XSAVE_CPU_ERRATA
{
  /* 0x0000 */ unsigned long NumberOfErrata;
  /* 0x0004 */ long Padding_385;
  /* 0x0008 */ struct XSAVE_CPU_INFO Errata[1];
}; /* size: 0x0028 */

class XE_AutoP<XEPackage0::CounterTarget::PackageEntry>
{
}; /* size: 0x0008 */

class XEPackage0::CounterTarget
{
  /* 0x0000 */ const unsigned int MAX_PARTS;
  /* 0x0004 */ long Padding_386;
  /* 0x0008 */ class XE_AutoP<XEPackage0::CounterTarget::PackageEntry> m_packages[1024];
  /* 0x2008 */ class XE_Auto m_holder;
  /* 0x2010 */ void* m_lock;
  /* 0x2018 */ void* m_notificationSlot;
  /* 0x2020 */ void* m_hSession;
  /* 0x2028 */ class XE_ErrorContext m_ErrorContext;
}; /* size: 0x2030 */

struct XPortSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1387, *PTAG_UNNAMED_1387;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1388, *PTAG_UNNAMED_1388;

struct IEnumSTATPROPSTG
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1389, *PTAG_UNNAMED_1389;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
{
  /* 0x0000 */ unsigned __int64 Version;
  /* 0x0008 */ wchar_t* Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE; /* size: 0x0010 */

class CAutoRg<XEPackage0::BucketizingTarget::Entry *>
{
}; /* size: 0x0008 */

typedef enum
{
  node_idIdx = 0,
  cpu_maskIdx = 1,
  affinity_maskIdx = 2,
  cpu_groupIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1390, *PTAG_UNNAMED_1390;

struct SysThreadDispatcherSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_undo
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_387[140];
      /* 0x0240 */ unsigned char m_buf[96];
    }; /* size: 0x0070 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int log_truncation_blockOffset;
    /* 0x0000 */ const int hadr_truncation_blockOffset;
    /* 0x0000 */ const int recovery_pointOffset;
    /* 0x0000 */ const int undo_scanOffset;
    /* 0x0000 */ const int undo_safe_blockOffset;
    /* 0x0000 */ const int undo_pageidOffset;
    /* 0x0000 */ const int undo_phaseOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x02a0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1391, *PTAG_UNNAMED_1391;

typedef enum
{
  session_idIdx = 0,
  session_tokenIdx = 1,
  brick_incarnation_idIdx = 2,
  event_typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1392, *PTAG_UNNAMED_1392;

typedef enum
{
  worker_addressIdx = 0,
  failure_typeIdx = 1,
  resource_sizeIdx = 2,
  pool_idIdx = 3,
  factorIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1393, *PTAG_UNNAMED_1393;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1394, *PTAG_UNNAMED_1394;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 36,
} TAG_UNNAMED_1395, *PTAG_UNNAMED_1395;

struct _CONTRACT_DESCRIPTION;

typedef enum
{
  cache_addressIdx = 0,
  entries_sweptIdx = 1,
  entries_evictedIdx = 2,
  pages_sweptIdx = 3,
  pages_evictedIdx = 4,
  simulation_sweepIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1396, *PTAG_UNNAMED_1396;

typedef struct _SERVICE_PRESHUTDOWN_INFO
{
  /* 0x0000 */ unsigned long dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, *PSERVICE_PRESHUTDOWN_INFO; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 41,
} TAG_UNNAMED_1397, *PTAG_UNNAMED_1397;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 44,
} TAG_UNNAMED_1398, *PTAG_UNNAMED_1398;

typedef enum
{
  lwfg_sequence_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1399, *PTAG_UNNAMED_1399;

typedef enum
{
  cache_addressIdx = 0,
  descriptor_addressIdx = 1,
  user_data_addressIdx = 2,
  size_in_pagesIdx = 3,
  time_to_generateIdx = 4,
  use_countIdx = 5,
  average_intervalIdx = 6,
  probability_of_reuseIdx = 7,
  valueIdx = 8,
  cutoff_indexIdx = 9,
  benefit_cutoffIdx = 10,
  was_removedIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1400, *PTAG_UNNAMED_1400;

typedef enum
{
  object_typeIdx = 0,
  database_idIdx = 1,
  hobt_idIdx = 2,
  column_idIdx = 3,
  object_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1401, *PTAG_UNNAMED_1401;

typedef struct _SE_IMPERSONATION_STATE
{
  /* 0x0000 */ void* Token;
  /* 0x0008 */ unsigned char CopyOnOpen;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char Padding_388[2];
  /* 0x000c */ enum _SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE; /* size: 0x0010 */

struct _NDR_CORRELATION_INFO;

struct XEPackage0::IsAnyOnPredicateComparator
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 0,
  VldEddOffset = 11,
  BufSize = 89,
} TAG_UNNAMED_1402, *PTAG_UNNAMED_1402;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_1403, *PTAG_UNNAMED_1403;

class XE_ResolvedObject<XEObject>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEObject* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEObject* m_Object;
}; /* size: 0x0020 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1404, *PTAG_UNNAMED_1404;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_1405, *PTAG_UNNAMED_1405;

class XeSqlPkg::query_rx_release_buffers
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_389[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1406, *PTAG_UNNAMED_1406;

typedef enum
{
  Result = 10,
} TAG_UNNAMED_1407, *PTAG_UNNAMED_1407;

class XeSqlPkg::save_tran_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_390[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0148 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 36,
} TAG_UNNAMED_1408, *PTAG_UNNAMED_1408;

typedef enum
{
  Result = 100,
} TAG_UNNAMED_1409, *PTAG_UNNAMED_1409;

struct tagWINDOWPLACEMENT
{
  /* 0x0000 */ unsigned int length;
  /* 0x0004 */ unsigned int flags;
  /* 0x0008 */ unsigned int showCmd;
  /* 0x000c */ struct tagPOINT ptMinPosition;
  /* 0x0014 */ struct tagPOINT ptMaxPosition;
  /* 0x001c */ struct tagRECT rcNormalPosition;
}; /* size: 0x002c */

class XeSqlPkg::xtp_storage_table_create
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_391[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

enum DISPLAYCONFIG_SCANLINE_ORDERING
{
  DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
  DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
  DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
  DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 34,
} TAG_UNNAMED_1410, *PTAG_UNNAMED_1410;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1411, *PTAG_UNNAMED_1411;

enum XeSqlPkg::lock_escalation::CustomizableSlots
{
  collect_statementSlot = 0,
  collect_database_nameSlot = 1,
};

struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionWithActive
{
}; /* size: 0x0040 */

typedef enum
{
  ArgCount = 3,
} TAG_UNNAMED_1412, *PTAG_UNNAMED_1412;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_1413, *PTAG_UNNAMED_1413;

typedef enum
{
  Value = 2,
} TAG_UNNAMED_1414, *PTAG_UNNAMED_1414;

typedef struct _RPC_TRANSFER_SYNTAX
{
  /* 0x0000 */ struct _GUID Uuid;
  /* 0x0010 */ unsigned short VersMajor;
  /* 0x0012 */ unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX, *PRPC_TRANSFER_SYNTAX; /* size: 0x0014 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 5,
} TAG_UNNAMED_1415, *PTAG_UNNAMED_1415;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1416, *PTAG_UNNAMED_1416;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1417, *PTAG_UNNAMED_1417;

typedef enum
{
  ArgCount = 1,
} TAG_UNNAMED_1418, *PTAG_UNNAMED_1418;

typedef struct _MODEMDEVCAPS
{
  /* 0x0000 */ unsigned long dwActualSize;
  /* 0x0004 */ unsigned long dwRequiredSize;
  /* 0x0008 */ unsigned long dwDevSpecificOffset;
  /* 0x000c */ unsigned long dwDevSpecificSize;
  /* 0x0010 */ unsigned long dwModemProviderVersion;
  /* 0x0014 */ unsigned long dwModemManufacturerOffset;
  /* 0x0018 */ unsigned long dwModemManufacturerSize;
  /* 0x001c */ unsigned long dwModemModelOffset;
  /* 0x0020 */ unsigned long dwModemModelSize;
  /* 0x0024 */ unsigned long dwModemVersionOffset;
  /* 0x0028 */ unsigned long dwModemVersionSize;
  /* 0x002c */ unsigned long dwDialOptions;
  /* 0x0030 */ unsigned long dwCallSetupFailTimer;
  /* 0x0034 */ unsigned long dwInactivityTimeout;
  /* 0x0038 */ unsigned long dwSpeakerVolume;
  /* 0x003c */ unsigned long dwSpeakerMode;
  /* 0x0040 */ unsigned long dwModemOptions;
  /* 0x0044 */ unsigned long dwMaxDTERate;
  /* 0x0048 */ unsigned long dwMaxDCERate;
  /* 0x004c */ unsigned char abVariablePortion[1];
  /* 0x004d */ char __PADDING__[3];
} MODEMDEVCAPS, *PMODEMDEVCAPS; /* size: 0x0050 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 36,
} TAG_UNNAMED_1419, *PTAG_UNNAMED_1419;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_1420, *PTAG_UNNAMED_1420;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1421, *PTAG_UNNAMED_1421;

struct tagMENUITEMINFOA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int fMask;
  /* 0x0008 */ unsigned int fType;
  /* 0x000c */ unsigned int fState;
  /* 0x0010 */ unsigned int wID;
  /* 0x0014 */ long Padding_392;
  /* 0x0018 */ struct HMENU__* hSubMenu;
  /* 0x0020 */ struct HBITMAP__* hbmpChecked;
  /* 0x0028 */ struct HBITMAP__* hbmpUnchecked;
  /* 0x0030 */ unsigned __int64 dwItemData;
  /* 0x0038 */ char* dwTypeData;
  /* 0x0040 */ unsigned int cch;
  /* 0x0044 */ long Padding_393;
  /* 0x0048 */ struct HBITMAP__* hbmpItem;
}; /* size: 0x0050 */

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1422, *PTAG_UNNAMED_1422;

class XeSqlPkg::query_execution_range_elimination_map_build
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_394[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int ranges_countOffset;
    /* 0x0000 */ const int bucket_sizeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  pmo_addressIdx = 2,
  pmo_utilizationIdx = 3,
  gdma_addressIdx = 4,
  gdma_task_addressIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1423, *PTAG_UNNAMED_1423;

typedef enum
{
  Result = 1,
} TAG_UNNAMED_1424, *PTAG_UNNAMED_1424;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_1425, *PTAG_UNNAMED_1425;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1426, *PTAG_UNNAMED_1426;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  pmo_addressIdx = 2,
  pmo_utilizationIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1427, *PTAG_UNNAMED_1427;

class std::_Mutex
{
  /* 0x0000 */ void* _Mtx;
}; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1428, *PTAG_UNNAMED_1428;

struct tagEMRBITBLT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long cxDest;
  /* 0x0024 */ long cyDest;
  /* 0x0028 */ unsigned long dwRop;
  /* 0x002c */ long xSrc;
  /* 0x0030 */ long ySrc;
  /* 0x0034 */ struct tagXFORM xformSrc;
  /* 0x004c */ unsigned long crBkColorSrc;
  /* 0x0050 */ unsigned long iUsageSrc;
  /* 0x0054 */ unsigned long offBmiSrc;
  /* 0x0058 */ unsigned long cbBmiSrc;
  /* 0x005c */ unsigned long offBitsSrc;
  /* 0x0060 */ unsigned long cbBitsSrc;
}; /* size: 0x0064 */

enum XeSqlPkg::file_write_throttled::CustomizableSlots
{
  collect_pathSlot = 0,
  collect_io_dataSlot = 1,
};

class std::_Exception_ptr
{
  /* 0x0000 */ void* _Data1;
  /* 0x0008 */ void* _Data2;
}; /* size: 0x0010 */

typedef enum
{
  CastResult = 0,
} TAG_UNNAMED_1429, *PTAG_UNNAMED_1429;

struct tagEMRINVERTRGN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cbRgnData;
  /* 0x001c */ unsigned char RgnData[1];
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

typedef enum
{
  ArgCount = 3,
} TAG_UNNAMED_1430, *PTAG_UNNAMED_1430;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1431, *PTAG_UNNAMED_1431;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfEnlistments;
  /* 0x0004 */ struct _TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION; /* size: 0x0024 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1432, *PTAG_UNNAMED_1432;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1433, *PTAG_UNNAMED_1433;

typedef struct _wireSAFEARR_BRECORD
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_395;
  /* 0x0008 */ struct _wireBRECORD** aRecord;
} wireSAFEARR_BRECORD, *PwireSAFEARR_BRECORD; /* size: 0x0010 */

class XeSqlPkg::hadr_transport_replica_before_sending_build_replica_message_on_primary
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_396[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int partition_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int db_guidOffset;
    /* 0x0000 */ const int db_nameOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 0,
  VldEddOffset = 9,
  BufSize = 40,
} TAG_UNNAMED_1434, *PTAG_UNNAMED_1434;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1435, *PTAG_UNNAMED_1435;

typedef enum
{
  database_idIdx = 0,
  file_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1436, *PTAG_UNNAMED_1436;

typedef enum
{
  database_idIdx = 0,
  start_log_block_idIdx = 1,
  is_read_aheadIdx = 2,
  private_consumer_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1437, *PTAG_UNNAMED_1437;

class CAutoBase<char>
{
  /* 0x0000 */ char* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_1438, *PTAG_UNNAMED_1438;

typedef enum
{
  Value = 3,
} TAG_UNNAMED_1439, *PTAG_UNNAMED_1439;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1440, *PTAG_UNNAMED_1440;

class CAutoP<XE_XMLObjectString>
{
}; /* size: 0x0008 */

class XE_AutoP<XEPackage0::OrphanEntry>
{
}; /* size: 0x0008 */

enum CallStackHashTable::INIT_STATUS
{
  INIT_STATUS_NOT_INITIALIZED = 0,
  INIT_STATUS_INITIALIZING = 1,
  INIT_STATUS_INITIALIZED = 2,
};

struct XE_TEvent<4,1,8>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,8> m_dynamicAttr;
  /* 0x0218 */ struct XEEvent m_event;
}; /* size: 0x0260 */

class XeSqlPkg::file_read
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_397[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
  }; /* size: 0x0260 */
}; /* size: 0x0270 */

typedef enum
{
  column_listIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1441, *PTAG_UNNAMED_1441;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1442, *PTAG_UNNAMED_1442;

class std::numeric_limits<long double>
{
  union
  {
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  ranges_totalIdx = 2,
  pages_totalIdx = 3,
  upper_level_pages_totalIdx = 4,
  total_time_msIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1443, *PTAG_UNNAMED_1443;

struct IStream
{
}; /* size: 0x0008 */

typedef enum
{
  NumBitsInT = 64,
} TAG_UNNAMED_1444, *PTAG_UNNAMED_1444;

typedef enum
{
  NumBitsInT = 32,
} TAG_UNNAMED_1445, *PTAG_UNNAMED_1445;

typedef struct _IMAGE_SEPARATE_DEBUG_HEADER
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short Machine;
  /* 0x0006 */ unsigned short Characteristics;
  /* 0x0008 */ unsigned long TimeDateStamp;
  /* 0x000c */ unsigned long CheckSum;
  /* 0x0010 */ unsigned long ImageBase;
  /* 0x0014 */ unsigned long SizeOfImage;
  /* 0x0018 */ unsigned long NumberOfSections;
  /* 0x001c */ unsigned long ExportedNamesSize;
  /* 0x0020 */ unsigned long DebugDirectorySize;
  /* 0x0024 */ unsigned long SectionAlignment;
  /* 0x0028 */ unsigned long Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER; /* size: 0x0030 */

class XeSqlPkg::mixed_extent_deallocation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_398[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int extent_idOffset;
    /* 0x0000 */ const int is_loggedOffset;
    /* 0x0000 */ const int rollbackOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0250 */

typedef enum
{
  BucketSetCount = 8,
} TAG_UNNAMED_1446, *PTAG_UNNAMED_1446;

typedef enum
{
  pmo_addressIdx = 0,
  pmo_utilizationIdx = 1,
  current_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1447, *PTAG_UNNAMED_1447;

typedef enum
{
  BucketSetCount = 1,
} TAG_UNNAMED_1448, *PTAG_UNNAMED_1448;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1449, *PTAG_UNNAMED_1449;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1450, *PTAG_UNNAMED_1450;

typedef struct _ENUM_SERVICE_STATUSA
{
  /* 0x0000 */ char* lpServiceName;
  /* 0x0008 */ char* lpDisplayName;
  /* 0x0010 */ struct _SERVICE_STATUS ServiceStatus;
  /* 0x002c */ long __PADDING__[1];
} ENUM_SERVICE_STATUSA, *PENUM_SERVICE_STATUSA; /* size: 0x0030 */

typedef enum
{
  manager_idIdx = 0,
  notification_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1451, *PTAG_UNNAMED_1451;

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,65536,524288,8,1> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

typedef enum
{
  BucketSetCount = 2,
} TAG_UNNAMED_1452, *PTAG_UNNAMED_1452;

typedef enum
{
  opcodeIdx = 0,
  hresultIdx = 1,
  durationIdx = 2,
  linked_server_nameIdx = 3,
  provider_nameIdx = 4,
  method_nameIdx = 5,
  parametersIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1453, *PTAG_UNNAMED_1453;

typedef enum
{
  BucketSetCount = 2,
} TAG_UNNAMED_1454, *PTAG_UNNAMED_1454;

typedef enum
{
  last_mixed_extent_file_idIdx = 0,
  last_mixed_extent_extent_idIdx = 1,
  file_idIdx = 2,
  extent_idIdx = 3,
  is_loggedIdx = 4,
  rollbackIdx = 5,
  successIdx = 6,
  database_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1455, *PTAG_UNNAMED_1455;

class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  BucketSetCount = 4,
} TAG_UNNAMED_1456, *PTAG_UNNAMED_1456;

typedef struct _OSVERSIONINFOA
{
  /* 0x0000 */ unsigned long dwOSVersionInfoSize;
  /* 0x0004 */ unsigned long dwMajorVersion;
  /* 0x0008 */ unsigned long dwMinorVersion;
  /* 0x000c */ unsigned long dwBuildNumber;
  /* 0x0010 */ unsigned long dwPlatformId;
  /* 0x0014 */ char szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA; /* size: 0x0094 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1457, *PTAG_UNNAMED_1457;

typedef enum
{
  BucketSetCount = 4,
} TAG_UNNAMED_1458, *PTAG_UNNAMED_1458;

class XeSqlPkg::hadr_sql_instance_to_node_map_entry_created_updated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_399[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int sql_instance_nameOffset;
    /* 0x0000 */ const int cluster_node_nameOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1459, *PTAG_UNNAMED_1459;

class XE_BaseAllocator
{
  /* 0x0000 */ void* m_hSession;
}; /* size: 0x0008 */

struct IsElementalHelper<CSessionTraceFlags>
{
}; /* size: 0x0001 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1460, *PTAG_UNNAMED_1460;

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1461, *PTAG_UNNAMED_1461;

struct ISOSHost_EventManual_Prev0
{
}; /* size: 0x0008 */

struct IXMLDSOControl
{
}; /* size: 0x0008 */

typedef enum
{
  age_replying_toIdx = 0,
  tosnIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1462, *PTAG_UNNAMED_1462;

struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_400;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[8];
}; /* size: 0x0088 */

class XeCloudMinPkg::secondary_send_rollback_ack
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_401[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
    /* 0x0000 */ const int xact_for_idempotent_flushOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  activityIdx = 0,
  query_notification_xml_informationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1463, *PTAG_UNNAMED_1463;

class XE_ILogWriteMessageHandler
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1464, *PTAG_UNNAMED_1464;

struct std::_Container_base0
{
}; /* size: 0x0001 */

struct ISWbemSink
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 2,
  VldEddOffset = 1,
  BufSize = 24,
} TAG_UNNAMED_1465, *PTAG_UNNAMED_1465;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

struct std::_Iterator_base12
{
  /* 0x0000 */ struct std::_Container_proxy* _Myproxy;
  /* 0x0008 */ struct std::_Iterator_base12* _Mynextiter;
}; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 48,
  NextPtrOffset = 8,
} TAG_UNNAMED_1466, *PTAG_UNNAMED_1466;

struct tagEMRSETWORLDTRANSFORM
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct tagXFORM xform;
}; /* size: 0x0020 */

class Spinlock<314,1,1>
{
}; /* size: 0x0004 */

enum SqlDkHost_ITraceFlag::ETraceFlags_Action
{
  TRACEFLAGS_TURNON = 0,
  TRACEFLAGS_TURNOFF = 1,
};

struct XE_LogDefaultPolicyHeader_v0
{
}; /* size: 0x0001 */

enum SOS_DebugBreakHookMgr::Action
{
  DBHA_Init = 0,
  DBHA_Hook = 1,
  DBHA_UnHook = 2,
};

struct PPM_IDLE_STATE_BUCKET_EX
{
  /* 0x0000 */ unsigned __int64 TotalTimeUs;
  /* 0x0008 */ unsigned long MinTimeUs;
  /* 0x000c */ unsigned long MaxTimeUs;
  /* 0x0010 */ unsigned long Count;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct PPM_IDLE_STATE_ACCOUNTING_EX
{
  /* 0x0000 */ unsigned __int64 TotalTime;
  /* 0x0008 */ unsigned long IdleTransitions;
  /* 0x000c */ unsigned long FailedTransitions;
  /* 0x0010 */ unsigned long InvalidBucketIndex;
  /* 0x0014 */ unsigned long MinTimeUs;
  /* 0x0018 */ unsigned long MaxTimeUs;
  /* 0x001c */ long Padding_402;
  /* 0x0020 */ struct PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
}; /* size: 0x01a0 */

struct XE_TEvent<4,1,3>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,3> m_dynamicAttr;
  /* 0x0150 */ struct XEEvent m_event;
}; /* size: 0x0198 */

class XeSqlPkg::save_tran_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_403[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0198 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 6,
  VldEddOffset = 0,
  BufSize = 49,
} TAG_UNNAMED_1467, *PTAG_UNNAMED_1467;

enum cpuid_results
{
  CPUID_RESULTS_TYPE = 0,
  CPUID_RESULTS_SPECIFICS = 1,
  CPUID_RESULTS_RESERVED = 2,
  CPUID_RESULTS_FEATURES = 3,
  CPUID_RESULTS_LAST = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 16,
} TAG_UNNAMED_1468, *PTAG_UNNAMED_1468;

class SEHashIter<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator>
{
  /* 0x0000 */ class SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator>* m_table;
  /* 0x0008 */ unsigned int m_currBucket;
  /* 0x000c */ long Padding_404;
  /* 0x0010 */ class XE_XMLObjectString* m_currEntry;
}; /* size: 0x0018 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1469, *PTAG_UNNAMED_1469;

class XeSqlPkg::change_tracking_cleanup
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_405[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int cleanup_idOffset;
    /* 0x0000 */ const int valueOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

enum XeSqlPkg::full_text_crawl_started::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

struct TxfRmReplSLock
{
}; /* size: 0x0004 */

typedef enum
{
  cluster_incarnationIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1470, *PTAG_UNNAMED_1470;

class TSList<XE_ConfigCrc>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 5,
  VldEddOffset = 2,
  BufSize = 52,
} TAG_UNNAMED_1471, *PTAG_UNNAMED_1471;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1472, *PTAG_UNNAMED_1472;

typedef enum
{
  manager_idIdx = 0,
  manager_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1473, *PTAG_UNNAMED_1473;

class CRefCount
{
  /* 0x0000 */ long Padding_406[2];
  /* 0x0008 */ unsigned long m_cRef;
}; /* size: 0x0010 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1474, *PTAG_UNNAMED_1474;

typedef struct _EXCEPTION_RECORD
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0010 */ void* ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ long Padding_407;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD; /* size: 0x0098 */

typedef enum
{
  stateIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1475, *PTAG_UNNAMED_1475;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1476, *PTAG_UNNAMED_1476;

enum SqlDkHost_ITraceFlag::ETraceFlags_Scope
{
  TRACEFLAGS_GLOBAL = 0,
  TRACEFLAGS_SESSION = 1,
};

class CAutoP<XE_FileSet>
{
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1477, *PTAG_UNNAMED_1477;

class XeSqlPkg::query_rpc_locate_and_delete_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_408[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1478, *PTAG_UNNAMED_1478;

class XE_StreamCompare<char,XEPackage0::StringCompare<char,2>,0>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ const char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

typedef enum
{
  ListElementOffset = 248,
  NextPtrOffset = 8,
} TAG_UNNAMED_1479, *PTAG_UNNAMED_1479;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1480, *PTAG_UNNAMED_1480;

union XECollectedEventData::DataSource
{
  union
  {
    /* 0x0000 */ const void* m_data;
    /* 0x0000 */ void* m_hStream;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct XECollectedEventData
{
  /* 0x0000 */ union XECollectedEventData::DataSource m_source;
  /* 0x0008 */ unsigned int m_length;
  /* 0x000c */ unsigned short m_dataAttrIdx;
  /* 0x000e */ unsigned short m_isStream;
}; /* size: 0x0010 */

typedef struct __vc_attributes::varargAttribute
{
} _vc_attributes::varargAttribute, *P_vc_attributes::varargAttribute; /* size: 0x0001 */

class XeSqlPkg::lock_request_priority_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_409[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int modeOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

enum WaitForGraphVertex::WaitForGraphVertexColour
{
  VERTEX_WHITE = 0,
  VERTEX_GREY = 1,
  VERTEX_BLACK = 2,
  VERTEX_YELLOW = 3,
  VERTEX_INVALID_COLOUR = 4,
};

struct IContinue
{
}; /* size: 0x0008 */

enum WaitForGraph::DeadlockVictimSelectionResult
{
  VICTIM_SELECTION_COMPLETED = 0,
  TIMEOUT_OCCURRED_IN_VICTIM_SELECTION = 1,
};

class XeSqlPkg::query_rpc_process_cmd_fetch_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_410[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int accessorOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 16,
  NVld = 5,
  VldEddOffset = 10,
  BufSize = 92,
} TAG_UNNAMED_1481, *PTAG_UNNAMED_1481;

class Spinlock<76,15,1>
{
}; /* size: 0x0004 */

enum WaitForGraphVertex::WaitForGraphVertexState
{
  VERTEX_INIT = 0,
  VERTEX_UNSAFE = 1,
  VERTEX_SAFE = 2,
  VERTEX_TEMP_SAFE = 3,
  VERTEX_CHOSEN_AS_DEADLOCK_VICTIM = 4,
  VERTEX_INVALID_STATE = 5,
};

class XeSqlPkg::log_flush_requested
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_411[140];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int reasonOffset;
    /* 0x0000 */ const int waitersOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int is_delayed_durableOffset;
    /* 0x0000 */ const int only_signalOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0258 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1482, *PTAG_UNNAMED_1482;

class CAutoRefc<IXMLDOMElement>
{
  /* 0x0000 */ struct IXMLDOMElement* m_pt;
}; /* size: 0x0008 */

enum WaitForGraph::WaitForGraphReductionResult
{
  REDUCED_WFG_IS_EMPTY = 0,
  REDUCED_WFG_IS_NON_EMPTY = 1,
  TIMEOUT_OCCURRED_IN_GRAPH_REDUCTION = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_1483, *PTAG_UNNAMED_1483;

enum WaitForGraph::DeadlockResolutionPreparationStatus
{
  PROCEED_TO_DEADLOCK_RESOLUTION = 0,
  DO_NOT_PROCEED_TO_DEADLOCK_RESOLUTION = 1,
};

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE; /* size: 0x0030 */

typedef enum
{
  old_port_numberIdx = 0,
  new_port_numberIdx = 1,
  availability_group_idIdx = 2,
  listener_idIdx = 3,
  dns_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1484, *PTAG_UNNAMED_1484;

struct StaticStorage<64>
{
  /* 0x0000 */ unsigned int m_buf[2];
}; /* size: 0x0008 */

typedef enum
{
  use_local_rowsetIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1485, *PTAG_UNNAMED_1485;

typedef enum
{
  Value = 5,
} TAG_UNNAMED_1486, *PTAG_UNNAMED_1486;

typedef enum
{
  Value = 10,
} TAG_UNNAMED_1487, *PTAG_UNNAMED_1487;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1488, *PTAG_UNNAMED_1488;

typedef enum
{
  Value = 18,
} TAG_UNNAMED_1489, *PTAG_UNNAMED_1489;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1490, *PTAG_UNNAMED_1490;

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  workerIdx = 2,
  worker_idIdx = 3,
  scheduler_idIdx = 4,
  node_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1491, *PTAG_UNNAMED_1491;

typedef enum
{
  Value = 11,
} TAG_UNNAMED_1492, *PTAG_UNNAMED_1492;

typedef enum
{
  NativeTypes = 1,
} TAG_UNNAMED_1493, *PTAG_UNNAMED_1493;

typedef struct _SERVICE_TRIGGER
{
  /* 0x0000 */ unsigned long dwTriggerType;
  /* 0x0004 */ unsigned long dwAction;
  /* 0x0008 */ struct _GUID* pTriggerSubtype;
  /* 0x0010 */ unsigned long cDataItems;
  /* 0x0014 */ long Padding_412;
  /* 0x0018 */ struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM* pDataItems;
} SERVICE_TRIGGER, *PSERVICE_TRIGGER; /* size: 0x0020 */

class XeSqlPkg::sort_add_run_tracing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_413[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int allocation_unit_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int run_idOffset;
    /* 0x0000 */ const int run_length_in_pagesOffset;
    /* 0x0000 */ const int run_first_page_file_idOffset;
    /* 0x0000 */ const int run_first_page_page_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0268 */

enum thread_type
{
  SYS_THREAD = 0,
  USER_THREAD = 1,
};

typedef enum
{
  Value = 19,
} TAG_UNNAMED_1494, *PTAG_UNNAMED_1494;

struct tagEMRELLIPSE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBox;
}; /* size: 0x0018 */

typedef enum
{
  database_idIdx = 0,
  users_statusIdx = 1,
  shutdown_typeIdx = 2,
  group_idIdx = 3,
  replica_idIdx = 4,
  ag_database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1495, *PTAG_UNNAMED_1495;

typedef enum
{
  Value = 2,
} TAG_UNNAMED_1496, *PTAG_UNNAMED_1496;

struct tagPOINTFX
{
  /* 0x0000 */ struct _FIXED x;
  /* 0x0004 */ struct _FIXED y;
}; /* size: 0x0008 */

typedef enum
{
  Value = 0,
} TAG_UNNAMED_1497, *PTAG_UNNAMED_1497;

class CAutoHandleInternal<-1,&FindClose>
{
  /* 0x0000 */ void* m_h;
}; /* size: 0x0008 */

class XE_StreamCompare<char,XEPackage0::StringCompare<char,1>,2>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ const char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

typedef enum
{
  Value = 4,
} TAG_UNNAMED_1498, *PTAG_UNNAMED_1498;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 44,
} TAG_UNNAMED_1499, *PTAG_UNNAMED_1499;

class XE_AutoP<XE_FileSetMemoryMap>
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 12,
} TAG_UNNAMED_1500, *PTAG_UNNAMED_1500;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1501, *PTAG_UNNAMED_1501;

typedef enum
{
  Value = 7,
} TAG_UNNAMED_1502, *PTAG_UNNAMED_1502;

typedef enum
{
  brick_idIdx = 0,
  channel_map_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1503, *PTAG_UNNAMED_1503;

struct XEPackage0::SourceColumn
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ const struct XEType* m_pType;
  /* 0x0018 */ unsigned short m_dataAttrIdx;
  /* 0x001a */ char __PADDING__[6];
}; /* size: 0x0020 */

typedef enum
{
  Value = 3,
} TAG_UNNAMED_1504, *PTAG_UNNAMED_1504;

class XeSqlPkg::database_agent_local_operation_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_414[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int local_brick_idOffset;
    /* 0x0000 */ const int local_operation_typeOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1505, *PTAG_UNNAMED_1505;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1506, *PTAG_UNNAMED_1506;

typedef enum
{
  Value = 8,
} TAG_UNNAMED_1507, *PTAG_UNNAMED_1507;

typedef enum
{
  error_numberIdx = 0,
  open_modeIdx = 1,
  file_pathIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1508, *PTAG_UNNAMED_1508;

typedef enum
{
  agent_idIdx = 0,
  agent_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1509, *PTAG_UNNAMED_1509;

class CAutoRefc<XE_XMLConfiguredSession>
{
  /* 0x0000 */ class XE_XMLConfiguredSession* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  Value = 0,
} TAG_UNNAMED_1510, *PTAG_UNNAMED_1510;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
  /* 0x0000 */ unsigned __int64 ProcessorMask;
  /* 0x0008 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  /* 0x000c */ long Padding_415;
  union
  {
    struct
    {
      /* 0x0010 */ unsigned char Flags;
    } /* size: 0x0001 */ ProcessorCore;
    struct
    {
      /* 0x0010 */ unsigned long NodeNumber;
    } /* size: 0x0004 */ NumaNode;
    /* 0x0010 */ struct _CACHE_DESCRIPTOR Cache;
    /* 0x0010 */ unsigned __int64 Reserved[2];
  }; /* size: 0x0010 */
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION; /* size: 0x0020 */

typedef enum
{
  brick_idIdx = 0,
  brick_stateIdx = 1,
  brick_startup_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1511, *PTAG_UNNAMED_1511;

typedef enum
{
  Value = 17,
} TAG_UNNAMED_1512, *PTAG_UNNAMED_1512;

typedef enum
{
  Value = 14,
} TAG_UNNAMED_1513, *PTAG_UNNAMED_1513;

class XeSqlPkg::replica_create_reply
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_416[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int brick_ageOffset;
    /* 0x0000 */ const int phase_idOffset;
    /* 0x0000 */ const int message_opcodeOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_1514, *PTAG_UNNAMED_1514;

enum XE_EngineLocator::ENGINE_SEARCH_TYPE
{
  ENGINE_SEARCH_INITIALIZED = 0,
  ENGINE_SEARCH_PENDING = 1,
  ENGINE_SEARCH_ANY = 2,
  ENGINE_SEARCH_LAST = 3,
};

class XE_AutoP<XE_Log>
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 16,
} TAG_UNNAMED_1515, *PTAG_UNNAMED_1515;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1516, *PTAG_UNNAMED_1516;

typedef struct _CRT_DOUBLE
{
  /* 0x0000 */ double x;
} CRT_DOUBLE, *PCRT_DOUBLE; /* size: 0x0008 */

typedef enum
{
  NativeTypes = 1,
} TAG_UNNAMED_1517, *PTAG_UNNAMED_1517;

class XeSqlPkg::hadr_wsfc_bring_ag_listener_online
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_417[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int listener_idOffset;
    /* 0x0000 */ const int dns_nameOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 1,
  NRemainder = 16,
} TAG_UNNAMED_1518, *PTAG_UNNAMED_1518;

struct ISWbemMethodSet
{
}; /* size: 0x0008 */

typedef enum
{
  ClassId = 5120,
  IsTemplate = 0,
  SerializableVirtual = 1,
} TAG_UNNAMED_1519, *PTAG_UNNAMED_1519;

typedef enum
{
  HashEntryLinkOff = 0,
} TAG_UNNAMED_1520, *PTAG_UNNAMED_1520;

enum XeSqlPkg::sp_cache_insert::CustomizableSlots
{
  collect_cached_textSlot = 0,
  collect_database_nameSlot = 1,
  collect_plan_handleSlot = 2,
};

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 0,
} TAG_UNNAMED_1521, *PTAG_UNNAMED_1521;

typedef enum
{
  brick_idIdx = 0,
  resource_brick_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1522, *PTAG_UNNAMED_1522;

class CAutoP<XE_AutoCustomizableAttributes>
{
}; /* size: 0x0008 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1523, *PTAG_UNNAMED_1523;

typedef struct _IMAGE_BASE_RELOCATION
{
  /* 0x0000 */ unsigned long VirtualAddress;
  /* 0x0004 */ unsigned long SizeOfBlock;
} IMAGE_BASE_RELOCATION, *PIMAGE_BASE_RELOCATION; /* size: 0x0008 */

typedef enum
{
  dopIdx = 0,
  statement_typeIdx = 1,
  workspace_memory_grant_kbIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1524, *PTAG_UNNAMED_1524;

class XE_AutoRg<XE_LogSpecs::LogSpec>
{
}; /* size: 0x0008 */

class XE_LogSpecs
{
  /* 0x0000 */ unsigned int m_MaxAffinity;
  /* 0x0004 */ long Padding_418;
  /* 0x0008 */ class XE_AutoRg<XE_LogSpecs::LogSpec> m_logSpecs;
}; /* size: 0x0010 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 1,
  NRemainder = 1,
} TAG_UNNAMED_1525, *PTAG_UNNAMED_1525;

struct tagMODULEENTRY32W
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long th32ModuleID;
  /* 0x0008 */ unsigned long th32ProcessID;
  /* 0x000c */ unsigned long GlblcntUsage;
  /* 0x0010 */ unsigned long ProccntUsage;
  /* 0x0014 */ long Padding_419;
  /* 0x0018 */ unsigned char* modBaseAddr;
  /* 0x0020 */ unsigned long modBaseSize;
  /* 0x0024 */ long Padding_420;
  /* 0x0028 */ struct HINSTANCE__* hModule;
  /* 0x0030 */ wchar_t szModule[256];
  /* 0x0230 */ wchar_t szExePath[260];
}; /* size: 0x0438 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 36,
} TAG_UNNAMED_1526, *PTAG_UNNAMED_1526;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_1527, *PTAG_UNNAMED_1527;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1528, *PTAG_UNNAMED_1528;

class SESListEnum<XEPackage0::XE_LiveWriter::MetadataBlockEntry,8>;

typedef enum
{
  ListElementOffset = 8,
  NextPtrOffset = 0,
} TAG_UNNAMED_1529, *PTAG_UNNAMED_1529;

class XeSqlPkg::plan_guide_unsuccessful
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_421[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int plan_guide_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  manager_idIdx = 0,
  manager_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1530, *PTAG_UNNAMED_1530;

struct XeCloudMinPauseSLock
{
}; /* size: 0x0004 */

enum XEPackage0::PairingTarget::CustomizableAttrIndex
{
  CAI_BEGIN_EVENT = 0,
  CAI_BEGIN_COLUMNS = 1,
  CAI_BEGIN_ACTIONS = 2,
  CAI_END_EVENT = 3,
  CAI_END_COLUMNS = 4,
  CAI_END_ACTIONS = 5,
  CAI_RESPOND_TO_MEMORY_PRESSURE = 6,
  CAI_MAX_ORPHANS = 7,
  CAI_LAST = 8,
};

typedef struct _FILE_INFO_3
{
  /* 0x0000 */ unsigned long fi3_id;
  /* 0x0004 */ unsigned long fi3_permissions;
  /* 0x0008 */ unsigned long fi3_num_locks;
  /* 0x000c */ long Padding_422;
  /* 0x0010 */ wchar_t* fi3_pathname;
  /* 0x0018 */ wchar_t* fi3_username;
} FILE_INFO_3, *PFILE_INFO_3; /* size: 0x0020 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1531, *PTAG_UNNAMED_1531;

typedef enum
{
  hresultIdx = 0,
  descriptionIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1532, *PTAG_UNNAMED_1532;

class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition>::Enum;

typedef struct _ENUM_PAGE_FILE_INFORMATION
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned __int64 TotalSize;
  /* 0x0010 */ unsigned __int64 TotalInUse;
  /* 0x0018 */ unsigned __int64 PeakUsage;
} ENUM_PAGE_FILE_INFORMATION, *PENUM_PAGE_FILE_INFORMATION; /* size: 0x0020 */

enum XEPackage0::XE_FileTarget::FailureCategories
{
  FTFT_LogWrite = 1,
  FTFT_LogCreate = 2,
  FTFT_MetadataSerialize = 4,
  FTFT_LogMiscOp = 8,
  FTFT_SyncOp = 16,
  FTFT_Oom = 32,
  FTFT_Param = 64,
  FTFT_LogWriteDiskFull = 128,
};

enum XEPackage0::XE_FileTarget::CustomizableAttrIndex
{
  FTCAI_LOGNAME = 0,
  FTCAI_LOGSIZE = 1,
  FTCAI_ROLLOVER = 2,
  FTCAI_INCREMENT = 3,
  FTCAI_IGNORE_LEGACY_METADATA = 4,
  FTCAI_LAST = 5,
};

typedef struct _FLAGGED_WORD_BLOB
{
  /* 0x0000 */ unsigned long fFlags;
  /* 0x0004 */ unsigned long clSize;
  /* 0x0008 */ unsigned short asData[1];
  /* 0x000a */ char __PADDING__[2];
} FLAGGED_WORD_BLOB, *PFLAGGED_WORD_BLOB; /* size: 0x000c */

typedef enum
{
  ListElementOffset = 16,
  NextPtrOffset = 8,
} TAG_UNNAMED_1533, *PTAG_UNNAMED_1533;

enum XEPackage0::HistoryTarget::HistoryTargetIndexes
{
  HTI_DIR_PATH = 0,
  HTI_DIR_NAME = 1,
  HTI_MAX_MEMORY_TEXT = 2,
  HTI_MAX_MEMORY_SQL = 3,
  HTI_MAX_MEMORY_GUID = 4,
  HTI_COMPRESSION_LEVEL = 5,
  HTI_SUMMARY_FREQUENCY = 6,
  HTI_TRANSFORMATION_RULES = 7,
  HTI_SUMMARY_RULES = 8,
  HTI_LAST_INDEX = 8,
};

typedef struct _ABC
{
  /* 0x0000 */ int abcA;
  /* 0x0004 */ unsigned int abcB;
  /* 0x0008 */ int abcC;
} ABC, *PABC; /* size: 0x000c */

class XeCloudMinPkg::serepl_api_call
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_423[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int object_addressOffset;
    /* 0x0000 */ const int api_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 15,
  NVld = 0,
  VldEddOffset = 14,
  BufSize = 53,
} TAG_UNNAMED_1534, *PTAG_UNNAMED_1534;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1535, *PTAG_UNNAMED_1535;

struct tagRGBQUAD
{
  /* 0x0000 */ unsigned char rgbBlue;
  /* 0x0001 */ unsigned char rgbGreen;
  /* 0x0002 */ unsigned char rgbRed;
  /* 0x0003 */ unsigned char rgbReserved;
}; /* size: 0x0004 */

class XE_AutoP<XE_LogSpecs>
{
}; /* size: 0x0008 */

enum XEPackage0::RingTarget::RingTargetIndexes
{
  RTI_MEMORY_MAX = 0,
  RTI_OCCURRENCE_NUMBER = 1,
  RTI_MAX_EVENTS = 2,
  RTI_LAST = 3,
};

typedef enum
{
  database_idIdx = 0,
  database_reference_typeIdx = 1,
  lock_modeIdx = 2,
  timeoutIdx = 3,
  lock_optionIdx = 4,
  lock_policyIdx = 5,
  request_sourceIdx = 6,
  error_numberIdx = 7,
  severityIdx = 8,
  stateIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1536, *PTAG_UNNAMED_1536;

class CAutoBase<unsigned char>
{
  /* 0x0000 */ unsigned char* m_pt;
}; /* size: 0x0008 */

enum XEPackage0::RingTarget::DeleteStopReason
{
  DSR_MEM_FREED = 0,
  DSR_NO_MORE_EVENTS = 1,
  DSR_OLD_EVENT = 2,
  DSR_INVALID = -1,
};

typedef struct _devicemodeW
{
  /* 0x0000 */ wchar_t dmDeviceName[32];
  /* 0x0040 */ unsigned short dmSpecVersion;
  /* 0x0042 */ unsigned short dmDriverVersion;
  /* 0x0044 */ unsigned short dmSize;
  /* 0x0046 */ unsigned short dmDriverExtra;
  /* 0x0048 */ unsigned long dmFields;
  union
  {
    struct
    {
      /* 0x004c */ short dmOrientation;
      /* 0x004e */ short dmPaperSize;
      /* 0x0050 */ short dmPaperLength;
      /* 0x0052 */ short dmPaperWidth;
      /* 0x0054 */ short dmScale;
      /* 0x0056 */ short dmCopies;
      /* 0x0058 */ short dmDefaultSource;
      /* 0x005a */ short dmPrintQuality;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x004c */ struct _POINTL dmPosition;
      /* 0x0054 */ unsigned long dmDisplayOrientation;
      /* 0x0058 */ unsigned long dmDisplayFixedOutput;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x005c */ short dmColor;
  /* 0x005e */ short dmDuplex;
  /* 0x0060 */ short dmYResolution;
  /* 0x0062 */ short dmTTOption;
  /* 0x0064 */ short dmCollate;
  /* 0x0066 */ wchar_t dmFormName[32];
  /* 0x00a6 */ unsigned short dmLogPixels;
  /* 0x00a8 */ unsigned long dmBitsPerPel;
  /* 0x00ac */ unsigned long dmPelsWidth;
  /* 0x00b0 */ unsigned long dmPelsHeight;
  union
  {
    /* 0x00b4 */ unsigned long dmDisplayFlags;
    /* 0x00b4 */ unsigned long dmNup;
  }; /* size: 0x0004 */
  /* 0x00b8 */ unsigned long dmDisplayFrequency;
  /* 0x00bc */ unsigned long dmICMMethod;
  /* 0x00c0 */ unsigned long dmICMIntent;
  /* 0x00c4 */ unsigned long dmMediaType;
  /* 0x00c8 */ unsigned long dmDitherType;
  /* 0x00cc */ unsigned long dmReserved1;
  /* 0x00d0 */ unsigned long dmReserved2;
  /* 0x00d4 */ unsigned long dmPanningWidth;
  /* 0x00d8 */ unsigned long dmPanningHeight;
} devicemodeW, *PdevicemodeW; /* size: 0x00dc */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1537, *PTAG_UNNAMED_1537;

class XE_BufferWalker<XE_IMetadata>
{
  /* 0x0000 */ const struct XEEventBufferHeader* m_EventHeader;
  /* 0x0008 */ const struct XEEvent* m_EventMd;
  /* 0x0010 */ const class XE_IMetadata* m_metadata;
  /* 0x0018 */ const struct XEBuffer* m_pBuffer;
  /* 0x0020 */ const unsigned char* m_bufferEnd;
}; /* size: 0x0028 */

class CAutoBase<XEPackage0::BucketizingTarget::Entry>
{
  /* 0x0000 */ class XEPackage0::BucketizingTarget::Entry* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  Offset = 0,
} TAG_UNNAMED_1538, *PTAG_UNNAMED_1538;

struct HMENU__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class XEPackage0::StringCompare<char,1>
{
}; /* size: 0x0001 */

enum XEPackage0::BucketizingTarget::BucketizerTargetIndexes
{
  BTI_SLOTS = 0,
  BTI_FILTERING_EVENT_NAME = 1,
  BTI_SOURCE_TYPE = 2,
  BTI_SOURCE = 3,
};

class XeSqlPkg::metadata_cache_update
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_424[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int update_typeOffset;
    /* 0x0000 */ const int from_brick_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int keyOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 17,
} TAG_UNNAMED_1539, *PTAG_UNNAMED_1539;

typedef enum
{
  delay_location_nameIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1540, *PTAG_UNNAMED_1540;

typedef enum
{
  database_idIdx = 0,
  suspend_statusIdx = 1,
  suspend_sourceIdx = 2,
  group_idIdx = 3,
  replica_idIdx = 4,
  ag_database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1541, *PTAG_UNNAMED_1541;

class XE_ResolvedObject<XEType>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEType* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEType* m_Object;
}; /* size: 0x0020 */

enum XEPackage0::XE_ETWMofBlock::AddResult
{
  HasSpace = 0,
  Full = 1,
};

class XeSqlPkg::remote_dmv_stream_get_rows_client
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_425[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  target_brick_idIdx = 0,
  statement_start_offsetIdx = 1,
  statement_end_offsetIdx = 2,
  parent_plan_handleIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1542, *PTAG_UNNAMED_1542;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1543, *PTAG_UNNAMED_1543;

class XE_ResolvedObjectXML<XEPredicateCompare>
{
}; /* size: 0x0020 */

typedef struct _wireSAFEARR_UNKNOWN
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_426;
  /* 0x0008 */ struct IUnknown** apUnknown;
} wireSAFEARR_UNKNOWN, *PwireSAFEARR_UNKNOWN; /* size: 0x0010 */

typedef struct _wireSAFEARR_VARIANT
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_427;
  /* 0x0008 */ struct _wireVARIANT** aVariant;
} wireSAFEARR_VARIANT, *PwireSAFEARR_VARIANT; /* size: 0x0010 */

typedef struct _wireSAFEARR_HAVEIID
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ long Padding_428;
  /* 0x0008 */ struct IUnknown** apUnknown;
  /* 0x0010 */ struct _GUID iid;
} wireSAFEARR_HAVEIID, *PwireSAFEARR_HAVEIID; /* size: 0x0020 */

typedef struct _BYTE_SIZEDARR
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ long Padding_429;
  /* 0x0008 */ unsigned char* pData;
} BYTE_SIZEDARR, *PBYTE_SIZEDARR; /* size: 0x0010 */

typedef struct _SHORT_SIZEDARR
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ long Padding_430;
  /* 0x0008 */ unsigned short* pData;
} SHORT_SIZEDARR, *PSHORT_SIZEDARR; /* size: 0x0010 */

typedef struct _HYPER_SIZEDARR
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ long Padding_431;
  /* 0x0008 */ __int64* pData;
} HYPER_SIZEDARR, *PHYPER_SIZEDARR; /* size: 0x0010 */

typedef union _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001
{
  union
  {
    /* 0x0000 */ struct _wireSAFEARR_BSTR BstrStr;
    /* 0x0000 */ struct _wireSAFEARR_UNKNOWN UnknownStr;
    /* 0x0000 */ struct _wireSAFEARR_DISPATCH DispatchStr;
    /* 0x0000 */ struct _wireSAFEARR_VARIANT VariantStr;
    /* 0x0000 */ struct _wireSAFEARR_BRECORD RecordStr;
    /* 0x0000 */ struct _wireSAFEARR_HAVEIID HaveIidStr;
    /* 0x0000 */ struct _BYTE_SIZEDARR ByteStr;
    /* 0x0000 */ struct _SHORT_SIZEDARR WordStr;
    /* 0x0000 */ struct _LONG_SIZEDARR LongStr;
    /* 0x0000 */ struct _HYPER_SIZEDARR HyperStr;
  }; /* size: 0x0020 */
} wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001, *PwireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001; /* size: 0x0020 */

typedef enum
{
  table_nameIdx = 0,
  index_nameIdx = 1,
  schema_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1544, *PTAG_UNNAMED_1544;

enum XEPackage0::XE_ETWEventStream::Phase
{
  Start = 0,
  FixedSized = 1,
  EventDataLength = 2,
  EventDataBody = 3,
  EventDataNullA = 4,
  EventDataNullW = 5,
  ActionDataMetadata = 6,
  ActionDataBody = 7,
  Done = 8,
};

struct MatrixOpSLock
{
}; /* size: 0x0004 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1545, *PTAG_UNNAMED_1545;

typedef enum
{
  database_idIdx = 0,
  commit_policyIdx = 1,
  delayIdx = 2,
  group_idIdx = 3,
  replica_idIdx = 4,
  ag_database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1546, *PTAG_UNNAMED_1546;

typedef enum
{
  AtStart = -1,
} TAG_UNNAMED_1547, *PTAG_UNNAMED_1547;

struct tagRemHGLOBAL
{
  /* 0x0000 */ long fNullHGlobal;
  /* 0x0004 */ unsigned long cbData;
  /* 0x0008 */ unsigned char data[1];
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1548, *PTAG_UNNAMED_1548;

typedef enum
{
  HashEntryLinkOff = 0,
} TAG_UNNAMED_1549, *PTAG_UNNAMED_1549;

enum XE_ConstantElimination<unsigned short,4096>::STREAM_STATE
{
  NOT_A_LETTER = 0,
  SOME_LETTER = 1,
  INSIDE_STRING_CONSTANT = 2,
  INSIDE_NUMERIC_CONSTANT = 3,
  INSIDE_BINARY_CONSTANT = 4,
  INSIDE_COMMENT_BLOCK = 5,
  INSIDE_COMMENT_LINE = 6,
};

typedef struct _PROTOGON_STATISTICS
{
  /* 0x0000 */ unsigned long Unused;
} PROTOGON_STATISTICS, *PPROTOGON_STATISTICS; /* size: 0x0004 */

class XeSqlPkg::check_message_reply
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_432[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int reply_typeOffset;
    /* 0x0000 */ const int message_opcodeOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1550, *PTAG_UNNAMED_1550;

enum HistoryTargetVersion
{
  HISTORY_TARGET_VERSION_0 = 0x42524557,
};

enum DBPROPENUM21
{
  DBPROP_TRUSTEE_USERNAME = 241,
  DBPROP_TRUSTEE_AUTHENTICATION = 242,
  DBPROP_TRUSTEE_NEWAUTHENTICATION = 243,
  DBPROP_IRow = 263,
  DBPROP_IRowChange = 264,
  DBPROP_IRowSchemaChange = 265,
  DBPROP_IGetRow = 266,
  DBPROP_IScopedOperations = 267,
  DBPROP_IBindResource = 268,
  DBPROP_ICreateRow = 269,
  DBPROP_INIT_BINDFLAGS = 270,
  DBPROP_INIT_LOCKOWNER = 271,
  DBPROP_GENERATEURL = 273,
  DBPROP_IDBBinderProperties = 274,
  DBPROP_IColumnsInfo2 = 275,
  DBPROP_IRegisterProvider = 276,
  DBPROP_IGetSession = 277,
  DBPROP_IGetSourceRow = 278,
  DBPROP_IRowsetCurrentIndex = 279,
  DBPROP_OPENROWSETSUPPORT = 280,
  DBPROP_COL_ISLONG = 281,
};

typedef enum
{
  request_typeIdx = 0,
  file_byte_offsetIdx = 1,
  file_byte_countIdx = 2,
  retry_countIdx = 3,
  request_idIdx = 4,
  file_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1551, *PTAG_UNNAMED_1551;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_1552, *PTAG_UNNAMED_1552;

typedef struct __vc_attributes::propputAttribute
{
} _vc_attributes::propputAttribute, *P_vc_attributes::propputAttribute; /* size: 0x0001 */

typedef enum _TRUSTEE_FORM
{
  TRUSTEE_IS_SID = 0,
  TRUSTEE_IS_NAME = 1,
  TRUSTEE_BAD_FORM = 2,
  TRUSTEE_IS_OBJECTS_AND_SID = 3,
  TRUSTEE_IS_OBJECTS_AND_NAME = 4,
} TRUSTEE_FORM, *PTRUSTEE_FORM;

class Spinlock<184,3,1>
{
}; /* size: 0x0004 */

typedef enum _SYSDBG_COMMAND
{
  SysDbgQueryModuleInformation = 0,
  SysDbgQueryTraceInformation = 1,
  SysDbgSetTracepoint = 2,
  SysDbgSetSpecialCall = 3,
  SysDbgClearSpecialCalls = 4,
  SysDbgQuerySpecialCalls = 5,
  SysDbgBreakPoint = 6,
  SysDbgQueryVersion = 7,
  SysDbgReadVirtual = 8,
  SysDbgWriteVirtual = 9,
  SysDbgReadPhysical = 10,
  SysDbgWritePhysical = 11,
  SysDbgReadControlSpace = 12,
  SysDbgWriteControlSpace = 13,
  SysDbgReadIoSpace = 14,
  SysDbgWriteIoSpace = 15,
  SysDbgReadMsr = 16,
  SysDbgWriteMsr = 17,
  SysDbgReadBusData = 18,
  SysDbgWriteBusData = 19,
  SysDbgCheckLowMemory = 20,
  SysDbgEnableKernelDebugger = 21,
  SysDbgDisableKernelDebugger = 22,
  SysDbgGetAutoKdEnable = 23,
  SysDbgSetAutoKdEnable = 24,
  SysDbgGetPrintBufferSize = 25,
  SysDbgSetPrintBufferSize = 26,
  SysDbgGetKdUmExceptionEnable = 27,
  SysDbgSetKdUmExceptionEnable = 28,
  SysDbgGetTriageDump = 29,
  SysDbgGetKdBlockEnable = 30,
  SysDbgSetKdBlockEnable = 31,
  SysDbgRegisterForUmBreakInfo = 32,
  SysDbgGetUmBreakPid = 33,
  SysDbgClearUmBreakPid = 34,
  SysDbgGetUmAttachPid = 35,
  SysDbgClearUmAttachPid = 36,
} SYSDBG_COMMAND, *PSYSDBG_COMMAND;

typedef enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION
{
  TOKEN_SECURITY_ATTRIBUTE_OPERATION_NONE = 0,
  TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1,
  TOKEN_SECURITY_ATTRIBUTE_OPERATION_ADD = 2,
  TOKEN_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3,
  TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4,
} TOKEN_SECURITY_ATTRIBUTE_OPERATION, *PTOKEN_SECURITY_ATTRIBUTE_OPERATION;

typedef struct _EVENT_INSTANCE_HEADER
{
  /* 0x0000 */ unsigned short Size;
  union
  {
    /* 0x0002 */ unsigned short FieldTypeFlags;
    struct
    {
      /* 0x0002 */ unsigned char HeaderType;
      /* 0x0003 */ unsigned char MarkerFlags;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char Type;
      /* 0x0005 */ unsigned char Level;
      /* 0x0006 */ unsigned short Version;
    } /* size: 0x0004 */ Class;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ThreadId;
  /* 0x000c */ unsigned long ProcessId;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ unsigned __int64 RegHandle;
  /* 0x0020 */ unsigned long InstanceId;
  /* 0x0024 */ unsigned long ParentInstanceId;
  union
  {
    struct
    {
      /* 0x0028 */ unsigned long KernelTime;
      /* 0x002c */ unsigned long UserTime;
    }; /* size: 0x0008 */
    /* 0x0028 */ unsigned __int64 ProcessorTime;
    struct
    {
      /* 0x0028 */ unsigned long EventId;
      /* 0x002c */ unsigned long Flags;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  /* 0x0030 */ unsigned __int64 ParentRegHandle;
} EVENT_INSTANCE_HEADER, *PEVENT_INSTANCE_HEADER; /* size: 0x0038 */

enum ISOLATIONLEVEL
{
  ISOLATIONLEVEL_UNSPECIFIED = -1,
  ISOLATIONLEVEL_CHAOS = 16,
  ISOLATIONLEVEL_READUNCOMMITTED = 256,
  ISOLATIONLEVEL_BROWSE = 256,
  ISOLATIONLEVEL_CURSORSTABILITY = 4096,
  ISOLATIONLEVEL_READCOMMITTED = 4096,
  ISOLATIONLEVEL_REPEATABLEREAD = 0x10000,
  ISOLATIONLEVEL_SERIALIZABLE = 0x100000,
  ISOLATIONLEVEL_ISOLATED = 0x100000,
};

struct tagACCESSTIMEOUT
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long iTimeOutMSec;
}; /* size: 0x000c */

enum DBCOLUMNFLAGSENUM
{
  DBCOLUMNFLAGS_ISBOOKMARK = 1,
  DBCOLUMNFLAGS_MAYDEFER = 2,
  DBCOLUMNFLAGS_WRITE = 4,
  DBCOLUMNFLAGS_WRITEUNKNOWN = 8,
  DBCOLUMNFLAGS_ISFIXEDLENGTH = 16,
  DBCOLUMNFLAGS_ISNULLABLE = 32,
  DBCOLUMNFLAGS_MAYBENULL = 64,
  DBCOLUMNFLAGS_ISLONG = 128,
  DBCOLUMNFLAGS_ISROWID = 256,
  DBCOLUMNFLAGS_ISROWVER = 512,
  DBCOLUMNFLAGS_CACHEDEFERRED = 4096,
};

typedef struct _DRIVER_VERIFIER_THUNK_PAIRS
{
  /* 0x0000 */ void* PristineRoutine /* function */;
  /* 0x0008 */ void* NewRoutine /* function */;
} DRIVER_VERIFIER_THUNK_PAIRS, *PDRIVER_VERIFIER_THUNK_PAIRS; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1553, *PTAG_UNNAMED_1553;

struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_433;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[16];
}; /* size: 0x0108 */

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1554, *PTAG_UNNAMED_1554;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_locate_or_insertIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1555, *PTAG_UNNAMED_1555;

class CXRLEZeroColumn<unsigned short>
{
  union
  {
    /* 0x0000 */ const unsigned short ZERO_HEADER_HIGH;
    /* 0x0000 */ const unsigned short ZERO_HEADER_LOW;
    /* 0x0000 */ const unsigned short ZERO_HEADER_MASK;
    /* 0x0000 */ const unsigned short DUAL_SYMBOL;
  }; /* size: 0x0002 */
  /* 0x0002 */ char Padding_434[22];
  /* 0x0018 */ unsigned short m_currentValue;
  /* 0x001a */ char Padding_435[6];
  /* 0x0020 */ unsigned short* m_startPointer;
  /* 0x0028 */ unsigned short m_zeroLength;
  /* 0x002a */ char Padding_436[2];
  /* 0x002c */ int m_fDecompressed;
  /* 0x0030 */ unsigned int m_realPosition;
}; /* size: 0x0038 */

enum XACTSTAT
{
  XACTSTAT_NONE = 0,
  XACTSTAT_OPENNORMAL = 1,
  XACTSTAT_OPENREFUSED = 2,
  XACTSTAT_PREPARING = 4,
  XACTSTAT_PREPARED = 8,
  XACTSTAT_PREPARERETAINING = 16,
  XACTSTAT_PREPARERETAINED = 32,
  XACTSTAT_COMMITTING = 64,
  XACTSTAT_COMMITRETAINING = 128,
  XACTSTAT_ABORTING = 256,
  XACTSTAT_ABORTED = 512,
  XACTSTAT_COMMITTED = 1024,
  XACTSTAT_HEURISTIC_ABORT = 2048,
  XACTSTAT_HEURISTIC_COMMIT = 4096,
  XACTSTAT_HEURISTIC_DAMAGE = 8192,
  XACTSTAT_HEURISTIC_DANGER = 16384,
  XACTSTAT_FORCED_ABORT = 0xffff8000,
  XACTSTAT_FORCED_COMMIT = 0x10000,
  XACTSTAT_INDOUBT = 0x20000,
  XACTSTAT_CLOSED = 0x40000,
  XACTSTAT_OPEN = 3,
  XACTSTAT_NOTPREPARED = 0x7ffc3,
  XACTSTAT_ALL = 0x7ffff,
};

class Spinlock<332,0,0>
{
}; /* size: 0x0004 */

class std::bad_array_new_length
{
}; /* size: 0x0018 */

enum DBPROPENUM15
{
  DBPROP_FILTERCOMPAREOPS = 209,
  DBPROP_FINDCOMPAREOPS = 210,
  DBPROP_IChapteredRowset = 202,
  DBPROP_IDBAsynchStatus = 203,
  DBPROP_IRowsetFind = 204,
  DBPROP_IRowsetView = 212,
  DBPROP_IViewChapter = 213,
  DBPROP_IViewFilter = 214,
  DBPROP_IViewRowset = 215,
  DBPROP_IViewSort = 216,
  DBPROP_INIT_ASYNCH = 200,
  DBPROP_MAXOPENCHAPTERS = 199,
  DBPROP_MAXORSINFILTER = 205,
  DBPROP_MAXSORTCOLUMNS = 206,
  DBPROP_ROWSET_ASYNCH = 201,
  DBPROP_SORTONINDEX = 207,
};

enum DBPROPENUM
{
  DBPROP_ABORTPRESERVE = 2,
  DBPROP_ACTIVESESSIONS = 3,
  DBPROP_APPENDONLY = 187,
  DBPROP_ASYNCTXNABORT = 168,
  DBPROP_ASYNCTXNCOMMIT = 4,
  DBPROP_AUTH_CACHE_AUTHINFO = 5,
  DBPROP_AUTH_ENCRYPT_PASSWORD = 6,
  DBPROP_AUTH_INTEGRATED = 7,
  DBPROP_AUTH_MASK_PASSWORD = 8,
  DBPROP_AUTH_PASSWORD = 9,
  DBPROP_AUTH_PERSIST_ENCRYPTED = 10,
  DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO = 11,
  DBPROP_AUTH_USERID = 12,
  DBPROP_BLOCKINGSTORAGEOBJECTS = 13,
  DBPROP_BOOKMARKS = 14,
  DBPROP_BOOKMARKSKIPPED = 15,
  DBPROP_BOOKMARKTYPE = 16,
  DBPROP_BYREFACCESSORS = 120,
  DBPROP_CACHEDEFERRED = 17,
  DBPROP_CANFETCHBACKWARDS = 18,
  DBPROP_CANHOLDROWS = 19,
  DBPROP_CANSCROLLBACKWARDS = 21,
  DBPROP_CATALOGLOCATION = 22,
  DBPROP_CATALOGTERM = 23,
  DBPROP_CATALOGUSAGE = 24,
  DBPROP_CHANGEINSERTEDROWS = 188,
  DBPROP_COL_AUTOINCREMENT = 26,
  DBPROP_COL_DEFAULT = 27,
  DBPROP_COL_DESCRIPTION = 28,
  DBPROP_COL_FIXEDLENGTH = 167,
  DBPROP_COL_NULLABLE = 29,
  DBPROP_COL_PRIMARYKEY = 30,
  DBPROP_COL_UNIQUE = 31,
  DBPROP_COLUMNDEFINITION = 32,
  DBPROP_COLUMNRESTRICT = 33,
  DBPROP_COMMANDTIMEOUT = 34,
  DBPROP_COMMITPRESERVE = 35,
  DBPROP_CONCATNULLBEHAVIOR = 36,
  DBPROP_CURRENTCATALOG = 37,
  DBPROP_DATASOURCENAME = 38,
  DBPROP_DATASOURCEREADONLY = 39,
  DBPROP_DBMSNAME = 40,
  DBPROP_DBMSVER = 41,
  DBPROP_DEFERRED = 42,
  DBPROP_DELAYSTORAGEOBJECTS = 43,
  DBPROP_DSOTHREADMODEL = 169,
  DBPROP_GROUPBY = 44,
  DBPROP_HETEROGENEOUSTABLES = 45,
  DBPROP_IAccessor = 121,
  DBPROP_IColumnsInfo = 122,
  DBPROP_IColumnsRowset = 123,
  DBPROP_IConnectionPointContainer = 124,
  DBPROP_IConvertType = 194,
  DBPROP_IRowset = 126,
  DBPROP_IRowsetChange = 127,
  DBPROP_IRowsetIdentity = 128,
  DBPROP_IRowsetIndex = 159,
  DBPROP_IRowsetInfo = 129,
  DBPROP_IRowsetLocate = 130,
  DBPROP_IRowsetResynch = 132,
  DBPROP_IRowsetScroll = 133,
  DBPROP_IRowsetUpdate = 134,
  DBPROP_ISupportErrorInfo = 135,
  DBPROP_ILockBytes = 136,
  DBPROP_ISequentialStream = 137,
  DBPROP_IStorage = 138,
  DBPROP_IStream = 139,
  DBPROP_IDENTIFIERCASE = 46,
  DBPROP_IMMOBILEROWS = 47,
  DBPROP_INDEX_AUTOUPDATE = 48,
  DBPROP_INDEX_CLUSTERED = 49,
  DBPROP_INDEX_FILLFACTOR = 50,
  DBPROP_INDEX_INITIALSIZE = 51,
  DBPROP_INDEX_NULLCOLLATION = 52,
  DBPROP_INDEX_NULLS = 53,
  DBPROP_INDEX_PRIMARYKEY = 54,
  DBPROP_INDEX_SORTBOOKMARKS = 55,
  DBPROP_INDEX_TEMPINDEX = 163,
  DBPROP_INDEX_TYPE = 56,
  DBPROP_INDEX_UNIQUE = 57,
  DBPROP_INIT_DATASOURCE = 59,
  DBPROP_INIT_HWND = 60,
  DBPROP_INIT_IMPERSONATION_LEVEL = 61,
  DBPROP_INIT_LCID = 186,
  DBPROP_INIT_LOCATION = 62,
  DBPROP_INIT_MODE = 63,
  DBPROP_INIT_PROMPT = 64,
  DBPROP_INIT_PROTECTION_LEVEL = 65,
  DBPROP_INIT_PROVIDERSTRING = 160,
  DBPROP_INIT_TIMEOUT = 66,
  DBPROP_LITERALBOOKMARKS = 67,
  DBPROP_LITERALIDENTITY = 68,
  DBPROP_MAXINDEXSIZE = 70,
  DBPROP_MAXOPENROWS = 71,
  DBPROP_MAXPENDINGROWS = 72,
  DBPROP_MAXROWS = 73,
  DBPROP_MAXROWSIZE = 74,
  DBPROP_MAXROWSIZEINCLUDESBLOB = 75,
  DBPROP_MAXTABLESINSELECT = 76,
  DBPROP_MAYWRITECOLUMN = 77,
  DBPROP_MEMORYUSAGE = 78,
  DBPROP_MULTIPLEPARAMSETS = 191,
  DBPROP_MULTIPLERESULTS = 196,
  DBPROP_MULTIPLESTORAGEOBJECTS = 80,
  DBPROP_MULTITABLEUPDATE = 81,
  DBPROP_NOTIFICATIONGRANULARITY = 198,
  DBPROP_NOTIFICATIONPHASES = 82,
  DBPROP_NOTIFYCOLUMNSET = 171,
  DBPROP_NOTIFYROWDELETE = 173,
  DBPROP_NOTIFYROWFIRSTCHANGE = 174,
  DBPROP_NOTIFYROWINSERT = 175,
  DBPROP_NOTIFYROWRESYNCH = 177,
  DBPROP_NOTIFYROWSETCHANGED = 211,
  DBPROP_NOTIFYROWSETRELEASE = 178,
  DBPROP_NOTIFYROWSETFETCHPOSITIONCHANGE = 179,
  DBPROP_NOTIFYROWUNDOCHANGE = 180,
  DBPROP_NOTIFYROWUNDODELETE = 181,
  DBPROP_NOTIFYROWUNDOINSERT = 182,
  DBPROP_NOTIFYROWUPDATE = 183,
  DBPROP_NULLCOLLATION = 83,
  DBPROP_OLEOBJECTS = 84,
  DBPROP_ORDERBYCOLUMNSINSELECT = 85,
  DBPROP_ORDEREDBOOKMARKS = 86,
  DBPROP_OTHERINSERT = 87,
  DBPROP_OTHERUPDATEDELETE = 88,
  DBPROP_OUTPUTPARAMETERAVAILABILITY = 184,
  DBPROP_OWNINSERT = 89,
  DBPROP_OWNUPDATEDELETE = 90,
  DBPROP_PERSISTENTIDTYPE = 185,
  DBPROP_PREPAREABORTBEHAVIOR = 91,
  DBPROP_PREPARECOMMITBEHAVIOR = 92,
  DBPROP_PROCEDURETERM = 93,
  DBPROP_PROVIDERNAME = 96,
  DBPROP_PROVIDEROLEDBVER = 97,
  DBPROP_PROVIDERVER = 98,
  DBPROP_QUICKRESTART = 99,
  DBPROP_QUOTEDIDENTIFIERCASE = 100,
  DBPROP_REENTRANTEVENTS = 101,
  DBPROP_REMOVEDELETED = 102,
  DBPROP_REPORTMULTIPLECHANGES = 103,
  DBPROP_RETURNPENDINGINSERTS = 189,
  DBPROP_ROWRESTRICT = 104,
  DBPROP_ROWSETCONVERSIONSONCOMMAND = 192,
  DBPROP_ROWTHREADMODEL = 105,
  DBPROP_SCHEMATERM = 106,
  DBPROP_SCHEMAUSAGE = 107,
  DBPROP_SERVERCURSOR = 108,
  DBPROP_SESS_AUTOCOMMITISOLEVELS = 190,
  DBPROP_SQLSUPPORT = 109,
  DBPROP_STRONGIDENTITY = 119,
  DBPROP_STRUCTUREDSTORAGE = 111,
  DBPROP_SUBQUERIES = 112,
  DBPROP_SUPPORTEDTXNDDL = 161,
  DBPROP_SUPPORTEDTXNISOLEVELS = 113,
  DBPROP_SUPPORTEDTXNISORETAIN = 114,
  DBPROP_TABLETERM = 115,
  DBPROP_TBL_TEMPTABLE = 140,
  DBPROP_TRANSACTEDOBJECT = 116,
  DBPROP_UPDATABILITY = 117,
  DBPROP_USERNAME = 118,
};

enum ESbEndpointType
{
  e_uepInvalid = -1,
  e_uepBroker = 0,
  e_uepDbMirroring = 1,
  e_uepAsyncTransport = 2,
  e_uepAsyncTransportFwd = 3,
  e_uepProxy = 4,
  e_uepCount = 5,
  e_uepAny = 6,
};

typedef enum
{
  control_actionIdx = 0,
  durationIdx = 1,
  availability_group_idIdx = 2,
  local_availability_replica_idIdx = 3,
  database_replica_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1556, *PTAG_UNNAMED_1556;

typedef enum _SE_OBJECT_TYPE
{
  SE_UNKNOWN_OBJECT_TYPE = 0,
  SE_FILE_OBJECT = 1,
  SE_SERVICE = 2,
  SE_PRINTER = 3,
  SE_REGISTRY_KEY = 4,
  SE_LMSHARE = 5,
  SE_KERNEL_OBJECT = 6,
  SE_WINDOW_OBJECT = 7,
  SE_DS_OBJECT = 8,
  SE_DS_OBJECT_ALL = 9,
  SE_PROVIDER_DEFINED_OBJECT = 10,
  SE_WMIGUID_OBJECT = 11,
  SE_REGISTRY_WOW64_32KEY = 12,
} SE_OBJECT_TYPE, *PSE_OBJECT_TYPE;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
  /* 0x0000 */ unsigned long SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT; /* size: 0x0004 */

typedef enum
{
  dliStartProcessing = 0,
  dliNotePreLoadLibrary = 1,
  dliNotePreGetProcAddress = 2,
  dliFailLoadLib = 3,
  dliFailGetProc = 4,
  dliNoteEndProcessing = 5,
} TAG_UNNAMED_1557, *PTAG_UNNAMED_1557;

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  worker_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1558, *PTAG_UNNAMED_1558;

typedef enum _PROCESSINFOCLASS
{
  ProcessBasicInformation = 0,
  ProcessQuotaLimits = 1,
  ProcessIoCounters = 2,
  ProcessVmCounters = 3,
  ProcessTimes = 4,
  ProcessBasePriority = 5,
  ProcessRaisePriority = 6,
  ProcessDebugPort = 7,
  ProcessExceptionPort = 8,
  ProcessAccessToken = 9,
  ProcessLdtInformation = 10,
  ProcessLdtSize = 11,
  ProcessDefaultHardErrorMode = 12,
  ProcessIoPortHandlers = 13,
  ProcessPooledUsageAndLimits = 14,
  ProcessWorkingSetWatch = 15,
  ProcessUserModeIOPL = 16,
  ProcessEnableAlignmentFaultFixup = 17,
  ProcessPriorityClass = 18,
  ProcessWx86Information = 19,
  ProcessHandleCount = 20,
  ProcessAffinityMask = 21,
  ProcessPriorityBoost = 22,
  ProcessDeviceMap = 23,
  ProcessSessionInformation = 24,
  ProcessForegroundInformation = 25,
  ProcessWow64Information = 26,
  ProcessImageFileName = 27,
  ProcessLUIDDeviceMapsEnabled = 28,
  ProcessBreakOnTermination = 29,
  ProcessDebugObjectHandle = 30,
  ProcessDebugFlags = 31,
  ProcessHandleTracing = 32,
  ProcessIoPriority = 33,
  ProcessExecuteFlags = 34,
  ProcessTlsInformation = 35,
  ProcessCookie = 36,
  ProcessImageInformation = 37,
  ProcessCycleTime = 38,
  ProcessPagePriority = 39,
  ProcessInstrumentationCallback = 40,
  ProcessThreadStackAllocation = 41,
  ProcessWorkingSetWatchEx = 42,
  ProcessImageFileNameWin32 = 43,
  ProcessImageFileMapping = 44,
  ProcessAffinityUpdateMode = 45,
  ProcessMemoryAllocationMode = 46,
  ProcessGroupInformation = 47,
  ProcessTokenVirtualizationEnabled = 48,
  ProcessConsoleHostProcess = 49,
  ProcessWindowInformation = 50,
  ProcessHandleInformation = 51,
  ProcessMitigationPolicy = 52,
  ProcessDynamicFunctionTableInformation = 53,
  ProcessHandleCheckingMode = 54,
  ProcessKeepAliveCount = 55,
  ProcessRevokeFileHandles = 56,
  MaxProcessInfoClass = 57,
} PROCESSINFOCLASS, *PPROCESSINFOCLASS;

typedef enum _PS_ATTRIBUTE_NUM
{
  PsAttributeParentProcess = 0,
  PsAttributeDebugObject = 1,
  PsAttributeToken = 2,
  PsAttributeClientId = 3,
  PsAttributeTebAddress = 4,
  PsAttributeImageName = 5,
  PsAttributeImageInfo = 6,
  PsAttributeMemoryReserve = 7,
  PsAttributePriorityClass = 8,
  PsAttributeErrorMode = 9,
  PsAttributeStdHandleInfo = 10,
  PsAttributeHandleList = 11,
  PsAttributeGroupAffinity = 12,
  PsAttributePreferredNode = 13,
  PsAttributeIdealProcessor = 14,
  PsAttributeUmsThread = 15,
  PsAttributeMitigationOptions = 16,
  PsAttributeSecurityCapabilities = 17,
  PsAttributeMax = 18,
} PS_ATTRIBUTE_NUM, *PPS_ATTRIBUTE_NUM;

class XEPackage0::CompareMinMax
{
}; /* size: 0x0001 */

enum CLUSGROUP_TYPE
{
  ClusGroupTypeCoreCluster = 1,
  ClusGroupTypeAvailableStorage = 2,
  ClusGroupTypeTemporary = 3,
  ClusGroupTypeSharedVolume = 4,
  ClusGroupTypeStoragePool = 5,
  ClusGroupTypeFileServer = 100,
  ClusGroupTypePrintServer = 101,
  ClusGroupTypeDhcpServer = 102,
  ClusGroupTypeDtc = 103,
  ClusGroupTypeMsmq = 104,
  ClusGroupTypeWins = 105,
  ClusGroupTypeStandAloneDfs = 106,
  ClusGroupTypeGenericApplication = 107,
  ClusGroupTypeGenericService = 108,
  ClusGroupTypeGenericScript = 109,
  ClusGroupTypeIScsiNameService = 110,
  ClusGroupTypeVirtualMachine = 111,
  ClusGroupTypeTsSessionBroker = 112,
  ClusGroupTypeIScsiTarget = 113,
  ClusGroupTypeScaleoutFileServer = 114,
  ClusGroupTypeVMReplicaBroker = 115,
  ClusGroupTypeUnknown = 9999,
};

typedef struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NextEntryOffset;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ unsigned long ViewFailures;
  /* 0x0010 */ unsigned __int64 NumberOfBytesAvailable;
  /* 0x0018 */ unsigned __int64 NumberOfBytesAvailableContiguous;
} SYSTEM_SESSION_MAPPED_VIEW_INFORMATION, *PSYSTEM_SESSION_MAPPED_VIEW_INFORMATION; /* size: 0x0020 */

typedef enum
{
  ElementOffset = 0,
  NextPtrOffset = 8,
  AnchorOffset = 8,
} TAG_UNNAMED_1559, *PTAG_UNNAMED_1559;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1560, *PTAG_UNNAMED_1560;

class CAutoRg<char>
{
}; /* size: 0x0008 */

typedef enum _PLUGPLAY_CONTROL_CLASS
{
  PlugPlayControlEnumerateDevice = 0,
  PlugPlayControlRegisterNewDevice = 1,
  PlugPlayControlDeregisterDevice = 2,
  PlugPlayControlInitializeDevice = 3,
  PlugPlayControlStartDevice = 4,
  PlugPlayControlUnlockDevice = 5,
  PlugPlayControlQueryAndRemoveDevice = 6,
  PlugPlayControlUserResponse = 7,
  PlugPlayControlGenerateLegacyDevice = 8,
  PlugPlayControlGetInterfaceDeviceList = 9,
  PlugPlayControlProperty = 10,
  PlugPlayControlDeviceClassAssociation = 11,
  PlugPlayControlGetRelatedDevice = 12,
  PlugPlayControlGetInterfaceDeviceAlias = 13,
  PlugPlayControlDeviceStatus = 14,
  PlugPlayControlGetDeviceDepth = 15,
  PlugPlayControlQueryDeviceRelations = 16,
  PlugPlayControlTargetDeviceRelation = 17,
  PlugPlayControlQueryConflictList = 18,
  PlugPlayControlRetrieveDock = 19,
  PlugPlayControlResetDevice = 20,
  PlugPlayControlHaltDevice = 21,
  PlugPlayControlGetBlockedDriverList = 22,
  MaxPlugPlayControl = 23,
} PLUGPLAY_CONTROL_CLASS, *PPLUGPLAY_CONTROL_CLASS;

typedef struct _MESSAGE_RESOURCE_ENTRY
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned char Text[1];
  /* 0x0005 */ char __PADDING__[1];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY; /* size: 0x0006 */

class SpinlockHolder<61,16,1>;

typedef struct _WKSTA_INFO_1049
{
  /* 0x0000 */ int wki1049_use_unlock_behind;
} WKSTA_INFO_1049, *PWKSTA_INFO_1049; /* size: 0x0004 */

typedef enum
{
  thread_idIdx = 0,
  reply_typeIdx = 1,
  message_opcodeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1561, *PTAG_UNNAMED_1561;

class Spinlock<2,19,1>
{
}; /* size: 0x0004 */

typedef enum _INTERFACE_TYPE
{
  InterfaceTypeUndefined = -1,
  Internal = 0,
  Isa = 1,
  Eisa = 2,
  MicroChannel = 3,
  TurboChannel = 4,
  PCIBus = 5,
  VMEBus = 6,
  NuBus = 7,
  PCMCIABus = 8,
  CBus = 9,
  MPIBus = 10,
  MPSABus = 11,
  ProcessorInternal = 12,
  InternalPowerBus = 13,
  PNPISABus = 14,
  PNPBus = 15,
  Vmcs = 16,
  ACPIBus = 17,
  MaximumInterfaceType = 18,
} INTERFACE_TYPE, *PINTERFACE_TYPE;

typedef enum _KPROFILE_SOURCE
{
  ProfileTime = 0,
  ProfileAlignmentFixup = 1,
  ProfileTotalIssues = 2,
  ProfilePipelineDry = 3,
  ProfileLoadInstructions = 4,
  ProfilePipelineFrozen = 5,
  ProfileBranchInstructions = 6,
  ProfileTotalNonissues = 7,
  ProfileDcacheMisses = 8,
  ProfileIcacheMisses = 9,
  ProfileCacheMisses = 10,
  ProfileBranchMispredictions = 11,
  ProfileStoreInstructions = 12,
  ProfileFpInstructions = 13,
  ProfileIntegerInstructions = 14,
  Profile2Issue = 15,
  Profile3Issue = 16,
  Profile4Issue = 17,
  ProfileSpecialInstructions = 18,
  ProfileTotalCycles = 19,
  ProfileIcacheIssues = 20,
  ProfileDcacheAccesses = 21,
  ProfileMemoryBarrierCycles = 22,
  ProfileLoadLinkedIssues = 23,
  ProfileMaximum = 24,
} KPROFILE_SOURCE, *PKPROFILE_SOURCE;

struct XEPackage0::DictionaryPartition
{
  /* 0x0000 */ class XE_CXFileWriter* m_pDictionaryStore;
  /* 0x0008 */ class RollingDictionaryInterface* m_pDictionary;
  /* 0x0010 */ void* m_lock;
  /* 0x0018 */ enum DictionaryType m_type;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct MasterMetadataRecord
{
  /* 0x0000 */ unsigned int eventPartitionCount;
  /* 0x0004 */ unsigned int dictionaryPartitionCount;
  /* 0x0008 */ unsigned int eventsPerEventTable;
  /* 0x000c */ unsigned int summaryStreamGeneration;
  /* 0x0010 */ unsigned int eventPartitionGenerations[128];
  /* 0x0210 */ unsigned int dictionaryPartitionGenerations[768];
}; /* size: 0x0e10 */

struct CXTimelineEntry
{
  /* 0x0000 */ __int64 time;
  /* 0x0008 */ unsigned long flushFrame;
  /* 0x000c */ unsigned long streamFrame;
}; /* size: 0x0010 */

class XEPackage0::HistoryTargetMetadataHelper
{
  /* 0x0000 */ long Padding_437[2];
  /* 0x0008 */ class XE_CXFileWriter* m_pFileWriter;
  /* 0x0010 */ class XE_ILogWriteMessageHandler* m_msgHandler;
}; /* size: 0x0018 */

struct XEPackage0::HistoryTargetStats
{
  /* 0x0000 */ unsigned __int64 m_sessionFullFlushCount;
  /* 0x0008 */ unsigned __int64 m_metadataFrames;
  /* 0x0010 */ unsigned __int64 m_eventTableFlushCount;
  /* 0x0018 */ unsigned __int64 m_eventTableExplicitFlushCount;
  /* 0x0020 */ unsigned __int64 m_summaryFrames;
}; /* size: 0x0028 */

class XEPackage0::HistoryTarget
{
  /* 0x0000 */ long Padding_438[2058];
  /* 0x2028 */ class XE_Auto m_holder;
  /* 0x2030 */ void* m_hSession;
  /* 0x2038 */ void* m_notificationSlot;
  /* 0x2040 */ void* m_lock;
  union
  {
    /* 0x0000 */ const unsigned int x_dictPartitions;
    /* 0x0000 */ const unsigned int x_eventElements;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_439[2065];
  /* 0x2048 */ struct XEPackage0::HistoryTargetParams m_params;
  /* 0x2488 */ int m_blockingTarget;
  /* 0x248c */ wchar_t m_filePath[260];
  /* 0x2694 */ wchar_t m_dirName[260];
  /* 0x289c */ long Padding_440;
  /* 0x28a0 */ struct XEPackage0::DictionaryPartition m_dictionaries[6];
  /* 0x2960 */ struct XEPackage0::StreamPartition* m_pEventPartitions;
  /* 0x2968 */ unsigned int m_eventPartitions;
  /* 0x296c */ long Padding_441;
  /* 0x2970 */ class XE_CXFileWriter* m_pMetadataStream;
  /* 0x2978 */ struct MasterMetadataRecord m_mdRecord;
  /* 0x3788 */ unsigned long m_mdRecordStored;
  /* 0x378c */ long Padding_442;
  /* 0x3790 */ class XE_CXTimelineFile* m_pTimelineStream;
  /* 0x3798 */ void* m_flushLock;
  /* 0x37a0 */ struct CXTimelineEntry m_timelineEntry;
  /* 0x37b0 */ unsigned int m_flushTimeout;
  /* 0x37b4 */ long Padding_443;
  /* 0x37b8 */ __int64 m_lastFlushStartTime;
  /* 0x37c0 */ __int64 m_lastFlushFinishTime;
  /* 0x37c8 */ unsigned long m_lastFlushRecord;
  /* 0x37cc */ long Padding_444;
  /* 0x37d0 */ class XE_MetadataTracker m_metadataTracker;
  /* 0x7820 */ class XEPackage0::HistoryTargetMetadataHelper m_metadataWriter;
  /* 0x7838 */ unsigned long m_lastTimeSummaryFrameAdded;
  /* 0x783c */ long Padding_445;
  /* 0x7840 */ __int64 m_lastSummaryFrameTime;
  /* 0x7848 */ __int64 m_prevSummaryFrameTime;
  /* 0x7850 */ struct XEPackage0::HistoryTargetStats m_stats;
}; /* size: 0x7878 */

enum CLUSTER_RESOURCE_STATE_CHANGE_REASON
{
  eResourceStateChangeReasonUnknown = 0,
  eResourceStateChangeReasonMove = 1,
  eResourceStateChangeReasonFailover = 2,
  eResourceStateChangeReasonFailedMove = 3,
  eResourceStateChangeReasonShutdown = 4,
  eResourceStateChangeReasonRundown = 5,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1562, *PTAG_UNNAMED_1562;

typedef struct _GROUP_RELATIONSHIP
{
  /* 0x0000 */ unsigned short MaximumGroupCount;
  /* 0x0002 */ unsigned short ActiveGroupCount;
  /* 0x0004 */ unsigned char Reserved[20];
  /* 0x0018 */ struct _PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP; /* size: 0x0048 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1563, *PTAG_UNNAMED_1563;

enum FSDBNonTransactedAccessEnum
{
  x_fsdbNonTransactedOff = 0,
  x_fsdbNonTransactedReadOnly = 1,
  x_fsdbNonTransactedFull = 2,
  x_fsdbNonTransactedCount = 3,
};

class TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

typedef enum _BUS_DATA_TYPE
{
  ConfigurationSpaceUndefined = -1,
  Cmos = 0,
  EisaConfiguration = 1,
  Pos = 2,
  CbusConfiguration = 3,
  PCIConfiguration = 4,
  VMEConfiguration = 5,
  NuBusConfiguration = 6,
  PCMCIAConfiguration = 7,
  MPIConfiguration = 8,
  MPSAConfiguration = 9,
  PNPISAConfiguration = 10,
  SgiInternalConfiguration = 11,
  MaximumBusDataType = 12,
} BUS_DATA_TYPE, *PBUS_DATA_TYPE;

typedef enum _WORKER_FACTORY_CALLBACK_CLASS
{
  WorkerFactoryCallbackNormal = 0,
  WorkerFactoryCallbackLongRunning = 1,
  WorkerFactoryCallbackIndependent = 2,
  WorkerFactoryCallbackDetectedUnrecoverableError = 3,
} WORKER_FACTORY_CALLBACK_CLASS, *PWORKER_FACTORY_CALLBACK_CLASS;

struct tagHW_PROFILE_INFOA
{
  /* 0x0000 */ unsigned long dwDockInfo;
  /* 0x0004 */ char szHwProfileGuid[39];
  /* 0x002b */ char szHwProfileName[80];
  /* 0x007b */ char __PADDING__[1];
}; /* size: 0x007c */

enum ACCESS_MASKENUM
{
  PERM_EXCLUSIVE = 512,
  PERM_READDESIGN = 1024,
  PERM_WRITEDESIGN = 2048,
  PERM_WITHGRANT = 4096,
  PERM_REFERENCE = 8192,
  PERM_CREATE = 16384,
  PERM_INSERT = 0xffff8000,
  PERM_DELETE = 0x10000,
  PERM_READCONTROL = 0x20000,
  PERM_WRITEPERMISSIONS = 0x40000,
  PERM_WRITEOWNER = 0x80000,
  PERM_MAXIMUM_ALLOWED = 0x2000000,
  PERM_ALL = 0x10000000,
  PERM_EXECUTE = 0x20000000,
  PERM_READ = -2147483648,
  PERM_UPDATE = 0x40000000,
  PERM_DROP = 256,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1564, *PTAG_UNNAMED_1564;

typedef enum _RTL_PATH_TYPE
{
  RtlPathTypeUnknown = 0,
  RtlPathTypeUncAbsolute = 1,
  RtlPathTypeDriveAbsolute = 2,
  RtlPathTypeDriveRelative = 3,
  RtlPathTypeRooted = 4,
  RtlPathTypeRelative = 5,
  RtlPathTypeLocalDevice = 6,
  RtlPathTypeRootLocalDevice = 7,
} RTL_PATH_TYPE, *PRTL_PATH_TYPE;

typedef struct _STRRET
{
  /* 0x0000 */ unsigned int uType;
  /* 0x0004 */ long Padding_446;
  union
  {
    /* 0x0008 */ wchar_t* pOleStr;
    /* 0x0008 */ unsigned int uOffset;
    /* 0x0008 */ char cStr[260];
  }; /* size: 0x0104 */
  /* 0x010c */ long __PADDING__[1];
} STRRET, *PSTRRET; /* size: 0x0110 */

struct XEEventBufferHeader
{
  /* 0x0000 */ struct XERelativeObjectId m_rid;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int m_version : 6; /* bit position: 0 */
    /* 0x0004 */ unsigned int m_lengthOld : 25; /* bit position: 6 */
    /* 0x0004 */ unsigned int m_hasActionData : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int m_stMask;
  /* 0x000c */ unsigned __int64 m_ticks;
  /* 0x0014 */ unsigned int m_length;
}; /* size: 0x0018 */

typedef enum _MUTANT_INFORMATION_CLASS
{
  MutantBasicInformation = 0,
  MutantOwnerInformation = 1,
} MUTANT_INFORMATION_CLASS, *PMUTANT_INFORMATION_CLASS;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

struct XESessionContext
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_447[6];
  /* 0x0008 */ void* m_session;
  /* 0x0010 */ struct XECustomizableAttribute* m_customizableAttr;
  /* 0x0018 */ void* m_predicate;
  /* 0x0020 */ struct XEAction* m_actions;
  /* 0x0028 */ unsigned short m_actionCount;
  /* 0x002a */ char Padding_448[6];
  /* 0x0030 */ const struct XEEvent* m_event;
  /* 0x0038 */ void* m_next;
}; /* size: 0x0040 */

enum XACTTC
{
  XACTTC_NONE = 0,
  XACTTC_SYNC_PHASEONE = 1,
  XACTTC_SYNC_PHASETWO = 2,
  XACTTC_SYNC = 2,
  XACTTC_ASYNC_PHASEONE = 4,
  XACTTC_ASYNC = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1565, *PTAG_UNNAMED_1565;

typedef enum _NET_COMPUTER_NAME_TYPE
{
  NetPrimaryComputerName = 0,
  NetAlternateComputerNames = 1,
  NetAllComputerNames = 2,
  NetComputerNameTypeMax = 3,
} NET_COMPUTER_NAME_TYPE, *PNET_COMPUTER_NAME_TYPE;

typedef struct __vc_attributes::length_isAttribute
{
  /* 0x0000 */ const char* expression;
} _vc_attributes::length_isAttribute, *P_vc_attributes::length_isAttribute; /* size: 0x0008 */

enum CLUS_CHARACTERISTICS
{
  CLUS_CHAR_UNKNOWN = 0,
  CLUS_CHAR_QUORUM = 1,
  CLUS_CHAR_DELETE_REQUIRES_ALL_NODES = 2,
  CLUS_CHAR_LOCAL_QUORUM = 4,
  CLUS_CHAR_LOCAL_QUORUM_DEBUG = 8,
  CLUS_CHAR_REQUIRES_STATE_CHANGE_REASON = 16,
  CLUS_CHAR_BROADCAST_DELETE = 32,
  CLUS_CHAR_SINGLE_CLUSTER_INSTANCE = 64,
  CLUS_CHAR_SINGLE_GROUP_INSTANCE = 128,
  CLUS_CHAR_COEXIST_IN_SHARED_VOLUME_GROUP = 256,
  CLUS_CHAR_PREEMPTABLE = 512,
  CLUS_CHAR_MONITOR_DETACH = 1024,
  CLUS_CHAR_MONITOR_REATTACH = 2048,
  CLUS_CHAR_OPERATION_CONTEXT = 4096,
  CLUS_CHAR_CLONES = 8192,
};

struct IInternetProtocolSinkStackable
{
}; /* size: 0x0008 */

class XE_AutoP<XEPackage0::RingTarget::PackageEntry>
{
}; /* size: 0x0008 */

enum POWER_STATE_HANDLER_TYPE
{
  PowerStateSleeping1 = 0,
  PowerStateSleeping2 = 1,
  PowerStateSleeping3 = 2,
  PowerStateSleeping4 = 3,
  PowerStateShutdownOff = 4,
  PowerStateShutdownReset = 5,
  PowerStateSleeping4Firmware = 6,
  PowerStateMaximum = 7,
};

struct XE_TEvent<4,0,16>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,16> m_dynamicAttr;
  /* 0x0328 */ struct XEEvent m_event;
}; /* size: 0x0370 */

class XeSqlPkg::latch_suspend_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_449[140];
      /* 0x0240 */ unsigned char m_buf[58];
    }; /* size: 0x004a */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0370 */
}; /* size: 0x0280 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1566, *PTAG_UNNAMED_1566;

enum XeSqlPkg::begin_tran_completed::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef struct __vc_attributes::atl::perf_objectAttribute
{
  /* 0x0000 */ int name_res;
  /* 0x0004 */ int help_res;
  /* 0x0008 */ const char* namestring;
  /* 0x0010 */ const char* helpstring;
  /* 0x0018 */ int detail;
  /* 0x001c */ BOOL no_instances;
  /* 0x001d */ char Padding_450[3];
  /* 0x0020 */ const char* class_;
  /* 0x0028 */ int maxinstnamelen;
  /* 0x002c */ long __PADDING__[1];
} _vc_attributes::atl::perf_objectAttribute, *P_vc_attributes::atl::perf_objectAttribute; /* size: 0x0030 */

typedef enum _CLUSTER_SETUP_PHASE
{
  ClusterSetupPhaseInitialize = 1,
  ClusterSetupPhaseValidateNodeState = 100,
  ClusterSetupPhaseValidateNetft = 102,
  ClusterSetupPhaseValidateClusDisk = 103,
  ClusterSetupPhaseConfigureClusSvc = 104,
  ClusterSetupPhaseStartingClusSvc = 105,
  ClusterSetupPhaseQueryClusterNameAccount = 106,
  ClusterSetupPhaseValidateClusterNameAccount = 107,
  ClusterSetupPhaseCreateClusterAccount = 108,
  ClusterSetupPhaseConfigureClusterAccount = 109,
  ClusterSetupPhaseFormingCluster = 200,
  ClusterSetupPhaseAddClusterProperties = 201,
  ClusterSetupPhaseCreateResourceTypes = 202,
  ClusterSetupPhaseCreateGroups = 203,
  ClusterSetupPhaseCreateIPAddressResources = 204,
  ClusterSetupPhaseCreateNetworkName = 205,
  ClusterSetupPhaseClusterGroupOnline = 206,
  ClusterSetupPhaseGettingCurrentMembership = 300,
  ClusterSetupPhaseAddNodeToCluster = 301,
  ClusterSetupPhaseNodeUp = 302,
  ClusterSetupPhaseMoveGroup = 400,
  ClusterSetupPhaseDeleteGroup = 401,
  ClusterSetupPhaseCleanupCOs = 402,
  ClusterSetupPhaseOfflineGroup = 403,
  ClusterSetupPhaseEvictNode = 404,
  ClusterSetupPhaseCleanupNode = 405,
  ClusterSetupPhaseCoreGroupCleanup = 406,
  ClusterSetupPhaseFailureCleanup = 999,
} CLUSTER_SETUP_PHASE, *PCLUSTER_SETUP_PHASE;

typedef struct _SHELLDETAILS
{
  /* 0x0000 */ int fmt;
  /* 0x0004 */ int cxChar;
  /* 0x0008 */ struct _STRRET str;
} SHELLDETAILS, *PSHELLDETAILS; /* size: 0x0118 */

typedef enum _TP_TRACE_TYPE
{
  TpTraceThreadPriority = 1,
  TpTraceThreadAffinity = 2,
  MaxTpTraceType = 3,
} TP_TRACE_TYPE, *PTP_TRACE_TYPE;

class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;

typedef enum _DMA_WIDTH
{
  Width8Bits = 0,
  Width16Bits = 1,
  Width32Bits = 2,
  Width64Bits = 3,
  WidthNoWrap = 4,
  MaximumDmaWidth = 5,
} DMA_WIDTH, *PDMA_WIDTH;

class SpinlockHolder<208,3,1>;

class std::numeric_limits<short>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

enum DBTYPEENUM
{
  DBTYPE_EMPTY = 0,
  DBTYPE_NULL = 1,
  DBTYPE_I2 = 2,
  DBTYPE_I4 = 3,
  DBTYPE_R4 = 4,
  DBTYPE_R8 = 5,
  DBTYPE_CY = 6,
  DBTYPE_DATE = 7,
  DBTYPE_BSTR = 8,
  DBTYPE_IDISPATCH = 9,
  DBTYPE_ERROR = 10,
  DBTYPE_BOOL = 11,
  DBTYPE_VARIANT = 12,
  DBTYPE_IUNKNOWN = 13,
  DBTYPE_DECIMAL = 14,
  DBTYPE_UI1 = 17,
  DBTYPE_ARRAY = 8192,
  DBTYPE_BYREF = 16384,
  DBTYPE_I1 = 16,
  DBTYPE_UI2 = 18,
  DBTYPE_UI4 = 19,
  DBTYPE_I8 = 20,
  DBTYPE_UI8 = 21,
  DBTYPE_GUID = 72,
  DBTYPE_VECTOR = 4096,
  DBTYPE_RESERVED = 0xffff8000,
  DBTYPE_BYTES = 128,
  DBTYPE_STR = 129,
  DBTYPE_WSTR = 130,
  DBTYPE_NUMERIC = 131,
  DBTYPE_UDT = 132,
  DBTYPE_DBDATE = 133,
  DBTYPE_DBTIME = 134,
  DBTYPE_DBTIMESTAMP = 135,
};

struct IWbemStatusCodeText
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 22,
  NVld = 14,
  VldEddOffset = 7,
  BufSize = 143,
} TAG_UNNAMED_1567, *PTAG_UNNAMED_1567;

enum CLUSCTL_RESOURCE_TYPE_CODES
{
  CLUSCTL_RESOURCE_TYPE_UNKNOWN = 0x2000000,
  CLUSCTL_RESOURCE_TYPE_GET_CHARACTERISTICS = 0x2000005,
  CLUSCTL_RESOURCE_TYPE_GET_FLAGS = 0x2000009,
  CLUSCTL_RESOURCE_TYPE_GET_CLASS_INFO = 0x200000d,
  CLUSCTL_RESOURCE_TYPE_GET_REQUIRED_DEPENDENCIES = 0x2000011,
  CLUSCTL_RESOURCE_TYPE_GET_ARB_TIMEOUT = 0x2000015,
  CLUSCTL_RESOURCE_TYPE_ENUM_COMMON_PROPERTIES = 0x2000051,
  CLUSCTL_RESOURCE_TYPE_GET_RO_COMMON_PROPERTIES = 0x2000055,
  CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTIES = 0x2000059,
  CLUSCTL_RESOURCE_TYPE_VALIDATE_COMMON_PROPERTIES = 0x2000061,
  CLUSCTL_RESOURCE_TYPE_SET_COMMON_PROPERTIES = 0x240005e,
  CLUSCTL_RESOURCE_TYPE_GET_COMMON_PROPERTY_FMTS = 0x2000065,
  CLUSCTL_RESOURCE_TYPE_GET_COMMON_RESOURCE_PROPERTY_FMTS = 0x2000069,
  CLUSCTL_RESOURCE_TYPE_ENUM_PRIVATE_PROPERTIES = 0x2000079,
  CLUSCTL_RESOURCE_TYPE_GET_RO_PRIVATE_PROPERTIES = 0x200007d,
  CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTIES = 0x2000081,
  CLUSCTL_RESOURCE_TYPE_SET_PRIVATE_PROPERTIES = 0x2400086,
  CLUSCTL_RESOURCE_TYPE_VALIDATE_PRIVATE_PROPERTIES = 0x2000089,
  CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_PROPERTY_FMTS = 0x200008d,
  CLUSCTL_RESOURCE_TYPE_GET_PRIVATE_RESOURCE_PROPERTY_FMTS = 0x2000091,
  CLUSCTL_RESOURCE_TYPE_GET_REGISTRY_CHECKPOINTS = 0x20000a9,
  CLUSCTL_RESOURCE_TYPE_GET_CRYPTO_CHECKPOINTS = 0x20000b5,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS = 0x2000195,
  CLUSCTL_RESOURCE_TYPE_STORAGE_SYNC_CLUSDISK_DB = 0x240019e,
  CLUSCTL_RESOURCE_TYPE_NETNAME_VALIDATE_NETNAME = 0x2000235,
  CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_PATH = 0x2000231,
  CLUSCTL_RESOURCE_TYPE_GEN_APP_VALIDATE_DIRECTORY = 0x2000239,
  CLUSCTL_RESOURCE_TYPE_GEN_SCRIPT_VALIDATE_PATH = 0x2000231,
  CLUSCTL_RESOURCE_TYPE_QUERY_DELETE = 0x20001b9,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DRIVELETTERS = 0x20001ed,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_EX = 0x20001f5,
  CLUSCTL_RESOURCE_TYPE_STORAGE_REMAP_DRIVELETTER = 0x2000201,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_DISKID = 0x2000205,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_RESOURCEID = 0x200022d,
  CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CLUSTERABLE = 0x2000209,
  CLUSCTL_RESOURCE_TYPE_STORAGE_REMOVE_VM_OWNERSHIP = 0x240020e,
  CLUSCTL_RESOURCE_TYPE_STORAGE_IS_CSV_FILE = 0x1000229,
  CLUSCTL_RESOURCE_TYPE_WITNESS_VALIDATE_PATH = 0x2000231,
  CLUSCTL_RESOURCE_TYPE_INSTALL_NODE = 0x250000a,
  CLUSCTL_RESOURCE_TYPE_EVICT_NODE = 0x250000e,
  CLUSCTL_RESOURCE_TYPE_CLUSTER_VERSION_CHANGED = 0x250002e,
  CLUSCTL_RESOURCE_TYPE_FIXUP_ON_UPGRADE = 0x2500032,
  CLUSCTL_RESOURCE_TYPE_STARTING_PHASE1 = 0x2500036,
  CLUSCTL_RESOURCE_TYPE_STARTING_PHASE2 = 0x250003a,
  CLUSCTL_RESOURCE_TYPE_HOLD_IO = 0x250003e,
  CLUSCTL_RESOURCE_TYPE_RESUME_IO = 0x2500042,
  CLUSCTL_RESOURCE_TYPE_FILESERVER_INVALIDATION_REQUEST = 0x2001f66,
  CLUSCTL_RESOURCE_TYPE_GET_LOCAL_NODE_UTILIZATION_INFO = 0x2001fdd,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_3 = 0x2001fe1,
  CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_GLOBAL_3 = 0x2001fe5,
  CLUSCTL_RESOURCE_TYPE_CSV_GET_DEVICE_INFO_FROM_PATH = 0x21020f5,
  CLUSCTL_RESOURCE_TYPE_POOL_GET_PRKEY = 0x2001f9d,
  CLUSCTL_RESOURCE_TYPE_POOL_DETACH_SPACE = 0x2001fb2,
  CLUSCTL_RESOURCE_TYPE_POOL_REFRESH_ALL = 0x2001f8e,
  CLUSCTL_RESOURCE_TYPE_POOL_REFRESH = 0x2001ff2,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1568, *PTAG_UNNAMED_1568;

struct XEPackage0::RingTarget::Stats
{
  /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ticks;
  /* 0x0008 */ unsigned __int64 m_cTotalEvents;
  /* 0x0010 */ unsigned int m_cDroppedEvents;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

enum DBSTATUSENUM25
{
  DBSTATUS_E_CANCELED = 27,
  DBSTATUS_E_NOTCOLLECTION = 28,
};

typedef enum _FP_IEEE_OPERATION_CODE
{
  FpCodeUnspecified = 0,
  FpCodeAdd = 1,
  FpCodeSubtract = 2,
  FpCodeMultiply = 3,
  FpCodeDivide = 4,
  FpCodeSquareRoot = 5,
  FpCodeRemainder = 6,
  FpCodeCompare = 7,
  FpCodeConvert = 8,
  FpCodeRound = 9,
  FpCodeTruncate = 10,
  FpCodeFloor = 11,
  FpCodeCeil = 12,
  FpCodeAcos = 13,
  FpCodeAsin = 14,
  FpCodeAtan = 15,
  FpCodeAtan2 = 16,
  FpCodeCabs = 17,
  FpCodeCos = 18,
  FpCodeCosh = 19,
  FpCodeExp = 20,
  FpCodeFabs = 21,
  FpCodeFmod = 22,
  FpCodeFrexp = 23,
  FpCodeHypot = 24,
  FpCodeLdexp = 25,
  FpCodeLog = 26,
  FpCodeLog10 = 27,
  FpCodeModf = 28,
  FpCodePow = 29,
  FpCodeSin = 30,
  FpCodeSinh = 31,
  FpCodeTan = 32,
  FpCodeTanh = 33,
  FpCodeY0 = 34,
  FpCodeY1 = 35,
  FpCodeYn = 36,
} FP_IEEE_OPERATION_CODE, *PFP_IEEE_OPERATION_CODE;

class SpinlockHolder<184,3,1>;

enum EErrorReportingFlags
{
  ERROR_FLAG_NONE = 0,
  EXTENDED_SPECS = 1,
  SILENT_ON_ERROR = 2,
  NO_ERRLOG_HEADER = 4,
  SKIP_ERROR_DUMP = 8,
};

class AutoStateProtectors<SOSHost_CallInternalTraits>::ProtectorInitializer<SOSHost_CallInternalTraits>
{
}; /* size: 0x0004 */

enum DBSTATUSENUM
{
  DBSTATUS_S_OK = 0,
  DBSTATUS_E_BADACCESSOR = 1,
  DBSTATUS_E_CANTCONVERTVALUE = 2,
  DBSTATUS_S_ISNULL = 3,
  DBSTATUS_S_TRUNCATED = 4,
  DBSTATUS_E_SIGNMISMATCH = 5,
  DBSTATUS_E_DATAOVERFLOW = 6,
  DBSTATUS_E_CANTCREATE = 7,
  DBSTATUS_E_UNAVAILABLE = 8,
  DBSTATUS_E_PERMISSIONDENIED = 9,
  DBSTATUS_E_INTEGRITYVIOLATION = 10,
  DBSTATUS_E_SCHEMAVIOLATION = 11,
  DBSTATUS_E_BADSTATUS = 12,
  DBSTATUS_S_DEFAULT = 13,
};

typedef struct _RTL_PROCESS_BACKTRACE_INFORMATION
{
  /* 0x0000 */ char* SymbolicBackTrace;
  /* 0x0008 */ unsigned long TraceCount;
  /* 0x000c */ unsigned short Index;
  /* 0x000e */ unsigned short Depth;
  /* 0x0010 */ void* BackTrace[32];
} RTL_PROCESS_BACKTRACE_INFORMATION, *PRTL_PROCESS_BACKTRACE_INFORMATION; /* size: 0x0110 */

typedef struct _RTL_PROCESS_BACKTRACES
{
  /* 0x0000 */ unsigned __int64 CommittedMemory;
  /* 0x0008 */ unsigned __int64 ReservedMemory;
  /* 0x0010 */ unsigned long NumberOfBackTraceLookups;
  /* 0x0014 */ unsigned long NumberOfBackTraces;
  /* 0x0018 */ struct _RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[1];
} RTL_PROCESS_BACKTRACES, *PRTL_PROCESS_BACKTRACES; /* size: 0x0128 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 40,
} TAG_UNNAMED_1569, *PTAG_UNNAMED_1569;

enum DBMEMOWNERENUM
{
  DBMEMOWNER_CLIENTOWNED = 0,
  DBMEMOWNER_PROVIDEROWNED = 1,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1570, *PTAG_UNNAMED_1570;

class XE_ConfiguredSessionEnumerator
{
}; /* size: 0x0010 */

struct tagBinaryParam
{
  /* 0x0000 */ void* Buffer;
  /* 0x0008 */ short Size;
  /* 0x000a */ char __PADDING__[6];
}; /* size: 0x0010 */

struct std::_Container_proxy
{
  /* 0x0000 */ const struct std::_Container_base12* _Mycont;
  /* 0x0008 */ struct std::_Iterator_base12* _Myfirstiter;
}; /* size: 0x0010 */

typedef enum _RTL_RXACT_OPERATION
{
  RtlRXactOperationDelete = 1,
  RtlRXactOperationSetValue = 2,
  RtlRXactOperationDelAttribute = 3,
  RtlRXactOperationSetAttribute = 4,
} RTL_RXACT_OPERATION, *PRTL_RXACT_OPERATION;

struct IDataObject
{
}; /* size: 0x0008 */

enum EUcsOperationStage
{
  e_opsBegin = 0,
  e_opsProcess = 1,
  e_opsEnd = 2,
};

typedef enum _SE_AUDIT_OPERATION
{
  AuditPrivilegeObject = 0,
  AuditPrivilegeService = 1,
  AuditAccessCheck = 2,
  AuditOpenObject = 3,
  AuditOpenObjectWithTransaction = 4,
  AuditCloseObject = 5,
  AuditDeleteObject = 6,
  AuditOpenObjectForDelete = 7,
  AuditOpenObjectForDeleteWithTransaction = 8,
  AuditCloseNonObject = 9,
  AuditOpenNonObject = 10,
  AuditObjectReference = 11,
  AuditHandleCreation = 12,
} SE_AUDIT_OPERATION, *PSE_AUDIT_OPERATION;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1571, *PTAG_UNNAMED_1571;

struct std::_Container_base12
{
  /* 0x0000 */ struct std::_Container_proxy* _Myproxy;
}; /* size: 0x0008 */

typedef enum _MSA_INFO_STATE
{
  MsaInfoNotExist = 1,
  MsaInfoNotService = 2,
  MsaInfoCannotInstall = 3,
  MsaInfoCanInstall = 4,
  MsaInfoInstalled = 5,
} MSA_INFO_STATE, *PMSA_INFO_STATE;

class CAutoBase<XE_AutoP<XE_Log> >
{
  /* 0x0000 */ class XE_AutoP<XE_Log>* m_pt;
}; /* size: 0x0008 */

enum CLUSCTL_NETINTERFACE_CODES
{
  CLUSCTL_NETINTERFACE_UNKNOWN = 0x6000000,
  CLUSCTL_NETINTERFACE_GET_CHARACTERISTICS = 0x6000005,
  CLUSCTL_NETINTERFACE_GET_FLAGS = 0x6000009,
  CLUSCTL_NETINTERFACE_GET_NAME = 0x6000029,
  CLUSCTL_NETINTERFACE_GET_ID = 0x6000039,
  CLUSCTL_NETINTERFACE_GET_NODE = 0x6000031,
  CLUSCTL_NETINTERFACE_GET_NETWORK = 0x6000035,
  CLUSCTL_NETINTERFACE_ENUM_COMMON_PROPERTIES = 0x6000051,
  CLUSCTL_NETINTERFACE_GET_RO_COMMON_PROPERTIES = 0x6000055,
  CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTIES = 0x6000059,
  CLUSCTL_NETINTERFACE_SET_COMMON_PROPERTIES = 0x640005e,
  CLUSCTL_NETINTERFACE_VALIDATE_COMMON_PROPERTIES = 0x6000061,
  CLUSCTL_NETINTERFACE_ENUM_PRIVATE_PROPERTIES = 0x6000079,
  CLUSCTL_NETINTERFACE_GET_RO_PRIVATE_PROPERTIES = 0x600007d,
  CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTIES = 0x6000081,
  CLUSCTL_NETINTERFACE_SET_PRIVATE_PROPERTIES = 0x6400086,
  CLUSCTL_NETINTERFACE_VALIDATE_PRIVATE_PROPERTIES = 0x6000089,
  CLUSCTL_NETINTERFACE_GET_COMMON_PROPERTY_FMTS = 0x6000065,
  CLUSCTL_NETINTERFACE_GET_PRIVATE_PROPERTY_FMTS = 0x600008d,
};

class XeSqlPkg::hadr_db_commit_mgr_harden_still_waiting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_451[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int wait_timeOffset;
    /* 0x0000 */ const int wait_log_blockOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0270 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1572, *PTAG_UNNAMED_1572;

typedef enum _SUITE_TYPE
{
  SmallBusiness = 0,
  Enterprise = 1,
  BackOffice = 2,
  CommunicationServer = 3,
  TerminalServer = 4,
  SmallBusinessRestricted = 5,
  EmbeddedNT = 6,
  DataCenter = 7,
  SingleUserTS = 8,
  Personal = 9,
  Blade = 10,
  EmbeddedRestricted = 11,
  SecurityAppliance = 12,
  StorageServer = 13,
  ComputeServer = 14,
  WHServer = 15,
  MaxSuiteType = 16,
} SUITE_TYPE, *PSUITE_TYPE;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1573, *PTAG_UNNAMED_1573;

struct tagSAFEARRAYBOUND
{
  /* 0x0000 */ unsigned long cElements;
  /* 0x0004 */ long lLbound;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1574, *PTAG_UNNAMED_1574;

typedef enum _TIMER_INFORMATION_CLASS
{
  TimerBasicInformation = 0,
} TIMER_INFORMATION_CLASS, *PTIMER_INFORMATION_CLASS;

class CSerializeContext<RPCStream>::LocalStorage<16>
{
  /* 0x0000 */ const void* m_rgStore[16];
}; /* size: 0x0080 */

class CSerializeContext<RPCStream>
{
  union
  {
    struct
    {
      /* 0x0000 */ class RPCStream* m_formatter;
      /* 0x0008 */ class IMemObj* m_memObj;
    }; /* size: 0x0010 */
    /* 0x0000 */ const unsigned int xsm_pageSize;
    /* 0x0000 */ const unsigned int xsm_pointersOnPage;
    /* 0x0000 */ const unsigned int xsm_pointersMax;
    /* 0x0000 */ const unsigned int xsm_maxOverflowPerDirPage;
    /* 0x0000 */ const unsigned int xsm_pagesMax;
    /* 0x0000 */ const unsigned int xsm_overflowPagesMax;
    /* 0x0000 */ const unsigned int xsm_pointersOnPageShift;
    /* 0x0000 */ const unsigned int xsm_maxOverflowPerDirPageShift;
    /* 0x0000 */ const unsigned int xsm_overflowPagesMaxShift;
  }; /* size: 0x0010 */
  /* 0x0010 */ const void** m_pageDir[984];
  /* 0x1ed0 */ unsigned int m_cpMap;
  /* 0x1ed4 */ long Padding_452;
  /* 0x1ed8 */ const void*** m_rgpMap;
  /* 0x1ee0 */ unsigned int m_cpMapOverflow;
  /* 0x1ee4 */ unsigned int m_numOverflowPages;
  /* 0x1ee8 */ const void*** m_rgpMapOverflowPage;
  /* 0x1ef0 */ class PageAllocator* m_mapPageAllocator;
  /* 0x1ef8 */ enum AllocatorType m_allocatorType;
  /* 0x1efc */ long Padding_453;
  /* 0x1f00 */ class CSerializeContext<RPCStream>::LocalStorage<16> m_localStorage;
  /* 0x1f80 */ class SOS_TraceStream& m_outStream;
  /* 0x1f88 */ enum CSerializeContext<RPCStream>::DESERIALIZE_MODES m_deSerializeMode;
  /* 0x1f8c */ long Padding_454;
  /* 0x1f90 */ class CSerializeParam* m_serializeParam;
  /* 0x1f98 */ unsigned int* m_versionVector;
}; /* size: 0x1fa0 */

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_455;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >* m_pList;
}; /* size: 0x0020 */

typedef enum _WNF_USER_DELIVERY_STATE
{
  WNF_USER_DELIVERY_STATE_READY = 0,
  WNF_USER_DELIVERY_STATE_CANCELLED = 1,
  WNF_USER_DELIVERY_STATE_IN_PROGRESS = 2,
  WNF_USER_DELIVERY_STATE_SUCCEEDED = 3,
  WNF_USER_DELIVERY_STATE_FAILED = 4,
  WNF_USER_DELIVERY_STATE_REQUIRES_RETRY = 5,
  WNF_USER_DELIVERY_STATE_COMPLETE = 6,
} WNF_USER_DELIVERY_STATE, *PWNF_USER_DELIVERY_STATE;

typedef struct _EXIT_PROCESS_DEBUG_INFO
{
  /* 0x0000 */ unsigned long dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *PEXIT_PROCESS_DEBUG_INFO; /* size: 0x0004 */

enum DBPROPFLAGSENUM21
{
  DBPROPFLAGS_TRUSTEE = 8192,
};

typedef enum
{
  feature_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1575, *PTAG_UNNAMED_1575;

class SpinlockHolder<205,3,1>;

struct IPictureDisp
{
}; /* size: 0x0008 */

typedef enum _OBJECT_INFORMATION_CLASS
{
  ObjectBasicInformation = 0,
  ObjectNameInformation = 1,
  ObjectTypeInformation = 2,
  ObjectTypesInformation = 3,
  ObjectHandleFlagInformation = 4,
  ObjectSessionInformation = 5,
  MaxObjectInfoClass = 6,
} OBJECT_INFORMATION_CLASS, *POBJECT_INFORMATION_CLASS;

struct tagEMRMODIFYWORLDTRANSFORM
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct tagXFORM xform;
  /* 0x0020 */ unsigned long iMode;
}; /* size: 0x0024 */

typedef enum
{
  exit_codeIdx = 0,
  shutdown_optionIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1576, *PTAG_UNNAMED_1576;

typedef enum _IO_SESSION_STATE
{
  IoSessionStateCreated = 1,
  IoSessionStateInitialized = 2,
  IoSessionStateConnected = 3,
  IoSessionStateDisconnected = 4,
  IoSessionStateDisconnectedLoggedOn = 5,
  IoSessionStateLoggedOn = 6,
  IoSessionStateLoggedOff = 7,
  IoSessionStateTerminated = 8,
  IoSessionStateMax = 9,
} IO_SESSION_STATE, *PIO_SESSION_STATE;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1577, *PTAG_UNNAMED_1577;

struct tagWCRANGE
{
  /* 0x0000 */ wchar_t wcLow;
  /* 0x0002 */ unsigned short cGlyphs;
}; /* size: 0x0004 */

struct IInternetBindInfoEx
{
}; /* size: 0x0008 */

class XeCloudMinPkg::start_copy_from_primary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_456[140];
      /* 0x0240 */ unsigned char m_buf[84];
    }; /* size: 0x0064 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int is_safe_recopyOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int hint_stream_idOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0298 */

typedef enum _CLUSTER_CSV_SWPRV_EVENT
{
  SwprvSetContext = 0,
  SwprvGetSnapshotProperties = 1,
  SwprvSetSnapshotProperty = 2,
  SwprvIsVolumeSupported = 3,
  SwprvIsVolumeSnapshotted = 4,
  SwprvBeginPrepareSnapshot = 5,
  SwprvEndPrepareSnapshots = 6,
  SwprvPreCommitSnapshots = 7,
  SwprvCommitSnapshots = 8,
  SwprvPostCommitSnapshots = 9,
  SwprvPreFinalCommitSnapshots = 10,
  SwprvPostFinalCommitSnapshots = 11,
  SwprvCreateSnapshotCsv = 12,
  SwprvDeleteSnapshotCsv = 13,
  SwprvDeleteSnapshots = 14,
  SwprvAbortSnapshots = 15,
  SwprvGetAllSnapshots = 16,
  SwprvAddDiffArea = 17,
  SwprvChangeDiffAreaMaxSize = 18,
  SwprvQueryVolumesSupportedForDiffAreas = 19,
  SwprvQueryDiffAreasForVolume = 20,
  SwprvQueryDiffAreasOnVolume = 21,
  SwprvQueryDiffAreasForSnapshot = 22,
  SwprvSetVolumeProtectLevel = 23,
  SwprvGetVolumeProtectLevel = 24,
  SwprvClearVolumeProtectFault = 25,
  SwprvDeleteUnusedDiffAreas = 26,
  HwprvPreCommitSnapshot = 27,
  HwprvPostCommitSnapshot = 28,
  PrepareForFreeze = 29,
  SwprvMaxEventId = 30,
} CLUSTER_CSV_SWPRV_EVENT, *PCLUSTER_CSV_SWPRV_EVENT;

typedef struct _KSYSTEM_TIME
{
  /* 0x0000 */ unsigned long LowPart;
  /* 0x0004 */ long High1Time;
  /* 0x0008 */ long High2Time;
} KSYSTEM_TIME, *PKSYSTEM_TIME; /* size: 0x000c */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_1578, *PTAG_UNNAMED_1578;

typedef struct _EFI_DRIVER_ENTRY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Id;
  /* 0x000c */ unsigned long FriendlyNameOffset;
  /* 0x0010 */ unsigned long DriverFilePathOffset;
} EFI_DRIVER_ENTRY, *PEFI_DRIVER_ENTRY; /* size: 0x0014 */

enum CLUSCTL_NODE_CODES
{
  CLUSCTL_NODE_UNKNOWN = 0x4000000,
  CLUSCTL_NODE_GET_CHARACTERISTICS = 0x4000005,
  CLUSCTL_NODE_GET_FLAGS = 0x4000009,
  CLUSCTL_NODE_GET_NAME = 0x4000029,
  CLUSCTL_NODE_GET_ID = 0x4000039,
  CLUSCTL_NODE_ENUM_COMMON_PROPERTIES = 0x4000051,
  CLUSCTL_NODE_GET_RO_COMMON_PROPERTIES = 0x4000055,
  CLUSCTL_NODE_GET_COMMON_PROPERTIES = 0x4000059,
  CLUSCTL_NODE_SET_COMMON_PROPERTIES = 0x440005e,
  CLUSCTL_NODE_VALIDATE_COMMON_PROPERTIES = 0x4000061,
  CLUSCTL_NODE_ENUM_PRIVATE_PROPERTIES = 0x4000079,
  CLUSCTL_NODE_GET_RO_PRIVATE_PROPERTIES = 0x400007d,
  CLUSCTL_NODE_GET_PRIVATE_PROPERTIES = 0x4000081,
  CLUSCTL_NODE_SET_PRIVATE_PROPERTIES = 0x4400086,
  CLUSCTL_NODE_VALIDATE_PRIVATE_PROPERTIES = 0x4000089,
  CLUSCTL_NODE_GET_COMMON_PROPERTY_FMTS = 0x4000065,
  CLUSCTL_NODE_GET_PRIVATE_PROPERTY_FMTS = 0x400008d,
  CLUSCTL_NODE_GET_CLUSTER_SERVICE_ACCOUNT_NAME = 0x4000041,
  CLUSCTL_NODE_GET_PLACEMENT_DIRECTOR = 0x4001fea,
};

typedef enum _IO_SESSION_EVENT
{
  IoSessionEventIgnore = 0,
  IoSessionEventCreated = 1,
  IoSessionEventTerminated = 2,
  IoSessionEventConnected = 3,
  IoSessionEventDisconnected = 4,
  IoSessionEventLogon = 5,
  IoSessionEventLogoff = 6,
  IoSessionEventMax = 7,
} IO_SESSION_EVENT, *PIO_SESSION_EVENT;

struct tagCSPLATFORM
{
  /* 0x0000 */ unsigned long dwPlatformId;
  /* 0x0004 */ unsigned long dwVersionHi;
  /* 0x0008 */ unsigned long dwVersionLo;
  /* 0x000c */ unsigned long dwProcessorArch;
}; /* size: 0x0010 */

struct tagQUERYCONTEXT
{
  /* 0x0000 */ unsigned long dwContext;
  /* 0x0004 */ struct tagCSPLATFORM Platform;
  /* 0x0014 */ unsigned long Locale;
  /* 0x0018 */ unsigned long dwVersionHi;
  /* 0x001c */ unsigned long dwVersionLo;
}; /* size: 0x0020 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1579, *PTAG_UNNAMED_1579;

typedef enum _PNP_QUERY_RELATION
{
  PnpQueryEjectRelations = 0,
  PnpQueryRemovalRelations = 1,
  PnpQueryPowerRelations = 2,
  PnpQueryBusRelations = 3,
  PnpQueryTransportRelations = 4,
  MaxPnpQueryRelations = 5,
} PNP_QUERY_RELATION, *PPNP_QUERY_RELATION;

typedef enum
{
  compile_timeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1580, *PTAG_UNNAMED_1580;

class CMemPartitioned<CMemThread<CMemObj> >
{
  /* 0x0000 */ long Padding_457[108];
  /* 0x01b0 */ class IMemObj** m_partitionMemObj;
  /* 0x01b8 */ int m_numberOfPartitions;
  /* 0x01bc */ enum PartitioningType m_partType;
  /* 0x01c0 */ enum AllocatorType m_allocatorType;
  /* 0x01c4 */ long Padding_458;
  /* 0x01c8 */ __int64 m_cPages;
}; /* size: 0x01d0 */

typedef enum _FILE_INFORMATION_CLASS
{
  FileDirectoryInformation = 1,
  FileFullDirectoryInformation = 2,
  FileBothDirectoryInformation = 3,
  FileBasicInformation = 4,
  FileStandardInformation = 5,
  FileInternalInformation = 6,
  FileEaInformation = 7,
  FileAccessInformation = 8,
  FileNameInformation = 9,
  FileRenameInformation = 10,
  FileLinkInformation = 11,
  FileNamesInformation = 12,
  FileDispositionInformation = 13,
  FilePositionInformation = 14,
  FileFullEaInformation = 15,
  FileModeInformation = 16,
  FileAlignmentInformation = 17,
  FileAllInformation = 18,
  FileAllocationInformation = 19,
  FileEndOfFileInformation = 20,
  FileAlternateNameInformation = 21,
  FileStreamInformation = 22,
  FilePipeInformation = 23,
  FilePipeLocalInformation = 24,
  FilePipeRemoteInformation = 25,
  FileMailslotQueryInformation = 26,
  FileMailslotSetInformation = 27,
  FileCompressionInformation = 28,
  FileObjectIdInformation = 29,
  FileCompletionInformation = 30,
  FileMoveClusterInformation = 31,
  FileQuotaInformation = 32,
  FileReparsePointInformation = 33,
  FileNetworkOpenInformation = 34,
  FileAttributeTagInformation = 35,
  FileTrackingInformation = 36,
  FileIdBothDirectoryInformation = 37,
  FileIdFullDirectoryInformation = 38,
  FileValidDataLengthInformation = 39,
  FileShortNameInformation = 40,
  FileIoCompletionNotificationInformation = 41,
  FileIoStatusBlockRangeInformation = 42,
  FileIoPriorityHintInformation = 43,
  FileSfioReserveInformation = 44,
  FileSfioVolumeInformation = 45,
  FileHardLinkInformation = 46,
  FileProcessIdsUsingFileInformation = 47,
  FileNormalizedNameInformation = 48,
  FileNetworkPhysicalNameInformation = 49,
  FileIdGlobalTxDirectoryInformation = 50,
  FileIsRemoteDeviceInformation = 51,
  FileAttributeCacheInformation = 52,
  FileNumaNodeInformation = 53,
  FileStandardLinkInformation = 54,
  FileRemoteProtocolInformation = 55,
  FileRenameInformationBypassAccessCheck = 56,
  FileLinkInformationBypassAccessCheck = 57,
  FileIntegrityStreamInformation = 58,
  FileVolumeNameInformation = 59,
  FileMaximumInformation = 60,
} FILE_INFORMATION_CLASS, *PFILE_INFORMATION_CLASS;

typedef enum
{
  database_idIdx = 0,
  previous_nameIdx = 1,
  new_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1581, *PTAG_UNNAMED_1581;

typedef enum
{
  tenant_idIdx = 0,
  rows_deletedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1582, *PTAG_UNNAMED_1582;

typedef enum _ALPC_PORT_INFORMATION_CLASS
{
  AlpcBasicInformation = 0,
  AlpcPortInformation = 1,
  AlpcAssociateCompletionPortInformation = 2,
  AlpcConnectedSIDInformation = 3,
  AlpcServerInformation = 4,
  AlpcMessageZoneInformation = 5,
  AlpcRegisterCompletionListInformation = 6,
  AlpcUnregisterCompletionListInformation = 7,
  AlpcAdjustCompletionListConcurrencyCountInformation = 8,
  AlpcRegisterCallbackInformation = 9,
  AlpcCompletionListRundownInformation = 10,
} ALPC_PORT_INFORMATION_CLASS, *PALPC_PORT_INFORMATION_CLASS;

struct std::_Num_int_base
{
  union
  {
    /* 0x0000 */ const BOOL is_bounded;
    /* 0x0000 */ const BOOL is_exact;
    /* 0x0000 */ const BOOL is_integer;
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_specialized;
    /* 0x0000 */ const int radix;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

enum DBPROPSTATUSENUM
{
  DBPROPSTATUS_OK = 0,
  DBPROPSTATUS_NOTSUPPORTED = 1,
  DBPROPSTATUS_BADVALUE = 2,
  DBPROPSTATUS_BADOPTION = 3,
  DBPROPSTATUS_BADCOLUMN = 4,
  DBPROPSTATUS_NOTALLSETTABLE = 5,
  DBPROPSTATUS_NOTSETTABLE = 6,
  DBPROPSTATUS_NOTSET = 7,
  DBPROPSTATUS_CONFLICTING = 8,
};

struct IChannelHook
{
}; /* size: 0x0008 */

typedef enum
{
  code_pointIdx = 0,
  optional_value1Idx = 1,
  optional_value2Idx = 2,
  descriptionIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1583, *PTAG_UNNAMED_1583;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_1584, *PTAG_UNNAMED_1584;

enum CLUSTER_NETWORK_STATE
{
  ClusterNetworkStateUnknown = -1,
  ClusterNetworkUnavailable = 0,
  ClusterNetworkDown = 1,
  ClusterNetworkPartitioned = 2,
  ClusterNetworkUp = 3,
};

typedef enum
{
  feature_idIdx = 0,
  featureIdx = 1,
  messageIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1585, *PTAG_UNNAMED_1585;

class CAutoP<ColumnTransformRule>
{
}; /* size: 0x0008 */

typedef enum _FP__IEEE_FORMAT
{
  FpFormatFp32 = 0,
  FpFormatFp64 = 1,
  FpFormatFp80 = 2,
  FpFormatFp128 = 3,
  FpFormatI16 = 4,
  FpFormatI32 = 5,
  FpFormatI64 = 6,
  FpFormatU16 = 7,
  FpFormatU32 = 8,
  FpFormatU64 = 9,
  FpFormatCompare = 10,
  FpFormatString = 11,
} FP__IEEE_FORMAT, *PFP__IEEE_FORMAT;

struct IOleWindow
{
}; /* size: 0x0008 */

struct XPRESS9_ENCODER_T;

enum CLUSTER_PROPERTY_SYNTAX
{
  CLUSPROP_SYNTAX_ENDMARK = 0,
  CLUSPROP_SYNTAX_NAME = 0x40003,
  CLUSPROP_SYNTAX_RESCLASS = 0x20002,
  CLUSPROP_SYNTAX_LIST_VALUE_SZ = 0x10003,
  CLUSPROP_SYNTAX_LIST_VALUE_EXPAND_SZ = 0x10004,
  CLUSPROP_SYNTAX_LIST_VALUE_DWORD = 0x10002,
  CLUSPROP_SYNTAX_LIST_VALUE_BINARY = 0x10001,
  CLUSPROP_SYNTAX_LIST_VALUE_MULTI_SZ = 0x10005,
  CLUSPROP_SYNTAX_LIST_VALUE_LONG = 0x10007,
  CLUSPROP_SYNTAX_LIST_VALUE_EXPANDED_SZ = 0x10008,
  CLUSPROP_SYNTAX_LIST_VALUE_SECURITY_DESCRIPTOR = 0x10009,
  CLUSPROP_SYNTAX_LIST_VALUE_LARGE_INTEGER = 0x1000a,
  CLUSPROP_SYNTAX_LIST_VALUE_ULARGE_INTEGER = 0x10006,
  CLUSPROP_SYNTAX_LIST_VALUE_WORD = 0x1000b,
  CLUSPROP_SYNTAX_DISK_SIGNATURE = 0x50002,
  CLUSPROP_SYNTAX_SCSI_ADDRESS = 0x60002,
  CLUSPROP_SYNTAX_DISK_NUMBER = 0x70002,
  CLUSPROP_SYNTAX_PARTITION_INFO = 0x80001,
  CLUSPROP_SYNTAX_FTSET_INFO = 0x90001,
  CLUSPROP_SYNTAX_DISK_SERIALNUMBER = 0xa0003,
  CLUSPROP_SYNTAX_DISK_GUID = 0xb0003,
  CLUSPROP_SYNTAX_DISK_SIZE = 0xc0006,
  CLUSPROP_SYNTAX_PARTITION_INFO_EX = 0xd0001,
  CLUSPROP_SYNTAX_CSV_PARTITION_INFO_EX = 0x130001,
  CLUSPROP_SYNTAX_LIST_VALUE_FILETIME = 0x1000c,
  CLUSPROP_SYNTAX_NODE_BITMASK = 0xe0001,
  CLUSPROP_SYNTAX_NODE_LIST = 0xf0005,
  CLUSPROP_SYNTAX_DISK_HEADER_IDS = 0x100001,
  CLUSPROP_SYNTAX_DISK_VALUES = 0x11000d,
  CLUSPROP_SYNTAX_DISK_PRIV_PROPERTIES = 0x12000e,
  CLUSPROP_SYNTAX_NODE_INDEX = 0x140002,
  CLUSPROP_SYNTAX_DISK_IDS = 0x15000d,
  CLUSPROP_SYNTAX_DISK_VOLUMES = 0x16000d,
};

struct IErrorInfo
{
}; /* size: 0x0008 */

class SOS_CallResult<void>
{
}; /* size: 0x0008 */

enum CLUSCTL_GROUP_CODES
{
  CLUSCTL_GROUP_UNKNOWN = 0x3000000,
  CLUSCTL_GROUP_GET_CHARACTERISTICS = 0x3000005,
  CLUSCTL_GROUP_GET_FLAGS = 0x3000009,
  CLUSCTL_GROUP_GET_NAME = 0x3000029,
  CLUSCTL_GROUP_GET_ID = 0x3000039,
  CLUSCTL_GROUP_ENUM_COMMON_PROPERTIES = 0x3000051,
  CLUSCTL_GROUP_GET_RO_COMMON_PROPERTIES = 0x3000055,
  CLUSCTL_GROUP_GET_COMMON_PROPERTIES = 0x3000059,
  CLUSCTL_GROUP_SET_COMMON_PROPERTIES = 0x340005e,
  CLUSCTL_GROUP_VALIDATE_COMMON_PROPERTIES = 0x3000061,
  CLUSCTL_GROUP_ENUM_PRIVATE_PROPERTIES = 0x3000079,
  CLUSCTL_GROUP_GET_RO_PRIVATE_PROPERTIES = 0x300007d,
  CLUSCTL_GROUP_GET_PRIVATE_PROPERTIES = 0x3000081,
  CLUSCTL_GROUP_SET_PRIVATE_PROPERTIES = 0x3400086,
  CLUSCTL_GROUP_VALIDATE_PRIVATE_PROPERTIES = 0x3000089,
  CLUSCTL_GROUP_QUERY_DELETE = 0x30001b9,
  CLUSCTL_GROUP_GET_COMMON_PROPERTY_FMTS = 0x3000065,
  CLUSCTL_GROUP_GET_PRIVATE_PROPERTY_FMTS = 0x300008d,
  CLUSCTL_GROUP_GET_FAILURE_INFO = 0x3000019,
};

typedef enum _LEARNING_MODE_LOG_LEVEL
{
  LearningModeLogLevelPassive = 0,
  LearningModeLogLevelNormalApc = 1,
  LearningModeLogLevelSpecialApc = 2,
  LearningModeLogLevelMax = 3,
} LEARNING_MODE_LOG_LEVEL, *PLEARNING_MODE_LOG_LEVEL;

class AutoSpinlockHolder<58,16,1>;

enum ErrorCategory
{
  ERR_CAT_SERVER = 2,
  ERR_CAT_FAILOVER = 3,
  ERR_CAT_LOGON = 4,
  ERR_CAT_SECAUDIT = 5,
  ERR_CAT_BACKUP = 6,
  ERR_CAT_SQLSNMP = 7,
  ERR_CAT_MATRIX = 8,
  ERR_CAT_NEXT = 9,
  ERR_CAT_LAST = 8,
};

struct tagEMREOF
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long nPalEntries;
  /* 0x000c */ unsigned long offPalEntries;
  /* 0x0010 */ unsigned long nSizeLast;
}; /* size: 0x0014 */

typedef struct _PROCESS_HEAP_INFORMATION
{
  /* 0x0000 */ unsigned __int64 ReserveSize;
  /* 0x0008 */ unsigned __int64 CommitSize;
  /* 0x0010 */ unsigned long NumberOfHeaps;
  /* 0x0014 */ long Padding_459;
  /* 0x0018 */ unsigned __int64 FirstHeapInformationOffset;
} PROCESS_HEAP_INFORMATION, *PPROCESS_HEAP_INFORMATION; /* size: 0x0020 */

typedef struct _HEAP_INFORMATION
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned long Mode;
  /* 0x000c */ long Padding_460;
  /* 0x0010 */ unsigned __int64 ReserveSize;
  /* 0x0018 */ unsigned __int64 CommitSize;
  /* 0x0020 */ unsigned __int64 FirstRegionInformationOffset;
  /* 0x0028 */ unsigned __int64 NextHeapInformationOffset;
} HEAP_INFORMATION, *PHEAP_INFORMATION; /* size: 0x0030 */

typedef struct _HEAP_EXTENDED_INFORMATION
{
  /* 0x0000 */ void* Process;
  /* 0x0008 */ unsigned __int64 Heap;
  /* 0x0010 */ unsigned long Level;
  /* 0x0014 */ long Padding_461;
  /* 0x0018 */ void* CallbackRoutine /* function */;
  /* 0x0020 */ void* CallbackContext;
  union
  {
    /* 0x0028 */ struct _PROCESS_HEAP_INFORMATION ProcessHeapInformation;
    /* 0x0028 */ struct _HEAP_INFORMATION HeapInformation;
  }; /* size: 0x0030 */
} HEAP_EXTENDED_INFORMATION, *PHEAP_EXTENDED_INFORMATION; /* size: 0x0058 */

enum DBCOLUMNDESCFLAGSENUM
{
  DBCOLUMNDESCFLAGS_TYPENAME = 1,
  DBCOLUMNDESCFLAGS_ITYPEINFO = 2,
  DBCOLUMNDESCFLAGS_PROPERTIES = 4,
  DBCOLUMNDESCFLAGS_CLSID = 8,
  DBCOLUMNDESCFLAGS_COLSIZE = 16,
  DBCOLUMNDESCFLAGS_DBCID = 32,
  DBCOLUMNDESCFLAGS_WTYPE = 64,
  DBCOLUMNDESCFLAGS_PRECISION = 128,
  DBCOLUMNDESCFLAGS_SCALE = 256,
};

typedef struct _USER_INFO_1003
{
  /* 0x0000 */ wchar_t* usri1003_password;
} USER_INFO_1003, *PUSER_INFO_1003; /* size: 0x0008 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1586, *PTAG_UNNAMED_1586;

struct IInternetZoneManagerEx
{
}; /* size: 0x0008 */

enum DBMOVEFLAGSENUM
{
  DBMOVE_REPLACE_EXISTING = 1,
  DBMOVE_ASYNC = 256,
  DBMOVE_DONT_UPDATE_LINKS = 512,
  DBMOVE_ALLOW_EMULATION = 1024,
  DBMOVE_ATOMIC = 4096,
};

struct ISynchronizeHandle
{
}; /* size: 0x0008 */

struct tagOLEVERB
{
  /* 0x0000 */ long lVerb;
  /* 0x0004 */ long Padding_462;
  /* 0x0008 */ wchar_t* lpszVerbName;
  /* 0x0010 */ unsigned long fuFlags;
  /* 0x0014 */ unsigned long grfAttribs;
}; /* size: 0x0018 */

enum DBROWSTATUSENUM
{
  DBROWSTATUS_S_OK = 0,
  DBROWSTATUS_S_MULTIPLECHANGES = 2,
  DBROWSTATUS_S_PENDINGCHANGES = 3,
  DBROWSTATUS_E_CANCELED = 4,
  DBROWSTATUS_E_CANTRELEASE = 6,
  DBROWSTATUS_E_CONCURRENCYVIOLATION = 7,
  DBROWSTATUS_E_DELETED = 8,
  DBROWSTATUS_E_PENDINGINSERT = 9,
  DBROWSTATUS_E_NEWLYINSERTED = 10,
  DBROWSTATUS_E_INTEGRITYVIOLATION = 11,
  DBROWSTATUS_E_INVALID = 12,
  DBROWSTATUS_E_MAXPENDCHANGESEXCEEDED = 13,
  DBROWSTATUS_E_OBJECTOPEN = 14,
  DBROWSTATUS_E_OUTOFMEMORY = 15,
  DBROWSTATUS_E_PERMISSIONDENIED = 16,
  DBROWSTATUS_E_LIMITREACHED = 17,
  DBROWSTATUS_E_SCHEMAVIOLATION = 18,
  DBROWSTATUS_E_FAIL = 19,
};

typedef struct _TAPE_ERASE
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned char Immediate;
  /* 0x0005 */ char __PADDING__[3];
} TAPE_ERASE, *PTAPE_ERASE; /* size: 0x0008 */

enum DBBINDURLFLAGENUM
{
  DBBINDURLFLAG_READ = 1,
  DBBINDURLFLAG_WRITE = 2,
  DBBINDURLFLAG_READWRITE = 3,
  DBBINDURLFLAG_SHARE_DENY_READ = 4,
  DBBINDURLFLAG_SHARE_DENY_WRITE = 8,
  DBBINDURLFLAG_SHARE_EXCLUSIVE = 12,
  DBBINDURLFLAG_SHARE_DENY_NONE = 16,
  DBBINDURLFLAG_ASYNCHRONOUS = 4096,
  DBBINDURLFLAG_COLLECTION = 8192,
  DBBINDURLFLAG_DELAYFETCHSTREAM = 16384,
  DBBINDURLFLAG_DELAYFETCHCOLUMNS = 0xffff8000,
  DBBINDURLFLAG_RECURSIVE = 0x400000,
  DBBINDURLFLAG_OUTPUT = 0x800000,
  DBBINDURLFLAG_WAITFORINIT = 0x1000000,
  DBBINDURLFLAG_OPENIFEXISTS = 0x2000000,
  DBBINDURLFLAG_OVERWRITE = 0x4000000,
  DBBINDURLFLAG_ISSTRUCTUREDDOCUMENT = 0x8000000,
};

typedef enum
{
  manager_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1587, *PTAG_UNNAMED_1587;

typedef enum
{
  dbIdIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1588, *PTAG_UNNAMED_1588;

struct IQueryAssociations
{
}; /* size: 0x0008 */

enum DBPARTENUM
{
  DBPART_INVALID = 0,
  DBPART_VALUE = 1,
  DBPART_LENGTH = 2,
  DBPART_STATUS = 4,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_1589, *PTAG_UNNAMED_1589;

typedef struct __vc_attributes::exportAttribute
{
} _vc_attributes::exportAttribute, *P_vc_attributes::exportAttribute; /* size: 0x0001 */

enum DBPROPENUM25
{
  DBPROP_COL_SEED = 282,
  DBPROP_COL_INCREMENT = 283,
  DBPROP_INIT_GENERALTIMEOUT = 284,
  DBPROP_COMSERVICES = 285,
};

struct lconv
{
  /* 0x0000 */ char* decimal_point;
  /* 0x0008 */ char* thousands_sep;
  /* 0x0010 */ char* grouping;
  /* 0x0018 */ char* int_curr_symbol;
  /* 0x0020 */ char* currency_symbol;
  /* 0x0028 */ char* mon_decimal_point;
  /* 0x0030 */ char* mon_thousands_sep;
  /* 0x0038 */ char* mon_grouping;
  /* 0x0040 */ char* positive_sign;
  /* 0x0048 */ char* negative_sign;
  /* 0x0050 */ char int_frac_digits;
  /* 0x0051 */ char frac_digits;
  /* 0x0052 */ char p_cs_precedes;
  /* 0x0053 */ char p_sep_by_space;
  /* 0x0054 */ char n_cs_precedes;
  /* 0x0055 */ char n_sep_by_space;
  /* 0x0056 */ char p_sign_posn;
  /* 0x0057 */ char n_sign_posn;
  /* 0x0058 */ wchar_t* _W_decimal_point;
  /* 0x0060 */ wchar_t* _W_thousands_sep;
  /* 0x0068 */ wchar_t* _W_int_curr_symbol;
  /* 0x0070 */ wchar_t* _W_currency_symbol;
  /* 0x0078 */ wchar_t* _W_mon_decimal_point;
  /* 0x0080 */ wchar_t* _W_mon_thousands_sep;
  /* 0x0088 */ wchar_t* _W_positive_sign;
  /* 0x0090 */ wchar_t* _W_negative_sign;
}; /* size: 0x0098 */

typedef enum _MEMORY_INFORMATION_CLASS
{
  MemoryBasicInformation = 0,
  MemoryWorkingSetInformation = 1,
  MemoryMappedFilenameInformation = 2,
  MemoryRegionInformation = 3,
  MemoryWorkingSetExInformation = 4,
} MEMORY_INFORMATION_CLASS, *PMEMORY_INFORMATION_CLASS;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_1590, *PTAG_UNNAMED_1590;

enum EErrorDestTypes
{
  ERROR_DEST_NONE = 0,
  ERROR_DEST_DEFAULT = 1,
  ERROR_DEST_USER = 2,
  ERROR_DEST_ERRLOG = 4,
  ERROR_DEST_EVENTLOG = 8,
  ERROR_DEST_BUFFER = 16,
  ERROR_DEST_FILE = 32,
  ERROR_DEST_USER_WITH_SDS_TRANSLATION = 64,
  ERROR_DEST_DEFAULT_NO_USER = 128,
};

typedef enum
{
  database_idIdx = 0,
  database_segment_countIdx = 1,
  brick_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1591, *PTAG_UNNAMED_1591;

enum DBMATCHTYPEENUM
{
  DBMATCHTYPE_FULL = 0,
  DBMATCHTYPE_NONE = 1,
  DBMATCHTYPE_PARTIAL = 2,
};

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,131072,524288,8,1> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class TMemoryBlockAllocator<0,131072,524288,8,1>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,131072,524288,8,1> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionWithoutActive m_nodePart[64];
  /* 0x30c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,131072,524288,8,1> > m_reservationForActiveParts;
}; /* size: 0x3100 */

typedef enum
{
  database_idIdx = 0,
  is_remoteIdx = 1,
  messages_sentIdx = 2,
  messages_receivedIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1592, *PTAG_UNNAMED_1592;

enum DBCOMPAREOPSENUM
{
  DBCOMPAREOPS_LT = 0,
  DBCOMPAREOPS_LE = 1,
  DBCOMPAREOPS_EQ = 2,
  DBCOMPAREOPS_GE = 3,
  DBCOMPAREOPS_GT = 4,
  DBCOMPAREOPS_BEGINSWITH = 5,
  DBCOMPAREOPS_CONTAINS = 6,
  DBCOMPAREOPS_NE = 7,
  DBCOMPAREOPS_IGNORE = 8,
  DBCOMPAREOPS_CASESENSITIVE = 4096,
  DBCOMPAREOPS_CASEINSENSITIVE = 8192,
};

class XeSqlPkg::database_stopped
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_463[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  file_pathIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1593, *PTAG_UNNAMED_1593;

typedef enum _SECTION_INFORMATION_CLASS
{
  SectionBasicInformation = 0,
  SectionImageInformation = 1,
  SectionRelocationInformation = 2,
  MaxSectionInfoClass = 3,
} SECTION_INFORMATION_CLASS, *PSECTION_INFORMATION_CLASS;

typedef struct _IMAGE_LINENUMBER
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned long SymbolTableIndex;
      /* 0x0000 */ unsigned long VirtualAddress;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Type;
  /* 0x0004 */ unsigned short Linenumber;
} IMAGE_LINENUMBER, *PIMAGE_LINENUMBER; /* size: 0x0006 */

enum DBPROPFLAGSENUM
{
  DBPROPFLAGS_NOTSUPPORTED = 0,
  DBPROPFLAGS_COLUMN = 1,
  DBPROPFLAGS_DATASOURCE = 2,
  DBPROPFLAGS_DATASOURCECREATE = 4,
  DBPROPFLAGS_DATASOURCEINFO = 8,
  DBPROPFLAGS_DBINIT = 16,
  DBPROPFLAGS_INDEX = 32,
  DBPROPFLAGS_ROWSET = 64,
  DBPROPFLAGS_TABLE = 128,
  DBPROPFLAGS_COLUMNOK = 256,
  DBPROPFLAGS_READ = 512,
  DBPROPFLAGS_WRITE = 1024,
  DBPROPFLAGS_REQUIRED = 2048,
  DBPROPFLAGS_SESSION = 4096,
};

struct tagBIND_OPTS
{
  /* 0x0000 */ unsigned long cbStruct;
  /* 0x0004 */ unsigned long grfFlags;
  /* 0x0008 */ unsigned long grfMode;
  /* 0x000c */ unsigned long dwTickCountDeadline;
}; /* size: 0x0010 */

class XeSqlPkg::database_transaction_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_464[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct ISWbemNamedValue
{
}; /* size: 0x0008 */

typedef enum
{
  LdrpNoDevice = 0,
  LdrpWebDAV = 1,
  LdrpRemote = 2,
  LdrpAnyDevice = -1,
  LdrpAnyDevice2bit = 3,
} TAG_UNNAMED_1594, *PTAG_UNNAMED_1594;

struct tagLOGCOLORSPACEW
{
  /* 0x0000 */ unsigned long lcsSignature;
  /* 0x0004 */ unsigned long lcsVersion;
  /* 0x0008 */ unsigned long lcsSize;
  /* 0x000c */ long lcsCSType;
  /* 0x0010 */ long lcsIntent;
  /* 0x0014 */ struct tagICEXYZTRIPLE lcsEndpoints;
  /* 0x0038 */ unsigned long lcsGammaRed;
  /* 0x003c */ unsigned long lcsGammaGreen;
  /* 0x0040 */ unsigned long lcsGammaBlue;
  /* 0x0044 */ wchar_t lcsFilename[260];
}; /* size: 0x024c */

struct tagEMRCREATECOLORSPACEW
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihCS;
  /* 0x000c */ struct tagLOGCOLORSPACEW lcs;
  /* 0x0258 */ unsigned long dwFlags;
  /* 0x025c */ unsigned long cbData;
  /* 0x0260 */ unsigned char Data[1];
  /* 0x0261 */ char __PADDING__[3];
}; /* size: 0x0264 */

typedef enum _NT_PRODUCT_TYPE
{
  NtProductWinNt = 1,
  NtProductLanManNt = 2,
  NtProductServer = 3,
} NT_PRODUCT_TYPE, *PNT_PRODUCT_TYPE;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1595, *PTAG_UNNAMED_1595;

typedef struct __vc_attributes::helpstringcontextAttribute
{
  /* 0x0000 */ int contextid;
} _vc_attributes::helpstringcontextAttribute, *P_vc_attributes::helpstringcontextAttribute; /* size: 0x0004 */

typedef enum _CLUSTER_SHARED_VOLUME_BACKUP_STATE
{
  VolumeBackupNone = 0,
  VolumeBackupInProgress = 1,
} CLUSTER_SHARED_VOLUME_BACKUP_STATE, *PCLUSTER_SHARED_VOLUME_BACKUP_STATE;

typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA
{
  /* 0x0000 */ char* pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *PSERVICE_REQUIRED_PRIVILEGES_INFOA; /* size: 0x0008 */

typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
  GenericLessThan = 0,
  GenericGreaterThan = 1,
  GenericEqual = 2,
} RTL_GENERIC_COMPARE_RESULTS, *PRTL_GENERIC_COMPARE_RESULTS;

enum DBSEEKENUM
{
  DBSEEK_INVALID = 0,
  DBSEEK_FIRSTEQ = 1,
  DBSEEK_LASTEQ = 2,
  DBSEEK_AFTEREQ = 4,
  DBSEEK_AFTER = 8,
  DBSEEK_BEFOREEQ = 16,
  DBSEEK_BEFORE = 32,
};

struct tagCUSTDATAITEM
{
  /* 0x0000 */ struct _GUID guid;
  /* 0x0010 */ struct tagVARIANT varValue;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1596, *PTAG_UNNAMED_1596;

class FunctionCallBinder_4<void,void (__cdecl*)(void *,SOSHost_Node *,unsigned __int64,unsigned __int64),void *,SOSHost_Node *,unsigned __int64,unsigned __int64>
{
  /* 0x0000 */ void* m_f /* function */;
  /* 0x0008 */ void* m_p1;
  /* 0x0010 */ class SOSHost_Node* m_p2;
  /* 0x0018 */ unsigned __int64 m_p3;
  /* 0x0020 */ unsigned __int64 m_p4;
}; /* size: 0x0028 */

typedef struct _FILE_MOVE_CLUSTER_INFORMATION
{
  /* 0x0000 */ unsigned long ClusterCount;
  /* 0x0004 */ long Padding_465;
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ unsigned long FileNameLength;
  /* 0x0014 */ wchar_t FileName[1];
  /* 0x0016 */ char __PADDING__[2];
} FILE_MOVE_CLUSTER_INFORMATION, *PFILE_MOVE_CLUSTER_INFORMATION; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 32,
} TAG_UNNAMED_1597, *PTAG_UNNAMED_1597;

typedef enum _PROGRESS_INVOKE_SETTING
{
  ProgressInvokeNever = 1,
  ProgressInvokeEveryObject = 2,
  ProgressInvokeOnError = 3,
  ProgressCancelOperation = 4,
  ProgressRetryOperation = 5,
} PROGRESS_INVOKE_SETTING, *PPROGRESS_INVOKE_SETTING;

typedef enum
{
  test_pointIdx = 0,
  group_idIdx = 1,
  replica_idIdx = 2,
  ag_database_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1598, *PTAG_UNNAMED_1598;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  index_idIdx = 2,
  job_idIdx = 3,
  job_typeIdx = 4,
  statusIdx = 5,
  durationIdx = 6,
  retriesIdx = 7,
  successIdx = 8,
  last_errorIdx = 9,
  countIdx = 10,
  statistics_listIdx = 11,
  database_nameIdx = 12,
  LastField = 13,
} TAG_UNNAMED_1599, *PTAG_UNNAMED_1599;

struct XEConfigMapping<enum XESessionLocality>
{
  /* 0x0000 */ wchar_t m_optionName[255];
  /* 0x01fe */ char Padding_466[2];
  /* 0x0200 */ enum XESessionLocality m_policy;
}; /* size: 0x0204 */

enum XACTHEURISTIC
{
  XACTHEURISTIC_ABORT = 1,
  XACTHEURISTIC_COMMIT = 2,
  XACTHEURISTIC_DAMAGE = 3,
  XACTHEURISTIC_DANGER = 4,
};

struct tagEMRPOLYPOLYLINE16
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long nPolys;
  /* 0x001c */ unsigned long cpts;
  /* 0x0020 */ unsigned long aPolyCounts[1];
  /* 0x0024 */ struct tagPOINTS apts[1];
}; /* size: 0x0028 */

class XeSqlPkg::catalog_metadata_cache_entry_removed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_467[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum _LDR_DDAG_STATE
{
  LdrModulesMerged = -5,
  LdrModulesInitError = -4,
  LdrModulesSnapError = -3,
  LdrModulesUnloaded = -2,
  LdrModulesUnloading = -1,
  LdrModulesPlaceHolder = 0,
  LdrModulesMapping = 1,
  LdrModulesMapped = 2,
  LdrModulesWaitingForDependencies = 3,
  LdrModulesSnapping = 4,
  LdrModulesSnapped = 5,
  LdrModulesCondensed = 6,
  LdrModulesReadyToInit = 7,
  LdrModulesInitializing = 8,
  LdrModulesReadyToRun = 9,
} LDR_DDAG_STATE, *PLDR_DDAG_STATE;

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  worker_idIdx = 7,
  stuck_worker_idIdx = 8,
  pages_in_queueIdx = 9,
  outstanding_pagesIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1600, *PTAG_UNNAMED_1600;

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
{
  /* 0x0000 */ void* pfnBufferSize /* function */;
  /* 0x0008 */ void* pfnMarshall /* function */;
  /* 0x0010 */ void* pfnUnmarshall /* function */;
  /* 0x0018 */ void* pfnFree /* function */;
} USER_MARSHAL_ROUTINE_QUADRUPLE, *PUSER_MARSHAL_ROUTINE_QUADRUPLE; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 33,
} TAG_UNNAMED_1601, *PTAG_UNNAMED_1601;

typedef enum _SYSTEM_MEMORY_LIST_COMMAND
{
  MemoryCaptureAccessedBits = 0,
  MemoryCaptureAndResetAccessedBits = 1,
  MemoryEmptyWorkingSets = 2,
  MemoryFlushModifiedList = 3,
  MemoryPurgeStandbyList = 4,
  MemoryPurgeLowPriorityStandbyList = 5,
  MemoryCommandMax = 6,
} SYSTEM_MEMORY_LIST_COMMAND, *PSYSTEM_MEMORY_LIST_COMMAND;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 5,
  VldEddOffset = 0,
  BufSize = 44,
} TAG_UNNAMED_1602, *PTAG_UNNAMED_1602;

typedef class _bstr_t
{
  /* 0x0000 */ class _bstr_t::Data_t* m_Data;
} bstr_t, *Pbstr_t; /* size: 0x0008 */

class NullType
{
}; /* size: 0x0001 */

typedef enum _FSINFOCLASS
{
  FileFsVolumeInformation = 1,
  FileFsLabelInformation = 2,
  FileFsSizeInformation = 3,
  FileFsDeviceInformation = 4,
  FileFsAttributeInformation = 5,
  FileFsControlInformation = 6,
  FileFsFullSizeInformation = 7,
  FileFsObjectIdInformation = 8,
  FileFsDriverPathInformation = 9,
  FileFsVolumeFlagsInformation = 10,
  FileFsSectorSizeInformation = 11,
  FileFsMaximumInformation = 12,
} FSINFOCLASS, *PFSINFOCLASS;

struct tagIMEMENUITEMINFOA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int fType;
  /* 0x0008 */ unsigned int fState;
  /* 0x000c */ unsigned int wID;
  /* 0x0010 */ struct HBITMAP__* hbmpChecked;
  /* 0x0018 */ struct HBITMAP__* hbmpUnchecked;
  /* 0x0020 */ unsigned long dwItemData;
  /* 0x0024 */ char szString[80];
  /* 0x0074 */ long Padding_468;
  /* 0x0078 */ struct HBITMAP__* hbmpItem;
}; /* size: 0x0080 */

struct CXFilePageForRead
{
  /* 0x0000 */ long Padding_469[10];
  /* 0x0028 */ unsigned long m_lastAccessTime;
  /* 0x002c */ unsigned int m_sizeUnread;
}; /* size: 0x0030 */

typedef enum _WORKERFACTORYINFOCLASS
{
  WorkerFactoryTimeout = 0,
  WorkerFactoryRetryTimeout = 1,
  WorkerFactoryIdleTimeout = 2,
  WorkerFactoryBindingCount = 3,
  WorkerFactoryThreadMinimum = 4,
  WorkerFactoryThreadMaximum = 5,
  WorkerFactoryPaused = 6,
  WorkerFactoryBasicInformation = 7,
  WorkerFactoryAdjustThreadGoal = 8,
  WorkerFactoryCallbackType = 9,
  WorkerFactoryStackInformation = 10,
  MaxWorkerFactoryInfoClass = 11,
} WORKERFACTORYINFOCLASS, *PWORKERFACTORYINFOCLASS;

struct tagHW_PROFILE_INFOW
{
  /* 0x0000 */ unsigned long dwDockInfo;
  /* 0x0004 */ wchar_t szHwProfileGuid[39];
  /* 0x0052 */ wchar_t szHwProfileName[80];
  /* 0x00f2 */ char __PADDING__[2];
}; /* size: 0x00f4 */

typedef enum _WATCHDOG_HANDLER_ACTION
{
  WdActionSetTimeoutValue = 0,
  WdActionQueryTimeoutValue = 1,
  WdActionResetTimer = 2,
  WdActionStopTimer = 3,
  WdActionStartTimer = 4,
  WdActionSetTriggerAction = 5,
  WdActionQueryTriggerAction = 6,
  WdActionQueryState = 7,
  WdActionSleep = 8,
  WdActionWake = 9,
  WdActionMarkHiberPhase = 10,
} WATCHDOG_HANDLER_ACTION, *PWATCHDOG_HANDLER_ACTION;

enum PO_WAKE_SOURCE_TYPE
{
  DeviceWakeSourceType = 0,
  FixedWakeSourceType = 1,
  TimerWakeSourceType = 2,
};

typedef struct _TOKEN_MANDATORY_POLICY
{
  /* 0x0000 */ unsigned long Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY; /* size: 0x0004 */

typedef struct _TOKEN_ACCESS_INFORMATION
{
  /* 0x0000 */ struct _SID_AND_ATTRIBUTES_HASH* SidHash;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES_HASH* RestrictedSidHash;
  /* 0x0010 */ struct _TOKEN_PRIVILEGES* Privileges;
  /* 0x0018 */ struct _LUID AuthenticationId;
  /* 0x0020 */ enum _TOKEN_TYPE TokenType;
  /* 0x0024 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0028 */ struct _TOKEN_MANDATORY_POLICY MandatoryPolicy;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ unsigned long AppContainerNumber;
  /* 0x0034 */ long Padding_470;
  /* 0x0038 */ void* PackageSid;
  /* 0x0040 */ struct _SID_AND_ATTRIBUTES_HASH* CapabilitiesHash;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION; /* size: 0x0048 */

enum DBPARAMIOENUM
{
  DBPARAMIO_NOTPARAM = 0,
  DBPARAMIO_INPUT = 1,
  DBPARAMIO_OUTPUT = 2,
};

struct IRunnableObject
{
}; /* size: 0x0008 */

typedef enum _KEY_SET_INFORMATION_CLASS
{
  KeyWriteTimeInformation = 0,
  KeyWow64FlagsInformation = 1,
  KeyControlFlagsInformation = 2,
  KeySetVirtualizationInformation = 3,
  KeySetDebugInformation = 4,
  KeySetHandleTagsInformation = 5,
  MaxKeySetInfoClass = 6,
} KEY_SET_INFORMATION_CLASS, *PKEY_SET_INFORMATION_CLASS;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1603, *PTAG_UNNAMED_1603;

struct IMAGE_COR20_HEADER
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned short MajorRuntimeVersion;
  /* 0x0006 */ unsigned short MinorRuntimeVersion;
  /* 0x0008 */ struct _IMAGE_DATA_DIRECTORY MetaData;
  /* 0x0010 */ unsigned long Flags;
  union
  {
    /* 0x0014 */ unsigned long EntryPointToken;
    /* 0x0014 */ unsigned long EntryPointRVA;
  }; /* size: 0x0004 */
  /* 0x0018 */ struct _IMAGE_DATA_DIRECTORY Resources;
  /* 0x0020 */ struct _IMAGE_DATA_DIRECTORY StrongNameSignature;
  /* 0x0028 */ struct _IMAGE_DATA_DIRECTORY CodeManagerTable;
  /* 0x0030 */ struct _IMAGE_DATA_DIRECTORY VTableFixups;
  /* 0x0038 */ struct _IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
  /* 0x0040 */ struct _IMAGE_DATA_DIRECTORY ManagedNativeHeader;
}; /* size: 0x0048 */

enum VERIFIER_MODE
{
  VERIFIER_MODE_UNUSED = 0,
  VERIFIER_MODE_TRIAGE = 1,
  VERIFIER_MODE_FIELD = 2,
  VERIFIER_MODE_LOGO = 3,
  VERIFIER_MODE_TEST = 4,
};

struct PPM_WMI_PERF_STATE
{
  /* 0x0000 */ unsigned long Frequency;
  /* 0x0004 */ unsigned long Power;
  /* 0x0008 */ unsigned char PercentFrequency;
  /* 0x0009 */ unsigned char IncreaseLevel;
  /* 0x000a */ unsigned char DecreaseLevel;
  /* 0x000b */ unsigned char Type;
  /* 0x000c */ unsigned long IncreaseTime;
  /* 0x0010 */ unsigned long DecreaseTime;
  /* 0x0014 */ long Padding_471;
  /* 0x0018 */ unsigned __int64 Control;
  /* 0x0020 */ unsigned __int64 Status;
  /* 0x0028 */ unsigned long HitCount;
  /* 0x002c */ unsigned long Reserved1;
  /* 0x0030 */ unsigned __int64 Reserved2;
  /* 0x0038 */ unsigned __int64 Reserved3;
}; /* size: 0x0040 */

class XeSosPkg::scheduler_destroyed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_472[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class CAutoComBstr
{
}; /* size: 0x0008 */

typedef enum _TABLE_SEARCH_RESULT
{
  TableEmptyTree = 0,
  TableFoundNode = 1,
  TableInsertAsLeft = 2,
  TableInsertAsRight = 3,
} TABLE_SEARCH_RESULT, *PTABLE_SEARCH_RESULT;

class AutoSpinlockHolder<207,3,1>;

typedef struct _IMAGE_EXPORT_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long Name;
  /* 0x0010 */ unsigned long Base;
  /* 0x0014 */ unsigned long NumberOfFunctions;
  /* 0x0018 */ unsigned long NumberOfNames;
  /* 0x001c */ unsigned long AddressOfFunctions;
  /* 0x0020 */ unsigned long AddressOfNames;
  /* 0x0024 */ unsigned long AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY; /* size: 0x0028 */

enum DBCONVERTFLAGSENUM
{
  DBCONVERTFLAGS_COLUMN = 0,
  DBCONVERTFLAGS_PARAMETER = 1,
};

struct CXFrontendLookupTable<2,unsigned __int64,1024>::LookupEntry
{
  /* 0x0000 */ unsigned __int64 hashKey[2];
  /* 0x0010 */ unsigned long dictionaryEntry;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct HadrTransportControlSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1604, *PTAG_UNNAMED_1604;

typedef enum
{
  entry_stateIdx = 0,
  id_or_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1605, *PTAG_UNNAMED_1605;

typedef enum _SHUTDOWN_ACTION
{
  ShutdownNoReboot = 0,
  ShutdownReboot = 1,
  ShutdownPowerOff = 2,
} SHUTDOWN_ACTION, *PSHUTDOWN_ACTION;

class ClockHand::Statistic
{
  /* 0x0000 */ unsigned long m_RoundId;
  /* 0x0004 */ enum ClockHand::CLOCKHAND_STATE m_State;
  /* 0x0008 */ unsigned __int64 m_Removed;
  /* 0x0010 */ __int64 m_UpdatedInLastRound;
  /* 0x0018 */ __int64 m_EntriesInLastRound;
  /* 0x0020 */ unsigned __int64 m_UpdatedInCurRound;
  /* 0x0028 */ unsigned __int64 m_EntriesInCurRound;
  /* 0x0030 */ unsigned __int64 m_RemovedInLastRound;
  /* 0x0038 */ unsigned __int64 m_RemovedInCurrentRound;
  /* 0x0040 */ unsigned __int64 m_NumberOfRounds;
  /* 0x0048 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TimeOfLastClockTick;
  /* 0x0050 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TimeWhenRoundStarted;
  /* 0x0058 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TimeOfLastRound;
}; /* size: 0x0060 */

class ClockHand
{
  /* 0x0000 */ unsigned __int64 m_EntriesYetToVisitInThisRound;
  /* 0x0008 */ class ClockHand::Statistic m_stats;
}; /* size: 0x0068 */

struct tagEMRPOLYLINE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cptl;
  /* 0x001c */ struct _POINTL aptl[1];
}; /* size: 0x0024 */

typedef enum _PORT_INFORMATION_CLASS
{
  PortBasicInformation = 0,
  PortDumpInformation = 1,
} PORT_INFORMATION_CLASS, *PPORT_INFORMATION_CLASS;

struct ClockAlgInternodeSyncSLock
{
}; /* size: 0x0004 */

class ClockAlgorithm::InterNodeControlInfo
{
  /* 0x0000 */ volatile __int64 m_RoundId;
  /* 0x0008 */ long m_NodesTotal;
  /* 0x000c */ volatile long m_NodesInCurrentRound;
  /* 0x0010 */ volatile long m_NodesStuck;
  /* 0x0014 */ struct ClockAlgInternodeSyncSLock m_lock;
}; /* size: 0x0018 */

struct XE_TEvent<3,0,3>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,3> m_dynamicAttr;
  /* 0x00f8 */ struct XEEvent m_event;
}; /* size: 0x0140 */

class XeSqlPkg::user_event
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_473[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int event_idOffset;
    /* 0x0000 */ const int user_infoOffset;
    /* 0x0000 */ const int user_dataOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0258 */

typedef enum
{
  database_idIdx = 0,
  first_ghost_page_file_idIdx = 1,
  first_ghost_page_page_idIdx = 2,
  last_ghost_page_file_idIdx = 3,
  last_ghost_page_page_idIdx = 4,
  ghost_page_countIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1606, *PTAG_UNNAMED_1606;

typedef enum
{
  is_enteringIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1607, *PTAG_UNNAMED_1607;

typedef enum _HARDERROR_RESPONSE_OPTION
{
  OptionAbortRetryIgnore = 0,
  OptionOk = 1,
  OptionOkCancel = 2,
  OptionRetryCancel = 3,
  OptionYesNo = 4,
  OptionYesNoCancel = 5,
  OptionShutdownSystem = 6,
  OptionOkNoWait = 7,
  OptionCancelTryContinue = 8,
} HARDERROR_RESPONSE_OPTION, *PHARDERROR_RESPONSE_OPTION;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_1608, *PTAG_UNNAMED_1608;

typedef enum
{
  secondary_spool_query_operation_node_idIdx = 0,
  primary_spool_query_operation_node_idIdx = 1,
  primary_spool_never_openedIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1609, *PTAG_UNNAMED_1609;

class SOS_Ticks<QueryPerfCounterTicks,-3>;

typedef enum _SYSTEM_PIXEL_FORMAT
{
  SystemPixelFormatUnknown = 0,
  SystemPixelFormatR8G8B8 = 1,
  SystemPixelFormatR8G8B8X8 = 2,
  SystemPixelFormatB8G8R8 = 3,
  SystemPixelFormatB8G8R8X8 = 4,
} SYSTEM_PIXEL_FORMAT, *PSYSTEM_PIXEL_FORMAT;

enum PLSIndex
{
  PLS_QUERYRSEMAPHORE = 0,
  PLS_SLO_INFO = 1,
  PLS_PERCTR_INSTANCE = 2,
  PLS_LAST = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 44,
} TAG_UNNAMED_1610, *PTAG_UNNAMED_1610;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1611, *PTAG_UNNAMED_1611;

struct IMarshal2
{
}; /* size: 0x0008 */

enum XeTCMPkg::tcm_map_xact_state_transition
{
  XACT_COMMITREQ_WAITINGPREPARE = 0,
  XACT_PREPARED_WAITINGCOMMITORDERSEND = 1,
  XACT_COMMITORDERRECD = 2,
  XACT_TO_BE_PROCESSED = 3,
  XACT_PROCESSED = 4,
};

struct RPC_DISPATCH_TABLE
{
  /* 0x0000 */ unsigned int DispatchTableCount;
  /* 0x0004 */ long Padding_474;
  /* 0x0008 */ void** DispatchTable /* function */;
  /* 0x0010 */ __int64 Reserved;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 3,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 34,
} TAG_UNNAMED_1612, *PTAG_UNNAMED_1612;

typedef struct _TAPE_GET_DRIVE_PARAMETERS
{
  /* 0x0000 */ unsigned char ECC;
  /* 0x0001 */ unsigned char Compression;
  /* 0x0002 */ unsigned char DataPadding;
  /* 0x0003 */ unsigned char ReportSetmarks;
  /* 0x0004 */ unsigned long DefaultBlockSize;
  /* 0x0008 */ unsigned long MaximumBlockSize;
  /* 0x000c */ unsigned long MinimumBlockSize;
  /* 0x0010 */ unsigned long MaximumPartitionCount;
  /* 0x0014 */ unsigned long FeaturesLow;
  /* 0x0018 */ unsigned long FeaturesHigh;
  /* 0x001c */ unsigned long EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS; /* size: 0x0020 */

struct ISWbemObjectEx
{
}; /* size: 0x0008 */

class XE_ConstantElimination<unsigned short,4096>
{
  /* 0x0000 */ const wchar_t* m_userBuffer;
  /* 0x0008 */ unsigned int m_userBufSize;
  /* 0x000c */ unsigned int m_pos;
  /* 0x0010 */ enum XE_ConstantElimination<unsigned short,4096>::STREAM_STATE m_streamState;
  /* 0x0014 */ wchar_t m_outBuffer[4096];
  /* 0x2014 */ unsigned int m_endOfOutBuffer;
  /* 0x2018 */ wchar_t m_prevItem;
}; /* size: 0x2020 */

typedef enum _NETSETUP_JOIN_STATUS
{
  NetSetupUnknownStatus = 0,
  NetSetupUnjoined = 1,
  NetSetupWorkgroupName = 2,
  NetSetupDomainName = 3,
} NETSETUP_JOIN_STATUS, *PNETSETUP_JOIN_STATUS;

enum DBPENDINGSTATUSENUM
{
  DBPENDINGSTATUS_NEW = 1,
  DBPENDINGSTATUS_CHANGED = 2,
  DBPENDINGSTATUS_DELETED = 4,
  DBPENDINGSTATUS_UNCHANGED = 8,
  DBPENDINGSTATUS_INVALIDROW = 16,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1613, *PTAG_UNNAMED_1613;

struct IPerPropertyBrowsing
{
}; /* size: 0x0008 */

enum DBASYNCHOPENUM
{
  DBASYNCHOP_OPEN = 0,
};

struct tagDBBINDEXT
{
  /* 0x0000 */ unsigned char* pExtension;
  /* 0x0008 */ unsigned __int64 ulExtension;
}; /* size: 0x0010 */

typedef enum
{
  manager_idIdx = 0,
  old_stateIdx = 1,
  new_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1614, *PTAG_UNNAMED_1614;

typedef struct _STRING64
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_475;
  /* 0x0008 */ unsigned __int64 Buffer;
} STRING64, *PSTRING64; /* size: 0x0010 */

typedef enum _KEY_INFORMATION_CLASS
{
  KeyBasicInformation = 0,
  KeyNodeInformation = 1,
  KeyFullInformation = 2,
  KeyNameInformation = 3,
  KeyCachedInformation = 4,
  KeyFlagsInformation = 5,
  KeyVirtualizationInformation = 6,
  KeyHandleTagsInformation = 7,
  MaxKeyInfoClass = 8,
} KEY_INFORMATION_CLASS, *PKEY_INFORMATION_CLASS;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 32,
} TAG_UNNAMED_1615, *PTAG_UNNAMED_1615;

enum CLUSTER_RESOURCE_RESTART_ACTION
{
  ClusterResourceDontRestart = 0,
  ClusterResourceRestartNoNotify = 1,
  ClusterResourceRestartNotify = 2,
  ClusterResourceRestartActionCount = 3,
};

typedef struct _KEY_EVENT_RECORD
{
  /* 0x0000 */ int bKeyDown;
  /* 0x0004 */ unsigned short wRepeatCount;
  /* 0x0006 */ unsigned short wVirtualKeyCode;
  /* 0x0008 */ unsigned short wVirtualScanCode;
  union
  {
    union
    {
      /* 0x000a */ wchar_t UnicodeChar;
      /* 0x000a */ char AsciiChar;
    }; /* size: 0x0002 */
  } /* size: 0x0002 */ uChar;
  /* 0x000c */ unsigned long dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD; /* size: 0x0010 */

typedef struct _LDR_DLL_LOADED_NOTIFICATION_DATA
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_476;
  /* 0x0008 */ const struct _UNICODE_STRING* FullDllName;
  /* 0x0010 */ const struct _UNICODE_STRING* BaseDllName;
  /* 0x0018 */ void* DllBase;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ long __PADDING__[1];
} LDR_DLL_LOADED_NOTIFICATION_DATA, *PLDR_DLL_LOADED_NOTIFICATION_DATA; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 3,
  VldEddOffset = 8,
  BufSize = 73,
} TAG_UNNAMED_1616, *PTAG_UNNAMED_1616;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1617, *PTAG_UNNAMED_1617;

class XE_LogDefaultMetadataDecoder
{
  /* 0x0000 */ long Padding_477[6];
  /* 0x0018 */ class XE_ILogReadMessageHandler* m_msgHandler;
}; /* size: 0x0020 */

typedef enum _REG_ACTION
{
  KeyAdded = 0,
  KeyRemoved = 1,
  KeyModified = 2,
} REG_ACTION, *PREG_ACTION;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1618, *PTAG_UNNAMED_1618;

struct MENUITEMTEMPLATE
{
  /* 0x0000 */ unsigned short mtOption;
  /* 0x0002 */ unsigned short mtID;
  /* 0x0004 */ wchar_t mtString[1];
}; /* size: 0x0006 */

class CacheClockHand<CacheClockAlgorithm,ClockInfo>::Fuse
{
  /* 0x0000 */ int* m_isMoving;
  /* 0x0008 */ int m_working;
}; /* size: 0x0010 */

typedef enum _BOOT_ENTROPY_SOURCE_RESULT_CODE
{
  BootEntropySourceStructureUninitialized = 0,
  BootEntropySourceDisabledByPolicy = 1,
  BootEntropySourceNotPresent = 2,
  BootEntropySourceError = 3,
  BootEntropySourceSuccess = 4,
} BOOT_ENTROPY_SOURCE_RESULT_CODE, *PBOOT_ENTROPY_SOURCE_RESULT_CODE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_1619, *PTAG_UNNAMED_1619;

class CXRLEZeroColumn<unsigned int>
{
  union
  {
    /* 0x0000 */ const unsigned int ZERO_HEADER_HIGH;
    /* 0x0000 */ const unsigned int ZERO_HEADER_LOW;
    /* 0x0000 */ const unsigned int ZERO_HEADER_MASK;
    /* 0x0000 */ const unsigned int DUAL_SYMBOL;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_478[5];
  /* 0x0018 */ unsigned int m_currentValue;
  /* 0x001c */ long Padding_479;
  /* 0x0020 */ unsigned int* m_startPointer;
  /* 0x0028 */ unsigned int m_zeroLength;
  /* 0x002c */ int m_fDecompressed;
  /* 0x0030 */ unsigned int m_realPosition;
}; /* size: 0x0038 */

typedef enum _NET_VALIDATE_PASSWORD_TYPE
{
  NetValidateAuthentication = 1,
  NetValidatePasswordChange = 2,
  NetValidatePasswordReset = 3,
} NET_VALIDATE_PASSWORD_TYPE, *PNET_VALIDATE_PASSWORD_TYPE;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1620, *PTAG_UNNAMED_1620;

enum ERROR_CONTROL
{
  RETURN_ERRORS = 0,
  THROW_ERRORS = 1,
};

typedef enum
{
  database_idIdx = 0,
  consumer_idIdx = 1,
  is_aliveIdx = 2,
  consumer_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1621, *PTAG_UNNAMED_1621;

typedef enum _CM_SHARE_DISPOSITION
{
  CmResourceShareUndetermined = 0,
  CmResourceShareDeviceExclusive = 1,
  CmResourceShareDriverExclusive = 2,
  CmResourceShareShared = 3,
} CM_SHARE_DISPOSITION, *PCM_SHARE_DISPOSITION;

struct IXMLDOMDocumentType
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_1622, *PTAG_UNNAMED_1622;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1623, *PTAG_UNNAMED_1623;

class CAutoP<void>
{
}; /* size: 0x0008 */

typedef enum _DEBUG_CONTROL_SPACE_ITEM
{
  DEBUG_CONTROL_SPACE_PCR = 0,
  DEBUG_CONTROL_SPACE_PRCB = 1,
  DEBUG_CONTROL_SPACE_KSPECIAL = 2,
  DEBUG_CONTROL_SPACE_THREAD = 3,
  DEBUG_CONTROL_SPACE_MAXIMUM = 4,
} DEBUG_CONTROL_SPACE_ITEM, *PDEBUG_CONTROL_SPACE_ITEM;

typedef enum _IO_PRIORITY_HINT
{
  IoPriorityVeryLow = 0,
  IoPriorityLow = 1,
  IoPriorityNormal = 2,
  IoPriorityHigh = 3,
  IoPriorityCritical = 4,
  MaxIoPriorityTypes = 5,
} IO_PRIORITY_HINT, *PIO_PRIORITY_HINT;

typedef struct _FILE_STANDARD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0008 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0010 */ unsigned long NumberOfLinks;
  /* 0x0014 */ unsigned char DeletePending;
  /* 0x0015 */ unsigned char Directory;
  /* 0x0016 */ char __PADDING__[2];
} FILE_STANDARD_INFORMATION, *PFILE_STANDARD_INFORMATION; /* size: 0x0018 */

typedef enum
{
  cm_addressIdx = 0,
  stateIdx = 1,
  operationIdx = 2,
  operation_typeIdx = 3,
  manager_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1624, *PTAG_UNNAMED_1624;

typedef enum _HARDERROR_RESPONSE
{
  ResponseReturnToCaller = 0,
  ResponseNotHandled = 1,
  ResponseAbort = 2,
  ResponseCancel = 3,
  ResponseIgnore = 4,
  ResponseNo = 5,
  ResponseOk = 6,
  ResponseRetry = 7,
  ResponseYes = 8,
  ResponseTryAgain = 9,
  ResponseContinue = 10,
} HARDERROR_RESPONSE, *PHARDERROR_RESPONSE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 13,
} TAG_UNNAMED_1625, *PTAG_UNNAMED_1625;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_1626, *PTAG_UNNAMED_1626;

class CAutoComVariant
{
  /* 0x0000 */ struct tagVARIANT m_v;
}; /* size: 0x0018 */

typedef struct _WKSTA_INFO_102
{
  /* 0x0000 */ unsigned long wki102_platform_id;
  /* 0x0004 */ long Padding_480;
  /* 0x0008 */ wchar_t* wki102_computername;
  /* 0x0010 */ wchar_t* wki102_langroup;
  /* 0x0018 */ unsigned long wki102_ver_major;
  /* 0x001c */ unsigned long wki102_ver_minor;
  /* 0x0020 */ wchar_t* wki102_lanroot;
  /* 0x0028 */ unsigned long wki102_logged_on_users;
  /* 0x002c */ long __PADDING__[1];
} WKSTA_INFO_102, *PWKSTA_INFO_102; /* size: 0x0030 */

typedef enum _TIMER_SET_INFORMATION_CLASS
{
  TimerSetCoalescableTimer = 0,
  MaxTimerInfoClass = 1,
} TIMER_SET_INFORMATION_CLASS, *PTIMER_SET_INFORMATION_CLASS;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1627, *PTAG_UNNAMED_1627;

struct tagHARDWAREHOOKSTRUCT
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0008 */ unsigned int message;
  /* 0x000c */ long Padding_481;
  /* 0x0010 */ unsigned __int64 wParam;
  /* 0x0018 */ __int64 lParam;
}; /* size: 0x0020 */

enum DBSTATUSENUM21
{
  DBSTATUS_E_DOESNOTEXIST = 16,
  DBSTATUS_E_INVALIDURL = 17,
  DBSTATUS_E_RESOURCELOCKED = 18,
  DBSTATUS_E_RESOURCEEXISTS = 19,
  DBSTATUS_E_CANNOTCOMPLETE = 20,
  DBSTATUS_E_VOLUMENOTFOUND = 21,
  DBSTATUS_E_OUTOFSPACE = 22,
  DBSTATUS_S_CANNOTDELETESOURCE = 23,
  DBSTATUS_E_READONLY = 24,
  DBSTATUS_E_RESOURCEOUTOFSCOPE = 25,
  DBSTATUS_S_ALREADYEXISTS = 26,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1628, *PTAG_UNNAMED_1628;

struct IProcessLock
{
}; /* size: 0x0008 */

enum RTL_BSD_ITEM_TYPE
{
  RtlBsdItemVersionNumber = 0,
  RtlBsdItemProductType = 1,
  RtlBsdItemAabEnabled = 2,
  RtlBsdItemAabTimeout = 3,
  RtlBsdItemBootGood = 4,
  RtlBsdItemBootShutdown = 5,
  RtlBsdSleepInProgress = 6,
  RtlBsdPowerTransition = 7,
  RtlBsdItemBootAttemptCount = 8,
  RtlBsdItemMax = 9,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 3,
  VldEddOffset = 6,
  BufSize = 53,
} TAG_UNNAMED_1629, *PTAG_UNNAMED_1629;

typedef enum _PS_WAKE_REASON
{
  PsWakeReasonUser = 0,
  PsWakeReasonDevice = 1,
  PsWakeReasonKernel = 2,
  PsWakeReasonPower = 3,
  PsMaxWakeReasons = 4,
} PS_WAKE_REASON, *PPS_WAKE_REASON;

enum DBSTATUSENUM20
{
  MDSTATUS_S_CELLEMPTY = 14,
  DBSTATUS_S_IGNORE = 15,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1630, *PTAG_UNNAMED_1630;

typedef enum _FP_IEEE_COMPARE_RESULT
{
  FpCompareEqual = 0,
  FpCompareGreater = 1,
  FpCompareLess = 2,
  FpCompareUnordered = 3,
} FP_IEEE_COMPARE_RESULT, *PFP_IEEE_COMPARE_RESULT;

typedef struct _RPC_ASYNC_STATE
{
  /* 0x0000 */ unsigned int Size;
  /* 0x0004 */ unsigned long Signature;
  /* 0x0008 */ long Lock;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ void* StubInfo;
  /* 0x0018 */ void* UserInfo;
  /* 0x0020 */ void* RuntimeInfo;
  /* 0x0028 */ enum _RPC_ASYNC_EVENT Event;
  /* 0x002c */ enum _RPC_NOTIFICATION_TYPES NotificationType;
  /* 0x0030 */ union _RPC_ASYNC_NOTIFICATION_INFO u;
  /* 0x0050 */ __int64 Reserved[4];
} RPC_ASYNC_STATE, *PRPC_ASYNC_STATE; /* size: 0x0070 */

typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DATA
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ const wchar_t* AssemblyName;
  /* 0x0010 */ unsigned long AssemblyNameLength;
  /* 0x0014 */ unsigned long HashAlgorithm;
  /* 0x0018 */ unsigned long PseudoKey;
  /* 0x001c */ long __PADDING__[1];
} ACTIVATION_CONTEXT_ASSEMBLY_DATA, *PACTIVATION_CONTEXT_ASSEMBLY_DATA; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  log_block_idIdx = 2,
  durationIdx = 3,
  write_sizeIdx = 4,
  rowsIdx = 5,
  pending_writesIdx = 6,
  pending_bytesIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1631, *PTAG_UNNAMED_1631;

enum PS_CREATE_STATE
{
  PsCreateInitialState = 0,
  PsCreateFailOnFileOpen = 1,
  PsCreateFailOnSectionCreate = 2,
  PsCreateFailExeFormat = 3,
  PsCreateFailMachineMismatch = 4,
  PsCreateFailExeName = 5,
  PsCreateSuccess = 6,
  PsCreateMaximumStates = 7,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 44,
} TAG_UNNAMED_1632, *PTAG_UNNAMED_1632;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_1633, *PTAG_UNNAMED_1633;

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  lock_resultIdx = 2,
  skipcountIdx = 3,
  database_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1634, *PTAG_UNNAMED_1634;

enum DBRANGEENUM
{
  DBRANGE_INCLUSIVESTART = 0,
  DBRANGE_INCLUSIVEEND = 0,
  DBRANGE_EXCLUSIVESTART = 1,
  DBRANGE_EXCLUSIVEEND = 2,
  DBRANGE_EXCLUDENULLS = 4,
  DBRANGE_PREFIX = 8,
  DBRANGE_MATCH = 16,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_1635, *PTAG_UNNAMED_1635;

typedef struct _SERVER_INFO_1571
{
  /* 0x0000 */ unsigned long sv1571_cachedopenlimit;
} SERVER_INFO_1571, *PSERVER_INFO_1571; /* size: 0x0004 */

enum EMDFileType
{
  x_eft_SQLData = 0,
  x_eft_SQLLog = 1,
  x_eft_FileStreamData = 2,
  x_eft_FileStreamLog = 3,
  x_eft_FulltextCatlog = 4,
};

typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION
{
  /* 0x0000 */ void* Buffer;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long __PADDING__[1];
} ALPC_PORT_MESSAGE_ZONE_INFORMATION, *PALPC_PORT_MESSAGE_ZONE_INFORMATION; /* size: 0x0010 */

enum DBCOLUMNFLAGSENUM21
{
  DBCOLUMNFLAGS_ISROWURL = 0x10000,
  DBCOLUMNFLAGS_ISDEFAULTSTREAM = 0x20000,
  DBCOLUMNFLAGS_ISCOLLECTION = 0x40000,
};

class XeSqlPkg::broker_dialog_transmission_queue_enqueue
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_482[140];
      /* 0x0240 */ unsigned char m_buf[69];
    }; /* size: 0x0055 */
    /* 0x0000 */ const int message_sequence_numberOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int message_referenceOffset;
    /* 0x0000 */ const int from_service_nameOffset;
    /* 0x0000 */ const int to_service_nameOffset;
    /* 0x0000 */ const int from_broker_instanceOffset;
    /* 0x0000 */ const int to_broker_instanceOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0288 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1636, *PTAG_UNNAMED_1636;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 40,
} TAG_UNNAMED_1637, *PTAG_UNNAMED_1637;

struct HHOOK__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum _JOURNAL_INFORMATION_CLASS
{
  JournalAbsoluteInformation = 0,
  JournalClientInformation = 1,
  MaxJournalInformation = 2,
} JOURNAL_INFORMATION_CLASS, *PJOURNAL_INFORMATION_CLASS;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 42,
} TAG_UNNAMED_1638, *PTAG_UNNAMED_1638;

struct AsyncIAdviseSink
{
}; /* size: 0x0008 */

enum DBTABLESTATISTICSTYPE26
{
  DBSTAT_HISTOGRAM = 1,
  DBSTAT_COLUMN_CARDINALITY = 2,
  DBSTAT_TUPLE_CARDINALITY = 4,
};

typedef enum _NETSETUP_NAME_TYPE
{
  NetSetupUnknown = 0,
  NetSetupMachine = 1,
  NetSetupWorkgroup = 2,
  NetSetupDomain = 3,
  NetSetupNonExistentDomain = 4,
  NetSetupDnsMachine = 5,
} NETSETUP_NAME_TYPE, *PNETSETUP_NAME_TYPE;

typedef struct _SYSTEM_ALARM_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_ALARM_ACE, *PSYSTEM_ALARM_ACE; /* size: 0x000c */

typedef struct _SERVER_TRANSPORT_INFO_2
{
  /* 0x0000 */ unsigned long svti2_numberofvcs;
  /* 0x0004 */ long Padding_483;
  /* 0x0008 */ wchar_t* svti2_transportname;
  /* 0x0010 */ unsigned char* svti2_transportaddress;
  /* 0x0018 */ unsigned long svti2_transportaddresslength;
  /* 0x001c */ long Padding_484;
  /* 0x0020 */ wchar_t* svti2_networkaddress;
  /* 0x0028 */ wchar_t* svti2_domain;
  /* 0x0030 */ unsigned long svti2_flags;
  /* 0x0034 */ long __PADDING__[1];
} SERVER_TRANSPORT_INFO_2, *PSERVER_TRANSPORT_INFO_2; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 2,
  VldEddOffset = 1,
  BufSize = 24,
} TAG_UNNAMED_1639, *PTAG_UNNAMED_1639;

enum COMPARTMENT_ID
{
  UNSPECIFIED_COMPARTMENT_ID = 0,
  DEFAULT_COMPARTMENT_ID = 1,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1640, *PTAG_UNNAMED_1640;

typedef enum _UNWIND_OP_CODES
{
  UWOP_PUSH_NONVOL = 0,
  UWOP_ALLOC_LARGE = 1,
  UWOP_ALLOC_SMALL = 2,
  UWOP_SET_FPREG = 3,
  UWOP_SAVE_NONVOL = 4,
  UWOP_SAVE_NONVOL_FAR = 5,
  UWOP_EPILOG = 6,
  UWOP_SPARE_CODE = 7,
  UWOP_SAVE_XMM128 = 8,
  UWOP_SAVE_XMM128_FAR = 9,
  UWOP_PUSH_MACHFRAME = 10,
} UNWIND_OP_CODES, *PUNWIND_OP_CODES;

enum XeSqlPkg::file_written::CustomizableSlots
{
  collect_pathSlot = 0,
  collect_io_dataSlot = 1,
};

enum SLSIndex
{
  SLS_CLR = 0,
  SLS_LBSS_CACHE = 1,
  SLS_SQLMGR_MEMOBJ = 2,
  SLS_SE_FSM_CACHE = 3,
  SLS_QE_GRANTINFO = 4,
  SLS_SE_AM_VERSIONING = 5,
  SLS_HK_CONTEXT = 6,
  SLS_LAST = 7,
};

typedef struct _RPC_PROTSEQ_ENDPOINT
{
  /* 0x0000 */ unsigned char* RpcProtocolSequence;
  /* 0x0008 */ unsigned char* Endpoint;
} RPC_PROTSEQ_ENDPOINT, *PRPC_PROTSEQ_ENDPOINT; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 4,
  VldEddOffset = 3,
  BufSize = 48,
} TAG_UNNAMED_1641, *PTAG_UNNAMED_1641;

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  insertedIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1642, *PTAG_UNNAMED_1642;

class TAutoRWLock<SOS_RWLock>
{
  /* 0x0000 */ class SOS_RWLock* m_pLock;
  /* 0x0008 */ enum RWLockMode m_lockMode;
}; /* size: 0x0010 */

typedef enum _EVENT_INFORMATION_CLASS
{
  EventBasicInformation = 0,
} EVENT_INFORMATION_CLASS, *PEVENT_INFORMATION_CLASS;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1643, *PTAG_UNNAMED_1643;

typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
  StandardDesign = 0,
  NEC98x86 = 1,
  EndAlternatives = 2,
} ALTERNATIVE_ARCHITECTURE_TYPE, *PALTERNATIVE_ARCHITECTURE_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_1644, *PTAG_UNNAMED_1644;

typedef enum _PS_STD_HANDLE_STATE
{
  PsNeverDuplicate = 0,
  PsRequestDuplicate = 1,
  PsAlwaysDuplicate = 2,
  PsMaxStdHandleStates = 3,
} PS_STD_HANDLE_STATE, *PPS_STD_HANDLE_STATE;

typedef enum
{
  assembly_idIdx = 0,
  successIdx = 1,
  hresultIdx = 2,
  assembly_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1645, *PTAG_UNNAMED_1645;

enum CLUS_RESSUBCLASS_NETWORK
{
  CLUS_RESSUBCLASS_NETWORK_INTERNET_PROTOCOL = -2147483648,
};

class XeSqlPkg::object_created
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_485[140];
      /* 0x0240 */ unsigned char m_buf[43];
    }; /* size: 0x003b */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int related_object_idOffset;
    /* 0x0000 */ const int ddl_phaseOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1646, *PTAG_UNNAMED_1646;

enum DBTYPEENUM15
{
  DBTYPE_HCHAPTER = 136,
};

enum XeSqlPkg::log_io_complete::CustomizableSlots
{
  collect_pathSlot = 0,
};

struct XEObjectStorageDescriptor
{
  /* 0x0000 */ unsigned int m_size;
  /* 0x0004 */ enum XEObjectStorageFlags m_flags;
  /* 0x0008 */ void* m_pfnInit /* function */;
}; /* size: 0x0010 */

struct XEPredicateCompare
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ struct XERelativeObjectId m_type;
  /* 0x0024 */ long Padding_486;
  /* 0x0028 */ void* m_pfnCompare /* function */;
  /* 0x0030 */ void* m_pfnCompareStream /* function */;
  /* 0x0038 */ struct XEObjectStorageDescriptor m_storage;
  /* 0x0048 */ struct XEObjectStorageDescriptor m_sharedStorage;
  /* 0x0058 */ void* m_pfnValidate /* function */;
}; /* size: 0x0060 */

enum XeSqlPkg::transaction_log::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

struct XMLEventTransformRule
{
  /* 0x0000 */ class XE_AutoRg<unsigned short> m_eventName;
  /* 0x0008 */ struct XERelativeObjectId rid;
  /* 0x000c */ unsigned int m_actionCount;
  /* 0x0010 */ class XE_AutoRg<XMLActionTransformRule> m_actionRules;
  /* 0x0018 */ unsigned int m_columnCount;
  /* 0x001c */ long Padding_487;
  /* 0x0020 */ class XE_AutoRg<XMLColumnTransformRule> m_columnRules;
}; /* size: 0x0028 */

enum DBPARAMFLAGSENUM
{
  DBPARAMFLAGS_ISINPUT = 1,
  DBPARAMFLAGS_ISOUTPUT = 2,
  DBPARAMFLAGS_ISSIGNED = 16,
  DBPARAMFLAGS_ISNULLABLE = 64,
  DBPARAMFLAGS_ISLONG = 128,
};

typedef struct _TAPE_GET_MEDIA_PARAMETERS
{
  /* 0x0000 */ union _LARGE_INTEGER Capacity;
  /* 0x0008 */ union _LARGE_INTEGER Remaining;
  /* 0x0010 */ unsigned long BlockSize;
  /* 0x0014 */ unsigned long PartitionCount;
  /* 0x0018 */ unsigned char WriteProtected;
  /* 0x0019 */ char __PADDING__[7];
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS; /* size: 0x0020 */

typedef enum _TP_LOG_LEVEL
{
  TP_LOG_LEVEL_ERROR = 0,
  TP_LOG_LEVEL_WARNING = 1,
  TP_LOG_LEVEL_INFO = 2,
  TP_LOG_LEVEL_TRACE_ENTER = 3,
  TP_LOG_LEVEL_TRACE_LEAVE = 4,
} TP_LOG_LEVEL, *PTP_LOG_LEVEL;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1647, *PTAG_UNNAMED_1647;

class CAutoP<SOS_ResourcePool>
{
}; /* size: 0x0008 */

enum DBCOPYFLAGSENUM
{
  DBCOPY_ASYNC = 256,
  DBCOPY_REPLACE_EXISTING = 512,
  DBCOPY_ALLOW_EMULATION = 1024,
  DBCOPY_NON_RECURSIVE = 2048,
  DBCOPY_ATOMIC = 4096,
};

typedef struct _COVERAGE_MODULE_INFO
{
  /* 0x0000 */ unsigned long ModuleInfoSize;
  /* 0x0004 */ unsigned long IsBinaryLoaded;
  /* 0x0008 */ struct _UNICODE_STRING ModulePathName;
  /* 0x0018 */ unsigned long CoverageSectionSize;
  /* 0x001c */ unsigned char CoverageSection[1];
  /* 0x001d */ char __PADDING__[3];
} COVERAGE_MODULE_INFO, *PCOVERAGE_MODULE_INFO; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1648, *PTAG_UNNAMED_1648;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 33,
} TAG_UNNAMED_1649, *PTAG_UNNAMED_1649;

struct IWinInetFileStream
{
}; /* size: 0x0008 */

enum CLUSTER_TASK_TYPE
{
  CLUSTER_TASK_TYPE_NONE = 0,
  CLUSTER_TASK_TYPE_RESOURCE_DEPENDENT = 1,
  CLUSTER_TASK_TYPE_ANY_NODE = 2,
  CLUSTER_TASK_TYPE_CLUSTER_WIDE = 3,
  CLUSTER_TASK_TYPE_TS_V1 = 4,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1650, *PTAG_UNNAMED_1650;

struct IZoneIdentifier
{
}; /* size: 0x0008 */

enum CLUSTER_GROUP_STATE
{
  ClusterGroupStateUnknown = -1,
  ClusterGroupOnline = 0,
  ClusterGroupOffline = 1,
  ClusterGroupFailed = 2,
  ClusterGroupPartialOnline = 3,
  ClusterGroupPending = 4,
};

struct IWbemClientConnectionTransport
{
}; /* size: 0x0008 */

typedef enum
{
  workitem_descriptionIdx = 0,
  transaction_idIdx = 1,
  correlation_idsIdx = 2,
  logical_pathIdx = 3,
  physical_pathIdx = 4,
  original_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1651, *PTAG_UNNAMED_1651;

struct OneProcSimNodeContextListSLock
{
}; /* size: 0x0004 */

struct TGuardMask<0>
{
}; /* size: 0x0001 */

enum CLUSTER_RESOURCE_STATE
{
  ClusterResourceStateUnknown = -1,
  ClusterResourceInherited = 0,
  ClusterResourceInitializing = 1,
  ClusterResourceOnline = 2,
  ClusterResourceOffline = 3,
  ClusterResourceFailed = 4,
  ClusterResourcePending = 128,
  ClusterResourceOnlinePending = 129,
  ClusterResourceOfflinePending = 130,
};

struct tagEMRCREATEMONOBRUSH
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihBrush;
  /* 0x000c */ unsigned long iUsage;
  /* 0x0010 */ unsigned long offBmi;
  /* 0x0014 */ unsigned long cbBmi;
  /* 0x0018 */ unsigned long offBits;
  /* 0x001c */ unsigned long cbBits;
}; /* size: 0x0020 */

class CAutoBase<XECustomizableAttribute>
{
  /* 0x0000 */ struct XECustomizableAttribute* m_pt;
}; /* size: 0x0008 */

class LegacyNumaConfig
{
}; /* size: 0x0008 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1652, *PTAG_UNNAMED_1652;

typedef enum _MEMORY_RESERVE_TYPE
{
  MemoryReserveUserApc = 0,
  MemoryReserveIoCompletion = 1,
  MemoryReserveTypeMax = 2,
} MEMORY_RESERVE_TYPE, *PMEMORY_RESERVE_TYPE;

typedef union __m256i
{
  union
  {
    /* 0x0000 */ char m256i_i8[32];
    /* 0x0000 */ short m256i_i16[16];
    /* 0x0000 */ int m256i_i32[8];
    /* 0x0000 */ __int64 m256i_i64[4];
    /* 0x0000 */ unsigned char m256i_u8[32];
    /* 0x0000 */ unsigned short m256i_u16[16];
    /* 0x0000 */ unsigned int m256i_u32[8];
    /* 0x0000 */ unsigned __int64 m256i_u64[4];
  }; /* size: 0x0020 */
} _m256i, *P_m256i; /* size: 0x0020 */

class XeSqlPkg::oiblob_cleanup_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_488[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int owner_rowsetOffset;
    /* 0x0000 */ const int tracking_table_rowsetOffset;
    /* 0x0000 */ const int secondary_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

typedef enum
{
  database_idIdx = 0,
  statement_typeIdx = 1,
  database_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1653, *PTAG_UNNAMED_1653;

typedef enum _FUNCTION_TABLE_TYPE
{
  RF_SORTED = 0,
  RF_UNSORTED = 1,
  RF_CALLBACK = 2,
  RF_KERNEL_DYNAMIC = 3,
} FUNCTION_TABLE_TYPE, *PFUNCTION_TABLE_TYPE;

typedef enum
{
  dump_pointIdx = 0,
  remote_exchange_node_idIdx = 1,
  remote_exchange_thread_idIdx = 2,
  connect_brick_idIdx = 3,
  query_idIdx = 4,
  context_sessionidIdx = 5,
  context_sessiontokenIdx = 6,
  context_brickgenerationidIdx = 7,
  context_issysadminIdx = 8,
  context_isdacIdx = 9,
  context_dbcompatlevelIdx = 10,
  context_schidprocpcpIdx = 11,
  context_objidprocpcpIdx = 12,
  context_dbidprocpcpIdx = 13,
  context_dbsoIdx = 14,
  context_dbso_useropt1Idx = 15,
  context_dbso_useropt2Idx = 16,
  context_dbso_useropt1setmaskIdx = 17,
  context_dbso_idtinsert_objidIdx = 18,
  context_dbso_idtinsert_stateIdx = 19,
  context_dbso_idtinsert_dbidIdx = 20,
  context_dbso_rowcntIdx = 21,
  context_dbso_statlistIdx = 22,
  context_dbso_textsizeIdx = 23,
  context_dbso_offsetsIdx = 24,
  context_dbso_locktimeoutIdx = 25,
  context_dbso_querygovIdx = 26,
  context_dbso_dtfmtIdx = 27,
  context_dbso_daydatefirstIdx = 28,
  context_dbso_ddlckpriIdx = 29,
  context_dbso_isolvlIdx = 30,
  context_dbso_fipsflagIdx = 31,
  context_dbso_langidIdx = 32,
  LastField = 33,
} TAG_UNNAMED_1654, *PTAG_UNNAMED_1654;

struct tagGLYPHSET
{
  /* 0x0000 */ unsigned long cbThis;
  /* 0x0004 */ unsigned long flAccel;
  /* 0x0008 */ unsigned long cGlyphsSupported;
  /* 0x000c */ unsigned long cRanges;
  /* 0x0010 */ struct tagWCRANGE ranges[1];
}; /* size: 0x0014 */

typedef enum
{
  HASAUTH_DATABASE = 0,
  HASAUTH_TABLE = 1,
  HASAUTH_TABLE_COL = 2,
  HASAUTH_ROWSET = 3,
  HASAUTH_ROWSET_COL = 4,
  ISIMPERSONATED = 5,
} TAG_UNNAMED_1655, *PTAG_UNNAMED_1655;

typedef struct _CONTEXT
{
  /* 0x0000 */ unsigned __int64 P1Home;
  /* 0x0008 */ unsigned __int64 P2Home;
  /* 0x0010 */ unsigned __int64 P3Home;
  /* 0x0018 */ unsigned __int64 P4Home;
  /* 0x0020 */ unsigned __int64 P5Home;
  /* 0x0028 */ unsigned __int64 P6Home;
  /* 0x0030 */ unsigned long ContextFlags;
  /* 0x0034 */ unsigned long MxCsr;
  /* 0x0038 */ unsigned short SegCs;
  /* 0x003a */ unsigned short SegDs;
  /* 0x003c */ unsigned short SegEs;
  /* 0x003e */ unsigned short SegFs;
  /* 0x0040 */ unsigned short SegGs;
  /* 0x0042 */ unsigned short SegSs;
  /* 0x0044 */ unsigned long EFlags;
  /* 0x0048 */ unsigned __int64 Dr0;
  /* 0x0050 */ unsigned __int64 Dr1;
  /* 0x0058 */ unsigned __int64 Dr2;
  /* 0x0060 */ unsigned __int64 Dr3;
  /* 0x0068 */ unsigned __int64 Dr6;
  /* 0x0070 */ unsigned __int64 Dr7;
  /* 0x0078 */ unsigned __int64 Rax;
  /* 0x0080 */ unsigned __int64 Rcx;
  /* 0x0088 */ unsigned __int64 Rdx;
  /* 0x0090 */ unsigned __int64 Rbx;
  /* 0x0098 */ unsigned __int64 Rsp;
  /* 0x00a0 */ unsigned __int64 Rbp;
  /* 0x00a8 */ unsigned __int64 Rsi;
  /* 0x00b0 */ unsigned __int64 Rdi;
  /* 0x00b8 */ unsigned __int64 R8;
  /* 0x00c0 */ unsigned __int64 R9;
  /* 0x00c8 */ unsigned __int64 R10;
  /* 0x00d0 */ unsigned __int64 R11;
  /* 0x00d8 */ unsigned __int64 R12;
  /* 0x00e0 */ unsigned __int64 R13;
  /* 0x00e8 */ unsigned __int64 R14;
  /* 0x00f0 */ unsigned __int64 R15;
  /* 0x00f8 */ unsigned __int64 Rip;
  union
  {
    /* 0x0100 */ struct _XSAVE_FORMAT FltSave;
    struct
    {
      /* 0x0100 */ struct _M128A Header[2];
      /* 0x0120 */ struct _M128A Legacy[8];
      /* 0x01a0 */ struct _M128A Xmm0;
      /* 0x01b0 */ struct _M128A Xmm1;
      /* 0x01c0 */ struct _M128A Xmm2;
      /* 0x01d0 */ struct _M128A Xmm3;
      /* 0x01e0 */ struct _M128A Xmm4;
      /* 0x01f0 */ struct _M128A Xmm5;
      /* 0x0200 */ struct _M128A Xmm6;
      /* 0x0210 */ struct _M128A Xmm7;
      /* 0x0220 */ struct _M128A Xmm8;
      /* 0x0230 */ struct _M128A Xmm9;
      /* 0x0240 */ struct _M128A Xmm10;
      /* 0x0250 */ struct _M128A Xmm11;
      /* 0x0260 */ struct _M128A Xmm12;
      /* 0x0270 */ struct _M128A Xmm13;
      /* 0x0280 */ struct _M128A Xmm14;
      /* 0x0290 */ struct _M128A Xmm15;
    }; /* size: 0x01a0 */
  }; /* size: 0x0200 */
  /* 0x0300 */ struct _M128A VectorRegister[26];
  /* 0x04a0 */ unsigned __int64 VectorControl;
  /* 0x04a8 */ unsigned __int64 DebugControl;
  /* 0x04b0 */ unsigned __int64 LastBranchToRip;
  /* 0x04b8 */ unsigned __int64 LastBranchFromRip;
  /* 0x04c0 */ unsigned __int64 LastExceptionToRip;
  /* 0x04c8 */ unsigned __int64 LastExceptionFromRip;
} CONTEXT, *PCONTEXT; /* size: 0x04d0 */

class IsArray<int>
{
}; /* size: 0x0001 */

typedef enum _EVENT_TYPE
{
  NotificationEvent = 0,
  SynchronizationEvent = 1,
} EVENT_TYPE, *PEVENT_TYPE;

class XeSqlPkg::drop_file_committed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_489[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  batch_textIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1656, *PTAG_UNNAMED_1656;

typedef enum
{
  test_pointIdx = 0,
  group_idIdx = 1,
  replica_idIdx = 2,
  ag_database_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1657, *PTAG_UNNAMED_1657;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 25,
} TAG_UNNAMED_1658, *PTAG_UNNAMED_1658;

typedef enum _CLUSTER_SETUP_PHASE_SEVERITY
{
  ClusterSetupPhaseInformational = 1,
  ClusterSetupPhaseWarning = 2,
  ClusterSetupPhaseFatal = 3,
} CLUSTER_SETUP_PHASE_SEVERITY, *PCLUSTER_SETUP_PHASE_SEVERITY;

typedef enum
{
  percent_disk_read_timeIdx = 0,
  percent_disk_timeIdx = 1,
  percent_disk_write_timeIdx = 2,
  percent_free_spaceIdx = 3,
  percent_idle_timeIdx = 4,
  average_disk_bytes_per_readIdx = 5,
  average_disk_bytes_per_transferIdx = 6,
  average_disk_bytes_per_writeIdx = 7,
  average_disk_queue_lengthIdx = 8,
  average_disk_read_queue_lengthIdx = 9,
  average_disk_seconds_per_readIdx = 10,
  average_disk_seconds_per_transferIdx = 11,
  average_disk_seconds_per_writeIdx = 12,
  average_disk_write_queue_lengthIdx = 13,
  current_disk_queue_lengthIdx = 14,
  disk_bytes_per_secondIdx = 15,
  disk_read_bytes_per_secondIdx = 16,
  disk_reads_per_secondIdx = 17,
  disk_transfers_per_secondIdx = 18,
  disk_write_bytes_per_secondIdx = 19,
  disk_writes_per_secondIdx = 20,
  free_megabytesIdx = 21,
  split_io_per_secondIdx = 22,
  instance_nameIdx = 23,
  LastField = 24,
} TAG_UNNAMED_1659, *PTAG_UNNAMED_1659;

class Spinlock<236,1,1>
{
}; /* size: 0x0004 */

typedef enum _ERROR_SEVERITY_VALUE
{
  ErrorRecoverable = 0,
  ErrorFatal = 1,
  ErrorCorrected = 2,
  ErrorOthers = 3,
} ERROR_SEVERITY_VALUE, *PERROR_SEVERITY_VALUE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1660, *PTAG_UNNAMED_1660;

struct tagI_RpcProxyCallbackInterface
{
  /* 0x0000 */ void* IsValidMachineFn /* function */;
  /* 0x0008 */ void* GetClientAddressFn /* function */;
  /* 0x0010 */ void* GetConnectionTimeoutFn /* function */;
  /* 0x0018 */ void* PerformCalloutFn /* function */;
  /* 0x0020 */ void* FreeCalloutStateFn /* function */;
  /* 0x0028 */ void* GetClientSessionAndResourceUUIDFn /* function */;
}; /* size: 0x0030 */

enum CLUSTER_GROUP_PRIORITY
{
  PriorityDisabled = 0,
  PriorityLow = 1,
  PriorityMedium = 2000,
  PriorityHigh = 3000,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1661, *PTAG_UNNAMED_1661;

enum CLUSTER_NETINTERFACE_STATE
{
  ClusterNetInterfaceStateUnknown = -1,
  ClusterNetInterfaceUnavailable = 0,
  ClusterNetInterfaceFailed = 1,
  ClusterNetInterfaceUnreachable = 2,
  ClusterNetInterfaceUp = 3,
};

class XeSqlPkg::xtp_offline_checkpoint_bfc_update
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_490[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int error_code_pointerOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_1662, *PTAG_UNNAMED_1662;

struct CLUS_CSV_MAINTENANCE_MODE_INFO
{
  /* 0x0000 */ int InMaintenance;
  /* 0x0004 */ wchar_t VolumeName[260];
}; /* size: 0x020c */

enum DBDEFERRABILITYENUM
{
  DBDEFERRABILITY_DEFERRED = 1,
  DBDEFERRABILITY_DEFERRABLE = 2,
};

typedef enum _MAINTENANCE_MODE_TYPE_ENUM
{
  MaintenanceModeTypeDisableIsAliveCheck = 1,
  MaintenanceModeTypeOfflineResource = 2,
  MaintenanceModeTypeUnclusterResource = 3,
} MAINTENANCE_MODE_TYPE_ENUM, *PMAINTENANCE_MODE_TYPE_ENUM;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 5,
  VldEddOffset = 4,
  BufSize = 57,
} TAG_UNNAMED_1663, *PTAG_UNNAMED_1663;

typedef struct _IMAGE_DEBUG_MISC
{
  /* 0x0000 */ unsigned long DataType;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned char Unicode;
  /* 0x0009 */ unsigned char Reserved[3];
  /* 0x000c */ unsigned char Data[1];
  /* 0x000d */ char __PADDING__[3];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC; /* size: 0x0010 */

typedef struct _SYSTEM_BIGPOOL_INFORMATION
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_491;
  /* 0x0008 */ struct _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[1];
} SYSTEM_BIGPOOL_INFORMATION, *PSYSTEM_BIGPOOL_INFORMATION; /* size: 0x0020 */

typedef enum
{
  destination_idIdx = 0,
  stageIdx = 1,
  num_messagesIdx = 2,
  target_addressIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1664, *PTAG_UNNAMED_1664;

enum DBPARAMFLAGSENUM20
{
  DBPARAMFLAGS_SCALEISNEGATIVE = 256,
};

struct IInternetProtocolInfo
{
}; /* size: 0x0008 */

typedef enum _LINK_TRACKING_INFORMATION_TYPE
{
  NtfsLinkTrackingInformation = 0,
  DfsLinkTrackingInformation = 1,
} LINK_TRACKING_INFORMATION_TYPE, *PLINK_TRACKING_INFORMATION_TYPE;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_1665, *PTAG_UNNAMED_1665;

struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition
{
  /* 0x0000 */ unsigned short m_nodeId;
  /* 0x0002 */ char Padding_492[6];
  /* 0x0008 */ struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc* m_activePage;
}; /* size: 0x0010 */

typedef enum _TIMER_TYPE
{
  NotificationTimer = 0,
  SynchronizationTimer = 1,
} TIMER_TYPE, *PTIMER_TYPE;

typedef struct _USER_OTHER_INFO
{
  /* 0x0000 */ unsigned long alrtus_errcode;
  /* 0x0004 */ unsigned long alrtus_numstrings;
} USER_OTHER_INFO, *PUSER_OTHER_INFO; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_1666, *PTAG_UNNAMED_1666;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_1667, *PTAG_UNNAMED_1667;

enum DBCONVERTFLAGSENUM20
{
  DBCONVERTFLAGS_ISLONG = 2,
  DBCONVERTFLAGS_ISFIXEDLENGTH = 4,
  DBCONVERTFLAGS_FROMVARIANT = 8,
};

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  eventIdx = 4,
  stateIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1668, *PTAG_UNNAMED_1668;

enum CLUSTER_NODE_STATE
{
  ClusterNodeStateUnknown = -1,
  ClusterNodeUp = 0,
  ClusterNodeDown = 1,
  ClusterNodePaused = 2,
  ClusterNodeJoining = 3,
};

struct ITypeChangeEvents
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 34,
} TAG_UNNAMED_1669, *PTAG_UNNAMED_1669;

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1670, *PTAG_UNNAMED_1670;

enum CLUSTER_GROUP_AUTOFAILBACK_TYPE
{
  ClusterGroupPreventFailback = 0,
  ClusterGroupAllowFailback = 1,
  ClusterGroupFailbackTypeCount = 2,
};

typedef enum _MSA_INFO_LEVEL
{
  MsaInfoLevel0 = 0,
  MsaInfoLevelMax = 1,
} MSA_INFO_LEVEL, *PMSA_INFO_LEVEL;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  brick_idIdx = 2,
  local_brick_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1671, *PTAG_UNNAMED_1671;

typedef enum _SE_SIGNING_LEVEL
{
  SE_SIGNING_LEVEL_UNCHECKED = 0,
  SE_SIGNING_LEVEL_PROTECTED_PROCESS = 1,
  SE_SIGNING_LEVEL_UNSIGNED = 2,
  SE_SIGNING_LEVEL_AUTHENTICODE = 4,
  SE_SIGNING_LEVEL_DRM_PROTECTED = 5,
  SE_SIGNING_LEVEL_WINDOWS = 6,
  SE_SIGNING_LEVEL_WINDOWS_PROTECTED = 7,
} SE_SIGNING_LEVEL, *PSE_SIGNING_LEVEL;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1672, *PTAG_UNNAMED_1672;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_1673, *PTAG_UNNAMED_1673;

class XE_AutoP<unsigned short>
{
}; /* size: 0x0008 */

typedef enum _PROCESS_TLS_INFORMATION_TYPE
{
  ProcessTlsReplaceIndex = 0,
  ProcessTlsReplaceVector = 1,
  MaxProcessTlsOperation = 2,
} PROCESS_TLS_INFORMATION_TYPE, *PPROCESS_TLS_INFORMATION_TYPE;

typedef enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS
{
  SystemCrashDumpDisable = 0,
  SystemCrashDumpReconfigure = 1,
  SystemCrashDumpInitializationComplete = 2,
} SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS, *PSYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;

struct IAdviseSink
{
}; /* size: 0x0008 */

typedef struct _RTL_HEAP_WALK_ENTRY
{
  /* 0x0000 */ void* DataAddress;
  /* 0x0008 */ unsigned __int64 DataSize;
  /* 0x0010 */ unsigned char OverheadBytes;
  /* 0x0011 */ unsigned char SegmentIndex;
  /* 0x0012 */ unsigned short Flags;
  /* 0x0014 */ long Padding_493;
  union
  {
    struct
    {
      /* 0x0018 */ unsigned __int64 Settable;
      /* 0x0020 */ unsigned short TagIndex;
      /* 0x0022 */ unsigned short AllocatorBackTraceIndex;
      /* 0x0024 */ unsigned long Reserved[2];
      /* 0x002c */ long __PADDING__[1];
    } /* size: 0x0018 */ Block;
    struct
    {
      /* 0x0018 */ unsigned long CommittedSize;
      /* 0x001c */ unsigned long UnCommittedSize;
      /* 0x0020 */ void* FirstEntry;
      /* 0x0028 */ void* LastEntry;
    } /* size: 0x0018 */ Segment;
  }; /* size: 0x0018 */
} RTL_HEAP_WALK_ENTRY, *PRTL_HEAP_WALK_ENTRY; /* size: 0x0030 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1674, *PTAG_UNNAMED_1674;

enum DBCOLUMNFLAGS15ENUM
{
  DBCOLUMNFLAGS_ISCHAPTER = 8192,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1675, *PTAG_UNNAMED_1675;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 40,
} TAG_UNNAMED_1676, *PTAG_UNNAMED_1676;

struct PPM_WMI_IDLE_STATE
{
  /* 0x0000 */ unsigned long Latency;
  /* 0x0004 */ unsigned long Power;
  /* 0x0008 */ unsigned long TimeCheck;
  /* 0x000c */ unsigned char PromotePercent;
  /* 0x000d */ unsigned char DemotePercent;
  /* 0x000e */ unsigned char StateType;
  /* 0x000f */ unsigned char Reserved;
  /* 0x0010 */ unsigned long StateFlags;
  /* 0x0014 */ unsigned long Context;
  /* 0x0018 */ unsigned long IdleHandler;
  /* 0x001c */ unsigned long Reserved1;
}; /* size: 0x0020 */

typedef enum _EXCEPTION_LOG_TYPE
{
  LogExceptionEmpty = 0,
  LogExceptionDispatch = 1,
  LogExceptionHandler = 2,
} EXCEPTION_LOG_TYPE, *PEXCEPTION_LOG_TYPE;

typedef struct _IMAGE_SYMBOL_EX
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned char ShortName[8];
      struct
      {
        /* 0x0000 */ unsigned long Short;
        /* 0x0004 */ unsigned long Long;
      } /* size: 0x0008 */ Name;
      /* 0x0000 */ unsigned long LongName[2];
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ N;
  /* 0x0008 */ unsigned long Value;
  /* 0x000c */ long SectionNumber;
  /* 0x0010 */ unsigned short Type;
  /* 0x0012 */ unsigned char StorageClass;
  /* 0x0013 */ unsigned char NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX, *PIMAGE_SYMBOL_EX; /* size: 0x0014 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1677, *PTAG_UNNAMED_1677;

struct IOleInPlaceObjectWindowless
{
}; /* size: 0x0008 */

class CAutoP<XEPackage0::XE_LiveTarget>
{
}; /* size: 0x0008 */

typedef enum
{
  INVALID_DBID = 0,
  USEPREV = -1,
  CLOSEPREV = -2,
} TAG_UNNAMED_1678, *PTAG_UNNAMED_1678;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1679, *PTAG_UNNAMED_1679;

struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::AutoReset
{
  /* 0x0000 */ int* m_flag;
}; /* size: 0x0008 */

typedef enum _FILESHARE_CHANGE_ENUM
{
  FILESHARE_CHANGE_NONE = 0,
  FILESHARE_CHANGE_ADD = 1,
  FILESHARE_CHANGE_DEL = 2,
  FILESHARE_CHANGE_MODIFY = 3,
} FILESHARE_CHANGE_ENUM, *PFILESHARE_CHANGE_ENUM;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 36,
} TAG_UNNAMED_1680, *PTAG_UNNAMED_1680;

struct IHttpNegotiate
{
}; /* size: 0x0008 */

enum DBDELETEFLAGSENUM
{
  DBDELETE_ASYNC = 256,
  DBDELETE_ATOMIC = 4096,
};

struct tagBITMAPCOREHEADER
{
  /* 0x0000 */ unsigned long bcSize;
  /* 0x0004 */ unsigned short bcWidth;
  /* 0x0006 */ unsigned short bcHeight;
  /* 0x0008 */ unsigned short bcPlanes;
  /* 0x000a */ unsigned short bcBitCount;
}; /* size: 0x000c */

struct tagRGBTRIPLE
{
  /* 0x0000 */ unsigned char rgbtBlue;
  /* 0x0001 */ unsigned char rgbtGreen;
  /* 0x0002 */ unsigned char rgbtRed;
}; /* size: 0x0003 */

struct tagBITMAPCOREINFO
{
  /* 0x0000 */ struct tagBITMAPCOREHEADER bmciHeader;
  /* 0x000c */ struct tagRGBTRIPLE bmciColors[1];
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

enum DBRANGEENUM20
{
  DBRANGE_MATCH_N_SHIFT = 24,
  DBRANGE_MATCH_N_MASK = 255,
};

typedef enum
{
  session_idIdx = 0,
  phase_numberIdx = 1,
  error_numberIdx = 2,
  error_severityIdx = 3,
  error_stateIdx = 4,
  entry_timeIdx = 5,
  error_messageIdx = 6,
  start_lsnIdx = 7,
  begin_lsnIdx = 8,
  sequence_valueIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1681, *PTAG_UNNAMED_1681;

typedef enum _FP__IEEE_ROUNDING_MODE
{
  FpRoundNearest = 0,
  FpRoundMinusInfinity = 1,
  FpRoundPlusInfinity = 2,
  FpRoundChopped = 3,
} FP__IEEE_ROUNDING_MODE, *PFP__IEEE_ROUNDING_MODE;

struct StaticStorage<14>
{
  /* 0x0000 */ unsigned int m_buf[1];
}; /* size: 0x0004 */

struct XBitmap<StaticStorage<14> >
{
  /* 0x0000 */ struct StaticStorage<14> m_storage;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 2,
} TAG_UNNAMED_1682, *PTAG_UNNAMED_1682;

enum XeSqlPkg::file_read_throttled::CustomizableSlots
{
  collect_pathSlot = 0,
};

enum XeCMPkg::cma_map_enlistment_state
{
  STATE_CMA_ENLIST_INIT = 0,
  STATE_CMA_ENLIST_SEND = 1,
  STATE_CMA_ENLIST_PROCESS_REPLY = 2,
  STATE_CMA_ENLIST_SUCCESS = 3,
  STATE_CMA_ENLIST_FAILURE = 4,
  STATE_CMA_ENLIST_FINAL = 5,
};

typedef enum
{
  requested_memoryIdx = 0,
  available_memoryIdx = 1,
  needed_memoryIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1683, *PTAG_UNNAMED_1683;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_1684, *PTAG_UNNAMED_1684;

class XStringXmlBuilder
{
}; /* size: 0x0020 */

enum XeCMPkg::cm_map_enlistment_state
{
  STATE_CM_ENLIST_INIT = 0,
  STATE_CM_ENLIST_SEND = 1,
  STATE_CM_ENLIST_FAIL = 2,
  STATE_CM_ENLIST_CLOSE = 3,
};

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1685, *PTAG_UNNAMED_1685;

typedef enum _SEMAPHORE_INFORMATION_CLASS
{
  SemaphoreBasicInformation = 0,
} SEMAPHORE_INFORMATION_CLASS, *PSEMAPHORE_INFORMATION_CLASS;

typedef enum _POWER_STATE_TYPE
{
  SystemPowerState = 0,
  DevicePowerState = 1,
} POWER_STATE_TYPE, *PPOWER_STATE_TYPE;

class XeSqlPkg::database_uncontained_usage
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_494[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int major_idOffset;
    /* 0x0000 */ const int statement_line_numberOffset;
    /* 0x0000 */ const int statement_offset_beginOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int statement_typeOffset;
    /* 0x0000 */ const int statement_infoOffset;
    /* 0x0000 */ const int feature_nameOffset;
    /* 0x0000 */ const int feature_type_nameOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0278 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1686, *PTAG_UNNAMED_1686;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1687, *PTAG_UNNAMED_1687;

enum DBUPDELRULEENUM
{
  DBUPDELRULE_NOACTION = 0,
  DBUPDELRULE_CASCADE = 1,
  DBUPDELRULE_SETNULL = 2,
  DBUPDELRULE_SETDEFAULT = 3,
};

enum XeSqlPkg::rollback_tran_starting::CustomizableSlots
{
  collect_statementSlot = 0,
};

enum DBPROPENUM26
{
  DBPROP_OUTPUTSTREAM = 286,
  DBPROP_OUTPUTENCODING = 287,
  DBPROP_TABLESTATISTICS = 288,
  DBPROP_SKIPROWCOUNTRESULTS = 291,
  DBPROP_IRowsetBookmark = 292,
  MDPROP_VISUALMODE = 293,
};

typedef struct _SERVER_ALIAS_INFO_0
{
  /* 0x0000 */ wchar_t* srvai0_alias;
  /* 0x0008 */ wchar_t* srvai0_target;
  /* 0x0010 */ unsigned char srvai0_default;
  /* 0x0011 */ char Padding_495[3];
  /* 0x0014 */ unsigned long srvai0_reserved;
} SERVER_ALIAS_INFO_0, *PSERVER_ALIAS_INFO_0; /* size: 0x0018 */

enum XACTRM
{
  XACTRM_OPTIMISTICLASTWINS = 1,
  XACTRM_NOREADONLYPREPARES = 2,
};

typedef struct _AUDIT_ENTRY
{
  /* 0x0000 */ unsigned long ae_len;
  /* 0x0004 */ unsigned long ae_reserved;
  /* 0x0008 */ unsigned long ae_time;
  /* 0x000c */ unsigned long ae_type;
  /* 0x0010 */ unsigned long ae_data_offset;
  /* 0x0014 */ unsigned long ae_data_size;
} AUDIT_ENTRY, *PAUDIT_ENTRY; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_1688, *PTAG_UNNAMED_1688;

typedef enum _WATCHDOG_INFORMATION_CLASS
{
  WdInfoTimeoutValue = 0,
  WdInfoResetTimer = 1,
  WdInfoStopTimer = 2,
  WdInfoStartTimer = 3,
  WdInfoTriggerAction = 4,
  WdInfoState = 5,
} WATCHDOG_INFORMATION_CLASS, *PWATCHDOG_INFORMATION_CLASS;

typedef struct _TRACE_PROFILE_INTERVAL
{
  /* 0x0000 */ unsigned long Source;
  /* 0x0004 */ unsigned long Interval;
} TRACE_PROFILE_INTERVAL, *PTRACE_PROFILE_INTERVAL; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1689, *PTAG_UNNAMED_1689;

enum CLUSTER_QUORUM_VALUE
{
  CLUSTER_QUORUM_MAINTAINED = 0,
  CLUSTER_QUORUM_LOST = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1690, *PTAG_UNNAMED_1690;

enum DBPROPFLAGSENUM26
{
  DBPROPFLAGS_STREAM = 0xffff8000,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1691, *PTAG_UNNAMED_1691;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  app_domain_addressIdx = 2,
  database_idIdx = 3,
  owner_idIdx = 4,
  generationIdx = 5,
  referencesIdx = 6,
  weak_referencesIdx = 7,
  task_addressIdx = 8,
  actionIdx = 9,
  typeIdx = 10,
  stateIdx = 11,
  call_stackIdx = 12,
  LastField = 13,
} TAG_UNNAMED_1692, *PTAG_UNNAMED_1692;

enum GLSIndex
{
  GLS_PERCTR_INSTANCE = 0,
  GLS_LAST = 1,
};

struct tagMSGBOXPARAMSW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ long Padding_496;
  /* 0x0008 */ struct HWND__* hwndOwner;
  /* 0x0010 */ struct HINSTANCE__* hInstance;
  /* 0x0018 */ const wchar_t* lpszText;
  /* 0x0020 */ const wchar_t* lpszCaption;
  /* 0x0028 */ unsigned long dwStyle;
  /* 0x002c */ long Padding_497;
  /* 0x0030 */ const wchar_t* lpszIcon;
  /* 0x0038 */ unsigned __int64 dwContextHelpId;
  /* 0x0040 */ void* lpfnMsgBoxCallback /* function */;
  /* 0x0048 */ unsigned long dwLanguageId;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1693, *PTAG_UNNAMED_1693;

enum DBBINDFLAGENUM
{
  DBBINDFLAG_HTML = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_1694, *PTAG_UNNAMED_1694;

class CAutoP<EventTransformer *>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 10,
  VldEddOffset = 0,
  BufSize = 84,
} TAG_UNNAMED_1695, *PTAG_UNNAMED_1695;

enum XeSqlPkg::EStatsUpdateStatus
{
  SAS_OTHER = 1,
  SAS_QUEUED = 2,
  SAS_START = 3,
  SAS_ENDED = 4,
  SAS_FAILED_TABLE_SCH_LOCK = 5,
  SAS_FAILED_STATS_SCH_LOCK = 6,
  SAS_FAILED_SAVE = 7,
  SAS_LOAD_AND_UPDATE = 8,
  SAS_LOAD_WITHOUT_UPDATE = 9,
  SAS_CHECK_MODCTR = 10,
};

class XE_AutoP<XEPackage0::HistoryTarget>
{
}; /* size: 0x0008 */

enum XeSqlPkg::HadrDDLFailoverExecState
{
  HADR_DDL_FAILOVER_EXEC_BEGIN = 0,
  HADR_DDL_FAILOVER_EXEC_SUCCESS = 1,
  HADR_DDL_FAILOVER_EXEC_END = 2,
};

class XeSqlPkg::mbr_lmd_read_backup_config_type
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_498[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int field_offsetOffset;
    /* 0x0000 */ const int field_sizeOffset;
    /* 0x0000 */ const int field_valueOffset;
    /* 0x0000 */ const int field_nameOffset;
    /* 0x0000 */ const int archive_file_nameOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

typedef enum
{
  required_remote_memory_pagesIdx = 0,
  additional_remote_memory_pagesIdx = 1,
  total_remote_memory_target_pagesIdx = 2,
  total_remote_memory_granted_pagesIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1696, *PTAG_UNNAMED_1696;

class WaitInfoDescription
{
  /* 0x0000 */ wchar_t* m_waitName;
  /* 0x0008 */ enum SOS_WaitInfo::Reason m_waitReason;
  /* 0x000c */ enum SOS_WaitInfo::Reporting m_isReported;
  /* 0x0010 */ unsigned int m_assignedID;
}; /* size: 0x0018 */

enum XeSqlPkg::ChangeTrackingEventId
{
  CleanupStatusChange = 1,
  UpdateRetention = 2,
  UpdateInvalidCleanup = 3,
  UpdateHardenedCleanup = 4,
  RowsCleanedUp = 5,
  BeginTableCleanup = 6,
  EndTableCleanup = 7,
  AddChangeTrackDbToQueue = 8,
  ProcessNewDatabase = 9,
  StartChangeTrackingCleanup = 10,
  StopChangeTrackingCleanup = 11,
};

typedef struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION
{
  /* 0x0000 */ unsigned char HypervisorConnected;
  /* 0x0001 */ unsigned char Spare0[7];
  /* 0x0008 */ unsigned __int64 EnabledAddressSpaceEnlightenments;
} SYSTEM_HYPERVISOR_QUERY_INFORMATION, *PSYSTEM_HYPERVISOR_QUERY_INFORMATION; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1697, *PTAG_UNNAMED_1697;

typedef enum
{
  hresultIdx = 0,
  messageIdx = 1,
  linked_server_nameIdx = 2,
  provider_nameIdx = 3,
  method_nameIdx = 4,
  parametersIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1698, *PTAG_UNNAMED_1698;

typedef class _bstr_t::Data_t
{
  /* 0x0000 */ wchar_t* m_wstr;
  /* 0x0008 */ char* m_str;
  /* 0x0010 */ unsigned long m_RefCount;
} bstr_t::Data_t, *Pbstr_t::Data_t; /* size: 0x0018 */

class MemObjCache<CMemThread<CMemDbg<CMemProc> > >
{
  /* 0x0000 */ long Padding_499[318];
  /* 0x04f8 */ void* m_cacheEntryDescriptor;
  /* 0x0500 */ class CostInfo m_costInfo;
}; /* size: 0x0548 */

enum XeSqlPkg::ETrcFulltextRecompileReason
{
  eTrcFulltextRecompileReasonStoplist = 1,
  eTrcFulltextRecompileReasonThesaurus = 2,
  eTrcFulltextRecompileReasonCatalog = 3,
  eTrcFulltextRecompileReasonLanguageComponent = 4,
  eTrcFulltextRecompileReasonTempPlan = 5,
  eTrcFulltextRecompileReasonPropertylist = 6,
  eTrcFulltextRecompileReasonBufferIncrease = 7,
  eTrcFulltextRecompileReasonBufferDecrease = 8,
  eTrcFulltextRecompileReasonNoiseWordSettingsChanged = 9,
};

enum XeSqlPkg::EQueryVmContextName
{
  eCtxtDbAndSetOpts = 0,
  eCtxtSessionId = 1,
  eCtxtIsSysAdmin = 2,
  eCtxtIsDac = 3,
  eCtxtDbCompatLevel = 4,
  eCtxtSchidProcPcp = 5,
  eCtxtObjidProcPcp = 6,
  eCtxtDbidProcPcp = 7,
  eCtxtRetStat = 8,
  eCtxtLastError = 9,
};

struct IBindProtocol
{
}; /* size: 0x0008 */

typedef enum
{
  brick_idIdx = 0,
  stateIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1699, *PTAG_UNNAMED_1699;

enum XeSqlPkg::ETrcRecompileCause
{
  etrcSchemaChanged = 1,
  etrcStatsChanged = 2,
  etrcRecompileDNR = 3,
  etrcSetOptChanged = 4,
  etrcTempTableChanged = 5,
  etrcRmtRowsetChanged = 6,
  etrcForBrowsePermsChanged = 7,
  etrcQNSubscrChanged = 8,
  etrcMPIViewChanged = 9,
  etrcCursorOptionsChanged = 10,
  etrcWithRecompileOption = 11,
  etrcParamPlanFlushed = 12,
  etrcTestPlanLinearization = 13,
  etrcPlanAffDBVersionChange = 14,
  etrcForcePlanQDS = 15,
  etrcQDSForcingFailed = 16,
};

typedef struct _PS_CPU_QUOTA_QUERY_ENTRY
{
  /* 0x0000 */ unsigned long SessionId;
  /* 0x0004 */ unsigned long Weight;
} PS_CPU_QUOTA_QUERY_ENTRY, *PPS_CPU_QUOTA_QUERY_ENTRY; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1700, *PTAG_UNNAMED_1700;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_1701, *PTAG_UNNAMED_1701;

enum XeSqlPkg::BrokerConvAction
{
  BCA_SEND_MESSAGE = 1,
  BCA_END_CONVERSATION = 2,
  BCA_END_CONVERSATION_ERROR = 3,
  BCA_BROKER_INIT_ERROR = 4,
  BCA_TERMINATE_DIALOG = 5,
  BCA_RCV_SEQ_MESSAGE = 6,
  BCA_RCV_END_CONVERSATION = 7,
  BCA_RCV_END_CONVERSATION_ERROR = 8,
  BCA_RCV_BROKER_ERROR = 9,
  BCA_RCV_END_CONV_ACK = 10,
  BCA_BEGIN_DIALOG = 11,
  BCA_DIALOG_CREATED = 12,
  BCA_END_CONV_CLEANUP = 13,
};

typedef struct _ENLISTMENT_BASIC_INFORMATION
{
  /* 0x0000 */ struct _GUID EnlistmentId;
  /* 0x0010 */ struct _GUID TransactionId;
  /* 0x0020 */ struct _GUID ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION; /* size: 0x0030 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1702, *PTAG_UNNAMED_1702;

enum XeSqlPkg::TransactionActivity
{
  GET_DTC_ADDRESS_SUB_CLASS = 0,
  PROPAGATE_XACT_SUB_CLASS = 1,
  DOWORK_SUB_CLASS = 2,
  CLOSE_CONN_SUB_CLASS = 3,
  DTC_VIRGIN_SUB_CLASS = 4,
  DTC_IDLE_SUB_CLASS = 5,
  DTC_BEG_DIST_SUB_CLASS = 6,
  DTC_ENLISTING_SUB_CLASS = 7,
  DTC_INT_ACTIVE_SUB_CLASS = 8,
  DTC_INT_COMMIT_SUB_CLASS = 9,
  DTC_INT_ABORT_SUB_CLASS = 10,
  DTC_INT_ASYNC_ABORT_SUB_CLASS = 11,
  DTC_ACTIVE_SUB_CLASS = 12,
  DTC_INIT_PREPARE_SUB_CLASS = 13,
  DTC_PREPARING_SUB_CLASS = 14,
  DTC_PREPARED_SUB_CLASS = 15,
  DTC_ABORTING_SUB_CLASS = 16,
  DTC_COMMITTING_SUB_CLASS = 17,
  DTC_DO_ASYNC_ABORT_SUB_CLASS = 18,
  DTC_DISASTER_SUB_CLASS = 19,
  DTC_DRAIN_ABORT_SUB_CLASS = 20,
  DTC_ASYNC_ABORT_SUB_CLASS = 21,
  DTC_TM_RECOVERY_SUB_CLASS = 22,
  UNKNOWN_SUB_CLASS = 25,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 0,
  VldEddOffset = 13,
  BufSize = 94,
} TAG_UNNAMED_1703, *PTAG_UNNAMED_1703;

enum XeSqlPkg::DDLType
{
  DDL_AlterTableRebuild = 0,
  DDL_AlterTableSwitch = 1,
  DDL_AlterIndexRebuild = 2,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1704, *PTAG_UNNAMED_1704;

typedef struct _ENCRYPTED_DATA_INFO
{
  /* 0x0000 */ unsigned __int64 StartingFileOffset;
  /* 0x0008 */ unsigned long OutputBufferOffset;
  /* 0x000c */ unsigned long BytesWithinFileSize;
  /* 0x0010 */ unsigned long BytesWithinValidDataLength;
  /* 0x0014 */ unsigned short CompressionFormat;
  /* 0x0016 */ unsigned char DataUnitShift;
  /* 0x0017 */ unsigned char ChunkShift;
  /* 0x0018 */ unsigned char ClusterShift;
  /* 0x0019 */ unsigned char EncryptionFormat;
  /* 0x001a */ unsigned short NumberOfDataBlocks;
  /* 0x001c */ unsigned long DataBlockSize[1];
} ENCRYPTED_DATA_INFO, *PENCRYPTED_DATA_INFO; /* size: 0x0020 */

enum XeSqlPkg::HadrCriticalSectionEntryState
{
  HADR_CRITICAL_SECTION_ATTEMPT_TO_ENTER = 0,
  HADR_CRITICAL_SECTION_ENTERED = 1,
  HADR_CRITICAL_SECTION_EXIT = 2,
};

struct XEError
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ unsigned short m_major;
  /* 0x0004 */ unsigned short m_minor;
  /* 0x0006 */ unsigned short m_state;
  /* 0x0008 */ unsigned short m_severity;
  /* 0x000a */ char Padding_500[6];
  /* 0x0010 */ const struct XELogMessage* m_context;
}; /* size: 0x0018 */

class XE_SteamConstantElimination<unsigned short,4096>
{
  /* 0x0000 */ long Padding_501[2058];
  /* 0x2028 */ class XE_IStream* m_pStream;
  /* 0x2030 */ wchar_t m_inputBuffer[4096];
  /* 0x4030 */ unsigned int m_symAlreadyRead;
}; /* size: 0x4038 */

enum XeSqlPkg::QNTemplateActivity
{
  QNTA_CREATED = 1,
  QNTA_MATCHED = 2,
  QNTA_DROPPED = 3,
};

class XeSqlPkg::glm_lock_release_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_502[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int resource_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int lock_modeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  database_idIdx = 0,
  ref_count_totalIdx = 1,
  ref_typeIdx = 2,
  ref_type_countIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1705, *PTAG_UNNAMED_1705;

enum XeSqlPkg::OibLobCleanupResult
{
  OIBLOB_CLEANUP_LCK_FAILED = 0,
  OIBLOB_CLEANUP_DATA_MISMATCH = 1,
  OIBLOB_CLEANUP_BATCH_COMPLETE = 2,
  OIBLOB_CLEANUP_FINISHED = 4,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1706, *PTAG_UNNAMED_1706;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_1707, *PTAG_UNNAMED_1707;

typedef struct _SERVER_INFO_1575
{
  /* 0x0000 */ unsigned long sv1575_otherqueueaffinity;
} SERVER_INFO_1575, *PSERVER_INFO_1575; /* size: 0x0004 */

enum XeSqlPkg::query_scan_shutdown_state
{
  eQueryScanDestroyQuery = 0,
  eQueryScanDestroyQueryOnException = 1,
  eQueryScanShutdownParallel = 2,
};

class XeSqlPkg::log_flush_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_503[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int write_sizeOffset;
    /* 0x0000 */ const int rowsOffset;
    /* 0x0000 */ const int pending_writesOffset;
    /* 0x0000 */ const int pending_bytesOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0268 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_1708, *PTAG_UNNAMED_1708;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_1709, *PTAG_UNNAMED_1709;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 52,
} TAG_UNNAMED_1710, *PTAG_UNNAMED_1710;

enum XeSqlPkg::AbortAfterWait
{
  KLO_NoKillLock = 0,
  KLO_DoKillBlockersLock = 1,
  KLO_DoKillSelfLock = 2,
};

struct NonYieldAnalysisSLock
{
}; /* size: 0x0004 */

struct tagWNODE_EVENT_REFERENCE
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
  /* 0x0030 */ struct _GUID TargetGuid;
  /* 0x0040 */ unsigned long TargetDataBlockSize;
  union
  {
    /* 0x0044 */ unsigned long TargetInstanceIndex;
    /* 0x0044 */ wchar_t* TargetInstanceName /* zero-length array */;
    /* 0x0044 */ long __PADDING__[1];
  }; /* size: 0x0004 */
}; /* size: 0x0048 */

enum XeSqlPkg::BrokerActivationState
{
  BAS_STARTED = 1,
  BAS_ENDED = 2,
  BAS_ABORTED = 3,
  BAS_NOTIFIED = 4,
  BAS_TASK_OUTPUT = 5,
  BAS_START_FAILED = 6,
};

class SOS_RingBuffer
{
  /* 0x0000 */ long Padding_504[8];
  /* 0x0020 */ enum RINGBUFFER_TYPE m_Type;
  /* 0x0024 */ unsigned long m_RecordSize;
  /* 0x0028 */ unsigned long m_NumberOfRecords;
  /* 0x002c */ long Padding_505;
  /* 0x0030 */ unsigned __int64 m_Position;
  union
  {
    /* 0x0000 */ const unsigned long DEFAULT_NUMBEROFRECORDS;
    /* 0x0000 */ const unsigned long STACK_FRAMES_TOSKIP;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_506[13];
  /* 0x0038 */ unsigned char* m_records;
  /* 0x0040 */ class StackFrames<16>* m_stacks;
  /* 0x0048 */ void* m_serializer /* function */;
}; /* size: 0x0050 */

class CRefCounterAutoDelete
{
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 24,
} TAG_UNNAMED_1711, *PTAG_UNNAMED_1711;

typedef struct _ENABLE_TRACE_PARAMETERS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long EnableProperty;
  /* 0x0008 */ unsigned long ControlFlags;
  /* 0x000c */ struct _GUID SourceId;
  /* 0x001c */ long Padding_507;
  /* 0x0020 */ struct _EVENT_FILTER_DESCRIPTOR* EnableFilterDesc;
} ENABLE_TRACE_PARAMETERS, *PENABLE_TRACE_PARAMETERS; /* size: 0x0028 */

enum XeSqlPkg::PageCompressionFailure
{
  PageModCountBelowThreshold = 1,
  OnlyOneRecordFound = 2,
  NewGeneratedInfoSameAsOld = 3,
  NoSpaceSavings = 4,
};

class SEListEnum<SOS_RingBuffer,0>;

class QueryPerfCounterTicks
{
  union
  {
    union
    {
      /* 0x0000 */ union _LARGE_INTEGER liPart;
      /* 0x0000 */ unsigned __int64 uQuadPart;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ m_PerformanceCount;
}; /* size: 0x0008 */

enum XeSqlPkg::dml_change_process_stage
{
  eDmlProcessChangeTracked = 1,
  eDmlProcessRefreshHappened = 2,
};

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1712, *PTAG_UNNAMED_1712;

enum XeSqlPkg::DOPCalculationStage
{
  dopcsSetMaxDOP = 0,
  dopcsSetTraceflag = 1,
  dopcsCalculateBasedOnAvailableThreads = 2,
  dopcsPostCalculate = 3,
};

typedef struct _PHYSICAL_CHANNEL_RUN
{
  /* 0x0000 */ unsigned long NodeNumber;
  /* 0x0004 */ unsigned long ChannelNumber;
  /* 0x0008 */ unsigned __int64 BasePage;
  /* 0x0010 */ unsigned __int64 PageCount;
  /* 0x0018 */ unsigned __int64 Flags;
} PHYSICAL_CHANNEL_RUN, *PPHYSICAL_CHANNEL_RUN; /* size: 0x0020 */

typedef struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NumberOfRuns;
  /* 0x0008 */ unsigned long NumberOfNodes;
  /* 0x000c */ unsigned long NumberOfChannels;
  /* 0x0010 */ struct _PHYSICAL_CHANNEL_RUN Run[1];
} SYSTEM_MEMORY_TOPOLOGY_INFORMATION, *PSYSTEM_MEMORY_TOPOLOGY_INFORMATION; /* size: 0x0030 */

class XeSqlPkg::xtp_offline_checkpoint_before_log_record
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_508[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_operationOffset;
    /* 0x0000 */ const int is_passive_stateOffset;
    /* 0x0000 */ const int state_logOffset;
    /* 0x0000 */ const int log_recordOffset;
    /* 0x0000 */ const int error_code_pointerOffset;
    /* 0x0000 */ const int current_lsnOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

typedef enum
{
  availability_group_idIdx = 0,
  listener_idIdx = 1,
  dns_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1713, *PTAG_UNNAMED_1713;

enum XeSqlPkg::EOnlineIndexBuildStage
{
  OIBS_ONLINE_INDEX_START = 1,
  OIBS_ONLINE_INDEX_EXECUTION_STAGE_1_BEGIN = 2,
  OIBS_ONLINE_INDEX_EXECUTION_STAGE_1_END = 3,
  OIBS_ONLINE_INDEX_EXECUTION_STAGE_2_BEGIN = 4,
  OIBS_ONLINE_INDEX_EXECUTION_STAGE_2_END = 5,
  OIBS_ONLINE_INDEX_EXECUTION_ROWCOUNT = 6,
  OIBS_ONLINE_INDEX_STOP = 7,
};

enum XeSqlPkg::EDOPStatementType
{
  DOPST_SELECT = 1,
  DOPST_INSERT = 2,
  DOPST_UPDATE = 3,
  DOPST_DELETE = 4,
  DOPST_MERGE = 5,
};

typedef enum
{
  event_idIdx = 0,
  user_infoIdx = 1,
  user_dataIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1714, *PTAG_UNNAMED_1714;

typedef enum
{
  last_shipped_log_block_idIdx = 0,
  last_shipped_log_block_sizeIdx = 1,
  sequence_numIdx = 2,
  target_redoIdx = 3,
  redo_rateIdx = 4,
  redo_queue_sizeIdx = 5,
  scan_generationIdx = 6,
  is_send_watermarkIdx = 7,
  last_redone_lsnIdx = 8,
  hardened_lsnIdx = 9,
  truncation_lsnIdx = 10,
  end_of_log_lsnIdx = 11,
  message_log_idIdx = 12,
  LastField = 13,
} TAG_UNNAMED_1715, *PTAG_UNNAMED_1715;

typedef union _userHMETAFILEPICT::__MIDL_IWinTypes_0005
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct _remoteMETAFILEPICT* hRemote;
    /* 0x0000 */ __int64 hInproc64;
  }; /* size: 0x0008 */
} userHMETAFILEPICT::__MIDL_IWinTypes_0005, *PuserHMETAFILEPICT::__MIDL_IWinTypes_0005; /* size: 0x0008 */

enum XeSqlPkg::EStmtStartingState
{
  SSS_NORMAL = 0,
  SSS_RECOMPILED = 1,
  SSS_XSTMTFLUSH = 2,
};

class CMemThread<CMemDbg<PageHeapMemObj> >
{
  /* 0x0000 */ long Padding_509[270];
  /* 0x0438 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x04b0 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x04d8 */

enum XeSqlPkg::EThreadCacheContextDiffType
{
  eFullContext = 0,
  ePartialContext = 1,
};

class CXRLEZeroColumn<unsigned __int64>
{
  union
  {
    /* 0x0000 */ const unsigned __int64 ZERO_HEADER_HIGH;
    /* 0x0000 */ const unsigned __int64 ZERO_HEADER_LOW;
    /* 0x0000 */ const unsigned __int64 ZERO_HEADER_MASK;
    /* 0x0000 */ const unsigned __int64 DUAL_SYMBOL;
  }; /* size: 0x0008 */
  /* 0x0008 */ long Padding_510[4];
  /* 0x0018 */ unsigned __int64 m_currentValue;
  /* 0x0020 */ unsigned __int64* m_startPointer;
  /* 0x0028 */ unsigned __int64 m_zeroLength;
  /* 0x0030 */ int m_fDecompressed;
  /* 0x0034 */ unsigned int m_realPosition;
}; /* size: 0x0038 */

enum XeSqlPkg::BrokerConvGroupAction
{
  BGA_CREATE = 1,
  BGA_DROP = 2,
};

struct IOleInPlaceObject
{
}; /* size: 0x0008 */

enum XeSqlPkg::OptimizerTimeoutType
{
  EarlyAbortTimeout = 1,
  EarlyAbortMemoryLimitExceeded = 2,
};

typedef struct _SERVICE_PREFERRED_NODE_INFO
{
  /* 0x0000 */ unsigned short usPreferredNode;
  /* 0x0002 */ unsigned char fDelete;
  /* 0x0003 */ char __PADDING__[1];
} SERVICE_PREFERRED_NODE_INFO, *PSERVICE_PREFERRED_NODE_INFO; /* size: 0x0004 */

enum XeSqlPkg::QNBackgroundThreadActivity
{
  QNBA_STARTED = 1,
  QNBA_FINISHED = 2,
  QNBA_GC_STARTED = 3,
  QNBA_GC_FINISHED = 4,
  QNBA_GC_SKIPPED = 5,
};

typedef struct __PUBLIC_OBJECT_TYPE_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING TypeName;
  /* 0x0010 */ unsigned long Reserved[22];
} _PUBLIC_OBJECT_TYPE_INFORMATION, *P_PUBLIC_OBJECT_TYPE_INFORMATION; /* size: 0x0068 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 32,
} TAG_UNNAMED_1716, *PTAG_UNNAMED_1716;

class TObjectPool<TMRUContainer<Worker,0>,ObjectPoolSLock>;

enum XeSqlPkg::login::CustomizableSlots
{
  collect_options_textSlot = 0,
  collect_database_nameSlot = 1,
};

enum XeSqlPkg::QNSubscriptionActivity
{
  QNSA_REGISTERED = 1,
  QNSA_REWOUND = 2,
  QNSA_SENT = 3,
  QNSA_FAILED_BROKER_ERR = 4,
  QNSA_FAILED_NON_BROKER_ERR = 5,
  QNSA_ERR_INTERCEPTED = 6,
  QNSA_DEL_ATTEMPT = 7,
  QNSA_DEL_FAILED = 8,
  QNSA_DELETED = 9,
};

class Spinlock<99,11,1>
{
}; /* size: 0x0004 */

enum XeSqlPkg::RWMode
{
  RWM_READ = 0,
  RWM_WRITE = 1,
};

struct tagNEWTEXTMETRICW
{
  /* 0x0000 */ long tmHeight;
  /* 0x0004 */ long tmAscent;
  /* 0x0008 */ long tmDescent;
  /* 0x000c */ long tmInternalLeading;
  /* 0x0010 */ long tmExternalLeading;
  /* 0x0014 */ long tmAveCharWidth;
  /* 0x0018 */ long tmMaxCharWidth;
  /* 0x001c */ long tmWeight;
  /* 0x0020 */ long tmOverhang;
  /* 0x0024 */ long tmDigitizedAspectX;
  /* 0x0028 */ long tmDigitizedAspectY;
  /* 0x002c */ wchar_t tmFirstChar;
  /* 0x002e */ wchar_t tmLastChar;
  /* 0x0030 */ wchar_t tmDefaultChar;
  /* 0x0032 */ wchar_t tmBreakChar;
  /* 0x0034 */ unsigned char tmItalic;
  /* 0x0035 */ unsigned char tmUnderlined;
  /* 0x0036 */ unsigned char tmStruckOut;
  /* 0x0037 */ unsigned char tmPitchAndFamily;
  /* 0x0038 */ unsigned char tmCharSet;
  /* 0x0039 */ char Padding_511[3];
  /* 0x003c */ unsigned long ntmFlags;
  /* 0x0040 */ unsigned int ntmSizeEM;
  /* 0x0044 */ unsigned int ntmCellHeight;
  /* 0x0048 */ unsigned int ntmAvgWidth;
}; /* size: 0x004c */

enum XeSqlPkg::query_optimizer_tree_id
{
  eOptxeConverted = 0,
  eOptxeInput = 1,
  eOptxeSimplified = 2,
  eOptxeJoinCollapsed = 3,
  eOptxeBeforeProjNorm = 4,
  eOptxeAfterProjNorm = 5,
  eOptxeOutput = 6,
  eOptxeAfterCopyout = 7,
};

enum XeSqlPkg::LockPriorityState
{
  LPS_LowPriorityPeriodStarted = 0,
  LPS_LowPriorityPeriodExpired = 1,
  LPS_NormalPriority = 2,
  LPS_AbortBlockers = 3,
  LPS_AbortSelf = 4,
};

typedef enum
{
  database_idIdx = 0,
  ref_count_totalIdx = 1,
  ref_typeIdx = 2,
  ref_type_countIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1717, *PTAG_UNNAMED_1717;

enum XeSqlPkg::HadrWsfcChangeNotifierStatus
{
  HADR_WSFC_CHANGE_NOTIFIER_STARTING = 0,
  HADR_WSFC_CHANGE_NOTIFIER_WAITING_FOR_CLUSTER_AVAILABILITY = 1,
  HADR_WSFC_CHANGE_NOTIFIER_WAITING_FOR_NODE_AVAILABILITY = 2,
  HADR_WSFC_CHANGE_NOTIFIER_WAITING_FOR_NODE_ONLINE = 3,
  HADR_WSFC_CHANGE_NOTIFIER_RUNNING = 4,
  HADR_WSFC_CHANGE_NOTIFIER_WAITING_FOR_EVENT = 5,
  HADR_WSFC_CHANGE_NOTIFIER_STOPPING = 6,
  HADR_WSFC_CHANGE_NOTIFIER_STOPPED = 7,
};

struct IEnumConnections
{
}; /* size: 0x0008 */

typedef enum
{
  operationIdx = 0,
  service_addressIdx = 1,
  service_idIdx = 2,
  local_keyIdx = 3,
  session_addressIdx = 4,
  session_initiatorIdx = 5,
  num_messagesIdx = 6,
  num_sessionsIdx = 7,
  endpoint_typeIdx = 8,
  session_idIdx = 9,
  service_nameIdx = 10,
  service_instanceIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1718, *PTAG_UNNAMED_1718;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 31,
} TAG_UNNAMED_1719, *PTAG_UNNAMED_1719;

enum XeSqlPkg::ConnectivityTraceTdsFlag
{
  TDF_PHY_CONN_KILL = 1,
  TDF_READ_ERROR = 2,
  TDF_INPUT_STREAM_NET_ERR = 4,
  TDF_BEFORE_LOGIN = 8,
  TDF_SESS_KILL = 16,
  TDF_NORMAL_DISCONNECT = 32,
  TDF_NORMAL_LOGOUT = 64,
  TDF_CONN_ROUTED = 128,
};

struct ISWbemSecurity
{
}; /* size: 0x0008 */

enum XeSqlPkg::PlanAffectingConvertType
{
  PlanAffectingConvertType_Unknown = 0,
  PlanAffectingConvertType_CardinalityEstimate = 1,
  PlanAffectingConvertType_SeekPlan = 2,
};

struct IMultiQI
{
}; /* size: 0x0008 */

typedef struct _CM_PARTIAL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Type;
  /* 0x0001 */ unsigned char ShareDisposition;
  /* 0x0002 */ unsigned short Flags;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Generic;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Port;
      struct
      {
        /* 0x0004 */ unsigned long Level;
        /* 0x0008 */ unsigned long Vector;
        /* 0x000c */ unsigned __int64 Affinity;
      } /* size: 0x0010 */ Interrupt;
      struct
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Reserved;
            /* 0x0006 */ unsigned short MessageCount;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Raw;
          struct
          {
            /* 0x0004 */ unsigned long Level;
            /* 0x0008 */ unsigned long Vector;
            /* 0x000c */ unsigned __int64 Affinity;
          } /* size: 0x0010 */ Translated;
        }; /* size: 0x0010 */
      } /* size: 0x0010 */ MessageInterrupt;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length;
      } /* size: 0x000c */ Memory;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long Port;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ Dma;
      struct
      {
        /* 0x0004 */ unsigned long Channel;
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved1;
      } /* size: 0x000c */ DmaV3;
      struct
      {
        /* 0x0004 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0004 */ unsigned long Start;
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Reserved;
      } /* size: 0x000c */ BusNumber;
      struct
      {
        /* 0x0004 */ unsigned long DataSize;
        /* 0x0008 */ unsigned long Reserved1;
        /* 0x000c */ unsigned long Reserved2;
      } /* size: 0x000c */ DeviceSpecificData;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length40;
      } /* size: 0x000c */ Memory40;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length48;
      } /* size: 0x000c */ Memory48;
      struct
      {
        /* 0x0004 */ union _LARGE_INTEGER Start;
        /* 0x000c */ unsigned long Length64;
      } /* size: 0x000c */ Memory64;
      struct
      {
        /* 0x0004 */ unsigned char Class;
        /* 0x0005 */ unsigned char Type;
        /* 0x0006 */ unsigned char Reserved1;
        /* 0x0007 */ unsigned char Reserved2;
        /* 0x0008 */ unsigned long IdLowPart;
        /* 0x000c */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
} CM_PARTIAL_RESOURCE_DESCRIPTOR, *PCM_PARTIAL_RESOURCE_DESCRIPTOR; /* size: 0x0014 */

enum XeSqlPkg::DBSQLStmtType
{
  CREATE_DB = 1,
  DROP_DB = 2,
  USE_DB = 3,
  ALTER_DB = 4,
};

typedef enum
{
  Value = 0xd3000,
} TAG_UNNAMED_1720, *PTAG_UNNAMED_1720;

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  cache_typeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1721, *PTAG_UNNAMED_1721;

class XE_DeserializedMetadata
{
  /* 0x0000 */ long Padding_512[12];
  /* 0x0030 */ const class XE_DeserializedMetadata* m_pParent;
  /* 0x0038 */ class SEList<XE_LogDeserializedPackage,0> m_deserializedPackages;
  /* 0x0048 */ struct XEPackageMetadata* m_packages[1024];
  /* 0x2048 */ struct XETicksConfig m_tickConfig;
}; /* size: 0x2060 */

enum XeSqlPkg::BrokerMessageType
{
  BMT_SEQUENCED = 1,
  BMT_UNSEQUENCED = 2,
};

class MemObjCache<CMemThread<CMemDbg<PageHeapMemObj> > >
{
  /* 0x0000 */ long Padding_513[310];
  /* 0x04d8 */ void* m_cacheEntryDescriptor;
  /* 0x04e0 */ class CostInfo m_costInfo;
}; /* size: 0x0528 */

enum XeSqlPkg::ELockEscalationCause
{
  LE_LOCK_THRESHOLD = 0,
  LE_MEMORY_THRESHOLD = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1722, *PTAG_UNNAMED_1722;

struct std::_DebugHeapTag_t
{
  /* 0x0000 */ int _Type;
}; /* size: 0x0004 */

struct PPM_THERMAL_POLICY_EVENT
{
  /* 0x0000 */ unsigned char Mode;
  /* 0x0001 */ char Padding_514[7];
  /* 0x0008 */ unsigned __int64 Processors;
}; /* size: 0x0010 */

enum XeSqlPkg::HadrMutexAcquisitionState
{
  HADR_MUTEX_ATTEMPT_TO_ACQUIRE = 0,
  HADR_MUTEX_ACQUIRED = 1,
  HADR_MUTEX_RELEASED = 2,
};

enum XeSqlPkg::TraceFlgType
{
  TRACEFLG_TYPE_GLOBAL = 0,
  TRACEFLG_TYPE_SESSION = 1,
};

enum XeSqlPkg::EServerStartStopOperation
{
  SSSO_SHUTDOWN = 1,
  SSSO_STARTED = 2,
  SSSO_PAUSED = 3,
  SSSO_CONTINUE = 4,
};

typedef enum
{
  node_idIdx = 0,
  thread_idIdx = 1,
  estimated_rowsIdx = 2,
  actual_rowsIdx = 3,
  fire_countIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1723, *PTAG_UNNAMED_1723;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_1724, *PTAG_UNNAMED_1724;

enum XeSqlPkg::EDatabaseFileType
{
  DFT_DATA = 0,
  DFT_LOG = 1,
};

class CXColumn<unsigned short>
{
  /* 0x0000 */ long Padding_515[6];
  /* 0x0018 */ unsigned short* m_startPointer;
}; /* size: 0x0020 */

enum XeSqlPkg::HekatonAPIs
{
  eHkTransactionCreateSavePoint = 0,
  eHkTransactionRollbackToSavePoint = 1,
  eSaveErrorForCatchBlock = 2,
};

struct tagEMRPLGBLT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ struct _POINTL aptlDest[3];
  /* 0x0030 */ long xSrc;
  /* 0x0034 */ long ySrc;
  /* 0x0038 */ long cxSrc;
  /* 0x003c */ long cySrc;
  /* 0x0040 */ struct tagXFORM xformSrc;
  /* 0x0058 */ unsigned long crBkColorSrc;
  /* 0x005c */ unsigned long iUsageSrc;
  /* 0x0060 */ unsigned long offBmiSrc;
  /* 0x0064 */ unsigned long cbBmiSrc;
  /* 0x0068 */ unsigned long offBitsSrc;
  /* 0x006c */ unsigned long cbBitsSrc;
  /* 0x0070 */ long xMask;
  /* 0x0074 */ long yMask;
  /* 0x0078 */ unsigned long iUsageMask;
  /* 0x007c */ unsigned long offBmiMask;
  /* 0x0080 */ unsigned long cbBmiMask;
  /* 0x0084 */ unsigned long offBitsMask;
  /* 0x0088 */ unsigned long cbBitsMask;
}; /* size: 0x008c */

enum XeSqlPkg::TRC_XACT_EVT_XACT_TYPE
{
  TRC_XACT_EVT_IS_NOT_USER_XACT = 0,
  TRC_XACT_EVT_IS_USER_XACT = 1,
};

enum XeSqlPkg::ESortWarningType
{
  SWT_SINGLEPASS = 1,
  SWT_MULTIPASS = 2,
};

struct tagARRAYDESC
{
  /* 0x0000 */ struct tagTYPEDESC tdescElem;
  /* 0x0010 */ unsigned short cDims;
  /* 0x0012 */ char Padding_516[2];
  /* 0x0014 */ struct tagSAFEARRAYBOUND rgbounds[1];
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef enum
{
  activityIdx = 0,
  query_notification_xml_informationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1725, *PTAG_UNNAMED_1725;

class XE_AutoEngineRWLock
{
  /* 0x0000 */ void* m_lock;
  /* 0x0008 */ enum XERWMode m_mode;
  /* 0x000c */ int m_entered;
}; /* size: 0x0010 */

enum XeSqlPkg::PageLocation
{
  PL_MEMORY = 0,
  PL_DISK = 1,
};

typedef struct _IMAGE_OPTIONAL_HEADER64
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned __int64 ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned __int64 SizeOfStackReserve;
  /* 0x0050 */ unsigned __int64 SizeOfStackCommit;
  /* 0x0058 */ unsigned __int64 SizeOfHeapReserve;
  /* 0x0060 */ unsigned __int64 SizeOfHeapCommit;
  /* 0x0068 */ unsigned long LoaderFlags;
  /* 0x006c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0070 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64; /* size: 0x00f0 */

typedef struct _BOOT_ENTROPY_SOURCE_NT_RESULT
{
  /* 0x0000 */ enum _BOOT_ENTROPY_SOURCE_ID SourceId;
  /* 0x0004 */ long Padding_517;
  /* 0x0008 */ unsigned __int64 Policy;
  /* 0x0010 */ enum _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
  /* 0x0014 */ long ResultStatus;
  /* 0x0018 */ unsigned __int64 Time;
  /* 0x0020 */ unsigned long EntropyLength;
  /* 0x0024 */ unsigned char EntropyData[64];
  /* 0x0064 */ long __PADDING__[1];
} BOOT_ENTROPY_SOURCE_NT_RESULT, *PBOOT_ENTROPY_SOURCE_NT_RESULT; /* size: 0x0068 */

enum XeSqlPkg::AlwaysOnDDLOpcode
{
  DDL_PHASE_BEGIN = 0,
  DDL_PHASE_COMMIT = 1,
  DDL_PHASE_ROLLBACK = 2,
};

class UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >
{
}; /* size: 0x0001 */

typedef enum
{
  operationIdx = 0,
  boxcar_addressIdx = 1,
  bytes_sentIdx = 2,
  message_countIdx = 3,
  zero_copyIdx = 4,
  error_codeIdx = 5,
  endpoint_typeIdx = 6,
  connection_idIdx = 7,
  error_messageIdx = 8,
  addressIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1726, *PTAG_UNNAMED_1726;

enum XeSqlPkg::BrokerMessageSource
{
  BMS_TRANSPORT = 0,
  BMS_LOCAL = 1,
};

typedef enum
{
  reasonIdx = 0,
  message_log_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1727, *PTAG_UNNAMED_1727;

typedef struct _EVENT_BASIC_INFORMATION
{
  /* 0x0000 */ enum _EVENT_TYPE EventType;
  /* 0x0004 */ long EventState;
} EVENT_BASIC_INFORMATION, *PEVENT_BASIC_INFORMATION; /* size: 0x0008 */

enum XeSqlPkg::ServerMemoryChange
{
  MEMORY_CHANGE_INCREASE = 1,
  MEMORY_CHANGE_DECREASE = 2,
};

typedef enum
{
  endpoint_typeIdx = 0,
  portIdx = 1,
  clusterIdx = 2,
  addressIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1728, *PTAG_UNNAMED_1728;

struct IXMLHttpRequest
{
}; /* size: 0x0008 */

enum XeSqlPkg::AlwaysOnDDLAction
{
  ALWAYSON_DDL_CREATE = 0,
  ALWAYSON_DDL_DROP = 1,
  ALWAYSON_DDL_ALTER = 2,
};

enum XeSqlPkg::BrokerMirrorRouteState
{
  BMR_OPERATIONAL = 1,
  BMR_OPERATIONAL_PRINC_ONLY = 2,
  BMR_NOT_OPERATIONAL = 3,
};

class XeSqlPkg::broker_transmission_timer_reset
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_518[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int timerOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

typedef enum
{
  query_operation_node_idIdx = 0,
  is_first_acquireIdx = 1,
  final_dopIdx = 2,
  actual_memory_grantIdx = 3,
  extra_memory_grantIdx = 4,
  total_required_memoryIdx = 5,
  exchange_required_memoryIdx = 6,
  is_small_queryIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1729, *PTAG_UNNAMED_1729;

typedef enum
{
  lob_actionIdx = 0,
  column_idIdx = 1,
  offsetIdx = 2,
  lengthIdx = 3,
  sizeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1730, *PTAG_UNNAMED_1730;

typedef struct _STARTUPINFOW
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_519;
  /* 0x0008 */ wchar_t* lpReserved;
  /* 0x0010 */ wchar_t* lpDesktop;
  /* 0x0018 */ wchar_t* lpTitle;
  /* 0x0020 */ unsigned long dwX;
  /* 0x0024 */ unsigned long dwY;
  /* 0x0028 */ unsigned long dwXSize;
  /* 0x002c */ unsigned long dwYSize;
  /* 0x0030 */ unsigned long dwXCountChars;
  /* 0x0034 */ unsigned long dwYCountChars;
  /* 0x0038 */ unsigned long dwFillAttribute;
  /* 0x003c */ unsigned long dwFlags;
  /* 0x0040 */ unsigned short wShowWindow;
  /* 0x0042 */ unsigned short cbReserved2;
  /* 0x0044 */ long Padding_520;
  /* 0x0048 */ unsigned char* lpReserved2;
  /* 0x0050 */ void* hStdInput;
  /* 0x0058 */ void* hStdOutput;
  /* 0x0060 */ void* hStdError;
} STARTUPINFOW, *PSTARTUPINFOW; /* size: 0x0068 */

enum XeSqlPkg::GroupCommitFlushReason
{
  GCR_WAITERS = 0,
  GCR_TIME = 1,
  GCR_IMMEDIATE = 2,
};

struct IOleControl
{
}; /* size: 0x0008 */

enum XeSqlPkg::ESendOrReceive
{
  eSendEvent = 0,
  eReceiveEvent = 1,
};

class XE_CXTimelineFile
{
}; /* size: 0x0350 */

enum XeSqlPkg::LogBlkAllocType
{
  LBAT_REGULAR = 0,
  LBAT_LOCKED = 1,
};

typedef union _FILE_SEGMENT_ELEMENT
{
  union
  {
    /* 0x0000 */ void* Buffer;
    /* 0x0000 */ unsigned __int64 Alignment;
  }; /* size: 0x0008 */
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT; /* size: 0x0008 */

struct SXTPSLock
{
}; /* size: 0x0004 */

enum XeSqlPkg::IndexRebuildPhase
{
  LOCK_INDEX_REBUILD_RESOURCE = 1,
  LOCK_TABLE = 2,
  UPGRADE_TO_SCHEMA_MOD_LOCK = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_1731, *PTAG_UNNAMED_1731;

enum XeSqlPkg::MessageOpCode
{
  MESSAGE_SENT = 0,
  MESSAGE_RECEIVED = 1,
};

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  modeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1732, *PTAG_UNNAMED_1732;

enum XeSqlPkg::DDLOpcode
{
  DDL_BEGIN = 0,
  DDL_COMMIT = 1,
  DDL_ROLLBACK = 2,
};

enum XeSqlPkg::EPreconnectType
{
  PRECONNECT_RG_CLASSIFIER = 1,
  PRECONNECT_LOGON_TRIGGER = 2,
};

class CMemDbg<CMemLargePageObj>
{
  /* 0x0000 */ const unsigned __int64 xsm_cbMaxSizeFitsOnPage;
  /* 0x0008 */ long Padding_521[106];
  /* 0x01b0 */ class SOS_Task* m_pTask;
  /* 0x01b8 */ int m_fUseFree;
  /* 0x01bc */ unsigned long m_bTraceOptions;
  /* 0x01c0 */ class CMallocSpy m_msSpy;
  /* 0x0568 */ int m_fReadOnly;
  /* 0x056c */ int m_fCheckThreadAccess;
  /* 0x0570 */ int m_fBeingDestroyed;
  /* 0x0574 */ long Padding_522;
  /* 0x0578 */ class Worker* m_pLockOwner;
}; /* size: 0x0580 */

enum XeSqlPkg::EHashWarningType
{
  HWT_RECURSION = 0,
  HWT_BAILOUT = 1,
};

class MemObjCache<CMemThread<CMemLargePageObj> >
{
  /* 0x0000 */ long Padding_523[148];
  /* 0x0250 */ void* m_cacheEntryDescriptor;
  /* 0x0258 */ class CostInfo m_costInfo;
}; /* size: 0x02a0 */

enum XeSqlPkg::FileIoMode
{
  IO_MODE_CONTIGUOUS = 0,
  IO_MODE_SCATTER_GATHER = 1,
};

typedef struct _RTL_BALANCED_NODE
{
  union
  {
    /* 0x0000 */ struct _RTL_BALANCED_NODE* Children[2];
    struct
    {
      /* 0x0000 */ struct _RTL_BALANCED_NODE* Left;
      /* 0x0008 */ struct _RTL_BALANCED_NODE* Right;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0010 */ unsigned char Red : 1; /* bit position: 0 */
    /* 0x0010 */ unsigned char Balance : 2; /* bit position: 0 */
    /* 0x0010 */ unsigned __int64 ParentValue;
  }; /* size: 0x0008 */
} RTL_BALANCED_NODE, *PRTL_BALANCED_NODE; /* size: 0x0018 */

typedef struct _LDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0010 */ struct _LIST_ENTRY InMemoryOrderLinks;
  union
  {
    /* 0x0020 */ struct _LIST_ENTRY InInitializationOrderLinks;
    /* 0x0020 */ struct _LIST_ENTRY InProgressLinks;
  }; /* size: 0x0010 */
  /* 0x0030 */ void* DllBase;
  /* 0x0038 */ void* EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_524;
  /* 0x0048 */ struct _UNICODE_STRING FullDllName;
  /* 0x0058 */ struct _UNICODE_STRING BaseDllName;
  union
  {
    /* 0x0068 */ unsigned char FlagGroup[4];
    /* 0x0068 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0068 */ unsigned long PackagedBinary : 1; /* bit position: 0 */
      /* 0x0068 */ unsigned long MarkedForRemoval : 1; /* bit position: 1 */
      /* 0x0068 */ unsigned long ImageDll : 1; /* bit position: 2 */
      /* 0x0068 */ unsigned long LoadNotificationsSent : 1; /* bit position: 3 */
      /* 0x0068 */ unsigned long TelemetryEntryProcessed : 1; /* bit position: 4 */
      /* 0x0068 */ unsigned long ProcessStaticImport : 1; /* bit position: 5 */
      /* 0x0068 */ unsigned long InLegacyLists : 1; /* bit position: 6 */
      /* 0x0068 */ unsigned long InIndexes : 1; /* bit position: 7 */
      /* 0x0068 */ unsigned long ShimDll : 1; /* bit position: 8 */
      /* 0x0068 */ unsigned long InExceptionTable : 1; /* bit position: 9 */
      /* 0x0068 */ unsigned long ReservedFlags1 : 2; /* bit position: 10 */
      /* 0x0068 */ unsigned long LoadInProgress : 1; /* bit position: 12 */
      /* 0x0068 */ unsigned long ReservedFlags2 : 1; /* bit position: 13 */
      /* 0x0068 */ unsigned long EntryProcessed : 1; /* bit position: 14 */
      /* 0x0068 */ unsigned long ReservedFlags3 : 3; /* bit position: 15 */
      /* 0x0068 */ unsigned long DontCallForThreads : 1; /* bit position: 18 */
      /* 0x0068 */ unsigned long ProcessAttachCalled : 1; /* bit position: 19 */
      /* 0x0068 */ unsigned long ProcessAttachFailed : 1; /* bit position: 20 */
      /* 0x0068 */ unsigned long CorDeferredValidate : 1; /* bit position: 21 */
      /* 0x0068 */ unsigned long CorImage : 1; /* bit position: 22 */
      /* 0x0068 */ unsigned long DontRelocate : 1; /* bit position: 23 */
      /* 0x0068 */ unsigned long CorILOnly : 1; /* bit position: 24 */
      /* 0x0068 */ unsigned long ReservedFlags5 : 3; /* bit position: 25 */
      /* 0x0068 */ unsigned long Redirected : 1; /* bit position: 28 */
      /* 0x0068 */ unsigned long ReservedFlags6 : 2; /* bit position: 29 */
      /* 0x0068 */ unsigned long CompatDatabaseProcessed : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x006c */ unsigned short ObsoleteLoadCount;
  /* 0x006e */ unsigned short TlsIndex;
  /* 0x0070 */ struct _LIST_ENTRY HashLinks;
  /* 0x0080 */ unsigned long TimeDateStamp;
  /* 0x0084 */ long Padding_525;
  /* 0x0088 */ struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
  /* 0x0090 */ void* PatchInformation;
  /* 0x0098 */ struct _LDR_DDAG_NODE* DdagNode;
  /* 0x00a0 */ struct _LIST_ENTRY NodeModuleLink;
  /* 0x00b0 */ struct _LDRP_DLL_SNAP_CONTEXT* SnapContext;
  /* 0x00b8 */ void* SwitchBackContext;
  /* 0x00c0 */ struct _RTL_BALANCED_NODE BaseAddressIndexNode;
  /* 0x00d8 */ struct _RTL_BALANCED_NODE MappingInfoIndexNode;
  /* 0x00f0 */ unsigned __int64 OriginalBase;
  /* 0x00f8 */ union _LARGE_INTEGER LoadTime;
  /* 0x0100 */ unsigned long BaseNameHashValue;
  /* 0x0104 */ long __PADDING__[1];
} LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY; /* size: 0x0108 */

typedef enum
{
  modeIdx = 0,
  is_readIdx = 1,
  durationIdx = 2,
  file_handleIdx = 3,
  offsetIdx = 4,
  database_idIdx = 5,
  file_idIdx = 6,
  filegroup_idIdx = 7,
  sizeIdx = 8,
  error_code_pointerIdx = 9,
  pathIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1733, *PTAG_UNNAMED_1733;

enum XeSqlPkg::EQPJobFailureType
{
  QPJE_GIVE_UP = 1,
  QPJE_QUEUE_FULL = 2,
  QPJE_EXCEPTION = 3,
};

typedef struct _JOB_SET_ARRAY
{
  /* 0x0000 */ void* JobHandle;
  /* 0x0008 */ unsigned long MemberLevel;
  /* 0x000c */ unsigned long Flags;
} JOB_SET_ARRAY, *PJOB_SET_ARRAY; /* size: 0x0010 */

typedef enum
{
  setup_eventIdx = 0,
  endpoint_typeIdx = 1,
  stream_statusIdx = 2,
  error_numberIdx = 3,
  connection_idIdx = 4,
  error_messageIdx = 5,
  addressIdx = 6,
  circuit_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1734, *PTAG_UNNAMED_1734;

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  is_eosIdx = 3,
  rowsIdx = 4,
  query_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1735, *PTAG_UNNAMED_1735;

class CAutoBase<XE_PackageFilter>
{
  /* 0x0000 */ class XE_PackageFilter* m_pt;
}; /* size: 0x0008 */

enum DBRESULTFLAGENUM
{
  DBRESULTFLAG_DEFAULT = 0,
  DBRESULTFLAG_ROWSET = 1,
  DBRESULTFLAG_ROW = 2,
};

typedef struct _SID_AND_ATTRIBUTES_HASH
{
  /* 0x0000 */ unsigned long SidCount;
  /* 0x0004 */ long Padding_526;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* SidAttr;
  /* 0x0010 */ unsigned __int64 Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH; /* size: 0x0110 */

typedef enum _ATOM_INFORMATION_CLASS
{
  AtomBasicInformation = 0,
  AtomTableInformation = 1,
} ATOM_INFORMATION_CLASS, *PATOM_INFORMATION_CLASS;

enum DBSOURCETYPEENUM
{
  DBSOURCETYPE_DATASOURCE = 1,
  DBSOURCETYPE_ENUMERATOR = 2,
};

typedef enum
{
  stageIdx = 0,
  num_connections_closedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1736, *PTAG_UNNAMED_1736;

typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION
{
  SystemFirmwareTable_Enumerate = 0,
  SystemFirmwareTable_Get = 1,
} SYSTEM_FIRMWARE_TABLE_ACTION, *PSYSTEM_FIRMWARE_TABLE_ACTION;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 4,
  VldEddOffset = 1,
  BufSize = 40,
} TAG_UNNAMED_1737, *PTAG_UNNAMED_1737;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1738, *PTAG_UNNAMED_1738;

struct IPersistStream
{
}; /* size: 0x0008 */

typedef enum _WAIT_TYPE
{
  WaitAll = 0,
  WaitAny = 1,
  WaitNotification = 2,
} WAIT_TYPE, *PWAIT_TYPE;

struct _HREGBATCH;

enum XACTCONST
{
  XACTCONST_TIMEOUTINFINITE = 0,
};

struct XE_TEvent<4,2,9>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,9> m_dynamicAttr;
  /* 0x0278 */ struct XEEvent m_event;
}; /* size: 0x02c0 */

class XeSqlPkg::file_write_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_527[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
    /* 0x0000 */ const int io_dataOffset;
  }; /* size: 0x02c0 */
}; /* size: 0x0278 */

typedef enum
{
  remote_exchange_node_idIdx = 0,
  remote_exchange_thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  context_accessed_nameIdx = 4,
  context_dbsoIdx = 5,
  context_dbso_useropt1Idx = 6,
  context_dbso_useropt2Idx = 7,
  context_dbso_useropt1setmaskIdx = 8,
  context_dbso_idtinsert_objidIdx = 9,
  context_dbso_idtinsert_stateIdx = 10,
  context_dbso_idtinsert_dbidIdx = 11,
  context_dbso_rowcntIdx = 12,
  context_dbso_statlistIdx = 13,
  context_dbso_textsizeIdx = 14,
  context_dbso_offsetsIdx = 15,
  context_dbso_locktimeoutIdx = 16,
  context_dbso_querygovIdx = 17,
  context_dbso_dtfmtIdx = 18,
  context_dbso_daydatefirstIdx = 19,
  context_dbso_ddlckpriIdx = 20,
  context_dbso_isolvlIdx = 21,
  context_dbso_fipsflagIdx = 22,
  context_dbso_langidIdx = 23,
  LastField = 24,
} TAG_UNNAMED_1739, *PTAG_UNNAMED_1739;

class Spinlock<200,3,1>
{
}; /* size: 0x0004 */

typedef enum _TP_DEBUG_CLASS
{
  TP_DEBUG_CLASS_POOL = 0,
} TP_DEBUG_CLASS, *PTP_DEBUG_CLASS;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1740, *PTAG_UNNAMED_1740;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1741, *PTAG_UNNAMED_1741;

enum DBCOLUMNFLAGSENUM26
{
  DBCOLUMNFLAGS_ISSTREAM = 0x80000,
  DBCOLUMNFLAGS_ISROWSET = 0x100000,
  DBCOLUMNFLAGS_ISROW = 0x200000,
  DBCOLUMNFLAGS_ROWSPECIFICCOLUMN = 0x400000,
};

struct EventTypeEntry
{
  /* 0x0000 */ unsigned __int64 m_minEventTime;
  /* 0x0008 */ unsigned __int64 m_maxEventTime;
  /* 0x0010 */ class CXFixedTable* m_eventTable;
}; /* size: 0x0018 */

typedef struct _div_t
{
  /* 0x0000 */ int quot;
  /* 0x0004 */ int rem;
} div_t, *Pdiv_t; /* size: 0x0008 */

enum XeCloudMinPkg::OperationState
{
  STATE_START = 0,
  STATE_COMPLETE = 1,
  STATE_FAIL = 2,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_1742, *PTAG_UNNAMED_1742;

enum DBPROPOPTIONSENUM
{
  DBPROPOPTIONS_REQUIRED = 0,
  DBPROPOPTIONS_SETIFCHEAP = 1,
  DBPROPOPTIONS_OPTIONAL = 1,
};

class Spinlock<112,9,1>
{
}; /* size: 0x0004 */

enum DBROWSTATUSENUM20
{
  DBROWSTATUS_S_NOCHANGE = 20,
};

typedef enum
{
  age_valueIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1743, *PTAG_UNNAMED_1743;

typedef struct __vc_attributes::last_isAttribute
{
  /* 0x0000 */ const char* expression;
} _vc_attributes::last_isAttribute, *P_vc_attributes::last_isAttribute; /* size: 0x0008 */

enum XeDvmPkg::DvmEventLocation
{
  DVM_INITIALIZE = 1,
  DVM_ACTIVATE = 2,
  DVM_QUIESCE = 3,
  DVM_HEALTH_CHK = 4,
  DVM_AGENT_INITIALIZE = 5,
  DVM_AGENT_ACTIVATE = 6,
  DVM_AGENT_QUIESCE = 7,
  DVM_AGENT_HEALTH_CHK = 8,
};

typedef enum
{
  mirrored_route_stateIdx = 0,
  address_mirrorIdx = 1,
  address_principalIdx = 2,
  error_message_mirrorIdx = 3,
  error_message_prinicipalIdx = 4,
  mirroring_role_mirrorIdx = 5,
  mirroring_role_principalIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1744, *PTAG_UNNAMED_1744;

struct PPM_IDLESTATE_EVENT
{
  /* 0x0000 */ unsigned long NewState;
  /* 0x0004 */ unsigned long OldState;
  /* 0x0008 */ unsigned __int64 Processors;
}; /* size: 0x0010 */

enum DBLITERALENUM21
{
  DBLITERAL_ESCAPE_PERCENT_SUFFIX = 29,
  DBLITERAL_ESCAPE_UNDERSCORE_SUFFIX = 30,
};

typedef struct _s__RTTICompleteObjectLocator2
{
  /* 0x0000 */ unsigned long signature;
  /* 0x0004 */ unsigned long offset;
  /* 0x0008 */ unsigned long cdOffset;
  /* 0x000c */ struct _TypeDescriptor* pTypeDescriptor;
  /* 0x0014 */ const struct _s__RTTIClassHierarchyDescriptor* pClassDescriptor;
  /* 0x001c */ const struct _s__RTTICompleteObjectLocator2* pSelf;
} s__RTTICompleteObjectLocator2, *Ps__RTTICompleteObjectLocator2; /* size: 0x0024 */

typedef enum _IO_COMPLETION_INFORMATION_CLASS
{
  IoCompletionBasicInformation = 0,
} IO_COMPLETION_INFORMATION_CLASS, *PIO_COMPLETION_INFORMATION_CLASS;

struct XE_TArray<XEDataAttribute,0>
{
  /* 0x0000 */ struct XEDataAttribute* m_array;
}; /* size: 0x0008 */

struct XE_TEvent<4,0,0>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,0> m_dynamicAttr;
  /* 0x00b0 */ struct XEEvent m_event;
}; /* size: 0x00f8 */

class XeSqlPkg::query_rpc_server_cache_flush
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  dialog_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1745, *PTAG_UNNAMED_1745;

class SpinlockHolder<25,19,1>;

class DmpPointer<SEList<PageHeapPageInfo,40> >
{
  /* 0x0000 */ class SEList<PageHeapPageInfo,40>* m_pRaw;
}; /* size: 0x0008 */

enum CLUS_RESSUBCLASS
{
  CLUS_RESSUBCLASS_SHARED = -2147483648,
};

enum CLUS_RESSUBCLASS_STORAGE
{
  CLUS_RESSUBCLASS_STORAGE_SHARED_BUS = -2147483648,
};

typedef struct _SERVICE_DELAYED_AUTO_START_INFO
{
  /* 0x0000 */ int fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, *PSERVICE_DELAYED_AUTO_START_INFO; /* size: 0x0004 */

typedef enum
{
  text_wIdx = 0,
  text_w_stIdx = 1,
  text_aIdx = 2,
  text_a_stIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1746, *PTAG_UNNAMED_1746;

enum DBSOURCETYPEENUM25
{
  DBSOURCETYPE_BINDER = 4,
};

enum EGlobalDbIdSpecial
{
  x_egdbBad = 0,
  x_egdbNonExistent = 0,
  x_egdbRemote = 0,
  x_egdbMaster = 1,
  x_egdbTemp = 2,
  x_egdbResource = 32767,
  x_egdbUnknown = 0xffffffff,
};

class SEListEnum<TCallback<void,int *,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,int *,NullType,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,int *,NullType,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

enum TX_MISC_CONSTANTS
{
  MAX_TRAN_DESC = 40,
};

class XeCloudMinPkg::start_new_epoch
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_528[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int new_epochOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_1747, *PTAG_UNNAMED_1747;

enum IExecSql::EParamAttributes
{
  NoParamAttr = 0,
  OutType = 1,
  DefaultType = 2,
  ReturnType = 3,
  Error = 4,
  AutoParam = 5,
  OrigNotNull = 6,
  OrigRawColl = 7,
  SkipTDSValidation = 8,
  LateValidation = 9,
  LateFixup = 10,
  LastParamAttrValue = 11,
};

class CAutoP<XE_FileMemoryMap>
{
}; /* size: 0x0008 */

typedef enum _MULTIPLE_TRUSTEE_OPERATION
{
  NO_MULTIPLE_TRUSTEE = 0,
  TRUSTEE_IS_IMPERSONATE = 1,
} MULTIPLE_TRUSTEE_OPERATION, *PMULTIPLE_TRUSTEE_OPERATION;

enum CLUS_FLAGS
{
  CLUS_FLAG_CORE = 1,
};

struct IPropertyPage2
{
}; /* size: 0x0008 */

typedef enum
{
  CbTraceFlagStoreSize = 1288,
} TAG_UNNAMED_1748, *PTAG_UNNAMED_1748;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_1749, *PTAG_UNNAMED_1749;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_1750, *PTAG_UNNAMED_1750;

enum EDatabaseIdsSpecial
{
  x_edbisNonexistent = 0,
  x_edbisRemote = 0,
  x_edbisMax = 1,
};

class BitManip<unsigned __int64>
{
}; /* size: 0x0001 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 1,
  NRemainder = 14,
} TAG_UNNAMED_1751, *PTAG_UNNAMED_1751;

typedef struct _CACHE_RELATIONSHIP
{
  /* 0x0000 */ unsigned char Level;
  /* 0x0001 */ unsigned char Associativity;
  /* 0x0002 */ unsigned short LineSize;
  /* 0x0004 */ unsigned long CacheSize;
  /* 0x0008 */ enum _PROCESSOR_CACHE_TYPE Type;
  /* 0x000c */ unsigned char Reserved[20];
  /* 0x0020 */ struct _GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP; /* size: 0x0030 */

struct IRpcChannelBuffer
{
}; /* size: 0x0008 */

class CAutoP<XE_IDecoder>
{
}; /* size: 0x0008 */

typedef enum
{
  Serialize = 0,
} TAG_UNNAMED_1752, *PTAG_UNNAMED_1752;

struct val_context
{
  /* 0x0000 */ int valuelen;
  /* 0x0004 */ long Padding_529;
  /* 0x0008 */ void* value_context;
  /* 0x0010 */ void* val_buff_ptr;
}; /* size: 0x0018 */

struct CloudPartitionCopyStatsSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 7,
  NRemainder = 14,
} TAG_UNNAMED_1753, *PTAG_UNNAMED_1753;

typedef enum
{
  locationIdx = 0,
  expected_stateIdx = 1,
  current_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1754, *PTAG_UNNAMED_1754;

class Spinlock<193,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1755, *PTAG_UNNAMED_1755;

class DmpPointer<SystemThread>
{
  /* 0x0000 */ class SystemThread* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1756, *PTAG_UNNAMED_1756;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1757, *PTAG_UNNAMED_1757;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1758, *PTAG_UNNAMED_1758;

struct tagPIXELFORMATDESCRIPTOR
{
  /* 0x0000 */ unsigned short nSize;
  /* 0x0002 */ unsigned short nVersion;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned char iPixelType;
  /* 0x0009 */ unsigned char cColorBits;
  /* 0x000a */ unsigned char cRedBits;
  /* 0x000b */ unsigned char cRedShift;
  /* 0x000c */ unsigned char cGreenBits;
  /* 0x000d */ unsigned char cGreenShift;
  /* 0x000e */ unsigned char cBlueBits;
  /* 0x000f */ unsigned char cBlueShift;
  /* 0x0010 */ unsigned char cAlphaBits;
  /* 0x0011 */ unsigned char cAlphaShift;
  /* 0x0012 */ unsigned char cAccumBits;
  /* 0x0013 */ unsigned char cAccumRedBits;
  /* 0x0014 */ unsigned char cAccumGreenBits;
  /* 0x0015 */ unsigned char cAccumBlueBits;
  /* 0x0016 */ unsigned char cAccumAlphaBits;
  /* 0x0017 */ unsigned char cDepthBits;
  /* 0x0018 */ unsigned char cStencilBits;
  /* 0x0019 */ unsigned char cAuxBuffers;
  /* 0x001a */ unsigned char iLayerType;
  /* 0x001b */ unsigned char bReserved;
  /* 0x001c */ unsigned long dwLayerMask;
  /* 0x0020 */ unsigned long dwVisibleMask;
  /* 0x0024 */ unsigned long dwDamageMask;
}; /* size: 0x0028 */

struct tagEMRPIXELFORMAT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct tagPIXELFORMATDESCRIPTOR pfd;
}; /* size: 0x0030 */

class CAutoBase<XE_LoadedLibrary>
{
  /* 0x0000 */ struct XE_LoadedLibrary* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1759, *PTAG_UNNAMED_1759;

typedef struct _ENUM_SERVICE_STATUS_PROCESSA
{
  /* 0x0000 */ char* lpServiceName;
  /* 0x0008 */ char* lpDisplayName;
  /* 0x0010 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess;
  /* 0x0034 */ long __PADDING__[1];
} ENUM_SERVICE_STATUS_PROCESSA, *PENUM_SERVICE_STATUS_PROCESSA; /* size: 0x0038 */

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1760, *PTAG_UNNAMED_1760;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 27,
} TAG_UNNAMED_1761, *PTAG_UNNAMED_1761;

enum XE_Buffer::ReservationResult
{
  RESERVE_OK = 0,
  RESERVE_OUT_OF_SPACE = 1,
  RESERVE_TOO_LARGE = 2,
};

struct IXMLDOMCDATASection
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1762, *PTAG_UNNAMED_1762;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 44,
} TAG_UNNAMED_1763, *PTAG_UNNAMED_1763;

struct ISynchronizeContainer
{
}; /* size: 0x0008 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1764, *PTAG_UNNAMED_1764;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1765, *PTAG_UNNAMED_1765;

enum EFeatureSwitches
{
  x_FeatureSwitch_AckNode0MsgsAfterFirstSubMsg = 0,
  x_FeatureSwitch_AppAuditingConfigurationApi = 1,
  x_FeatureSwitch_AppAuditingDDL = 2,
  x_FeatureSwitch_ArbitrationInconclusiveFix = 3,
  x_FeatureSwitch_BackupEncryption = 4,
  x_FeatureSwitch_BrandProtectionCleanup = 5,
  x_FeatureSwitch_BrandProtectionLogBackup = 6,
  x_FeatureSwitch_BufferPoolRG = 7,
  x_FeatureSwitch_CEProposalQuorumAcceptance = 8,
  x_FeatureSwitch_CollectionAgentBackupBlobUploader = 9,
  x_FeatureSwitch_CollectionAgentDumpBlobUploader = 10,
  x_FeatureSwitch_CollectionAgentWatchdogSourceDataLagScenario = 11,
  x_FeatureSwitch_ConnectionResiliency = 12,
  x_FeatureSwitch_CreateFreeDb = 13,
  x_FeatureSwitch_CreatePremiumDb = 14,
  x_FeatureSwitch_DeferredDropServerGC = 15,
  x_FeatureSwitch_DeferredDropServerQuotaGC = 16,
  x_FeatureSwitch_DeferredDropServers = 17,
  x_FeatureSwitch_DosGuardDenyList = 18,
  x_FeatureSwitch_FastStatsRefresh = 19,
  x_FeatureSwitch_FedAuthAADTaskRetry = 20,
  x_FeatureSwitch_FedAuthS2S = 21,
  x_FeatureSwitch_FederationDR = 22,
  x_FeatureSwitch_FlushOnRecycleReplica = 23,
  x_FeatureSwitch_FreeDbGC = 24,
  x_FeatureSwitch_GpmServiceV2 = 25,
  x_FeatureSwitch_IORG = 26,
  x_FeatureSwitch_IORGSlo = 27,
  x_FeatureSwitch_InformRemoteSideOnForcedTermination = 28,
  x_FeatureSwitch_IpAddressSeparation = 29,
  x_FeatureSwitch_JamForcePort3000 = 30,
  x_FeatureSwitch_JamLivenessCheck = 31,
  x_FeatureSwitch_JamOutOfFabric = 32,
  x_FeatureSwitch_JamOutOfFabricForce = 33,
  x_FeatureSwitch_JamServiceProtocolV2 = 34,
  x_FeatureSwitch_JamUseWcfChannelForJobAgentNode = 35,
  x_FeatureSwitch_JobContractVersionValidation = 36,
  x_FeatureSwitch_JobNotificationThrottling = 37,
  x_FeatureSwitch_LBUtilRunSecondary = 38,
  x_FeatureSwitch_LSWDResetHealthProperty = 39,
  x_FeatureSwitch_ManageLockPriority = 40,
  x_FeatureSwitch_MultithreadBackupJob = 41,
  x_FeatureSwitch_PhysicalSeeding = 42,
  x_FeatureSwitch_PmDynamicGracefulPeriod = 43,
  x_FeatureSwitch_PrimaryDataAutoBackup = 44,
  x_FeatureSwitch_PrimaryServerSubscriptionDisabled = 45,
  x_FeatureSwitch_PrimaryServerSubscriptionReadOnly = 46,
  x_FeatureSwitch_QueryGpmReadsUsingSecondaryMNs = 47,
  x_FeatureSwitch_QueryStore = 48,
  x_FeatureSwitch_QueryStoreWhitelistingActive = 49,
  x_FeatureSwitch_RdfeSubRegionCheck = 50,
  x_FeatureSwitch_RdfeSubRegionCheckForCreateServer = 51,
  x_FeatureSwitch_ReconfigEvents = 52,
  x_FeatureSwitch_RendezvousConnRefusedFix = 53,
  x_FeatureSwitch_RendezvousNoResendOnSyncThreadFix = 54,
  x_FeatureSwitch_ResourceReservationBilling = 55,
  x_FeatureSwitch_ResourceStatsV2 = 56,
  x_FeatureSwitch_RestoreServiceV2 = 57,
  x_FeatureSwitch_SEReplQueueThrottling = 58,
  x_FeatureSwitch_SampleAzureFeature = 59,
  x_FeatureSwitch_SampleAzureGoldenBitsFeature = 60,
  x_FeatureSwitch_SampleBoxFeature = 61,
  x_FeatureSwitch_SelfServiceRG = 62,
  x_FeatureSwitch_SendPlainTextIPToMS = 63,
  x_FeatureSwitch_SloFillFactor = 64,
  x_FeatureSwitch_SloMetadataMaintenance = 65,
  x_FeatureSwitch_SloPlaMostLoadedNodeAlgorithm = 66,
  x_FeatureSwitch_Sptracking = 67,
  x_FeatureSwitch_SqlHealthMonitorChecker = 68,
  x_FeatureSwitch_SqlHealthMonitorCheckerCloseOnFailure = 69,
  x_FeatureSwitch_StaggerPdbFullBackups = 70,
  x_FeatureSwitch_SubClusterMaintenanceDueToPLACapsViolation = 71,
  x_FeatureSwitch_TransactionalPlacementAdvisorFeature = 72,
  x_FeatureSwitch_UpdateSloProgressNotifications = 73,
  x_FeatureSwitch_UploaderSelfRestart = 74,
  x_FeatureSwitch_UseGenericPrimaryGeoProxyAddress = 75,
  x_FeatureSwitch_UseLongerResendIntervalForUpdateSloSecondary = 76,
  x_FeatureSwitch_UseSeparateRecurringTasksProcess = 77,
  x_FeatureSwitch_WaitForDeleteReplicaWithoutPolling = 78,
  x_FeatureSwitch_XCMoveVersion3 = 79,
  x_FeatureSwitch_XStoreFiles = 80,
  x_FeatureSwitch_XStoreGenericFiles = 81,
  LAST_FEATURE_ENUM = 82,
};

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1766, *PTAG_UNNAMED_1766;

typedef enum
{
  database_idIdx = 0,
  local_brick_idIdx = 1,
  remote_brick_idIdx = 2,
  request_typeIdx = 3,
  database_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1767, *PTAG_UNNAMED_1767;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1768, *PTAG_UNNAMED_1768;

class SpinlockHolder<319,1,1>;

enum ESessionKillReasonclass DmpPointer<__int64>
{
  /* 0x0000 */ __int64* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1769, *PTAG_UNNAMED_1769;

class XeSqlPkg::add_file_in_master
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_530[143];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int is_log_fileOffset;
    /* 0x0000 */ const int file_logical_nameOffset;
    /* 0x0000 */ const int file_physical_nameOffset;
  }; /* size: 0x0025 */
}; /* size: 0x0268 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1770, *PTAG_UNNAMED_1770;

class DmpListIterator<SystemThread,8,160,SEList<SystemThread,160>,8,65535>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1771, *PTAG_UNNAMED_1771;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1772, *PTAG_UNNAMED_1772;

class AutoSpinlockHolder<169,3,1>;

typedef struct __vc_attributes::library_blockAttribute
{
} _vc_attributes::library_blockAttribute, *P_vc_attributes::library_blockAttribute; /* size: 0x0001 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1773, *PTAG_UNNAMED_1773;

class DmpPointer<TList<SOS_Node,SystemThread,160,TListSLock> >
{
  /* 0x0000 */ class TList<SOS_Node,SystemThread,160,TListSLock>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1774, *PTAG_UNNAMED_1774;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_1775, *PTAG_UNNAMED_1775;

struct UDATE
{
  /* 0x0000 */ struct _SYSTEMTIME st;
  /* 0x0010 */ unsigned short wDayOfYear;
}; /* size: 0x0012 */

typedef enum
{
  locationIdx = 0,
  expected_stateIdx = 1,
  current_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1776, *PTAG_UNNAMED_1776;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1777, *PTAG_UNNAMED_1777;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1778, *PTAG_UNNAMED_1778;

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1779, *PTAG_UNNAMED_1779;

typedef struct _QUOTA_LIMITS
{
  /* 0x0000 */ unsigned __int64 PagedPoolLimit;
  /* 0x0008 */ unsigned __int64 NonPagedPoolLimit;
  /* 0x0010 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x0018 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0020 */ unsigned __int64 PagefileLimit;
  /* 0x0028 */ union _LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS; /* size: 0x0030 */

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  undo_responses_receivedIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1780, *PTAG_UNNAMED_1780;

class Spinlock<88,12,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1781, *PTAG_UNNAMED_1781;

typedef struct _SYSTEM_PROCESS_ID_INFORMATION
{
  /* 0x0000 */ void* ProcessId;
  /* 0x0008 */ struct _UNICODE_STRING ImageName;
} SYSTEM_PROCESS_ID_INFORMATION, *PSYSTEM_PROCESS_ID_INFORMATION; /* size: 0x0018 */

typedef enum
{
  Value = 3,
} TAG_UNNAMED_1782, *PTAG_UNNAMED_1782;

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1783, *PTAG_UNNAMED_1783;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1784, *PTAG_UNNAMED_1784;

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1785, *PTAG_UNNAMED_1785;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1786, *PTAG_UNNAMED_1786;

class AutoSpinlockHolder<61,16,1>;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1787, *PTAG_UNNAMED_1787;

typedef struct _TOKEN_LINKED_TOKEN
{
  /* 0x0000 */ void* LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_1788, *PTAG_UNNAMED_1788;

typedef enum
{
  hardened_log_block_idIdx = 0,
  hardened_lsnIdx = 1,
  message_log_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1789, *PTAG_UNNAMED_1789;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1790, *PTAG_UNNAMED_1790;

enum XE_TargetEntry::CreateFlags
{
  TCF_None = 0,
  TCF_WithProxies = 1,
};

class CAutoBase<XE_LogSpecs::LogSpec>
{
  /* 0x0000 */ class XE_LogSpecs::LogSpec* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  Serialize = 1,
} TAG_UNNAMED_1791, *PTAG_UNNAMED_1791;

typedef struct _RPC_SECURITY_QOS_V2_W
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Capabilities;
  /* 0x0008 */ unsigned long IdentityTracking;
  /* 0x000c */ unsigned long ImpersonationType;
  /* 0x0010 */ unsigned long AdditionalSecurityInfoType;
  /* 0x0014 */ long Padding_531;
  union
  {
    /* 0x0018 */ struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
  } /* size: 0x0008 */ u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W; /* size: 0x0020 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  epochIdx = 2,
  csnIdx = 3,
  ms_versionIdx = 4,
  catchup_return_codeIdx = 5,
  establish_catchup_return_codeIdx = 6,
  remote_versionIdx = 7,
  remote_portIdx = 8,
  hint_stream_idIdx = 9,
  remote_clusterIdx = 10,
  remote_serverIdx = 11,
  remote_databaseIdx = 12,
  remote_app_nameIdx = 13,
  remote_table_groupIdx = 14,
  remote_low_keyIdx = 15,
  remote_high_keyIdx = 16,
  LastField = 17,
} TAG_UNNAMED_1792, *PTAG_UNNAMED_1792;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 8,
  VldEddOffset = 8,
  BufSize = 103,
} TAG_UNNAMED_1793, *PTAG_UNNAMED_1793;

class SpinlockHolder<70,16,1>;

typedef enum
{
  sent_or_notIdx = 0,
  message_idIdx = 1,
  function_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1794, *PTAG_UNNAMED_1794;

class XE_ResolvedObject<XEPredicateCompare>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEPredicateCompare* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEPredicateCompare* m_Object;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 17,
} TAG_UNNAMED_1795, *PTAG_UNNAMED_1795;

struct IInternetZoneManager
{
}; /* size: 0x0008 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  timeoutIdx = 2,
  read_only_databaseIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1796, *PTAG_UNNAMED_1796;

typedef enum
{
  numa_node_idIdx = 0,
  warm_thresholdIdx = 1,
  cold_thresholdIdx = 2,
  number_evictions_to_bpool_extensionIdx = 3,
  number_evictions_from_bpoolIdx = 4,
  PagesUnassignedIdx = 5,
  PagesStolenOrFreeIdx = 6,
  PagesHotIdx = 7,
  PagesNotOnLRUIdx = 8,
  PagesUsedOnceIdx = 9,
  PagesSpilledIdx = 10,
  PagesBusyIoIdx = 11,
  PagesAllocationRequestIdx = 12,
  PagesSimulatedIdx = 13,
  LastField = 14,
} TAG_UNNAMED_1797, *PTAG_UNNAMED_1797;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 14,
} TAG_UNNAMED_1798, *PTAG_UNNAMED_1798;

struct IViewObject2
{
}; /* size: 0x0008 */

class SpinlockHolder<155,3,1>;

class XE_ResolvedObject<XEPredicateSource>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEPredicateSource* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEPredicateSource* m_Object;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 6,
  VldEddOffset = 1,
  BufSize = 58,
} TAG_UNNAMED_1799, *PTAG_UNNAMED_1799;

typedef struct _FIBER
{
  /* 0x0000 */ void* FiberData;
  /* 0x0008 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0010 */ void* StackBase;
  /* 0x0018 */ void* StackLimit;
  /* 0x0020 */ void* DeallocationStack;
  /* 0x0028 */ long Padding_532[2];
  /* 0x0030 */ struct _CONTEXT FiberContext;
} FIBER, *PFIBER; /* size: 0x0500 */

typedef enum
{
  epochIdx = 0,
  csnIdx = 1,
  log_to_scan_kbIdx = 2,
  remote_versionIdx = 3,
  remote_portIdx = 4,
  start_lsnIdx = 5,
  end_lsnIdx = 6,
  remote_clusterIdx = 7,
  remote_serverIdx = 8,
  remote_databaseIdx = 9,
  remote_app_nameIdx = 10,
  remote_table_groupIdx = 11,
  remote_low_keyIdx = 12,
  remote_high_keyIdx = 13,
  LastField = 14,
} TAG_UNNAMED_1800, *PTAG_UNNAMED_1800;

class XeDvmPkg::dvm_work_item_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_533[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class SESimpleObjectPoolStats
{
  /* 0x0000 */ unsigned int m_primaryPoolCapacity;
  /* 0x0004 */ unsigned int m_secondaryPoolCapacity;
  /* 0x0008 */ double m_avgAllocationCount;
  /* 0x0010 */ unsigned int m_maxAllocationCount;
  /* 0x0014 */ long Padding_534;
  /* 0x0018 */ unsigned __int64 m_numSamples;
  /* 0x0020 */ unsigned int m_currPoolSize;
  /* 0x0024 */ unsigned int m_currAllocationCount;
}; /* size: 0x0028 */

class CMemPartitioned<CMemThread<CMemDbg<CMemObj> > >
{
  /* 0x0000 */ long Padding_535[352];
  /* 0x0580 */ class IMemObj** m_partitionMemObj;
  /* 0x0588 */ int m_numberOfPartitions;
  /* 0x058c */ enum PartitioningType m_partType;
  /* 0x0590 */ enum AllocatorType m_allocatorType;
  /* 0x0594 */ long Padding_536;
  /* 0x0598 */ __int64 m_cPages;
}; /* size: 0x05a0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1801, *PTAG_UNNAMED_1801;

typedef enum
{
  database_idIdx = 0,
  flushed_logIdx = 1,
  end_of_logIdx = 2,
  log_truncation_blockIdx = 3,
  hadr_truncation_blockIdx = 4,
  redo_pointIdx = 5,
  group_idIdx = 6,
  replica_idIdx = 7,
  ag_database_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1802, *PTAG_UNNAMED_1802;

struct tagDRAWITEMSTRUCT
{
  /* 0x0000 */ unsigned int CtlType;
  /* 0x0004 */ unsigned int CtlID;
  /* 0x0008 */ unsigned int itemID;
  /* 0x000c */ unsigned int itemAction;
  /* 0x0010 */ unsigned int itemState;
  /* 0x0014 */ long Padding_537;
  /* 0x0018 */ struct HWND__* hwndItem;
  /* 0x0020 */ struct HDC__* hDC;
  /* 0x0028 */ struct tagRECT rcItem;
  /* 0x0038 */ unsigned __int64 itemData;
}; /* size: 0x0040 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  content_delete_flagsIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1803, *PTAG_UNNAMED_1803;

union std::_String_val<char,std::allocator<char> >::_Bxty
{
  union
  {
    /* 0x0000 */ char _Buf[16];
    /* 0x0000 */ char* _Ptr;
    /* 0x0000 */ char _Alias[16];
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

class std::allocator<char>
{
}; /* size: 0x0001 */

class std::_String_val<char,std::allocator<char> >
{
  /* 0x0000 */ union std::_String_val<char,std::allocator<char> >::_Bxty _Bx;
  /* 0x0010 */ unsigned __int64 _Mysize;
  /* 0x0018 */ unsigned __int64 _Myres;
  /* 0x0020 */ class std::allocator<char> _Alval;
}; /* size: 0x0028 */

class DmpPointer<SEList<SOS_RingBuffer,0> >
{
  /* 0x0000 */ class SEList<SOS_RingBuffer,0>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 13,
} TAG_UNNAMED_1804, *PTAG_UNNAMED_1804;

struct std::unary_function<std::error_condition,unsigned __int64>
{
}; /* size: 0x0001 */

class XeSqlPkg::latch_demoted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_538[140];
      /* 0x0240 */ unsigned char m_buf[45];
    }; /* size: 0x003d */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0270 */

enum BMLFailures
{
  BML_START = 0,
  BML_CREATETOOLHELPSNPSHOT_FAILED = 1,
  BML_POPULATE_FAILED = 2,
  BML_HEAPALLOC_FAILED = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 22,
} TAG_UNNAMED_1805, *PTAG_UNNAMED_1805;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 8,
  VldEddOffset = 4,
  BufSize = 84,
} TAG_UNNAMED_1806, *PTAG_UNNAMED_1806;

typedef enum
{
  ListElementOffset = 32,
  NextPtrOffset = 8,
} TAG_UNNAMED_1807, *PTAG_UNNAMED_1807;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1808, *PTAG_UNNAMED_1808;

typedef struct __vc_attributes::satypeAttribute
{
  /* 0x0000 */ const char* type;
} _vc_attributes::satypeAttribute, *P_vc_attributes::satypeAttribute; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_1809, *PTAG_UNNAMED_1809;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  lock_modeIdx = 2,
  transaction_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1810, *PTAG_UNNAMED_1810;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_1811, *PTAG_UNNAMED_1811;

typedef enum
{
  topologyIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1812, *PTAG_UNNAMED_1812;

class SpinlockBase
{
  union
  {
    /* 0x0000 */ long m_lock;
    /* 0x0000 */ const int SHORT_BACKOFF;
    /* 0x0000 */ const int LONG_BACKOFF;
    /* 0x0000 */ const __int64 LONG_BACKOFF_WAIT_MS;
  }; /* size: 0x0008 */
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 19,
} TAG_UNNAMED_1813, *PTAG_UNNAMED_1813;

typedef enum
{
  ListElementOffset = 40,
  NextPtrOffset = 8,
} TAG_UNNAMED_1814, *PTAG_UNNAMED_1814;

struct XE_StaticPackage<64>::LocaleEntry
{
  /* 0x0000 */ unsigned long locale;
  /* 0x0004 */ long Padding_539;
  /* 0x0008 */ struct HINSTANCE__* hModule;
}; /* size: 0x0010 */

class XE_StaticPackage<64>
{
  /* 0x0000 */ long Padding_540[2];
  /* 0x0008 */ struct XEPackageMetadata* m_pMetadata;
  /* 0x0010 */ struct XBitmap<StaticStorage<64> >* const m_enabled;
  /* 0x0018 */ wchar_t m_baseRllPath[260];
  /* 0x0220 */ struct XE_StaticPackage<64>::LocaleEntry m_CurrentLocale;
  /* 0x0230 */ void* m_localeLock;
  /* 0x0238 */ void* m_pfnLoadString /* function */;
  /* 0x0240 */ struct HINSTANCE__* m_hUser32;
}; /* size: 0x0248 */

typedef enum
{
  stateIdx = 0,
  object_addressIdx = 1,
  api_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1815, *PTAG_UNNAMED_1815;

typedef enum
{
  logical_readsIdx = 0,
  physical_readsIdx = 1,
  remote_versionIdx = 2,
  remote_portIdx = 3,
  remote_cluster_nameIdx = 4,
  remote_server_nameIdx = 5,
  remote_app_nameIdx = 6,
  remote_table_group_nameIdx = 7,
  remote_low_keyIdx = 8,
  remote_high_keyIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1816, *PTAG_UNNAMED_1816;

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  old_weightIdx = 2,
  new_weightIdx = 3,
  new_positionIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1817, *PTAG_UNNAMED_1817;

typedef struct _MALLOC_FREE_STRUCT
{
  /* 0x0000 */ void* pfnAllocate /* function */;
  /* 0x0008 */ void* pfnFree /* function */;
} MALLOC_FREE_STRUCT, *PMALLOC_FREE_STRUCT; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 6,
  VldEddOffset = 3,
  BufSize = 74,
} TAG_UNNAMED_1818, *PTAG_UNNAMED_1818;

struct XE_TArray<XECustomizableAttribute,3>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[3];
}; /* size: 0x00a8 */

struct XE_TEvent<4,3,12>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,3> m_customizableAttr;
  /* 0x0148 */ struct XE_TArray<XEDataAttribute,12> m_dynamicAttr;
  /* 0x0328 */ struct XEEvent m_event;
}; /* size: 0x0370 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1819, *PTAG_UNNAMED_1819;

class DumpTListIterator<GroupList,512>
{
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 32,
} TAG_UNNAMED_1820, *PTAG_UNNAMED_1820;

class XeSqlPkg::hadr_scan_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_541[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int target_stateOffset;
    /* 0x0000 */ const int hadr_database_idOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
    /* 0x0000 */ const int availability_group_resource_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

enum XeSqlPkg::preconnect_starting::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  non_draining_copyIdx = 2,
  remote_versionIdx = 3,
  remote_portIdx = 4,
  remote_clusterIdx = 5,
  remote_serverIdx = 6,
  remote_databaseIdx = 7,
  remote_app_nameIdx = 8,
  remote_table_groupIdx = 9,
  remote_low_keyIdx = 10,
  remote_high_keyIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1821, *PTAG_UNNAMED_1821;

struct IInternet
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 26,
} TAG_UNNAMED_1822, *PTAG_UNNAMED_1822;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 7,
  VldEddOffset = 4,
  BufSize = 76,
} TAG_UNNAMED_1823, *PTAG_UNNAMED_1823;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_1824, *PTAG_UNNAMED_1824;

class TSinglyLinkedList<XE_ConfigCrc>
{
}; /* size: 0x0008 */

class IfNullTypeZeroElseOne<SystemAffinity>
{
}; /* size: 0x0001 */

typedef enum
{
  pairing_database_idIdx = 0,
  pairing_database_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1825, *PTAG_UNNAMED_1825;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1826, *PTAG_UNNAMED_1826;

class XE_SessionMetadata::PackageEnumerator
{
  /* 0x0000 */ long Padding_542[8];
  /* 0x0020 */ const class XE_SessionMetadata* m_pMdSource;
  /* 0x0028 */ unsigned short m_packageId;
}; /* size: 0x0030 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  replica_subtypeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1827, *PTAG_UNNAMED_1827;

struct IBindCtx
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 10,
} TAG_UNNAMED_1828, *PTAG_UNNAMED_1828;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 11,
} TAG_UNNAMED_1829, *PTAG_UNNAMED_1829;

typedef enum
{
  ElementOffset = 8,
  NextPtrOffset = 8,
  AnchorOffset = 8,
} TAG_UNNAMED_1830, *PTAG_UNNAMED_1830;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 17,
} TAG_UNNAMED_1831, *PTAG_UNNAMED_1831;

enum vc_attributes::AccessType
{
  NoAccess = 0,
  Read = 1,
  Write = 2,
  ReadWrite = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_1832, *PTAG_UNNAMED_1832;

class std::numeric_limits<unsigned short>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  prepare_full_commit_modeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1833, *PTAG_UNNAMED_1833;

struct tagCAUB
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_543;
  /* 0x0008 */ unsigned char* pElems;
}; /* size: 0x0010 */

struct tagCAI
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_544;
  /* 0x0008 */ short* pElems;
}; /* size: 0x0010 */

struct tagCAUI
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_545;
  /* 0x0008 */ unsigned short* pElems;
}; /* size: 0x0010 */

struct tagCAL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_546;
  /* 0x0008 */ long* pElems;
}; /* size: 0x0010 */

struct tagCAH
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_547;
  /* 0x0008 */ union _LARGE_INTEGER* pElems;
}; /* size: 0x0010 */

struct tagCAUH
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_548;
  /* 0x0008 */ union _ULARGE_INTEGER* pElems;
}; /* size: 0x0010 */

struct tagCAFLT
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_549;
  /* 0x0008 */ float* pElems;
}; /* size: 0x0010 */

struct tagCADBL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_550;
  /* 0x0008 */ double* pElems;
}; /* size: 0x0010 */

struct tagCABOOL
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_551;
  /* 0x0008 */ short* pElems;
}; /* size: 0x0010 */

struct tagCASCODE
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_552;
  /* 0x0008 */ long* pElems;
}; /* size: 0x0010 */

struct tagCADATE
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_553;
  /* 0x0008 */ double* pElems;
}; /* size: 0x0010 */

struct tagCAFILETIME
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_554;
  /* 0x0008 */ struct _FILETIME* pElems;
}; /* size: 0x0010 */

struct tagCACLSID
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_555;
  /* 0x0008 */ struct _GUID* pElems;
}; /* size: 0x0010 */

struct tagCACLIPDATA
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_556;
  /* 0x0008 */ struct tagCLIPDATA* pElems;
}; /* size: 0x0010 */

struct tagCABSTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_557;
  /* 0x0008 */ wchar_t** pElems;
}; /* size: 0x0010 */

struct tagCABSTRBLOB
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_558;
  /* 0x0008 */ struct tagBSTRBLOB* pElems;
}; /* size: 0x0010 */

struct tagCALPSTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_559;
  /* 0x0008 */ char** pElems;
}; /* size: 0x0010 */

struct tagCALPWSTR
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_560;
  /* 0x0008 */ wchar_t** pElems;
}; /* size: 0x0010 */

struct tagPROPVARIANT
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short vt;
      /* 0x0002 */ unsigned short wReserved1;
      /* 0x0004 */ unsigned short wReserved2;
      /* 0x0006 */ unsigned short wReserved3;
      union
      {
        /* 0x0008 */ char cVal;
        /* 0x0008 */ unsigned char bVal;
        /* 0x0008 */ short iVal;
        /* 0x0008 */ unsigned short uiVal;
        /* 0x0008 */ long lVal;
        /* 0x0008 */ unsigned long ulVal;
        /* 0x0008 */ int intVal;
        /* 0x0008 */ unsigned int uintVal;
        /* 0x0008 */ union _LARGE_INTEGER hVal;
        /* 0x0008 */ union _ULARGE_INTEGER uhVal;
        /* 0x0008 */ float fltVal;
        /* 0x0008 */ double dblVal;
        /* 0x0008 */ short boolVal;
        /* 0x0008 */ long scode;
        /* 0x0008 */ union tagCY cyVal;
        /* 0x0008 */ double date;
        /* 0x0008 */ struct _FILETIME filetime;
        /* 0x0008 */ struct _GUID* puuid;
        /* 0x0008 */ struct tagCLIPDATA* pclipdata;
        /* 0x0008 */ wchar_t* bstrVal;
        /* 0x0008 */ struct tagBSTRBLOB bstrblobVal;
        /* 0x0008 */ struct tagBLOB blob;
        /* 0x0008 */ char* pszVal;
        /* 0x0008 */ wchar_t* pwszVal;
        /* 0x0008 */ struct IUnknown* punkVal;
        /* 0x0008 */ struct IDispatch* pdispVal;
        /* 0x0008 */ struct IStream* pStream;
        /* 0x0008 */ struct IStorage* pStorage;
        /* 0x0008 */ struct tagVersionedStream* pVersionedStream;
        /* 0x0008 */ struct tagSAFEARRAY* parray;
        /* 0x0008 */ struct tagCAC cac;
        /* 0x0008 */ struct tagCAUB caub;
        /* 0x0008 */ struct tagCAI cai;
        /* 0x0008 */ struct tagCAUI caui;
        /* 0x0008 */ struct tagCAL cal;
        /* 0x0008 */ struct tagCAUL caul;
        /* 0x0008 */ struct tagCAH cah;
        /* 0x0008 */ struct tagCAUH cauh;
        /* 0x0008 */ struct tagCAFLT caflt;
        /* 0x0008 */ struct tagCADBL cadbl;
        /* 0x0008 */ struct tagCABOOL cabool;
        /* 0x0008 */ struct tagCASCODE cascode;
        /* 0x0008 */ struct tagCACY cacy;
        /* 0x0008 */ struct tagCADATE cadate;
        /* 0x0008 */ struct tagCAFILETIME cafiletime;
        /* 0x0008 */ struct tagCACLSID cauuid;
        /* 0x0008 */ struct tagCACLIPDATA caclipdata;
        /* 0x0008 */ struct tagCABSTR cabstr;
        /* 0x0008 */ struct tagCABSTRBLOB cabstrblob;
        /* 0x0008 */ struct tagCALPSTR calpstr;
        /* 0x0008 */ struct tagCALPWSTR calpwstr;
        /* 0x0008 */ struct tagCAPROPVARIANT capropvar;
        /* 0x0008 */ char* pcVal;
        /* 0x0008 */ unsigned char* pbVal;
        /* 0x0008 */ short* piVal;
        /* 0x0008 */ unsigned short* puiVal;
        /* 0x0008 */ long* plVal;
        /* 0x0008 */ unsigned long* pulVal;
        /* 0x0008 */ int* pintVal;
        /* 0x0008 */ unsigned int* puintVal;
        /* 0x0008 */ float* pfltVal;
        /* 0x0008 */ double* pdblVal;
        /* 0x0008 */ short* pboolVal;
        /* 0x0008 */ struct tagDEC* pdecVal;
        /* 0x0008 */ long* pscode;
        /* 0x0008 */ union tagCY* pcyVal;
        /* 0x0008 */ double* pdate;
        /* 0x0008 */ wchar_t** pbstrVal;
        /* 0x0008 */ struct IUnknown** ppunkVal;
        /* 0x0008 */ struct IDispatch** ppdispVal;
        /* 0x0008 */ struct tagSAFEARRAY** pparray;
        /* 0x0008 */ struct tagPROPVARIANT* pvarVal;
      }; /* size: 0x0010 */
    }; /* size: 0x0018 */
    struct
    {
      /* 0x0000 */ struct tagDEC decVal;
      /* 0x0010 */ long __PADDING__[2];
    }; /* size: 0x0018 */
  }; /* size: 0x0018 */
}; /* size: 0x0018 */

struct ColumnStoreHashtableSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 11,
} TAG_UNNAMED_1834, *PTAG_UNNAMED_1834;

class XeSqlPkg::batch_hash_table_build_bailout
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_561[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int memory_limit_kbOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  sequence_numberIdx = 0,
  scan_generationIdx = 1,
  message_sizeIdx = 2,
  root_idIdx = 3,
  data_offsetIdx = 4,
  data_sizeIdx = 5,
  data_flagsIdx = 6,
  transaction_idIdx = 7,
  file_pathIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1835, *PTAG_UNNAMED_1835;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  add_as_downIdx = 2,
  deferred_commitIdx = 3,
  continuous_copyIdx = 4,
  quorum_setIdx = 5,
  remote_versionIdx = 6,
  remote_portIdx = 7,
  additional_hashIdx = 8,
  remote_clusterIdx = 9,
  remote_serverIdx = 10,
  remote_databaseIdx = 11,
  remote_app_nameIdx = 12,
  remote_table_groupIdx = 13,
  remote_low_keyIdx = 14,
  remote_high_keyIdx = 15,
  filtering_low_keyIdx = 16,
  filtering_high_keyIdx = 17,
  LastField = 18,
} TAG_UNNAMED_1836, *PTAG_UNNAMED_1836;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_1837, *PTAG_UNNAMED_1837;

typedef enum
{
  log_block_idIdx = 0,
  file_idIdx = 1,
  availability_group_idIdx = 2,
  availability_replica_idIdx = 3,
  database_replica_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1838, *PTAG_UNNAMED_1838;

typedef enum
{
  versionIdx = 0,
  destination_type_groupIdx = 1,
  message_handleIdx = 2,
  message_typeIdx = 3,
  message_flagsIdx = 4,
  sequence_numberIdx = 5,
  ack_sequence_numberIdx = 6,
  message_countIdx = 7,
  destination_idIdx = 8,
  stream_idIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1839, *PTAG_UNNAMED_1839;

typedef enum
{
  Log_RemainingIdx = 0,
  Total_LogIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1840, *PTAG_UNNAMED_1840;

class SOS_BlockersEnumeratorCreator
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 46,
} TAG_UNNAMED_1841, *PTAG_UNNAMED_1841;

struct IProvideRuntimeContext
{
}; /* size: 0x0008 */

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  is_eosIdx = 3,
  query_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1842, *PTAG_UNNAMED_1842;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 46,
} TAG_UNNAMED_1843, *PTAG_UNNAMED_1843;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1844, *PTAG_UNNAMED_1844;

typedef enum
{
  stateIdx = 0,
  versionIdx = 1,
  destination_type_groupIdx = 2,
  message_handleIdx = 3,
  message_typeIdx = 4,
  message_flagsIdx = 5,
  sequence_numberIdx = 6,
  ack_sequence_numberIdx = 7,
  message_countIdx = 8,
  destination_idIdx = 9,
  stream_idIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1845, *PTAG_UNNAMED_1845;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 2,
  VldEddOffset = 8,
  BufSize = 50,
} TAG_UNNAMED_1846, *PTAG_UNNAMED_1846;

typedef enum
{
  remote_versionIdx = 0,
  remote_portIdx = 1,
  remote_cluster_nameIdx = 2,
  remote_server_nameIdx = 3,
  remote_app_nameIdx = 4,
  remote_table_group_nameIdx = 5,
  remote_low_keyIdx = 6,
  remote_high_keyIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1847, *PTAG_UNNAMED_1847;

struct XEPredicateCompareValidate
{
  /* 0x0000 */ const struct XEEvent* m_pEvent;
  /* 0x0008 */ const struct XEDataAttribute* m_pField;
  /* 0x0010 */ const struct XEPredicateSource* m_pSource;
  /* 0x0018 */ struct XEPredicateValue m_comperand;
}; /* size: 0x0028 */

class XeSqlPkg::database_option_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_562[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int option_typeOffset;
    /* 0x0000 */ const int previous_valueOffset;
    /* 0x0000 */ const int new_valueOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1848, *PTAG_UNNAMED_1848;

typedef enum
{
  message_idIdx = 0,
  function_nameIdx = 1,
  descriptionIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1849, *PTAG_UNNAMED_1849;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_1850, *PTAG_UNNAMED_1850;

enum SA_AttrTarget
{
  SA_All = 0xffffffff,
  SA_Assembly = 1,
  SA_Class = 4,
  SA_Constructor = 32,
  SA_Delegate = 4096,
  SA_Enum = 16,
  SA_Event = 512,
  SA_Field = 256,
  SA_GenericParameter = 16384,
  SA_Interface = 1024,
  SA_Method = 64,
  SA_Module = 2,
  SA_Parameter = 2048,
  SA_Property = 128,
  SA_ReturnValue = 8192,
  SA_Struct = 8,
  SA_This = 0xffff8000,
};

struct ActionTransformRule
{
  /* 0x0000 */ long Padding_563[2];
  /* 0x0008 */ struct XERelativeObjectId rid;
}; /* size: 0x000c */

struct XMLActionTransformRule
{
  /* 0x0000 */ class XE_AutoRg<unsigned short> m_actionName;
  /* 0x0008 */ struct ActionTransformRule m_rule;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 4,
  VldEddOffset = 4,
  BufSize = 50,
} TAG_UNNAMED_1851, *PTAG_UNNAMED_1851;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_1852, *PTAG_UNNAMED_1852;

typedef struct __vc_attributes::atl::soap_headerAttribute
{
  /* 0x0000 */ const char* value;
  /* 0x0008 */ BOOL required;
  /* 0x0009 */ BOOL in;
  /* 0x000a */ BOOL out;
  /* 0x000b */ char __PADDING__[5];
} _vc_attributes::atl::soap_headerAttribute, *P_vc_attributes::atl::soap_headerAttribute; /* size: 0x0010 */

class DmpPointer<_NT_TIB>
{
  /* 0x0000 */ struct _NT_TIB* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 56,
  NVld = 4,
  VldEddOffset = 51,
  BufSize = 430,
} TAG_UNNAMED_1853, *PTAG_UNNAMED_1853;

class DumpTListIterator<TList<SchedulerManager,Worker,16,TListSLock>,2048>
{
}; /* size: 0x0020 */

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  durationIdx = 3,
  transaction_time_stampIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1854, *PTAG_UNNAMED_1854;

struct XE_TEvent<4,1,4>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,4> m_dynamicAttr;
  /* 0x0178 */ struct XEEvent m_event;
}; /* size: 0x01c0 */

class XeSqlPkg::feature_extension
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_564[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int feature_idOffset;
    /* 0x0000 */ const int feature_data_lengthOffset;
    /* 0x0000 */ const int is_failureOffset;
    /* 0x0000 */ const int feature_dataOffset;
  }; /* size: 0x01c0 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1855, *PTAG_UNNAMED_1855;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 17,
} TAG_UNNAMED_1856, *PTAG_UNNAMED_1856;

class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_1857, *PTAG_UNNAMED_1857;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1858, *PTAG_UNNAMED_1858;

struct tagMSGBOXPARAMSA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ long Padding_565;
  /* 0x0008 */ struct HWND__* hwndOwner;
  /* 0x0010 */ struct HINSTANCE__* hInstance;
  /* 0x0018 */ const char* lpszText;
  /* 0x0020 */ const char* lpszCaption;
  /* 0x0028 */ unsigned long dwStyle;
  /* 0x002c */ long Padding_566;
  /* 0x0030 */ const char* lpszIcon;
  /* 0x0038 */ unsigned __int64 dwContextHelpId;
  /* 0x0040 */ void* lpfnMsgBoxCallback /* function */;
  /* 0x0048 */ unsigned long dwLanguageId;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  logical_readsIdx = 2,
  physical_readsIdx = 3,
  copied_rowsIdx = 4,
  copied_bytesIdx = 5,
  batch_countIdx = 6,
  batch_abortsIdx = 7,
  mode_switch_countIdx = 8,
  remote_versionIdx = 9,
  remote_portIdx = 10,
  remote_clusterIdx = 11,
  remote_serverIdx = 12,
  remote_databaseIdx = 13,
  remote_app_nameIdx = 14,
  remote_table_groupIdx = 15,
  remote_low_keyIdx = 16,
  remote_high_keyIdx = 17,
  LastField = 18,
} TAG_UNNAMED_1859, *PTAG_UNNAMED_1859;

typedef enum
{
  error_numberIdx = 0,
  error_severityIdx = 1,
  error_stateIdx = 2,
  error_messageIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1860, *PTAG_UNNAMED_1860;

struct XE_TEvent<4,0,9>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,9> m_dynamicAttr;
  /* 0x0210 */ struct XEEvent m_event;
}; /* size: 0x0258 */

class XeSqlPkg::recovery_skip_checkpoint
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_567[140];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0054 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int recovery_log_bytesOffset;
    /* 0x0000 */ const int recovery_log_read_time_estimateOffset;
    /* 0x0000 */ const int recovery_log_target_timeOffset;
    /* 0x0000 */ const int dirty_page_read_timeOffset;
    /* 0x0000 */ const int dirty_page_countOffset;
    /* 0x0000 */ const int dirty_page_target_timeOffset;
    /* 0x0000 */ const int page_writes_loggedOffset;
    /* 0x0000 */ const int page_writes_not_loggedOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0288 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1861, *PTAG_UNNAMED_1861;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_1862, *PTAG_UNNAMED_1862;

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 12,
  NVld = 2,
  VldEddOffset = 9,
  BufSize = 84,
} TAG_UNNAMED_1863, *PTAG_UNNAMED_1863;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 17,
} TAG_UNNAMED_1864, *PTAG_UNNAMED_1864;

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1865, *PTAG_UNNAMED_1865;

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  transaction_time_stampIdx = 3,
  xact_for_idempotent_flushIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1866, *PTAG_UNNAMED_1866;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1867, *PTAG_UNNAMED_1867;

class Spinlock<122,7,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 29,
} TAG_UNNAMED_1868, *PTAG_UNNAMED_1868;

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  total_fragments_sizeIdx = 2,
  fragments_countIdx = 3,
  degree_of_parallelismIdx = 4,
  destination_partition_countIdx = 5,
  destination_fragment_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_1869, *PTAG_UNNAMED_1869;

struct IXMLDOMSchemaCollection
{
}; /* size: 0x0008 */

typedef enum
{
  epochIdx = 0,
  csnIdx = 1,
  log_to_scan_kbIdx = 2,
  data_pages_kbIdx = 3,
  remote_versionIdx = 4,
  remote_portIdx = 5,
  start_lsnIdx = 6,
  end_lsnIdx = 7,
  remote_clusterIdx = 8,
  remote_serverIdx = 9,
  remote_databaseIdx = 10,
  remote_app_nameIdx = 11,
  remote_table_groupIdx = 12,
  remote_low_keyIdx = 13,
  remote_high_keyIdx = 14,
  LastField = 15,
} TAG_UNNAMED_1870, *PTAG_UNNAMED_1870;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1871, *PTAG_UNNAMED_1871;

class std::numeric_limits<double>
{
  union
  {
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  linked_partition_clusterIdx = 2,
  linked_partition_app_nameIdx = 3,
  linked_partition_table_groupIdx = 4,
  linked_partition_low_keyIdx = 5,
  linked_partition_high_keyIdx = 6,
  app_propertiesIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1872, *PTAG_UNNAMED_1872;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  sender_brick_idIdx = 2,
  receiver_brick_idIdx = 3,
  new_segment_stateIdx = 4,
  new_matrix_stateIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1873, *PTAG_UNNAMED_1873;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 6,
  VldEddOffset = 1,
  BufSize = 57,
} TAG_UNNAMED_1874, *PTAG_UNNAMED_1874;

class XeSqlPkg::query_rpc_process_cmd_lob_action
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 6,
  VldEddOffset = 6,
  BufSize = 90,
} TAG_UNNAMED_1875, *PTAG_UNNAMED_1875;

typedef struct _KERNEL_USER_TIMES
{
  /* 0x0000 */ union _LARGE_INTEGER CreateTime;
  /* 0x0008 */ union _LARGE_INTEGER ExitTime;
  /* 0x0010 */ union _LARGE_INTEGER KernelTime;
  /* 0x0018 */ union _LARGE_INTEGER UserTime;
} KERNEL_USER_TIMES, *PKERNEL_USER_TIMES; /* size: 0x0020 */

struct IRpcOptions
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1876, *PTAG_UNNAMED_1876;

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  durationIdx = 3,
  transaction_time_stampIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1877, *PTAG_UNNAMED_1877;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_1878, *PTAG_UNNAMED_1878;

typedef enum
{
  field_offsetIdx = 0,
  field_sizeIdx = 1,
  field_valueIdx = 2,
  field_nameIdx = 3,
  archive_file_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1879, *PTAG_UNNAMED_1879;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  remote_versionIdx = 2,
  remote_portIdx = 3,
  remote_clusterIdx = 4,
  remote_serverIdx = 5,
  remote_databaseIdx = 6,
  remote_app_nameIdx = 7,
  remote_table_groupIdx = 8,
  remote_low_keyIdx = 9,
  remote_high_keyIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1880, *PTAG_UNNAMED_1880;

typedef enum
{
  Value = 0xd3000,
} TAG_UNNAMED_1881, *PTAG_UNNAMED_1881;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1882, *PTAG_UNNAMED_1882;

class XE_AutoP<XE_ConfigCrc>
{
}; /* size: 0x0008 */

typedef enum
{
  message_idIdx = 0,
  destination_idIdx = 1,
  function_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1883, *PTAG_UNNAMED_1883;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1884, *PTAG_UNNAMED_1884;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_1885, *PTAG_UNNAMED_1885;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  event_typeIdx = 2,
  additional_infoIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1886, *PTAG_UNNAMED_1886;

class AutoSpinlockHolder<62,16,1>;

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_568;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >* m_pList;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 17,
} TAG_UNNAMED_1887, *PTAG_UNNAMED_1887;

typedef enum
{
  durationIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  index_idIdx = 3,
  lock_modeIdx = 4,
  transaction_idIdx = 5,
  resource_owner_typeIdx = 6,
  blocked_processIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1888, *PTAG_UNNAMED_1888;

class DumpTListIterator<MemObjProxyLinkList,4194304>
{
}; /* size: 0x0020 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  epochIdx = 2,
  csnIdx = 3,
  logical_readsIdx = 4,
  physical_readsIdx = 5,
  catchup_return_codeIdx = 6,
  remote_versionIdx = 7,
  remote_portIdx = 8,
  remote_clusterIdx = 9,
  remote_serverIdx = 10,
  remote_databaseIdx = 11,
  remote_app_nameIdx = 12,
  remote_table_groupIdx = 13,
  remote_low_keyIdx = 14,
  remote_high_keyIdx = 15,
  LastField = 16,
} TAG_UNNAMED_1889, *PTAG_UNNAMED_1889;

struct IWbemContext
{
}; /* size: 0x0008 */

class XeSqlPkg::database_open
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_569[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_1890, *PTAG_UNNAMED_1890;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 16,
  NVld = 7,
  VldEddOffset = 8,
  BufSize = 105,
} TAG_UNNAMED_1891, *PTAG_UNNAMED_1891;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_1892, *PTAG_UNNAMED_1892;

struct PPM_PERFSTATE_EVENT
{
  /* 0x0000 */ unsigned long State;
  /* 0x0004 */ unsigned long Status;
  /* 0x0008 */ unsigned long Latency;
  /* 0x000c */ unsigned long Speed;
  /* 0x0010 */ unsigned long Processor;
}; /* size: 0x0014 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  epochIdx = 2,
  csnIdx = 3,
  forwarder_epochIdx = 4,
  forwarder_csnIdx = 5,
  create_utcIdx = 6,
  copied_rowsIdx = 7,
  copied_bytesIdx = 8,
  catchup_return_codeIdx = 9,
  remote_versionIdx = 10,
  remote_portIdx = 11,
  remote_clusterIdx = 12,
  remote_serverIdx = 13,
  remote_databaseIdx = 14,
  remote_app_nameIdx = 15,
  remote_table_groupIdx = 16,
  remote_low_keyIdx = 17,
  remote_high_keyIdx = 18,
  LastField = 19,
} TAG_UNNAMED_1893, *PTAG_UNNAMED_1893;

class DmpListIterator<MemObjProxy,8,0,SEList<MemObjProxy,0>,8,4194304>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1894, *PTAG_UNNAMED_1894;

class XeSqlPkg::fulltext_reorganize_phase1_source_fragment
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_570[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int fragment_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef enum
{
  federated_xact_idIdx = 0,
  federated_xact_node_idIdx = 1,
  federated_xact_node_local_idIdx = 2,
  stateIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1895, *PTAG_UNNAMED_1895;

typedef struct _BrowseDlgConfig_HA
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bIncludeInstanceIndex : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long bSingleCounterPerAdd : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long bSingleCounterPerDialog : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long bLocalCountersOnly : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long bWildCardInstances : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long bHideDetailBox : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long bInitializePath : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long bDisableMachineSelection : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long bIncludeCostlyObjects : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long bShowObjectBrowser : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long bReserved : 22; /* bit position: 10 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_571;
  /* 0x0008 */ struct HWND__* hWndOwner;
  /* 0x0010 */ void* hDataSource;
  /* 0x0018 */ char* szReturnPathBuffer;
  /* 0x0020 */ unsigned long cchReturnPathLength;
  /* 0x0024 */ long Padding_572;
  /* 0x0028 */ void* pCallBack /* function */;
  /* 0x0030 */ unsigned __int64 dwCallBackArg;
  /* 0x0038 */ long CallBackStatus;
  /* 0x003c */ unsigned long dwDefaultDetailLevel;
  /* 0x0040 */ char* szDialogBoxCaption;
} BrowseDlgConfig_HA, *PBrowseDlgConfig_HA; /* size: 0x0048 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 6,
  VldEddOffset = 0,
  BufSize = 56,
} TAG_UNNAMED_1896, *PTAG_UNNAMED_1896;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_1897, *PTAG_UNNAMED_1897;

class AutoSpinlockHolder<155,3,1>;

typedef struct __vc_attributes::helper_attributes::source_annotation_attributeAttribute
{
  union
  {
    /* 0x0000 */ const int All;
    /* 0x0000 */ const int Assembly;
    /* 0x0000 */ const int Class;
    /* 0x0000 */ const int Constructor;
    /* 0x0000 */ const int Delegate;
    /* 0x0000 */ const int Enum;
    /* 0x0000 */ const int Event;
    /* 0x0000 */ const int Field;
    /* 0x0000 */ const int GenericParameter;
    /* 0x0000 */ const int Interface;
    /* 0x0000 */ const int Method;
    /* 0x0000 */ const int Module;
    /* 0x0000 */ const int Parameter;
    /* 0x0000 */ const int Property;
    /* 0x0000 */ const int ReturnValue;
    /* 0x0000 */ const int Struct;
    /* 0x0000 */ const int Typedef;
    /* 0x0000 */ int ValidOn;
  }; /* size: 0x0004 */
  /* 0x0004 */ BOOL AllowMultiple;
  /* 0x0005 */ char __PADDING__[3];
} _vc_attributes::helper_attributes::source_annotation_attributeAttribute, *P_vc_attributes::helper_attributes::source_annotation_attributeAttribute; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 11,
} TAG_UNNAMED_1898, *PTAG_UNNAMED_1898;

typedef enum
{
  federated_xact_idIdx = 0,
  federated_xact_node_idIdx = 1,
  federated_xact_node_local_idIdx = 2,
  ageIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1899, *PTAG_UNNAMED_1899;

typedef struct __vc_attributes::stringAttribute
{
} _vc_attributes::stringAttribute, *P_vc_attributes::stringAttribute; /* size: 0x0001 */

typedef enum
{
  current_epochIdx = 0,
  current_csnIdx = 1,
  truncated_epochIdx = 2,
  truncated_csnIdx = 3,
  inmemory_truncated_epochIdx = 4,
  inmemory_truncated_csnIdx = 5,
  persisted_truncated_epochIdx = 6,
  persisted_truncated_csnIdx = 7,
  LastField = 8,
} TAG_UNNAMED_1900, *PTAG_UNNAMED_1900;

struct XEStorage
{
  /* 0x0000 */ void* m_buffer;
  /* 0x0008 */ void* m_cookie;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 0,
  VldEddOffset = 12,
  BufSize = 41,
} TAG_UNNAMED_1901, *PTAG_UNNAMED_1901;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 48,
} TAG_UNNAMED_1902, *PTAG_UNNAMED_1902;

class XeSqlPkg::query_rpc_fetch_next_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_573[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

struct XEActionDataDescriptor
{
  /* 0x0000 */ struct XERelativeObjectId m_rid;
  /* 0x0004 */ unsigned int m_length;
}; /* size: 0x0008 */

struct XECollectedActionData
{
  /* 0x0000 */ struct XEActionDataDescriptor m_descriptor;
  /* 0x0008 */ const void* m_data;
}; /* size: 0x0010 */

class DmpPointer<MemObjProxy>
{
  /* 0x0000 */ class MemObjProxy* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  cloud_partition_idIdx = 1,
  is_target_of_continuous_copyIdx = 2,
  xact_csnIdx = 3,
  xact_epochIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1903, *PTAG_UNNAMED_1903;

typedef enum
{
  available_cpu_timeIdx = 0,
  available_logical_readsIdx = 1,
  available_logical_writesIdx = 2,
  batch_cpu_timeIdx = 3,
  batch_logical_readsIdx = 4,
  batch_logical_writesIdx = 5,
  cpu_time_refill_rateIdx = 6,
  logical_reads_refill_rateIdx = 7,
  logical_writes_refill_rateIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1904, *PTAG_UNNAMED_1904;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1905, *PTAG_UNNAMED_1905;

typedef struct _TOKEN_DEVICE_CLAIMS
{
  /* 0x0000 */ void* DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS; /* size: 0x0008 */

class XeSqlPkg::metadata_create_global_temp_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_574[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1906, *PTAG_UNNAMED_1906;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 72,
} TAG_UNNAMED_1907, *PTAG_UNNAMED_1907;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 25,
} TAG_UNNAMED_1908, *PTAG_UNNAMED_1908;

class XeSqlPkg::glm_local_brick_undo_response
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_575[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int lock_resultOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  protocol_execution_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_1909, *PTAG_UNNAMED_1909;

class Spinlock<4,19,1>
{
}; /* size: 0x0004 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  become_nothing_on_failureIdx = 2,
  filteredIdx = 3,
  remote_versionIdx = 4,
  remote_portIdx = 5,
  hint_stream_idIdx = 6,
  remote_clusterIdx = 7,
  remote_serverIdx = 8,
  remote_databaseIdx = 9,
  remote_app_nameIdx = 10,
  remote_table_groupIdx = 11,
  remote_low_keyIdx = 12,
  remote_high_keyIdx = 13,
  LastField = 14,
} TAG_UNNAMED_1910, *PTAG_UNNAMED_1910;

class XeSqlPkg::security_authentication_perf_login
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_576[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int login_durationOffset;
    /* 0x0000 */ const int is_sql_authenticationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1911, *PTAG_UNNAMED_1911;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 8,
  VldEddOffset = 5,
  BufSize = 85,
} TAG_UNNAMED_1912, *PTAG_UNNAMED_1912;

typedef enum
{
  flagIdx = 0,
  typeIdx = 1,
  new_valueIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1913, *PTAG_UNNAMED_1913;

typedef enum
{
  versionIdx = 0,
  destination_type_groupIdx = 1,
  message_handleIdx = 2,
  message_typeIdx = 3,
  message_flagsIdx = 4,
  sequence_numberIdx = 5,
  ack_sequence_numberIdx = 6,
  message_countIdx = 7,
  message_numberIdx = 8,
  destination_idIdx = 9,
  message_contentIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1914, *PTAG_UNNAMED_1914;

struct IComThreadingInfo
{
}; /* size: 0x0008 */

enum IExecSql::EExchangeParameterType
{
  Invalid = 0,
  Input = 1,
  Output = 2,
  Return = 3,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 11,
  NVld = 2,
  VldEddOffset = 8,
  BufSize = 50,
} TAG_UNNAMED_1915, *PTAG_UNNAMED_1915;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_1916, *PTAG_UNNAMED_1916;

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  durationIdx = 3,
  transaction_time_stampIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1917, *PTAG_UNNAMED_1917;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  no_copyIdx = 2,
  additional_hashIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1918, *PTAG_UNNAMED_1918;

enum EDBRefTypetypedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_1919, *PTAG_UNNAMED_1919;

typedef enum
{
  versionIdx = 0,
  message_handleIdx = 1,
  message_typeIdx = 2,
  destination_idIdx = 3,
  stream_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1920, *PTAG_UNNAMED_1920;

struct XE_TEvent<4,1,2>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,2> m_dynamicAttr;
  /* 0x0128 */ struct XEEvent m_event;
}; /* size: 0x0170 */

class XeSqlPkg::rollback_tran_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_577[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int new_transaction_startedOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0170 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_1921, *PTAG_UNNAMED_1921;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 26,
} TAG_UNNAMED_1922, *PTAG_UNNAMED_1922;

enum EEngineSku
{
  x_dwDesktop = 0,
  x_dwStandard = 1,
  x_dwEnterprise = 2,
  x_dwExpress = 3,
  x_dwCOUNT = 4,
};

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1923, *PTAG_UNNAMED_1923;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 68,
} TAG_UNNAMED_1924, *PTAG_UNNAMED_1924;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 0,
  VldEddOffset = 13,
  BufSize = 49,
} TAG_UNNAMED_1925, *PTAG_UNNAMED_1925;

class Spinlock<242,1,1>
{
}; /* size: 0x0004 */

struct XE_TArray<XEType *,0>
{
  /* 0x0000 */ struct XEType** m_array;
}; /* size: 0x0008 */

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  durationIdx = 3,
  transaction_time_stampIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1926, *PTAG_UNNAMED_1926;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1927, *PTAG_UNNAMED_1927;

class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::List
{
}; /* size: 0x0030 */

struct TransmitterThrottledConnectSLock
{
}; /* size: 0x0004 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  new_epochIdx = 2,
  become_nothing_on_failureIdx = 3,
  min_quorum_countIdx = 4,
  target_replica_countIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1928, *PTAG_UNNAMED_1928;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_1929, *PTAG_UNNAMED_1929;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 16,
} TAG_UNNAMED_1930, *PTAG_UNNAMED_1930;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  new_epochIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1931, *PTAG_UNNAMED_1931;

struct HINSTANCE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 13,
} TAG_UNNAMED_1932, *PTAG_UNNAMED_1932;

class XeSqlPkg::latch_suspend_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_578[140];
      /* 0x0240 */ unsigned char m_buf[66];
    }; /* size: 0x0052 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int task_ownerOffset;
    /* 0x0000 */ const int continue_waitOffset;
  }; /* size: 0x0398 */
}; /* size: 0x0288 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 6,
  NDynamic = 8,
  NVld = 6,
  VldEddOffset = 1,
  BufSize = 53,
} TAG_UNNAMED_1933, *PTAG_UNNAMED_1933;

typedef enum
{
  feature_idIdx = 0,
  feature_data_lengthIdx = 1,
  is_failureIdx = 2,
  feature_dataIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1934, *PTAG_UNNAMED_1934;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 23,
} TAG_UNNAMED_1935, *PTAG_UNNAMED_1935;

enum ShutdownOption
{
  NOT_SHUTDOWN = 0,
  FAST_SHUTDOWN = 1,
  ORDERLY_SHUTDOWN = 2,
  NICE_SHUTDOWN = 3,
};

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  quorum_setIdx = 2,
  remote_versionIdx = 3,
  remote_portIdx = 4,
  remote_clusterIdx = 5,
  remote_serverIdx = 6,
  remote_databaseIdx = 7,
  remote_app_nameIdx = 8,
  remote_table_groupIdx = 9,
  remote_low_keyIdx = 10,
  remote_high_keyIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1936, *PTAG_UNNAMED_1936;

struct XEPackage
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ struct _GUID m_packageId;
  /* 0x0030 */ const wchar_t* m_resourceFilename;
  /* 0x0038 */ struct _GUID m_moduleId;
  /* 0x0048 */ struct HINSTANCE__* m_moduleHandle;
  /* 0x0050 */ unsigned short m_minCtxVersion;
  /* 0x0052 */ char __PADDING__[6];
}; /* size: 0x0058 */

typedef struct __vc_attributes::ms_unionAttribute
{
} _vc_attributes::ms_unionAttribute, *P_vc_attributes::ms_unionAttribute; /* size: 0x0001 */

typedef enum
{
  status_versionIdx = 0,
  stream_statusIdx = 1,
  destination_idIdx = 2,
  stream_idIdx = 3,
  destination_addressIdx = 4,
  destination_circuit_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1937, *PTAG_UNNAMED_1937;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 4,
  VldEddOffset = 1,
  BufSize = 44,
} TAG_UNNAMED_1938, *PTAG_UNNAMED_1938;

class XeSqlPkg::column_store_index_build_throttle
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_579[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int segment_countOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int query_dopOffset;
    /* 0x0000 */ const int effective_dopOffset;
    /* 0x0000 */ const int max_effective_dopOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

typedef enum
{
  Value = 2,
} TAG_UNNAMED_1939, *PTAG_UNNAMED_1939;

typedef enum
{
  database_idIdx = 0,
  is_passive_stateIdx = 1,
  error_code_pointerIdx = 2,
  checkpoint_tsIdx = 3,
  recovery_lsnIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1940, *PTAG_UNNAMED_1940;

class SOSExceptionTranslatorSetter<SOSExceptionNoTranslatorSetter>
{
  /* 0x0000 */ void* m_oldTranslator /* function */;
}; /* size: 0x0008 */

struct XE_TMap<324>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[324];
  }; /* size: 0x1440 */
  /* 0x1440 */ struct XEMap m_map;
}; /* size: 0x1470 */

typedef enum
{
  queue_sizeIdx = 0,
  stream_statusIdx = 1,
  message_idIdx = 2,
  stream_idIdx = 3,
  destination_idIdx = 4,
  function_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_1941, *PTAG_UNNAMED_1941;

enum SOS_CacheUserExtensionBase::getentry_options
{
  DESTINATION_BRICK_LOOKUP = 0,
  SOURCE_BRICK_LOOKUP = 1,
};

typedef struct _tagHIT_LOGGING_INFO
{
  /* 0x0000 */ unsigned long dwStructSize;
  /* 0x0004 */ long Padding_580;
  /* 0x0008 */ char* lpszLoggedUrlName;
  /* 0x0010 */ struct _SYSTEMTIME StartTime;
  /* 0x0020 */ struct _SYSTEMTIME EndTime;
  /* 0x0030 */ char* lpszExtendedInfo;
} tagHIT_LOGGING_INFO, *PtagHIT_LOGGING_INFO; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 4,
  VldEddOffset = 1,
  BufSize = 44,
} TAG_UNNAMED_1942, *PTAG_UNNAMED_1942;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 7,
  VldEddOffset = 3,
  BufSize = 78,
} TAG_UNNAMED_1943, *PTAG_UNNAMED_1943;

class XeSqlPkg::consumer_send_correlated_params
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_581[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int query_operation_node_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_1944, *PTAG_UNNAMED_1944;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  replica_subtypeIdx = 2,
  replica_statusIdx = 3,
  remote_versionIdx = 4,
  remote_portIdx = 5,
  remote_clusterIdx = 6,
  remote_serverIdx = 7,
  remote_databaseIdx = 8,
  remote_app_nameIdx = 9,
  remote_table_groupIdx = 10,
  remote_low_keyIdx = 11,
  remote_high_keyIdx = 12,
  LastField = 13,
} TAG_UNNAMED_1945, *PTAG_UNNAMED_1945;

typedef struct _WOW64_FLOATING_SAVE_AREA
{
  /* 0x0000 */ unsigned long ControlWord;
  /* 0x0004 */ unsigned long StatusWord;
  /* 0x0008 */ unsigned long TagWord;
  /* 0x000c */ unsigned long ErrorOffset;
  /* 0x0010 */ unsigned long ErrorSelector;
  /* 0x0014 */ unsigned long DataOffset;
  /* 0x0018 */ unsigned long DataSelector;
  /* 0x001c */ unsigned char RegisterArea[80];
  /* 0x006c */ unsigned long Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA, *PWOW64_FLOATING_SAVE_AREA; /* size: 0x0070 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_1946, *PTAG_UNNAMED_1946;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  remote_versionIdx = 2,
  remote_portIdx = 3,
  remote_clusterIdx = 4,
  remote_serverIdx = 5,
  remote_databaseIdx = 6,
  remote_app_nameIdx = 7,
  remote_table_groupIdx = 8,
  remote_low_keyIdx = 9,
  remote_high_keyIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1947, *PTAG_UNNAMED_1947;

typedef enum
{
  page_packets_queuedIdx = 0,
  page_packets_processedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1948, *PTAG_UNNAMED_1948;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 7,
  VldEddOffset = 3,
  BufSize = 75,
} TAG_UNNAMED_1949, *PTAG_UNNAMED_1949;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_1950, *PTAG_UNNAMED_1950;

typedef enum
{
  database_idIdx = 0,
  cloud_partition_idIdx = 1,
  is_extendIdx = 2,
  update_reasonIdx = 3,
  xact_csnIdx = 4,
  xact_epochIdx = 5,
  xact_lsn_fseqnoIdx = 6,
  xact_lsn_offsetIdx = 7,
  xact_lsn_slotidIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1951, *PTAG_UNNAMED_1951;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_1952, *PTAG_UNNAMED_1952;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 31,
} TAG_UNNAMED_1953, *PTAG_UNNAMED_1953;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1954, *PTAG_UNNAMED_1954;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_1955, *PTAG_UNNAMED_1955;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 4,
  VldEddOffset = 5,
  BufSize = 59,
} TAG_UNNAMED_1956, *PTAG_UNNAMED_1956;

typedef enum
{
  msg_sequence_numberIdx = 0,
  replica_typeIdx = 1,
  replica_subtypeIdx = 2,
  partition_md_idIdx = 3,
  partition_host_db_idIdx = 4,
  partition_db_idIdx = 5,
  message_typeIdx = 6,
  message_versionIdx = 7,
  message_flagsIdx = 8,
  LastField = 9,
} TAG_UNNAMED_1957, *PTAG_UNNAMED_1957;

class XeSqlPkg::plan_affecting_convert
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_582[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int compile_timeOffset;
    /* 0x0000 */ const int convert_issueOffset;
    /* 0x0000 */ const int expressionOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class SpinlockHolder<68,16,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_1958, *PTAG_UNNAMED_1958;

typedef struct _LDR_ENUM_RESOURCE_ENTRY
{
  /* 0x0000 */ union
  {
    union
    {
      /* 0x0000 */ unsigned __int64 NameOrId;
      /* 0x0000 */ struct _IMAGE_RESOURCE_DIRECTORY_STRING* Name;
      struct
      {
        /* 0x0000 */ unsigned short Id;
        /* 0x0002 */ unsigned short NameIsPresent;
      }; /* size: 0x0004 */
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Path[3];
  /* 0x0018 */ void* Data;
  /* 0x0020 */ unsigned long Size;
  /* 0x0024 */ unsigned long Reserved;
} LDR_ENUM_RESOURCE_ENTRY, *PLDR_ENUM_RESOURCE_ENTRY; /* size: 0x0028 */

typedef enum
{
  LinkOffset = 40,
} TAG_UNNAMED_1959, *PTAG_UNNAMED_1959;

class CAutoP<XE_LogDeserializedPackage>
{
}; /* size: 0x0008 */

struct BackupContextSLock
{
}; /* size: 0x0004 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  become_nothing_on_failureIdx = 2,
  filteredIdx = 3,
  process_deferred_commitIdx = 4,
  continuous_copy_targetIdx = 5,
  remote_versionIdx = 6,
  remote_portIdx = 7,
  hint_stream_idIdx = 8,
  remote_clusterIdx = 9,
  remote_serverIdx = 10,
  remote_databaseIdx = 11,
  remote_app_nameIdx = 12,
  remote_table_groupIdx = 13,
  remote_low_keyIdx = 14,
  remote_high_keyIdx = 15,
  LastField = 16,
} TAG_UNNAMED_1960, *PTAG_UNNAMED_1960;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 16,
  NVld = 8,
  VldEddOffset = 7,
  BufSize = 87,
} TAG_UNNAMED_1961, *PTAG_UNNAMED_1961;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 18,
} TAG_UNNAMED_1962, *PTAG_UNNAMED_1962;

typedef enum
{
  destination_idIdx = 0,
  destination_descriptionIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1963, *PTAG_UNNAMED_1963;

typedef struct _MIDL_STUB_DESC
{
  /* 0x0000 */ void* RpcInterfaceInformation;
  /* 0x0008 */ void* pfnAllocate /* function */;
  /* 0x0010 */ void* pfnFree /* function */;
  union
  {
    union
    {
      /* 0x0018 */ void** pAutoHandle;
      /* 0x0018 */ void** pPrimitiveHandle;
      /* 0x0018 */ struct __GENERIC_BINDING_INFO* pGenericBindingInfo;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ IMPLICIT_HANDLE_INFO;
  /* 0x0020 */ void* const* apfnNdrRundownRoutines /* function */;
  /* 0x0028 */ const struct _GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
  /* 0x0030 */ void* const* apfnExprEval /* function */;
  /* 0x0038 */ const struct _XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
  /* 0x0040 */ const unsigned char* pFormatTypes;
  /* 0x0048 */ int fCheckBounds;
  /* 0x004c */ unsigned long Version;
  /* 0x0050 */ struct _MALLOC_FREE_STRUCT* pMallocFreeStruct;
  /* 0x0058 */ long MIDLVersion;
  /* 0x005c */ long Padding_583;
  /* 0x0060 */ const struct _COMM_FAULT_OFFSETS* CommFaultOffsets;
  /* 0x0068 */ const struct _USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
  /* 0x0070 */ void* const* NotifyRoutineTable /* function */;
  /* 0x0078 */ unsigned __int64 mFlags;
  /* 0x0080 */ const struct _NDR_CS_ROUTINES* CsRoutineTables;
  /* 0x0088 */ void* ProxyServerInfo;
  /* 0x0090 */ const struct _NDR_EXPR_DESC* pExprInfo;
} MIDL_STUB_DESC, *PMIDL_STUB_DESC; /* size: 0x0098 */

struct ITableCreation
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_1964, *PTAG_UNNAMED_1964;

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  transaction_time_stampIdx = 3,
  xact_for_idempotent_flushIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1965, *PTAG_UNNAMED_1965;

struct _TP_TIMER;

typedef enum
{
  addressIdx = 0,
  modeIdx = 1,
  classIdx = 2,
  keep_countIdx = 3,
  shared_countIdx = 4,
  update_countIdx = 5,
  exclusive_countIdx = 6,
  destroy_countIdx = 7,
  has_waitersIdx = 8,
  is_superlatchIdx = 9,
  is_poisonedIdx = 10,
  timeoutIdx = 11,
  database_idIdx = 12,
  file_idIdx = 13,
  page_idIdx = 14,
  LastField = 15,
} TAG_UNNAMED_1966, *PTAG_UNNAMED_1966;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 29,
} TAG_UNNAMED_1967, *PTAG_UNNAMED_1967;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 0,
  VldEddOffset = 16,
  BufSize = 132,
} TAG_UNNAMED_1968, *PTAG_UNNAMED_1968;

class SEList<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 44,
} TAG_UNNAMED_1969, *PTAG_UNNAMED_1969;

typedef union _userCLIPFORMAT::__MIDL_IWinTypes_0001
{
  union
  {
    /* 0x0000 */ unsigned long dwValue;
    /* 0x0000 */ wchar_t* pwszName;
  }; /* size: 0x0008 */
} userCLIPFORMAT::__MIDL_IWinTypes_0001, *PuserCLIPFORMAT::__MIDL_IWinTypes_0001; /* size: 0x0008 */

typedef struct _userCLIPFORMAT
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_584;
  /* 0x0008 */ union _userCLIPFORMAT::__MIDL_IWinTypes_0001 u;
} userCLIPFORMAT, *PuserCLIPFORMAT; /* size: 0x0010 */

typedef enum
{
  phase_idIdx = 0,
  split_ageIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1970, *PTAG_UNNAMED_1970;

class DmpPointer<SOS_RingBuffer>
{
  /* 0x0000 */ class SOS_RingBuffer* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  replica_subtypeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1971, *PTAG_UNNAMED_1971;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 11,
} TAG_UNNAMED_1972, *PTAG_UNNAMED_1972;

class XeSqlPkg::after_snipping_some_log
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_585[140];
      /* 0x0240 */ unsigned char m_buf[2];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1973, *PTAG_UNNAMED_1973;

typedef enum
{
  stateIdx = 0,
  object_addressIdx = 1,
  api_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1974, *PTAG_UNNAMED_1974;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_1975, *PTAG_UNNAMED_1975;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_1976, *PTAG_UNNAMED_1976;

class DmpPointer<StackFrames<16> >
{
  /* 0x0000 */ class StackFrames<16>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  versionIdx = 0,
  destination_type_groupIdx = 1,
  message_handleIdx = 2,
  message_typeIdx = 3,
  message_flagsIdx = 4,
  sequence_numberIdx = 5,
  ack_sequence_numberIdx = 6,
  message_countIdx = 7,
  destination_idIdx = 8,
  stream_idIdx = 9,
  LastField = 10,
} TAG_UNNAMED_1977, *PTAG_UNNAMED_1977;

class XeSqlPkg::database_agent_request_end
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_586[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int local_brick_idOffset;
    /* 0x0000 */ const int remote_brick_idOffset;
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

typedef enum
{
  LinkOffset = 1400,
} TAG_UNNAMED_1978, *PTAG_UNNAMED_1978;

typedef struct __GENERIC_BINDING_INFO
{
  /* 0x0000 */ void* pObj;
  /* 0x0008 */ unsigned int Size;
  /* 0x000c */ long Padding_587;
  /* 0x0010 */ void* pfnBind /* function */;
  /* 0x0018 */ void* pfnUnbind /* function */;
} _GENERIC_BINDING_INFO, *P_GENERIC_BINDING_INFO; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_1979, *PTAG_UNNAMED_1979;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 2,
  VldEddOffset = 7,
  BufSize = 46,
} TAG_UNNAMED_1980, *PTAG_UNNAMED_1980;

class Spinlock<205,3,1>
{
}; /* size: 0x0004 */

struct IInternetSecurityManagerEx
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 15,
  NVld = 7,
  VldEddOffset = 7,
  BufSize = 97,
} TAG_UNNAMED_1981, *PTAG_UNNAMED_1981;

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_1982, *PTAG_UNNAMED_1982;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  replica_subtypeIdx = 2,
  additional_hashIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1983, *PTAG_UNNAMED_1983;

class TCacheStore<CacheClockAlgorithm>::CacheEntryProxy
{
  /* 0x0000 */ long Padding_588[4];
  /* 0x0010 */ class TCacheStore<CacheClockAlgorithm>::CacheEntryDescriptor* m_CacheEntryDescriptor;
  /* 0x0018 */ unsigned int m_HashValue;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 19,
} TAG_UNNAMED_1984, *PTAG_UNNAMED_1984;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 5,
} TAG_UNNAMED_1985, *PTAG_UNNAMED_1985;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  remote_versionIdx = 2,
  remote_portIdx = 3,
  remote_clusterIdx = 4,
  remote_serverIdx = 5,
  remote_databaseIdx = 6,
  remote_app_nameIdx = 7,
  remote_table_groupIdx = 8,
  remote_low_keyIdx = 9,
  remote_high_keyIdx = 10,
  LastField = 11,
} TAG_UNNAMED_1986, *PTAG_UNNAMED_1986;

typedef struct _FILE_GET_EA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned char EaNameLength;
  /* 0x0005 */ char EaName[1];
  /* 0x0006 */ char __PADDING__[2];
} FILE_GET_EA_INFORMATION, *PFILE_GET_EA_INFORMATION; /* size: 0x0008 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1987, *PTAG_UNNAMED_1987;

typedef enum
{
  last_epochIdx = 0,
  last_csnIdx = 1,
  pending_epochIdx = 2,
  pending_csnIdx = 3,
  LastField = 4,
} TAG_UNNAMED_1988, *PTAG_UNNAMED_1988;

typedef enum
{
  DETOUR_IMAGE_VALID_SIGNATURE = -19088895,
} TAG_UNNAMED_1989, *PTAG_UNNAMED_1989;

typedef enum
{
  query_operator_node_idIdx = 0,
  query_thread_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1990, *PTAG_UNNAMED_1990;

struct IOleLink
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_1991, *PTAG_UNNAMED_1991;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_589[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

typedef enum
{
  xact_idIdx = 0,
  epochIdx = 1,
  csnIdx = 2,
  durationIdx = 3,
  transaction_time_stampIdx = 4,
  LastField = 5,
} TAG_UNNAMED_1992, *PTAG_UNNAMED_1992;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_1993, *PTAG_UNNAMED_1993;

typedef enum
{
  destination_idIdx = 0,
  destination_descriptionIdx = 1,
  LastField = 2,
} TAG_UNNAMED_1994, *PTAG_UNNAMED_1994;

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  internalIdx = 2,
  remote_versionIdx = 3,
  remote_portIdx = 4,
  remote_clusterIdx = 5,
  remote_serverIdx = 6,
  remote_databaseIdx = 7,
  remote_app_nameIdx = 8,
  remote_table_groupIdx = 9,
  remote_low_keyIdx = 10,
  remote_high_keyIdx = 11,
  LastField = 12,
} TAG_UNNAMED_1995, *PTAG_UNNAMED_1995;

typedef struct _PROCESS_KEEPALIVE_COUNT_INFORMATION
{
  /* 0x0000 */ unsigned long Count;
} PROCESS_KEEPALIVE_COUNT_INFORMATION, *PPROCESS_KEEPALIVE_COUNT_INFORMATION; /* size: 0x0004 */

enum XeSqlPkg::commit_tran_starting::CustomizableSlots
{
  collect_statementSlot = 0,
};

class Spinlock<34,18,1>
{
}; /* size: 0x0004 */

typedef enum
{
  SIZE_OF_JMP = 5,
} TAG_UNNAMED_1996, *PTAG_UNNAMED_1996;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 7,
  VldEddOffset = 4,
  BufSize = 76,
} TAG_UNNAMED_1997, *PTAG_UNNAMED_1997;

class GroupNumaConfig
{
  /* 0x0000 */ long Padding_590[2];
  /* 0x0008 */ void* m_pfnGetNumaNodeProcessorMaskEx /* function */;
  /* 0x0010 */ void* m_pfnGetThreadGroupAffinity /* function */;
  /* 0x0018 */ void* m_pfnSetThreadGroupAffinity /* function */;
  /* 0x0020 */ void* m_pfnGetProcessGroupAffinity /* function */;
  /* 0x0028 */ void* m_pfnGetLogicalProcessorInformationEx /* function */;
  /* 0x0030 */ void* m_pfnSetThreadIdealProcessorEx /* function */;
}; /* size: 0x0038 */

class StackFrames<16>
{
  union
  {
    struct
    {
      /* 0x0000 */ volatile long m_ActiveUsers;
      /* 0x0004 */ unsigned long m_ResourceType;
      /* 0x0008 */ struct SOSHOST_CACHESTORE_COOKIE__* m_Cookie;
    }; /* size: 0x0010 */
    /* 0x0000 */ const unsigned int sm_framesToSkip;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned long m_hashValue;
  /* 0x0014 */ long Padding_591;
  /* 0x0018 */ void* m_frames[16];
  /* 0x0098 */ unsigned long m_count;
  /* 0x009c */ long Padding_592;
  /* 0x00a0 */ class StackFramesStore* m_StackFramesStore;
}; /* size: 0x00a8 */

typedef enum
{
  xact_idIdx = 0,
  transaction_time_stampIdx = 1,
  xact_for_idempotent_flushIdx = 2,
  LastField = 3,
} TAG_UNNAMED_1998, *PTAG_UNNAMED_1998;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 17,
} TAG_UNNAMED_1999, *PTAG_UNNAMED_1999;

typedef enum
{
  destination_idIdx = 0,
  destination_descriptionIdx = 1,
  destination_addressIdx = 2,
  destination_circuit_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2000, *PTAG_UNNAMED_2000;

enum vc_attributes::YesNoMaybe
{
  No = 0xfff0001,
  Maybe = 0xfff0010,
  Yes = 0xfff0100,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 4,
  VldEddOffset = -1,
  BufSize = 32,
} TAG_UNNAMED_2001, *PTAG_UNNAMED_2001;

enum XeSqlPkg::alwayson_ddl_executed::CustomizableSlots
{
  collect_statementSlot = 0,
};

struct IPersistMemory
{
}; /* size: 0x0008 */

class CAutoBase<PackageEntry>
{
  /* 0x0000 */ class PackageEntry* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  stateIdx = 0,
  object_addressIdx = 1,
  api_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2002, *PTAG_UNNAMED_2002;

class PageHeapPageInfo
{
  /* 0x0000 */ long Padding_593[4];
  /* 0x0010 */ __int64 m_NumberOfPages;
  /* 0x0018 */ unsigned __int64 m_AllocationSize;
  /* 0x0020 */ unsigned char* m_AllocationPointer;
  /* 0x0028 */ class SEListElem m_link;
  /* 0x0038 */ const char* m_szFile;
  /* 0x0040 */ int m_sLine;
  /* 0x0044 */ long Padding_594;
  /* 0x0048 */ class StackFrames<16>* m_stackTrace;
}; /* size: 0x0050 */

typedef enum
{
  stateIdx = 0,
  durationIdx = 1,
  commit_modeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2003, *PTAG_UNNAMED_2003;

struct IWbemConnectorLogin
{
}; /* size: 0x0008 */

class SESimpleObjectPool<WaitForGraphEdge>
{
  /* 0x0000 */ class IMemObj* m_pmo;
  /* 0x0008 */ class WaitForGraphEdge* m_primaryPool;
  /* 0x0010 */ class WaitForGraphEdge* m_secondaryPool;
  /* 0x0018 */ unsigned int m_primaryPoolCapacity;
  /* 0x001c */ unsigned int m_secondaryPoolCapacity;
  /* 0x0020 */ unsigned int m_numObjAllocatedFromPrimaryPool;
  /* 0x0024 */ unsigned int m_numObjAllocatedFromSecondaryPool;
  /* 0x0028 */ unsigned int m_totalAllocationCount;
  /* 0x002c */ long Padding_595;
  /* 0x0030 */ class SESimpleObjectPoolStats m_stats;
}; /* size: 0x0058 */

class SESimpleObjectPool<WaitForGraphStronglyConnectedComponent>
{
  /* 0x0000 */ class IMemObj* m_pmo;
  /* 0x0008 */ class WaitForGraphStronglyConnectedComponent* m_primaryPool;
  /* 0x0010 */ class WaitForGraphStronglyConnectedComponent* m_secondaryPool;
  /* 0x0018 */ unsigned int m_primaryPoolCapacity;
  /* 0x001c */ unsigned int m_secondaryPoolCapacity;
  /* 0x0020 */ unsigned int m_numObjAllocatedFromPrimaryPool;
  /* 0x0024 */ unsigned int m_numObjAllocatedFromSecondaryPool;
  /* 0x0028 */ unsigned int m_totalAllocationCount;
  /* 0x002c */ long Padding_596;
  /* 0x0030 */ class SESimpleObjectPoolStats m_stats;
}; /* size: 0x0058 */

class WaitForGraphObjectAllocator
{
  union
  {
    /* 0x0000 */ const unsigned int OPTION_EDGE_POOLING;
    /* 0x0000 */ const unsigned int OPTION_SCC_POOLING;
    /* 0x0000 */ const unsigned int OPTION_ALL_POOLING;
    /* 0x0000 */ const unsigned int VERTEX_POOL_SIZE;
    /* 0x0000 */ const unsigned int EDGE_POOL_SIZE;
    /* 0x0000 */ const unsigned int SCC_POOL_SIZE;
    /* 0x0000 */ const unsigned int VERTEX_POOL_SIZE_INCR;
    /* 0x0000 */ const unsigned int EDGE_POOL_SIZE_INCR;
    /* 0x0000 */ const unsigned int SCC_POOL_SIZE_INCR;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_597;
  /* 0x0008 */ class IMemObj* m_pmo;
  /* 0x0010 */ unsigned int m_options;
  /* 0x0014 */ long Padding_598;
  /* 0x0018 */ class SESimpleObjectPool<WaitForGraphEdge> m_edgePool;
  /* 0x0070 */ class SESimpleObjectPool<WaitForGraphStronglyConnectedComponent> m_sccPool;
}; /* size: 0x00c8 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 11,
} TAG_UNNAMED_2004, *PTAG_UNNAMED_2004;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 25,
} TAG_UNNAMED_2005, *PTAG_UNNAMED_2005;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_2006, *PTAG_UNNAMED_2006;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 13,
  NRemainder = 18,
} TAG_UNNAMED_2007, *PTAG_UNNAMED_2007;

struct ITransaction
{
}; /* size: 0x0008 */

typedef enum
{
  memory_changeIdx = 0,
  new_memory_size_mbIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2008, *PTAG_UNNAMED_2008;

class XeSqlPkg::databases_bulk_insert_throughput
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_599[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

struct SOSHOST_CACHESTORE_COOKIE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NBitsPerWord = 32,
  NWords = 3,
  NRemainder = 19,
} TAG_UNNAMED_2009, *PTAG_UNNAMED_2009;

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2010, *PTAG_UNNAMED_2010;

class WaitForGraphVertex
{
  /* 0x0000 */ long Padding_600[2];
  /* 0x0008 */ class WaitForGraphVertex* m_nextToBeVisitedVertex;
  /* 0x0010 */ class WaitForGraphVertex* m_nextVisitedVertex;
  /* 0x0018 */ class WaitForGraphVertex* m_nextVictimVertex;
  /* 0x0020 */ unsigned int m_Id;
  /* 0x0024 */ long Padding_601;
  /* 0x0028 */ class WaitForGraph* m_Wfg;
  /* 0x0030 */ enum WaitForGraphVertex::WaitForGraphVertexState m_State;
  /* 0x0034 */ enum WaitForGraphVertex::WaitForGraphVertexColour m_Colour;
  /* 0x0038 */ unsigned int m_SccId;
  /* 0x003c */ unsigned int m_Outdegree;
  /* 0x0040 */ unsigned int m_Indegree;
  /* 0x0044 */ long Padding_602;
  /* 0x0048 */ class WaitForGraphEdge* m_FirstOutgoingEdge;
  /* 0x0050 */ class WaitForGraphEdge* m_FirstIncomingEdge;
  /* 0x0058 */ unsigned int m_NumSafeSuccessors;
  /* 0x005c */ unsigned int m_NumSafePredecessors;
  /* 0x0060 */ unsigned int m_TempNumSafeSuccessors;
  /* 0x0064 */ unsigned int m_TempNumSafePredecessors;
}; /* size: 0x0068 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2011, *PTAG_UNNAMED_2011;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2012, *PTAG_UNNAMED_2012;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2013, *PTAG_UNNAMED_2013;

class std::bad_exception
{
}; /* size: 0x0018 */

typedef enum
{
  calculatorIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2014, *PTAG_UNNAMED_2014;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2015, *PTAG_UNNAMED_2015;

typedef enum
{
  database_idIdx = 0,
  stop_markIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2016, *PTAG_UNNAMED_2016;

typedef struct __vc_attributes::retvalAttribute
{
} _vc_attributes::retvalAttribute, *P_vc_attributes::retvalAttribute; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_2017, *PTAG_UNNAMED_2017;

class PmoDumpHelper
{
  union
  {
    /* 0x0000 */ const unsigned long DMP_MAX_PAGES_PER_ALLOCATION;
    /* 0x0000 */ const unsigned __int64 NO_MULTIPAGE_ALLOCATIONS;
    /* 0x0000 */ const unsigned __int64 UNIFORM_PAGE_SIZE;
    /* 0x0000 */ const unsigned long DMP_MAX_PAGE_SIZE;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2018, *PTAG_UNNAMED_2018;

typedef enum
{
  brick_idIdx = 0,
  reply_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2019, *PTAG_UNNAMED_2019;

enum XeSqlPkg::lock_redo_blocked::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

typedef struct _IMAGE_DOS_HEADER
{
  /* 0x0000 */ unsigned short e_magic;
  /* 0x0002 */ unsigned short e_cblp;
  /* 0x0004 */ unsigned short e_cp;
  /* 0x0006 */ unsigned short e_crlc;
  /* 0x0008 */ unsigned short e_cparhdr;
  /* 0x000a */ unsigned short e_minalloc;
  /* 0x000c */ unsigned short e_maxalloc;
  /* 0x000e */ unsigned short e_ss;
  /* 0x0010 */ unsigned short e_sp;
  /* 0x0012 */ unsigned short e_csum;
  /* 0x0014 */ unsigned short e_ip;
  /* 0x0016 */ unsigned short e_cs;
  /* 0x0018 */ unsigned short e_lfarlc;
  /* 0x001a */ unsigned short e_ovno;
  /* 0x001c */ unsigned short e_res[4];
  /* 0x0024 */ unsigned short e_oemid;
  /* 0x0026 */ unsigned short e_oeminfo;
  /* 0x0028 */ unsigned short e_res2[10];
  /* 0x003c */ long e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER; /* size: 0x0040 */

typedef struct _PROCESSOR_IDLE_STATE
{
  /* 0x0000 */ unsigned char StateType;
  /* 0x0001 */ char Padding_603[3];
  /* 0x0004 */ unsigned long StateFlags;
  /* 0x0008 */ unsigned long HardwareLatency;
  /* 0x000c */ unsigned long Power;
  /* 0x0010 */ unsigned __int64 Context;
  /* 0x0018 */ void* Handler /* function */;
} PROCESSOR_IDLE_STATE, *PPROCESSOR_IDLE_STATE; /* size: 0x0020 */

typedef enum
{
  availability_group_idIdx = 0,
  dns_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2020, *PTAG_UNNAMED_2020;

typedef enum
{
  query_operator_node_idIdx = 0,
  query_thread_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2021, *PTAG_UNNAMED_2021;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_2022, *PTAG_UNNAMED_2022;

class DmpPointer<enum SOS_TIMERRESULT __cdecl(void *,unsigned long *,unsigned long *)>
{
  /* 0x0000 */ void* m_pRaw /* function */;
}; /* size: 0x0008 */

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_unique_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2023, *PTAG_UNNAMED_2023;

class XeSqlPkg::cursor_recompile
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

struct XEAction
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ struct XERelativeObjectId m_type;
  /* 0x0024 */ long Padding_604;
  /* 0x0028 */ void* m_func /* function */;
  /* 0x0030 */ struct XEObjectStorageDescriptor m_storage;
  /* 0x0040 */ void* m_pfnValidate /* function */;
}; /* size: 0x0048 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 34,
} TAG_UNNAMED_2024, *PTAG_UNNAMED_2024;

struct IFillLockBytes
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_2025, *PTAG_UNNAMED_2025;

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2026, *PTAG_UNNAMED_2026;

struct tagEMRFILLPATH
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
}; /* size: 0x0018 */

struct std::tr1::_Nil
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2027, *PTAG_UNNAMED_2027;

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_currentObject;
  /* 0x0018 */ class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_baseObject;
  /* 0x0020 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0028 */

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2028, *PTAG_UNNAMED_2028;

enum XeSqlPkg::sp_statement_starting::CustomizableSlots
{
  collect_object_nameSlot = 0,
  collect_statementSlot = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_2029, *PTAG_UNNAMED_2029;

class DmpPointer<enum SOS_TIMERRESULT (__cdecl*)(void *,unsigned long *,unsigned long *)>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2030, *PTAG_UNNAMED_2030;

typedef enum
{
  partition_idIdx = 0,
  replica_idIdx = 1,
  db_guidIdx = 2,
  db_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2031, *PTAG_UNNAMED_2031;

typedef struct _NDR_EXPR_DESC
{
  /* 0x0000 */ const unsigned short* pOffset;
  /* 0x0008 */ const unsigned char* pFormatExpr;
} NDR_EXPR_DESC, *PNDR_EXPR_DESC; /* size: 0x0010 */

class AutoSpinlockHolder<269,1,1>;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 4,
  VldEddOffset = -1,
  BufSize = 32,
} TAG_UNNAMED_2032, *PTAG_UNNAMED_2032;

class SpinlockHolder<14,19,1>;

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2033, *PTAG_UNNAMED_2033;

typedef struct _SERVER_INFO_599
{
  /* 0x0000 */ unsigned long sv599_sessopens;
  /* 0x0004 */ unsigned long sv599_sessvcs;
  /* 0x0008 */ unsigned long sv599_opensearch;
  /* 0x000c */ unsigned long sv599_sizreqbuf;
  /* 0x0010 */ unsigned long sv599_initworkitems;
  /* 0x0014 */ unsigned long sv599_maxworkitems;
  /* 0x0018 */ unsigned long sv599_rawworkitems;
  /* 0x001c */ unsigned long sv599_irpstacksize;
  /* 0x0020 */ unsigned long sv599_maxrawbuflen;
  /* 0x0024 */ unsigned long sv599_sessusers;
  /* 0x0028 */ unsigned long sv599_sessconns;
  /* 0x002c */ unsigned long sv599_maxpagedmemoryusage;
  /* 0x0030 */ unsigned long sv599_maxnonpagedmemoryusage;
  /* 0x0034 */ int sv599_enablesoftcompat;
  /* 0x0038 */ int sv599_enableforcedlogoff;
  /* 0x003c */ int sv599_timesource;
  /* 0x0040 */ int sv599_acceptdownlevelapis;
  /* 0x0044 */ int sv599_lmannounce;
  /* 0x0048 */ wchar_t* sv599_domain;
  /* 0x0050 */ unsigned long sv599_maxcopyreadlen;
  /* 0x0054 */ unsigned long sv599_maxcopywritelen;
  /* 0x0058 */ unsigned long sv599_minkeepsearch;
  /* 0x005c */ unsigned long sv599_maxkeepsearch;
  /* 0x0060 */ unsigned long sv599_minkeepcomplsearch;
  /* 0x0064 */ unsigned long sv599_maxkeepcomplsearch;
  /* 0x0068 */ unsigned long sv599_threadcountadd;
  /* 0x006c */ unsigned long sv599_numblockthreads;
  /* 0x0070 */ unsigned long sv599_scavtimeout;
  /* 0x0074 */ unsigned long sv599_minrcvqueue;
  /* 0x0078 */ unsigned long sv599_minfreeworkitems;
  /* 0x007c */ unsigned long sv599_xactmemsize;
  /* 0x0080 */ unsigned long sv599_threadpriority;
  /* 0x0084 */ unsigned long sv599_maxmpxct;
  /* 0x0088 */ unsigned long sv599_oplockbreakwait;
  /* 0x008c */ unsigned long sv599_oplockbreakresponsewait;
  /* 0x0090 */ int sv599_enableoplocks;
  /* 0x0094 */ int sv599_enableoplockforceclose;
  /* 0x0098 */ int sv599_enablefcbopens;
  /* 0x009c */ int sv599_enableraw;
  /* 0x00a0 */ int sv599_enablesharednetdrives;
  /* 0x00a4 */ unsigned long sv599_minfreeconnections;
  /* 0x00a8 */ unsigned long sv599_maxfreeconnections;
  /* 0x00ac */ unsigned long sv599_initsesstable;
  /* 0x00b0 */ unsigned long sv599_initconntable;
  /* 0x00b4 */ unsigned long sv599_initfiletable;
  /* 0x00b8 */ unsigned long sv599_initsearchtable;
  /* 0x00bc */ unsigned long sv599_alertschedule;
  /* 0x00c0 */ unsigned long sv599_errorthreshold;
  /* 0x00c4 */ unsigned long sv599_networkerrorthreshold;
  /* 0x00c8 */ unsigned long sv599_diskspacethreshold;
  /* 0x00cc */ unsigned long sv599_reserved;
  /* 0x00d0 */ unsigned long sv599_maxlinkdelay;
  /* 0x00d4 */ unsigned long sv599_minlinkthroughput;
  /* 0x00d8 */ unsigned long sv599_linkinfovalidtime;
  /* 0x00dc */ unsigned long sv599_scavqosinfoupdatetime;
  /* 0x00e0 */ unsigned long sv599_maxworkitemidletime;
  /* 0x00e4 */ long __PADDING__[1];
} SERVER_INFO_599, *PSERVER_INFO_599; /* size: 0x00e8 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2034, *PTAG_UNNAMED_2034;

struct _NDR_PROC_CONTEXT;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2035, *PTAG_UNNAMED_2035;

struct HKL__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class XE_EventLocation
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 m_fileIndex : 9; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 m_bufferNumber : 54; /* bit position: 9 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int m_eventOffset : 31; /* bit position: 0 */
}; /* size: 0x000c */

typedef enum
{
  database_idIdx = 0,
  new_target_timeIdx = 1,
  dirty_page_read_timeIdx = 2,
  dirty_page_countIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2036, *PTAG_UNNAMED_2036;

class TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  dopIdx = 2,
  file_countIdx = 3,
  max_range_lengthIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2037, *PTAG_UNNAMED_2037;

struct ISynchronizeMutex
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_2038, *PTAG_UNNAMED_2038;

typedef enum
{
  cma_addressIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2039, *PTAG_UNNAMED_2039;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 40,
} TAG_UNNAMED_2040, *PTAG_UNNAMED_2040;

typedef enum
{
  in_clone_loopIdx = 0,
  use_local_rowsetIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2041, *PTAG_UNNAMED_2041;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2042, *PTAG_UNNAMED_2042;

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >;

typedef enum
{
  error_numberIdx = 0,
  successIdx = 1,
  dtc_trasaction_tokenIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2043, *PTAG_UNNAMED_2043;

class DmpPointer<MemObjProxyLinkList>
{
  /* 0x0000 */ class MemObjProxyLinkList* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 13,
} TAG_UNNAMED_2044, *PTAG_UNNAMED_2044;

class XeSqlPkg::hadr_filestream_message_dir_create
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_605[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int root_idOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int directory_pathOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

struct MemoryObjectFactory::MemObjUsesFree<CMemObj>
{
}; /* size: 0x0001 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2045, *PTAG_UNNAMED_2045;

typedef enum
{
  successIdx = 0,
  current_stateIdx = 1,
  proposed_stateIdx = 2,
  target_stateIdx = 3,
  dbmgr_object_typeIdx = 4,
  group_idIdx = 5,
  replica_idIdx = 6,
  ag_database_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2046, *PTAG_UNNAMED_2046;

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_descriptorIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2047, *PTAG_UNNAMED_2047;

class EventManualInternal<PaddedSpinlock<SuspendQueueSLock> >;

struct std::_Iterator_base0
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_2048, *PTAG_UNNAMED_2048;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2049, *PTAG_UNNAMED_2049;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2050, *PTAG_UNNAMED_2050;

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  worker_idIdx = 7,
  range_idIdx = 8,
  original_worker_idIdx = 9,
  pages_in_rangeIdx = 10,
  pages_in_queueIdx = 11,
  outstanding_pagesIdx = 12,
  ranges_in_queueIdx = 13,
  start_keyIdx = 14,
  end_keyIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2051, *PTAG_UNNAMED_2051;

struct std::_Num_base
{
  union
  {
    /* 0x0000 */ enum std::float_denorm_style has_denorm;
    /* 0x0000 */ const BOOL has_denorm_loss;
    /* 0x0000 */ const BOOL has_infinity;
    /* 0x0000 */ const BOOL has_quiet_NaN;
    /* 0x0000 */ const BOOL has_signaling_NaN;
    /* 0x0000 */ const BOOL is_bounded;
    /* 0x0000 */ const BOOL is_exact;
    /* 0x0000 */ const BOOL is_iec559;
    /* 0x0000 */ const BOOL is_integer;
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const BOOL is_specialized;
    /* 0x0000 */ const BOOL tinyness_before;
    /* 0x0000 */ const BOOL traps;
    /* 0x0000 */ enum std::float_round_style round_style;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
    /* 0x0000 */ const int radix;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 100,
} TAG_UNNAMED_2052, *PTAG_UNNAMED_2052;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2053, *PTAG_UNNAMED_2053;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  cached_textIdx = 3,
  object_nameIdx = 4,
  database_nameIdx = 5,
  plan_handleIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2054, *PTAG_UNNAMED_2054;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2055, *PTAG_UNNAMED_2055;

typedef enum
{
  NStatic = 4,
  NCustomizable = 4,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 42,
} TAG_UNNAMED_2056, *PTAG_UNNAMED_2056;

struct tagHELPWININFOA
{
  /* 0x0000 */ int wStructSize;
  /* 0x0004 */ int x;
  /* 0x0008 */ int y;
  /* 0x000c */ int dx;
  /* 0x0010 */ int dy;
  /* 0x0014 */ int wMax;
  /* 0x0018 */ char rgchMember[2];
  /* 0x001a */ char __PADDING__[2];
}; /* size: 0x001c */

typedef struct _REPARSE_POINT_INFORMATION
{
  /* 0x0000 */ unsigned short ReparseDataLength;
  /* 0x0002 */ unsigned short UnparsedNameLength;
} REPARSE_POINT_INFORMATION, *PREPARSE_POINT_INFORMATION; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2057, *PTAG_UNNAMED_2057;

class XeSqlPkg::thread_cache_cache_event
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_606[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int session_matchOffset;
    /* 0x0000 */ const int cpu_matchOffset;
    /* 0x0000 */ const int last_session_idOffset;
    /* 0x0000 */ const int node_statusOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2058, *PTAG_UNNAMED_2058;

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  deadlock_idIdx = 11,
  object_idIdx = 12,
  associated_object_idIdx = 13,
  session_idIdx = 14,
  resource_owner_typeIdx = 15,
  resource_descriptionIdx = 16,
  database_nameIdx = 17,
  LastField = 18,
} TAG_UNNAMED_2059, *PTAG_UNNAMED_2059;

enum XeSqlPkg::lock_deadlock_chain::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

struct IMoniker
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 6,
} TAG_UNNAMED_2060, *PTAG_UNNAMED_2060;

typedef struct _wireBRECORD
{
  /* 0x0000 */ unsigned long fFlags;
  /* 0x0004 */ unsigned long clSize;
  /* 0x0008 */ struct IRecordInfo* pRecInfo;
  /* 0x0010 */ unsigned char* pRecord;
} wireBRECORD, *PwireBRECORD; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 18,
  NVld = 2,
  VldEddOffset = 15,
  BufSize = 90,
} TAG_UNNAMED_2061, *PTAG_UNNAMED_2061;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2062, *PTAG_UNNAMED_2062;

class AutoSpinlockHolder<63,16,1>;

typedef enum
{
  file_idIdx = 0,
  extent_idIdx = 1,
  is_loggedIdx = 2,
  rollbackIdx = 3,
  successIdx = 4,
  database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2063, *PTAG_UNNAMED_2063;

class XeDvmPkg::dvm_work_item_dequeued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_607[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 4,
  VldEddOffset = 2,
  BufSize = 48,
} TAG_UNNAMED_2064, *PTAG_UNNAMED_2064;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2065, *PTAG_UNNAMED_2065;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 13,
} TAG_UNNAMED_2066, *PTAG_UNNAMED_2066;

typedef struct _RESOURCEMANAGER_BASIC_INFORMATION
{
  /* 0x0000 */ struct _GUID ResourceManagerId;
  /* 0x0010 */ unsigned long DescriptionLength;
  /* 0x0014 */ wchar_t Description[1];
  /* 0x0016 */ char __PADDING__[2];
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION; /* size: 0x0018 */

typedef enum
{
  use_local_rowsetIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2067, *PTAG_UNNAMED_2067;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2068, *PTAG_UNNAMED_2068;

typedef enum
{
  latch_addressIdx = 0,
  duration_cyclesIdx = 1,
  sample_countIdx = 2,
  reference_countIdx = 3,
  total_duration_cyclesIdx = 4,
  promotion_threshold_cyclesIdx = 5,
  file_idIdx = 6,
  page_idIdx = 7,
  statusIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2069, *PTAG_UNNAMED_2069;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_2070, *PTAG_UNNAMED_2070;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2071, *PTAG_UNNAMED_2071;

struct BITMAPV4HEADER
{
  /* 0x0000 */ unsigned long bV4Size;
  /* 0x0004 */ long bV4Width;
  /* 0x0008 */ long bV4Height;
  /* 0x000c */ unsigned short bV4Planes;
  /* 0x000e */ unsigned short bV4BitCount;
  /* 0x0010 */ unsigned long bV4V4Compression;
  /* 0x0014 */ unsigned long bV4SizeImage;
  /* 0x0018 */ long bV4XPelsPerMeter;
  /* 0x001c */ long bV4YPelsPerMeter;
  /* 0x0020 */ unsigned long bV4ClrUsed;
  /* 0x0024 */ unsigned long bV4ClrImportant;
  /* 0x0028 */ unsigned long bV4RedMask;
  /* 0x002c */ unsigned long bV4GreenMask;
  /* 0x0030 */ unsigned long bV4BlueMask;
  /* 0x0034 */ unsigned long bV4AlphaMask;
  /* 0x0038 */ unsigned long bV4CSType;
  /* 0x003c */ struct tagICEXYZTRIPLE bV4Endpoints;
  /* 0x0060 */ unsigned long bV4GammaRed;
  /* 0x0064 */ unsigned long bV4GammaGreen;
  /* 0x0068 */ unsigned long bV4GammaBlue;
}; /* size: 0x006c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2072, *PTAG_UNNAMED_2072;

struct ISWbemObject
{
}; /* size: 0x0008 */

struct IWinInetCacheHints
{
}; /* size: 0x0008 */

typedef enum
{
  rowgroup_idIdx = 0,
  hobt_idIdx = 1,
  accessor_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2073, *PTAG_UNNAMED_2073;

struct tagENUMLOGFONTEXA
{
  /* 0x0000 */ struct tagLOGFONTA elfLogFont;
  /* 0x003c */ unsigned char elfFullName[64];
  /* 0x007c */ unsigned char elfStyle[32];
  /* 0x009c */ unsigned char elfScript[32];
}; /* size: 0x00bc */

struct tagENUMLOGFONTEXDVA
{
  /* 0x0000 */ struct tagENUMLOGFONTEXA elfEnumLogfontEx;
  /* 0x00bc */ struct tagDESIGNVECTOR elfDesignVector;
}; /* size: 0x0104 */

class AutoSpinlockHolder<326,1,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2074, *PTAG_UNNAMED_2074;

typedef enum
{
  timestampIdx = 0,
  scheduler_idIdx = 1,
  workerIdx = 2,
  node_idIdx = 3,
  ranges_in_queueIdx = 4,
  pages_in_queueIdx = 5,
  read_ahead_distanceIdx = 6,
  fixup_range_idIdx = 7,
  fixup_base_posIdx = 8,
  range_idIdx = 9,
  range_worker_idIdx = 10,
  range_base_posIdx = 11,
  adjusted_read_ahead_distanceIdx = 12,
  LastField = 13,
} TAG_UNNAMED_2075, *PTAG_UNNAMED_2075;

class Spinlock<307,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 0,
  VldEddOffset = 12,
  BufSize = 80,
} TAG_UNNAMED_2076, *PTAG_UNNAMED_2076;

class CAutoRegKey
{
  /* 0x0000 */ struct HKEY__* m_hk;
}; /* size: 0x0008 */

typedef enum
{
  query_textIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2077, *PTAG_UNNAMED_2077;

class XeDvmPkg::dvm_quiesced
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_608[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_2078, *PTAG_UNNAMED_2078;

struct XEPredicateSource
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ struct XERelativeObjectId m_type;
  /* 0x0024 */ long Padding_609;
  /* 0x0028 */ void* m_pfnSource /* function */;
  /* 0x0030 */ struct XEObjectStorageDescriptor m_storage;
  /* 0x0040 */ struct XEObjectStorageDescriptor m_sharedStorage;
}; /* size: 0x0050 */

class XE_XMLObjectString
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ struct XERelativeObjectId m_rid;
  /* 0x0014 */ long Padding_610;
  /* 0x0018 */ class XE_AutoRg<unsigned short> m_cacheString;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2079, *PTAG_UNNAMED_2079;

struct IDummyHICONIncluder
{
}; /* size: 0x0008 */

class CMD5Hash
{
  struct
  {
    /* 0x0000 */ unsigned long i[2];
    /* 0x0008 */ unsigned long buf[4];
    /* 0x0018 */ unsigned char in[64];
    /* 0x0058 */ unsigned char digest[16];
  } /* size: 0x0068 */ m_ctxContext;
}; /* size: 0x0068 */

class Hash128
{
  /* 0x0000 */ int sm_aesPresent;
  /* 0x0004 */ long Padding_611[3];
  /* 0x0010 */ class CMD5Hash m_md5Hash;
}; /* size: 0x0078 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 17,
} TAG_UNNAMED_2080, *PTAG_UNNAMED_2080;

typedef enum
{
  opcodeIdx = 0,
  database_idIdx = 1,
  file_idIdx = 2,
  page_idIdx = 3,
  rowset_idIdx = 4,
  call_durationIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2081, *PTAG_UNNAMED_2081;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 37,
} TAG_UNNAMED_2082, *PTAG_UNNAMED_2082;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2083, *PTAG_UNNAMED_2083;

struct tagLOGBRUSH32
{
  /* 0x0000 */ unsigned int lbStyle;
  /* 0x0004 */ unsigned long lbColor;
  /* 0x0008 */ unsigned long lbHatch;
}; /* size: 0x000c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 30,
} TAG_UNNAMED_2084, *PTAG_UNNAMED_2084;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  rowset_idIdx = 3,
  failure_reasonIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2085, *PTAG_UNNAMED_2085;

struct ISWbemLocator
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2086, *PTAG_UNNAMED_2086;

typedef enum
{
  node_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2087, *PTAG_UNNAMED_2087;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2088, *PTAG_UNNAMED_2088;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2089, *PTAG_UNNAMED_2089;

typedef enum
{
  database_idIdx = 0,
  resource_idIdx = 1,
  request_sourceIdx = 2,
  resource_typeIdx = 3,
  lock_modeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2090, *PTAG_UNNAMED_2090;

typedef enum
{
  number_pagesIdx = 0,
  first_page_file_idIdx = 1,
  first_page_idIdx = 2,
  page_file_offsetIdx = 3,
  numa_node_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2091, *PTAG_UNNAMED_2091;

class SpinlockHolder<255,1,1>;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2092, *PTAG_UNNAMED_2092;

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  modeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2093, *PTAG_UNNAMED_2093;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2094, *PTAG_UNNAMED_2094;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2095, *PTAG_UNNAMED_2095;

typedef enum
{
  addressIdx = 0,
  sizeIdx = 1,
  typeIdx = 2,
  current_countIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2096, *PTAG_UNNAMED_2096;

class SEList<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_2097, *PTAG_UNNAMED_2097;

typedef enum
{
  rowgroup_idIdx = 0,
  hobt_idIdx = 1,
  accessor_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2098, *PTAG_UNNAMED_2098;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 18,
} TAG_UNNAMED_2099, *PTAG_UNNAMED_2099;

struct IXMLDocument
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2100, *PTAG_UNNAMED_2100;

typedef enum
{
  database_idIdx = 0,
  sender_brick_idIdx = 1,
  receiver_brick_idIdx = 2,
  remote_database_segment_idIdx = 3,
  remote_database_segment_stateIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2101, *PTAG_UNNAMED_2101;

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  brick_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2102, *PTAG_UNNAMED_2102;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_2103, *PTAG_UNNAMED_2103;

typedef enum
{
  cred_prov_resultIdx = 0,
  cred_prov_nameIdx = 1,
  cred_prov_apiIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2104, *PTAG_UNNAMED_2104;

class Spinlock<294,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  percent_completeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2105, *PTAG_UNNAMED_2105;

typedef struct _PORT_VIEW
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_612;
  /* 0x0008 */ void* SectionHandle;
  /* 0x0010 */ unsigned long SectionOffset;
  /* 0x0014 */ long Padding_613;
  /* 0x0018 */ unsigned __int64 ViewSize;
  /* 0x0020 */ void* ViewBase;
  /* 0x0028 */ void* ViewRemoteBase;
} PORT_VIEW, *PPORT_VIEW; /* size: 0x0030 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2106, *PTAG_UNNAMED_2106;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2107, *PTAG_UNNAMED_2107;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 18,
  NVld = 0,
  VldEddOffset = 17,
  BufSize = 76,
} TAG_UNNAMED_2108, *PTAG_UNNAMED_2108;

typedef enum
{
  roster_sizeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2109, *PTAG_UNNAMED_2109;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2110, *PTAG_UNNAMED_2110;

struct tagBIND_OPTS2
{
  /* 0x0000 */ long Padding_614[4];
  /* 0x0010 */ unsigned long dwTrackFlags;
  /* 0x0014 */ unsigned long dwClassContext;
  /* 0x0018 */ unsigned long locale;
  /* 0x001c */ long Padding_615;
  /* 0x0020 */ struct _COSERVERINFO* pServerInfo;
}; /* size: 0x0028 */

struct ThrottlingSettingByNameSLock
{
}; /* size: 0x0004 */

struct HSTR__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2111, *PTAG_UNNAMED_2111;

typedef union _userHMETAFILE::__MIDL_IWinTypes_0004
{
  union
  {
    /* 0x0000 */ long hInproc;
    /* 0x0000 */ struct _BYTE_BLOB* hRemote;
    /* 0x0000 */ __int64 hInproc64;
  }; /* size: 0x0008 */
} userHMETAFILE::__MIDL_IWinTypes_0004, *PuserHMETAFILE::__MIDL_IWinTypes_0004; /* size: 0x0008 */

typedef struct _userHMETAFILE
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_616;
  /* 0x0008 */ union _userHMETAFILE::__MIDL_IWinTypes_0004 u;
} userHMETAFILE, *PuserHMETAFILE; /* size: 0x0010 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2112, *PTAG_UNNAMED_2112;

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  pathIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2113, *PTAG_UNNAMED_2113;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  index_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2114, *PTAG_UNNAMED_2114;

typedef enum
{
  manager_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2115, *PTAG_UNNAMED_2115;

class CAutoBase<void>
{
  /* 0x0000 */ void* m_pt;
}; /* size: 0x0008 */

struct PPM_IDLE_ACCOUNTING_EX
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long TotalTransitions;
  /* 0x0008 */ unsigned long ResetCount;
  /* 0x000c */ long Padding_617;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ struct PPM_IDLE_STATE_ACCOUNTING_EX State[1];
}; /* size: 0x01b8 */

typedef enum
{
  database_idIdx = 0,
  transaction_idIdx = 1,
  is_delayed_durableIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2116, *PTAG_UNNAMED_2116;

struct tagEMRSTRETCHBLT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long cxDest;
  /* 0x0024 */ long cyDest;
  /* 0x0028 */ unsigned long dwRop;
  /* 0x002c */ long xSrc;
  /* 0x0030 */ long ySrc;
  /* 0x0034 */ struct tagXFORM xformSrc;
  /* 0x004c */ unsigned long crBkColorSrc;
  /* 0x0050 */ unsigned long iUsageSrc;
  /* 0x0054 */ unsigned long offBmiSrc;
  /* 0x0058 */ unsigned long cbBmiSrc;
  /* 0x005c */ unsigned long offBitsSrc;
  /* 0x0060 */ unsigned long cbBitsSrc;
  /* 0x0064 */ long cxSrc;
  /* 0x0068 */ long cySrc;
}; /* size: 0x006c */

struct tagCANDIDATELIST
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwStyle;
  /* 0x0008 */ unsigned long dwCount;
  /* 0x000c */ unsigned long dwSelection;
  /* 0x0010 */ unsigned long dwPageStart;
  /* 0x0014 */ unsigned long dwPageSize;
  /* 0x0018 */ unsigned long dwOffset[1];
}; /* size: 0x001c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 13,
} TAG_UNNAMED_2117, *PTAG_UNNAMED_2117;

typedef enum
{
  create_logintoken_durationIdx = 0,
  is_sql_authenticationIdx = 1,
  is_cache_hitIdx = 2,
  is_db_authIdx = 3,
  is_publicIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2118, *PTAG_UNNAMED_2118;

class TypeListNode<enum WakeUpReason,TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 12,
} TAG_UNNAMED_2119, *PTAG_UNNAMED_2119;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2120, *PTAG_UNNAMED_2120;

struct IWbemHiPerfProvider
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2121, *PTAG_UNNAMED_2121;

typedef enum
{
  database_idIdx = 0,
  entity_idIdx = 1,
  universal_classIdx = 2,
  object_typeIdx = 3,
  assembly_idIdx = 4,
  owner_idIdx = 5,
  notification_typeIdx = 6,
  notification_contextIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2122, *PTAG_UNNAMED_2122;

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  eventIdx = 2,
  session_idIdx = 3,
  ec_idIdx = 4,
  file_idIdx = 5,
  page_idIdx = 6,
  au_id_longIdx = 7,
  au_id_shortIdx = 8,
  ls_ws_idIdx = 9,
  ls_sub_idIdx = 10,
  ls_nest_idIdx = 11,
  call_stackIdx = 12,
  LastField = 13,
} TAG_UNNAMED_2123, *PTAG_UNNAMED_2123;

struct RmtSessCacheSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 13,
  NVld = 1,
  VldEddOffset = 11,
  BufSize = 52,
} TAG_UNNAMED_2124, *PTAG_UNNAMED_2124;

class SpinlockHolder<173,3,1>;

struct tagEMREXCLUDECLIPRECT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclClip;
}; /* size: 0x0018 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2125, *PTAG_UNNAMED_2125;

class XeCloudMinPkg::async_transport_message_content
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_618[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int destination_type_groupOffset;
    /* 0x0000 */ const int message_handleOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_flagsOffset;
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int ack_sequence_numberOffset;
    /* 0x0000 */ const int message_countOffset;
    /* 0x0000 */ const int message_numberOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int message_contentOffset;
  }; /* size: 0x02d8 */
}; /* size: 0x0278 */

struct StaticStorage<1>
{
  /* 0x0000 */ unsigned int m_buf[1];
}; /* size: 0x0004 */

struct XBitmap<StaticStorage<1> >
{
  /* 0x0000 */ struct StaticStorage<1> m_storage;
}; /* size: 0x0004 */

class SpinlockHolder<253,1,1>
{
  /* 0x0000 */ class Spinlock<253,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_2126, *PTAG_UNNAMED_2126;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2127, *PTAG_UNNAMED_2127;

struct ISurrogateService
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2128, *PTAG_UNNAMED_2128;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2129, *PTAG_UNNAMED_2129;

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

typedef struct _HOTPATCH_HOOK_DESCRIPTOR
{
  /* 0x0000 */ unsigned __int64 TargetAddress;
  /* 0x0008 */ unsigned __int64 MappedAddress;
  /* 0x0010 */ unsigned long CodeOffset;
  /* 0x0014 */ unsigned long CodeSize;
  /* 0x0018 */ unsigned long OrigCodeOffset;
  /* 0x001c */ unsigned long ValidationOffset;
  /* 0x0020 */ unsigned long ValidationSize;
  /* 0x0024 */ long __PADDING__[1];
} HOTPATCH_HOOK_DESCRIPTOR, *PHOTPATCH_HOOK_DESCRIPTOR; /* size: 0x0028 */

typedef struct _SYSTEM_HOTPATCH_CODE_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long InfoSize;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned long DescriptorsCount;
      /* 0x0004 */ long Padding_619;
      /* 0x0010 */ struct _HOTPATCH_HOOK_DESCRIPTOR CodeDescriptors[1];
    } /* size: 0x0030 */ CodeInfo;
    struct
    {
      /* 0x0008 */ unsigned short NameOffset;
      /* 0x000a */ unsigned short NameLength;
    } /* size: 0x0004 */ KernelInfo;
    struct
    {
      /* 0x0008 */ unsigned short NameOffset;
      /* 0x000a */ unsigned short NameLength;
      /* 0x000c */ unsigned short TargetNameOffset;
      /* 0x000e */ unsigned short TargetNameLength;
      /* 0x0010 */ unsigned short ColdpatchImagePathOffset;
      /* 0x0012 */ unsigned short ColdpatchImagePathLength;
      /* 0x0014 */ unsigned char PatchingFinished;
      /* 0x0015 */ char __PADDING__[1];
    } /* size: 0x000e */ UserModeInfo;
    struct
    {
      /* 0x0008 */ unsigned short NameOffset;
      /* 0x000a */ unsigned short NameLength;
      /* 0x000c */ unsigned short TargetNameOffset;
      /* 0x000e */ unsigned short TargetNameLength;
      /* 0x0010 */ unsigned short ColdpatchImagePathOffset;
      /* 0x0012 */ unsigned short ColdpatchImagePathLength;
      /* 0x000c */ long Padding_620;
      /* 0x0018 */ unsigned __int64 TargetProcess;
    } /* size: 0x0018 */ InjectionInfo;
    struct
    {
      struct
      {
        /* 0x0008 */ unsigned __int64 ParentDirectory;
        /* 0x0010 */ unsigned __int64 ObjectHandle1;
        /* 0x0018 */ unsigned __int64 ObjectHandle2;
      } /* size: 0x0018 */ AtomicSwap;
      /* 0x0020 */ long __PADDING__[6];
    }; /* size: 0x0030 */
  }; /* size: 0x0030 */
} SYSTEM_HOTPATCH_CODE_INFORMATION, *PSYSTEM_HOTPATCH_CODE_INFORMATION; /* size: 0x0038 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2130, *PTAG_UNNAMED_2130;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_2131, *PTAG_UNNAMED_2131;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2132, *PTAG_UNNAMED_2132;

typedef enum
{
  manager_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2133, *PTAG_UNNAMED_2133;

typedef enum
{
  agent_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2134, *PTAG_UNNAMED_2134;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_2135, *PTAG_UNNAMED_2135;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2136, *PTAG_UNNAMED_2136;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2137, *PTAG_UNNAMED_2137;

typedef enum
{
  line_numberIdx = 0,
  inferred_typeIdx = 1,
  oledb_methodIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2138, *PTAG_UNNAMED_2138;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2139, *PTAG_UNNAMED_2139;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2140, *PTAG_UNNAMED_2140;

struct IWbemProviderInit
{
}; /* size: 0x0008 */

typedef enum
{
  required_remote_memory_pagesIdx = 0,
  additional_remote_memory_pages_preferredIdx = 1,
  additional_remote_memory_pages_actualIdx = 2,
  granted_local_memory_pagesIdx = 3,
  max_memory_pages_for_one_query_fragmentIdx = 4,
  max_total_wait_timeoutIdx = 5,
  local_waited_durationIdx = 6,
  remote_wait_time_limitIdx = 7,
  total_remote_memory_target_pagesIdx = 8,
  total_remote_memory_granted_pagesIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2141, *PTAG_UNNAMED_2141;

typedef enum
{
  dump_pointIdx = 0,
  remote_exchange_node_idIdx = 1,
  remote_exchange_thread_idIdx = 2,
  connect_brick_idIdx = 3,
  query_idIdx = 4,
  context_newidtIdx = 5,
  context_lasterrorIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2142, *PTAG_UNNAMED_2142;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 9,
} TAG_UNNAMED_2143, *PTAG_UNNAMED_2143;

struct IOleInPlaceActiveObject
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 39,
} TAG_UNNAMED_2144, *PTAG_UNNAMED_2144;

class XeSqlPkg::fulltext_reorganize_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_621[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int total_fragments_sizeOffset;
    /* 0x0000 */ const int fragments_countOffset;
    /* 0x0000 */ const int degree_of_parallelismOffset;
    /* 0x0000 */ const int destination_partition_countOffset;
    /* 0x0000 */ const int destination_fragment_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

enum XeSqlPkg::sp_cache_miss::CustomizableSlots
{
  collect_cached_textSlot = 0,
  collect_object_nameSlot = 1,
  collect_database_nameSlot = 2,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 44,
} TAG_UNNAMED_2145, *PTAG_UNNAMED_2145;

class XeSqlPkg::hadr_dump_log_block
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_622[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int log_block_sizeOffset;
    /* 0x0000 */ const int log_buffer_sizeOffset;
    /* 0x0000 */ const int fc_sequenceOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int message_log_idOffset;
    /* 0x0000 */ const int log_bufferOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

enum XeSqlPkg::module_end::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  lock_resultIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2146, *PTAG_UNNAMED_2146;

class XeSqlPkg::query_rx_allocating_buffers
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_623[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2147, *PTAG_UNNAMED_2147;

typedef enum
{
  num_sessionsIdx = 0,
  service_idIdx = 1,
  local_keyIdx = 2,
  service_addressIdx = 3,
  endpoint_typeIdx = 4,
  service_nameIdx = 5,
  service_instanceIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2148, *PTAG_UNNAMED_2148;

typedef struct _MESSAGE_RESOURCE_BLOCK
{
  /* 0x0000 */ unsigned long LowId;
  /* 0x0004 */ unsigned long HighId;
  /* 0x0008 */ unsigned long OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK; /* size: 0x000c */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2149, *PTAG_UNNAMED_2149;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_2150, *PTAG_UNNAMED_2150;

class Spinlock<138,4,1>
{
}; /* size: 0x0004 */

typedef enum
{
  dump_optionsIdx = 0,
  bucket_hintIdx = 1,
  dump_classIdx = 2,
  opcodeIdx = 3,
  messageIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2151, *PTAG_UNNAMED_2151;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_2152, *PTAG_UNNAMED_2152;

struct tagSERIALKEYSA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ char* lpszActivePort;
  /* 0x0010 */ char* lpszPort;
  /* 0x0018 */ unsigned int iBaudRate;
  /* 0x001c */ unsigned int iPortState;
  /* 0x0020 */ unsigned int iActive;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

typedef enum
{
  change_typeIdx = 0,
  endpoint_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2153, *PTAG_UNNAMED_2153;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2154, *PTAG_UNNAMED_2154;

struct ISWbemSinkEvents
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  index_idIdx = 2,
  method_nameIdx = 3,
  xml_pathIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2155, *PTAG_UNNAMED_2155;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  recovery_unit_idIdx = 2,
  files_countIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2156, *PTAG_UNNAMED_2156;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2157, *PTAG_UNNAMED_2157;

typedef enum
{
  Serialize = 1,
} TAG_UNNAMED_2158, *PTAG_UNNAMED_2158;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 22,
} TAG_UNNAMED_2159, *PTAG_UNNAMED_2159;

class XE_PublishedDescriptor
{
  union
  {
    /* 0x0000 */ const unsigned short ENUMERATION_END;
    /* 0x0000 */ enum XE_PublishedDescriptor::Flavor m_flavor;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_624;
  /* 0x0008 */ const struct XEType* m_type;
  /* 0x0010 */ const struct XEAction* m_action;
  /* 0x0018 */ class XE_PublishedDescriptor::DataSource m_dataSource;
  /* 0x0028 */ unsigned int m_length;
  /* 0x002c */ unsigned short m_packageId;
}; /* size: 0x0030 */

typedef enum
{
  flow_control_eventIdx = 0,
  endpoint_typeIdx = 1,
  pending_send_boxcarsIdx = 2,
  pending_recv_messagesIdx = 3,
  connection_idIdx = 4,
  addressIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2160, *PTAG_UNNAMED_2160;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2161, *PTAG_UNNAMED_2161;

struct IXMLError
{
}; /* size: 0x0008 */

typedef enum
{
  backup_worker_idIdx = 0,
  target_ageIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2162, *PTAG_UNNAMED_2162;

struct HadrArDbrMgrSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2163, *PTAG_UNNAMED_2163;

class XeSqlPkg::recovery_unit_new_dbsegment_id_set
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_625[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int recovery_unit_idOffset;
    /* 0x0000 */ const int old_database_segment_idOffset;
    /* 0x0000 */ const int new_database_segment_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  statusIdx = 2,
  cleanup_idIdx = 3,
  valueIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2164, *PTAG_UNNAMED_2164;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2165, *PTAG_UNNAMED_2165;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2166, *PTAG_UNNAMED_2166;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2167, *PTAG_UNNAMED_2167;

class CAutoBase<XE_AutoP<XEPackage0::BucketizingTarget::Entry> >
{
  /* 0x0000 */ class XE_AutoP<XEPackage0::BucketizingTarget::Entry>* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 3,
  VldEddOffset = 3,
  BufSize = 48,
} TAG_UNNAMED_2168, *PTAG_UNNAMED_2168;

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  is_loggedIdx = 2,
  rollbackIdx = 3,
  successIdx = 4,
  database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2169, *PTAG_UNNAMED_2169;

class CXColumn<unsigned char>
{
  /* 0x0000 */ long Padding_626[6];
  /* 0x0018 */ unsigned char* m_startPointer;
}; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2170, *PTAG_UNNAMED_2170;

typedef struct _PSINJECTDATA
{
  /* 0x0000 */ unsigned long DataBytes;
  /* 0x0004 */ unsigned short InjectionPoint;
  /* 0x0006 */ unsigned short PageNumber;
} PSINJECTDATA, *PPSINJECTDATA; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 6,
} TAG_UNNAMED_2171, *PTAG_UNNAMED_2171;

typedef enum
{
  count_cyclesIdx = 0,
  prev_stateIdx = 1,
  new_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2172, *PTAG_UNNAMED_2172;

struct IRpcProxyBuffer
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  consumer_idIdx = 1,
  log_block_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2173, *PTAG_UNNAMED_2173;

class CAutoP<XE_DeserializedMetadata>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2174, *PTAG_UNNAMED_2174;

typedef enum
{
  file_idIdx = 0,
  extent_idIdx = 1,
  is_loggedIdx = 2,
  rollbackIdx = 3,
  activateIdx = 4,
  database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2175, *PTAG_UNNAMED_2175;

typedef enum
{
  stream_updateIdx = 0,
  stream_statusIdx = 1,
  status_versionIdx = 2,
  error_codeIdx = 3,
  connection_idIdx = 4,
  error_messageIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2176, *PTAG_UNNAMED_2176;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 13,
} TAG_UNNAMED_2177, *PTAG_UNNAMED_2177;

class XeSqlPkg::logreader_start_scan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_627[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int start_scan_lsnOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 57,
} TAG_UNNAMED_2178, *PTAG_UNNAMED_2178;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2179, *PTAG_UNNAMED_2179;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2180, *PTAG_UNNAMED_2180;

typedef enum
{
  operationIdx = 0,
  control_block_addressIdx = 1,
  endpoint_typeIdx = 2,
  receives_postedIdx = 3,
  bytes_receivedIdx = 4,
  bytes_remainingIdx = 5,
  error_codeIdx = 6,
  connection_idIdx = 7,
  error_messageIdx = 8,
  addressIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2181, *PTAG_UNNAMED_2181;

typedef enum
{
  hresultIdx = 0,
  locationIdx = 1,
  descriptionIdx = 2,
  messageIdx = 3,
  workitem_descriptionIdx = 4,
  transaction_idIdx = 5,
  correlation_idsIdx = 6,
  logical_pathIdx = 7,
  physical_pathIdx = 8,
  original_pathIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2182, *PTAG_UNNAMED_2182;

typedef enum
{
  database_idIdx = 0,
  local_brick_idIdx = 1,
  local_operation_typeIdx = 2,
  database_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2183, *PTAG_UNNAMED_2183;

typedef enum
{
  endpoint_typeIdx = 0,
  portIdx = 1,
  clusterIdx = 2,
  addressIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2184, *PTAG_UNNAMED_2184;

typedef struct _CONSOLE_CURSOR_INFO
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ int bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO; /* size: 0x0008 */

class RefCountImpl<XEPackage0::XE_LiveWriter>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  eventIdx = 4,
  stateIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2185, *PTAG_UNNAMED_2185;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_2186, *PTAG_UNNAMED_2186;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2187, *PTAG_UNNAMED_2187;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2188, *PTAG_UNNAMED_2188;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2189, *PTAG_UNNAMED_2189;

typedef enum
{
  channel_map_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2190, *PTAG_UNNAMED_2190;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2191, *PTAG_UNNAMED_2191;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 20,
} TAG_UNNAMED_2192, *PTAG_UNNAMED_2192;

typedef struct _IMAGE_VXD_HEADER
{
  /* 0x0000 */ unsigned short e32_magic;
  /* 0x0002 */ unsigned char e32_border;
  /* 0x0003 */ unsigned char e32_worder;
  /* 0x0004 */ unsigned long e32_level;
  /* 0x0008 */ unsigned short e32_cpu;
  /* 0x000a */ unsigned short e32_os;
  /* 0x000c */ unsigned long e32_ver;
  /* 0x0010 */ unsigned long e32_mflags;
  /* 0x0014 */ unsigned long e32_mpages;
  /* 0x0018 */ unsigned long e32_startobj;
  /* 0x001c */ unsigned long e32_eip;
  /* 0x0020 */ unsigned long e32_stackobj;
  /* 0x0024 */ unsigned long e32_esp;
  /* 0x0028 */ unsigned long e32_pagesize;
  /* 0x002c */ unsigned long e32_lastpagesize;
  /* 0x0030 */ unsigned long e32_fixupsize;
  /* 0x0034 */ unsigned long e32_fixupsum;
  /* 0x0038 */ unsigned long e32_ldrsize;
  /* 0x003c */ unsigned long e32_ldrsum;
  /* 0x0040 */ unsigned long e32_objtab;
  /* 0x0044 */ unsigned long e32_objcnt;
  /* 0x0048 */ unsigned long e32_objmap;
  /* 0x004c */ unsigned long e32_itermap;
  /* 0x0050 */ unsigned long e32_rsrctab;
  /* 0x0054 */ unsigned long e32_rsrccnt;
  /* 0x0058 */ unsigned long e32_restab;
  /* 0x005c */ unsigned long e32_enttab;
  /* 0x0060 */ unsigned long e32_dirtab;
  /* 0x0064 */ unsigned long e32_dircnt;
  /* 0x0068 */ unsigned long e32_fpagetab;
  /* 0x006c */ unsigned long e32_frectab;
  /* 0x0070 */ unsigned long e32_impmod;
  /* 0x0074 */ unsigned long e32_impmodcnt;
  /* 0x0078 */ unsigned long e32_impproc;
  /* 0x007c */ unsigned long e32_pagesum;
  /* 0x0080 */ unsigned long e32_datapage;
  /* 0x0084 */ unsigned long e32_preload;
  /* 0x0088 */ unsigned long e32_nrestab;
  /* 0x008c */ unsigned long e32_cbnrestab;
  /* 0x0090 */ unsigned long e32_nressum;
  /* 0x0094 */ unsigned long e32_autodata;
  /* 0x0098 */ unsigned long e32_debuginfo;
  /* 0x009c */ unsigned long e32_debuglen;
  /* 0x00a0 */ unsigned long e32_instpreload;
  /* 0x00a4 */ unsigned long e32_instdemand;
  /* 0x00a8 */ unsigned long e32_heapsize;
  /* 0x00ac */ unsigned char e32_res3[12];
  /* 0x00b8 */ unsigned long e32_winresoff;
  /* 0x00bc */ unsigned long e32_winreslen;
  /* 0x00c0 */ unsigned short e32_devid;
  /* 0x00c2 */ unsigned short e32_ddkver;
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER; /* size: 0x00c4 */

class XeSqlPkg::database_segment_state_change_notification
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_628[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int sender_brick_idOffset;
    /* 0x0000 */ const int receiver_brick_idOffset;
    /* 0x0000 */ const int new_segment_stateOffset;
    /* 0x0000 */ const int new_matrix_stateOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

typedef enum
{
  thread_idIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2193, *PTAG_UNNAMED_2193;

typedef enum
{
  sort_warning_typeIdx = 0,
  query_operation_node_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2194, *PTAG_UNNAMED_2194;

typedef enum
{
  message_typeIdx = 0,
  file_idIdx = 1,
  page_idIdx = 2,
  statusIdx = 3,
  read_ahead_countIdx = 4,
  message_log_idIdx = 5,
  minimum_lsnIdx = 6,
  page_lsnIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2195, *PTAG_UNNAMED_2195;

typedef enum
{
  query_operation_node_idIdx = 0,
  opcodeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2196, *PTAG_UNNAMED_2196;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 40,
} TAG_UNNAMED_2197, *PTAG_UNNAMED_2197;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2198, *PTAG_UNNAMED_2198;

class CAutoRg<XE_AutoRg<unsigned short> >
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2199, *PTAG_UNNAMED_2199;

typedef enum
{
  operationIdx = 0,
  message_classIdx = 1,
  message_protocolIdx = 2,
  message_sizeIdx = 3,
  encrypted_offsetIdx = 4,
  global_pending_messagesIdx = 5,
  connection_pending_messagesIdx = 6,
  endpoint_typeIdx = 7,
  connection_idIdx = 8,
  addressIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2200, *PTAG_UNNAMED_2200;

struct tagRAWINPUTDEVICE
{
  /* 0x0000 */ unsigned short usUsagePage;
  /* 0x0002 */ unsigned short usUsage;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ struct HWND__* hwndTarget;
}; /* size: 0x0010 */

class SpinlockHolder<289,1,1>;

typedef enum
{
  killed_process_idIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2201, *PTAG_UNNAMED_2201;

typedef enum
{
  message_log_idIdx = 0,
  flushed_logIdx = 1,
  end_of_logIdx = 2,
  redo_pointIdx = 3,
  log_truncation_blockIdx = 4,
  hadr_truncation_blockIdx = 5,
  recovery_pointIdx = 6,
  sync_hardened_pointIdx = 7,
  minimum_skip_lsnIdx = 8,
  hardened_skip_lsnIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2202, *PTAG_UNNAMED_2202;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2203, *PTAG_UNNAMED_2203;

typedef enum
{
  channel_map_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2204, *PTAG_UNNAMED_2204;

struct XEMessage
{
  /* 0x0000 */ struct XEObject m_object;
}; /* size: 0x0020 */

enum XeSqlPkg::begin_tran_starting::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef struct _OSVERSIONINFOEXA
{
  /* 0x0000 */ unsigned long dwOSVersionInfoSize;
  /* 0x0004 */ unsigned long dwMajorVersion;
  /* 0x0008 */ unsigned long dwMinorVersion;
  /* 0x000c */ unsigned long dwBuildNumber;
  /* 0x0010 */ unsigned long dwPlatformId;
  /* 0x0014 */ char szCSDVersion[128];
  /* 0x0094 */ unsigned short wServicePackMajor;
  /* 0x0096 */ unsigned short wServicePackMinor;
  /* 0x0098 */ unsigned short wSuiteMask;
  /* 0x009a */ unsigned char wProductType;
  /* 0x009b */ unsigned char wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA; /* size: 0x009c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 14,
  NVld = 3,
  VldEddOffset = 10,
  BufSize = 83,
} TAG_UNNAMED_2205, *PTAG_UNNAMED_2205;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2206, *PTAG_UNNAMED_2206;

typedef struct _RTL_LFG_RNG_STATE
{
  /* 0x0000 */ long SeedArray[56];
  /* 0x00e0 */ long Next;
  /* 0x00e4 */ long NextP;
} RTL_LFG_RNG_STATE, *PRTL_LFG_RNG_STATE; /* size: 0x00e8 */

typedef enum
{
  operationIdx = 0,
  message_classIdx = 1,
  message_protocolIdx = 2,
  message_sizeIdx = 3,
  encrypted_offsetIdx = 4,
  boxcar_addressIdx = 5,
  message_ref_addressIdx = 6,
  endpoint_typeIdx = 7,
  connection_idIdx = 8,
  addressIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2207, *PTAG_UNNAMED_2207;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2208, *PTAG_UNNAMED_2208;

typedef union _MCI_STATS
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned short McaErrorCode;
      /* 0x0002 */ unsigned short ModelErrorCode;
      struct /* bitfield */
      {
        /* 0x0004 */ unsigned long OtherInformation : 25; /* bit position: 0 */
        /* 0x0004 */ unsigned long ContextCorrupt : 1; /* bit position: 25 */
        /* 0x0004 */ unsigned long AddressValid : 1; /* bit position: 26 */
        /* 0x0004 */ unsigned long MiscValid : 1; /* bit position: 27 */
        /* 0x0004 */ unsigned long ErrorEnabled : 1; /* bit position: 28 */
        /* 0x0004 */ unsigned long UncorrectedError : 1; /* bit position: 29 */
        /* 0x0004 */ unsigned long StatusOverFlow : 1; /* bit position: 30 */
        /* 0x0004 */ unsigned long Valid : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0008 */ MciStatus;
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} MCI_STATS, *PMCI_STATS; /* size: 0x0008 */

typedef enum
{
  endpoint_typeIdx = 0,
  proxied_endpoint_typeIdx = 1,
  hop_countIdx = 2,
  addressIdx = 3,
  correlator_idIdx = 4,
  connection_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2209, *PTAG_UNNAMED_2209;

typedef struct _s__CatchableType
{
  /* 0x0000 */ unsigned int properties;
  /* 0x0004 */ struct _TypeDescriptor* pType;
  /* 0x000c */ struct _PMD thisDisplacement;
  /* 0x0018 */ int sizeOrOffset;
  /* 0x001c */ void* copyFunction /* function */;
} s__CatchableType, *Ps__CatchableType; /* size: 0x0024 */

typedef enum
{
  agent_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2210, *PTAG_UNNAMED_2210;

struct IPropertySetStorage
{
}; /* size: 0x0008 */

typedef enum
{
  waiters_per_flushIdx = 0,
  duration_msIdx = 1,
  waitersIdx = 2,
  flushes_per_secIdx = 3,
  next_sample_duration_msIdx = 4,
  next_sample_indexIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2211, *PTAG_UNNAMED_2211;

typedef struct _IMAGE_SYMBOL
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned char ShortName[8];
      struct
      {
        /* 0x0000 */ unsigned long Short;
        /* 0x0004 */ unsigned long Long;
      } /* size: 0x0008 */ Name;
      /* 0x0000 */ unsigned long LongName[2];
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ N;
  /* 0x0008 */ unsigned long Value;
  /* 0x000c */ short SectionNumber;
  /* 0x000e */ unsigned short Type;
  /* 0x0010 */ unsigned char StorageClass;
  /* 0x0011 */ unsigned char NumberOfAuxSymbols;
} IMAGE_SYMBOL, *PIMAGE_SYMBOL; /* size: 0x0012 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 28,
} TAG_UNNAMED_2212, *PTAG_UNNAMED_2212;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2213, *PTAG_UNNAMED_2213;

class AutoSpinlockHolder<47,18,1>;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2214, *PTAG_UNNAMED_2214;

typedef struct _WKSTA_INFO_1062
{
  /* 0x0000 */ unsigned long wki1062_read_ahead_throughput;
} WKSTA_INFO_1062, *PWKSTA_INFO_1062; /* size: 0x0004 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2215, *PTAG_UNNAMED_2215;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 11,
  NVld = 1,
  VldEddOffset = 9,
  BufSize = 61,
} TAG_UNNAMED_2216, *PTAG_UNNAMED_2216;

typedef enum
{
  pagesIdx = 0,
  rowsIdx = 1,
  bitsIdx = 2,
  numa_node_idIdx = 3,
  actual_densityIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2217, *PTAG_UNNAMED_2217;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2218, *PTAG_UNNAMED_2218;

class XE_CXTimelineReader
{
  /* 0x0000 */ class XE_CXFileReader m_reader;
  /* 0x0288 */ unsigned long m_timelinePosition;
  /* 0x028c */ long Padding_629;
  /* 0x0290 */ unsigned __int64 m_intervalBetweenEntries;
  /* 0x0298 */ __int64 m_firstEntryTime;
  /* 0x02a0 */ unsigned long m_lastEntry;
  /* 0x02a4 */ long Padding_630;
  /* 0x02a8 */ class XE_ILogReadMessageHandler* m_msgHandler;
}; /* size: 0x02b0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 32,
} TAG_UNNAMED_2219, *PTAG_UNNAMED_2219;

struct ISWbemLastError
{
}; /* size: 0x0008 */

typedef enum
{
  source_database_idIdx = 0,
  object_typeIdx = 1,
  object_idIdx = 2,
  nest_levelIdx = 3,
  cpu_timeIdx = 4,
  durationIdx = 5,
  estimated_rowsIdx = 6,
  estimated_costIdx = 7,
  object_nameIdx = 8,
  showplan_xmlIdx = 9,
  database_nameIdx = 10,
  LastField = 11,
} TAG_UNNAMED_2220, *PTAG_UNNAMED_2220;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 32,
} TAG_UNNAMED_2221, *PTAG_UNNAMED_2221;

struct tagMINIMIZEDMETRICS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iWidth;
  /* 0x0008 */ int iHorzGap;
  /* 0x000c */ int iVertGap;
  /* 0x0010 */ int iArrange;
}; /* size: 0x0014 */

class XE_AutoP<XE_FileBufferEnum>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2222, *PTAG_UNNAMED_2222;

class XEPackage0::OrphanKey
{
  /* 0x0000 */ const struct XEEventBufferHeader* m_pEvent;
  /* 0x0008 */ const struct XEEvent* m_pEventMd;
  /* 0x0010 */ struct XEPackage0::Source* m_pSource;
  /* 0x0018 */ int m_hashCache;
  /* 0x001c */ int m_isTemp;
  /* 0x0020 */ int m_count;
  /* 0x0024 */ long Padding_631;
  /* 0x0028 */ const class XE_LiveSessionMetadata* m_metadata;
}; /* size: 0x0030 */

class XEPackage0::OrphanEntry
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class XEPackage0::OrphanKey m_key;
  /* 0x0040 */ int m_isUsed;
}; /* size: 0x0048 */

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  lock_resultIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2223, *PTAG_UNNAMED_2223;

struct IOleClientSite
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2224, *PTAG_UNNAMED_2224;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2225, *PTAG_UNNAMED_2225;

typedef enum
{
  availability_group_idIdx = 0,
  local_availability_replica_idIdx = 1,
  target_availability_replica_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2226, *PTAG_UNNAMED_2226;

typedef enum
{
  acknowledgement_typeIdx = 0,
  is_initiatorIdx = 1,
  fragment_numberIdx = 2,
  acknowledgement_fragment_numberIdx = 3,
  message_sequenceIdx = 4,
  acknowlegment_message_sequenceIdx = 5,
  priorityIdx = 6,
  is_honor_broker_priorityIdx = 7,
  conversation_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2227, *PTAG_UNNAMED_2227;

typedef enum
{
  compile_timeIdx = 0,
  convert_issueIdx = 1,
  expressionIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2228, *PTAG_UNNAMED_2228;

typedef struct _RTL_RXACT_CONTEXT
{
  /* 0x0000 */ void* RootRegistryKey;
  /* 0x0008 */ void* RXactKey;
  /* 0x0010 */ unsigned char HandlesValid;
  /* 0x0011 */ char Padding_632[7];
  /* 0x0018 */ struct _RTL_RXACT_LOG* RXactLog;
} RTL_RXACT_CONTEXT, *PRTL_RXACT_CONTEXT; /* size: 0x0020 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2229, *PTAG_UNNAMED_2229;

class AutoSpinlockHolder<88,12,1>;

typedef enum
{
  destination_idIdx = 0,
  stream_statusIdx = 1,
  error_codeIdx = 2,
  connection_idIdx = 3,
  target_addressIdx = 4,
  error_messageIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2230, *PTAG_UNNAMED_2230;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 17,
} TAG_UNNAMED_2231, *PTAG_UNNAMED_2231;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_2232, *PTAG_UNNAMED_2232;

typedef enum
{
  endpoint_typeIdx = 0,
  parent_endpoint_typeIdx = 1,
  proxied_endpoint_typeIdx = 2,
  hop_countIdx = 3,
  statusIdx = 4,
  addressIdx = 5,
  correlator_idIdx = 6,
  connection_idIdx = 7,
  parent_connection_idIdx = 8,
  parent_connect_stringIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2233, *PTAG_UNNAMED_2233;

struct std::tr1::_Get_align<short>
{
  /* 0x0000 */ short _Elt0;
  /* 0x0002 */ char _Elt1;
  /* 0x0003 */ char Padding_633;
  /* 0x0004 */ short _Elt2;
}; /* size: 0x0006 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2234, *PTAG_UNNAMED_2234;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2235, *PTAG_UNNAMED_2235;

struct IErrorLog
{
}; /* size: 0x0008 */

typedef enum
{
  source_database_idIdx = 0,
  object_typeIdx = 1,
  object_idIdx = 2,
  nest_levelIdx = 3,
  estimated_rowsIdx = 4,
  estimated_costIdx = 5,
  object_nameIdx = 6,
  showplan_xmlIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2236, *PTAG_UNNAMED_2236;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2237, *PTAG_UNNAMED_2237;

class XE_AutoP<ColumnDescriptor>
{
}; /* size: 0x0008 */

enum XeSqlPkg::query_pre_execution_showplan::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef struct _PROCESS_WS_WATCH_INFORMATION
{
  /* 0x0000 */ void* FaultingPc;
  /* 0x0008 */ void* FaultingVa;
} PROCESS_WS_WATCH_INFORMATION, *PPROCESS_WS_WATCH_INFORMATION; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_2238, *PTAG_UNNAMED_2238;

class CAutoBase<XEPackage0::OrphanEntry>
{
  /* 0x0000 */ class XEPackage0::OrphanEntry* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 3,
  VldEddOffset = 5,
  BufSize = 44,
} TAG_UNNAMED_2239, *PTAG_UNNAMED_2239;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2240, *PTAG_UNNAMED_2240;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 24,
  NVld = 1,
  VldEddOffset = 22,
  BufSize = 192,
} TAG_UNNAMED_2241, *PTAG_UNNAMED_2241;

class XeSqlPkg::recovery_in_rollback
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_634[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  database_idIdx = 2,
  modeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2242, *PTAG_UNNAMED_2242;

typedef enum
{
  error_numberIdx = 0,
  severityIdx = 1,
  stateIdx = 2,
  user_definedIdx = 3,
  categoryIdx = 4,
  destinationIdx = 5,
  is_interceptedIdx = 6,
  messageIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2243, *PTAG_UNNAMED_2243;

typedef struct _EXCEPTION_DEBUG_INFO
{
  /* 0x0000 */ struct _EXCEPTION_RECORD ExceptionRecord;
  /* 0x0098 */ unsigned long dwFirstChance;
  /* 0x009c */ long __PADDING__[1];
} EXCEPTION_DEBUG_INFO, *PEXCEPTION_DEBUG_INFO; /* size: 0x00a0 */

typedef enum
{
  object_idIdx = 0,
  database_idIdx = 1,
  database_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2244, *PTAG_UNNAMED_2244;

struct XE_TArray<XECustomizableAttribute,6>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[6];
}; /* size: 0x0150 */

struct XE_TEvent<4,6,6>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,6> m_customizableAttr;
  /* 0x01f0 */ struct XE_TArray<XEDataAttribute,6> m_dynamicAttr;
  /* 0x02e0 */ struct XEEvent m_event;
}; /* size: 0x0328 */

class XeSqlPkg::filestream_file_io_request
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,6,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_635[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int workitem_descriptionOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int correlation_idsOffset;
    /* 0x0000 */ const int logical_pathOffset;
    /* 0x0000 */ const int physical_pathOffset;
    /* 0x0000 */ const int original_pathOffset;
  }; /* size: 0x0328 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 26,
} TAG_UNNAMED_2245, *PTAG_UNNAMED_2245;

enum XeSqlPkg::full_text_crawl_stopped::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

class XeSqlPkg::dtc_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_636[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int isolation_levelOffset;
    /* 0x0000 */ const int transaction_stateOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int unit_of_work_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

typedef enum
{
  availability_group_idIdx = 0,
  sql_instance_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2246, *PTAG_UNNAMED_2246;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  transaction_id_countIdx = 3,
  encoded_dataIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2247, *PTAG_UNNAMED_2247;

struct IXMLElementCollection
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2248, *PTAG_UNNAMED_2248;

struct IPSFactoryBuffer
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 48,
} TAG_UNNAMED_2249, *PTAG_UNNAMED_2249;

typedef enum
{
  log_block_idIdx = 0,
  file_idIdx = 1,
  hadr_database_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2250, *PTAG_UNNAMED_2250;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE; /* size: 0x000c */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2251, *PTAG_UNNAMED_2251;

typedef enum
{
  query_operator_node_idIdx = 0,
  query_thread_idIdx = 1,
  is_const_vectorIdx = 2,
  row_countIdx = 3,
  normalized_data_countIdx = 4,
  unnormalized_data_countIdx = 5,
  null_data_countIdx = 6,
  column_nameIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2252, *PTAG_UNNAMED_2252;

typedef enum
{
  accessorIdx = 0,
  rowIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2253, *PTAG_UNNAMED_2253;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2254, *PTAG_UNNAMED_2254;

typedef enum
{
  edge_pool_sizeIdx = 0,
  edge_pool_utilizationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2255, *PTAG_UNNAMED_2255;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_2256, *PTAG_UNNAMED_2256;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  general_pmo_addressIdx = 2,
  general_pmo_utilizationIdx = 3,
  gwfg_pmo_addressIdx = 4,
  gwfg_pmo_utilizationIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2257, *PTAG_UNNAMED_2257;

typedef enum
{
  agent_idIdx = 0,
  agent_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2258, *PTAG_UNNAMED_2258;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2259, *PTAG_UNNAMED_2259;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  is_log_fileIdx = 3,
  modification_typeIdx = 4,
  new_valueIdx = 5,
  is_growth_by_percentageIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2260, *PTAG_UNNAMED_2260;

struct IXMLElement2
{
}; /* size: 0x0008 */

class XeSqlPkg::collect_all_UDFInvokeExternal
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_637[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

typedef enum
{
  file_idIdx = 0,
  page_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2261, *PTAG_UNNAMED_2261;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 22,
} TAG_UNNAMED_2262, *PTAG_UNNAMED_2262;

typedef enum
{
  brick_idIdx = 0,
  agent_idIdx = 1,
  agent_addressIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2263, *PTAG_UNNAMED_2263;

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  update_typeIdx = 2,
  from_brick_idIdx = 3,
  database_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2264, *PTAG_UNNAMED_2264;

enum XeSqlPkg::sp_server_diagnostics_component_result::CustomizableSlots
{
  collect_dataSlot = 0,
};

typedef struct __vc_attributes::async_uuidAttribute
{
  /* 0x0000 */ const char* uuid;
} _vc_attributes::async_uuidAttribute, *P_vc_attributes::async_uuidAttribute; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2265, *PTAG_UNNAMED_2265;

class CAutoP<PackageEntry>
{
}; /* size: 0x0008 */

class TChildEnumerator<GlobalSchedulerEnum,SOS_Scheduler,TEnumerator<TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock> >,MemObjProxy>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_2266, *PTAG_UNNAMED_2266;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_2267, *PTAG_UNNAMED_2267;

class CAutoP<ActionTransformRule>
{
}; /* size: 0x0008 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

typedef enum
{
  error_numberIdx = 0,
  open_modeIdx = 1,
  file_pathIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2268, *PTAG_UNNAMED_2268;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 24,
} TAG_UNNAMED_2269, *PTAG_UNNAMED_2269;

class AESFastHash128
{
  /* 0x0000 */ unsigned __int64 m_hash[2];
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2270, *PTAG_UNNAMED_2270;

typedef enum
{
  sequence_idIdx = 0,
  persisted_valueIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2271, *PTAG_UNNAMED_2271;

typedef enum
{
  vertex_pool_sizeIdx = 0,
  vertex_pool_utilizationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2272, *PTAG_UNNAMED_2272;

struct TClassName<double,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_2273, *PTAG_UNNAMED_2273;

class XeSqlPkg::oledb_provider_information
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_638[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int propertiesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2274, *PTAG_UNNAMED_2274;

typedef enum
{
  successIdx = 0,
  current_stateIdx = 1,
  target_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2275, *PTAG_UNNAMED_2275;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 25,
} TAG_UNNAMED_2276, *PTAG_UNNAMED_2276;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2277, *PTAG_UNNAMED_2277;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2278, *PTAG_UNNAMED_2278;

class CAutoRg<unsigned short>
{
}; /* size: 0x0008 */

typedef enum
{
  api_idIdx = 0,
  resultIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2279, *PTAG_UNNAMED_2279;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2280, *PTAG_UNNAMED_2280;

struct EVENT_INSTANCE_INFO
{
  /* 0x0000 */ void* RegHandle;
  /* 0x0008 */ unsigned long InstanceId;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  resource_idIdx = 1,
  request_sourceIdx = 2,
  resource_typeIdx = 3,
  lock_modeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2281, *PTAG_UNNAMED_2281;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2282, *PTAG_UNNAMED_2282;

typedef struct _SHARE_INFO_0
{
  /* 0x0000 */ wchar_t* shi0_netname;
} SHARE_INFO_0, *PSHARE_INFO_0; /* size: 0x0008 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2283, *PTAG_UNNAMED_2283;

typedef enum
{
  request_typeIdx = 0,
  file_byte_offsetIdx = 1,
  file_byte_countIdx = 2,
  bytes_readIdx = 3,
  request_idIdx = 4,
  file_pathIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2284, *PTAG_UNNAMED_2284;

struct BitOrdinal<4096>
{
}; /* size: 0x0001 */

typedef enum
{
  queue_idIdx = 0,
  database_idIdx = 1,
  database_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2285, *PTAG_UNNAMED_2285;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2286, *PTAG_UNNAMED_2286;

enum XeSqlPkg::broker_queue_disabled::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

struct ISourcesRowset
{
}; /* size: 0x0008 */

typedef enum
{
  control_actionIdx = 0,
  durationIdx = 1,
  availability_group_idIdx = 2,
  local_availability_replica_idIdx = 3,
  target_availability_replica_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2287, *PTAG_UNNAMED_2287;

class XeSqlPkg::hadr_wsfc_change_notifier_status
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_639[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int current_statusOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_2288, *PTAG_UNNAMED_2288;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 3,
  VldEddOffset = 1,
  BufSize = 36,
} TAG_UNNAMED_2289, *PTAG_UNNAMED_2289;

struct IFontDisp
{
}; /* size: 0x0008 */

typedef enum
{
  new_transaction_startedIdx = 0,
  statementIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2290, *PTAG_UNNAMED_2290;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_2291, *PTAG_UNNAMED_2291;

typedef enum
{
  message_opcodeIdx = 0,
  time_frameIdx = 1,
  truncate_logIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2292, *PTAG_UNNAMED_2292;

typedef enum
{
  inputIdx = 0,
  outputIdx = 1,
  read_aheadIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2293, *PTAG_UNNAMED_2293;

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  index_idIdx = 2,
  method_nameIdx = 3,
  xml_pathIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2294, *PTAG_UNNAMED_2294;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2295, *PTAG_UNNAMED_2295;

struct IWbemEventSink
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_2296, *PTAG_UNNAMED_2296;

typedef enum
{
  reserveIdx = 0,
  releaseIdx = 1,
  resultIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2297, *PTAG_UNNAMED_2297;

typedef enum
{
  database_idIdx = 0,
  recovery_log_bytesIdx = 1,
  recovery_log_read_time_estimateIdx = 2,
  recovery_log_target_timeIdx = 3,
  dirty_page_read_timeIdx = 4,
  dirty_page_countIdx = 5,
  dirty_page_target_timeIdx = 6,
  page_writes_loggedIdx = 7,
  page_writes_not_loggedIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2298, *PTAG_UNNAMED_2298;

struct IProcessInitControl
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2299, *PTAG_UNNAMED_2299;

typedef enum
{
  is_cachedIdx = 0,
  is_recoveredIdx = 1,
  is_dacIdx = 2,
  durationIdx = 3,
  cpu_timeIdx = 4,
  physical_readsIdx = 5,
  logical_readsIdx = 6,
  writesIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2300, *PTAG_UNNAMED_2300;

typedef enum
{
  log_operationIdx = 0,
  fsi_rowset_idIdx = 1,
  fsi_txt_file_id_lowIdx = 2,
  fsi_txt_file_id_highIdx = 3,
  fsi_col_offsetIdx = 4,
  fsi_current_lsnIdx = 5,
  fsi_base_lsnIdx = 6,
  fsi_filegroup_idIdx = 7,
  fsi_db_idIdx = 8,
  fsi_info_flagsIdx = 9,
  fsi_sizeIdx = 10,
  fsi_offsetIdx = 11,
  fsi_old_sizeIdx = 12,
  fsi_new_sizeIdx = 13,
  log_rowset_idIdx = 14,
  log_txt_file_id_lowIdx = 15,
  log_txt_file_id_highIdx = 16,
  log_current_lsnIdx = 17,
  log_base_lsnIdx = 18,
  log_filegroup_idIdx = 19,
  log_db_idIdx = 20,
  begin_lsnIdx = 21,
  end_lsnIdx = 22,
  LastField = 23,
} TAG_UNNAMED_2301, *PTAG_UNNAMED_2301;

struct BitOrdinal<16>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 23,
  NVld = 2,
  VldEddOffset = 20,
  BufSize = 152,
} TAG_UNNAMED_2302, *PTAG_UNNAMED_2302;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2303, *PTAG_UNNAMED_2303;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 2,
} TAG_UNNAMED_2304, *PTAG_UNNAMED_2304;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  transaction_local_stability_descriptor_countIdx = 3,
  encoded_dataIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2305, *PTAG_UNNAMED_2305;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2306, *PTAG_UNNAMED_2306;

class CAutoBase<XE_Log>
{
  /* 0x0000 */ class XE_Log* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  field_offsetIdx = 0,
  field_sizeIdx = 1,
  field_valueIdx = 2,
  field_nameIdx = 3,
  archive_file_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2307, *PTAG_UNNAMED_2307;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 32,
} TAG_UNNAMED_2308, *PTAG_UNNAMED_2308;

typedef struct _KCRM_PROTOCOL_BLOB
{
  /* 0x0000 */ struct _GUID ProtocolId;
  /* 0x0010 */ unsigned long StaticInfoLength;
  /* 0x0014 */ unsigned long TransactionIdInfoLength;
  /* 0x0018 */ unsigned long Unused1;
  /* 0x001c */ unsigned long Unused2;
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_2309, *PTAG_UNNAMED_2309;

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2310, *PTAG_UNNAMED_2310;

typedef enum
{
  stateIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2311, *PTAG_UNNAMED_2311;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2312, *PTAG_UNNAMED_2312;

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2313, *PTAG_UNNAMED_2313;

typedef struct __vc_attributes::atl::perfmonAttribute
{
  /* 0x0000 */ const char* name;
  /* 0x0008 */ BOOL register;
  /* 0x0009 */ char __PADDING__[7];
} _vc_attributes::atl::perfmonAttribute, *P_vc_attributes::atl::perfmonAttribute; /* size: 0x0010 */

typedef enum
{
  message_referenceIdx = 0,
  message_reference_countIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2314, *PTAG_UNNAMED_2314;

class CXFileReaderInterfaceNative
{
  /* 0x0000 */ long Padding_640[148];
  /* 0x0250 */ void* m_fileHandle;
  /* 0x0258 */ unsigned __int64 m_fileSize;
  /* 0x0260 */ unsigned long m_lastOsError;
  /* 0x0264 */ wchar_t m_errorDesc[260];
}; /* size: 0x0470 */

enum XeSqlPkg::lock_timeout::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

typedef enum
{
  error_numberIdx = 0,
  successIdx = 1,
  new_transaction_startedIdx = 2,
  statementIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2315, *PTAG_UNNAMED_2315;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2316, *PTAG_UNNAMED_2316;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
{
  /* 0x0000 */ unsigned long ControlFlags;
  union
  {
    /* 0x0004 */ unsigned long CpuRate;
    /* 0x0004 */ unsigned long Weight;
  }; /* size: 0x0004 */
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 0,
  VldEddOffset = 12,
  BufSize = 45,
} TAG_UNNAMED_2317, *PTAG_UNNAMED_2317;

class CAutoRefc<XEPackage0::XE_LiveWriter>
{
  /* 0x0000 */ class XEPackage0::XE_LiveWriter* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2318, *PTAG_UNNAMED_2318;

typedef enum
{
  object_idIdx = 0,
  database_idIdx = 1,
  cache_typeIdx = 2,
  versionIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2319, *PTAG_UNNAMED_2319;

struct tagDBOBJECT
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ struct _GUID iid;
}; /* size: 0x0014 */

typedef enum
{
  brick_idIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2320, *PTAG_UNNAMED_2320;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_2321, *PTAG_UNNAMED_2321;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  index_idIdx = 2,
  job_failure_typeIdx = 3,
  error_numberIdx = 4,
  error_severityIdx = 5,
  error_stateIdx = 6,
  job_idIdx = 7,
  job_typeIdx = 8,
  durationIdx = 9,
  retriesIdx = 10,
  database_nameIdx = 11,
  LastField = 12,
} TAG_UNNAMED_2322, *PTAG_UNNAMED_2322;

typedef enum
{
  object_typeIdx = 0,
  database_idIdx = 1,
  object_idIdx = 2,
  remove_methodIdx = 3,
  object_nameIdx = 4,
  cached_textIdx = 5,
  database_nameIdx = 6,
  plan_handleIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2323, *PTAG_UNNAMED_2323;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 0,
  VldEddOffset = 12,
  BufSize = 45,
} TAG_UNNAMED_2324, *PTAG_UNNAMED_2324;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2325, *PTAG_UNNAMED_2325;

typedef enum
{
  previous_edge_pool_sizeIdx = 0,
  current_edge_pool_sizeIdx = 1,
  edge_pool_utilizationIdx = 2,
  pmo_utilizationIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2326, *PTAG_UNNAMED_2326;

typedef enum
{
  remote_server_idIdx = 0,
  linked_server_nameIdx = 1,
  provider_nameIdx = 2,
  user_idIdx = 3,
  nt_user_idIdx = 4,
  provider_string_openrowsetIdx = 5,
  datasource_openrowsetIdx = 6,
  location_openrowsetIdx = 7,
  catalog_openrowsetIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2327, *PTAG_UNNAMED_2327;

typedef enum
{
  message_sequence_numberIdx = 0,
  is_initiatorIdx = 1,
  message_sizeIdx = 2,
  message_referenceIdx = 3,
  from_service_nameIdx = 4,
  to_service_nameIdx = 5,
  from_broker_instanceIdx = 6,
  to_broker_instanceIdx = 7,
  message_typeIdx = 8,
  dialog_idIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2328, *PTAG_UNNAMED_2328;

struct std::identity<std::strstreambuf>
{
}; /* size: 0x0001 */

struct tagMONITORINFOEXW
{
  /* 0x0000 */ long Padding_641[10];
  /* 0x0028 */ wchar_t szDevice[32];
}; /* size: 0x0068 */

typedef enum
{
  occurrencesIdx = 0,
  longer_than_secIdx = 1,
  database_idIdx = 2,
  file_handleIdx = 3,
  last_long_io_offsetIdx = 4,
  durationIdx = 5,
  file_pathIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2329, *PTAG_UNNAMED_2329;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2330, *PTAG_UNNAMED_2330;

struct tagIMECHARPOSITION
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwCharPos;
  /* 0x0008 */ struct tagPOINT pt;
  /* 0x0010 */ unsigned int cLineHeight;
  /* 0x0014 */ struct tagRECT rcDocument;
}; /* size: 0x0024 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 48,
} TAG_UNNAMED_2331, *PTAG_UNNAMED_2331;

typedef enum
{
  query_operator_node_idIdx = 0,
  partition_elimination_infoIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2332, *PTAG_UNNAMED_2332;

typedef enum
{
  addressIdx = 0,
  classIdx = 1,
  keep_countIdx = 2,
  shared_countIdx = 3,
  update_countIdx = 4,
  exclusive_countIdx = 5,
  destroy_countIdx = 6,
  has_waitersIdx = 7,
  is_superlatchIdx = 8,
  is_poisonedIdx = 9,
  database_idIdx = 10,
  file_idIdx = 11,
  page_idIdx = 12,
  LastField = 13,
} TAG_UNNAMED_2333, *PTAG_UNNAMED_2333;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_2334, *PTAG_UNNAMED_2334;

typedef struct _RTL_PROCESS_LOCK_INFORMATION
{
  /* 0x0000 */ void* Address;
  /* 0x0008 */ unsigned short Type;
  /* 0x000a */ unsigned short CreatorBackTraceIndex;
  /* 0x000c */ long Padding_642;
  /* 0x0010 */ void* OwningThread;
  /* 0x0018 */ long LockCount;
  /* 0x001c */ unsigned long ContentionCount;
  /* 0x0020 */ unsigned long EntryCount;
  /* 0x0024 */ long RecursionCount;
  /* 0x0028 */ unsigned long NumberOfWaitingShared;
  /* 0x002c */ unsigned long NumberOfWaitingExclusive;
} RTL_PROCESS_LOCK_INFORMATION, *PRTL_PROCESS_LOCK_INFORMATION; /* size: 0x0030 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2335, *PTAG_UNNAMED_2335;

enum XeSqlPkg::save_tran_starting::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef enum
{
  cache_threshold_kbIdx = 0,
  requested_memory_kbIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2336, *PTAG_UNNAMED_2336;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2337, *PTAG_UNNAMED_2337;

typedef enum
{
  segment_countIdx = 0,
  row_countIdx = 1,
  query_dopIdx = 2,
  effective_dopIdx = 3,
  max_effective_dopIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2338, *PTAG_UNNAMED_2338;

struct HSPRITE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2339, *PTAG_UNNAMED_2339;

class AutoSpinlockHolder<18,19,1>;

typedef enum
{
  log_block_idIdx = 0,
  log_block_sizeIdx = 1,
  log_block_sequenceIdx = 2,
  log_block_acknowledgment_sequenceIdx = 3,
  queue_sizeIdx = 4,
  modeIdx = 5,
  availability_group_idIdx = 6,
  availability_replica_idIdx = 7,
  database_replica_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2340, *PTAG_UNNAMED_2340;

struct IXMLDOMImplementation
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 3,
  VldEddOffset = 5,
  BufSize = 58,
} TAG_UNNAMED_2341, *PTAG_UNNAMED_2341;

typedef enum
{
  cache_typeIdx = 0,
  keysIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2342, *PTAG_UNNAMED_2342;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE; /* size: 0x0030 */

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2343, *PTAG_UNNAMED_2343;

typedef struct _STAT_SERVER_0
{
  /* 0x0000 */ unsigned long sts0_start;
  /* 0x0004 */ unsigned long sts0_fopens;
  /* 0x0008 */ unsigned long sts0_devopens;
  /* 0x000c */ unsigned long sts0_jobsqueued;
  /* 0x0010 */ unsigned long sts0_sopens;
  /* 0x0014 */ unsigned long sts0_stimedout;
  /* 0x0018 */ unsigned long sts0_serrorout;
  /* 0x001c */ unsigned long sts0_pwerrors;
  /* 0x0020 */ unsigned long sts0_permerrors;
  /* 0x0024 */ unsigned long sts0_syserrors;
  /* 0x0028 */ unsigned long sts0_bytessent_low;
  /* 0x002c */ unsigned long sts0_bytessent_high;
  /* 0x0030 */ unsigned long sts0_bytesrcvd_low;
  /* 0x0034 */ unsigned long sts0_bytesrcvd_high;
  /* 0x0038 */ unsigned long sts0_avresponse;
  /* 0x003c */ unsigned long sts0_reqbufneed;
  /* 0x0040 */ unsigned long sts0_bigbufneed;
} STAT_SERVER_0, *PSTAT_SERVER_0; /* size: 0x0044 */

typedef enum
{
  isolation_levelIdx = 0,
  transaction_stateIdx = 1,
  transaction_idIdx = 2,
  unit_of_work_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2344, *PTAG_UNNAMED_2344;

class SpinlockHolder<137,4,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2345, *PTAG_UNNAMED_2345;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2346, *PTAG_UNNAMED_2346;

class AutoSpinlockHolder<112,9,1>;

typedef enum
{
  shipped_typeIdx = 0,
  last_session_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2347, *PTAG_UNNAMED_2347;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_2348, *PTAG_UNNAMED_2348;

typedef enum
{
  database_idIdx = 0,
  rows_deletedIdx = 1,
  cleaned_upto_dateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2349, *PTAG_UNNAMED_2349;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 3,
  VldEddOffset = 4,
  BufSize = 44,
} TAG_UNNAMED_2350, *PTAG_UNNAMED_2350;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_2351, *PTAG_UNNAMED_2351;

class XE_AutoFormatOSError
{
  /* 0x0000 */ wchar_t* m_pMessage;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2352, *PTAG_UNNAMED_2352;

typedef enum
{
  Value = 0,
} TAG_UNNAMED_2353, *PTAG_UNNAMED_2353;

typedef struct _MESSAGE_RESOURCE_DATA
{
  /* 0x0000 */ unsigned long NumberOfBlocks;
  /* 0x0004 */ struct _MESSAGE_RESOURCE_BLOCK Blocks[1];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  start_log_block_idIdx = 1,
  last_log_block_idIdx = 2,
  private_consumer_idIdx = 3,
  change_typeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2354, *PTAG_UNNAMED_2354;

typedef enum
{
  cpu_timeIdx = 0,
  session_idIdx = 1,
  group_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2355, *PTAG_UNNAMED_2355;

typedef struct __vc_attributes::helper_attributes::multi_valueAttribute
{
} _vc_attributes::helper_attributes::multi_valueAttribute, *P_vc_attributes::helper_attributes::multi_valueAttribute; /* size: 0x0001 */

struct XE_TArray<XECustomizableAttribute,8>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[8];
}; /* size: 0x01c0 */

struct XE_TTarget<8>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,8> m_customizableAttr;
  }; /* size: 0x01c0 */
  /* 0x01c0 */ struct XETarget m_target;
}; /* size: 0x01f8 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 14,
} TAG_UNNAMED_2356, *PTAG_UNNAMED_2356;

typedef struct _OBJECT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_643;
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ struct _UNICODE_STRING* ObjectName;
  /* 0x0018 */ unsigned long Attributes;
  /* 0x001c */ long Padding_644;
  /* 0x0020 */ void* SecurityDescriptor;
  /* 0x0028 */ void* SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES; /* size: 0x0030 */

typedef enum
{
  remote_exchange_node_idIdx = 0,
  remote_exchange_thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  context_accessed_nameIdx = 4,
  context_accessed_valueIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2357, *PTAG_UNNAMED_2357;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 2,
  VldEddOffset = 1,
  BufSize = 24,
} TAG_UNNAMED_2358, *PTAG_UNNAMED_2358;

typedef struct _TRACE_LOGFILE_HEADER32
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ unsigned int LoggerName;
  /* 0x003c */ unsigned int LogFileName;
  /* 0x0040 */ struct _TIME_ZONE_INFORMATION TimeZone;
  /* 0x00ec */ long Padding_645;
  /* 0x00f0 */ union _LARGE_INTEGER BootTime;
  /* 0x00f8 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0100 */ union _LARGE_INTEGER StartTime;
  /* 0x0108 */ unsigned long ReservedFlags;
  /* 0x010c */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER32, *PTRACE_LOGFILE_HEADER32; /* size: 0x0110 */

typedef enum
{
  lock_resultIdx = 0,
  first_try_successIdx = 1,
  actual_remote_memory_pagesIdx = 2,
  total_remote_memory_target_pagesIdx = 3,
  total_remote_memory_granted_pagesIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2359, *PTAG_UNNAMED_2359;

class Spinlock<233,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 29,
} TAG_UNNAMED_2360, *PTAG_UNNAMED_2360;

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2361, *PTAG_UNNAMED_2361;

class SOS_CacheStoreBase::ExtendedStatistic
{
  /* 0x0000 */ unsigned __int64 m_NumberOfEntriesInUse;
  /* 0x0008 */ volatile __int64 m_NumberOfPagesInUse;
}; /* size: 0x0010 */

typedef enum
{
  schema_mgr_database_idIdx = 0,
  versionIdx = 1,
  operationIdx = 2,
  hobt_idIdx = 3,
  ddl_operationIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2362, *PTAG_UNNAMED_2362;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 22,
} TAG_UNNAMED_2363, *PTAG_UNNAMED_2363;

typedef enum
{
  durationIdx = 0,
  warning_typeIdx = 1,
  server_memory_grantsIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2364, *PTAG_UNNAMED_2364;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 33,
} TAG_UNNAMED_2365, *PTAG_UNNAMED_2365;

typedef enum
{
  returned_remote_memory_pagesIdx = 0,
  total_remote_memory_target_pagesIdx = 1,
  total_remote_memory_granted_pagesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2366, *PTAG_UNNAMED_2366;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 17,
} TAG_UNNAMED_2367, *PTAG_UNNAMED_2367;

struct IROTData
{
}; /* size: 0x0008 */

typedef enum
{
  destination_idIdx = 0,
  brick_idIdx = 1,
  query_operation_node_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2368, *PTAG_UNNAMED_2368;

typedef struct _WIN32_FIND_DATAW
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long nFileSizeHigh;
  /* 0x0020 */ unsigned long nFileSizeLow;
  /* 0x0024 */ unsigned long dwReserved0;
  /* 0x0028 */ unsigned long dwReserved1;
  /* 0x002c */ wchar_t cFileName[260];
  /* 0x0234 */ wchar_t cAlternateFileName[14];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_2369, *PTAG_UNNAMED_2369;

struct SERVICE_STATUS_HANDLE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  availability_group_idIdx = 0,
  listener_idIdx = 1,
  dns_nameIdx = 2,
  dependency_expressionIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2370, *PTAG_UNNAMED_2370;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2371, *PTAG_UNNAMED_2371;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 4,
  VldEddOffset = -1,
  BufSize = 32,
} TAG_UNNAMED_2372, *PTAG_UNNAMED_2372;

typedef enum
{
  database_idIdx = 0,
  total_recordsIdx = 1,
  filestream_chunk_recordsIdx = 2,
  transaction_abort_recordsIdx = 3,
  log_block_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2373, *PTAG_UNNAMED_2373;

struct XPipeDemandSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2374, *PTAG_UNNAMED_2374;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 22,
} TAG_UNNAMED_2375, *PTAG_UNNAMED_2375;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 2,
  VldEddOffset = 1,
  BufSize = 24,
} TAG_UNNAMED_2376, *PTAG_UNNAMED_2376;

typedef struct _EISA_MEMORY_TYPE
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char ReadWrite : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char Cached : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned char Reserved0 : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned char Type : 2; /* bit position: 3 */
    /* 0x0000 */ unsigned char Shared : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char Reserved1 : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char MoreEntries : 1; /* bit position: 7 */
  }; /* bitfield */
} EISA_MEMORY_TYPE, *PEISA_MEMORY_TYPE; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2377, *PTAG_UNNAMED_2377;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2378, *PTAG_UNNAMED_2378;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
  /* 0x0000 */ unsigned long UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS; /* size: 0x0004 */

typedef enum
{
  opcodeIdx = 0,
  database_idIdx = 1,
  call_durationIdx = 2,
  is_remoteIdx = 3,
  command_phaseIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2379, *PTAG_UNNAMED_2379;

struct tagSCROLLBARINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcScrollBar;
  /* 0x0014 */ int dxyLineButton;
  /* 0x0018 */ int xyThumbTop;
  /* 0x001c */ int xyThumbBottom;
  /* 0x0020 */ int reserved;
  /* 0x0024 */ unsigned long rgstate[6];
}; /* size: 0x003c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 19,
} TAG_UNNAMED_2380, *PTAG_UNNAMED_2380;

typedef struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT
{
  /* 0x0000 */ void* ResolutionContext;
  /* 0x0008 */ unsigned __int64 RootIndex;
  /* 0x0010 */ unsigned char CancelResolution;
  /* 0x0011 */ unsigned char NoMoreEntries;
  /* 0x0012 */ char Padding_646[6];
  /* 0x0018 */ struct _UNICODE_STRING Root;
} ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT, *PASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_2381, *PTAG_UNNAMED_2381;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 3,
  VldEddOffset = 3,
  BufSize = 40,
} TAG_UNNAMED_2382, *PTAG_UNNAMED_2382;

typedef struct _TRANSACTION_NOTIFICATION
{
  /* 0x0000 */ void* TransactionKey;
  /* 0x0008 */ unsigned long TransactionNotification;
  /* 0x000c */ long Padding_647;
  /* 0x0010 */ union _LARGE_INTEGER TmVirtualClock;
  /* 0x0018 */ unsigned long ArgumentLength;
  /* 0x001c */ long __PADDING__[1];
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2383, *PTAG_UNNAMED_2383;

typedef enum
{
  query_operator_node_idIdx = 0,
  ranges_countIdx = 1,
  bucket_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2384, *PTAG_UNNAMED_2384;

struct tagCOMPOSITIONFORM
{
  /* 0x0000 */ unsigned long dwStyle;
  /* 0x0004 */ struct tagPOINT ptCurrentPos;
  /* 0x000c */ struct tagRECT rcArea;
}; /* size: 0x001c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2385, *PTAG_UNNAMED_2385;

typedef struct _TAPE_SET_POSITION
{
  /* 0x0000 */ unsigned long Method;
  /* 0x0004 */ unsigned long Partition;
  /* 0x0008 */ union _LARGE_INTEGER Offset;
  /* 0x0010 */ unsigned char Immediate;
  /* 0x0011 */ char __PADDING__[7];
} TAPE_SET_POSITION, *PTAPE_SET_POSITION; /* size: 0x0018 */

struct CXFilePageBase
{
  /* 0x0000 */ struct CXFilePageHeader* m_header;
  /* 0x0008 */ unsigned __int64 m_fileStartPosition;
  /* 0x0010 */ unsigned char* m_buffer;
  /* 0x0018 */ unsigned int m_bufSize;
  /* 0x001c */ long Padding_648;
  /* 0x0020 */ class XE_AutoP<void> m_bufferAllocationPtr;
}; /* size: 0x0028 */

typedef enum
{
  test_pointIdx = 0,
  group_idIdx = 1,
  replica_idIdx = 2,
  ag_database_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2386, *PTAG_UNNAMED_2386;

typedef enum
{
  database_idIdx = 0,
  filegroup_idIdx = 1,
  filegroup_log_idIdx = 2,
  logical_filegroup_idIdx = 3,
  recovery_unit_idIdx = 4,
  database_segment_idIdx = 5,
  filegroup_guidIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2387, *PTAG_UNNAMED_2387;

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  timerIdx = 4,
  expiresIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2388, *PTAG_UNNAMED_2388;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 40,
} TAG_UNNAMED_2389, *PTAG_UNNAMED_2389;

struct XE_TArray<XECustomizableAttribute,5>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[5];
}; /* size: 0x0118 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_2390, *PTAG_UNNAMED_2390;

typedef enum
{
  statement_handleIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2391, *PTAG_UNNAMED_2391;

struct tagEMRSETARCDIRECTION
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long iArcDirection;
}; /* size: 0x000c */

class Spinlock<72,16,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2392, *PTAG_UNNAMED_2392;

class SpinlockHolder<9,19,1>;

typedef enum
{
  remote_server_idIdx = 0,
  user_idIdx = 1,
  nt_user_idIdx = 2,
  provider_string_openrowsetIdx = 3,
  datasource_openrowsetIdx = 4,
  location_openrowsetIdx = 5,
  catalog_openrowsetIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2393, *PTAG_UNNAMED_2393;

typedef struct _SYSTEM_SET_TIME_ADJUST_INFORMATION
{
  /* 0x0000 */ unsigned long TimeAdjustment;
  /* 0x0004 */ unsigned char Enable;
  /* 0x0005 */ char __PADDING__[3];
} SYSTEM_SET_TIME_ADJUST_INFORMATION, *PSYSTEM_SET_TIME_ADJUST_INFORMATION; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2394, *PTAG_UNNAMED_2394;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 6,
  VldEddOffset = 0,
  BufSize = 56,
} TAG_UNNAMED_2395, *PTAG_UNNAMED_2395;

struct IMofCompiler
{
}; /* size: 0x0008 */

typedef enum
{
  thread_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2396, *PTAG_UNNAMED_2396;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2397, *PTAG_UNNAMED_2397;

class WcsSafeFakeType2
{
}; /* size: 0x0001 */

typedef enum
{
  deadlock_cycle_idIdx = 0,
  server_nameIdx = 1,
  database_nameIdx = 2,
  xml_reportIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2398, *PTAG_UNNAMED_2398;

typedef struct _CONNECTDLGSTRUCTA
{
  /* 0x0000 */ unsigned long cbStructure;
  /* 0x0004 */ long Padding_649;
  /* 0x0008 */ struct HWND__* hwndOwner;
  /* 0x0010 */ struct _NETRESOURCEA* lpConnRes;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ unsigned long dwDevNum;
} CONNECTDLGSTRUCTA, *PCONNECTDLGSTRUCTA; /* size: 0x0020 */

class XE_AutoP<ActionTransformRule>
{
}; /* size: 0x0008 */

typedef enum
{
  route_portIdx = 0,
  route_server_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2399, *PTAG_UNNAMED_2399;

struct IPersistStorage
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 10,
} TAG_UNNAMED_2400, *PTAG_UNNAMED_2400;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2401, *PTAG_UNNAMED_2401;

enum XeSqlPkg::object_altered::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

enum XeSqlPkg::lock_redo_unblocked::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2402, *PTAG_UNNAMED_2402;

class XE_AutoP<EventTransformer *>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 43,
} TAG_UNNAMED_2403, *PTAG_UNNAMED_2403;

struct OldestEntry
{
  /* 0x0000 */ unsigned int entryOldest;
  /* 0x0004 */ unsigned int bucketLength;
  /* 0x0008 */ unsigned int oldestTime;
  /* 0x000c */ unsigned int lastEntrySeen;
}; /* size: 0x0010 */

typedef enum
{
  request_typeIdx = 0,
  file_byte_offsetIdx = 1,
  file_byte_countIdx = 2,
  request_idIdx = 3,
  file_pathIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2404, *PTAG_UNNAMED_2404;

struct IViewSort
{
}; /* size: 0x0008 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_2405, *PTAG_UNNAMED_2405;

class AutoSpinlockHolder<102,10,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 33,
} TAG_UNNAMED_2406, *PTAG_UNNAMED_2406;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_2407, *PTAG_UNNAMED_2407;

typedef enum
{
  field_offsetIdx = 0,
  field_sizeIdx = 1,
  field_valueIdx = 2,
  field_nameIdx = 3,
  archive_file_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2408, *PTAG_UNNAMED_2408;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_2409, *PTAG_UNNAMED_2409;

struct std::iterator_traits<signed char>
{
}; /* size: 0x0001 */

struct IXMLAttribute
{
}; /* size: 0x0008 */

typedef enum
{
  requested_memory_kbIdx = 0,
  granted_memory_kbIdx = 1,
  resource_pool_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2410, *PTAG_UNNAMED_2410;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2411, *PTAG_UNNAMED_2411;

typedef enum
{
  query_operator_node_idIdx = 0,
  pure_group_by_columns_rows_numberIdx = 1,
  max_allocated_deep_data_sizeIdx = 2,
  garbage_collected_deep_data_sizeIdx = 3,
  max_allocated_hash_table_data_sizeIdx = 4,
  cpu_cycles_per_rowIdx = 5,
  local_aggregation_usedIdx = 6,
  spilled_data_sizeIdx = 7,
  spilled_hard_partitions_numberIdx = 8,
  spilled_rows_numberIdx = 9,
  soft_partitions_numberIdx = 10,
  fast_comparison_usedIdx = 11,
  fast_aggregation_columns_numberIdx = 12,
  LastField = 13,
} TAG_UNNAMED_2412, *PTAG_UNNAMED_2412;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2413, *PTAG_UNNAMED_2413;

enum FederatedTypetypedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_2414, *PTAG_UNNAMED_2414;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct _COORD dwSize;
  /* 0x0008 */ struct _COORD dwCursorPosition;
  /* 0x000c */ unsigned short wAttributes;
  /* 0x000e */ struct _SMALL_RECT srWindow;
  /* 0x0016 */ struct _COORD dwMaximumWindowSize;
  /* 0x001a */ unsigned short wPopupAttributes;
  /* 0x001c */ int bFullscreenSupported;
  /* 0x0020 */ unsigned long ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX; /* size: 0x0060 */

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
  /* 0x0000 */ unsigned short UniqueProcessId;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ unsigned char ObjectTypeIndex;
  /* 0x0005 */ unsigned char HandleAttributes;
  /* 0x0006 */ unsigned short HandleValue;
  /* 0x0008 */ void* Object;
  /* 0x0010 */ unsigned long GrantedAccess;
  /* 0x0014 */ long __PADDING__[1];
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, *PSYSTEM_HANDLE_TABLE_ENTRY_INFO; /* size: 0x0018 */

typedef struct _SYSTEM_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfHandles;
  /* 0x0004 */ long Padding_650;
  /* 0x0008 */ struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
} SYSTEM_HANDLE_INFORMATION, *PSYSTEM_HANDLE_INFORMATION; /* size: 0x0020 */

typedef enum
{
  query_operation_node_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2415, *PTAG_UNNAMED_2415;

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2416, *PTAG_UNNAMED_2416;

typedef struct _UNIVERSAL_NAME_INFOW
{
  /* 0x0000 */ wchar_t* lpUniversalName;
} UNIVERSAL_NAME_INFOW, *PUNIVERSAL_NAME_INFOW; /* size: 0x0008 */

class CAutoP<XE_BufferMap>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 14,
} TAG_UNNAMED_2417, *PTAG_UNNAMED_2417;

typedef enum
{
  statement_handleIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2418, *PTAG_UNNAMED_2418;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2419, *PTAG_UNNAMED_2419;

typedef enum
{
  hresultIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2420, *PTAG_UNNAMED_2420;

typedef struct _TRACE_GUID_INFO
{
  /* 0x0000 */ unsigned long InstanceCount;
  /* 0x0004 */ unsigned long Reserved;
} TRACE_GUID_INFO, *PTRACE_GUID_INFO; /* size: 0x0008 */

typedef struct _PDH_FMT_COUNTERVALUE
{
  /* 0x0000 */ unsigned long CStatus;
  /* 0x0004 */ long Padding_651;
  union
  {
    /* 0x0008 */ long longValue;
    /* 0x0008 */ double doubleValue;
    /* 0x0008 */ __int64 largeValue;
    /* 0x0008 */ const char* AnsiStringValue;
    /* 0x0008 */ const wchar_t* WideStringValue;
  }; /* size: 0x0008 */
} PDH_FMT_COUNTERVALUE, *PPDH_FMT_COUNTERVALUE; /* size: 0x0010 */

class CPerfmonCounter
{
  /* 0x0000 */ void* m_counterHdl;
  /* 0x0008 */ struct _PDH_FMT_COUNTERVALUE m_itemBuffer;
  /* 0x0018 */ wchar_t m_CounterName[2048];
}; /* size: 0x1018 */

typedef enum
{
  typeIdx = 0,
  max_durationIdx = 1,
  abort_after_waitIdx = 2,
  host_process_idIdx = 3,
  database_idIdx = 4,
  object_idIdx = 5,
  host_nameIdx = 6,
  database_nameIdx = 7,
  object_nameIdx = 8,
  target_object_nameIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2421, *PTAG_UNNAMED_2421;

struct value_entW
{
  /* 0x0000 */ wchar_t* ve_valuename;
  /* 0x0008 */ unsigned long ve_valuelen;
  /* 0x000c */ long Padding_652;
  /* 0x0010 */ unsigned __int64 ve_valueptr;
  /* 0x0018 */ unsigned long ve_type;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 4,
  VldEddOffset = 5,
  BufSize = 50,
} TAG_UNNAMED_2422, *PTAG_UNNAMED_2422;

class XeSqlPkg::query_rpc_set_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_653[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

enum XE_PredicateExpr::PredicateType
{
  TYPE_NOT = 0,
  TYPE_OR = 1,
  TYPE_AND = 2,
  TYPE_GLOBAL = 3,
  TYPE_EVENT = 4,
};

typedef enum
{
  notify_typeIdx = 0,
  notify_keyIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2423, *PTAG_UNNAMED_2423;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2424, *PTAG_UNNAMED_2424;

typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
  /* 0x0000 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0008 */ struct _LIST_ENTRY* PrevLinkage;
  /* 0x0010 */ unsigned __int64 Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, *PRTL_DYNAMIC_HASH_TABLE_CONTEXT; /* size: 0x0018 */

enum XeSqlPkg::connectivity_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 28,
  NVld = 5,
  VldEddOffset = 22,
  BufSize = 124,
} TAG_UNNAMED_2425, *PTAG_UNNAMED_2425;

class CAutoBase<CXFilePageForRead>
{
  /* 0x0000 */ struct CXFilePageForRead* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2426, *PTAG_UNNAMED_2426;

class XeSosPkg::worker_state_callback_executed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_654[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int callback_typeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

union tagBINDPTR
{
  union
  {
    /* 0x0000 */ struct tagFUNCDESC* lpfuncdesc;
    /* 0x0000 */ struct tagVARDESC* lpvardesc;
    /* 0x0000 */ struct ITypeComp* lptcomp;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct IDBSchemaRowset
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2427, *PTAG_UNNAMED_2427;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2428, *PTAG_UNNAMED_2428;

typedef enum
{
  ListElementOffset = 1400,
  NextPtrOffset = 8,
} TAG_UNNAMED_2429, *PTAG_UNNAMED_2429;

class CAutoP<XE_LogSpecs>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2430, *PTAG_UNNAMED_2430;

typedef enum
{
  database_idIdx = 0,
  flushed_logIdx = 1,
  end_of_logIdx = 2,
  clean_shutdownIdx = 3,
  log_acceptIdx = 4,
  group_idIdx = 5,
  replica_idIdx = 6,
  ag_database_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2431, *PTAG_UNNAMED_2431;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2432, *PTAG_UNNAMED_2432;

class XeSosPkg::scheduler_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_655[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int scheduler_addressOffset;
    /* 0x0000 */ const int ticksOffset;
    /* 0x0000 */ const int source_workerOffset;
    /* 0x0000 */ const int target_workerOffset;
    /* 0x0000 */ const int worker_signal_timeOffset;
    /* 0x0000 */ const int disk_io_completedOffset;
    /* 0x0000 */ const int timer_expiredOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x02d8 */
}; /* size: 0x0290 */

class RefCountImpl<XE_CompressionBufferRefCount>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 14,
} TAG_UNNAMED_2433, *PTAG_UNNAMED_2433;

typedef struct _SETJMP_FLOAT128
{
  /* 0x0000 */ unsigned __int64 Part[2];
} SETJMP_FLOAT128, *PSETJMP_FLOAT128; /* size: 0x0010 */

typedef struct _JUMP_BUFFER
{
  /* 0x0000 */ unsigned __int64 Frame;
  /* 0x0008 */ unsigned __int64 Rbx;
  /* 0x0010 */ unsigned __int64 Rsp;
  /* 0x0018 */ unsigned __int64 Rbp;
  /* 0x0020 */ unsigned __int64 Rsi;
  /* 0x0028 */ unsigned __int64 Rdi;
  /* 0x0030 */ unsigned __int64 R12;
  /* 0x0038 */ unsigned __int64 R13;
  /* 0x0040 */ unsigned __int64 R14;
  /* 0x0048 */ unsigned __int64 R15;
  /* 0x0050 */ unsigned __int64 Rip;
  /* 0x0058 */ unsigned long MxCsr;
  /* 0x005c */ unsigned short FpCsr;
  /* 0x005e */ unsigned short Spare;
  /* 0x0060 */ struct _SETJMP_FLOAT128 Xmm6;
  /* 0x0070 */ struct _SETJMP_FLOAT128 Xmm7;
  /* 0x0080 */ struct _SETJMP_FLOAT128 Xmm8;
  /* 0x0090 */ struct _SETJMP_FLOAT128 Xmm9;
  /* 0x00a0 */ struct _SETJMP_FLOAT128 Xmm10;
  /* 0x00b0 */ struct _SETJMP_FLOAT128 Xmm11;
  /* 0x00c0 */ struct _SETJMP_FLOAT128 Xmm12;
  /* 0x00d0 */ struct _SETJMP_FLOAT128 Xmm13;
  /* 0x00e0 */ struct _SETJMP_FLOAT128 Xmm14;
  /* 0x00f0 */ struct _SETJMP_FLOAT128 Xmm15;
} JUMP_BUFFER, *PJUMP_BUFFER; /* size: 0x0100 */

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2434, *PTAG_UNNAMED_2434;

class XeSqlPkg::log_flush_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_656[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int write_sizeOffset;
    /* 0x0000 */ const int rowsOffset;
    /* 0x0000 */ const int pending_writesOffset;
    /* 0x0000 */ const int pending_bytesOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2435, *PTAG_UNNAMED_2435;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2436, *PTAG_UNNAMED_2436;

struct tagPROPSPEC
{
  /* 0x0000 */ unsigned long ulKind;
  /* 0x0004 */ long Padding_657;
  union
  {
    /* 0x0008 */ unsigned long propid;
    /* 0x0008 */ wchar_t* lpwstr;
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition>
{
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 44,
} TAG_UNNAMED_2437, *PTAG_UNNAMED_2437;

struct IWbemEventProviderQuerySink
{
}; /* size: 0x0008 */

typedef enum
{
  redo_targetIdx = 0,
  redone_timeIdx = 1,
  redo_rateIdx = 2,
  redo_queue_sizeIdx = 3,
  commit_timeIdx = 4,
  availability_group_idIdx = 5,
  availability_replica_idIdx = 6,
  database_replica_idIdx = 7,
  truncation_lsnIdx = 8,
  hardened_lsnIdx = 9,
  undo_lsnIdx = 10,
  oldest_xact_lsnIdx = 11,
  start_of_log_lsnIdx = 12,
  redo_lsnIdx = 13,
  end_of_log_lsnIdx = 14,
  commit_lsnIdx = 15,
  shipped_lsnIdx = 16,
  log_scan_lsnIdx = 17,
  LastField = 18,
} TAG_UNNAMED_2438, *PTAG_UNNAMED_2438;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_2439, *PTAG_UNNAMED_2439;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 18,
  NVld = 13,
  VldEddOffset = 4,
  BufSize = 144,
} TAG_UNNAMED_2440, *PTAG_UNNAMED_2440;

typedef struct _PROC_THREAD_ATTRIBUTE
{
  /* 0x0000 */ unsigned __int64 Attribute;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ unsigned __int64 Value;
} PROC_THREAD_ATTRIBUTE, *PPROC_THREAD_ATTRIBUTE; /* size: 0x0018 */

typedef struct _PROC_THREAD_ATTRIBUTE_LIST
{
  /* 0x0000 */ unsigned long PresentFlags;
  /* 0x0004 */ unsigned long AttributeCount;
  /* 0x0008 */ unsigned long LastAttribute;
  /* 0x000c */ unsigned long SpareUlong0;
  /* 0x0010 */ struct _PROC_THREAD_ATTRIBUTE* ExtendedFlagsAttribute;
  /* 0x0018 */ struct _PROC_THREAD_ATTRIBUTE Attributes[1];
} PROC_THREAD_ATTRIBUTE_LIST, *PPROC_THREAD_ATTRIBUTE_LIST; /* size: 0x0030 */

class ResourcePoolData
{
}; /* size: 0x01b0 */

typedef struct _CM_SERIAL_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long BaudClock;
} CM_SERIAL_DEVICE_DATA, *PCM_SERIAL_DEVICE_DATA; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 11,
  NVld = 3,
  VldEddOffset = 7,
  BufSize = 60,
} TAG_UNNAMED_2441, *PTAG_UNNAMED_2441;

struct BaseXactHashSLock
{
}; /* size: 0x0004 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2442, *PTAG_UNNAMED_2442;

struct tagMONITORINFOEXA
{
  /* 0x0000 */ long Padding_658[10];
  /* 0x0028 */ char szDevice[32];
}; /* size: 0x0048 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  expected_reply_typeIdx = 2,
  expected_reply_countIdx = 3,
  reply_timeoutIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2443, *PTAG_UNNAMED_2443;

typedef struct _CLUS_SNAPSHOT_DIFF_PROP
{
  /* 0x0000 */ wchar_t VolumeName[260];
  union
  {
    /* 0x0208 */ wchar_t DisplayName[260];
    /* 0x0208 */ wchar_t DiffAreaName[260];
  }; /* size: 0x0208 */
  /* 0x0410 */ __int64 MaximumDiffSpace;
  union
  {
    /* 0x0418 */ __int64 AllocatedDiffSpace;
    /* 0x0418 */ __int64 VolumeFreeSpace;
  }; /* size: 0x0008 */
  union
  {
    /* 0x0420 */ __int64 UsedDiffSpace;
    /* 0x0420 */ __int64 VolumeTotalSpace;
  }; /* size: 0x0008 */
} CLUS_SNAPSHOT_DIFF_PROP, *PCLUS_SNAPSHOT_DIFF_PROP; /* size: 0x0428 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2444, *PTAG_UNNAMED_2444;

class Spinlock<65,16,1>
{
}; /* size: 0x0004 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2445, *PTAG_UNNAMED_2445;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2446, *PTAG_UNNAMED_2446;

struct IWbemRefresher
{
}; /* size: 0x0008 */

enum ETaskSpecializationtypedef struct _SERVER_INFO_1570
{
  /* 0x0000 */ unsigned long sv1570_mdlreadswitchover;
} SERVER_INFO_1570, *PSERVER_INFO_1570; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 2,
  VldEddOffset = 4,
  BufSize = 33,
} TAG_UNNAMED_2447, *PTAG_UNNAMED_2447;

class SpinlockHolder<80,13,1>;

class AutoSwitchNonPreemptive
{
  /* 0x0000 */ int m_fMakeSwitch;
  /* 0x0004 */ int m_IsLazyPreemptive;
  /* 0x0008 */ class Worker* m_pWorker;
  /* 0x0010 */ class SOS_Scheduler* m_pScheduler;
}; /* size: 0x0018 */

class SOSHost_TaskAutoSwitchNonPreemptive
{
  /* 0x0000 */ class AutoSwitchNonPreemptive m_nativeAutoSwitch;
}; /* size: 0x0018 */

typedef enum
{
  protocol_execution_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2448, *PTAG_UNNAMED_2448;

typedef struct _NT_TIB32
{
  /* 0x0000 */ unsigned long ExceptionList;
  /* 0x0004 */ unsigned long StackBase;
  /* 0x0008 */ unsigned long StackLimit;
  /* 0x000c */ unsigned long SubSystemTib;
  union
  {
    /* 0x0010 */ unsigned long FiberData;
    /* 0x0010 */ unsigned long Version;
  }; /* size: 0x0004 */
  /* 0x0014 */ unsigned long ArbitraryUserPointer;
  /* 0x0018 */ unsigned long Self;
} NT_TIB32, *PNT_TIB32; /* size: 0x001c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 29,
} TAG_UNNAMED_2449, *PTAG_UNNAMED_2449;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 10,
} TAG_UNNAMED_2450, *PTAG_UNNAMED_2450;

struct InterlockedTraits<2>
{
}; /* size: 0x0001 */

typedef enum
{
  database_idIdx = 0,
  scan_statusIdx = 1,
  shutdown_typeIdx = 2,
  group_idIdx = 3,
  replica_idIdx = 4,
  ag_database_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2451, *PTAG_UNNAMED_2451;

class AutoSpinlockHolder<176,3,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 3,
  VldEddOffset = 2,
  BufSize = 36,
} TAG_UNNAMED_2452, *PTAG_UNNAMED_2452;

class SEList<CFixedInfo,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _CREATE_PROCESS_DEBUG_INFO
{
  /* 0x0000 */ void* hFile;
  /* 0x0008 */ void* hProcess;
  /* 0x0010 */ void* hThread;
  /* 0x0018 */ void* lpBaseOfImage;
  /* 0x0020 */ unsigned long dwDebugInfoFileOffset;
  /* 0x0024 */ unsigned long nDebugInfoSize;
  /* 0x0028 */ void* lpThreadLocalBase;
  /* 0x0030 */ void* lpStartAddress /* function */;
  /* 0x0038 */ void* lpImageName;
  /* 0x0040 */ unsigned short fUnicode;
  /* 0x0042 */ char __PADDING__[6];
} CREATE_PROCESS_DEBUG_INFO, *PCREATE_PROCESS_DEBUG_INFO; /* size: 0x0048 */

typedef struct _EXIT_THREAD_DEBUG_INFO
{
  /* 0x0000 */ unsigned long dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *PEXIT_THREAD_DEBUG_INFO; /* size: 0x0004 */

typedef struct _LOAD_DLL_DEBUG_INFO
{
  /* 0x0000 */ void* hFile;
  /* 0x0008 */ void* lpBaseOfDll;
  /* 0x0010 */ unsigned long dwDebugInfoFileOffset;
  /* 0x0014 */ unsigned long nDebugInfoSize;
  /* 0x0018 */ void* lpImageName;
  /* 0x0020 */ unsigned short fUnicode;
  /* 0x0022 */ char __PADDING__[6];
} LOAD_DLL_DEBUG_INFO, *PLOAD_DLL_DEBUG_INFO; /* size: 0x0028 */

typedef struct _RIP_INFO
{
  /* 0x0000 */ unsigned long dwError;
  /* 0x0004 */ unsigned long dwType;
} RIP_INFO, *PRIP_INFO; /* size: 0x0008 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  removed_from_worktableIdx = 4,
  dialog_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2453, *PTAG_UNNAMED_2453;

class XeSqlPkg::recovery_unit_metadata_truncate_data_drop
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_659[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int recovery_unit_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef enum
{
  dbIdIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2454, *PTAG_UNNAMED_2454;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2455, *PTAG_UNNAMED_2455;

typedef enum
{
  is_createdIdx = 0,
  availability_group_idIdx = 1,
  map_key_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2456, *PTAG_UNNAMED_2456;

struct XELiveTargetAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* IsCompatible /* function */;
  /* 0x0018 */ void* Register /* function */;
  /* 0x0020 */ void* Unregister /* function */;
  /* 0x0028 */ void* ReturnBuffer /* function */;
}; /* size: 0x0030 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 17,
} TAG_UNNAMED_2457, *PTAG_UNNAMED_2457;

class RefCountImpl<IMemObj>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class XeSqlPkg::recovery_indirect_checkpoint
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_660[140];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0054 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int recovery_log_bytesOffset;
    /* 0x0000 */ const int recovery_log_read_time_estimateOffset;
    /* 0x0000 */ const int recovery_log_target_timeOffset;
    /* 0x0000 */ const int dirty_page_read_timeOffset;
    /* 0x0000 */ const int dirty_page_countOffset;
    /* 0x0000 */ const int dirty_page_target_timeOffset;
    /* 0x0000 */ const int page_writes_loggedOffset;
    /* 0x0000 */ const int page_writes_not_loggedOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0288 */

typedef enum
{
  ListElementOffset = 0,
  NextPtrOffset = 8,
} TAG_UNNAMED_2458, *PTAG_UNNAMED_2458;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 14,
  NVld = 0,
  VldEddOffset = 13,
  BufSize = 49,
} TAG_UNNAMED_2459, *PTAG_UNNAMED_2459;

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  is_savedIdx = 4,
  is_new_recordIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2460, *PTAG_UNNAMED_2460;

class std::basic_string<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >
{
  /* 0x0000 */ const unsigned __int64 npos;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 31,
} TAG_UNNAMED_2461, *PTAG_UNNAMED_2461;

typedef enum
{
  database_idIdx = 0,
  rowset_idIdx = 1,
  delta_store_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2462, *PTAG_UNNAMED_2462;

typedef enum
{
  query_operation_node_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2463, *PTAG_UNNAMED_2463;

class TListElem<TList<NodeManager,SOS_Node,16,TListSLock> >
{
  /* 0x0000 */ long Padding_661[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_662;
  /* 0x0018 */ class NodeManager* m_pList;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2464, *PTAG_UNNAMED_2464;

typedef enum
{
  query_operator_node_idIdx = 0,
  row_countIdx = 1,
  bytesIdx = 2,
  is_fast_bitmapIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2465, *PTAG_UNNAMED_2465;

class XE_AutoRg<EventTypeEntry>
{
}; /* size: 0x0008 */

class PackageEntry
{
  /* 0x0000 */ unsigned int m_Size;
  /* 0x0004 */ long Padding_663;
  /* 0x0008 */ class XE_AutoRg<EventTypeEntry> m_eventTypes;
  /* 0x0010 */ class XE_AutoP<EventTransformer *> m_eventTransformers;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2466, *PTAG_UNNAMED_2466;

struct IDropSource
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 4,
  VldEddOffset = 3,
  BufSize = 54,
} TAG_UNNAMED_2467, *PTAG_UNNAMED_2467;

typedef enum
{
  database_idIdx = 0,
  securable_classIdx = 1,
  securable_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2468, *PTAG_UNNAMED_2468;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2469, *PTAG_UNNAMED_2469;

struct XEEngineRegisterAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* RegisterPackage /* function */;
  /* 0x0018 */ void* UnregisterPackage /* function */;
  /* 0x0020 */ void* GetLastErrorContext /* function */;
}; /* size: 0x0028 */

typedef enum
{
  backup_worker_idIdx = 0,
  is_sendIdx = 1,
  is_pre_eventIdx = 2,
  is_requestIdx = 3,
  message_typeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2470, *PTAG_UNNAMED_2470;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 6,
} TAG_UNNAMED_2471, *PTAG_UNNAMED_2471;

typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
  /* 0x0000 */ unsigned long dwDataType;
  /* 0x0004 */ unsigned long cbData;
  /* 0x0008 */ unsigned char* pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM; /* size: 0x0010 */

class XE_AutoResource<void *,168>
{
}; /* size: 0x0008 */

typedef enum
{
  query_operator_node_idIdx = 0,
  query_thread_idIdx = 1,
  hash_table_slice_countIdx = 2,
  bucket_count_per_hash_table_sliceIdx = 3,
  bucket_size_bytesIdx = 4,
  overflow_pages_countIdx = 5,
  hash_table_slices_builtIdx = 6,
  is_small_hash_tableIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2472, *PTAG_UNNAMED_2472;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 41,
} TAG_UNNAMED_2473, *PTAG_UNNAMED_2473;

struct AsyncIUnknown
{
}; /* size: 0x0008 */

class Spinlock<241,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  timerIdx = 4,
  dialog_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2474, *PTAG_UNNAMED_2474;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  index_idIdx = 3,
  related_object_idIdx = 4,
  ddl_phaseIdx = 5,
  transaction_idIdx = 6,
  object_nameIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2475, *PTAG_UNNAMED_2475;

enum XeSqlPkg::object_created::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef struct _SERVICE_TRIGGER_INFO
{
  /* 0x0000 */ unsigned long cTriggers;
  /* 0x0004 */ long Padding_664;
  /* 0x0008 */ struct _SERVICE_TRIGGER* pTriggers;
  /* 0x0010 */ unsigned char* pReserved;
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO; /* size: 0x0018 */

class XeSqlPkg::dq_session_cache_miss
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_665[143];
      /* 0x0240 */ unsigned char m_buf[72];
    }; /* size: 0x004c */
    /* 0x0000 */ const int remote_server_idOffset;
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int user_idOffset;
    /* 0x0000 */ const int nt_user_idOffset;
    /* 0x0000 */ const int provider_string_openrowsetOffset;
    /* 0x0000 */ const int datasource_openrowsetOffset;
    /* 0x0000 */ const int location_openrowsetOffset;
    /* 0x0000 */ const int catalog_openrowsetOffset;
  }; /* size: 0x004c */
}; /* size: 0x0288 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 43,
} TAG_UNNAMED_2476, *PTAG_UNNAMED_2476;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 18,
} TAG_UNNAMED_2477, *PTAG_UNNAMED_2477;

typedef struct _FOCUS_EVENT_RECORD
{
  /* 0x0000 */ int bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD; /* size: 0x0004 */

typedef enum
{
  activityIdx = 0,
  query_notification_xml_informationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2478, *PTAG_UNNAMED_2478;

class CAutoHandleInternal<-1,&CloseHandle>
{
  /* 0x0000 */ void* m_h;
}; /* size: 0x0008 */

class XE_FileMemoryMap
{
  /* 0x0000 */ unsigned __int64 m_TotalSizeInBytes;
  /* 0x0008 */ unsigned int m_memoryGranularityInBytes;
  /* 0x000c */ long Padding_666;
  /* 0x0010 */ class CAutoHandleInternal<-1,&CloseHandle> m_fileHandle;
  /* 0x0018 */ void* m_viewHandle;
  /* 0x0020 */ void* m_mapFileView;
  /* 0x0028 */ unsigned __int64 m_fileOffsetInBytes;
  /* 0x0030 */ unsigned int m_viewLengthInBytes;
}; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_2479, *PTAG_UNNAMED_2479;

struct IMPORT_OBJECT_HEADER
{
  /* 0x0000 */ unsigned short Sig1;
  /* 0x0002 */ unsigned short Sig2;
  /* 0x0004 */ unsigned short Version;
  /* 0x0006 */ unsigned short Machine;
  /* 0x0008 */ unsigned long TimeDateStamp;
  /* 0x000c */ unsigned long SizeOfData;
  union
  {
    /* 0x0010 */ unsigned short Ordinal;
    /* 0x0010 */ unsigned short Hint;
  }; /* size: 0x0002 */
  struct /* bitfield */
  {
    /* 0x0012 */ unsigned short Type : 2; /* bit position: 0 */
    /* 0x0012 */ unsigned short NameType : 3; /* bit position: 2 */
    /* 0x0012 */ unsigned short Reserved : 11; /* bit position: 5 */
  }; /* bitfield */
}; /* size: 0x0014 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 12,
} TAG_UNNAMED_2480, *PTAG_UNNAMED_2480;

class Worker::TaskAutoOnFlags
{
  /* 0x0000 */ unsigned long m_flagsToTurnOff;
  /* 0x0004 */ long Padding_667;
  /* 0x0008 */ class Worker* const m_worker;
}; /* size: 0x0010 */

typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long NameOffset : 31; /* bit position: 0 */
      /* 0x0000 */ unsigned long NameIsString : 1; /* bit position: 31 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long Name;
    /* 0x0000 */ unsigned short Id;
  }; /* size: 0x0004 */
  union
  {
    /* 0x0004 */ unsigned long OffsetToData;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long OffsetToDirectory : 31; /* bit position: 0 */
      /* 0x0004 */ unsigned long DataIsDirectory : 1; /* bit position: 31 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY; /* size: 0x0008 */

typedef enum
{
  countIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2481, *PTAG_UNNAMED_2481;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 10,
} TAG_UNNAMED_2482, *PTAG_UNNAMED_2482;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_668[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2483, *PTAG_UNNAMED_2483;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2484, *PTAG_UNNAMED_2484;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2485, *PTAG_UNNAMED_2485;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2486, *PTAG_UNNAMED_2486;

struct XEType
{
  /* 0x0000 */ struct XEObject m_object;
  /* 0x0020 */ unsigned char m_size;
  /* 0x0021 */ char __PADDING__[7];
}; /* size: 0x0028 */

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2487, *PTAG_UNNAMED_2487;

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  filegroup_idIdx = 3,
  is_log_fileIdx = 4,
  file_logical_nameIdx = 5,
  file_physical_nameIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2488, *PTAG_UNNAMED_2488;

typedef struct _TP_CALLBACK_ENVIRON_V1
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_669;
  /* 0x0008 */ struct _TP_POOL* Pool;
  /* 0x0010 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x0018 */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0020 */ void* RaceDll;
  /* 0x0028 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0030 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0038 */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x0038 */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x0038 */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ long __PADDING__[1];
} TP_CALLBACK_ENVIRON_V1, *PTP_CALLBACK_ENVIRON_V1; /* size: 0x0040 */

typedef enum
{
  idIdx = 0,
  timestampIdx = 1,
  host_task_addressIdx = 2,
  thread_affinity_countIdx = 3,
  leave_runtime_countIdx = 4,
  non_yielding_countIdx = 5,
  actionIdx = 6,
  stateIdx = 7,
  abort_stateIdx = 8,
  call_stackIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2489, *PTAG_UNNAMED_2489;

typedef struct _POWER_IDLE_RESILIENCY
{
  /* 0x0000 */ unsigned long CoalescingTimeout;
  /* 0x0004 */ unsigned long IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY; /* size: 0x0008 */

class XeSqlPkg::database_agent_create_filegroup
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_670[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int log_filegroup_idOffset;
    /* 0x0000 */ const int typeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

enum XeSqlPkg::host_task_ring_buffer_recorded::CustomizableSlots
{
  collect_call_stackSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 10,
  NVld = 4,
  VldEddOffset = 5,
  BufSize = 64,
} TAG_UNNAMED_2490, *PTAG_UNNAMED_2490;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  object_typeIdx = 2,
  index_idIdx = 3,
  related_object_idIdx = 4,
  ddl_phaseIdx = 5,
  transaction_idIdx = 6,
  object_nameIdx = 7,
  database_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2491, *PTAG_UNNAMED_2491;

class SListHead
{
  /* 0x0000 */ class SList* pFirst;
  /* 0x0008 */ class SList** ppLast;
}; /* size: 0x0010 */

class std::basic_iostream<unsigned short,std::char_traits<unsigned short> >
{
}; /* size: 0x0078 */

class XE_XMLHistoryTargetConfig
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 43,
} TAG_UNNAMED_2492, *PTAG_UNNAMED_2492;

struct IUnsecuredApartment
{
}; /* size: 0x0008 */

typedef struct _HEAP_BLOCK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long Padding_671;
  /* 0x0010 */ unsigned __int64 DataSize;
  /* 0x0018 */ unsigned __int64 OverheadSize;
  /* 0x0020 */ unsigned __int64 NextBlockInformationOffset;
} HEAP_BLOCK_INFORMATION, *PHEAP_BLOCK_INFORMATION; /* size: 0x0028 */

typedef enum
{
  local_node_stateIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2493, *PTAG_UNNAMED_2493;

typedef struct _VARIABLE_NAME_AND_VALUE
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long ValueOffset;
  /* 0x0008 */ unsigned long ValueLength;
  /* 0x000c */ unsigned long Attributes;
  /* 0x0010 */ struct _GUID VendorGuid;
  /* 0x0020 */ wchar_t Name[1];
  /* 0x0022 */ char __PADDING__[2];
} VARIABLE_NAME_AND_VALUE, *PVARIABLE_NAME_AND_VALUE; /* size: 0x0024 */

typedef enum
{
  brick_idIdx = 0,
  message_typeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2494, *PTAG_UNNAMED_2494;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2495, *PTAG_UNNAMED_2495;

struct IPipeByte
{
}; /* size: 0x0008 */

typedef enum
{
  durationIdx = 0,
  request_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2496, *PTAG_UNNAMED_2496;

class XeCloudMinPkg::physical_seeding_start_copy_to_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_672[140];
      /* 0x0240 */ unsigned char m_buf[58];
    }; /* size: 0x004a */
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_cluster_nameOffset;
    /* 0x0000 */ const int remote_server_nameOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_group_nameOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0280 */

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2497, *PTAG_UNNAMED_2497;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 0,
  VldEddOffset = 8,
  BufSize = 68,
} TAG_UNNAMED_2498, *PTAG_UNNAMED_2498;

typedef enum
{
  proc_textIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2499, *PTAG_UNNAMED_2499;

class HostedResourceGroupStats
{
  /* 0x0000 */ volatile __int64 m_TotalLockWaits;
  /* 0x0008 */ volatile __int64 m_TotalLockWaitTime;
  /* 0x0010 */ volatile __int64 m_TotalQueryOptimizations;
  /* 0x0018 */ volatile __int64 m_TotalSuboptimalPlanGenerations;
  /* 0x0020 */ volatile __int64 m_TotalReducedGrants;
  /* 0x0028 */ volatile __int64 m_ActiveParallelThreads;
  /* 0x0030 */ volatile __int64 m_MaxMemoryGrantKB;
  /* 0x0038 */ volatile long m_BlockedTaskCount;
  /* 0x003c */ volatile long m_BlockedTaskAggregation;
  /* 0x0040 */ volatile __int64 m_MaxRequestCPUMsec;
  /* 0x0048 */ volatile __int64 m_CpuViolationsCount;
}; /* size: 0x0050 */

struct tagMETAFILEPICT
{
  /* 0x0000 */ long mm;
  /* 0x0004 */ long xExt;
  /* 0x0008 */ long yExt;
  /* 0x000c */ long Padding_673;
  /* 0x0010 */ struct HMETAFILE__* hMF;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2500, *PTAG_UNNAMED_2500;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2501, *PTAG_UNNAMED_2501;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2502, *PTAG_UNNAMED_2502;

class XE_AutoResource<void *,200>
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  error_code_pointerIdx = 1,
  file_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2503, *PTAG_UNNAMED_2503;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION
{
  /* 0x0000 */ struct _GUID LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 18,
} TAG_UNNAMED_2504, *PTAG_UNNAMED_2504;

typedef enum
{
  session_matchIdx = 0,
  cpu_matchIdx = 1,
  last_session_idIdx = 2,
  node_statusIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2505, *PTAG_UNNAMED_2505;

class SmallBitmap
{
  /* 0x0000 */ volatile unsigned __int64 m_bits;
  /* 0x0008 */ __int64 m_numBits;
}; /* size: 0x0010 */

struct tagNMHDR
{
  /* 0x0000 */ struct HWND__* hwndFrom;
  /* 0x0008 */ unsigned __int64 idFrom;
  /* 0x0010 */ unsigned int code;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct IEnumFORMATETC
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 3,
  NDynamic = 8,
  NVld = 4,
  VldEddOffset = 3,
  BufSize = 43,
} TAG_UNNAMED_2506, *PTAG_UNNAMED_2506;

struct SET_POWER_SETTING_VALUE
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _GUID Guid;
  /* 0x0014 */ enum SYSTEM_POWER_CONDITION PowerCondition;
  /* 0x0018 */ unsigned long DataLength;
  /* 0x001c */ unsigned char Data[1];
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_descriptorIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2507, *PTAG_UNNAMED_2507;

class XeSqlPkg::xquery_static_type
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_674[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int inferred_typeOffset;
    /* 0x0000 */ const int oledb_methodOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 36,
} TAG_UNNAMED_2508, *PTAG_UNNAMED_2508;

typedef enum
{
  hash_warning_typeIdx = 0,
  query_operation_node_idIdx = 1,
  recursion_levelIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2509, *PTAG_UNNAMED_2509;

struct tagACTCTX_SECTION_KEYED_DATA
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long ulDataFormatVersion;
  /* 0x0008 */ void* lpData;
  /* 0x0010 */ unsigned long ulLength;
  /* 0x0014 */ long Padding_675;
  /* 0x0018 */ void* lpSectionGlobalData;
  /* 0x0020 */ unsigned long ulSectionGlobalDataLength;
  /* 0x0024 */ long Padding_676;
  /* 0x0028 */ void* lpSectionBase;
  /* 0x0030 */ unsigned long ulSectionTotalLength;
  /* 0x0034 */ long Padding_677;
  /* 0x0038 */ void* hActCtx;
  /* 0x0040 */ unsigned long ulAssemblyRosterIndex;
  /* 0x0044 */ unsigned long ulFlags;
  /* 0x0048 */ struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
}; /* size: 0x0070 */

typedef class _variant_t
{
} variant_t, *Pvariant_t; /* size: 0x0018 */

enum XeSqlPkg::EventOpcode
{
  EVENT_OPCODE_BEGIN = 0,
  EVENT_OPCODE_END = 1,
};

typedef enum
{
  opcodeIdx = 0,
  interval_timeIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2510, *PTAG_UNNAMED_2510;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2511, *PTAG_UNNAMED_2511;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2512, *PTAG_UNNAMED_2512;

struct IWbemBackupRestoreEx
{
}; /* size: 0x0008 */

typedef struct _PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING ServiceName;
  /* 0x0010 */ wchar_t* DeviceInstance;
  /* 0x0018 */ unsigned long DeviceInstanceLength;
  /* 0x001c */ long __PADDING__[1];
} PLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA, *PPLUGPLAY_CONTROL_LEGACY_DEVGEN_DATA; /* size: 0x0020 */

typedef enum
{
  send_queue_sizeIdx = 0,
  common_redo_lsnIdx = 1,
  truncation_lsnIdx = 2,
  message_log_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2513, *PTAG_UNNAMED_2513;

class AutoSpinlockHolder<234,1,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2514, *PTAG_UNNAMED_2514;

struct SHELLHOOKINFO
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0008 */ struct tagRECT rc;
}; /* size: 0x0018 */

typedef enum
{
  channel_map_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2515, *PTAG_UNNAMED_2515;

class XeCloudMinPkg::kill_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_678[140];
      /* 0x0240 */ unsigned char m_buf[75];
    }; /* size: 0x005b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0290 */

typedef enum
{
  task_idIdx = 0,
  thread_idIdx = 1,
  statusIdx = 2,
  wait_timeIdx = 3,
  task_typeIdx = 4,
  task_stateIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2516, *PTAG_UNNAMED_2516;

class Spinlock<42,18,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2517, *PTAG_UNNAMED_2517;

typedef enum
{
  current_statusIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2518, *PTAG_UNNAMED_2518;

struct ICreateTypeInfo2
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2519, *PTAG_UNNAMED_2519;

typedef struct _NETLOGON_INFO_2
{
  /* 0x0000 */ unsigned long netlog2_flags;
  /* 0x0004 */ unsigned long netlog2_pdc_connection_status;
  /* 0x0008 */ wchar_t* netlog2_trusted_dc_name;
  /* 0x0010 */ unsigned long netlog2_tc_connection_status;
  /* 0x0014 */ long __PADDING__[1];
} NETLOGON_INFO_2, *PNETLOGON_INFO_2; /* size: 0x0018 */

typedef enum
{
  remote_server_idIdx = 0,
  linked_server_nameIdx = 1,
  provider_nameIdx = 2,
  user_idIdx = 3,
  nt_user_idIdx = 4,
  provider_string_openrowsetIdx = 5,
  datasource_openrowsetIdx = 6,
  location_openrowsetIdx = 7,
  catalog_openrowsetIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2520, *PTAG_UNNAMED_2520;

class Spinlock<208,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2521, *PTAG_UNNAMED_2521;

class TCacheSimulation<CacheClockAlgorithm>
{
  /* 0x0000 */ long Padding_679[88];
  /* 0x0160 */ unsigned __int64 m_simulationBenefit;
  /* 0x0168 */ __int64 m_savedSimulationSize;
}; /* size: 0x0170 */

typedef enum
{
  recompile_countIdx = 0,
  compiled_object_typeIdx = 1,
  compiled_object_idIdx = 2,
  begin_offsetIdx = 3,
  end_offsetIdx = 4,
  plan_handleIdx = 5,
  sql_handleIdx = 6,
  execution_statisticsIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2522, *PTAG_UNNAMED_2522;

struct tagNCCALCSIZE_PARAMS
{
  /* 0x0000 */ struct tagRECT rgrc[3];
  /* 0x0030 */ struct tagWINDOWPOS* lppos;
}; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2523, *PTAG_UNNAMED_2523;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  index_idIdx = 2,
  hobt_idIdx = 3,
  database_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2524, *PTAG_UNNAMED_2524;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2525, *PTAG_UNNAMED_2525;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2526, *PTAG_UNNAMED_2526;

typedef struct _MOUSE_EVENT_RECORD
{
  /* 0x0000 */ struct _COORD dwMousePosition;
  /* 0x0004 */ unsigned long dwButtonState;
  /* 0x0008 */ unsigned long dwControlKeyState;
  /* 0x000c */ unsigned long dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD; /* size: 0x0010 */

typedef struct _WINDOW_BUFFER_SIZE_RECORD
{
  /* 0x0000 */ struct _COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD; /* size: 0x0004 */

typedef struct _INPUT_RECORD
{
  /* 0x0000 */ unsigned short EventType;
  /* 0x0002 */ char Padding_680[2];
  union
  {
    union
    {
      /* 0x0004 */ struct _KEY_EVENT_RECORD KeyEvent;
      /* 0x0004 */ struct _MOUSE_EVENT_RECORD MouseEvent;
      /* 0x0004 */ struct _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
      /* 0x0004 */ struct _MENU_EVENT_RECORD MenuEvent;
      /* 0x0004 */ struct _FOCUS_EVENT_RECORD FocusEvent;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Event;
} INPUT_RECORD, *PINPUT_RECORD; /* size: 0x0014 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 40,
} TAG_UNNAMED_2527, *PTAG_UNNAMED_2527;

enum XeSqlPkg::file_read_enqueued::CustomizableSlots
{
  collect_pathSlot = 0,
};

typedef enum
{
  connection_reset_optionIdx = 0,
  object_nameIdx = 1,
  statementIdx = 2,
  data_streamIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2528, *PTAG_UNNAMED_2528;

class SEListEnum<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

enum XeSqlPkg::rpc_starting::CustomizableSlots
{
  collect_statementSlot = 0,
  collect_data_streamSlot = 1,
};

class SEList<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 8,
  VldEddOffset = 0,
  BufSize = 72,
} TAG_UNNAMED_2529, *PTAG_UNNAMED_2529;

class XeSqlPkg::server_start_stop
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_681[140];
      /* 0x0240 */ unsigned char m_buf[2];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int successOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2530, *PTAG_UNNAMED_2530;

struct tagEMROFFSETCLIPRGN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _POINTL ptlOffset;
}; /* size: 0x0010 */

struct IOleCache
{
}; /* size: 0x0008 */

typedef enum
{
  rowset_idIdx = 0,
  allocation_unit_idIdx = 1,
  database_idIdx = 2,
  filegroup_idIdx = 3,
  previous_grant_in_pagesIdx = 4,
  requested_grant_in_pagesIdx = 5,
  grant_delta_in_pagesIdx = 6,
  new_grant_in_pagesIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2531, *PTAG_UNNAMED_2531;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 38,
} TAG_UNNAMED_2532, *PTAG_UNNAMED_2532;

typedef struct _CM_PARTIAL_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_DESCRIPTOR PartialDescriptors[1];
} CM_PARTIAL_RESOURCE_LIST, *PCM_PARTIAL_RESOURCE_LIST; /* size: 0x001c */

typedef struct _CM_FULL_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0004 */ unsigned long BusNumber;
  /* 0x0008 */ struct _CM_PARTIAL_RESOURCE_LIST PartialResourceList;
} CM_FULL_RESOURCE_DESCRIPTOR, *PCM_FULL_RESOURCE_DESCRIPTOR; /* size: 0x0024 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2533, *PTAG_UNNAMED_2533;

class SEList<SystemThread,160>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _USER_INFO_1053
{
  /* 0x0000 */ wchar_t* usri1053_home_dir_drive;
} USER_INFO_1053, *PUSER_INFO_1053; /* size: 0x0008 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2534, *PTAG_UNNAMED_2534;

typedef enum
{
  configured_maxdopIdx = 0,
  max_concurrent_branchesIdx = 1,
  parallel_segmentsIdx = 2,
  schedulersIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2535, *PTAG_UNNAMED_2535;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2536, *PTAG_UNNAMED_2536;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2537, *PTAG_UNNAMED_2537;

class SEListEnum<XE_IMetadata,32>
{
  /* 0x0000 */ class SEList<XE_IMetadata,32>* m_pList;
  /* 0x0008 */ class XE_IMetadata* m_pNext;
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2538, *PTAG_UNNAMED_2538;

struct tagNEWTEXTMETRICEXW
{
  /* 0x0000 */ struct tagNEWTEXTMETRICW ntmTm;
  /* 0x004c */ struct tagFONTSIGNATURE ntmFontSig;
}; /* size: 0x0064 */

struct tagAXESLISTW
{
  /* 0x0000 */ unsigned long axlReserved;
  /* 0x0004 */ unsigned long axlNumAxes;
  /* 0x0008 */ struct tagAXISINFOW axlAxisInfo[16];
}; /* size: 0x0288 */

struct tagENUMTEXTMETRICW
{
  /* 0x0000 */ struct tagNEWTEXTMETRICEXW etmNewTextMetricEx;
  /* 0x0064 */ struct tagAXESLISTW etmAxesList;
}; /* size: 0x02ec */

typedef enum
{
  database_idIdx = 0,
  start_log_block_idIdx = 1,
  last_log_block_idIdx = 2,
  private_consumer_idIdx = 3,
  weightIdx = 4,
  cache_buffer_pointerIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2539, *PTAG_UNNAMED_2539;

class CAutoBase<XEAction>
{
  /* 0x0000 */ struct XEAction* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 38,
} TAG_UNNAMED_2540, *PTAG_UNNAMED_2540;

typedef struct _AE_CONNREJ
{
  /* 0x0000 */ unsigned long ae_cr_compname;
  /* 0x0004 */ unsigned long ae_cr_username;
  /* 0x0008 */ unsigned long ae_cr_netname;
  /* 0x000c */ unsigned long ae_cr_reason;
} AE_CONNREJ, *PAE_CONNREJ; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  recovery_unit_idIdx = 1,
  database_segment_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2541, *PTAG_UNNAMED_2541;

typedef enum
{
  message_classIdx = 0,
  message_protocolIdx = 1,
  message_sizeIdx = 2,
  encrypted_offsetIdx = 3,
  endpoint_typeIdx = 4,
  connection_idIdx = 5,
  addressIdx = 6,
  message_corruptionIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2542, *PTAG_UNNAMED_2542;

typedef struct __s_GUID
{
  /* 0x0000 */ unsigned long Data1;
  /* 0x0004 */ unsigned short Data2;
  /* 0x0006 */ unsigned short Data3;
  /* 0x0008 */ unsigned char Data4[8];
} _s_GUID, *P_s_GUID; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2543, *PTAG_UNNAMED_2543;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long BeginAddress;
  /* 0x0004 */ unsigned long EndAddress;
  /* 0x0008 */ unsigned long UnwindInfoAddress;
} IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY; /* size: 0x000c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2544, *PTAG_UNNAMED_2544;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2545, *PTAG_UNNAMED_2545;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2546, *PTAG_UNNAMED_2546;

class CAutoRg<XEAction>
{
}; /* size: 0x0008 */

struct IInternetPriority
{
}; /* size: 0x0008 */

enum XeSqlPkg::filestream_file_io_failure::CustomizableSlots
{
  collect_workitem_descriptionSlot = 0,
  collect_transaction_idSlot = 1,
  collect_correlation_idsSlot = 2,
  collect_logical_pathSlot = 3,
  collect_physical_pathSlot = 4,
  collect_original_pathSlot = 5,
};

typedef enum
{
  error_numberIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2547, *PTAG_UNNAMED_2547;

struct IQuickActivate
{
}; /* size: 0x0008 */

struct IClassFactory
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2548, *PTAG_UNNAMED_2548;

typedef enum
{
  dbIdIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2549, *PTAG_UNNAMED_2549;

class CacheClockAlgorithm
{
  union
  {
    /* 0x0000 */ const int SOSHOST_EXPOSED;
    /* 0x0000 */ enum cache_type TYPE;
    /* 0x0000 */ const unsigned long CLOCKS_MAXPERCONTEXT;
    /* 0x0000 */ const unsigned long CLOCKS_MAXPERMEMPAGES;
    /* 0x0000 */ const unsigned long CLOCKS_MAXPERIO;
    /* 0x0000 */ const unsigned long CLOCKS_MAXPERUSE;
    struct
    {
      /* 0x0000 */ const unsigned long CLOCKS_MAXCOST;
      /* 0x0004 */ long Padding_682[85];
      /* 0x0158 */ __int64 m_sizeInPages;
    }; /* size: 0x000c */
    /* 0x0000 */ const unsigned long CLOCKS_FIXEDTICS;
    /* 0x0000 */ const unsigned long CLOCKS_FIXEDCONTEXT;
    /* 0x0000 */ const unsigned long CLOCKS_PERCONTEXT;
    /* 0x0000 */ const unsigned long CLOCKS_PERIO;
    /* 0x0000 */ const unsigned long CLOCKS_PERMEMPAGES;
  }; /* size: 0x000c */
}; /* size: 0x0160 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2550, *PTAG_UNNAMED_2550;

typedef enum
{
  stageIdx = 0,
  num_handlers_startedIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2551, *PTAG_UNNAMED_2551;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_2552, *PTAG_UNNAMED_2552;

typedef enum
{
  error_numberIdx = 0,
  successIdx = 1,
  new_transaction_startedIdx = 2,
  statementIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2553, *PTAG_UNNAMED_2553;

struct HDESK__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class XeSqlPkg::ghost_cleanup_task_packet_enqueue
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_683[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int ghost_typeOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

enum XeSqlPkg::rollback_tran_completed::CustomizableSlots
{
  collect_statementSlot = 0,
};

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2554, *PTAG_UNNAMED_2554;

struct tagWNODE_TOO_SMALL
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
  /* 0x0030 */ unsigned long SizeNeeded;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

typedef enum
{
  cursor_typeIdx = 0,
  protocol_execution_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2555, *PTAG_UNNAMED_2555;

typedef enum
{
  stageIdx = 0,
  phaseIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2556, *PTAG_UNNAMED_2556;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2557, *PTAG_UNNAMED_2557;

typedef struct _MIDL_FORMAT_STRING
{
  /* 0x0000 */ short Pad;
  /* 0x0002 */ unsigned char* Format /* zero-length array */;
} MIDL_FORMAT_STRING, *PMIDL_FORMAT_STRING; /* size: 0x0002 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 0,
  VldEddOffset = 6,
  BufSize = 25,
} TAG_UNNAMED_2558, *PTAG_UNNAMED_2558;

struct BlockDescriptorBucketSLock
{
}; /* size: 0x0004 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  worker_idIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2559, *PTAG_UNNAMED_2559;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 48,
} TAG_UNNAMED_2560, *PTAG_UNNAMED_2560;

struct ISWbemObjectSet
{
}; /* size: 0x0008 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >;

typedef struct _OFSTRUCT
{
  /* 0x0000 */ unsigned char cBytes;
  /* 0x0001 */ unsigned char fFixedDisk;
  /* 0x0002 */ unsigned short nErrCode;
  /* 0x0004 */ unsigned short Reserved1;
  /* 0x0006 */ unsigned short Reserved2;
  /* 0x0008 */ char szPathName[128];
} OFSTRUCT, *POFSTRUCT; /* size: 0x0088 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 6,
  VldEddOffset = 3,
  BufSize = 69,
} TAG_UNNAMED_2561, *PTAG_UNNAMED_2561;

typedef enum
{
  completion_countIdx = 0,
  offsetsIdx = 1,
  sizesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2562, *PTAG_UNNAMED_2562;

typedef enum
{
  resolved_commit_countIdx = 0,
  resolved_rollback_countIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2563, *PTAG_UNNAMED_2563;

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 8,
  NVld = 1,
  VldEddOffset = 6,
  BufSize = 57,
} TAG_UNNAMED_2564, *PTAG_UNNAMED_2564;

struct tagACTCTXW
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ const wchar_t* lpSource;
  /* 0x0010 */ unsigned short wProcessorArchitecture;
  /* 0x0012 */ unsigned short wLangId;
  /* 0x0014 */ long Padding_684;
  /* 0x0018 */ const wchar_t* lpAssemblyDirectory;
  /* 0x0020 */ const wchar_t* lpResourceName;
  /* 0x0028 */ const wchar_t* lpApplicationName;
  /* 0x0030 */ struct HINSTANCE__* hModule;
}; /* size: 0x0038 */

struct CLUS_DNN_LEADER_STATUS
{
  /* 0x0000 */ int IsOnline;
  /* 0x0004 */ int IsFileServerPresent;
}; /* size: 0x0008 */

typedef enum
{
  schema_mgr_database_idIdx = 0,
  versionIdx = 1,
  operationIdx = 2,
  hobt_idIdx = 3,
  allocation_unitIdx = 4,
  au_fg_idIdx = 5,
  au_first_file_idIdx = 6,
  au_first_page_idIdx = 7,
  au_root_file_idIdx = 8,
  au_root_page_idIdx = 9,
  au_iam_file_idIdx = 10,
  au_iam_page_idIdx = 11,
  page_count_leafIdx = 12,
  page_count_usedIdx = 13,
  page_count_reservedIdx = 14,
  LastField = 15,
} TAG_UNNAMED_2565, *PTAG_UNNAMED_2565;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_2566, *PTAG_UNNAMED_2566;

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 37,
} TAG_UNNAMED_2567, *PTAG_UNNAMED_2567;

typedef struct _TRUSTEE_A
{
  /* 0x0000 */ struct _TRUSTEE_A* pMultipleTrustee;
  /* 0x0008 */ enum _MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;
  /* 0x000c */ enum _TRUSTEE_FORM TrusteeForm;
  /* 0x0010 */ enum _TRUSTEE_TYPE TrusteeType;
  /* 0x0014 */ long Padding_685;
  /* 0x0018 */ char* ptstrName;
} TRUSTEE_A, *PTRUSTEE_A; /* size: 0x0020 */

typedef struct _EXPLICIT_ACCESS_A
{
  /* 0x0000 */ unsigned long grfAccessPermissions;
  /* 0x0004 */ enum _ACCESS_MODE grfAccessMode;
  /* 0x0008 */ unsigned long grfInheritance;
  /* 0x000c */ long Padding_686;
  /* 0x0010 */ struct _TRUSTEE_A Trustee;
} EXPLICIT_ACCESS_A, *PEXPLICIT_ACCESS_A; /* size: 0x0030 */

typedef enum
{
  worker_limitIdx = 0,
  idle_workersIdx = 1,
  active_workersIdx = 2,
  worker_start_successIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2568, *PTAG_UNNAMED_2568;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_2569, *PTAG_UNNAMED_2569;

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  consumer_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2570, *PTAG_UNNAMED_2570;

struct tagEMRNAMEDESCAPE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ int iEscape;
  /* 0x000c */ int cbDriver;
  /* 0x0010 */ int cbEscData;
  /* 0x0014 */ unsigned char EscData[1];
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

class CAutoBase<XE_FileSetMemoryMap>
{
  /* 0x0000 */ class XE_FileSetMemoryMap* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  field_offsetIdx = 0,
  field_sizeIdx = 1,
  field_valueIdx = 2,
  field_nameIdx = 3,
  archive_file_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2571, *PTAG_UNNAMED_2571;

typedef struct _PROCESSOR_RELATIONSHIP
{
  /* 0x0000 */ unsigned char Flags;
  /* 0x0001 */ unsigned char Reserved[21];
  /* 0x0016 */ unsigned short GroupCount;
  /* 0x0018 */ struct _GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP; /* size: 0x0028 */

typedef struct _NUMA_NODE_RELATIONSHIP
{
  /* 0x0000 */ unsigned long NodeNumber;
  /* 0x0004 */ unsigned char Reserved[20];
  /* 0x0018 */ struct _GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP; /* size: 0x0028 */

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
  /* 0x0000 */ enum _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
  /* 0x0004 */ unsigned long Size;
  union
  {
    /* 0x0008 */ struct _PROCESSOR_RELATIONSHIP Processor;
    /* 0x0008 */ struct _NUMA_NODE_RELATIONSHIP NumaNode;
    /* 0x0008 */ struct _CACHE_RELATIONSHIP Cache;
    /* 0x0008 */ struct _GROUP_RELATIONSHIP Group;
  }; /* size: 0x0048 */
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX; /* size: 0x0050 */

class DmpPointer<SEList<SystemThread,160> >
{
  /* 0x0000 */ class SEList<SystemThread,160>* m_pRaw;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 32,
} TAG_UNNAMED_2572, *PTAG_UNNAMED_2572;

class XeSqlPkg::parallel_scan_stuck_read_ahead
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_687[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int worker_idOffset;
    /* 0x0000 */ const int stuck_worker_idOffset;
    /* 0x0000 */ const int pages_in_queueOffset;
    /* 0x0000 */ const int outstanding_pagesOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 24,
} TAG_UNNAMED_2573, *PTAG_UNNAMED_2573;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2574, *PTAG_UNNAMED_2574;

struct ITypeInfo2
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2575, *PTAG_UNNAMED_2575;

enum XeSqlPkg::broker_queue_activation_alert::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 24,
} TAG_UNNAMED_2576, *PTAG_UNNAMED_2576;

struct RPC_IMPORT_CONTEXT_P
{
  /* 0x0000 */ void* LookupContext;
  /* 0x0008 */ void* ProposedHandle;
  /* 0x0010 */ struct _RPC_BINDING_VECTOR* Bindings;
}; /* size: 0x0018 */

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  pathIdx = 7,
  io_dataIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2577, *PTAG_UNNAMED_2577;

struct SYSTEM_POWER_CAPABILITIES
{
  /* 0x0000 */ unsigned char PowerButtonPresent;
  /* 0x0001 */ unsigned char SleepButtonPresent;
  /* 0x0002 */ unsigned char LidPresent;
  /* 0x0003 */ unsigned char SystemS1;
  /* 0x0004 */ unsigned char SystemS2;
  /* 0x0005 */ unsigned char SystemS3;
  /* 0x0006 */ unsigned char SystemS4;
  /* 0x0007 */ unsigned char SystemS5;
  /* 0x0008 */ unsigned char HiberFilePresent;
  /* 0x0009 */ unsigned char FullWake;
  /* 0x000a */ unsigned char VideoDimPresent;
  /* 0x000b */ unsigned char ApmPresent;
  /* 0x000c */ unsigned char UpsPresent;
  /* 0x000d */ unsigned char ThermalControl;
  /* 0x000e */ unsigned char ProcessorThrottle;
  /* 0x000f */ unsigned char ProcessorMinThrottle;
  /* 0x0010 */ unsigned char ProcessorMaxThrottle;
  /* 0x0011 */ unsigned char FastSystemS4;
  /* 0x0012 */ unsigned char Hiberboot;
  /* 0x0013 */ unsigned char WakeAlarmPresent;
  /* 0x0014 */ unsigned char AoAc;
  /* 0x0015 */ unsigned char DiskSpinDown;
  /* 0x0016 */ unsigned char spare3[8];
  /* 0x001e */ unsigned char SystemBatteriesPresent;
  /* 0x001f */ unsigned char BatteriesAreShortTerm;
  /* 0x0020 */ struct BATTERY_REPORTING_SCALE BatteryScale[3];
  /* 0x0038 */ enum _SYSTEM_POWER_STATE AcOnLineWake;
  /* 0x003c */ enum _SYSTEM_POWER_STATE SoftLidWake;
  /* 0x0040 */ enum _SYSTEM_POWER_STATE RtcWake;
  /* 0x0044 */ enum _SYSTEM_POWER_STATE MinDeviceWakeState;
  /* 0x0048 */ enum _SYSTEM_POWER_STATE DefaultLowLatencyWake;
}; /* size: 0x004c */

class SOS_OS::QpcInitializer
{
}; /* size: 0x0001 */

struct tagPARSEDURLA
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_688;
  /* 0x0008 */ const char* pszProtocol;
  /* 0x0010 */ unsigned int cchProtocol;
  /* 0x0014 */ long Padding_689;
  /* 0x0018 */ const char* pszSuffix;
  /* 0x0020 */ unsigned int cchSuffix;
  /* 0x0024 */ unsigned int nScheme;
}; /* size: 0x0028 */

typedef struct _AE_SESSLOGOFF
{
  /* 0x0000 */ unsigned long ae_sf_compname;
  /* 0x0004 */ unsigned long ae_sf_username;
  /* 0x0008 */ unsigned long ae_sf_reason;
} AE_SESSLOGOFF, *PAE_SESSLOGOFF; /* size: 0x000c */

enum XeSqlPkg::file_write_enqueued::CustomizableSlots
{
  collect_pathSlot = 0,
  collect_io_dataSlot = 1,
};

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2578, *PTAG_UNNAMED_2578;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  modeIdx = 2,
  is_kill_requestIdx = 3,
  is_low_priority_requestIdx = 4,
  request_timeoutIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2579, *PTAG_UNNAMED_2579;

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2580, *PTAG_UNNAMED_2580;

typedef enum
{
  compile_timeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2581, *PTAG_UNNAMED_2581;

typedef enum
{
  database_idIdx = 0,
  target_timeIdx = 1,
  dirty_page_read_timeIdx = 2,
  dirty_page_countIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2582, *PTAG_UNNAMED_2582;

struct IPersistPropertyBag2
{
}; /* size: 0x0008 */

struct SOS_OS::CacheLimitsReferenceTable::SingleReference
{
  /* 0x0000 */ int rangeMin;
  /* 0x0004 */ int rangeMax;
  /* 0x0008 */ int percent;
  /* 0x000c */ int limit;
}; /* size: 0x0010 */

class SOS_OS::CacheLimitsReferenceTable
{
  union
  {
    /* 0x0000 */ const unsigned long sm_NumberOfEntries;
    /* 0x0000 */ const unsigned long sm_MaxLimit;
    /* 0x0000 */ struct SOS_OS::CacheLimitsReferenceTable::SingleReference sm_table[3];
  }; /* size: 0x0030 */
}; /* size: 0x0001 */

class CAutoBase<XE_CXHistoryTargetConfig>
{
  /* 0x0000 */ struct XE_CXHistoryTargetConfig* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  local_database_segment_idIdx = 2,
  previous_stateIdx = 3,
  new_stateIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2583, *PTAG_UNNAMED_2583;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 14,
} TAG_UNNAMED_2584, *PTAG_UNNAMED_2584;

typedef enum
{
  database_idIdx = 0,
  local_brick_idIdx = 1,
  local_operation_typeIdx = 2,
  database_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2585, *PTAG_UNNAMED_2585;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2586, *PTAG_UNNAMED_2586;

typedef union _IMAGE_AUX_SYMBOL
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long TagIndex;
      union
      {
        union
        {
          struct
          {
            /* 0x0004 */ unsigned short Linenumber;
            /* 0x0006 */ unsigned short Size;
          } /* size: 0x0004 */ LnSz;
          /* 0x0004 */ unsigned long TotalSize;
        }; /* size: 0x0004 */
      } /* size: 0x0004 */ Misc;
      union
      {
        union
        {
          struct
          {
            /* 0x0008 */ unsigned long PointerToLinenumber;
            /* 0x000c */ unsigned long PointerToNextFunction;
          } /* size: 0x0008 */ Function;
          struct
          {
            /* 0x0008 */ unsigned short Dimension[4];
          } /* size: 0x0008 */ Array;
        }; /* size: 0x0008 */
      } /* size: 0x0008 */ FcnAry;
      /* 0x0010 */ unsigned short TvIndex;
    } /* size: 0x0012 */ Sym;
    struct
    {
      /* 0x0000 */ unsigned char Name[18];
    } /* size: 0x0012 */ File;
    struct
    {
      /* 0x0000 */ unsigned long Length;
      /* 0x0004 */ unsigned short NumberOfRelocations;
      /* 0x0006 */ unsigned short NumberOfLinenumbers;
      /* 0x0008 */ unsigned long CheckSum;
      /* 0x000c */ short Number;
      /* 0x000e */ unsigned char Selection;
      /* 0x000f */ unsigned char bReserved;
      /* 0x0010 */ short HighNumber;
    } /* size: 0x0012 */ Section;
    /* 0x0000 */ struct IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct
    {
      /* 0x0000 */ unsigned long crc;
      /* 0x0004 */ unsigned char rgbReserved[14];
    } /* size: 0x0012 */ CRC;
  }; /* size: 0x0012 */
} IMAGE_AUX_SYMBOL, *PIMAGE_AUX_SYMBOL; /* size: 0x0012 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2587, *PTAG_UNNAMED_2587;

struct tagMSLLHOOKSTRUCT
{
  /* 0x0000 */ struct tagPOINT pt;
  /* 0x0008 */ unsigned long mouseData;
  /* 0x000c */ unsigned long flags;
  /* 0x0010 */ unsigned long time;
  /* 0x0014 */ long Padding_690;
  /* 0x0018 */ unsigned __int64 dwExtraInfo;
}; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  securable_classIdx = 1,
  securable_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2588, *PTAG_UNNAMED_2588;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_2589, *PTAG_UNNAMED_2589;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2590, *PTAG_UNNAMED_2590;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 6,
  NDynamic = 6,
  NVld = 6,
  VldEddOffset = -1,
  BufSize = 48,
} TAG_UNNAMED_2591, *PTAG_UNNAMED_2591;

class Spinlock<334,0,257>
{
}; /* size: 0x0004 */

typedef enum
{
  statementIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2592, *PTAG_UNNAMED_2592;

typedef struct _POWER_SESSION_CONNECT
{
  /* 0x0000 */ unsigned char Connected;
  /* 0x0001 */ unsigned char Console;
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT; /* size: 0x0002 */

typedef enum
{
  delayed_error_numberIdx = 0,
  message_sourceIdx = 1,
  is_initiatorIdx = 2,
  route_typeIdx = 3,
  conversation_idIdx = 4,
  delayed_errorIdx = 5,
  next_hop_broker_instanceIdx = 6,
  next_hop_addressIdx = 7,
  to_broker_instanceIdx = 8,
  to_service_nameIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2593, *PTAG_UNNAMED_2593;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2594, *PTAG_UNNAMED_2594;

class MethodCallBinder_4<long,ISOSHostImpl,long (__cdecl ISOSHostImpl::*)(void * (__cdecl*)(void *),void *,unsigned long,ISOSHost_Task * *),void * (__cdecl*)(void *),void *,unsigned long,ISOSHost_Task * *>
{
  /* 0x0000 */ class ISOSHostImpl* const m_pTObj;
  /* 0x0008 */ void* m_f /* function */;
  /* 0x0018 */ void* m_p1 /* function */;
  /* 0x0020 */ void* m_p2;
  /* 0x0028 */ unsigned long m_p3;
  /* 0x002c */ long Padding_691;
  /* 0x0030 */ struct ISOSHost_Task** m_p4;
}; /* size: 0x0038 */

typedef enum
{
  durationIdx = 0,
  cpu_timeIdx = 1,
  physical_readsIdx = 2,
  logical_readsIdx = 3,
  writesIdx = 4,
  row_countIdx = 5,
  last_row_countIdx = 6,
  line_numberIdx = 7,
  offsetIdx = 8,
  offset_endIdx = 9,
  statementIdx = 10,
  parameterized_plan_handleIdx = 11,
  LastField = 12,
} TAG_UNNAMED_2595, *PTAG_UNNAMED_2595;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2596, *PTAG_UNNAMED_2596;

typedef struct __vc_attributes::threadingAttribute
{
  /* 0x0000 */ enum __vc_attributes::threadingAttribute::threading_e value;
} _vc_attributes::threadingAttribute, *P_vc_attributes::threadingAttribute; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2597, *PTAG_UNNAMED_2597;

typedef struct _POWER_SESSION_WINLOGON
{
  /* 0x0000 */ unsigned long SessionId;
  /* 0x0004 */ unsigned char Console;
  /* 0x0005 */ unsigned char Locked;
  /* 0x0006 */ char __PADDING__[2];
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON; /* size: 0x0008 */

typedef enum
{
  durationIdx = 0,
  transaction_stateIdx = 1,
  transaction_typeIdx = 2,
  transaction_idIdx = 3,
  object_nameIdx = 4,
  savepoint_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2598, *PTAG_UNNAMED_2598;

class CMemDbg<PageHeapMemObj>
{
  /* 0x0000 */ const unsigned __int64 xsm_cbMaxSizeFitsOnPage;
  /* 0x0008 */ long Padding_692[24];
  /* 0x0068 */ class SOS_Task* m_pTask;
  /* 0x0070 */ int m_fUseFree;
  /* 0x0074 */ unsigned long m_bTraceOptions;
  /* 0x0078 */ class CMallocSpy m_msSpy;
  /* 0x0420 */ int m_fReadOnly;
  /* 0x0424 */ int m_fCheckThreadAccess;
  /* 0x0428 */ int m_fBeingDestroyed;
  /* 0x042c */ long Padding_693;
  /* 0x0430 */ class Worker* m_pLockOwner;
}; /* size: 0x0438 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2599, *PTAG_UNNAMED_2599;

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_694;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >* m_pList;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 12,
  NVld = 3,
  VldEddOffset = 8,
  BufSize = 73,
} TAG_UNNAMED_2600, *PTAG_UNNAMED_2600;

typedef struct _IMAGE_BOUND_FORWARDER_REF
{
  /* 0x0000 */ unsigned long TimeDateStamp;
  /* 0x0004 */ unsigned short OffsetModuleName;
  /* 0x0006 */ unsigned short Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2601, *PTAG_UNNAMED_2601;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2602, *PTAG_UNNAMED_2602;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2603, *PTAG_UNNAMED_2603;

typedef enum
{
  query_operator_node_idIdx = 0,
  spilling_levelIdx = 1,
  spilled_partitions_percentIdx = 2,
  build_side_spilled_data_sizeIdx = 3,
  build_side_in_memory_data_sizeIdx = 4,
  probe_side_spilled_data_sizeIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2604, *PTAG_UNNAMED_2604;

class XE_PredCompForwarder
{
  /* 0x0000 */ enum XEPredicateResult m_Result;
  /* 0x0004 */ unsigned int m_instanceId;
  /* 0x0008 */ void* m_pfnPredComp /* function */;
  /* 0x0010 */ const struct XEPredicateValue* m_comperand;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2605, *PTAG_UNNAMED_2605;

struct IRowsetCurrentIndex
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_2606, *PTAG_UNNAMED_2606;

class XeSosPkg::thread_detached
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

typedef enum
{
  database_idIdx = 0,
  resource_pool_idIdx = 1,
  xtp_memory_broker_target_allocationsIdx = 2,
  xtp_memory_broker_allocationsIdx = 3,
  xtp_memory_broker_overall_memoryIdx = 4,
  system_physical_memory_highIdx = 5,
  system_virtual_memory_lowIdx = 6,
  process_physical_memory_lowIdx = 7,
  process_virtual_memory_lowIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2607, *PTAG_UNNAMED_2607;

struct IPipeLong
{
}; /* size: 0x0008 */

class RefCountImpl<SOS_StoreAndClockAlgorithmControlInterface>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct HENHMETAFILE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2608, *PTAG_UNNAMED_2608;

struct StaticStorage<402>
{
  /* 0x0000 */ unsigned int m_buf[13];
}; /* size: 0x0034 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_2609, *PTAG_UNNAMED_2609;

typedef enum
{
  resource_typeIdx = 0,
  modeIdx = 1,
  owner_typeIdx = 2,
  transaction_idIdx = 3,
  database_idIdx = 4,
  lockspace_workspace_idIdx = 5,
  lockspace_sub_idIdx = 6,
  lockspace_nest_idIdx = 7,
  resource_0Idx = 8,
  resource_1Idx = 9,
  resource_2Idx = 10,
  object_idIdx = 11,
  associated_object_idIdx = 12,
  durationIdx = 13,
  resource_descriptionIdx = 14,
  database_nameIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2610, *PTAG_UNNAMED_2610;

enum XeSqlPkg::lock_acquired::CustomizableSlots
{
  collect_resource_descriptionSlot = 0,
  collect_database_nameSlot = 1,
};

struct tagCOLORADJUSTMENT
{
  /* 0x0000 */ unsigned short caSize;
  /* 0x0002 */ unsigned short caFlags;
  /* 0x0004 */ unsigned short caIlluminantIndex;
  /* 0x0006 */ unsigned short caRedGamma;
  /* 0x0008 */ unsigned short caGreenGamma;
  /* 0x000a */ unsigned short caBlueGamma;
  /* 0x000c */ unsigned short caReferenceBlack;
  /* 0x000e */ unsigned short caReferenceWhite;
  /* 0x0010 */ short caContrast;
  /* 0x0012 */ short caBrightness;
  /* 0x0014 */ short caColorfulness;
  /* 0x0016 */ short caRedGreenTint;
}; /* size: 0x0018 */

struct tagSTYLESTRUCT
{
  /* 0x0000 */ unsigned long styleOld;
  /* 0x0004 */ unsigned long styleNew;
}; /* size: 0x0008 */

class SESinglyLinkedStruct<WaitForGraphVertex,8>
{
  /* 0x0000 */ class WaitForGraphVertex* m_head;
  /* 0x0008 */ class WaitForGraphVertex* m_tail;
  /* 0x0010 */ unsigned int m_numElements;
}; /* size: 0x0018 */

class SESinglyLinkedStruct<WaitForGraphVertex,16>
{
  /* 0x0000 */ class WaitForGraphVertex* m_head;
  /* 0x0008 */ class WaitForGraphVertex* m_tail;
  /* 0x0010 */ unsigned int m_numElements;
}; /* size: 0x0018 */

class WaitForGraph
{
  union
  {
    /* 0x0000 */ const unsigned int WFG_VERTEX_ARRAY_INIT_CAPACITY;
    /* 0x0000 */ const unsigned int WFG_VERTEX_ARRAY_CAPACITY_EXP_INCR_LIMIT;
    /* 0x0000 */ const unsigned int WFG_VERTEX_ARRAY_CAPACITY_NON_EXP_INCR;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_695;
  /* 0x0008 */ class IMemObj* m_Pmo;
  /* 0x0010 */ class WaitForGraphObjectAllocator* m_WfgObjAllocator;
  /* 0x0018 */ BOOL m_FInCostEstimationMode;
  /* 0x0019 */ char Padding_696[3];
  /* 0x001c */ unsigned int m_NumVertices;
  /* 0x0020 */ unsigned int m_VertexArrayCapacity;
  /* 0x0024 */ long Padding_697;
  /* 0x0028 */ class WaitForGraphVertex** m_Vertices;
  /* 0x0030 */ class WaitForGraphVertex** m_OriginalVertices;
  /* 0x0038 */ unsigned int m_NumSccs;
  /* 0x003c */ long Padding_698;
  /* 0x0040 */ class WaitForGraphStronglyConnectedComponent** m_Sccs;
  /* 0x0048 */ unsigned int m_NumDeadlockParticipants;
  /* 0x004c */ long Padding_699;
  /* 0x0050 */ class WaitForGraphVertex** m_DeadlockParticipants;
  /* 0x0058 */ unsigned int m_NumCostableDeadlockParticipants;
  /* 0x005c */ long Padding_700;
  /* 0x0060 */ class SESinglyLinkedStruct<WaitForGraphVertex,8> m_toBeVisitedVertices;
  /* 0x0078 */ class SESinglyLinkedStruct<WaitForGraphVertex,16> m_visitedVertices;
  /* 0x0090 */ class SESinglyLinkedStruct<WaitForGraphVertex,24> m_victimVertices;
}; /* size: 0x00a8 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 16,
  NVld = 2,
  VldEddOffset = 13,
  BufSize = 88,
} TAG_UNNAMED_2611, *PTAG_UNNAMED_2611;

class ConfigIOData
{
  /* 0x0000 */ double m_ShareStride;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ReservationInterval;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_LimitInterval;
}; /* size: 0x0018 */

class XeSqlPkg::hadr_worker_pool_before_schedule_task
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_701[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int task_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2612, *PTAG_UNNAMED_2612;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 24,
} TAG_UNNAMED_2613, *PTAG_UNNAMED_2613;

typedef enum
{
  database_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2614, *PTAG_UNNAMED_2614;

struct tagNONCLIENTMETRICSW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iBorderWidth;
  /* 0x0008 */ int iScrollWidth;
  /* 0x000c */ int iScrollHeight;
  /* 0x0010 */ int iCaptionWidth;
  /* 0x0014 */ int iCaptionHeight;
  /* 0x0018 */ struct tagLOGFONTW lfCaptionFont;
  /* 0x0074 */ int iSmCaptionWidth;
  /* 0x0078 */ int iSmCaptionHeight;
  /* 0x007c */ struct tagLOGFONTW lfSmCaptionFont;
  /* 0x00d8 */ int iMenuWidth;
  /* 0x00dc */ int iMenuHeight;
  /* 0x00e0 */ struct tagLOGFONTW lfMenuFont;
  /* 0x013c */ struct tagLOGFONTW lfStatusFont;
  /* 0x0198 */ struct tagLOGFONTW lfMessageFont;
}; /* size: 0x01f4 */

class Spinlock<302,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2615, *PTAG_UNNAMED_2615;

typedef enum
{
  percent_privileged_timeIdx = 0,
  percent_processor_timeIdx = 1,
  percent_user_timeIdx = 2,
  virtual_bytesIdx = 3,
  virtual_bytes_peakIdx = 4,
  working_setIdx = 5,
  working_set_privateIdx = 6,
  working_set_peakIdx = 7,
  instance_nameIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2616, *PTAG_UNNAMED_2616;

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2617, *PTAG_UNNAMED_2617;

struct ISOSHost
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2618, *PTAG_UNNAMED_2618;

typedef struct _TRUSTEE_W
{
  /* 0x0000 */ struct _TRUSTEE_W* pMultipleTrustee;
  /* 0x0008 */ enum _MULTIPLE_TRUSTEE_OPERATION MultipleTrusteeOperation;
  /* 0x000c */ enum _TRUSTEE_FORM TrusteeForm;
  /* 0x0010 */ enum _TRUSTEE_TYPE TrusteeType;
  /* 0x0014 */ long Padding_702;
  /* 0x0018 */ wchar_t* ptstrName;
} TRUSTEE_W, *PTRUSTEE_W; /* size: 0x0020 */

typedef enum
{
  addressIdx = 0,
  modeIdx = 1,
  classIdx = 2,
  keep_countIdx = 3,
  shared_countIdx = 4,
  update_countIdx = 5,
  exclusive_countIdx = 6,
  destroy_countIdx = 7,
  has_waitersIdx = 8,
  is_superlatchIdx = 9,
  is_poisonedIdx = 10,
  successIdx = 11,
  durationIdx = 12,
  database_idIdx = 13,
  file_idIdx = 14,
  page_idIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2619, *PTAG_UNNAMED_2619;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 2,
  VldEddOffset = 3,
  BufSize = 37,
} TAG_UNNAMED_2620, *PTAG_UNNAMED_2620;

class TSList<XE_LoadedLibrary>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 16,
  NVld = 0,
  VldEddOffset = 15,
  BufSize = 58,
} TAG_UNNAMED_2621, *PTAG_UNNAMED_2621;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2622, *PTAG_UNNAMED_2622;

struct tagEMRPOLYDRAW16
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cpts;
  /* 0x001c */ struct tagPOINTS apts[1];
  /* 0x0020 */ unsigned char abTypes[1];
  /* 0x0021 */ char __PADDING__[3];
}; /* size: 0x0024 */

typedef enum
{
  database_idIdx = 0,
  reserve_sizeIdx = 1,
  log_sizeIdx = 2,
  frag_countIdx = 3,
  error_code_pointerIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2623, *PTAG_UNNAMED_2623;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 32,
} TAG_UNNAMED_2624, *PTAG_UNNAMED_2624;

class CAutoRg<XECustomizableAttribute>
{
}; /* size: 0x0008 */

struct IOleUndoUnit
{
}; /* size: 0x0008 */

typedef enum
{
  internal_stvf_idIdx = 0,
  client_brick_idIdx = 1,
  client_stream_idIdx = 2,
  server_brick_idIdx = 3,
  server_session_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2625, *PTAG_UNNAMED_2625;

typedef enum
{
  xdesid_lowIdx = 0,
  xdesid_highIdx = 1,
  last_op_codeIdx = 2,
  first_lsnIdx = 3,
  last_lsnIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2626, *PTAG_UNNAMED_2626;

struct IXMLDOMDocument2
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 26,
} TAG_UNNAMED_2627, *PTAG_UNNAMED_2627;

typedef enum
{
  hresultIdx = 0,
  role_guidIdx = 1,
  ip_addressIdx = 2,
  user_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2628, *PTAG_UNNAMED_2628;

struct IOleCache2
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 3,
  VldEddOffset = 0,
  BufSize = 28,
} TAG_UNNAMED_2629, *PTAG_UNNAMED_2629;

typedef enum
{
  old_stateIdx = 0,
  new_stateIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2630, *PTAG_UNNAMED_2630;

typedef struct _RTL_SPLAY_LINKS
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* Parent;
  /* 0x0008 */ struct _RTL_SPLAY_LINKS* LeftChild;
  /* 0x0010 */ struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, *PRTL_SPLAY_LINKS; /* size: 0x0018 */

typedef struct _UNICODE_PREFIX_TABLE_ENTRY
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NameLength;
  /* 0x0004 */ long Padding_703;
  /* 0x0008 */ struct _UNICODE_PREFIX_TABLE_ENTRY* NextPrefixTree;
  /* 0x0010 */ struct _UNICODE_PREFIX_TABLE_ENTRY* CaseMatch;
  /* 0x0018 */ struct _RTL_SPLAY_LINKS Links;
  /* 0x0030 */ struct _UNICODE_STRING* Prefix;
} UNICODE_PREFIX_TABLE_ENTRY, *PUNICODE_PREFIX_TABLE_ENTRY; /* size: 0x0038 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2631, *PTAG_UNNAMED_2631;

typedef enum
{
  operationIdx = 0,
  operation_reasonIdx = 1,
  sequence_numberIdx = 2,
  acknowledgment_numberIdx = 3,
  message_typeIdx = 4,
  message_log_idIdx = 5,
  availability_group_idIdx = 6,
  local_availability_replica_idIdx = 7,
  target_availability_replica_idIdx = 8,
  connection_session_idIdx = 9,
  database_replica_idIdx = 10,
  LastField = 11,
} TAG_UNNAMED_2632, *PTAG_UNNAMED_2632;

typedef struct _IMAGE_NT_HEADERS64
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64; /* size: 0x0108 */

struct _FLS_CALLBACK_INFO;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 6,
  VldEddOffset = 4,
  BufSize = 76,
} TAG_UNNAMED_2633, *PTAG_UNNAMED_2633;

struct tagRPC_CALL_ATTRIBUTES_V1_W
{
  /* 0x0000 */ unsigned int Version;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ServerPrincipalNameBufferLength;
  /* 0x000c */ long Padding_704;
  /* 0x0010 */ unsigned short* ServerPrincipalName;
  /* 0x0018 */ unsigned long ClientPrincipalNameBufferLength;
  /* 0x001c */ long Padding_705;
  /* 0x0020 */ unsigned short* ClientPrincipalName;
  /* 0x0028 */ unsigned long AuthenticationLevel;
  /* 0x002c */ unsigned long AuthenticationService;
  /* 0x0030 */ int NullSession;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

class XE_ILogReadMessageHandler
{
}; /* size: 0x0008 */

typedef enum
{
  error_code_pointerIdx = 0,
  is_log_recordIdx = 1,
  file_handleIdx = 2,
  offsetIdx = 3,
  database_idIdx = 4,
  sizeIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2634, *PTAG_UNNAMED_2634;

typedef enum
{
  object_typeIdx = 0,
  database_idIdx = 1,
  hobt_idIdx = 2,
  column_idIdx = 3,
  object_idIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2635, *PTAG_UNNAMED_2635;

typedef enum
{
  reporter_brick_idIdx = 0,
  reporter_componentIdx = 1,
  target_brick_idIdx = 2,
  target_componentIdx = 3,
  flagsIdx = 4,
  errorIdx = 5,
  severityIdx = 6,
  stateIdx = 7,
  message_textIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2636, *PTAG_UNNAMED_2636;

class XE_ConfigurationStore
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_2637, *PTAG_UNNAMED_2637;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 1,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2638, *PTAG_UNNAMED_2638;

class SOS_ObjectStore::ObjectClockHand
{
  /* 0x0000 */ long Padding_706[26];
  /* 0x0068 */ class SOS_ObjectStore* m_store;
  /* 0x0070 */ unsigned int m_currentSubStore;
}; /* size: 0x0078 */

class TClockAlgorithm<SOS_ObjectStore::ObjectClockHand>
{
  /* 0x0000 */ unsigned long m_ConfiguredEntriesPerTick;
  /* 0x0004 */ unsigned long m_InternalEntriesPerTick;
  /* 0x0008 */ class SOS_ObjectStore::ObjectClockHand m_clockHands[2];
  /* 0x00f8 */ class ClockAlgorithm::ControlInfo m_externalHandControl;
}; /* size: 0x0128 */

typedef enum
{
  find_login_durationIdx = 0,
  is_sql_authenticationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2639, *PTAG_UNNAMED_2639;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 9,
} TAG_UNNAMED_2640, *PTAG_UNNAMED_2640;

class SEList<ExternalCache,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

enum XeSqlPkg::file_read_completed::CustomizableSlots
{
  collect_pathSlot = 0,
  collect_io_dataSlot = 1,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 16,
} TAG_UNNAMED_2641, *PTAG_UNNAMED_2641;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_2642, *PTAG_UNNAMED_2642;

class CAutoRg<XMLColumnTransformRule>
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 1,
  VldEddOffset = 11,
  BufSize = 76,
} TAG_UNNAMED_2643, *PTAG_UNNAMED_2643;

typedef struct _IMAGE_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long ImageBase;
  /* 0x0020 */ unsigned long SectionAlignment;
  /* 0x0024 */ unsigned long FileAlignment;
  /* 0x0028 */ unsigned short MajorOperatingSystemVersion;
  /* 0x002a */ unsigned short MinorOperatingSystemVersion;
  /* 0x002c */ unsigned short MajorImageVersion;
  /* 0x002e */ unsigned short MinorImageVersion;
  /* 0x0030 */ unsigned short MajorSubsystemVersion;
  /* 0x0032 */ unsigned short MinorSubsystemVersion;
  /* 0x0034 */ unsigned long Win32VersionValue;
  /* 0x0038 */ unsigned long SizeOfImage;
  /* 0x003c */ unsigned long SizeOfHeaders;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned short Subsystem;
  /* 0x0046 */ unsigned short DllCharacteristics;
  /* 0x0048 */ unsigned long SizeOfStackReserve;
  /* 0x004c */ unsigned long SizeOfStackCommit;
  /* 0x0050 */ unsigned long SizeOfHeapReserve;
  /* 0x0054 */ unsigned long SizeOfHeapCommit;
  /* 0x0058 */ unsigned long LoaderFlags;
  /* 0x005c */ unsigned long NumberOfRvaAndSizes;
  /* 0x0060 */ struct _IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER, *PIMAGE_OPTIONAL_HEADER; /* size: 0x00e0 */

typedef struct _IMAGE_NT_HEADERS
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0018 */ struct _IMAGE_OPTIONAL_HEADER OptionalHeader;
} IMAGE_NT_HEADERS, *PIMAGE_NT_HEADERS; /* size: 0x00f8 */

typedef struct _SCOPE_TABLE
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct
  {
    /* 0x0004 */ unsigned long BeginAddress;
    /* 0x0008 */ unsigned long EndAddress;
    /* 0x000c */ unsigned long HandlerAddress;
    /* 0x0010 */ unsigned long JumpTarget;
  } /* size: 0x0010 */ ScopeRecord[1];
} SCOPE_TABLE, *PSCOPE_TABLE; /* size: 0x0014 */

typedef enum
{
  xdesid_lowIdx = 0,
  xdesid_highIdx = 1,
  num_hashed_transIdx = 2,
  num_compensated_transIdx = 3,
  database_idIdx = 4,
  begin_xact_lsnIdx = 5,
  last_xact_lsnIdx = 6,
  hardened_lsnIdx = 7,
  first_begin_xact_lsnIdx = 8,
  last_end_xact_lsnIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2644, *PTAG_UNNAMED_2644;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2645, *PTAG_UNNAMED_2645;

typedef struct _PROCESS_MITIGATION_STACKCHECK_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Permanent : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long ReservedFlags : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PROCESS_MITIGATION_STACKCHECK_POLICY, *PPROCESS_MITIGATION_STACKCHECK_POLICY; /* size: 0x0004 */

class CAutoBase<EventTypeEntry>
{
  /* 0x0000 */ struct EventTypeEntry* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  rowset_idIdx = 1,
  stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2646, *PTAG_UNNAMED_2646;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR
{
  union
  {
    union
    {
      /* 0x0000 */ unsigned long AllAttributes;
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned long RvaBased : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned long ReservedAttributes : 31; /* bit position: 1 */
      }; /* bitfield */
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Attributes;
  /* 0x0004 */ unsigned long DllNameRVA;
  /* 0x0008 */ unsigned long ModuleHandleRVA;
  /* 0x000c */ unsigned long ImportAddressTableRVA;
  /* 0x0010 */ unsigned long ImportNameTableRVA;
  /* 0x0014 */ unsigned long BoundImportAddressTableRVA;
  /* 0x0018 */ unsigned long UnloadInformationTableRVA;
  /* 0x001c */ unsigned long TimeDateStamp;
} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR; /* size: 0x0020 */

class XeSqlPkg::database_agent_drop_filegroup
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_707[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 13,
} TAG_UNNAMED_2647, *PTAG_UNNAMED_2647;

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  use_local_rowsetIdx = 3,
  after_updateIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2648, *PTAG_UNNAMED_2648;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 22,
} TAG_UNNAMED_2649, *PTAG_UNNAMED_2649;

class ClockAlgorithm
{
  union
  {
    /* 0x0000 */ const unsigned long MAX_ENTRY_LIFE_EXPECTANCY_INROUNDS;
    /* 0x0000 */ const unsigned long CLOCK_ENTRIES_PERTICK;
    /* 0x0000 */ const unsigned long GLOBALHAND_MAXENTRIES;
    /* 0x0000 */ const unsigned long LOCALHAND_MAXENTRIES;
    /* 0x0000 */ class ClockAlgorithm::InterNodeControlInfo sm_interNodeControlInfo;
  }; /* size: 0x0018 */
}; /* size: 0x0001 */

class XStringBuilder
{
  union
  {
    /* 0x0000 */ const unsigned int CWCH_DATETIME;
    /* 0x0000 */ const wchar_t* const m_anchor;
  }; /* size: 0x0008 */
  /* 0x0008 */ const unsigned int m_bufLen;
  /* 0x000c */ long Padding_708;
  /* 0x0010 */ wchar_t* m_buf;
  /* 0x0018 */ unsigned __int64 m_remaining;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2650, *PTAG_UNNAMED_2650;

struct IPersistPropertyBag
{
}; /* size: 0x0008 */

typedef enum
{
  error_numberIdx = 0,
  successIdx = 1,
  statementIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2651, *PTAG_UNNAMED_2651;

class XeSqlPkg::query_rpc_process_cmd_set_marker
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2652, *PTAG_UNNAMED_2652;

enum XeSqlPkg::save_tran_completed::CustomizableSlots
{
  collect_statementSlot = 0,
};

struct IRpcStubBuffer
{
}; /* size: 0x0008 */

typedef struct _PROCESS_HEAP_ENTRY
{
  /* 0x0000 */ void* lpData;
  /* 0x0008 */ unsigned long cbData;
  /* 0x000c */ unsigned char cbOverhead;
  /* 0x000d */ unsigned char iRegionIndex;
  /* 0x000e */ unsigned short wFlags;
  union
  {
    struct
    {
      /* 0x0010 */ void* hMem;
      /* 0x0018 */ unsigned long dwReserved[3];
      /* 0x0024 */ long __PADDING__[1];
    } /* size: 0x0018 */ Block;
    struct
    {
      /* 0x0010 */ unsigned long dwCommittedSize;
      /* 0x0014 */ unsigned long dwUnCommittedSize;
      /* 0x0018 */ void* lpFirstBlock;
      /* 0x0020 */ void* lpLastBlock;
    } /* size: 0x0018 */ Region;
  }; /* size: 0x0018 */
} PROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2653, *PTAG_UNNAMED_2653;

typedef struct _INHERITED_FROMW
{
  /* 0x0000 */ long GenerationGap;
  /* 0x0004 */ long Padding_709;
  /* 0x0008 */ wchar_t* AncestorName;
} INHERITED_FROMW, *PINHERITED_FROMW; /* size: 0x0010 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2654, *PTAG_UNNAMED_2654;

typedef enum
{
  database_idIdx = 0,
  file_idIdx = 1,
  extent_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2655, *PTAG_UNNAMED_2655;

class std::numeric_limits<unsigned __int64>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 10,
} TAG_UNNAMED_2656, *PTAG_UNNAMED_2656;

class std::numeric_limits<unsigned char>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class PerCPUDataImpl
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char* m_processorMemory;
      /* 0x0008 */ unsigned int m_cpus;
      /* 0x000c */ unsigned char m_perCpuShift;
    }; /* size: 0x000d */
    /* 0x0000 */ unsigned char* sm_memory;
    /* 0x0000 */ unsigned __int64 sm_totalReserved;
  }; /* size: 0x000d */
}; /* size: 0x0010 */

typedef struct _USER_MODALS_INFO_1002
{
  /* 0x0000 */ unsigned long usrmod1002_max_passwd_age;
} USER_MODALS_INFO_1002, *PUSER_MODALS_INFO_1002; /* size: 0x0004 */

typedef enum
{
  resource_stateIdx = 0,
  id_or_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2657, *PTAG_UNNAMED_2657;

typedef enum
{
  key_dataIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2658, *PTAG_UNNAMED_2658;

typedef enum
{
  request_typeIdx = 0,
  db_idIdx = 1,
  table_idIdx = 2,
  index_idIdx = 3,
  hash_valueIdx = 4,
  cache_descriptorIdx = 5,
  cache_unique_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2659, *PTAG_UNNAMED_2659;

class CXFileReaderInterfaceFactoryNative
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2660, *PTAG_UNNAMED_2660;

class XE_AutoRg<XE_AutoRg<unsigned short> >
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  rebuild_phaseIdx = 2,
  transaction_idIdx = 3,
  object_nameIdx = 4,
  database_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2661, *PTAG_UNNAMED_2661;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 2,
  VldEddOffset = -1,
  BufSize = 16,
} TAG_UNNAMED_2662, *PTAG_UNNAMED_2662;

class AutoPermanentTaskLeakDetection
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 13,
} TAG_UNNAMED_2663, *PTAG_UNNAMED_2663;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long BeginAddress;
  union
  {
    /* 0x0004 */ unsigned long UnwindData;
    struct /* bitfield */
    {
      /* 0x0004 */ unsigned long Flag : 2; /* bit position: 0 */
      /* 0x0004 */ unsigned long FunctionLength : 11; /* bit position: 2 */
      /* 0x0004 */ unsigned long Ret : 2; /* bit position: 13 */
      /* 0x0004 */ unsigned long H : 1; /* bit position: 15 */
      /* 0x0004 */ unsigned long Reg : 3; /* bit position: 16 */
      /* 0x0004 */ unsigned long R : 1; /* bit position: 19 */
      /* 0x0004 */ unsigned long L : 1; /* bit position: 20 */
      /* 0x0004 */ unsigned long C : 1; /* bit position: 21 */
      /* 0x0004 */ unsigned long StackAdjust : 10; /* bit position: 22 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  consumer_idIdx = 2,
  log_block_sizeIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2664, *PTAG_UNNAMED_2664;

class XeSqlPkg::ddl_with_wait_at_low_priority
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_710[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int max_durationOffset;
    /* 0x0000 */ const int abort_after_waitOffset;
    /* 0x0000 */ const int host_process_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int host_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int target_object_nameOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0278 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 22,
} TAG_UNNAMED_2665, *PTAG_UNNAMED_2665;

typedef enum
{
  operationIdx = 0,
  successIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2666, *PTAG_UNNAMED_2666;

class CAutoBase<unsigned int>
{
  /* 0x0000 */ unsigned int* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  statementIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2667, *PTAG_UNNAMED_2667;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2668, *PTAG_UNNAMED_2668;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2669, *PTAG_UNNAMED_2669;

typedef enum
{
  rowset_idIdx = 0,
  allocation_unit_idIdx = 1,
  database_idIdx = 2,
  filegroup_idIdx = 3,
  input_phase_max_buffersIdx = 4,
  input_phase_max_fanoutIdx = 5,
  input_phase_max_ioIdx = 6,
  input_phase_bobsIdx = 7,
  merge_phase_max_buffersIdx = 8,
  merge_phase_max_fanoutIdx = 9,
  merge_phase_bobsIdx = 10,
  max_memory_grantIdx = 11,
  estimate_total_rowsIdx = 12,
  is_fast_key_optimizedIdx = 13,
  is_uniqueIdx = 14,
  is_partitionedIdx = 15,
  is_manualIdx = 16,
  LastField = 17,
} TAG_UNNAMED_2670, *PTAG_UNNAMED_2670;

typedef struct __vc_attributes::helper_attributes::usageAttribute
{
  /* 0x0000 */ unsigned int value;
} _vc_attributes::helper_attributes::usageAttribute, *P_vc_attributes::helper_attributes::usageAttribute; /* size: 0x0004 */

struct NodeSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2671, *PTAG_UNNAMED_2671;

class Spinlock<286,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 2,
  NDynamic = 17,
  NVld = 2,
  VldEddOffset = 14,
  BufSize = 92,
} TAG_UNNAMED_2672, *PTAG_UNNAMED_2672;

typedef struct _iobuf
{
  /* 0x0000 */ char* _ptr;
  /* 0x0008 */ int _cnt;
  /* 0x000c */ long Padding_711;
  /* 0x0010 */ char* _base;
  /* 0x0018 */ int _flag;
  /* 0x001c */ int _file;
  /* 0x0020 */ int _charbuf;
  /* 0x0024 */ int _bufsiz;
  /* 0x0028 */ char* _tmpfname;
} iobuf, *Piobuf; /* size: 0x0030 */

typedef enum
{
  database_idIdx = 0,
  is_remoteIdx = 1,
  logical_readsIdx = 2,
  physical_readsIdx = 3,
  read_ahead_readsIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2673, *PTAG_UNNAMED_2673;

typedef struct _UNWIND_HISTORY_TABLE
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned char LocalHint;
  /* 0x0005 */ unsigned char GlobalHint;
  /* 0x0006 */ unsigned char Search;
  /* 0x0007 */ unsigned char Once;
  /* 0x0008 */ unsigned __int64 LowAddress;
  /* 0x0010 */ unsigned __int64 HighAddress;
  /* 0x0018 */ struct _UNWIND_HISTORY_TABLE_ENTRY Entry[12];
} UNWIND_HISTORY_TABLE, *PUNWIND_HISTORY_TABLE; /* size: 0x00d8 */

typedef struct _WKSTA_INFO_1058
{
  /* 0x0000 */ int wki1058_buf_files_deny_write;
} WKSTA_INFO_1058, *PWKSTA_INFO_1058; /* size: 0x0004 */

typedef enum
{
  count_cyclesIdx = 0,
  idIdx = 1,
  objIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2674, *PTAG_UNNAMED_2674;

typedef enum
{
  message_typeIdx = 0,
  min_versionIdx = 1,
  max_versionIdx = 2,
  message_log_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2675, *PTAG_UNNAMED_2675;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 25,
} TAG_UNNAMED_2676, *PTAG_UNNAMED_2676;

typedef enum
{
  database_idIdx = 0,
  commit_policyIdx = 1,
  delayIdx = 2,
  time_to_commitIdx = 3,
  resultIdx = 4,
  valid_leaseIdx = 5,
  wait_log_blockIdx = 6,
  hardened_log_blockIdx = 7,
  group_idIdx = 8,
  replica_idIdx = 9,
  ag_database_idIdx = 10,
  LastField = 11,
} TAG_UNNAMED_2677, *PTAG_UNNAMED_2677;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1
{
  /* 0x0000 */ wchar_t* Name;
  /* 0x0008 */ unsigned short ValueType;
  /* 0x000a */ unsigned short Reserved;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long ValueCount;
  /* 0x0014 */ long Padding_712;
  union
  {
    union
    {
      /* 0x0018 */ __int64* pInt64;
      /* 0x0018 */ unsigned __int64* pUint64;
      /* 0x0018 */ wchar_t** ppString;
      /* 0x0018 */ struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE* pFqbn;
      /* 0x0018 */ struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* pOctetString;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1; /* size: 0x0020 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2678, *PTAG_UNNAMED_2678;

class AutoSpinlockHolder<181,3,1>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_2679, *PTAG_UNNAMED_2679;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 32,
} TAG_UNNAMED_2680, *PTAG_UNNAMED_2680;

typedef struct __vc_attributes::usesgetlasterrorAttribute
{
} _vc_attributes::usesgetlasterrorAttribute, *P_vc_attributes::usesgetlasterrorAttribute; /* size: 0x0001 */

typedef enum
{
  database_idIdx = 0,
  database_segment_idIdx = 1,
  file_idIdx = 2,
  is_log_fileIdx = 3,
  is_physical_nameIdx = 4,
  new_nameIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2681, *PTAG_UNNAMED_2681;

typedef enum
{
  cpu_timeIdx = 0,
  durationIdx = 1,
  physical_readsIdx = 2,
  logical_readsIdx = 3,
  writesIdx = 4,
  resultIdx = 5,
  row_countIdx = 6,
  connection_reset_optionIdx = 7,
  object_nameIdx = 8,
  statementIdx = 9,
  data_streamIdx = 10,
  output_parametersIdx = 11,
  LastField = 12,
} TAG_UNNAMED_2682, *PTAG_UNNAMED_2682;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2683, *PTAG_UNNAMED_2683;

typedef enum
{
  accessorIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2684, *PTAG_UNNAMED_2684;

typedef struct __vc_attributes::atl::soap_handlerAttribute
{
  /* 0x0000 */ const char* name;
  /* 0x0008 */ const char* namespace;
  /* 0x0010 */ const char* protocol;
  /* 0x0018 */ const char* style;
  /* 0x0020 */ const char* use;
} _vc_attributes::atl::soap_handlerAttribute, *P_vc_attributes::atl::soap_handlerAttribute; /* size: 0x0028 */

typedef enum
{
  timestampIdx = 0,
  range_generatorIdx = 1,
  scheduler_idIdx = 2,
  workerIdx = 3,
  node_idIdx = 4,
  ranges_totalIdx = 5,
  pages_totalIdx = 6,
  worker_idIdx = 7,
  range_idIdx = 8,
  original_worker_idIdx = 9,
  pages_in_rangeIdx = 10,
  pages_in_queueIdx = 11,
  outstanding_pagesIdx = 12,
  ranges_in_queueIdx = 13,
  start_keyIdx = 14,
  end_keyIdx = 15,
  LastField = 16,
} TAG_UNNAMED_2685, *PTAG_UNNAMED_2685;

struct tagTOGGLEKEYS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2686, *PTAG_UNNAMED_2686;

class Spinlock<317,1,1>
{
}; /* size: 0x0004 */

typedef enum
{
  object_idIdx = 0,
  plan_guide_nameIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2687, *PTAG_UNNAMED_2687;

class SpinlockHolder<56,16,1>;

class std::allocator<void>
{
}; /* size: 0x0001 */

class ISOSHost_OSThreadCreateDestroyCallbackImpl
{
}; /* size: 0x0038 */

typedef enum
{
  memory_statusIdx = 0,
  stampIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2688, *PTAG_UNNAMED_2688;

class XeSqlPkg::query_optimizer_force_both_cardinality_estimation_behaviors
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

typedef enum
{
  source_brick_idIdx = 0,
  request_typeIdx = 1,
  hash_valueIdx = 2,
  use_cacheIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2689, *PTAG_UNNAMED_2689;

class CAutoBase<XE_LogDeserializedPackage>
{
  /* 0x0000 */ class XE_LogDeserializedPackage* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 13,
} TAG_UNNAMED_2690, *PTAG_UNNAMED_2690;

typedef struct __vc_attributes::helper_attributes::process_earlyAttribute
{
} _vc_attributes::helper_attributes::process_earlyAttribute, *P_vc_attributes::helper_attributes::process_earlyAttribute; /* size: 0x0001 */

typedef enum
{
  asb_idIdx = 0,
  database_idIdx = 1,
  initiator_flagIdx = 2,
  unique_idIdx = 3,
  eventIdx = 4,
  stateIdx = 5,
  dialog_idIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2691, *PTAG_UNNAMED_2691;

typedef struct __vc_attributes::helper_attributes::as_stringAttribute
{
} _vc_attributes::helper_attributes::as_stringAttribute, *P_vc_attributes::helper_attributes::as_stringAttribute; /* size: 0x0001 */

typedef struct _DCB
{
  /* 0x0000 */ unsigned long DCBlength;
  /* 0x0004 */ unsigned long BaudRate;
  struct /* bitfield */
  {
    /* 0x0008 */ unsigned long fBinary : 1; /* bit position: 0 */
    /* 0x0008 */ unsigned long fParity : 1; /* bit position: 1 */
    /* 0x0008 */ unsigned long fOutxCtsFlow : 1; /* bit position: 2 */
    /* 0x0008 */ unsigned long fOutxDsrFlow : 1; /* bit position: 3 */
    /* 0x0008 */ unsigned long fDtrControl : 2; /* bit position: 4 */
    /* 0x0008 */ unsigned long fDsrSensitivity : 1; /* bit position: 6 */
    /* 0x0008 */ unsigned long fTXContinueOnXoff : 1; /* bit position: 7 */
    /* 0x0008 */ unsigned long fOutX : 1; /* bit position: 8 */
    /* 0x0008 */ unsigned long fInX : 1; /* bit position: 9 */
    /* 0x0008 */ unsigned long fErrorChar : 1; /* bit position: 10 */
    /* 0x0008 */ unsigned long fNull : 1; /* bit position: 11 */
    /* 0x0008 */ unsigned long fRtsControl : 2; /* bit position: 12 */
    /* 0x0008 */ unsigned long fAbortOnError : 1; /* bit position: 14 */
    /* 0x0008 */ unsigned long fDummy2 : 17; /* bit position: 15 */
  }; /* bitfield */
  /* 0x000c */ unsigned short wReserved;
  /* 0x000e */ unsigned short XonLim;
  /* 0x0010 */ unsigned short XoffLim;
  /* 0x0012 */ unsigned char ByteSize;
  /* 0x0013 */ unsigned char Parity;
  /* 0x0014 */ unsigned char StopBits;
  /* 0x0015 */ char XonChar;
  /* 0x0016 */ char XoffChar;
  /* 0x0017 */ char ErrorChar;
  /* 0x0018 */ char EofChar;
  /* 0x0019 */ char EvtChar;
  /* 0x001a */ unsigned short wReserved1;
} DCB, *PDCB; /* size: 0x001c */

typedef struct _COMMCONFIG
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned short wVersion;
  /* 0x0006 */ unsigned short wReserved;
  /* 0x0008 */ struct _DCB dcb;
  /* 0x0024 */ unsigned long dwProviderSubType;
  /* 0x0028 */ unsigned long dwProviderOffset;
  /* 0x002c */ unsigned long dwProviderSize;
  /* 0x0030 */ wchar_t wcProviderData[1];
  /* 0x0032 */ char __PADDING__[2];
} COMMCONFIG, *PCOMMCONFIG; /* size: 0x0034 */

struct XE_TEvent<3,0,0>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,0> m_dynamicAttr;
  /* 0x0088 */ struct XEEvent m_event;
}; /* size: 0x00d0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 7,
  NVld = 1,
  VldEddOffset = 5,
  BufSize = 37,
} TAG_UNNAMED_2692, *PTAG_UNNAMED_2692;

class OsNumaConfig
{
  /* 0x0000 */ class OsNumaConfig* sm_instance;
}; /* size: 0x0008 */

class XeSqlPkg::server_memory_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_713[140];
      /* 0x0240 */ unsigned char m_buf[5];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int memory_changeOffset;
    /* 0x0000 */ const int new_memory_size_mbOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

typedef enum
{
  thread_idIdx = 0,
  brick_idIdx = 1,
  brick_ageIdx = 2,
  phase_idIdx = 3,
  message_opcodeIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2693, *PTAG_UNNAMED_2693;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 3,
  VldEddOffset = 5,
  BufSize = 56,
} TAG_UNNAMED_2694, *PTAG_UNNAMED_2694;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  reasonIdx = 2,
  parameter_indexIdx = 3,
  parameter_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2695, *PTAG_UNNAMED_2695;

typedef struct __vc_attributes::helper_attributes::notify_atlprovAttribute
{
} _vc_attributes::helper_attributes::notify_atlprovAttribute, *P_vc_attributes::helper_attributes::notify_atlprovAttribute; /* size: 0x0001 */

class TypeListNode<NullType,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2696, *PTAG_UNNAMED_2696;

struct IXMLDOMNotation
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  log_block_idIdx = 1,
  log_block_sizeIdx = 2,
  from_diskIdx = 3,
  incompleteIdx = 4,
  is_read_aheadIdx = 5,
  private_consumer_idIdx = 6,
  cache_buffer_pointerIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2697, *PTAG_UNNAMED_2697;

struct tagEMRSETDIBITSTODEVICE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long xSrc;
  /* 0x0024 */ long ySrc;
  /* 0x0028 */ long cxSrc;
  /* 0x002c */ long cySrc;
  /* 0x0030 */ unsigned long offBmiSrc;
  /* 0x0034 */ unsigned long cbBmiSrc;
  /* 0x0038 */ unsigned long offBitsSrc;
  /* 0x003c */ unsigned long cbBitsSrc;
  /* 0x0040 */ unsigned long iUsageSrc;
  /* 0x0044 */ unsigned long iStartScan;
  /* 0x0048 */ unsigned long cScans;
}; /* size: 0x004c */

typedef enum
{
  database_idIdx = 0,
  start_lsnIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2698, *PTAG_UNNAMED_2698;

class SOS_IOResourceManager
{
  union
  {
    struct
    {
      /* 0x0000 */ void* m_IssueIORoutine /* function */;
      /* 0x0008 */ void* m_OnThrottlePendingIORoutine /* function */;
      /* 0x0010 */ long m_MaxIOsInProgress;
      /* 0x0014 */ unsigned int m_MaxIOBandwidth;
      /* 0x0018 */ volatile long m_TotalReadIOsThisInterval;
      /* 0x001c */ volatile long m_TotalReadIOs;
      /* 0x0020 */ volatile long m_TotalWriteIOsThisInterval;
      /* 0x0024 */ volatile long m_TotalWriteIOs;
      /* 0x0028 */ volatile long m_IntervalNumber;
      /* 0x002c */ long Padding_714;
      /* 0x0030 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_StartOfIntervalTime;
      /* 0x0038 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ViolationThreshold;
    }; /* size: 0x003c */
    /* 0x0000 */ class SOS_IOResourceManager sm_IOResourceManager;
  }; /* size: 0x0048 */
  /* 0x0040 */ unsigned long m_flags;
}; /* size: 0x0048 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 10,
} TAG_UNNAMED_2699, *PTAG_UNNAMED_2699;

typedef enum
{
  hardened_lsnIdx = 0,
  hadr_database_idIdx = 1,
  availability_replica_idIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2700, *PTAG_UNNAMED_2700;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 20,
} TAG_UNNAMED_2701, *PTAG_UNNAMED_2701;

class SESListEnum<XE_CompressionCache::MemBlock,0>;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2702, *PTAG_UNNAMED_2702;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{
  /* 0x0000 */ unsigned short Magic;
  /* 0x0002 */ unsigned char MajorLinkerVersion;
  /* 0x0003 */ unsigned char MinorLinkerVersion;
  /* 0x0004 */ unsigned long SizeOfCode;
  /* 0x0008 */ unsigned long SizeOfInitializedData;
  /* 0x000c */ unsigned long SizeOfUninitializedData;
  /* 0x0010 */ unsigned long AddressOfEntryPoint;
  /* 0x0014 */ unsigned long BaseOfCode;
  /* 0x0018 */ unsigned long BaseOfData;
  /* 0x001c */ unsigned long BaseOfBss;
  /* 0x0020 */ unsigned long GprMask;
  /* 0x0024 */ unsigned long CprMask[4];
  /* 0x0034 */ unsigned long GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER; /* size: 0x0038 */

typedef struct _IMAGE_ROM_HEADERS
{
  /* 0x0000 */ struct _IMAGE_FILE_HEADER FileHeader;
  /* 0x0014 */ struct _IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS; /* size: 0x004c */

enum XeSqlPkg::database_file_size_change::CustomizableSlots
{
  collect_database_nameSlot = 0,
};

typedef struct __vc_attributes::first_isAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::first_isAttribute, *P_vc_attributes::first_isAttribute; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 48,
} TAG_UNNAMED_2703, *PTAG_UNNAMED_2703;

typedef enum
{
  brick_idIdx = 0,
  object_idIdx = 1,
  from_brick_idIdx = 2,
  database_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2704, *PTAG_UNNAMED_2704;

struct LIST_ENTRY32
{
  /* 0x0000 */ unsigned long Flink;
  /* 0x0004 */ unsigned long Blink;
}; /* size: 0x0008 */

struct XE_TArray<XECustomizableAttribute,4>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[4];
}; /* size: 0x00e0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 18,
} TAG_UNNAMED_2705, *PTAG_UNNAMED_2705;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 9,
} TAG_UNNAMED_2706, *PTAG_UNNAMED_2706;

class CAutoP<XE_FileProcessor>
{
}; /* size: 0x0008 */

typedef enum
{
  dbIdIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2707, *PTAG_UNNAMED_2707;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2708, *PTAG_UNNAMED_2708;

typedef struct __vc_attributes::includelibAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::includelibAttribute, *P_vc_attributes::includelibAttribute; /* size: 0x0008 */

class SOSQueueCounted<Worker,0>
{
  /* 0x0000 */ long Padding_715[4];
  /* 0x0010 */ unsigned __int64 m_count;
}; /* size: 0x0018 */

class SOSQueueCounted<SOS_Task,0>
{
  /* 0x0000 */ long Padding_716[4];
  /* 0x0010 */ unsigned __int64 m_count;
}; /* size: 0x0018 */

struct SuspendQueueSLock
{
}; /* size: 0x0004 */

class WorkDispatcher
{
  /* 0x0000 */ class SOSQueueCounted<Worker,0> m_WorkerPool;
  /* 0x0018 */ class SOSQueueCounted<SOS_Task,0> m_TaskQueue;
  /* 0x0030 */ struct SuspendQueueSLock m_Lock;
  /* 0x0034 */ long Padding_717;
  /* 0x0038 */ __int64 m_minIdleWorkerCount;
  /* 0x0040 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_rawticksMinIdleWorkerCount;
  /* 0x0048 */ __int64 m_workProcessed;
  /* 0x0050 */ int m_WorkerFailure;
}; /* size: 0x0058 */

typedef enum
{
  opcodeIdx = 0,
  hresultIdx = 1,
  durationIdx = 2,
  linked_server_nameIdx = 3,
  provider_nameIdx = 4,
  method_nameIdx = 5,
  parametersIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2709, *PTAG_UNNAMED_2709;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 16,
} TAG_UNNAMED_2710, *PTAG_UNNAMED_2710;

typedef struct _API_SET_VALUE_ENTRY
{
  /* 0x0000 */ unsigned long NameOffset;
  /* 0x0004 */ unsigned long NameLength;
  /* 0x0008 */ unsigned long ValueOffset;
  /* 0x000c */ unsigned long ValueLength;
} API_SET_VALUE_ENTRY, *PAPI_SET_VALUE_ENTRY; /* size: 0x0010 */

typedef enum
{
  accessorIdx = 0,
  accessor_bindingsIdx = 1,
  accessor_buffer_sizeIdx = 2,
  one_rowIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2711, *PTAG_UNNAMED_2711;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2712, *PTAG_UNNAMED_2712;

struct tagEMRGDICOMMENT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long cbData;
  /* 0x000c */ unsigned char Data[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

class XeSqlPkg::hadr_filestream_message_block_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_718[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int transfer_typeOffset;
    /* 0x0000 */ const int log_block_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

typedef enum
{
  dbIdIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2713, *PTAG_UNNAMED_2713;

struct IInternetBindInfo
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 17,
} TAG_UNNAMED_2714, *PTAG_UNNAMED_2714;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 12,
  NVld = 0,
  VldEddOffset = 11,
  BufSize = 64,
} TAG_UNNAMED_2715, *PTAG_UNNAMED_2715;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 42,
} TAG_UNNAMED_2716, *PTAG_UNNAMED_2716;

class CAutoP<XE_PackageFilter>
{
}; /* size: 0x0008 */

typedef enum
{
  new_dbidIdx = 0,
  new_enabledIdx = 1,
  existing_dbidIdx = 2,
  existing_enabledIdx = 3,
  new_dbnameIdx = 4,
  existing_dbnameIdx = 5,
  broker_guidIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2717, *PTAG_UNNAMED_2717;

typedef enum
{
  modeIdx = 0,
  file_handleIdx = 1,
  offsetIdx = 2,
  database_idIdx = 3,
  file_idIdx = 4,
  filegroup_idIdx = 5,
  sizeIdx = 6,
  pathIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2718, *PTAG_UNNAMED_2718;

struct tagRECONVERTSTRING
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwVersion;
  /* 0x0008 */ unsigned long dwStrLen;
  /* 0x000c */ unsigned long dwStrOffset;
  /* 0x0010 */ unsigned long dwCompStrLen;
  /* 0x0014 */ unsigned long dwCompStrOffset;
  /* 0x0018 */ unsigned long dwTargetStrLen;
  /* 0x001c */ unsigned long dwTargetStrOffset;
}; /* size: 0x0020 */

class SEList<eXcursionEntry,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  brick_idIdx = 0,
  session_idIdx = 1,
  object_idIdx = 2,
  object_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2719, *PTAG_UNNAMED_2719;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2720, *PTAG_UNNAMED_2720;

struct IFontEventsDisp
{
}; /* size: 0x0008 */

struct ISOSHost_EventManual
{
}; /* size: 0x0008 */

struct XE_TEvent<4,6,8>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,6> m_customizableAttr;
  /* 0x01f0 */ struct XE_TArray<XEDataAttribute,8> m_dynamicAttr;
  /* 0x0330 */ struct XEEvent m_event;
}; /* size: 0x0378 */

class XeSqlPkg::filestream_file_io_response
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,6,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_719[140];
      /* 0x0240 */ unsigned char m_buf[53];
    }; /* size: 0x0045 */
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int satisfiedOffset;
    /* 0x0000 */ const int workitem_descriptionOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int correlation_idsOffset;
    /* 0x0000 */ const int logical_pathOffset;
    /* 0x0000 */ const int physical_pathOffset;
    /* 0x0000 */ const int original_pathOffset;
  }; /* size: 0x0378 */
}; /* size: 0x0278 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 27,
} TAG_UNNAMED_2721, *PTAG_UNNAMED_2721;

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2722, *PTAG_UNNAMED_2722;

class CXColumn<unsigned int>
{
  /* 0x0000 */ long Padding_720[6];
  /* 0x0018 */ unsigned int* m_startPointer;
}; /* size: 0x0020 */

typedef enum
{
  percent_c1_timeIdx = 0,
  percent_c2_timeIdx = 1,
  percent_c3_timeIdx = 2,
  percent_dpc_timeIdx = 3,
  percent_idle_timeIdx = 4,
  percent_interrupt_timeIdx = 5,
  percent_maximum_frequencyIdx = 6,
  percent_priority_timeIdx = 7,
  percent_privileged_timeIdx = 8,
  percent_processor_timeIdx = 9,
  percent_user_timeIdx = 10,
  c1_transitions_per_secondIdx = 11,
  c2_transitions_per_secondIdx = 12,
  c3_transitions_per_secondIdx = 13,
  dpc_rateIdx = 14,
  dpcs_queued_per_secondIdx = 15,
  interrupts_per_secondIdx = 16,
  parking_statusIdx = 17,
  processor_frequencyIdx = 18,
  processor_state_flagsIdx = 19,
  instance_nameIdx = 20,
  LastField = 21,
} TAG_UNNAMED_2723, *PTAG_UNNAMED_2723;

struct IXMLDOMElement
{
}; /* size: 0x0008 */

typedef struct _ACCESS_ALLOWED_CALLBACK_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE; /* size: 0x000c */

struct XE_TEvent<4,3,7>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,3> m_customizableAttr;
  /* 0x0148 */ struct XE_TArray<XEDataAttribute,7> m_dynamicAttr;
  /* 0x0260 */ struct XEEvent m_event;
}; /* size: 0x02a8 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 21,
  NVld = 1,
  VldEddOffset = 19,
  BufSize = 168,
} TAG_UNNAMED_2724, *PTAG_UNNAMED_2724;

typedef enum
{
  database_idIdx = 0,
  conversation_actionIdx = 1,
  is_initiatorIdx = 2,
  conversation_stateIdx = 3,
  conversation_idIdx = 4,
  conversation_handleIdx = 5,
  conversation_group_idIdx = 6,
  initiator_service_nameIdx = 7,
  initiator_broker_nameIdx = 8,
  target_service_nameIdx = 9,
  target_broker_nameIdx = 10,
  service_contract_nameIdx = 11,
  database_nameIdx = 12,
  LastField = 13,
} TAG_UNNAMED_2725, *PTAG_UNNAMED_2725;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 13,
  NVld = 9,
  VldEddOffset = 3,
  BufSize = 82,
} TAG_UNNAMED_2726, *PTAG_UNNAMED_2726;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 24,
} TAG_UNNAMED_2727, *PTAG_UNNAMED_2727;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2728, *PTAG_UNNAMED_2728;

typedef struct _KNONVOLATILE_CONTEXT_POINTERS
{
  union
  {
    /* 0x0000 */ struct _M128A* FloatingContext[16];
    struct
    {
      /* 0x0000 */ struct _M128A* Xmm0;
      /* 0x0008 */ struct _M128A* Xmm1;
      /* 0x0010 */ struct _M128A* Xmm2;
      /* 0x0018 */ struct _M128A* Xmm3;
      /* 0x0020 */ struct _M128A* Xmm4;
      /* 0x0028 */ struct _M128A* Xmm5;
      /* 0x0030 */ struct _M128A* Xmm6;
      /* 0x0038 */ struct _M128A* Xmm7;
      /* 0x0040 */ struct _M128A* Xmm8;
      /* 0x0048 */ struct _M128A* Xmm9;
      /* 0x0050 */ struct _M128A* Xmm10;
      /* 0x0058 */ struct _M128A* Xmm11;
      /* 0x0060 */ struct _M128A* Xmm12;
      /* 0x0068 */ struct _M128A* Xmm13;
      /* 0x0070 */ struct _M128A* Xmm14;
      /* 0x0078 */ struct _M128A* Xmm15;
    }; /* size: 0x0080 */
  }; /* size: 0x0080 */
  union
  {
    /* 0x0080 */ unsigned __int64* IntegerContext[16];
    struct
    {
      /* 0x0080 */ unsigned __int64* Rax;
      /* 0x0088 */ unsigned __int64* Rcx;
      /* 0x0090 */ unsigned __int64* Rdx;
      /* 0x0098 */ unsigned __int64* Rbx;
      /* 0x00a0 */ unsigned __int64* Rsp;
      /* 0x00a8 */ unsigned __int64* Rbp;
      /* 0x00b0 */ unsigned __int64* Rsi;
      /* 0x00b8 */ unsigned __int64* Rdi;
      /* 0x00c0 */ unsigned __int64* R8;
      /* 0x00c8 */ unsigned __int64* R9;
      /* 0x00d0 */ unsigned __int64* R10;
      /* 0x00d8 */ unsigned __int64* R11;
      /* 0x00e0 */ unsigned __int64* R12;
      /* 0x00e8 */ unsigned __int64* R13;
      /* 0x00f0 */ unsigned __int64* R14;
      /* 0x00f8 */ unsigned __int64* R15;
    }; /* size: 0x0080 */
  }; /* size: 0x0080 */
} KNONVOLATILE_CONTEXT_POINTERS, *PKNONVOLATILE_CONTEXT_POINTERS; /* size: 0x0100 */

typedef enum
{
  database_idIdx = 0,
  hobtidIdx = 1,
  rowgroup_idIdx = 2,
  rowcountIdx = 3,
  trim_reasonIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2729, *PTAG_UNNAMED_2729;

class XeSqlPkg::remote_dmv_stream_release_resources_server
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_721[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef enum
{
  result_of_build_replica_operationIdx = 0,
  partition_idIdx = 1,
  replica_idIdx = 2,
  db_guidIdx = 3,
  db_nameIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2730, *PTAG_UNNAMED_2730;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 4,
  VldEddOffset = 0,
  BufSize = 36,
} TAG_UNNAMED_2731, *PTAG_UNNAMED_2731;

struct IConnectionPointContainer
{
}; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2732, *PTAG_UNNAMED_2732;

class ISOSHost_MemObjImpl
{
}; /* size: 0x0028 */

class XeSqlPkg::hadr_xrf_updateXrf_partialUpdate
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_722[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int dbIdOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2733, *PTAG_UNNAMED_2733;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 21,
} TAG_UNNAMED_2734, *PTAG_UNNAMED_2734;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 11,
  NVld = 3,
  VldEddOffset = 7,
  BufSize = 68,
} TAG_UNNAMED_2735, *PTAG_UNNAMED_2735;

typedef enum
{
  database_idIdx = 0,
  object_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2736, *PTAG_UNNAMED_2736;

struct EventTransformer
{
  /* 0x0000 */ unsigned int m_actionRuleCount;
  /* 0x0004 */ long Padding_723;
  /* 0x0008 */ class XE_AutoP<ActionTransformRule> m_actionRules;
  /* 0x0010 */ class XE_AutoP<ColumnTransformRule> m_columnRules;
  /* 0x0018 */ unsigned int m_columnCount;
  /* 0x001c */ long Padding_724;
  /* 0x0020 */ class XE_AutoP<ColumnDescriptor> m_descriptorArray;
  /* 0x0028 */ unsigned int m_lastColumnBeforeActions;
  /* 0x002c */ unsigned int m_countOfColumnizedActions;
}; /* size: 0x0030 */

struct SOS_OomCheckSLock
{
}; /* size: 0x0004 */

class OomIndicator
{
  /* 0x0000 */ struct SOS_OomCheckSLock m_oomLock;
  /* 0x0004 */ long Padding_725;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_provisionalOomStart;
  /* 0x0010 */ int m_outOfMemory;
}; /* size: 0x0018 */

struct tagRPC_EE_INFO_PARAM
{
  /* 0x0000 */ enum tagExtendedErrorParamTypes ParameterType;
  /* 0x0004 */ long Padding_726;
  union
  {
    union
    {
      /* 0x0008 */ char* AnsiString;
      /* 0x0008 */ wchar_t* UnicodeString;
      /* 0x0008 */ long LVal;
      /* 0x0008 */ short SVal;
      /* 0x0008 */ unsigned __int64 PVal;
      /* 0x0008 */ struct tagBinaryParam BVal;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 9,
  NVld = 1,
  VldEddOffset = 7,
  BufSize = 49,
} TAG_UNNAMED_2737, *PTAG_UNNAMED_2737;

struct IPersistStreamInit
{
}; /* size: 0x0008 */

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  connect_brick_idIdx = 2,
  query_idIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2738, *PTAG_UNNAMED_2738;

typedef struct _SERVER_INFO_1540
{
  /* 0x0000 */ int sv1540_enablesharednetdrives;
} SERVER_INFO_1540, *PSERVER_INFO_1540; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 18,
} TAG_UNNAMED_2739, *PTAG_UNNAMED_2739;

typedef enum
{
  database_idIdx = 0,
  request_sourceIdx = 1,
  lock_resultIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2740, *PTAG_UNNAMED_2740;

typedef struct _NETRESOURCEA
{
  /* 0x0000 */ unsigned long dwScope;
  /* 0x0004 */ unsigned long dwType;
  /* 0x0008 */ unsigned long dwDisplayType;
  /* 0x000c */ unsigned long dwUsage;
  /* 0x0010 */ char* lpLocalName;
  /* 0x0018 */ char* lpRemoteName;
  /* 0x0020 */ char* lpComment;
  /* 0x0028 */ char* lpProvider;
} NETRESOURCEA, *PNETRESOURCEA; /* size: 0x0030 */

typedef struct _TAPE_SET_MEDIA_PARAMETERS
{
  /* 0x0000 */ unsigned long BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS; /* size: 0x0004 */

typedef enum
{
  scheduler_addressIdx = 0,
  workload_groupIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2741, *PTAG_UNNAMED_2741;

struct tagREGISTERWORDA
{
  /* 0x0000 */ char* lpReading;
  /* 0x0008 */ char* lpWord;
}; /* size: 0x0010 */

typedef enum
{
  stageIdx = 0,
  dopIdx = 1,
  stage_infoIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2742, *PTAG_UNNAMED_2742;

class FPUProtector
{
}; /* size: 0x0001 */

class XeSqlPkg::hash_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_727[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int hash_warning_typeOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int recursion_levelOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

enum XeSqlPkg::sql_batch_starting::CustomizableSlots
{
  collect_batch_textSlot = 0,
};

class XeSqlPkg::recovery_in_physical
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_728[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  percent_registry_quota_in_useIdx = 0,
  alignment_fixups_per_secondIdx = 1,
  context_switches_per_secondIdx = 2,
  exception_dispatches_per_secondIdx = 3,
  file_control_bytes_per_secondIdx = 4,
  file_control_operations_per_secondIdx = 5,
  file_data_operations_per_secondIdx = 6,
  file_read_bytes_per_secondIdx = 7,
  file_read_operations_per_secondIdx = 8,
  file_write_bytes_per_secondIdx = 9,
  file_write_operations_per_secondIdx = 10,
  floating_emulations_per_secondIdx = 11,
  processesIdx = 12,
  processor_queue_lengthIdx = 13,
  system_calls_per_secondIdx = 14,
  system_up_timeIdx = 15,
  threadsIdx = 16,
  LastField = 17,
} TAG_UNNAMED_2743, *PTAG_UNNAMED_2743;

class TListElem<TList<SOS_Scheduler,SOS_Task,16,TListSLock> >
{
  /* 0x0000 */ long Padding_729[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_730;
  /* 0x0018 */ class SOS_Scheduler* m_pList;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 17,
  NVld = 0,
  VldEddOffset = 16,
  BufSize = 136,
} TAG_UNNAMED_2744, *PTAG_UNNAMED_2744;

class SOS_UserStore
{
  /* 0x0000 */ long Padding_731[374];
  /* 0x05d8 */ enum SOSHOST_USERSTORE_TYPE m_Type;
  /* 0x05dc */ long Padding_732;
  /* 0x05e0 */ volatile __int64 m_NumberOfEntries;
  /* 0x05e8 */ __int64 m_NumHashTables;
  /* 0x05f0 */ wchar_t m_name[64];
  /* 0x0670 */ class IMemObj* m_pmo;
  /* 0x0678 */ void* m_deactivateRoutine /* function */;
  /* 0x0680 */ class CacheClockAlgorithm m_clockAlgorithm;
  /* 0x07e0 */ class SOS_StoreAndClockAlgorithmControlInterface* m_userControlInterface;
  /* 0x07e8 */ unsigned long m_configFlags;
  /* 0x07ec */ long Padding_733;
  /* 0x07f0 */ void* m_getHashTableStatisticRoutine /* function */;
}; /* size: 0x0800 */

class IfNullTypeZeroElseOne<NullType>
{
}; /* size: 0x0001 */

typedef struct _cpinfoexW
{
  /* 0x0000 */ unsigned int MaxCharSize;
  /* 0x0004 */ unsigned char DefaultChar[2];
  /* 0x0006 */ unsigned char LeadByte[12];
  /* 0x0012 */ wchar_t UnicodeDefaultChar;
  /* 0x0014 */ unsigned int CodePage;
  /* 0x0018 */ wchar_t CodePageName[260];
} cpinfoexW, *PcpinfoexW; /* size: 0x0220 */

typedef enum
{
  final_cursor_typeIdx = 0,
  protocol_execution_idIdx = 1,
  initial_cursor_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2745, *PTAG_UNNAMED_2745;

typedef struct _SYSTEM_SESSION_PROCESS_INFORMATION
{
  /* 0x0000 */ unsigned long SessionId;
  /* 0x0004 */ unsigned long SizeOfBuf;
  /* 0x0008 */ void* Buffer;
} SYSTEM_SESSION_PROCESS_INFORMATION, *PSYSTEM_SESSION_PROCESS_INFORMATION; /* size: 0x0010 */

typedef enum
{
  database_idIdx = 0,
  table_idIdx = 1,
  index_idIdx = 2,
  method_nameIdx = 3,
  xml_pathIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2746, *PTAG_UNNAMED_2746;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2747, *PTAG_UNNAMED_2747;

struct std::_Num_float_base
{
  union
  {
    /* 0x0000 */ enum std::float_denorm_style has_denorm;
    /* 0x0000 */ const BOOL has_denorm_loss;
    /* 0x0000 */ const BOOL has_infinity;
    /* 0x0000 */ const BOOL has_quiet_NaN;
    /* 0x0000 */ const BOOL has_signaling_NaN;
    /* 0x0000 */ const BOOL is_bounded;
    /* 0x0000 */ const BOOL is_exact;
    /* 0x0000 */ const BOOL is_iec559;
    /* 0x0000 */ const BOOL is_integer;
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const BOOL is_specialized;
    /* 0x0000 */ const BOOL tinyness_before;
    /* 0x0000 */ const BOOL traps;
    /* 0x0000 */ enum std::float_round_style round_style;
    /* 0x0000 */ const int radix;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct IXMLDOMComment
{
}; /* size: 0x0008 */

typedef struct __vc_attributes::requesteditAttribute
{
} _vc_attributes::requesteditAttribute, *P_vc_attributes::requesteditAttribute; /* size: 0x0001 */

typedef enum
{
  message_typeIdx = 0,
  file_idIdx = 1,
  file_typeIdx = 2,
  statusIdx = 3,
  file_countIdx = 4,
  message_log_idIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2748, *PTAG_UNNAMED_2748;

struct std::pair<unsigned __int64 *,unsigned __int64 *>
{
}; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 4,
  VldEddOffset = 3,
  BufSize = 37,
} TAG_UNNAMED_2749, *PTAG_UNNAMED_2749;

typedef enum
{
  query_operation_node_idIdx = 0,
  thread_idIdx = 1,
  brick_idIdx = 2,
  query_idIdx = 3,
  rows_affectedIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2750, *PTAG_UNNAMED_2750;

struct XEEventBufferHeader_v0
{
  /* 0x0000 */ struct XERelativeObjectId m_rid;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned int m_version : 6; /* bit position: 0 */
    /* 0x0004 */ unsigned int m_length : 25; /* bit position: 6 */
    /* 0x0004 */ unsigned int m_hasActionData : 1; /* bit position: 31 */
  }; /* bitfield */
  /* 0x0008 */ unsigned int m_stMask;
  /* 0x000c */ unsigned __int64 m_ticks;
}; /* size: 0x0014 */

class SOS_CacheStoreEnum
{
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 26,
} TAG_UNNAMED_2751, *PTAG_UNNAMED_2751;

struct HKEY__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2752, *PTAG_UNNAMED_2752;

struct _TP_CLEANUP_GROUP;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 12,
} TAG_UNNAMED_2753, *PTAG_UNNAMED_2753;

class CAutoBase<unsigned short>
{
  /* 0x0000 */ wchar_t* m_pt;
}; /* size: 0x0008 */

typedef enum
{
  log_block_idIdx = 0,
  database_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2754, *PTAG_UNNAMED_2754;

class XeSqlPkg::availability_replica_manager_state_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_734[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int current_stateOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2755, *PTAG_UNNAMED_2755;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2756, *PTAG_UNNAMED_2756;

typedef struct _TAPE_GET_POSITION
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long Partition;
  /* 0x0008 */ union _LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION; /* size: 0x0010 */

typedef enum
{
  partition_idIdx = 0,
  replica_idIdx = 1,
  db_guidIdx = 2,
  db_nameIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2757, *PTAG_UNNAMED_2757;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 4,
  VldEddOffset = -1,
  BufSize = 32,
} TAG_UNNAMED_2758, *PTAG_UNNAMED_2758;

struct tagExtentInfo
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long dwExtentMode;
  /* 0x0008 */ struct tagSIZE sizelProposed;
}; /* size: 0x0010 */

class SpinlockHolder<39,18,1>;

typedef enum
{
  connect_brick_idIdx = 0,
  query_idIdx = 1,
  topologyIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2759, *PTAG_UNNAMED_2759;

typedef enum
{
  typeIdx = 0,
  priorityIdx = 1,
  creation_timeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2760, *PTAG_UNNAMED_2760;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_2761, *PTAG_UNNAMED_2761;

struct tagCUSTDATA
{
  /* 0x0000 */ unsigned long cCustData;
  /* 0x0004 */ long Padding_735;
  /* 0x0008 */ struct tagCUSTDATAITEM* prgCustData;
}; /* size: 0x0010 */

typedef struct __vc_attributes::atl::soap_namespaceAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::atl::soap_namespaceAttribute, *P_vc_attributes::atl::soap_namespaceAttribute; /* size: 0x0008 */

typedef enum
{
  database_idIdx = 0,
  hitsIdx = 1,
  missesIdx = 2,
  insert_missesIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2762, *PTAG_UNNAMED_2762;

class MemObjEnumerator
{
}; /* size: 0x0028 */

class XeSqlPkg::extent_activation_cache_overflow
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_736[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int cache_max_countOffset;
    /* 0x0000 */ const int current_overflow_countOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 0,
  VldEddOffset = 9,
  BufSize = 65,
} TAG_UNNAMED_2763, *PTAG_UNNAMED_2763;

typedef enum
{
  database_idIdx = 0,
  entry_exitIdx = 1,
  group_idIdx = 2,
  replica_idIdx = 3,
  ag_database_idIdx = 4,
  api_functionIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2764, *PTAG_UNNAMED_2764;

typedef struct _PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_DEVICE_CONTROL_DATA, *PPLUGPLAY_CONTROL_DEVICE_CONTROL_DATA; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 4,
  VldEddOffset = 1,
  BufSize = 40,
} TAG_UNNAMED_2765, *PTAG_UNNAMED_2765;

typedef struct _TAPE_WRITE_MARKS
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned char Immediate;
  /* 0x0009 */ char __PADDING__[3];
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS; /* size: 0x000c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 13,
  NVld = 4,
  VldEddOffset = 8,
  BufSize = 80,
} TAG_UNNAMED_2766, *PTAG_UNNAMED_2766;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 3,
  VldEddOffset = -1,
  BufSize = 24,
} TAG_UNNAMED_2767, *PTAG_UNNAMED_2767;

typedef enum
{
  source_database_idIdx = 0,
  object_idIdx = 1,
  line_numberIdx = 2,
  offsetIdx = 3,
  offset_endIdx = 4,
  object_typeIdx = 5,
  object_nameIdx = 6,
  statementIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2768, *PTAG_UNNAMED_2768;

class SEList<XListEnumerator<ProbCostData>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef enum
{
  partition_idIdx = 0,
  caller_partition_idIdx = 1,
  file_idIdx = 2,
  page_idIdx = 3,
  allocation_unit_idIdx = 4,
  buffer_idIdx = 5,
  statusIdx = 6,
  access_modeIdx = 7,
  classIdx = 8,
  locationIdx = 9,
  LastField = 10,
} TAG_UNNAMED_2769, *PTAG_UNNAMED_2769;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 0,
  VldEddOffset = 9,
  BufSize = 40,
} TAG_UNNAMED_2770, *PTAG_UNNAMED_2770;

class RefCountImpl<XE_ConfiguredSession>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class std::ostreambuf_iterator<char,std::char_traits<char> >
{
  /* 0x0000 */ BOOL _Failed;
  /* 0x0001 */ char Padding_737[7];
  /* 0x0008 */ class std::basic_streambuf<char,std::char_traits<char> >* _Strbuf;
}; /* size: 0x0010 */

class XeSqlPkg::hadr_db_commit_mgr_update_harden
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_738[140];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int commit_policyOffset;
    /* 0x0000 */ const int delayOffset;
    /* 0x0000 */ const int prior_hardened_log_blockOffset;
    /* 0x0000 */ const int new_hardened_log_blockOffset;
    /* 0x0000 */ const int harden_statusOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0278 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 10,
  NVld = 6,
  VldEddOffset = 3,
  BufSize = 55,
} TAG_UNNAMED_2771, *PTAG_UNNAMED_2771;

typedef enum
{
  destination_brick_idIdx = 0,
  request_typeIdx = 1,
  hash_valueIdx = 2,
  use_cacheIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2772, *PTAG_UNNAMED_2772;

struct HWINEVENTHOOK__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  activityIdx = 0,
  query_notification_xml_informationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2773, *PTAG_UNNAMED_2773;

typedef struct _nlsversioninfo
{
  /* 0x0000 */ unsigned long dwNLSVersionInfoSize;
  /* 0x0004 */ unsigned long dwNLSVersion;
  /* 0x0008 */ unsigned long dwDefinedVersion;
} nlsversioninfo, *Pnlsversioninfo; /* size: 0x000c */

typedef struct __vc_attributes::publicAttribute
{
} _vc_attributes::publicAttribute, *P_vc_attributes::publicAttribute; /* size: 0x0001 */

class XeCloudMinPkg::mark_partition_for_delete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_739[140];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x001b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int replica_subtypeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 9,
} TAG_UNNAMED_2774, *PTAG_UNNAMED_2774;

typedef enum
{
  key_accessorIdx = 0,
  key_accessor_bindingsIdx = 1,
  key_accessor_buffer_sizeIdx = 2,
  data_accessorIdx = 3,
  data_accessor_bindingsIdx = 4,
  data_accessor_buffer_sizeIdx = 5,
  cache_keysIdx = 6,
  use_local_rowsetIdx = 7,
  LastField = 8,
} TAG_UNNAMED_2775, *PTAG_UNNAMED_2775;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 42,
} TAG_UNNAMED_2776, *PTAG_UNNAMED_2776;

class TypeListNode<unsigned __int64,NullType>
{
}; /* size: 0x0001 */

class SystemThreadPool::PoolAutoLock
{
  /* 0x0000 */ unsigned int* m_lock;
}; /* size: 0x0008 */

class WcsSafeFakeType1
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 9,
  NVld = 2,
  VldEddOffset = 6,
  BufSize = 58,
} TAG_UNNAMED_2777, *PTAG_UNNAMED_2777;

enum XeSqlPkg::sql_statement_completed::CustomizableSlots
{
  collect_statementSlot = 0,
  collect_parameterized_plan_handleSlot = 1,
};

class SOSCallbackEvent
{
  /* 0x0000 */ class EventAutoInternal<SuspendQueueSLock> m_event;
}; /* size: 0x0028 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 1,
  VldEddOffset = 0,
  BufSize = 10,
} TAG_UNNAMED_2778, *PTAG_UNNAMED_2778;

class XeSqlPkg::hadr_xrf_updateXrf_before_recoveryLsn_update
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_740[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int dbIdOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

enum XeSqlPkg::missing_column_statistics::CustomizableSlots
{
  collect_column_listSlot = 0,
};

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 1,
  NVld = 1,
  VldEddOffset = -1,
  BufSize = 8,
} TAG_UNNAMED_2779, *PTAG_UNNAMED_2779;

struct IOleObject
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2780, *PTAG_UNNAMED_2780;

struct tagSERIALIZEDPROPERTYVALUE
{
  /* 0x0000 */ unsigned long dwType;
  /* 0x0004 */ unsigned char rgb[1];
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

class CThreadTimes
{
  /* 0x0000 */ __int64 m_KernelTime;
  /* 0x0008 */ __int64 m_UserTime;
  /* 0x0010 */ __int64 m_CreationTime;
}; /* size: 0x0018 */

class SchedulerMonitor::Track
{
  /* 0x0000 */ long Padding_741[80];
  /* 0x0140 */ unsigned __int64 m_ItemsProcessed;
  /* 0x0148 */ class CThreadTimes m_workerStart;
  /* 0x0160 */ class CThreadTimes m_workerCurr;
  /* 0x0178 */ class CThreadTimes m_workerDiff;
  /* 0x0190 */ class Worker* m_pWorker;
  /* 0x0198 */ unsigned int m_diagnosedPass;
}; /* size: 0x01a0 */

struct SchedulerMonitor::SchedStats
{
  /* 0x0000 */ int wasIdle;
  /* 0x0004 */ unsigned long numYields;
  /* 0x0008 */ __int64 workProcessed;
  /* 0x0010 */ __int64 numQuantumYields;
  /* 0x0018 */ class SchedulerMonitor::Track track;
}; /* size: 0x01b8 */

class XeSqlPkg::query_rpc_locate_and_update_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_742[140];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x0039 */
    /* 0x0000 */ const int key_accessorOffset;
    /* 0x0000 */ const int key_accessor_bindingsOffset;
    /* 0x0000 */ const int key_accessor_buffer_sizeOffset;
    /* 0x0000 */ const int data_accessorOffset;
    /* 0x0000 */ const int data_accessor_bindingsOffset;
    /* 0x0000 */ const int data_accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

typedef enum
{
  is_enteringIdx = 0,
  api_nameIdx = 1,
  id_or_nameIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2781, *PTAG_UNNAMED_2781;

typedef enum
{
  database_idIdx = 0,
  pending_writesIdx = 1,
  pending_bytesIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2782, *PTAG_UNNAMED_2782;

typedef enum
{
  bufferIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2783, *PTAG_UNNAMED_2783;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 8,
  NVld = 0,
  VldEddOffset = 7,
  BufSize = 19,
} TAG_UNNAMED_2784, *PTAG_UNNAMED_2784;

class SEShortStack<SOS_ExternalAutoWait,6>
{
  /* 0x0000 */ class SOS_ExternalAutoWait* ptrArray[6];
  /* 0x0030 */ unsigned __int64 currentPosition;
}; /* size: 0x0038 */

struct tagCANDIDATEFORM
{
  /* 0x0000 */ unsigned long dwIndex;
  /* 0x0004 */ unsigned long dwStyle;
  /* 0x0008 */ struct tagPOINT ptCurrentPos;
  /* 0x0010 */ struct tagRECT rcArea;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 20,
} TAG_UNNAMED_2785, *PTAG_UNNAMED_2785;

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent> >;

struct ICancelMethodCalls
{
}; /* size: 0x0008 */

struct tagWNDCLASSW
{
  /* 0x0000 */ unsigned int style;
  /* 0x0004 */ long Padding_743;
  /* 0x0008 */ void* lpfnWndProc /* function */;
  /* 0x0010 */ int cbClsExtra;
  /* 0x0014 */ int cbWndExtra;
  /* 0x0018 */ struct HINSTANCE__* hInstance;
  /* 0x0020 */ struct HICON__* hIcon;
  /* 0x0028 */ struct HICON__* hCursor;
  /* 0x0030 */ struct HBRUSH__* hbrBackground;
  /* 0x0038 */ const wchar_t* lpszMenuName;
  /* 0x0040 */ const wchar_t* lpszClassName;
}; /* size: 0x0048 */

typedef enum
{
  use_local_rowsetIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2786, *PTAG_UNNAMED_2786;

class XeCloudMinPkg::primary_start_replicated_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_744[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
    /* 0x0000 */ const int xact_for_idempotent_flushOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 1,
} TAG_UNNAMED_2787, *PTAG_UNNAMED_2787;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2788, *PTAG_UNNAMED_2788;

struct ARRAY_INFO
{
  /* 0x0000 */ long Dimension;
  /* 0x0004 */ long Padding_745;
  /* 0x0008 */ unsigned long* BufferConformanceMark;
  /* 0x0010 */ unsigned long* BufferVarianceMark;
  /* 0x0018 */ unsigned long* MaxCountArray;
  /* 0x0020 */ unsigned long* OffsetArray;
  /* 0x0028 */ unsigned long* ActualCountArray;
}; /* size: 0x0030 */

typedef struct _EXCEPTION_RECORD64
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned __int64 ExceptionRecord;
  /* 0x0010 */ unsigned __int64 ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ unsigned long __unusedAlignment;
  /* 0x0020 */ unsigned __int64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64; /* size: 0x0098 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 2,
  VldEddOffset = 2,
  BufSize = 36,
} TAG_UNNAMED_2789, *PTAG_UNNAMED_2789;

typedef struct _CONSOLE_READCONSOLE_CONTROL
{
  /* 0x0000 */ unsigned long nLength;
  /* 0x0004 */ unsigned long nInitialChars;
  /* 0x0008 */ unsigned long dwCtrlWakeupMask;
  /* 0x000c */ unsigned long dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL; /* size: 0x0010 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 2,
  VldEddOffset = 0,
  BufSize = 18,
} TAG_UNNAMED_2790, *PTAG_UNNAMED_2790;

typedef struct _CURDIR
{
  /* 0x0000 */ struct _UNICODE_STRING DosPath;
  /* 0x0010 */ void* Handle;
} CURDIR, *PCURDIR; /* size: 0x0018 */

typedef struct _STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_746;
  /* 0x0008 */ char* Buffer;
} STRING, *PSTRING; /* size: 0x0010 */

typedef struct _RTL_DRIVE_LETTER_CURDIR
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Length;
  /* 0x0004 */ unsigned long TimeStamp;
  /* 0x0008 */ struct _STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, *PRTL_DRIVE_LETTER_CURDIR; /* size: 0x0018 */

typedef struct _RTL_USER_PROCESS_PARAMETERS
{
  /* 0x0000 */ unsigned long MaximumLength;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long DebugFlags;
  /* 0x0010 */ void* ConsoleHandle;
  /* 0x0018 */ unsigned long ConsoleFlags;
  /* 0x001c */ long Padding_747;
  /* 0x0020 */ void* StandardInput;
  /* 0x0028 */ void* StandardOutput;
  /* 0x0030 */ void* StandardError;
  /* 0x0038 */ struct _CURDIR CurrentDirectory;
  /* 0x0050 */ struct _UNICODE_STRING DllPath;
  /* 0x0060 */ struct _UNICODE_STRING ImagePathName;
  /* 0x0070 */ struct _UNICODE_STRING CommandLine;
  /* 0x0080 */ void* Environment;
  /* 0x0088 */ unsigned long StartingX;
  /* 0x008c */ unsigned long StartingY;
  /* 0x0090 */ unsigned long CountX;
  /* 0x0094 */ unsigned long CountY;
  /* 0x0098 */ unsigned long CountCharsX;
  /* 0x009c */ unsigned long CountCharsY;
  /* 0x00a0 */ unsigned long FillAttribute;
  /* 0x00a4 */ unsigned long WindowFlags;
  /* 0x00a8 */ unsigned long ShowWindowFlags;
  /* 0x00ac */ long Padding_748;
  /* 0x00b0 */ struct _UNICODE_STRING WindowTitle;
  /* 0x00c0 */ struct _UNICODE_STRING DesktopInfo;
  /* 0x00d0 */ struct _UNICODE_STRING ShellInfo;
  /* 0x00e0 */ struct _UNICODE_STRING RuntimeData;
  /* 0x00f0 */ struct _RTL_DRIVE_LETTER_CURDIR CurrentDirectores[32];
  /* 0x03f0 */ volatile unsigned __int64 EnvironmentSize;
  /* 0x03f8 */ volatile unsigned __int64 EnvironmentVersion;
  /* 0x0400 */ struct _UNICODE_STRING PackageMoniker;
  /* 0x0410 */ void* PackageDependencyData;
  /* 0x0418 */ unsigned long ProcessGroupId;
  /* 0x041c */ long __PADDING__[1];
} RTL_USER_PROCESS_PARAMETERS, *PRTL_USER_PROCESS_PARAMETERS; /* size: 0x0420 */

class CIncInfo::CIncSizeBlock
{
  /* 0x0000 */ unsigned short m_userSize[8];
}; /* size: 0x0010 */

class CIncInfo
{
  /* 0x0000 */ long Padding_749[4];
  /* 0x0010 */ unsigned __int64 m_pageSize;
  /* 0x0018 */ unsigned char* m_pbMax;
  /* 0x0020 */ unsigned char* m_pbCur;
  /* 0x0028 */ unsigned short* m_pSizeSlot;
  /* 0x0030 */ __int64 m_cPages;
  /* 0x0038 */ class CIncInfo* m_piiPrev;
  /* 0x0040 */ class CIncInfo* m_piiNext;
  /* 0x0048 */ long Padding_750[2];
  /* 0x0050 */ class CIncInfo::CIncSizeBlock m_firstSizeBlock;
}; /* size: 0x0060 */

class XeSqlPkg::hadr_ag_wsfc_resource_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_751[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int resource_stateOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 1,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 17,
} TAG_UNNAMED_2791, *PTAG_UNNAMED_2791;

struct ClrSpinLockSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::broker_conversation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_752[140];
      /* 0x0240 */ unsigned char m_buf[82];
    }; /* size: 0x0062 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int conversation_actionOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int conversation_stateOffset;
    /* 0x0000 */ const int conversation_idOffset;
    /* 0x0000 */ const int conversation_handleOffset;
    /* 0x0000 */ const int conversation_group_idOffset;
    /* 0x0000 */ const int initiator_service_nameOffset;
    /* 0x0000 */ const int initiator_broker_nameOffset;
    /* 0x0000 */ const int target_service_nameOffset;
    /* 0x0000 */ const int target_broker_nameOffset;
    /* 0x0000 */ const int service_contract_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0298 */

typedef enum
{
  channel_map_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2792, *PTAG_UNNAMED_2792;

struct CRefCount::SerializableVersionInternal<CRefCount>;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2793, *PTAG_UNNAMED_2793;

class SOS_TraceStream
{
  /* 0x0000 */ long Padding_753[6];
  /* 0x0018 */ int m_Synchronized;
  /* 0x001c */ long Padding_754;
  /* 0x0020 */ class SOS_RecursiveMutex m_mutex;
}; /* size: 0x00c0 */

typedef enum
{
  agent_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2794, *PTAG_UNNAMED_2794;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2795, *PTAG_UNNAMED_2795;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2796, *PTAG_UNNAMED_2796;

struct ISWbemNamedValueSet
{
}; /* size: 0x0008 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2797, *PTAG_UNNAMED_2797;

class CAutoP<TSinglyLinkedList<XE_ConfigCrc> >
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2798, *PTAG_UNNAMED_2798;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2799, *PTAG_UNNAMED_2799;

class SOSExceptionTranslatorSetter<SOSExceptionStandardTranslatorSetter>
{
  /* 0x0000 */ void* m_oldTranslator /* function */;
}; /* size: 0x0008 */

typedef struct _ACCESS_ALLOWED_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE; /* size: 0x0030 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2800, *PTAG_UNNAMED_2800;

struct tagQACONTROL
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwMiscStatus;
  /* 0x0008 */ unsigned long dwViewStatus;
  /* 0x000c */ unsigned long dwEventCookie;
  /* 0x0010 */ unsigned long dwPropNotifyCookie;
  /* 0x0014 */ unsigned long dwPointerActivationPolicy;
}; /* size: 0x0018 */

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
{
  /* 0x0000 */ unsigned long ElementCount;
  /* 0x0004 */ struct _COMPATIBILITY_CONTEXT_ELEMENT* Elements /* zero-length array */;
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, *PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION; /* size: 0x0004 */

typedef enum
{
  agent_idIdx = 0,
  agent_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2801, *PTAG_UNNAMED_2801;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2802, *PTAG_UNNAMED_2802;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE; /* size: 0x000c */

class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef union _CLIENT_CALL_RETURN
{
  union
  {
    /* 0x0000 */ void* Pointer;
    /* 0x0000 */ __int64 Simple;
  }; /* size: 0x0008 */
} CLIENT_CALL_RETURN, *PCLIENT_CALL_RETURN; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2803, *PTAG_UNNAMED_2803;

struct XE_TEvent<4,1,16>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,16> m_dynamicAttr;
  /* 0x0358 */ struct XEEvent m_event;
}; /* size: 0x03a0 */

class XeSqlPkg::query_post_compilation_showplan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_755[140];
      /* 0x0240 */ unsigned char m_buf[92];
    }; /* size: 0x006c */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int nest_levelOffset;
    /* 0x0000 */ const int estimated_rowsOffset;
    /* 0x0000 */ const int estimated_costOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int recompile_countOffset;
    /* 0x0000 */ const int begin_offsetOffset;
    /* 0x0000 */ const int end_offsetOffset;
    /* 0x0000 */ const int plan_handleOffset;
    /* 0x0000 */ const int sql_handleOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int showplan_xmlOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03a0 */
}; /* size: 0x02a0 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2804, *PTAG_UNNAMED_2804;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2805, *PTAG_UNNAMED_2805;

class XE_AutoRg<XEAction>
{
}; /* size: 0x0008 */

class XE_XMLConfiguredSession
{
  /* 0x0000 */ long Padding_756[14];
  /* 0x0038 */ struct XESessionProperties m_props;
  /* 0x0288 */ class CAutoRefc<IXMLDOMNode> m_pSessionNode;
  /* 0x0290 */ class TSinglyLinkedList<XE_DeferredEvent>* m_deferredResolveList;
  /* 0x0298 */ void* m_notificationId;
  /* 0x02a0 */ class XE_XMLConfig* m_pConfig;
  /* 0x02a8 */ class XE_AutoRg<XEAction> m_globalActions;
  /* 0x02b0 */ unsigned short m_nGlobalActions;
}; /* size: 0x02b8 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2806, *PTAG_UNNAMED_2806;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2807, *PTAG_UNNAMED_2807;

class CMemDbg<CMemFixed>
{
  /* 0x0000 */ const unsigned __int64 xsm_cbMaxSizeFitsOnPage;
  /* 0x0008 */ long Padding_757[58];
  /* 0x00f0 */ class SOS_Task* m_pTask;
  /* 0x00f8 */ int m_fUseFree;
  /* 0x00fc */ unsigned long m_bTraceOptions;
  /* 0x0100 */ class CMallocSpy m_msSpy;
  /* 0x04a8 */ int m_fReadOnly;
  /* 0x04ac */ int m_fCheckThreadAccess;
  /* 0x04b0 */ int m_fBeingDestroyed;
  /* 0x04b4 */ long Padding_758;
  /* 0x04b8 */ class Worker* m_pLockOwner;
}; /* size: 0x04c0 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2808, *PTAG_UNNAMED_2808;

typedef enum
{
  agent_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2809, *PTAG_UNNAMED_2809;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2810, *PTAG_UNNAMED_2810;

struct tagCAUUID
{
  /* 0x0000 */ unsigned long cElems;
  /* 0x0004 */ long Padding_759;
  /* 0x0008 */ struct _GUID* pElems;
}; /* size: 0x0010 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2811, *PTAG_UNNAMED_2811;

class XE_ResolvedObjectXML<XEAction>
{
}; /* size: 0x0020 */

class XeSqlPkg::metadata_remove_from_cache_tracing
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_760[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int primary_idOffset;
    /* 0x0000 */ const int caller_functionOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2812, *PTAG_UNNAMED_2812;

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2813, *PTAG_UNNAMED_2813;

typedef struct _ERROR_LOG
{
  /* 0x0000 */ unsigned long el_len;
  /* 0x0004 */ unsigned long el_reserved;
  /* 0x0008 */ unsigned long el_time;
  /* 0x000c */ unsigned long el_error;
  /* 0x0010 */ wchar_t* el_name;
  /* 0x0018 */ wchar_t* el_text;
  /* 0x0020 */ unsigned char* el_data;
  /* 0x0028 */ unsigned long el_data_size;
  /* 0x002c */ unsigned long el_nstrings;
} ERROR_LOG, *PERROR_LOG; /* size: 0x0030 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2814, *PTAG_UNNAMED_2814;

struct IPropertyPage
{
}; /* size: 0x0008 */

typedef enum
{
  cma_addressIdx = 0,
  brick_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2815, *PTAG_UNNAMED_2815;

struct tagTRACKMOUSEEVENT
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ struct HWND__* hwndTrack;
  /* 0x0010 */ unsigned long dwHoverTime;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2816, *PTAG_UNNAMED_2816;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2817, *PTAG_UNNAMED_2817;

class CAutoBase<XE_AutoCustomizableAttributes>
{
  /* 0x0000 */ class XE_AutoCustomizableAttributes* m_pt;
}; /* size: 0x0008 */

struct HBRUSH__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2818, *PTAG_UNNAMED_2818;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2819, *PTAG_UNNAMED_2819;

struct IOleInPlaceFrame
{
}; /* size: 0x0008 */

typedef struct _USER_INFO_1017
{
  /* 0x0000 */ unsigned long usri1017_acct_expires;
} USER_INFO_1017, *PUSER_INFO_1017; /* size: 0x0004 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2820, *PTAG_UNNAMED_2820;

typedef enum
{
  agent_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2821, *PTAG_UNNAMED_2821;

struct tagEXCEPINFO
{
  /* 0x0000 */ unsigned short wCode;
  /* 0x0002 */ unsigned short wReserved;
  /* 0x0004 */ long Padding_761;
  /* 0x0008 */ wchar_t* bstrSource;
  /* 0x0010 */ wchar_t* bstrDescription;
  /* 0x0018 */ wchar_t* bstrHelpFile;
  /* 0x0020 */ unsigned long dwHelpContext;
  /* 0x0024 */ long Padding_762;
  /* 0x0028 */ void* pvReserved;
  /* 0x0030 */ void* pfnDeferredFillIn /* function */;
  /* 0x0038 */ long scode;
  /* 0x003c */ long __PADDING__[1];
}; /* size: 0x0040 */

typedef enum
{
  cm_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2822, *PTAG_UNNAMED_2822;

typedef struct _DLLVERSIONINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwMajorVersion;
  /* 0x0008 */ unsigned long dwMinorVersion;
  /* 0x000c */ unsigned long dwBuildNumber;
  /* 0x0010 */ unsigned long dwPlatformID;
} DLLVERSIONINFO, *PDLLVERSIONINFO; /* size: 0x0014 */

typedef struct _DLLVERSIONINFO2
{
  /* 0x0000 */ struct _DLLVERSIONINFO info1;
  /* 0x0014 */ unsigned long dwFlags;
  /* 0x0018 */ unsigned __int64 ullVersion;
} DLLVERSIONINFO2, *PDLLVERSIONINFO2; /* size: 0x0020 */

struct IRpcSyntaxNegotiate
{
}; /* size: 0x0008 */

struct ITransactionLocal
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2823, *PTAG_UNNAMED_2823;

typedef enum
{
  manager_idIdx = 0,
  manager_addressIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2824, *PTAG_UNNAMED_2824;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 12,
} TAG_UNNAMED_2825, *PTAG_UNNAMED_2825;

struct ISOSHost_Node
{
}; /* size: 0x0008 */

struct tagEMREXTTEXTOUTA
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long iGraphicsMode;
  /* 0x001c */ float exScale;
  /* 0x0020 */ float eyScale;
  /* 0x0024 */ struct tagEMRTEXT emrtext;
}; /* size: 0x004c */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 24,
} TAG_UNNAMED_2826, *PTAG_UNNAMED_2826;

typedef enum
{
  roster_sizeIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2827, *PTAG_UNNAMED_2827;

struct ISoftDistExt
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2828, *PTAG_UNNAMED_2828;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2829, *PTAG_UNNAMED_2829;

typedef enum
{
  old_stateIdx = 0,
  new_stateIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2830, *PTAG_UNNAMED_2830;

struct tagTLIBATTR
{
  /* 0x0000 */ struct _GUID guid;
  /* 0x0010 */ unsigned long lcid;
  /* 0x0014 */ enum tagSYSKIND syskind;
  /* 0x0018 */ unsigned short wMajorVerNum;
  /* 0x001a */ unsigned short wMinorVerNum;
  /* 0x001c */ unsigned short wLibFlags;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2831, *PTAG_UNNAMED_2831;

class SEList<MemoryNode,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _FP_32
{
  /* 0x0000 */ unsigned long W[1];
} FP_32, *PFP_32; /* size: 0x0004 */

typedef struct _FP_64
{
  /* 0x0000 */ unsigned long W[2];
} FP_64, *PFP_64; /* size: 0x0008 */

typedef struct _FP_80
{
  /* 0x0000 */ unsigned long W[3];
} FP_80, *PFP_80; /* size: 0x000c */

typedef struct _FP_128
{
  /* 0x0000 */ unsigned long W[4];
} FP_128, *PFP_128; /* size: 0x0010 */

typedef struct _FP_IEEE_VALUE
{
  union
  {
    union
    {
      /* 0x0000 */ short I16Value;
      /* 0x0000 */ unsigned short U16Value;
      /* 0x0000 */ long I32Value;
      /* 0x0000 */ unsigned long U32Value;
      /* 0x0000 */ void* StringValue;
      /* 0x0000 */ unsigned long CompareValue;
      /* 0x0000 */ struct _FP_32 Fp32Value;
      /* 0x0000 */ union _LARGE_INTEGER I64Value;
      /* 0x0000 */ union _ULARGE_INTEGER U64Value;
      /* 0x0000 */ struct _FP_64 Fp64Value;
      /* 0x0000 */ struct _FP_80 Fp80Value;
      /* 0x0000 */ struct _FP_128 Fp128Value;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ Value;
  struct
  {
    struct /* bitfield */
    {
      /* 0x0010 */ unsigned long RoundingMode : 2; /* bit position: 0 */
      /* 0x0010 */ unsigned long Inexact : 1; /* bit position: 2 */
      /* 0x0010 */ unsigned long Underflow : 1; /* bit position: 3 */
      /* 0x0010 */ unsigned long Overflow : 1; /* bit position: 4 */
      /* 0x0010 */ unsigned long ZeroDivide : 1; /* bit position: 5 */
      /* 0x0010 */ unsigned long InvalidOperation : 1; /* bit position: 6 */
      /* 0x0010 */ unsigned long OperandValid : 1; /* bit position: 7 */
      /* 0x0010 */ unsigned long Format : 4; /* bit position: 8 */
      /* 0x0010 */ unsigned long Precision : 4; /* bit position: 12 */
      /* 0x0010 */ unsigned long Operation : 12; /* bit position: 16 */
      /* 0x0010 */ unsigned long Spare : 3; /* bit position: 28 */
      /* 0x0010 */ unsigned long HardwareException : 1; /* bit position: 31 */
    }; /* bitfield */
  } /* size: 0x0004 */ Control;
  /* 0x0014 */ long __PADDING__[1];
} FP_IEEE_VALUE, *PFP_IEEE_VALUE; /* size: 0x0018 */

typedef struct _FP_IEEE_RECORD
{
  /* 0x0000 */ struct _FP_IEEE_VALUE Operand1;
  /* 0x0018 */ struct _FP_IEEE_VALUE Operand2;
  /* 0x0030 */ struct _FP_IEEE_VALUE Result;
} FP_IEEE_RECORD, *PFP_IEEE_RECORD; /* size: 0x0048 */

typedef enum
{
  reporter_brick_idIdx = 0,
  reporter_componentIdx = 1,
  target_brick_idIdx = 2,
  target_componentIdx = 3,
  flagsIdx = 4,
  errorIdx = 5,
  severityIdx = 6,
  stateIdx = 7,
  message_textIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2832, *PTAG_UNNAMED_2832;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2833, *PTAG_UNNAMED_2833;

typedef enum
{
  brick_idIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2834, *PTAG_UNNAMED_2834;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2835, *PTAG_UNNAMED_2835;

struct IHttpNegotiate3
{
}; /* size: 0x0008 */

class VolumeIORGUnit
{
  /* 0x0000 */ long Padding_763[6];
  /* 0x0018 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_LimitInterval;
}; /* size: 0x0020 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 4,
} TAG_UNNAMED_2836, *PTAG_UNNAMED_2836;

class XEventAutoEngineLoad
{
  /* 0x0000 */ long Padding_764[2];
  /* 0x0008 */ struct HINSTANCE__* m_hXeMod;
  /* 0x0010 */ struct XEError m_InitError;
  /* 0x0028 */ enum XEventAutoEngineLoad::InitFailureReasons m_reason;
}; /* size: 0x0030 */

struct IWbemAddressResolution
{
}; /* size: 0x0008 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2837, *PTAG_UNNAMED_2837;

typedef struct _ENCRYPTION_BUFFER
{
  /* 0x0000 */ unsigned long EncryptionOperation;
  /* 0x0004 */ unsigned char Private[1];
  /* 0x0005 */ char __PADDING__[3];
} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER; /* size: 0x0008 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2838, *PTAG_UNNAMED_2838;

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2839, *PTAG_UNNAMED_2839;

struct tagLOGPEN
{
  /* 0x0000 */ unsigned int lopnStyle;
  /* 0x0004 */ struct tagPOINT lopnWidth;
  /* 0x000c */ unsigned long lopnColor;
}; /* size: 0x0010 */

typedef struct _SERVICE_FAILURE_ACTIONS_FLAG
{
  /* 0x0000 */ int fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, *PSERVICE_FAILURE_ACTIONS_FLAG; /* size: 0x0004 */

typedef enum
{
  cma_addressIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2840, *PTAG_UNNAMED_2840;

typedef enum
{
  brick_idIdx = 0,
  errorIdx = 1,
  severityIdx = 2,
  stateIdx = 3,
  message_textIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2841, *PTAG_UNNAMED_2841;

class std::domain_error
{
}; /* size: 0x0018 */

class SEListEnum<CFixedInfo,16>;

typedef struct _NETLOGON_INFO_4
{
  /* 0x0000 */ wchar_t* netlog4_trusted_dc_name;
  /* 0x0008 */ wchar_t* netlog4_trusted_domain_name;
} NETLOGON_INFO_4, *PNETLOGON_INFO_4; /* size: 0x0010 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 1,
  NVld = 0,
  VldEddOffset = 0,
  BufSize = 8,
} TAG_UNNAMED_2842, *PTAG_UNNAMED_2842;

class Spinlock<152,3,1>
{
}; /* size: 0x0004 */

typedef struct _LAST_EXCEPTION_LOG
{
  /* 0x0000 */ struct _EXCEPTION_RECORD ExceptionRecord;
  /* 0x0098 */ long Padding_765[2];
  /* 0x00a0 */ struct _CONTEXT ContextRecord;
  /* 0x0570 */ unsigned long ControlPc;
  /* 0x0574 */ enum _EXCEPTION_DISPOSITION Disposition;
  /* 0x0578 */ unsigned long HandlerData[5];
  /* 0x058c */ long __PADDING__[1];
} LAST_EXCEPTION_LOG, *PLAST_EXCEPTION_LOG; /* size: 0x0590 */

typedef enum
{
  operationIdx = 0,
  destination_idIdx = 1,
  service_addressIdx = 2,
  num_messagesIdx = 3,
  target_addressIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2843, *PTAG_UNNAMED_2843;

struct std::tr1::_Is_floating_point<float>
{
}; /* size: 0x0001 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 1,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_2844, *PTAG_UNNAMED_2844;

struct std::tr1::_Remove_reference<std::basic_ostream<char,std::char_traits<char> > * &>
{
}; /* size: 0x0001 */

typedef struct _OBJECT_TYPE_LIST
{
  /* 0x0000 */ unsigned short Level;
  /* 0x0002 */ unsigned short Sbz;
  /* 0x0004 */ long Padding_766;
  /* 0x0008 */ struct _GUID* ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST; /* size: 0x0010 */

class SEListSized<SOS_ResourceGroup,0>
{
  /* 0x0000 */ long Padding_767[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2845, *PTAG_UNNAMED_2845;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2846, *PTAG_UNNAMED_2846;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2847, *PTAG_UNNAMED_2847;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  gdm_cycle_progressIdx = 2,
  encoded_dataIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2848, *PTAG_UNNAMED_2848;

struct IInitializeSpy
{
}; /* size: 0x0008 */

typedef struct _DEBUG_EVENT
{
  /* 0x0000 */ unsigned long dwDebugEventCode;
  /* 0x0004 */ unsigned long dwProcessId;
  /* 0x0008 */ unsigned long dwThreadId;
  /* 0x000c */ long Padding_768;
  union
  {
    union
    {
      /* 0x0010 */ struct _EXCEPTION_DEBUG_INFO Exception;
      /* 0x0010 */ struct _CREATE_THREAD_DEBUG_INFO CreateThread;
      /* 0x0010 */ struct _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
      /* 0x0010 */ struct _EXIT_THREAD_DEBUG_INFO ExitThread;
      /* 0x0010 */ struct _EXIT_PROCESS_DEBUG_INFO ExitProcess;
      /* 0x0010 */ struct _LOAD_DLL_DEBUG_INFO LoadDll;
      /* 0x0010 */ struct _UNLOAD_DLL_DEBUG_INFO UnloadDll;
      /* 0x0010 */ struct _OUTPUT_DEBUG_STRING_INFO DebugString;
      /* 0x0010 */ struct _RIP_INFO RipInfo;
    }; /* size: 0x00a0 */
  } /* size: 0x00a0 */ u;
} DEBUG_EVENT, *PDEBUG_EVENT; /* size: 0x00b0 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2849, *PTAG_UNNAMED_2849;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  transaction_id_countIdx = 3,
  edge_countIdx = 4,
  encoded_dataIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2850, *PTAG_UNNAMED_2850;

struct ISWbemServicesEx
{
}; /* size: 0x0008 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 1,
  VldEddOffset = 4,
  BufSize = 36,
} TAG_UNNAMED_2851, *PTAG_UNNAMED_2851;

typedef struct __vc_attributes::iid_isAttribute
{
  /* 0x0000 */ const char* limited_expression;
} _vc_attributes::iid_isAttribute, *P_vc_attributes::iid_isAttribute; /* size: 0x0008 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  message_typeIdx = 2,
  victim_transaction_id_countIdx = 3,
  encoded_dataIdx = 4,
  LastField = 5,
} TAG_UNNAMED_2852, *PTAG_UNNAMED_2852;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  pmo_addressIdx = 2,
  pmo_utilizationIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2853, *PTAG_UNNAMED_2853;

struct WaitableAddressHashBucketSLock
{
}; /* size: 0x0004 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 28,
} TAG_UNNAMED_2854, *PTAG_UNNAMED_2854;

typedef struct _ACTRL_PROPERTY_ENTRYW
{
  /* 0x0000 */ wchar_t* lpProperty;
  /* 0x0008 */ struct _ACTRL_ACCESS_ENTRY_LISTW* pAccessEntryList;
  /* 0x0010 */ unsigned long fListFlags;
  /* 0x0014 */ long __PADDING__[1];
} ACTRL_PROPERTY_ENTRYW, *PACTRL_PROPERTY_ENTRYW; /* size: 0x0018 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2855, *PTAG_UNNAMED_2855;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_2856, *PTAG_UNNAMED_2856;

struct IClassActivator
{
}; /* size: 0x0008 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2857, *PTAG_UNNAMED_2857;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2858, *PTAG_UNNAMED_2858;

typedef struct _RPC_PROTSEQ_VECTORA
{
  /* 0x0000 */ unsigned int Count;
  /* 0x0004 */ long Padding_769;
  /* 0x0008 */ unsigned char* Protseq[1];
} RPC_PROTSEQ_VECTORA, *PRPC_PROTSEQ_VECTORA; /* size: 0x0010 */

class Spinlock<197,3,1>
{
}; /* size: 0x0004 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  expected_reply_typeIdx = 2,
  expected_reply_countIdx = 3,
  reply_timeoutIdx = 4,
  received_reply_countIdx = 5,
  resultIdx = 6,
  LastField = 7,
} TAG_UNNAMED_2859, *PTAG_UNNAMED_2859;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  transaction_local_state_descriptor_countIdx = 2,
  encoded_dataIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2860, *PTAG_UNNAMED_2860;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 1,
  VldEddOffset = 2,
  BufSize = 28,
} TAG_UNNAMED_2861, *PTAG_UNNAMED_2861;

typedef struct _RPC_BINDING_VECTOR
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_770;
  /* 0x0008 */ void* BindingH[1];
} RPC_BINDING_VECTOR, *PRPC_BINDING_VECTOR; /* size: 0x0010 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  map_entry_countIdx = 2,
  encoded_dataIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2862, *PTAG_UNNAMED_2862;

struct NOTIFY_USER_POWER_SETTING
{
  /* 0x0000 */ struct _GUID Guid;
}; /* size: 0x0010 */

class ExceptionBackout
{
  /* 0x0000 */ int m_wasInsideCatch;
  /* 0x0004 */ long Padding_771;
  /* 0x0008 */ const class SQLError* m_pSQLError;
}; /* size: 0x0010 */

struct XEEngineServicesAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* EventFireBegin /* function */;
  /* 0x0018 */ void* EventFireEnd /* function */;
  /* 0x0020 */ void* GetObjectW /* function */;
  /* 0x0028 */ void* GetStorage /* function */;
  /* 0x0030 */ void* SetLastError /* function */;
  /* 0x0038 */ void* FormatErrorMessage /* function */;
  /* 0x0040 */ void* FormatErrorMessageArgs /* function */;
  /* 0x0048 */ void* MemAlloc /* function */;
  /* 0x0050 */ void* MemFree /* function */;
  /* 0x0058 */ void* FileCreate /* function */;
  /* 0x0060 */ void* CreateSection /* function */;
  /* 0x0068 */ void* MapSectionView /* function */;
  /* 0x0070 */ void* UnmapSectionView /* function */;
  /* 0x0078 */ void* DestroySection /* function */;
  /* 0x0080 */ void* CreateMutexW /* function */;
  /* 0x0088 */ void* DestroyMutex /* function */;
  /* 0x0090 */ void* EnterMutex /* function */;
  /* 0x0098 */ void* ReleaseMutex /* function */;
  /* 0x00a0 */ void* CreateRWLock /* function */;
  /* 0x00a8 */ void* DestroyRWLock /* function */;
  /* 0x00b0 */ void* EnterRWLock /* function */;
  /* 0x00b8 */ void* ReleaseRWLock /* function */;
  /* 0x00c0 */ void* CreateEventManual /* function */;
  /* 0x00c8 */ void* DestroyEventManual /* function */;
  /* 0x00d0 */ void* WaitEventManual /* function */;
  /* 0x00d8 */ void* ResetEventManual /* function */;
  /* 0x00e0 */ void* SignalEventManual /* function */;
  /* 0x00e8 */ void* IsSignaledEventManual /* function */;
  /* 0x00f0 */ void* EstablishThreadContext /* function */;
  /* 0x00f8 */ void* CreateAsyncIORequest /* function */;
  /* 0x0100 */ void* DestroyAsyncIORequest /* function */;
  /* 0x0108 */ void* ResetAsyncIORequest /* function */;
  /* 0x0110 */ void* GetAsyncIORequestOverlappedPtr /* function */;
  /* 0x0118 */ void* GetAsyncIORequestUserData /* function */;
  /* 0x0120 */ void* AddAsyncIOPendingDiskRequest /* function */;
  /* 0x0128 */ void* GetPartitionID /* function */;
  /* 0x0130 */ void* GetCurrentSessionCtxtRecord /* function */;
  /* 0x0138 */ void* GetNextSessionCtxtRecord /* function */;
  /* 0x0140 */ void* GetPackageMetadata /* function */;
  /* 0x0148 */ void* StreamRead /* function */;
  /* 0x0150 */ void* StreamGetFragment /* function */;
  /* 0x0158 */ void* StreamReset /* function */;
  /* 0x0160 */ void* DebugLog /* function */;
  /* 0x0168 */ void* AssertFail /* function */;
  /* 0x0170 */ void* LogMessage /* function */;
  /* 0x0178 */ void* GetTicksConfig /* function */;
  /* 0x0180 */ void* GetLastErrorContext /* function */;
  /* 0x0188 */ void* SymbolizeCallstack /* function */;
  /* 0x0190 */ void* CanonicalizePath /* function */;
  /* 0x0198 */ void* GetLocale /* function */;
}; /* size: 0x01a0 */

struct StaticStorage<83>
{
  /* 0x0000 */ unsigned int m_buf[3];
}; /* size: 0x000c */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2863, *PTAG_UNNAMED_2863;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2864, *PTAG_UNNAMED_2864;

class XE_SessionObjectAttrEnumerator
{
  union
  {
    /* 0x0000 */ const unsigned short END_OF_ENUMERATION;
    /* 0x0000 */ unsigned short m_nAttrs;
  }; /* size: 0x0002 */
  /* 0x0002 */ char Padding_772[6];
  /* 0x0008 */ const struct XECustomizableAttribute* m_cattrs;
  /* 0x0010 */ unsigned short m_currentAttr;
  /* 0x0012 */ char Padding_773[6];
  /* 0x0018 */ const struct XEObject* m_obj;
  /* 0x0020 */ const struct XEPackageMetadata* m_packageMd;
  /* 0x0028 */ class XE_SessionObjectEnumerator m_enum;
}; /* size: 0x02c0 */

typedef struct _TRACE_ENABLE_INFO
{
  /* 0x0000 */ unsigned long IsEnabled;
  /* 0x0004 */ unsigned char Level;
  /* 0x0005 */ unsigned char Reserved1;
  /* 0x0006 */ unsigned short LoggerId;
  /* 0x0008 */ unsigned long EnableProperty;
  /* 0x000c */ unsigned long Reserved2;
  /* 0x0010 */ unsigned __int64 MatchAnyKeyword;
  /* 0x0018 */ unsigned __int64 MatchAllKeyword;
} TRACE_ENABLE_INFO, *PTRACE_ENABLE_INFO; /* size: 0x0020 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2865, *PTAG_UNNAMED_2865;

typedef struct __vc_attributes::atl::perf_counterAttribute
{
  /* 0x0000 */ const char* namestring;
  /* 0x0008 */ const char* helpstring;
  /* 0x0010 */ int name_res;
  /* 0x0014 */ int help_res;
  /* 0x0018 */ int countertype;
  /* 0x001c */ int defscale;
  /* 0x0020 */ BOOL default_counter;
  /* 0x0021 */ char Padding_774[3];
  /* 0x0024 */ int detail;
  /* 0x0028 */ int max_counter_size;
  /* 0x002c */ long Padding_775;
  /* 0x0030 */ const char* countertype_string;
} _vc_attributes::atl::perf_counterAttribute, *P_vc_attributes::atl::perf_counterAttribute; /* size: 0x0038 */

typedef enum
{
  pmo_addressIdx = 0,
  pmo_utilizationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2866, *PTAG_UNNAMED_2866;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  general_pmo_addressIdx = 2,
  general_pmo_utilizationIdx = 3,
  gwfg_pmo_addressIdx = 4,
  gwfg_pmo_utilizationIdx = 5,
  LastField = 6,
} TAG_UNNAMED_2867, *PTAG_UNNAMED_2867;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 32,
} TAG_UNNAMED_2868, *PTAG_UNNAMED_2868;

typedef union __m64
{
  union
  {
    /* 0x0000 */ unsigned __int64 m64_u64;
    /* 0x0000 */ float m64_f32[2];
    /* 0x0000 */ char m64_i8[8];
    /* 0x0000 */ short m64_i16[4];
    /* 0x0000 */ int m64_i32[2];
    /* 0x0000 */ __int64 m64_i64;
    /* 0x0000 */ unsigned char m64_u8[8];
    /* 0x0000 */ unsigned short m64_u16[4];
    /* 0x0000 */ unsigned int m64_u32[2];
  }; /* size: 0x0008 */
} _m64, *P_m64; /* size: 0x0008 */

class ISOSHost_CacheStoreHashBucketUserDataEnumHelper
{
  /* 0x0000 */ struct ISOSHost_CacheStore* const m_pCacheStore;
  /* 0x0008 */ void* const m_pvBuf;
}; /* size: 0x0010 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2869, *PTAG_UNNAMED_2869;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2870, *PTAG_UNNAMED_2870;

typedef struct _userSTGMEDIUM
{
  /* 0x0000 */ struct IUnknown* pUnkForRelease;
} userSTGMEDIUM, *PuserSTGMEDIUM; /* size: 0x0008 */

typedef struct _userFLAG_STGMEDIUM
{
  /* 0x0000 */ long ContextFlags;
  /* 0x0004 */ long fPassOwnership;
  /* 0x0008 */ struct _userSTGMEDIUM Stgmed;
} userFLAG_STGMEDIUM, *PuserFLAG_STGMEDIUM; /* size: 0x0010 */

class XeSqlPkg::hadr_wsfc_update_ag_listener_dependency
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_776[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int listener_idOffset;
    /* 0x0000 */ const int dns_nameOffset;
    /* 0x0000 */ const int dependency_expressionOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 5,
  NVld = 0,
  VldEddOffset = 4,
  BufSize = 28,
} TAG_UNNAMED_2871, *PTAG_UNNAMED_2871;

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2872, *PTAG_UNNAMED_2872;

class std::exception
{
  /* 0x0000 */ long Padding_777[2];
  /* 0x0008 */ const char* _Mywhat;
  /* 0x0010 */ BOOL _Mydofree;
}; /* size: 0x0018 */

typedef enum
{
  previous_stateIdx = 0,
  current_stateIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2873, *PTAG_UNNAMED_2873;

struct tagMDINEXTMENU
{
  /* 0x0000 */ struct HMENU__* hmenuIn;
  /* 0x0008 */ struct HMENU__* hmenuNext;
  /* 0x0010 */ struct HWND__* hwndNext;
}; /* size: 0x0018 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2874, *PTAG_UNNAMED_2874;

typedef enum
{
  pmo_addressIdx = 0,
  pmo_utilizationIdx = 1,
  buffer_stateIdx = 2,
  LastField = 3,
} TAG_UNNAMED_2875, *PTAG_UNNAMED_2875;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 16,
} TAG_UNNAMED_2876, *PTAG_UNNAMED_2876;

class MethodCallBinder_0<unsigned long,SOSClient_MemoryNotificationCallback,unsigned long (__cdecl SOSClient_MemoryNotificationCallback::*)(void)>
{
  /* 0x0000 */ class SOSClient_MemoryNotificationCallback* const m_pTObj;
  /* 0x0008 */ void* m_f /* function */;
}; /* size: 0x0010 */

typedef struct _SYSTEM_AUDIT_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE; /* size: 0x0030 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 6,
  NVld = 0,
  VldEddOffset = 5,
  BufSize = 44,
} TAG_UNNAMED_2877, *PTAG_UNNAMED_2877;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2878, *PTAG_UNNAMED_2878;

class std::numeric_limits<unsigned long>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct tagSTYLEBUFW
{
  /* 0x0000 */ unsigned long dwStyle;
  /* 0x0004 */ wchar_t szDescription[32];
}; /* size: 0x0044 */

typedef enum
{
  previous_vertex_pool_sizeIdx = 0,
  current_vertex_pool_sizeIdx = 1,
  vertex_pool_utilizationIdx = 2,
  pmo_utilizationIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2879, *PTAG_UNNAMED_2879;

class XeSqlPkg::hadr_transport_replica_before_sending_primary_info
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_778[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int work_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef enum
{
  generation_idIdx = 0,
  sequence_idIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2880, *PTAG_UNNAMED_2880;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2881, *PTAG_UNNAMED_2881;

typedef struct _DISCDLGSTRUCTW
{
  /* 0x0000 */ unsigned long cbStructure;
  /* 0x0004 */ long Padding_779;
  /* 0x0008 */ struct HWND__* hwndOwner;
  /* 0x0010 */ wchar_t* lpLocalName;
  /* 0x0018 */ wchar_t* lpRemoteName;
  /* 0x0020 */ unsigned long dwFlags;
  /* 0x0024 */ long __PADDING__[1];
} DISCDLGSTRUCTW, *PDISCDLGSTRUCTW; /* size: 0x0028 */

struct tagMULTIKEYHELPA
{
  /* 0x0000 */ unsigned long mkSize;
  /* 0x0004 */ char mkKeylist;
  /* 0x0005 */ char szKeyphrase[1];
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

typedef enum
{
  edge_pool_sizeIdx = 0,
  edge_pool_utilizationIdx = 1,
  LastField = 2,
} TAG_UNNAMED_2882, *PTAG_UNNAMED_2882;

struct tagEMRGLSRECORD
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long cbData;
  /* 0x000c */ unsigned char Data[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

struct std::input_iterator_tag
{
}; /* size: 0x0001 */

class XeSqlPkg::object_altered
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_780[140];
      /* 0x0240 */ unsigned char m_buf[43];
    }; /* size: 0x003b */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int related_object_idOffset;
    /* 0x0000 */ const int ddl_phaseOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 8,
} TAG_UNNAMED_2883, *PTAG_UNNAMED_2883;

typedef enum
{
  NStatic = 4,
  NCustomizable = 0,
  NDynamic = 3,
  NVld = 0,
  VldEddOffset = 2,
  BufSize = 20,
} TAG_UNNAMED_2884, *PTAG_UNNAMED_2884;

typedef enum
{
  cpu_ticksIdx = 0,
  f0Idx = 1,
  f1Idx = 2,
  f2Idx = 3,
  g0Idx = 4,
  g1Idx = 5,
  g2Idx = 6,
  g3Idx = 7,
  thread_idIdx = 8,
  LastField = 9,
} TAG_UNNAMED_2885, *PTAG_UNNAMED_2885;

class std::locale::id
{
  union
  {
    /* 0x0000 */ unsigned __int64 _Id;
    /* 0x0000 */ int _Id_cnt;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _Cvtvec
{
  /* 0x0000 */ unsigned long _Hand;
  /* 0x0004 */ unsigned int _Page;
} Cvtvec, *PCvtvec; /* size: 0x0008 */

class std::num_get<unsigned short,std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_781[2];
  /* 0x0010 */ struct _Cvtvec _Cvt;
}; /* size: 0x0018 */

typedef enum
{
  Value = 1,
} TAG_UNNAMED_2886, *PTAG_UNNAMED_2886;

typedef struct _TOKEN_DEFAULT_DACL
{
  /* 0x0000 */ struct _ACL* DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL; /* size: 0x0008 */

typedef enum
{
  federated_xact_idIdx = 0,
  federated_xact_node_idIdx = 1,
  federated_xact_node_local_idIdx = 2,
  stateIdx = 3,
  LastField = 4,
} TAG_UNNAMED_2887, *PTAG_UNNAMED_2887;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_2888, *PTAG_UNNAMED_2888;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 0,
  NVld = 0,
  VldEddOffset = -1,
  BufSize = 0,
} TAG_UNNAMED_2889, *PTAG_UNNAMED_2889;

typedef struct _ImageArchitectureEntry
{
  /* 0x0000 */ unsigned long FixupInstRVA;
  /* 0x0004 */ unsigned long NewInst;
} ImageArchitectureEntry, *PImageArchitectureEntry; /* size: 0x0008 */

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE; /* size: 0x0030 */

typedef struct __vc_attributes::coclassAttribute
{
} _vc_attributes::coclassAttribute, *P_vc_attributes::coclassAttribute; /* size: 0x0001 */

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 2,
  NVld = 0,
  VldEddOffset = 1,
  BufSize = 16,
} TAG_UNNAMED_2890, *PTAG_UNNAMED_2890;

typedef enum
{
  age_valueIdx = 0,
  LastField = 1,
} TAG_UNNAMED_2891, *PTAG_UNNAMED_2891;

class TypeListNode<void *,TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class SEListEnum<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>,0>;

typedef enum
{
  NStatic = 3,
  NCustomizable = 0,
  NDynamic = 4,
  NVld = 0,
  VldEddOffset = 3,
  BufSize = 20,
} TAG_UNNAMED_2892, *PTAG_UNNAMED_2892;

typedef struct _stat64
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_782[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long Padding_783;
  /* 0x0018 */ __int64 st_size;
  /* 0x0020 */ __int64 st_atime;
  /* 0x0028 */ __int64 st_mtime;
  /* 0x0030 */ __int64 st_ctime;
} stat64, *Pstat64; /* size: 0x0038 */

class XeSqlPkg::xtp_recover_done
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_784[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class Spinlock<129,7,1>
{
}; /* size: 0x0004 */

class std::hash<std::error_code>
{
}; /* size: 0x0001 */

typedef struct _SERVER_INFO_1538
{
  /* 0x0000 */ int sv1538_enablefcbopens;
} SERVER_INFO_1538, *PSERVER_INFO_1538; /* size: 0x0004 */

typedef struct _IMAGE_RESOURCE_DIR_STRING_U
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ wchar_t NameString[1];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U; /* size: 0x0004 */

struct HBITMAP__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct XEActionValidate
{
  /* 0x0000 */ const struct XEEvent* m_pEvent;
}; /* size: 0x0008 */

struct ISWbemProperty
{
}; /* size: 0x0008 */

typedef struct __vc_attributes::helpcontextAttribute
{
  /* 0x0000 */ const char* helpcontext_value;
} _vc_attributes::helpcontextAttribute, *P_vc_attributes::helpcontextAttribute; /* size: 0x0008 */

struct SchedulerSLock
{
}; /* size: 0x0004 */

class SOSQueue<Worker,0>
{
}; /* size: 0x0010 */

class PercentileQueue<Worker,0,64>
{
  union
  {
    /* 0x0000 */ const unsigned long x_queuesCount;
    /* 0x0000 */ unsigned long m_elementCount;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long m_curPosition;
  /* 0x0008 */ unsigned __int64 m_usedQueuesMask;
  /* 0x0010 */ class SOSQueue<Worker,0> m_elementQueues[64];
}; /* size: 0x0410 */

class SEListSized<SOS_Task,0>
{
  /* 0x0000 */ long Padding_785[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class SEList<SOS_Task,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct TaskSLock
{
}; /* size: 0x0004 */

class SEList<TimerRequest,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SOS_Scheduler::Timer
{
  /* 0x0000 */ class SEList<TimerRequest,8> m_timerQueue;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastCheck;
  /* 0x0018 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastActive;
  /* 0x0020 */ unsigned long m_nonDeferredCount;
  /* 0x0024 */ long Padding_786;
  /* 0x0028 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastTimer;
}; /* size: 0x0030 */

struct AbortTaskSLock
{
}; /* size: 0x0004 */

class SOSQueue<SOS_Task,320>
{
}; /* size: 0x0010 */

class IOQueue
{
  /* 0x0000 */ long Padding_787[6];
  /* 0x0018 */ class SOS_IOCompRequest* m_pFirstIO;
  /* 0x0020 */ class SOS_IOCompRequest* m_pLastIO;
  /* 0x0028 */ volatile long m_busyCnt;
  /* 0x002c */ volatile long m_pendingIO;
}; /* size: 0x0030 */

class NodeAffinity
{
  /* 0x0000 */ unsigned short m_NodeId;
  /* 0x0002 */ char Padding_788[6];
  /* 0x0008 */ unsigned __int64 m_mask;
}; /* size: 0x0010 */

class SOS_IOCompRequestList
{
}; /* size: 0x0010 */

typedef struct _SLIST_ENTRY
{
  /* 0x0000 */ struct _SLIST_ENTRY* Next;
  /* 0x0008 */ long __PADDING__[2];
} SLIST_ENTRY, *PSLIST_ENTRY; /* size: 0x0010 */

class SOS_ExceptionRingRecord
{
  /* 0x0000 */ long Padding_789[4];
  /* 0x0010 */ int m_Error;
  /* 0x0014 */ int m_Severity;
  /* 0x0018 */ int m_State;
  /* 0x001c */ int m_UserDefined;
  /* 0x0020 */ class SOS_Task* m_ThrowingTask;
  /* 0x0028 */ enum EX_ORIGINS m_Origin;
}; /* size: 0x0030 */

class WorkerTimerRequest
{
  /* 0x0000 */ long Padding_790[14];
  /* 0x0038 */ class Worker* m_pWorker;
}; /* size: 0x0040 */

class TCallbackList<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >
{
}; /* size: 0x0010 */

class FPUCache
{
  /* 0x0000 */ unsigned long m_control;
}; /* size: 0x0004 */

class TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>
{
}; /* size: 0x0020 */

class Worker::ProfilingCPUTicks
{
  /* 0x0000 */ class Worker* m_pWorker;
  /* 0x0008 */ unsigned __int64 m_profileActivationCount;
  /* 0x0010 */ unsigned __int64 m_profileStartQuantumTicks;
  /* 0x0018 */ unsigned __int64 m_profileAccumulatedTicks;
  /* 0x0020 */ class TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> m_profileSuspendCallback;
  /* 0x0040 */ class TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> m_profileResumeCallback;
  /* 0x0060 */ class TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> m_profileDoneCallback;
}; /* size: 0x0080 */

class SQLError
{
  /* 0x0000 */ int m_Error;
  /* 0x0004 */ int m_Severity;
  /* 0x0008 */ int m_StoredSeverity;
  /* 0x000c */ int m_State;
  /* 0x0010 */ enum SQLError::ERROR_ORIGIN m_ErrorOrigin;
}; /* size: 0x0014 */

struct WaitStatsSLock
{
}; /* size: 0x0004 */

struct SOS_WaitRow
{
  /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> time;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sigtime;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> maxWaitTime;
  /* 0x0018 */ unsigned __int64 requests;
  /* 0x0020 */ unsigned int waitType;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct SOS_WaitStats::WaitStatsLink
{
  /* 0x0000 */ struct SOS_WaitRow m_row;
  /* 0x0028 */ struct SOS_WaitStats::WaitStatsLink* m_pNext;
}; /* size: 0x0030 */

class SOS_WaitStats
{
  /* 0x0000 */ class MemoryClerk* m_pMemoryClerk;
  /* 0x0008 */ class SOS_WaitStats* m_pNextStats;
  /* 0x0010 */ int m_fUseSpinlock;
  /* 0x0014 */ struct WaitStatsSLock m_spl;
  /* 0x0018 */ struct SOS_WaitStats::WaitStatsLink* m_rgpBuckets[16];
  /* 0x0098 */ unsigned short m_cUsed;
  /* 0x009a */ char Padding_791[6];
  /* 0x00a0 */ struct SOS_WaitStats::WaitStatsLink m_staticWaits[32];
  /* 0x06a0 */ struct SOS_WaitStats::WaitStatsPage* m_prgDynamicWaits[7];
}; /* size: 0x06d8 */

class Worker
{
  /* 0x0000 */ long Padding_792[16];
  /* 0x0040 */ void* m_fastThread;
  /* 0x0048 */ long Padding_793[2];
  /* 0x0050 */ struct _SLIST_ENTRY m_slistEntry;
  /* 0x0060 */ enum UMSWorkerState m_UMSWorkerState;
  /* 0x0064 */ int m_UMSReady;
  /* 0x0068 */ int m_UMSInitCompleted;
  /* 0x006c */ long Padding_794;
  /* 0x0070 */ class Worker* m_NextToRun;
  /* 0x0078 */ unsigned long m_Timeout;
  /* 0x007c */ unsigned long m_CPUId;
  /* 0x0080 */ unsigned long m_NumberOfTasksProcessed;
  /* 0x0084 */ unsigned long m_TimesCachedTaskReused;
  /* 0x0088 */ unsigned long m_NumberOfContextSwitches;
  /* 0x008c */ unsigned long m_NumberOfIOs;
  /* 0x0090 */ unsigned __int64 m_ByteCountIOs;
  /* 0x0098 */ void* m_ErrorLogRoutine /* function */;
  /* 0x00a0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TicksWhenCreated;
  /* 0x00a8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TicksWhenTaskBound;
  /* 0x00b0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TicksWhenWaitStarted;
  /* 0x00b8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TicksWhenResumed;
  /* 0x00c0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TicksWhenTimeoutWarningReported;
  /* 0x00c8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TicksWaiting;
  /* 0x00d0 */ class SOS_Task** m_MutexOwner;
  /* 0x00d8 */ long m_ExceptionSeverity;
  /* 0x00dc */ long Padding_795;
  /* 0x00e0 */ void* m_ExceptionAddress;
  /* 0x00e8 */ class ExcHandler* m_ExceptionHandler;
  /* 0x00f0 */ class SOS_Task* m_LastExceptionTask;
  /* 0x00f8 */ class SOS_ExceptionRingRecord m_LastExceptionRecord;
  /* 0x0128 */ class StackFrames<16> m_LastExceptionCallStack;
  /* 0x01d0 */ wchar_t* m_LastExceptionMessage;
  /* 0x01d8 */ void* m_Token;
  /* 0x01e0 */ class Worker* m_SignalWorker;
  /* 0x01e8 */ class SOS_Task* m_CachedTask;
  /* 0x01f0 */ class SOS_ResourceGroup* m_ResourceGroup;
  /* 0x01f8 */ unsigned long m_PoolId;
  /* 0x01fc */ enum IMPORTANCE m_Importance;
  /* 0x0200 */ int m_PercQueueAssignmentError;
  /* 0x0204 */ unsigned long m_PostCatchActions;
  /* 0x0208 */ unsigned int m_LastWaitType;
  /* 0x020c */ long Padding_796;
  /* 0x0210 */ class SOS_Task* m_pTask;
  /* 0x0218 */ class SOS_Scheduler* m_pSched;
  /* 0x0220 */ unsigned long m_taskFlags;
  /* 0x0224 */ long Padding_797;
  /* 0x0228 */ class SystemThread* m_pSysThread;
  /* 0x0230 */ enum WORKER_TYPE m_Type;
  /* 0x0234 */ long Padding_798;
  union
  {
    /* 0x0238 */ void* m_FiberContext;
    /* 0x0238 */ void* m_workerEntryPoint /* function */;
  }; /* size: 0x0008 */
  /* 0x0240 */ class NodeAffinity m_affinity;
  /* 0x0250 */ class WorkerTimerRequest m_TimerReq;
  /* 0x0290 */ class SOSQueue<Worker,0>* m_pWorkerQueue;
  /* 0x0298 */ struct SuspendQueueSLock* m_pWorkerQueueLock;
  /* 0x02a0 */ enum WORKER_STATE m_state;
  /* 0x02a4 */ long Padding_799;
  /* 0x02a8 */ class TCallbackList<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> > m_rgCallbackLists[4];
  /* 0x02e8 */ unsigned long m_status;
  /* 0x02ec */ unsigned long m_cbStackSize;
  /* 0x02f0 */ class FPUCache m_FPUCache;
  /* 0x02f4 */ long Padding_800;
  /* 0x02f8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_startQuantum;
  /* 0x0300 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_thiefStartQuantum;
  /* 0x0308 */ unsigned __int64 m_endQuantum;
  /* 0x0310 */ class Worker::ProfilingCPUTicks m_ProfilingCPUTicks;
  /* 0x0390 */ unsigned long m_boostLimit;
  /* 0x0394 */ unsigned long m_RetCode;
  /* 0x0398 */ class SOS_Node* m_pNode;
  /* 0x03a0 */ class IMemObj* m_pMemObj;
  /* 0x03a8 */ __int64 m_cMemPages;
  /* 0x03b0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ticksCPU;
  /* 0x03b8 */ class AggregatedStats* m_pParentStats;
  /* 0x03c0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_maxQuantum;
  /* 0x03c8 */ unsigned __int64 m_spaceId;
  /* 0x03d0 */ char m_chWaitString[30];
  /* 0x03ee */ char Padding_801[2];
  /* 0x03f0 */ class StackFrames<40>* m_pStartStack;
  /* 0x03f8 */ class CThreadTimes m_threadTimes;
  /* 0x0410 */ void* m_se_translator /* function */;
  /* 0x0418 */ class SQLError m_SavedSQLError;
  /* 0x042c */ long Padding_802;
  /* 0x0430 */ class SOS_WaitStats m_waitStats;
}; /* size: 0x0b10 */

struct WaitRow
{
  /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> time;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sigtime;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> maxWaitTime;
  /* 0x0018 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> lastFinished;
  /* 0x0020 */ unsigned __int64 requests;
  /* 0x0028 */ unsigned __int64 completed;
}; /* size: 0x0030 */

class SOS_Scheduler
{
  /* 0x0000 */ long Padding_803[806];
  /* 0x0c98 */ class SEListElem m_link;
  /* 0x0ca8 */ unsigned long m_CPUId;
  /* 0x0cac */ volatile long m_PreemptiveWorkers;
  /* 0x0cb0 */ volatile long m_TaskCount;
  /* 0x0cb4 */ volatile long m_WorkerCount;
  /* 0x0cb8 */ __int64 m_PermanentTasks;
  /* 0x0cc0 */ unsigned __int64 m_QuantumLength;
  /* 0x0cc8 */ unsigned long m_ForcedSwitchOutCount;
  /* 0x0ccc */ volatile long m_NumOfLongSyncIO;
  /* 0x0cd0 */ unsigned long m_id;
  /* 0x0cd4 */ long Padding_804;
  /* 0x0cd8 */ class IMemObj* m_pmo;
  /* 0x0ce0 */ class IMemObj* m_taskMemObj;
  /* 0x0ce8 */ class IMemObj* m_proxyMemObj;
  /* 0x0cf0 */ void* m_UMSEvent;
  /* 0x0cf8 */ void* m_ioEvent;
  /* 0x0d00 */ struct SchedulerSLock m_SpinLock;
  /* 0x0d04 */ int m_fIdle;
  /* 0x0d08 */ class PercentileQueue<Worker,0,64> m_Runnable;
  /* 0x1118 */ class WorkDispatcher m_WorkDispatcher;
  /* 0x1170 */ class SEListSized<SOS_Task,0> m_RunningTasks;
  /* 0x1188 */ class SEList<SOS_Task,0> m_CompletedTasks;
  /* 0x1198 */ struct TaskSLock m_taskQueueLock;
  /* 0x119c */ long Padding_805;
  /* 0x11a0 */ class SOS_Scheduler::Timer m_timer;
  /* 0x11d0 */ struct AbortTaskSLock m_abortQueueLock;
  /* 0x11d4 */ long Padding_806;
  /* 0x11d8 */ class SOSQueue<SOS_Task,320> m_listAbortTasks;
  /* 0x11e8 */ class IOQueue m_IOQueue[2];
  /* 0x1248 */ long Padding_807;
  struct /* bitfield */
  {
    /* 0x124c */ unsigned long m_fShutdown : 1; /* bit position: 0 */
    /* 0x1250 */ unsigned long m_hidden : 1; /* bit position: 1 */
    /* 0x125c */ unsigned long m_Started : 1; /* bit position: 2 */
    /* 0x1254 */ unsigned long m_SingleWorker : 1; /* bit position: 3 */
    /* 0x1258 */ unsigned long m_isHotAdded : 1; /* bit position: 4 */
    /* 0x1248 */ unsigned long m_isAllowReleaseItself : 1; /* bit position: 5 */
  }; /* bitfield */
  /* 0x124c */ long Padding_808[5];
  /* 0x1260 */ volatile int m_offline;
  /* 0x1264 */ int m_WorkerPressurePosted;
  /* 0x1268 */ class Worker* m_pCurrentWorker;
  /* 0x1270 */ class Worker* m_pIdleWorker;
  /* 0x1278 */ class NodeAffinity m_NodeAffinity;
  /* 0x1288 */ unsigned long m_Priority;
  /* 0x128c */ enum WORKER_TYPE m_Type;
  /* 0x1290 */ class Worker* m_pLazyPreemptiveWorker;
  /* 0x1298 */ volatile long m_cLazyPreemptivePasses;
  /* 0x129c */ unsigned long m_cContextSwitches;
  /* 0x12a0 */ unsigned long m_cIdleContextSwitches;
  /* 0x12a4 */ unsigned long m_cPreemptiveSwitches;
  /* 0x12a8 */ unsigned long m_cYields;
  /* 0x12ac */ unsigned long m_cIdleQuantums;
  /* 0x12b0 */ class SOS_Node* m_pNode;
  /* 0x12b8 */ class SchedulerManager* m_pSchedulerMan;
  /* 0x12c0 */ volatile long m_IdealWorkerLimit;
  /* 0x12c4 */ volatile long m_LoadFactor;
  /* 0x12c8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_wakeUpTicks;
  /* 0x12d0 */ volatile long m_WorkersBeingCreated;
  /* 0x12d4 */ long Padding_809;
  /* 0x12d8 */ class SOS_IOCompRequestList m_IOList;
  /* 0x12e8 */ __int64 m_idleBalanceTicks;
  /* 0x12f0 */ unsigned __int64 m_idleConsumedTicks;
  /* 0x12f8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_idleEnqueueTicks;
  /* 0x1300 */ unsigned long m_lastIdlePercentile;
  /* 0x1304 */ int m_isIdleConsumer;
  /* 0x1308 */ long Padding_810[2];
  /* 0x1310 */ class Worker m_idleElem;
  /* 0x1e20 */ struct WaitRow m_WaitStats[1025];
  /* 0xde50 */ volatile long m_StatsBeingUpdated[1025];
  /* 0xee54 */ long Padding_811;
  /* 0xee58 */ class SOS_RingBuffer* m_ringBuffer;
  /* 0xee60 */ struct SchedulerMonitor::SchedStats m_monitorStats;
  /* 0xf018 */ void* m_UMSThread;
  /* 0xf020 */ class Worker* m_NonpreemptiveIdle;
  /* 0xf028 */ unsigned long m_IdleStartTime;
  /* 0xf02c */ long Padding_812;
  /* 0xf030 */ class Worker* m_realUMSWorker;
  /* 0xf038 */ __int64 m_UMSCallbackYield;
  /* 0xf040 */ __int64 m_UMSCallbackBlocked;
  /* 0xf048 */ __int64 m_UMSCallbackInvokations;
  /* 0xf050 */ __int64 m_UMSCallbackInvokationsIdle;
  /* 0xf058 */ __int64 m_UMSCallbackInvokationsFailed;
  /* 0xf060 */ __int64 m_PreviousUMSCallbackInvokations;
  /* 0xf068 */ long Padding_813[2];
  /* 0xf070 */ union _SLIST_HEADER m_detachedUMSList;
  /* 0xf080 */ int m_IsUmsScheduler;
  /* 0xf084 */ long Padding_814;
  /* 0xf088 */ class SOS_RingBuffer* m_ringUMSBuffer;
  /* 0xf090 */ void* m_pUMSList;
}; /* size: 0xf0a0 */

typedef struct _ENUM_SERVICE_STATUSW
{
  /* 0x0000 */ wchar_t* lpServiceName;
  /* 0x0008 */ wchar_t* lpDisplayName;
  /* 0x0010 */ struct _SERVICE_STATUS ServiceStatus;
  /* 0x002c */ long __PADDING__[1];
} ENUM_SERVICE_STATUSW, *PENUM_SERVICE_STATUSW; /* size: 0x0030 */

class XeSqlPkg::hadr_filestream_file_set_eof
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_815[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int file_sizeOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct _SYSTEM_INFO
{
  union
  {
    /* 0x0000 */ unsigned long dwOemId;
    struct
    {
      /* 0x0000 */ unsigned short wProcessorArchitecture;
      /* 0x0002 */ unsigned short wReserved;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long dwPageSize;
  /* 0x0008 */ void* lpMinimumApplicationAddress;
  /* 0x0010 */ void* lpMaximumApplicationAddress;
  /* 0x0018 */ unsigned __int64 dwActiveProcessorMask;
  /* 0x0020 */ unsigned long dwNumberOfProcessors;
  /* 0x0024 */ unsigned long dwProcessorType;
  /* 0x0028 */ unsigned long dwAllocationGranularity;
  /* 0x002c */ unsigned short wProcessorLevel;
  /* 0x002e */ unsigned short wProcessorRevision;
} SYSTEM_INFO, *PSYSTEM_INFO; /* size: 0x0030 */

typedef struct __vc_attributes::versionAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::versionAttribute, *P_vc_attributes::versionAttribute; /* size: 0x0008 */

class SOS_SoftNumaUtil
{
}; /* size: 0x0001 */

struct IWindowForBindingUI
{
}; /* size: 0x0008 */

struct ISupportErrorInfo
{
}; /* size: 0x0008 */

class FreePageElem
{
}; /* size: 0x0010 */

class XeSqlPkg::broker_remote_message_acknowledgement
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_816[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int acknowledgement_typeOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int fragment_numberOffset;
    /* 0x0000 */ const int acknowledgement_fragment_numberOffset;
    /* 0x0000 */ const int message_sequenceOffset;
    /* 0x0000 */ const int acknowlegment_message_sequenceOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int is_honor_broker_priorityOffset;
    /* 0x0000 */ const int conversation_idOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0268 */

typedef struct _TRACE_GUID_REGISTRATION
{
  /* 0x0000 */ const struct _GUID* Guid;
  /* 0x0008 */ void* RegHandle;
} TRACE_GUID_REGISTRATION, *PTRACE_GUID_REGISTRATION; /* size: 0x0010 */

struct IRunningObjectTable
{
}; /* size: 0x0008 */

class SEListSized<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0>
{
  /* 0x0000 */ long Padding_817[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

struct CacheStoreSLock
{
}; /* size: 0x0004 */

class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket
{
  /* 0x0000 */ class SEListSized<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0> m_lst;
  /* 0x0018 */ struct CacheStoreSLock m_slock;
  /* 0x001c */ unsigned short m_historyCount;
  /* 0x001e */ unsigned short m_maxLen;
}; /* size: 0x0020 */

typedef struct __vc_attributes::ptrAttribute
{
} _vc_attributes::ptrAttribute, *P_vc_attributes::ptrAttribute; /* size: 0x0001 */

struct DkParameterMetadata
{
  /* 0x0000 */ const wchar_t* m_keyword;
  /* 0x0008 */ unsigned int m_keywordSize;
  /* 0x000c */ long Padding_818;
  /* 0x0010 */ void* m_action /* function */;
  /* 0x0018 */ unsigned int m_flags;
  /* 0x001c */ int m_position;
  /* 0x0020 */ int m_sqlErrorDescription;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
  /* 0x0000 */ unsigned long TimeDateStamp;
  /* 0x0004 */ unsigned short OffsetModuleName;
  /* 0x0006 */ unsigned short NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR; /* size: 0x0008 */

class SpinlockHolder<34,18,1>;

struct std::output_iterator_tag
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::restrictedAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::restrictedAttribute, *P_vc_attributes::restrictedAttribute; /* size: 0x0008 */

class SEList<TCallback<void,int *,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_currentObject;
  /* 0x0018 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_baseObject;
  /* 0x0020 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0028 */

struct IServerSecurity
{
}; /* size: 0x0008 */

class Spinlock<250,1,1>
{
}; /* size: 0x0004 */

class Spinlock<105,9,1>
{
}; /* size: 0x0004 */

typedef struct _PSFEATURE_CUSTPAPER
{
  /* 0x0000 */ long lOrientation;
  /* 0x0004 */ long lWidth;
  /* 0x0008 */ long lHeight;
  /* 0x000c */ long lWidthOffset;
  /* 0x0010 */ long lHeightOffset;
} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER; /* size: 0x0014 */

class std::istreambuf_iterator<char,std::char_traits<char> >
{
  /* 0x0000 */ class std::basic_streambuf<char,std::char_traits<char> >* _Strbuf;
  /* 0x0008 */ BOOL _Got;
  /* 0x0009 */ char _Val;
}; /* size: 0x0010 */

class SOS_MemoryNodeRingRecord
{
  /* 0x0000 */ long Padding_819[20];
  /* 0x0050 */ unsigned short m_MemoryNodeId;
  /* 0x0052 */ char Padding_820[6];
  /* 0x0058 */ __int64 m_PagesTarget;
  /* 0x0060 */ __int64 m_PagesReserved;
  /* 0x0068 */ __int64 m_PagesCommited;
  /* 0x0070 */ __int64 m_SharedPagesCommited;
  /* 0x0078 */ __int64 m_AwePagesAllocated;
  /* 0x0080 */ __int64 m_PagesAllocated;
}; /* size: 0x0088 */

class SpinlockHolder<23,19,1>;

typedef struct __vc_attributes::sourceAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::sourceAttribute, *P_vc_attributes::sourceAttribute; /* size: 0x0008 */

struct CXFilePageHeader
{
  /* 0x0000 */ unsigned int m_pageCrc;
  /* 0x0004 */ unsigned long m_startXRef;
  /* 0x0008 */ unsigned int m_uncompressedSize;
  /* 0x000c */ unsigned int m_compressedSize;
}; /* size: 0x0010 */

typedef struct __vc_attributes::refAttribute
{
} _vc_attributes::refAttribute, *P_vc_attributes::refAttribute; /* size: 0x0001 */

class SpinlockHolder<303,1,1>;

typedef struct __vc_attributes::customAttribute
{
  /* 0x0000 */ char* value;
} _vc_attributes::customAttribute, *P_vc_attributes::customAttribute; /* size: 0x0008 */

struct std::_Bool_struct
{
  /* 0x0000 */ int _Member;
}; /* size: 0x0004 */

class std::codecvt_base
{
}; /* size: 0x0010 */

union std::_String_val<unsigned short,std::allocator<unsigned short> >::_Bxty
{
  union
  {
    /* 0x0000 */ wchar_t _Buf[8];
    /* 0x0000 */ wchar_t* _Ptr;
    /* 0x0000 */ char _Alias[8];
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

class std::allocator<unsigned short>
{
}; /* size: 0x0001 */

class std::_String_val<unsigned short,std::allocator<unsigned short> >
{
  /* 0x0000 */ union std::_String_val<unsigned short,std::allocator<unsigned short> >::_Bxty _Bx;
  /* 0x0010 */ unsigned __int64 _Mysize;
  /* 0x0018 */ unsigned __int64 _Myres;
  /* 0x0020 */ class std::allocator<unsigned short> _Alval;
}; /* size: 0x0028 */

class IfNullTypeZeroElseOne<void *>
{
}; /* size: 0x0001 */

typedef struct _NETCONNECTINFOSTRUCT
{
  /* 0x0000 */ unsigned long cbStructure;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwSpeed;
  /* 0x000c */ unsigned long dwDelay;
  /* 0x0010 */ unsigned long dwOptDataSize;
} NETCONNECTINFOSTRUCT, *PNETCONNECTINFOSTRUCT; /* size: 0x0014 */

class TSentinel<1130458178,1684366178>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<108,9,1>;

struct IInternetSecurityManager
{
}; /* size: 0x0008 */

class CRTSEHNoTranslatorSetter
{
}; /* size: 0x0008 */

struct tagCBT_CREATEWNDA
{
  /* 0x0000 */ struct tagCREATESTRUCTA* lpcs;
  /* 0x0008 */ struct HWND__* hwndInsertAfter;
}; /* size: 0x0010 */

class SEList<SOS_Node,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SpinlockHolder<55,16,1>;

class SEList<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class Spinlock<202,3,1>
{
}; /* size: 0x0004 */

struct IEnumConnectionPoints
{
}; /* size: 0x0008 */

class DmpPointer<unsigned char>
{
  /* 0x0000 */ unsigned char* m_pRaw;
}; /* size: 0x0008 */

class std::basic_istream<char,std::char_traits<char> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_istream<char,std::char_traits<char> >& _Myistr;
}; /* size: 0x0008 */

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_currentObject;
  /* 0x0018 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_baseObject;
  /* 0x0020 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0028 */

class XeSqlPkg::plan_cache_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_821[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cache_entry_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _EVENT_TRACE_PROPERTIES
{
  /* 0x0000 */ struct _WNODE_HEADER Wnode;
  /* 0x0030 */ unsigned long BufferSize;
  /* 0x0034 */ unsigned long MinimumBuffers;
  /* 0x0038 */ unsigned long MaximumBuffers;
  /* 0x003c */ unsigned long MaximumFileSize;
  /* 0x0040 */ unsigned long LogFileMode;
  /* 0x0044 */ unsigned long FlushTimer;
  /* 0x0048 */ unsigned long EnableFlags;
  /* 0x004c */ long AgeLimit;
  /* 0x0050 */ unsigned long NumberOfBuffers;
  /* 0x0054 */ unsigned long FreeBuffers;
  /* 0x0058 */ unsigned long EventsLost;
  /* 0x005c */ unsigned long BuffersWritten;
  /* 0x0060 */ unsigned long LogBuffersLost;
  /* 0x0064 */ unsigned long RealTimeBuffersLost;
  /* 0x0068 */ void* LoggerThreadId;
  /* 0x0070 */ unsigned long LogFileNameOffset;
  /* 0x0074 */ unsigned long LoggerNameOffset;
} EVENT_TRACE_PROPERTIES, *PEVENT_TRACE_PROPERTIES; /* size: 0x0078 */

typedef struct __vc_attributes::providerAttribute
{
  /* 0x0000 */ const char* name;
  /* 0x0008 */ const char* uuid;
  /* 0x0010 */ int cookies;
  /* 0x0014 */ long __PADDING__[1];
} _vc_attributes::providerAttribute, *P_vc_attributes::providerAttribute; /* size: 0x0018 */

struct BitManipTraits<unsigned int,4>
{
}; /* size: 0x0001 */

typedef struct _GLYPHMETRICS
{
  /* 0x0000 */ unsigned int gmBlackBoxX;
  /* 0x0004 */ unsigned int gmBlackBoxY;
  /* 0x0008 */ struct tagPOINT gmptGlyphOrigin;
  /* 0x0010 */ short gmCellIncX;
  /* 0x0012 */ short gmCellIncY;
} GLYPHMETRICS, *PGLYPHMETRICS; /* size: 0x0014 */

class SpinlockHolder<42,18,1>;

class TSinglyLinkedList<XE_LoadedLibrary>
{
}; /* size: 0x0008 */

typedef struct _Ctypevec
{
  /* 0x0000 */ unsigned long _Hand;
  /* 0x0004 */ unsigned int _Page;
  /* 0x0008 */ const short* _Table;
  /* 0x0010 */ int _Delfl;
  /* 0x0014 */ long __PADDING__[1];
} Ctypevec, *PCtypevec; /* size: 0x0018 */

class std::ctype<unsigned short>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_822[2];
  /* 0x0010 */ struct _Ctypevec _Ctype;
  /* 0x0028 */ struct _Cvtvec _Cvt;
}; /* size: 0x0030 */

class XE_ILiveSessionMetadata
{
  /* 0x0000 */ long Padding_823[2];
  /* 0x0008 */ class XE_LiveSessionMetadata m_metadata;
}; /* size: 0x0010 */

class IfNullTypeZeroElseOne<unsigned __int64>
{
}; /* size: 0x0001 */

class SEListEnum<SOS_Task,320>;

typedef struct __vc_attributes::unhookAttribute
{
  /* 0x0000 */ const char* event;
  /* 0x0008 */ const char* source;
  /* 0x0010 */ const char* handler;
  /* 0x0018 */ const char* receiver;
} _vc_attributes::unhookAttribute, *P_vc_attributes::unhookAttribute; /* size: 0x0020 */

class XE_API
{
  union
  {
    /* 0x0000 */ class XE_OneTimeInit sm_oti;
    /* 0x0000 */ struct XEEngineClientAPI sm_ClientAPI;
    /* 0x0000 */ struct XEEngineServicesAPI sm_ServiceAPI;
    /* 0x0000 */ struct XEEngineRegisterAPI sm_RegistrationAPI;
    /* 0x0000 */ enum XEGetAPIResult sm_GetApiResult;
  }; /* size: 0x01b8 */
}; /* size: 0x0001 */

typedef struct __vc_attributes::atl::db_columnAttribute
{
  /* 0x0000 */ const char* ordinal;
  /* 0x0008 */ const char* dbtype;
  /* 0x0010 */ const char* precision;
  /* 0x0018 */ const char* scale;
  /* 0x0020 */ const char* status;
  /* 0x0028 */ const char* length;
} _vc_attributes::atl::db_columnAttribute, *P_vc_attributes::atl::db_columnAttribute; /* size: 0x0030 */

class AutoSpinlockHolder<323,1,1>;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER PerProcessUserTimeLimit;
  /* 0x0008 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x0010 */ unsigned long LimitFlags;
  /* 0x0014 */ long Padding_824;
  /* 0x0018 */ unsigned __int64 MinimumWorkingSetSize;
  /* 0x0020 */ unsigned __int64 MaximumWorkingSetSize;
  /* 0x0028 */ unsigned long ActiveProcessLimit;
  /* 0x002c */ long Padding_825;
  /* 0x0030 */ unsigned __int64 Affinity;
  /* 0x0038 */ unsigned long PriorityClass;
  /* 0x003c */ unsigned long SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION; /* size: 0x0040 */

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
  /* 0x0000 */ struct _JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
  /* 0x0040 */ struct _IO_COUNTERS IoInfo;
  /* 0x0070 */ unsigned __int64 ProcessMemoryLimit;
  /* 0x0078 */ unsigned __int64 JobMemoryLimit;
  /* 0x0080 */ unsigned __int64 PeakProcessMemoryUsed;
  /* 0x0088 */ unsigned __int64 PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION; /* size: 0x0090 */

struct tagENUMLOGFONTW
{
  /* 0x0000 */ struct tagLOGFONTW elfLogFont;
  /* 0x005c */ wchar_t elfFullName[64];
  /* 0x00dc */ wchar_t elfStyle[32];
}; /* size: 0x011c */

typedef struct __vc_attributes::atl::db_commandAttribute
{
  /* 0x0000 */ const char* command;
  /* 0x0008 */ const char* name;
  /* 0x0010 */ const char* source_name;
  /* 0x0018 */ const char* hresult;
  /* 0x0020 */ const char* bindings;
  /* 0x0028 */ const char* bulk_fetch;
} _vc_attributes::atl::db_commandAttribute, *P_vc_attributes::atl::db_commandAttribute; /* size: 0x0030 */

typedef struct _FLAG_STGMEDIUM
{
  /* 0x0000 */ long ContextFlags;
  /* 0x0004 */ long fPassOwnership;
  /* 0x0008 */ struct tagSTGMEDIUM Stgmed;
} FLAG_STGMEDIUM, *PFLAG_STGMEDIUM; /* size: 0x0020 */

class SpinlockHolder<62,16,1>;

typedef struct __vc_attributes::atl::db_tableAttribute
{
  /* 0x0000 */ const char* table;
  /* 0x0008 */ const char* name;
  /* 0x0010 */ const char* source_name;
  /* 0x0018 */ const char* hresult;
  /* 0x0020 */ const char* bulk_fetch;
} _vc_attributes::atl::db_tableAttribute, *P_vc_attributes::atl::db_tableAttribute; /* size: 0x0028 */

class std::strstreambuf
{
  /* 0x0000 */ long Padding_826[28];
  /* 0x0070 */ int _Minsize;
  /* 0x0074 */ long Padding_827;
  /* 0x0078 */ char* _Pendsave;
  /* 0x0080 */ char* _Seekhigh;
  /* 0x0088 */ int _Strmode;
  /* 0x008c */ long Padding_828;
  /* 0x0090 */ void* _Palloc /* function */;
  /* 0x0098 */ void* _Pfree /* function */;
}; /* size: 0x00a0 */

class std::ostrstream
{
  /* 0x0000 */ long Padding_829[2];
  /* 0x0008 */ class std::strstreambuf _Strbuffer;
}; /* size: 0x0108 */

class SpinlockHolder<86,13,1>;

class std::out_of_range
{
}; /* size: 0x0018 */

class AutoSpinlockHolder<188,3,1>;

struct tagSTGOPTIONS
{
  /* 0x0000 */ unsigned short usVersion;
  /* 0x0002 */ unsigned short reserved;
  /* 0x0004 */ unsigned long ulSectorSize;
  /* 0x0008 */ const wchar_t* pwcsTemplateFile;
}; /* size: 0x0010 */

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
  /* 0x0000 */ void* CompletionKey;
  /* 0x0008 */ void* CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT; /* size: 0x0010 */

class TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>
{
}; /* size: 0x0018 */

typedef struct __vc_attributes::atl::support_error_infoAttribute
{
  /* 0x0000 */ const char* error_interface;
} _vc_attributes::atl::support_error_infoAttribute, *P_vc_attributes::atl::support_error_infoAttribute; /* size: 0x0008 */

class SOS_MemoryBrokerClerkRingRecord
{
  /* 0x0000 */ long Padding_830[4];
  /* 0x0010 */ class MemoryBrokerClerk* m_Clerk;
  /* 0x0018 */ __int64 m_TotalPages;
  /* 0x0020 */ __int64 m_SimulatedPages;
  /* 0x0028 */ double m_SimulationBenefit;
  /* 0x0030 */ double m_InternalBenefit;
  /* 0x0038 */ double m_ExternalBenefit;
  /* 0x0040 */ double m_ValueOfMemory;
  /* 0x0048 */ __int64 m_PeriodicFreedPages;
  /* 0x0050 */ __int64 m_InternalFreedPages;
}; /* size: 0x0058 */

typedef struct __vc_attributes::implementsAttribute
{
  /* 0x0000 */ const char* interfaces;
  /* 0x0008 */ const char* dispinterfaces;
} _vc_attributes::implementsAttribute, *P_vc_attributes::implementsAttribute; /* size: 0x0010 */

struct DiagObjectSLock
{
}; /* size: 0x0004 */

class std::basic_ios<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ long Padding_831[18];
  /* 0x0048 */ class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >* _Mystrbuf;
  /* 0x0050 */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >* _Tiestr;
  /* 0x0058 */ wchar_t _Fillch;
}; /* size: 0x0060 */

typedef struct __vc_attributes::event_sourceAttribute
{
  /* 0x0000 */ enum __vc_attributes::event_sourceAttribute::type_e type;
  /* 0x0004 */ enum __vc_attributes::event_sourceAttribute::optimize_e optimize;
  /* 0x0008 */ BOOL decorate;
  /* 0x0009 */ char __PADDING__[3];
} _vc_attributes::event_sourceAttribute, *P_vc_attributes::event_sourceAttribute; /* size: 0x000c */

class XeSqlPkg::ghost_cleanup_task_process_packet
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_832[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int ghost_typeOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

typedef struct _PROCESS_MITIGATION_DEP_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long Enable : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long DisableAtlThunkEmulation : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ReservedFlags : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned char Permanent;
  /* 0x0005 */ char __PADDING__[3];
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY; /* size: 0x0008 */

struct tagDBCOLUMNACCESS
{
  /* 0x0000 */ void* pData;
  /* 0x0008 */ struct tagDBID columnid;
  /* 0x0028 */ unsigned __int64 cbDataLen;
  /* 0x0030 */ unsigned long dwStatus;
  /* 0x0034 */ long Padding_833;
  /* 0x0038 */ unsigned __int64 cbMaxLen;
  /* 0x0040 */ unsigned __int64 dwReserved;
  /* 0x0048 */ unsigned short wType;
  /* 0x004a */ unsigned char bPrecision;
  /* 0x004b */ unsigned char bScale;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

struct CCompatLevel::ClassName
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::helper_attributes::v1_nameAttribute
{
  /* 0x0000 */ const char* name;
} _vc_attributes::helper_attributes::v1_nameAttribute, *P_vc_attributes::helper_attributes::v1_nameAttribute; /* size: 0x0008 */

class TSQLUtil
{
}; /* size: 0x0001 */

struct FLASHWINFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ long Padding_834;
  /* 0x0008 */ struct HWND__* hwnd;
  /* 0x0010 */ unsigned long dwFlags;
  /* 0x0014 */ unsigned int uCount;
  /* 0x0018 */ unsigned long dwTimeout;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class MutexEnumCreator
{
  /* 0x0000 */ long Padding_835[2];
  /* 0x0008 */ class SOS_Task* m_blockingTask;
}; /* size: 0x0010 */

class XE_AutoRg<XECustomizableAttribute>
{
}; /* size: 0x0008 */

class XE_AutoCustomizableAttributes
{
  /* 0x0000 */ unsigned short m_Count;
  /* 0x0002 */ char Padding_836[6];
  /* 0x0008 */ class XE_AutoRg<XECustomizableAttribute> m_Attributes;
}; /* size: 0x0010 */

class XE_IPackage
{
}; /* size: 0x0008 */

class XE_PackageMetadata
{
  /* 0x0000 */ const struct XEPackageMetadata* const m_pMetadata;
}; /* size: 0x0008 */

class SpinlockHolder<334,0,257>;

typedef struct _WGLSWAP
{
  /* 0x0000 */ struct HDC__* hdc;
  /* 0x0008 */ unsigned int uiFlags;
  /* 0x000c */ long __PADDING__[1];
} WGLSWAP, *PWGLSWAP; /* size: 0x0010 */

struct tagEMREXTFLOODFILL
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _POINTL ptlStart;
  /* 0x0010 */ unsigned long crColor;
  /* 0x0014 */ unsigned long iMode;
}; /* size: 0x0018 */

struct CpuChangeCallbackList
{
}; /* size: 0x0030 */

class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ long Padding_837[2];
  /* 0x0008 */ class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_enumerators;
  /* 0x0028 */ struct TListSLock m_lock;
}; /* size: 0x0030 */

typedef struct __vc_attributes::helpfileAttribute
{
  /* 0x0000 */ const char* filename;
} _vc_attributes::helpfileAttribute, *P_vc_attributes::helpfileAttribute; /* size: 0x0008 */

struct tagEMRSETPIXELV
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _POINTL ptlPixel;
  /* 0x0010 */ unsigned long crColor;
}; /* size: 0x0014 */

class XE_AutoP<XE_FileProcessor>
{
}; /* size: 0x0008 */

class Spinlock<119,8,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<195,3,1>;

typedef struct _LONGDOUBLE
{
  /* 0x0000 */ double x;
} LONGDOUBLE, *PLONGDOUBLE; /* size: 0x0008 */

class AutoSpinlockHolder<140,4,1>;

typedef struct _numberfmtW
{
  /* 0x0000 */ unsigned int NumDigits;
  /* 0x0004 */ unsigned int LeadingZero;
  /* 0x0008 */ unsigned int Grouping;
  /* 0x000c */ long Padding_838;
  /* 0x0010 */ wchar_t* lpDecimalSep;
  /* 0x0018 */ wchar_t* lpThousandSep;
  /* 0x0020 */ unsigned int NegativeOrder;
  /* 0x0024 */ long __PADDING__[1];
} numberfmtW, *PnumberfmtW; /* size: 0x0028 */

class ClockInfo
{
  /* 0x0000 */ long Padding_839[24];
  /* 0x0060 */ unsigned long m_initCost;
  /* 0x0064 */ unsigned long m_maxCost;
}; /* size: 0x0068 */

class SpinlockHolder<240,1,1>;

typedef struct _EVENTLOG_FULL_INFORMATION
{
  /* 0x0000 */ unsigned long dwFull;
} EVENTLOG_FULL_INFORMATION, *PEVENTLOG_FULL_INFORMATION; /* size: 0x0004 */

struct TestTeamExponentialSLock
{
}; /* size: 0x0004 */

typedef struct _CLASSIC_EVENT_ID
{
  /* 0x0000 */ struct _GUID EventGuid;
  /* 0x0010 */ unsigned char Type;
  /* 0x0011 */ unsigned char Reserved[7];
} CLASSIC_EVENT_ID, *PCLASSIC_EVENT_ID; /* size: 0x0018 */

struct PoolData
{
  /* 0x0000 */ unsigned long m_minCpuConfigured;
  /* 0x0004 */ unsigned long m_maxCpuConfigured;
  /* 0x0008 */ unsigned long m_capCpuConfigured;
  /* 0x000c */ unsigned long m_countOfRunnable;
  /* 0x0010 */ unsigned long m_weightOfRunnable;
  /* 0x0014 */ unsigned long m_countOfRunnableGroups;
  /* 0x0018 */ unsigned long m_cpuAllocated;
  /* 0x001c */ int m_violation;
}; /* size: 0x0020 */

class TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> >
{
}; /* size: 0x0001 */

struct XE_LogFileHeader
{
  /* 0x0000 */ unsigned int m_magicBits;
  /* 0x0004 */ unsigned short m_version;
  /* 0x0006 */ unsigned short m_paddedLength;
}; /* size: 0x0008 */

class std::codecvt<unsigned short,char,int>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_840[2];
  /* 0x0010 */ struct _Cvtvec _Cvt;
}; /* size: 0x0018 */

class Spinlock<209,3,1>
{
}; /* size: 0x0004 */

class std::basic_istream<char,std::char_traits<char> >::sentry
{
  /* 0x0000 */ long Padding_841[2];
  /* 0x0008 */ BOOL _Ok;
}; /* size: 0x0010 */

struct AppendOnlyStorageSLock
{
}; /* size: 0x0004 */

struct HRGN__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class Spinlock<46,18,1>
{
}; /* size: 0x0004 */

class SEListEnum<SOS_Task,0>;

typedef struct _SYSTEM_PERFORMANCE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER IdleProcessTime;
  /* 0x0008 */ union _LARGE_INTEGER IoReadTransferCount;
  /* 0x0010 */ union _LARGE_INTEGER IoWriteTransferCount;
  /* 0x0018 */ union _LARGE_INTEGER IoOtherTransferCount;
  /* 0x0020 */ unsigned long IoReadOperationCount;
  /* 0x0024 */ unsigned long IoWriteOperationCount;
  /* 0x0028 */ unsigned long IoOtherOperationCount;
  /* 0x002c */ unsigned long AvailablePages;
  /* 0x0030 */ unsigned long CommittedPages;
  /* 0x0034 */ unsigned long CommitLimit;
  /* 0x0038 */ unsigned long PeakCommitment;
  /* 0x003c */ unsigned long PageFaultCount;
  /* 0x0040 */ unsigned long CopyOnWriteCount;
  /* 0x0044 */ unsigned long TransitionCount;
  /* 0x0048 */ unsigned long CacheTransitionCount;
  /* 0x004c */ unsigned long DemandZeroCount;
  /* 0x0050 */ unsigned long PageReadCount;
  /* 0x0054 */ unsigned long PageReadIoCount;
  /* 0x0058 */ unsigned long CacheReadCount;
  /* 0x005c */ unsigned long CacheIoCount;
  /* 0x0060 */ unsigned long DirtyPagesWriteCount;
  /* 0x0064 */ unsigned long DirtyWriteIoCount;
  /* 0x0068 */ unsigned long MappedPagesWriteCount;
  /* 0x006c */ unsigned long MappedWriteIoCount;
  /* 0x0070 */ unsigned long PagedPoolPages;
  /* 0x0074 */ unsigned long NonPagedPoolPages;
  /* 0x0078 */ unsigned long PagedPoolAllocs;
  /* 0x007c */ unsigned long PagedPoolFrees;
  /* 0x0080 */ unsigned long NonPagedPoolAllocs;
  /* 0x0084 */ unsigned long NonPagedPoolFrees;
  /* 0x0088 */ unsigned long FreeSystemPtes;
  /* 0x008c */ unsigned long ResidentSystemCodePage;
  /* 0x0090 */ unsigned long TotalSystemDriverPages;
  /* 0x0094 */ unsigned long TotalSystemCodePages;
  /* 0x0098 */ unsigned long NonPagedPoolLookasideHits;
  /* 0x009c */ unsigned long PagedPoolLookasideHits;
  /* 0x00a0 */ unsigned long AvailablePagedPoolPages;
  /* 0x00a4 */ unsigned long ResidentSystemCachePage;
  /* 0x00a8 */ unsigned long ResidentPagedPoolPage;
  /* 0x00ac */ unsigned long ResidentSystemDriverPage;
  /* 0x00b0 */ unsigned long CcFastReadNoWait;
  /* 0x00b4 */ unsigned long CcFastReadWait;
  /* 0x00b8 */ unsigned long CcFastReadResourceMiss;
  /* 0x00bc */ unsigned long CcFastReadNotPossible;
  /* 0x00c0 */ unsigned long CcFastMdlReadNoWait;
  /* 0x00c4 */ unsigned long CcFastMdlReadWait;
  /* 0x00c8 */ unsigned long CcFastMdlReadResourceMiss;
  /* 0x00cc */ unsigned long CcFastMdlReadNotPossible;
  /* 0x00d0 */ unsigned long CcMapDataNoWait;
  /* 0x00d4 */ unsigned long CcMapDataWait;
  /* 0x00d8 */ unsigned long CcMapDataNoWaitMiss;
  /* 0x00dc */ unsigned long CcMapDataWaitMiss;
  /* 0x00e0 */ unsigned long CcPinMappedDataCount;
  /* 0x00e4 */ unsigned long CcPinReadNoWait;
  /* 0x00e8 */ unsigned long CcPinReadWait;
  /* 0x00ec */ unsigned long CcPinReadNoWaitMiss;
  /* 0x00f0 */ unsigned long CcPinReadWaitMiss;
  /* 0x00f4 */ unsigned long CcCopyReadNoWait;
  /* 0x00f8 */ unsigned long CcCopyReadWait;
  /* 0x00fc */ unsigned long CcCopyReadNoWaitMiss;
  /* 0x0100 */ unsigned long CcCopyReadWaitMiss;
  /* 0x0104 */ unsigned long CcMdlReadNoWait;
  /* 0x0108 */ unsigned long CcMdlReadWait;
  /* 0x010c */ unsigned long CcMdlReadNoWaitMiss;
  /* 0x0110 */ unsigned long CcMdlReadWaitMiss;
  /* 0x0114 */ unsigned long CcReadAheadIos;
  /* 0x0118 */ unsigned long CcLazyWriteIos;
  /* 0x011c */ unsigned long CcLazyWritePages;
  /* 0x0120 */ unsigned long CcDataFlushes;
  /* 0x0124 */ unsigned long CcDataPages;
  /* 0x0128 */ unsigned long ContextSwitches;
  /* 0x012c */ unsigned long FirstLevelTbFills;
  /* 0x0130 */ unsigned long SecondLevelTbFills;
  /* 0x0134 */ unsigned long SystemCalls;
  /* 0x0138 */ unsigned __int64 CcTotalDirtyPages;
  /* 0x0140 */ unsigned __int64 CcDirtyPageThreshold;
  /* 0x0148 */ __int64 ResidentAvailablePages;
} SYSTEM_PERFORMANCE_INFORMATION, *PSYSTEM_PERFORMANCE_INFORMATION; /* size: 0x0150 */

class XeSosPkg::process_killed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_842[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int exit_codeOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class AutoSpinlockHolder<113,9,1>;

struct std::_Nonscalar_ptr_iterator_tag
{
}; /* size: 0x0001 */

struct ObjectStoreSLock
{
}; /* size: 0x0004 */

class TSinglyLinkedList<SList>
{
}; /* size: 0x0008 */

class SOS_ObjectStore::ObjectSubStore
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 m_MaxNumberOfEntries;
      /* 0x0008 */ unsigned __int64 m_NumberOfEntries;
      /* 0x0010 */ unsigned __int64 m_NumberOfEntriesRemoved;
      /* 0x0018 */ const class SOS_ObjectStore* m_parentStore;
      /* 0x0020 */ struct ObjectStoreSLock m_Lock;
      /* 0x0024 */ long Padding_843;
      /* 0x0028 */ void* m_destroyRoutine /* function */;
      /* 0x0030 */ unsigned __int64 m_NumberOfPinnedEntries;
      /* 0x0038 */ class SOS_RecursiveMutex m_destroyLock;
      /* 0x0078 */ class SListHead m_batchList;
      /* 0x0088 */ unsigned __int64 m_batchCount;
      /* 0x0090 */ class TSinglyLinkedList<SList> m_listOfEntries[64];
      /* 0x0290 */ wchar_t m_subStoreName[64];
    }; /* size: 0x030c */
    /* 0x0000 */ const unsigned __int64 sm_bulkOpBatchSize;
    /* 0x0000 */ const unsigned __int64 sm_poolMoveBatchSize;
  }; /* size: 0x030c */
}; /* size: 0x0310 */

struct tagSOLE_AUTHENTICATION_LIST
{
  /* 0x0000 */ unsigned long cAuthInfo;
  /* 0x0004 */ long Padding_844;
  /* 0x0008 */ struct tagSOLE_AUTHENTICATION_INFO* aAuthInfo;
}; /* size: 0x0010 */

struct SOS_Scheduler::PerfStats
{
  /* 0x0000 */ unsigned long m_contextSwitches;
  /* 0x0004 */ unsigned long m_contextSwitchesIdle;
  /* 0x0008 */ unsigned long m_preemptiveSwitches;
}; /* size: 0x000c */

class StackFramesStore
{
  union
  {
    /* 0x0000 */ const int NUMBERBUCKETS;
    /* 0x0000 */ class SOS_CacheStore* m_pStore;
  }; /* size: 0x0008 */
  /* 0x0008 */ class SOS_NoForceRemoveStoreController* m_StoreControler;
}; /* size: 0x0010 */

class SOS_MemoryBroker
{
  union
  {
    /* 0x0000 */ const long QuantumsToPredictFor;
    /* 0x0000 */ const long QuantumLength;
    struct
    {
      /* 0x0000 */ __int64 m_Previous;
      /* 0x0008 */ __int64 m_TargetAllocations;
      /* 0x0010 */ __int64 m_Rate;
      /* 0x0018 */ __int64 m_Allocations;
      /* 0x0020 */ __int64 m_Predicted;
      /* 0x0028 */ __int64 m_Overall;
      /* 0x0030 */ __int64 m_FutureAllocations;
      /* 0x0038 */ void* m_Notification /* function */;
      /* 0x0040 */ enum MemoryBrokerType m_Type;
      /* 0x0044 */ unsigned long m_PoolId;
      /* 0x0048 */ enum SOS_MemoryBroker::NOTIFICATION m_LastNotification;
      /* 0x004c */ long Padding_845;
      /* 0x0050 */ __int64 m_LiveAllocations;
      /* 0x0058 */ enum SOS_MemoryBroker::BrokerPressureType m_BrokerPressureType;
    }; /* size: 0x0058 */
    /* 0x0000 */ const wchar_t** sm_TypeNames /* zero-length array */;
    /* 0x0000 */ const wchar_t** sm_NotificationNames /* zero-length array */;
  }; /* size: 0x0058 */
}; /* size: 0x0060 */

class SOS_MemoryPool
{
  /* 0x0000 */ int m_Enabled;
  /* 0x0004 */ long Padding_846;
  /* 0x0008 */ __int64 m_PrivatePagesLimit;
  /* 0x0010 */ __int64 m_TotalPagesLimit;
  /* 0x0018 */ __int64 m_PrivatePagesTarget;
  /* 0x0020 */ __int64 m_TotalPagesTarget;
  /* 0x0028 */ __int64 m_Allocations;
  /* 0x0030 */ __int64 m_Predicted;
  /* 0x0038 */ unsigned long m_MetadataID;
  /* 0x003c */ long Padding_847;
  /* 0x0040 */ __int64 m_LastCurrentMemory;
  /* 0x0048 */ unsigned __int64 m_AllocationFailureCount;
  /* 0x0050 */ class OomIndicator m_OomIndicator;
  /* 0x0068 */ class SOS_MemoryBroker m_memoryBrokers[7];
  /* 0x0308 */ unsigned long m_privatePct;
  /* 0x030c */ unsigned long m_totalPct;
  /* 0x0310 */ long Padding_848[12];
  /* 0x0340 */ __int64 m_LiveAllocations;
}; /* size: 0x0380 */

class MemoryPoolManager
{
  union
  {
    struct
    {
      /* 0x0000 */ __int64 m_AccountantForReserved;
      /* 0x0008 */ __int64 m_TotalForReserved;
      /* 0x0010 */ __int64 m_LastCurrentMemory;
      /* 0x0018 */ long Padding_849[10];
      /* 0x0040 */ class SOS_MemoryPool m_memoryPools[64];
      /* 0xe040 */ class SOS_MemoryBroker m_globalBrokers[7];
      /* 0xe2e0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastTime;
      /* 0xe2e8 */ class SOS_Mutex m_adjustmentLock;
      /* 0xe318 */ unsigned __int64 m_enabledPools;
    }; /* size: 0xe2f8 */
    /* 0x0000 */ class MemoryPoolManager sm_manager;
  }; /* size: 0xe340 */
}; /* size: 0xe340 */

struct std::forward_iterator_tag
{
}; /* size: 0x0001 */

class Spinlock<127,7,1>
{
}; /* size: 0x0004 */

class std::_Yarn<char>
{
  /* 0x0000 */ char* _Myptr;
  /* 0x0008 */ char _Nul;
}; /* size: 0x0010 */

struct tagMEASUREITEMSTRUCT
{
  /* 0x0000 */ unsigned int CtlType;
  /* 0x0004 */ unsigned int CtlID;
  /* 0x0008 */ unsigned int itemID;
  /* 0x000c */ unsigned int itemWidth;
  /* 0x0010 */ unsigned int itemHeight;
  /* 0x0014 */ long Padding_850;
  /* 0x0018 */ unsigned __int64 itemData;
}; /* size: 0x0020 */

struct CurSqlSLock
{
}; /* size: 0x0004 */

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
  /* 0x0000 */ unsigned long NumberOfAssignedProcesses;
  /* 0x0004 */ unsigned long NumberOfProcessIdsInList;
  /* 0x0008 */ unsigned __int64 ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST; /* size: 0x0010 */

class SOSQueue<SOS_Task,0>
{
}; /* size: 0x0010 */

struct MatrixDvmWorkItemListSLock
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _RemotableHandle
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ union _RemotableHandle::__MIDL_IWinTypes_0009 u;
} RemotableHandle, *PRemotableHandle; /* size: 0x0008 */

struct tagEMRSETPALETTEENTRIES
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPal;
  /* 0x000c */ unsigned long iStart;
  /* 0x0010 */ unsigned long cEntries;
  /* 0x0014 */ struct tagPALETTEENTRY aPalEntries[1];
}; /* size: 0x0018 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>
{
}; /* size: 0x0001 */

struct IForegroundTransfer
{
}; /* size: 0x0008 */

class Worker::TaskAutoOffFlags
{
  /* 0x0000 */ unsigned long m_flagsToTurnOn;
}; /* size: 0x0004 */

class std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ BOOL _Failed;
  /* 0x0001 */ char Padding_851[7];
  /* 0x0008 */ class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >* _Strbuf;
}; /* size: 0x0010 */

class SOS_HostEnum
{
}; /* size: 0x0028 */

struct tagCURSORSHAPE
{
  /* 0x0000 */ int xHotSpot;
  /* 0x0004 */ int yHotSpot;
  /* 0x0008 */ int cx;
  /* 0x000c */ int cy;
  /* 0x0010 */ int cbWidth;
  /* 0x0014 */ unsigned char Planes;
  /* 0x0015 */ unsigned char BitsPixel;
  /* 0x0016 */ char __PADDING__[2];
}; /* size: 0x0018 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class Spinlock<192,3,1>
{
}; /* size: 0x0004 */

class UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

struct tagEMRSETVIEWPORTORGEX
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _POINTL ptlOrigin;
}; /* size: 0x0010 */

class TCallbackListBase<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

struct std::_Scalar_ptr_iterator_tag
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,unsigned long,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

class SOS_CacheStore
{
}; /* size: 0x0b40 */

struct ISOSHost_OSThreadCreateDestroyCallback
{
}; /* size: 0x0008 */

class TypeListSize<TypeListNode<unsigned __int64,NullType> >
{
}; /* size: 0x0001 */

class CIncPageMgr
{
  /* 0x0000 */ unsigned __int64 m_pageSize;
  /* 0x0008 */ class IMemObj* m_pmoOwner;
  /* 0x0010 */ class CIncInfo* m_piiPagePtr;
  /* 0x0018 */ void* m_pvReset;
  /* 0x0020 */ void* m_pvMark;
  /* 0x0028 */ __int64 m_cTotalPages;
  /* 0x0030 */ __int64 m_cMultiplePages;
  struct /* bitfield */
  {
    /* 0x0038 */ unsigned int m_pageNeedsZeroing : 1; /* bit position: 0 */
    /* 0x0038 */ unsigned int m_isDebugOn : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x003c */ long Padding_852;
  /* 0x0040 */ class CIncInfo* m_cachedPage;
  /* 0x0048 */ __int64 m_cMaxTotalPages;
}; /* size: 0x0050 */

class CAutoBase<DynInterval *>
{
  /* 0x0000 */ struct DynInterval** m_pt;
}; /* size: 0x0008 */

class Spinlock<228,1,1>
{
}; /* size: 0x0004 */

struct IObjectIdentity
{
}; /* size: 0x0008 */

class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem
{
  /* 0x0000 */ long Padding_853[8];
  /* 0x0020 */ class SOSCallbackEvent* volatile m_pNoUsersEvent;
}; /* size: 0x0028 */

class XE_ITarget
{
}; /* size: 0x0008 */

class Spinlock<73,16,1>
{
}; /* size: 0x0004 */

typedef struct _REMOTE_NAME_INFOW
{
  /* 0x0000 */ wchar_t* lpUniversalName;
  /* 0x0008 */ wchar_t* lpConnectionName;
  /* 0x0010 */ wchar_t* lpRemainingPath;
} REMOTE_NAME_INFOW, *PREMOTE_NAME_INFOW; /* size: 0x0018 */

struct MemoryUtilizationInfo
{
  /* 0x0000 */ unsigned __int64 workingSetKB;
  /* 0x0008 */ unsigned __int64 committedKB;
  /* 0x0010 */ unsigned long utilization;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

class TCallbackList<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

class AutoSpinlockHolder<288,1,1>;

struct SOS_OS::RegistryOSVersion
{
  /* 0x0000 */ wchar_t curVersion[10];
  /* 0x0014 */ wchar_t curBuild[10];
  /* 0x0028 */ wchar_t CSDVersion[20];
}; /* size: 0x0050 */

class Spinlock<49,18,1>
{
}; /* size: 0x0004 */

class CMallocSpy::CDebugData
{
  /* 0x0000 */ class CMallocSpy::CDebugData* m_pddPrev;
  /* 0x0008 */ class CMallocSpy::CDebugData* m_pddNext;
  /* 0x0010 */ unsigned long m_cCall;
  /* 0x0014 */ long Padding_854;
  /* 0x0018 */ unsigned __int64 m_cbSize;
  /* 0x0020 */ const char* m_szFile;
  /* 0x0028 */ short m_sLine;
  /* 0x002a */ unsigned char m_bGuardSeed;
  struct /* bitfield */
  {
    /* 0x002b */ unsigned char m_fReported : 1; /* bit position: 0 */
    /* 0x002b */ unsigned char m_fPinned : 1; /* bit position: 1 */
    /* 0x002b */ unsigned char m_bTag : 6; /* bit position: 2 */
  }; /* bitfield */
  /* 0x002c */ unsigned long m_creationTime;
  /* 0x0030 */ class StackFrames<16>* m_stackTrace;
}; /* size: 0x0040 */

struct tagCBT_CREATEWNDW
{
  /* 0x0000 */ struct tagCREATESTRUCTW* lpcs;
  /* 0x0008 */ struct HWND__* hwndInsertAfter;
}; /* size: 0x0010 */

struct pvalueW
{
  /* 0x0000 */ wchar_t* pv_valuename;
  /* 0x0008 */ int pv_valuelen;
  /* 0x000c */ long Padding_855;
  /* 0x0010 */ void* pv_value_context;
  /* 0x0018 */ unsigned long pv_type;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class SOS_CallProtectorTraitsDefault
{
}; /* size: 0x0001 */

struct tagTTPOLYCURVE
{
  /* 0x0000 */ unsigned short wType;
  /* 0x0002 */ unsigned short cpfx;
  /* 0x0004 */ struct tagPOINTFX apfx[1];
}; /* size: 0x000c */

class Spinlock<51,17,1>
{
}; /* size: 0x0004 */

struct std::iterator_traits<int>
{
}; /* size: 0x0001 */

struct SESList<XEPackage0::XE_LiveWriter::LiveClientEntry,0>
{
  /* 0x0000 */ struct SListBase m_list;
}; /* size: 0x0008 */

struct SESList<XEPackage0::XE_LiveWriter::MetadataBlockEntry,8>
{
  /* 0x0000 */ struct SListBase m_list;
}; /* size: 0x0008 */

class XEPackage0::XE_LiveWriter
{
  /* 0x0000 */ struct XELiveTargetAPI sm_LiveTargetApi;
  /* 0x0008 */ class XE_AutoResource<void *,136> m_lock;
  /* 0x0010 */ struct SESList<XEPackage0::XE_LiveWriter::LiveClientEntry,0> m_liveClients;
  /* 0x0018 */ struct SESList<XEPackage0::XE_LiveWriter::LiveClientEntry,0> m_pendingUnregister;
  /* 0x0020 */ class XE_AutoP<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > > m_pLogWriter;
  /* 0x0028 */ class XE_MetadataTracker m_metadataTracker;
  /* 0x4078 */ struct SESList<XEPackage0::XE_LiveWriter::MetadataBlockEntry,8> m_mdBlockEntries;
}; /* size: 0x4080 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ long Padding_856;
  /* 0x0008 */ char* Buffer;
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR, *PRPC_C_OPT_COOKIE_AUTH_DESCRIPTOR; /* size: 0x0010 */

class AutoCPUId
{
  /* 0x0000 */ unsigned long m_oldCPUId;
  /* 0x0004 */ int m_shouldSwitch;
}; /* size: 0x0008 */

struct tagICONMETRICSW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iHorzSpacing;
  /* 0x0008 */ int iVertSpacing;
  /* 0x000c */ int iTitleWrap;
  /* 0x0010 */ struct tagLOGFONTW lfFont;
}; /* size: 0x006c */

struct RPCStream::CurrentBuffer
{
  /* 0x0000 */ unsigned char* m_Buffer;
  /* 0x0008 */ unsigned __int64 m_Size;
}; /* size: 0x0010 */

class RPCStream
{
  /* 0x0000 */ long Padding_857[2];
  /* 0x0008 */ struct RPCStream::CurrentBuffer m_buffers[2];
  struct
  {
    /* 0x0028 */ unsigned short m_nextFragmentOffset;
    /* 0x002a */ BOOL m_fragmentReadToEnd;
    /* 0x002b */ char __PADDING__[1];
  } /* size: 0x0004 */ m_readBufferFragmentState;
}; /* size: 0x0030 */

class XE_FileReaderDefaultPolicy
{
  /* 0x0000 */ class XE_AutoP<XE_FileSet> m_files;
  /* 0x0008 */ class XE_ILogReadMessageHandler* m_msgHandler;
}; /* size: 0x0010 */

class AlignedSmallPageAllocator::PageInfo
{
  /* 0x0000 */ long Padding_858[4];
  /* 0x0010 */ class SEListElem m_link;
  /* 0x0020 */ unsigned int m_usedBlocksMask;
  /* 0x0024 */ unsigned int m_blockSize;
  /* 0x0028 */ unsigned int m_freeBlocks;
  /* 0x002c */ unsigned int m_maxContigBlocks;
}; /* size: 0x0030 */

struct CSerializeContext<CMemBufFormatter>::CharTypeFormatter;

struct tagRAWINPUTDEVICELIST
{
  /* 0x0000 */ void* hDevice;
  /* 0x0008 */ unsigned long dwType;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct ISWbemRefresher
{
}; /* size: 0x0008 */

typedef struct _SERVICE_START_REASON
{
  /* 0x0000 */ unsigned long dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON; /* size: 0x0004 */

class Spinlock<110,9,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_AUDIT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_AUDIT_ACE, *PSYSTEM_AUDIT_ACE; /* size: 0x000c */

class SOS_Time
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<7,19,1>;

typedef struct _TOKEN_ORIGIN
{
  /* 0x0000 */ struct _LUID OriginatingLogonSession;
} TOKEN_ORIGIN, *PTOKEN_ORIGIN; /* size: 0x0008 */

struct ISOSHost_MemoryClerk
{
}; /* size: 0x0008 */

typedef struct _TAPE_WMI_OPERATIONS
{
  /* 0x0000 */ unsigned long Method;
  /* 0x0004 */ unsigned long DataBufferSize;
  /* 0x0008 */ void* DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS; /* size: 0x0010 */

class SpinlockHolder<247,1,1>
{
  /* 0x0000 */ class Spinlock<247,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

struct std::is_error_code_enum<SOS_Scheduler *>
{
}; /* size: 0x0001 */

typedef struct _SECURITY_QUALITY_OF_SERVICE
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0008 */ unsigned char ContextTrackingMode;
  /* 0x0009 */ unsigned char EffectiveOnly;
  /* 0x000a */ char __PADDING__[2];
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE; /* size: 0x000c */

class AutoSpinlockHolder<162,3,1>;

typedef struct _TRACE_PROVIDER_INSTANCE_INFO
{
  /* 0x0000 */ unsigned long NextOffset;
  /* 0x0004 */ unsigned long EnableCount;
  /* 0x0008 */ unsigned long Pid;
  /* 0x000c */ unsigned long Flags;
} TRACE_PROVIDER_INSTANCE_INFO, *PTRACE_PROVIDER_INSTANCE_INFO; /* size: 0x0010 */

typedef struct _wireSAFEARRAY_UNION
{
  /* 0x0000 */ unsigned long sfType;
  /* 0x0004 */ long Padding_859;
  /* 0x0008 */ union _wireSAFEARRAY_UNION::__MIDL_IOleAutomationTypes_0001 u;
} wireSAFEARRAY_UNION, *PwireSAFEARRAY_UNION; /* size: 0x0028 */

struct IndexCreateSLock
{
}; /* size: 0x0004 */

struct ISOSHost_CacheStore
{
}; /* size: 0x0008 */

typedef struct _PROCESS_BASIC_INFORMATION
{
  /* 0x0000 */ long ExitStatus;
  /* 0x0004 */ long Padding_860;
  /* 0x0008 */ struct _PEB* PebBaseAddress;
  /* 0x0010 */ unsigned __int64 AffinityMask;
  /* 0x0018 */ long BasePriority;
  /* 0x001c */ long Padding_861;
  /* 0x0020 */ unsigned __int64 UniqueProcessId;
  /* 0x0028 */ unsigned __int64 InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION, *PPROCESS_BASIC_INFORMATION; /* size: 0x0030 */

typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ struct _PROCESS_BASIC_INFORMATION BasicInfo;
  union
  {
    /* 0x0038 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0038 */ unsigned long IsProtectedProcess : 1; /* bit position: 0 */
      /* 0x0038 */ unsigned long IsWow64Process : 1; /* bit position: 1 */
      /* 0x0038 */ unsigned long IsProcessDeleting : 1; /* bit position: 2 */
      /* 0x0038 */ unsigned long IsCrossSessionCreate : 1; /* bit position: 3 */
      /* 0x0038 */ unsigned long IsFrozen : 1; /* bit position: 4 */
      /* 0x0038 */ unsigned long IsIdleAware : 1; /* bit position: 5 */
      /* 0x0038 */ unsigned long SpareBits : 26; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x003c */ long __PADDING__[1];
} PROCESS_EXTENDED_BASIC_INFORMATION, *PPROCESS_EXTENDED_BASIC_INFORMATION; /* size: 0x0040 */

struct SNINodePendingIOQueueSLock
{
}; /* size: 0x0004 */

class CRTSEHSOSTranslatorSetter
{
}; /* size: 0x0008 */

typedef struct _SCONTEXT_QUEUE
{
  /* 0x0000 */ unsigned long NumberOfObjects;
  /* 0x0004 */ long Padding_862;
  /* 0x0008 */ struct
  {
    /* 0x0008 */ void* pad[2];
    /* 0x0018 */ void* userContext;
  } /* size: 0x0018 */** ArrayOfObjects;
} SCONTEXT_QUEUE, *PSCONTEXT_QUEUE; /* size: 0x0010 */

class SQLMemoryReportWriter
{
}; /* size: 0x0008 */

class SOS_InterlockedList<SOS_MemoryFragmentDescriptor,0>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc
{
  /* 0x0000 */ class SOS_InterlockedList<SOS_MemoryFragmentDescriptor,0> m_freeBlocks;
  /* 0x0010 */ struct _SINGLE_LIST_ENTRY m_next;
  /* 0x0018 */ unsigned char* m_unallocated;
  /* 0x0020 */ unsigned __int64 m_nextPageOnNode;
  /* 0x0028 */ int m_FreeBlockCount;
  /* 0x002c */ unsigned short m_NumaNodeId;
  /* 0x002e */ char Padding_863[2];
  /* 0x0030 */ enum DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc::PageDescState m_state;
  /* 0x0034 */ long __PADDING__[3];
}; /* size: 0x0040 */

class GroupList
{
}; /* size: 0x0018 */

struct XETargetStatus
{
  /* 0x0000 */ unsigned __int64 m_invocationCount;
  /* 0x0008 */ unsigned __int64 m_accumulatedTicks;
}; /* size: 0x0010 */

typedef struct _EXCEPTION_RECORD32
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ unsigned long ExceptionRecord;
  /* 0x000c */ unsigned long ExceptionAddress;
  /* 0x0010 */ unsigned long NumberParameters;
  /* 0x0014 */ unsigned long ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32; /* size: 0x0050 */

class TListElem<TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock> >
{
  /* 0x0000 */ long Padding_864[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_865;
  /* 0x0018 */ class SchedulerManagerList* m_pList;
}; /* size: 0x0020 */

typedef struct _cpinfo
{
  /* 0x0000 */ unsigned int MaxCharSize;
  /* 0x0004 */ unsigned char DefaultChar[2];
  /* 0x0006 */ unsigned char LeadByte[12];
  /* 0x0012 */ char __PADDING__[2];
} cpinfo, *Pcpinfo; /* size: 0x0014 */

class SpinlockHolder<48,18,1>;

typedef struct __vc_attributes::inAttribute
{
} _vc_attributes::inAttribute, *P_vc_attributes::inAttribute; /* size: 0x0001 */

class XE_AutoRg<char>
{
}; /* size: 0x0008 */

struct tagCOMPAREITEMSTRUCT
{
  /* 0x0000 */ unsigned int CtlType;
  /* 0x0004 */ unsigned int CtlID;
  /* 0x0008 */ struct HWND__* hwndItem;
  /* 0x0010 */ unsigned int itemID1;
  /* 0x0014 */ long Padding_866;
  /* 0x0018 */ unsigned __int64 itemData1;
  /* 0x0020 */ unsigned int itemID2;
  /* 0x0024 */ long Padding_867;
  /* 0x0028 */ unsigned __int64 itemData2;
  /* 0x0030 */ unsigned long dwLocaleId;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

class XE_XMLConfigBase
{
  /* 0x0000 */ wchar_t m_sourceFile[260];
  /* 0x0208 */ wchar_t* m_Fragment;
  /* 0x0210 */ class XE_AutoRg<unsigned short> m_errorReason;
}; /* size: 0x0218 */

class XeSqlPkg::memory_manager_stolen_server_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_868[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct IDmpCustomizeCallback
{
}; /* size: 0x0008 */

class XE_FindSessionGuidComparer
{
  /* 0x0000 */ const wchar_t* const m_name;
  /* 0x0008 */ const struct _GUID& m_tag;
}; /* size: 0x0010 */

struct TransportMessageQueuePagesSLock
{
}; /* size: 0x0004 */

struct tagEMRRESTOREDC
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ long iRelative;
}; /* size: 0x000c */

typedef struct _FILE_NOTIFY_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long Action;
  /* 0x0008 */ unsigned long FileNameLength;
  /* 0x000c */ wchar_t FileName[1];
  /* 0x000e */ char __PADDING__[2];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION; /* size: 0x0010 */

typedef struct _TRANSACTION_PROPERTIES_INFORMATION
{
  /* 0x0000 */ unsigned long IsolationLevel;
  /* 0x0004 */ unsigned long IsolationFlags;
  /* 0x0008 */ union _LARGE_INTEGER Timeout;
  /* 0x0010 */ unsigned long Outcome;
  /* 0x0014 */ unsigned long DescriptionLength;
  /* 0x0018 */ wchar_t Description[1];
  /* 0x001a */ char __PADDING__[6];
} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION; /* size: 0x0020 */

typedef struct __vc_attributes::defaultbindAttribute
{
} _vc_attributes::defaultbindAttribute, *P_vc_attributes::defaultbindAttribute; /* size: 0x0001 */

struct std::tr1::add_reference<void volatile >
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::controlAttribute
{
} _vc_attributes::controlAttribute, *P_vc_attributes::controlAttribute; /* size: 0x0001 */

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >& _Myostr;
}; /* size: 0x0008 */

class XeSosPkg::task_aborted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_869[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct __vc_attributes::uuidAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::uuidAttribute, *P_vc_attributes::uuidAttribute; /* size: 0x0008 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class Spinlock<181,3,1>
{
}; /* size: 0x0004 */

typedef struct _s__ThrowInfo
{
  /* 0x0000 */ unsigned int attributes;
  /* 0x0004 */ void* pmfnUnwind /* function */;
  /* 0x000c */ void* pForwardCompat /* function */;
  /* 0x0014 */ const struct _s__CatchableTypeArray* pCatchableTypeArray;
} s__ThrowInfo, *Ps__ThrowInfo; /* size: 0x001c */

struct TClassName<short,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>
{
  /* 0x0000 */ long Padding_870[10];
  /* 0x0028 */ void* m_pfn /* function */;
}; /* size: 0x0030 */

struct std::identity<std::ostrstream>
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::switch_typeAttribute
{
  /* 0x0000 */ const char* switch_type_specifier;
} _vc_attributes::switch_typeAttribute, *P_vc_attributes::switch_typeAttribute; /* size: 0x0008 */

class AutoSpinlockHolder<332,0,0>;

class SEList<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class ISOSHost_OSAffinityChangeCallbackImpl
{
}; /* size: 0x0040 */

class XeSqlPkg::sql_transaction_commit_single_phase
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_871[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int is_delayed_durableOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

struct TestTeamSLock
{
}; /* size: 0x0004 */

class SOSHost_Semaphore
{
  /* 0x0000 */ long Padding_872[8];
  /* 0x0020 */ struct ISOSClient_ResourceInfo* m_resInfo;
}; /* size: 0x0028 */

struct tagEMRMASKBLT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long cxDest;
  /* 0x0024 */ long cyDest;
  /* 0x0028 */ unsigned long dwRop;
  /* 0x002c */ long xSrc;
  /* 0x0030 */ long ySrc;
  /* 0x0034 */ struct tagXFORM xformSrc;
  /* 0x004c */ unsigned long crBkColorSrc;
  /* 0x0050 */ unsigned long iUsageSrc;
  /* 0x0054 */ unsigned long offBmiSrc;
  /* 0x0058 */ unsigned long cbBmiSrc;
  /* 0x005c */ unsigned long offBitsSrc;
  /* 0x0060 */ unsigned long cbBitsSrc;
  /* 0x0064 */ long xMask;
  /* 0x0068 */ long yMask;
  /* 0x006c */ unsigned long iUsageMask;
  /* 0x0070 */ unsigned long offBmiMask;
  /* 0x0074 */ unsigned long cbBmiMask;
  /* 0x0078 */ unsigned long offBitsMask;
  /* 0x007c */ unsigned long cbBitsMask;
}; /* size: 0x0080 */

class AutoSpinlockHolder<138,4,1>;

class UnhandledExceptionFilterProtector
{
}; /* size: 0x0001 */

class Spinlock<203,3,1>
{
}; /* size: 0x0004 */

class SOS_CacheStoreHashBucketUserDataEnum
{
  /* 0x0000 */ class SOS_CacheStore* const m_pCacheStore;
  /* 0x0008 */ void* const m_key;
  /* 0x0010 */ const unsigned int m_hash;
  /* 0x0014 */ long Padding_873;
  /* 0x0018 */ const __int64 m_hashTableId;
  /* 0x0020 */ void* m_prevUserData;
  /* 0x0028 */ struct SOSHOST_CACHESTORE_COOKIE__* m_prevCookie;
  /* 0x0030 */ int m_isCostAffecting;
}; /* size: 0x0038 */

class SEListSized<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0>
{
  /* 0x0000 */ long Padding_874[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket
{
  /* 0x0000 */ class SEListSized<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0> m_lst;
  /* 0x0018 */ struct CacheStoreSLock m_slock;
  /* 0x001c */ unsigned short m_historyCount;
  /* 0x001e */ unsigned short m_maxLen;
}; /* size: 0x0020 */

struct ISurrogate
{
}; /* size: 0x0008 */

struct LogPoolSizePerResourcePoolSLock
{
}; /* size: 0x0004 */

class std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >;

struct tagPROCESSENTRY32W
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long cntUsage;
  /* 0x0008 */ unsigned long th32ProcessID;
  /* 0x000c */ long Padding_875;
  /* 0x0010 */ unsigned __int64 th32DefaultHeapID;
  /* 0x0018 */ unsigned long th32ModuleID;
  /* 0x001c */ unsigned long cntThreads;
  /* 0x0020 */ unsigned long th32ParentProcessID;
  /* 0x0024 */ long pcPriClassBase;
  /* 0x0028 */ unsigned long dwFlags;
  /* 0x002c */ wchar_t szExeFile[260];
  /* 0x0234 */ long __PADDING__[1];
}; /* size: 0x0238 */

class CacheWideStats
{
  union
  {
    /* 0x0000 */ const unsigned long MAX_LOW_USE_COUNT_ARRAY_SIZE;
    /* 0x0000 */ volatile unsigned __int64 m_intervals;
  }; /* size: 0x0008 */
  /* 0x0008 */ volatile unsigned __int64 m_sumInterval;
  /* 0x0010 */ unsigned long m_totalEntriesWithUseCountX[8];
}; /* size: 0x0030 */

typedef struct _POWER_SESSION_RIT_STATE
{
  /* 0x0000 */ unsigned char Active;
  /* 0x0001 */ char Padding_876[3];
  /* 0x0004 */ unsigned long LastInputTime;
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE; /* size: 0x0008 */

struct tagSOUNDSENTRYA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long iFSTextEffect;
  /* 0x000c */ unsigned long iFSTextEffectMSec;
  /* 0x0010 */ unsigned long iFSTextEffectColorBits;
  /* 0x0014 */ unsigned long iFSGrafEffect;
  /* 0x0018 */ unsigned long iFSGrafEffectMSec;
  /* 0x001c */ unsigned long iFSGrafEffectColor;
  /* 0x0020 */ unsigned long iWindowsEffect;
  /* 0x0024 */ unsigned long iWindowsEffectMSec;
  /* 0x0028 */ char* lpszWindowsEffectDLL;
  /* 0x0030 */ unsigned long iWindowsEffectOrdinal;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

struct DynInterval
{
  /* 0x0000 */ class SEListElem link;
  /* 0x0010 */ double end;
  /* 0x0018 */ double sumSize;
  /* 0x0020 */ double max;
  /* 0x0028 */ double numEntries;
  /* 0x0030 */ double sumLastSplit;
  /* 0x0038 */ double numEntriesLastSplit;
}; /* size: 0x0040 */

class CallResultWithoutReturnValue
{
  /* 0x0000 */ enum SOS_CALLRESULT_TYPE m_type;
  union
  {
    /* 0x0004 */ long m_callSQLErrorCode;
    /* 0x0004 */ long m_callSEHExceptionCode;
    /* 0x0004 */ HRESULT m_protectorError;
    /* 0x0004 */ long m_protectorSQLErrorCode;
  }; /* size: 0x0004 */
}; /* size: 0x0008 */

typedef struct _PDH_FMT_COUNTERVALUE_ITEM_A
{
  /* 0x0000 */ char* szName;
  /* 0x0008 */ struct _PDH_FMT_COUNTERVALUE FmtValue;
} PDH_FMT_COUNTERVALUE_ITEM_A, *PPDH_FMT_COUNTERVALUE_ITEM_A; /* size: 0x0018 */

struct tagINTERFACEDATA
{
  /* 0x0000 */ struct tagMETHODDATA* pmethdata;
  /* 0x0008 */ unsigned int cMembers;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

class SystemTimerRequest
{
  /* 0x0000 */ long Padding_877[14];
  /* 0x0038 */ void* m_pfunc /* function */;
  /* 0x0040 */ void* m_pInitFunc /* function */;
  /* 0x0048 */ void* m_pDeleteFunc /* function */;
  /* 0x0050 */ void* m_param;
  /* 0x0058 */ unsigned long m_execFlags;
  /* 0x005c */ unsigned long m_Timeout;
  /* 0x0060 */ class SOS_Task* m_Task;
}; /* size: 0x0068 */

struct tagWNDCLASSEXW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int style;
  /* 0x0008 */ void* lpfnWndProc /* function */;
  /* 0x0010 */ int cbClsExtra;
  /* 0x0014 */ int cbWndExtra;
  /* 0x0018 */ struct HINSTANCE__* hInstance;
  /* 0x0020 */ struct HICON__* hIcon;
  /* 0x0028 */ struct HICON__* hCursor;
  /* 0x0030 */ struct HBRUSH__* hbrBackground;
  /* 0x0038 */ const wchar_t* lpszMenuName;
  /* 0x0040 */ const wchar_t* lpszClassName;
  /* 0x0048 */ struct HICON__* hIconSm;
}; /* size: 0x0050 */

struct ConnectionMgrSLock
{
}; /* size: 0x0004 */

struct IProvideMultipleClassInfo
{
}; /* size: 0x0008 */

struct ResManagerHashSLock
{
}; /* size: 0x0004 */

class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>::Bucket
{
  /* 0x0000 */ class SEListSized<SOS_ResourceGroup,0> m_lst;
  /* 0x0018 */ struct ResManagerHashSLock m_slock;
  /* 0x001c */ unsigned short m_historyCount;
  /* 0x001e */ unsigned short m_maxLen;
}; /* size: 0x0020 */

struct XETargetAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* Init /* function */;
  /* 0x0018 */ void* Finalize /* function */;
  /* 0x0020 */ void* ProcessBuffer /* function */;
  /* 0x0028 */ void* ProcessEventASync /* function */;
  /* 0x0030 */ void* ProcessEventSync /* function */;
  /* 0x0038 */ void* GetSerializedState /* function */;
  /* 0x0040 */ void* GetLastErrorContext /* function */;
  /* 0x0048 */ void* GetPrivateAPI /* function */;
}; /* size: 0x0050 */

class SpinlockHolder<218,2,1>;

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_878;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >* m_pList;
}; /* size: 0x0020 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TSinglyLinkedList<SystemThreadPool::SystemThreadBlock>
{
}; /* size: 0x0008 */

struct XEBuffer
{
  /* 0x0000 */ unsigned short m_version;
  /* 0x0002 */ char Padding_879[6];
  /* 0x0008 */ struct XEBufferHeader* m_pBufferHeader;
  /* 0x0010 */ unsigned int m_allocationLength;
  /* 0x0014 */ long Padding_880;
  /* 0x0018 */ const void* m_data;
  /* 0x0020 */ unsigned int m_length;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

class SpinlockHolder<160,3,1>;

struct ISOSHost_Semaphore
{
}; /* size: 0x0008 */

class TSyncHashTable<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>
{
  /* 0x0000 */ long Padding_881[4];
  /* 0x0010 */ int m_ownsBuckets;
}; /* size: 0x0018 */

class SOS_WaitableAddressManager
{
  /* 0x0000 */ class TSyncHashTable<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash> m_ht;
}; /* size: 0x0018 */

class TCallbackListBase<TCallback<void,int *,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

typedef struct __vc_attributes::appobjectAttribute
{
} _vc_attributes::appobjectAttribute, *P_vc_attributes::appobjectAttribute; /* size: 0x0001 */

struct tagEMRANGLEARC
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _POINTL ptlCenter;
  /* 0x0010 */ unsigned long nRadius;
  /* 0x0014 */ float eStartAngle;
  /* 0x0018 */ float eSweepAngle;
}; /* size: 0x001c */

class Spinlock<50,17,1>
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::optionalAttribute
{
} _vc_attributes::optionalAttribute, *P_vc_attributes::optionalAttribute; /* size: 0x0001 */

struct IProgressNotify
{
}; /* size: 0x0008 */

struct HFONT__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class AutoSpinlockHolder<279,1,1>;

struct tagOIFI
{
  /* 0x0000 */ unsigned int cb;
  /* 0x0004 */ int fMDIApp;
  /* 0x0008 */ struct HWND__* hwndFrame;
  /* 0x0010 */ struct HACCEL__* haccel;
  /* 0x0018 */ unsigned int cAccelEntries;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class AutoSpinlockHolder<147,4,1>;

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<90,12,1>;

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

struct tagEMRTRANSPARENTBLT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long cxDest;
  /* 0x0024 */ long cyDest;
  /* 0x0028 */ unsigned long dwRop;
  /* 0x002c */ long xSrc;
  /* 0x0030 */ long ySrc;
  /* 0x0034 */ struct tagXFORM xformSrc;
  /* 0x004c */ unsigned long crBkColorSrc;
  /* 0x0050 */ unsigned long iUsageSrc;
  /* 0x0054 */ unsigned long offBmiSrc;
  /* 0x0058 */ unsigned long cbBmiSrc;
  /* 0x005c */ unsigned long offBitsSrc;
  /* 0x0060 */ unsigned long cbBitsSrc;
  /* 0x0064 */ long cxSrc;
  /* 0x0068 */ long cySrc;
}; /* size: 0x006c */

struct tagEMRSELECTCLIPPATH
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long iMode;
}; /* size: 0x000c */

class IXmlGraphWriter
{
}; /* size: 0x0008 */

typedef struct __vc_attributes::event_receiverAttribute
{
  /* 0x0000 */ enum __vc_attributes::event_receiverAttribute::type_e type;
  /* 0x0004 */ BOOL layout_dependent;
  /* 0x0005 */ char __PADDING__[3];
} _vc_attributes::event_receiverAttribute, *P_vc_attributes::event_receiverAttribute; /* size: 0x0008 */

struct FCBReplicaSyncSLock
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

typedef struct _TAPE_SET_DRIVE_PARAMETERS
{
  /* 0x0000 */ unsigned char ECC;
  /* 0x0001 */ unsigned char Compression;
  /* 0x0002 */ unsigned char DataPadding;
  /* 0x0003 */ unsigned char ReportSetmarks;
  /* 0x0004 */ unsigned long EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS; /* size: 0x0008 */

struct SOS_WaitStats::WaitStatsPage
{
  /* 0x0000 */ unsigned short m_cUsed;
  /* 0x0002 */ char Padding_882[6];
  /* 0x0008 */ struct SOS_WaitStats::WaitStatsLink m_links[169];
}; /* size: 0x1fb8 */

struct tagCBTACTIVATESTRUCT
{
  /* 0x0000 */ int fMouse;
  /* 0x0004 */ long Padding_883;
  /* 0x0008 */ struct HWND__* hWndActive;
}; /* size: 0x0010 */

class CAutoP<XEPackage0::BucketizingTarget::Entry>
{
}; /* size: 0x0008 */

struct IAuthenticateEx
{
}; /* size: 0x0008 */

class SOS_ResourcePool
{
  /* 0x0000 */ long Padding_884[210];
  /* 0x0348 */ unsigned long m_PoolId;
  /* 0x034c */ struct _SYSTEMTIME m_CreationTime;
  /* 0x035c */ volatile short m_MaxWorkersCurrent;
  /* 0x035e */ char Padding_885[2];
  /* 0x0360 */ volatile long m_WorkersActive;
  /* 0x0364 */ unsigned int m_GroupCount;
  /* 0x0368 */ class SystemAffinity m_poolAffinity;
  /* 0x03e8 */ unsigned long m_flags;
}; /* size: 0x03f0 */

struct HWND__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class Spinlock<316,1,1>
{
}; /* size: 0x0004 */

struct IXMLDocument2
{
}; /* size: 0x0008 */

typedef struct _DWORD_BLOB
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ unsigned long alData[1];
} DWORD_BLOB, *PDWORD_BLOB; /* size: 0x0008 */

struct IEnumSTATPROPSETSTG
{
}; /* size: 0x0008 */

class SpinlockHolder<78,14,1>;

struct _ACTIVATION_CONTEXT;

class SpinlockHolder<241,1,1>;

typedef struct __vc_attributes::odlAttribute
{
} _vc_attributes::odlAttribute, *P_vc_attributes::odlAttribute; /* size: 0x0001 */

class TSimpleHashTable_EntryAccessor<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>
{
  /* 0x0000 */ class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket* const m_pbucket;
  /* 0x0008 */ const unsigned int m_hashValue;
  /* 0x000c */ long Padding_886;
  /* 0x0010 */ void* m_compareRoutine /* function */;
  /* 0x0018 */ unsigned __int64 m_poolMask;
  /* 0x0020 */ unsigned int m_stateMask;
}; /* size: 0x0028 */

struct HPALETTE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class SpinlockHolder<256,1,1>;

struct tagMETHODDATA
{
  /* 0x0000 */ wchar_t* szName;
  /* 0x0008 */ struct tagPARAMDATA* ppdata;
  /* 0x0010 */ long dispid;
  /* 0x0014 */ unsigned int iMeth;
  /* 0x0018 */ enum tagCALLCONV cc;
  /* 0x001c */ unsigned int cArgs;
  /* 0x0020 */ unsigned short wFlags;
  /* 0x0022 */ unsigned short vtReturn;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct tagPARAMDATA
{
  /* 0x0000 */ wchar_t* szName;
  /* 0x0008 */ unsigned short vt;
  /* 0x000a */ char __PADDING__[6];
}; /* size: 0x0010 */

typedef struct _COSERVERINFO
{
  /* 0x0000 */ unsigned long dwReserved1;
  /* 0x0004 */ long Padding_887;
  /* 0x0008 */ wchar_t* pwszName;
  /* 0x0010 */ struct _COAUTHINFO* pAuthInfo;
  /* 0x0018 */ unsigned long dwReserved2;
  /* 0x001c */ long __PADDING__[1];
} COSERVERINFO, *PCOSERVERINFO; /* size: 0x0020 */

class SpinlockHolder<76,15,1>;

struct IBindHost
{
}; /* size: 0x0008 */

typedef struct _MEMORY_BASIC_INFORMATION64
{
  /* 0x0000 */ unsigned __int64 BaseAddress;
  /* 0x0008 */ unsigned __int64 AllocationBase;
  /* 0x0010 */ unsigned long AllocationProtect;
  /* 0x0014 */ unsigned long __alignment1;
  /* 0x0018 */ unsigned __int64 RegionSize;
  /* 0x0020 */ unsigned long State;
  /* 0x0024 */ unsigned long Protect;
  /* 0x0028 */ unsigned long Type;
  /* 0x002c */ unsigned long __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64; /* size: 0x0030 */

class SEList<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class LongTermSchedulerEnum
{
  /* 0x0000 */ long Padding_888[10];
  /* 0x0028 */ class SOS_RWLock* m_savedLock;
  /* 0x0030 */ enum RWLockMode m_savedMode;
}; /* size: 0x0038 */

class NodeMemoryNotification
{
  /* 0x0000 */ long Padding_889[2];
  /* 0x0008 */ class SchedulerManager* m_schedMgr;
  /* 0x0010 */ unsigned long m_lowMemoryCount;
  /* 0x0014 */ long Padding_890;
  /* 0x0018 */ class LongTermSchedulerEnum m_nextSchedToShrink;
}; /* size: 0x0050 */

typedef struct __vc_attributes::defaultcollelemAttribute
{
} _vc_attributes::defaultcollelemAttribute, *P_vc_attributes::defaultcollelemAttribute; /* size: 0x0001 */

typedef struct _SE_ACCESS_REPLY
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long ResultListCount;
  /* 0x0008 */ unsigned long* GrantedAccess;
  /* 0x0010 */ unsigned long* AccessStatus;
  /* 0x0018 */ struct _ACCESS_REASONS* AccessReason;
  /* 0x0020 */ struct _PRIVILEGE_SET** Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY; /* size: 0x0028 */

struct XE_LogBufferPosition
{
  /* 0x0000 */ const wchar_t* m_path;
  /* 0x0008 */ class XE_EventLocation m_Location;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

class CAutoTraceLock
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::helpstringAttribute
{
  /* 0x0000 */ const char* help_text_string;
} _vc_attributes::helpstringAttribute, *P_vc_attributes::helpstringAttribute; /* size: 0x0008 */

class SOS_TRingBufferRecordEnum<SOS_MemoryNodeRingRecord>;

typedef struct _SYSTEM_ALARM_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE; /* size: 0x0030 */

struct IWbemTransport
{
}; /* size: 0x0008 */

typedef struct _FULL_PTR_XLAT_TABLES
{
  /* 0x0000 */ void* RefIdToPointer;
  /* 0x0008 */ void* PointerToRefId;
  /* 0x0010 */ unsigned long NextRefId;
  /* 0x0014 */ enum XLAT_SIDE XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES; /* size: 0x0018 */

struct SNISLock
{
}; /* size: 0x0004 */

struct PPM_WMI_PERF_STATES_EX
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long MaxFrequency;
  /* 0x0008 */ unsigned long CurrentState;
  /* 0x000c */ unsigned long MaxPerfState;
  /* 0x0010 */ unsigned long MinPerfState;
  /* 0x0014 */ unsigned long LowestPerfState;
  /* 0x0018 */ unsigned long ThermalConstraint;
  /* 0x001c */ unsigned char BusyAdjThreshold;
  /* 0x001d */ unsigned char PolicyType;
  /* 0x001e */ unsigned char Type;
  /* 0x001f */ unsigned char Reserved;
  /* 0x0020 */ unsigned long TimerInterval;
  /* 0x0024 */ long Padding_891;
  /* 0x0028 */ void* TargetProcessors;
  /* 0x0030 */ unsigned long PStateHandler;
  /* 0x0034 */ unsigned long PStateContext;
  /* 0x0038 */ unsigned long TStateHandler;
  /* 0x003c */ unsigned long TStateContext;
  /* 0x0040 */ unsigned long FeedbackHandler;
  /* 0x0044 */ unsigned long Reserved1;
  /* 0x0048 */ unsigned __int64 Reserved2;
  /* 0x0050 */ struct PPM_WMI_PERF_STATE State[1];
}; /* size: 0x0090 */

class TCallbackListBase<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType> >
{
}; /* size: 0x0030 */

struct IBindStatusCallback
{
}; /* size: 0x0008 */

class XeSqlPkg::hadr_transport_replica_before_build_replica_response_processing_on_primary
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_892[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int result_of_build_replica_operationOffset;
    /* 0x0000 */ const int partition_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int db_guidOffset;
    /* 0x0000 */ const int db_nameOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class Spinlock<204,3,1>
{
}; /* size: 0x0004 */

struct RWSLock
{
}; /* size: 0x0004 */

class SEList<SOS_RWLock::RWLockWaiter,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SOS_RWLock
{
  /* 0x0000 */ struct RWSLock m_lock;
  /* 0x0004 */ long Padding_893;
  /* 0x0008 */ class SEList<SOS_RWLock::RWLockWaiter,0> m_waiters;
  /* 0x0018 */ unsigned long m_currentReaders;
  /* 0x001c */ unsigned long m_waitingWriters;
  /* 0x0020 */ enum RWLockMode m_mode;
  /* 0x0024 */ long Padding_894;
  /* 0x0028 */ const class Worker* m_pExclusiveOwner;
}; /* size: 0x0030 */

typedef struct _GROUP_INFO_3
{
  /* 0x0000 */ wchar_t* grpi3_name;
  /* 0x0008 */ wchar_t* grpi3_comment;
  /* 0x0010 */ void* grpi3_group_sid;
  /* 0x0018 */ unsigned long grpi3_attributes;
  /* 0x001c */ long __PADDING__[1];
} GROUP_INFO_3, *PGROUP_INFO_3; /* size: 0x0020 */

struct XE_TypeTraits<XEPredicateSource>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _currencyfmtW
{
  /* 0x0000 */ unsigned int NumDigits;
  /* 0x0004 */ unsigned int LeadingZero;
  /* 0x0008 */ unsigned int Grouping;
  /* 0x000c */ long Padding_895;
  /* 0x0010 */ wchar_t* lpDecimalSep;
  /* 0x0018 */ wchar_t* lpThousandSep;
  /* 0x0020 */ unsigned int NegativeOrder;
  /* 0x0024 */ unsigned int PositiveOrder;
  /* 0x0028 */ wchar_t* lpCurrencySymbol;
} currencyfmtW, *PcurrencyfmtW; /* size: 0x0030 */

struct tagEMREXTCREATEFONTINDIRECTW
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihFont;
  /* 0x000c */ struct tagEXTLOGFONTW elfw;
}; /* size: 0x014c */

struct tagEMREXTESCAPE
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ int iEscape;
  /* 0x000c */ int cbEscData;
  /* 0x0010 */ unsigned char EscData[1];
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

class SpinlockHolder<46,18,1>;

class SOS_GenericDescriptor
{
  /* 0x0000 */ void* m_UserData;
  /* 0x0008 */ void* m_CacheKey;
}; /* size: 0x0010 */

struct ISOSHostPrev1
{
}; /* size: 0x0008 */

class Spinlock<40,18,1>
{
}; /* size: 0x0004 */

struct tagRPC_CALL_ATTRIBUTES_V1_A
{
  /* 0x0000 */ unsigned int Version;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long ServerPrincipalNameBufferLength;
  /* 0x000c */ long Padding_896;
  /* 0x0010 */ unsigned char* ServerPrincipalName;
  /* 0x0018 */ unsigned long ClientPrincipalNameBufferLength;
  /* 0x001c */ long Padding_897;
  /* 0x0020 */ unsigned char* ClientPrincipalName;
  /* 0x0028 */ unsigned long AuthenticationLevel;
  /* 0x002c */ unsigned long AuthenticationService;
  /* 0x0030 */ int NullSession;
  /* 0x0034 */ long __PADDING__[1];
}; /* size: 0x0038 */

struct PPM_PERFSTATE_DOMAIN_EVENT
{
  /* 0x0000 */ unsigned long State;
  /* 0x0004 */ unsigned long Latency;
  /* 0x0008 */ unsigned long Speed;
  /* 0x000c */ long Padding_898;
  /* 0x0010 */ unsigned __int64 Processors;
}; /* size: 0x0018 */

struct IMAGE_LOAD_CONFIG_DIRECTORY32
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long GlobalFlagsClear;
  /* 0x0010 */ unsigned long GlobalFlagsSet;
  /* 0x0014 */ unsigned long CriticalSectionDefaultTimeout;
  /* 0x0018 */ unsigned long DeCommitFreeBlockThreshold;
  /* 0x001c */ unsigned long DeCommitTotalFreeThreshold;
  /* 0x0020 */ unsigned long LockPrefixTable;
  /* 0x0024 */ unsigned long MaximumAllocationSize;
  /* 0x0028 */ unsigned long VirtualMemoryThreshold;
  /* 0x002c */ unsigned long ProcessHeapFlags;
  /* 0x0030 */ unsigned long ProcessAffinityMask;
  /* 0x0034 */ unsigned short CSDVersion;
  /* 0x0036 */ unsigned short Reserved1;
  /* 0x0038 */ unsigned long EditList;
  /* 0x003c */ unsigned long SecurityCookie;
  /* 0x0040 */ unsigned long SEHandlerTable;
  /* 0x0044 */ unsigned long SEHandlerCount;
}; /* size: 0x0048 */

struct tagREGISTERWORDW
{
  /* 0x0000 */ wchar_t* lpReading;
  /* 0x0008 */ wchar_t* lpWord;
}; /* size: 0x0010 */

typedef struct _KCRM_MARSHAL_HEADER
{
  /* 0x0000 */ unsigned long VersionMajor;
  /* 0x0004 */ unsigned long VersionMinor;
  /* 0x0008 */ unsigned long NumProtocols;
  /* 0x000c */ unsigned long Unused;
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER; /* size: 0x0010 */

class AutoSpinlockHolder<193,3,1>;

struct XE_FileSetMemoryMap::Coordinate
{
  /* 0x0000 */ const wchar_t* m_path;
  /* 0x0008 */ unsigned int m_fileIndex;
  /* 0x000c */ long Padding_899;
  /* 0x0010 */ unsigned __int64 m_pathOffset;
}; /* size: 0x0018 */

struct tagPOLYTEXTA
{
  /* 0x0000 */ int x;
  /* 0x0004 */ int y;
  /* 0x0008 */ unsigned int n;
  /* 0x000c */ long Padding_900;
  /* 0x0010 */ const char* lpstr;
  /* 0x0018 */ unsigned int uiFlags;
  /* 0x001c */ struct tagRECT rcl;
  /* 0x002c */ long Padding_901;
  /* 0x0030 */ int* pdx;
}; /* size: 0x0038 */

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION
{
  /* 0x0000 */ struct _GUID TmIdentity;
  /* 0x0010 */ union _LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION; /* size: 0x0018 */

struct tagMINMAXINFO
{
  /* 0x0000 */ struct tagPOINT ptReserved;
  /* 0x0008 */ struct tagPOINT ptMaxSize;
  /* 0x0010 */ struct tagPOINT ptMaxPosition;
  /* 0x0018 */ struct tagPOINT ptMinTrackSize;
  /* 0x0020 */ struct tagPOINT ptMaxTrackSize;
}; /* size: 0x0028 */

typedef struct _STARTUPINFOA
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_902;
  /* 0x0008 */ char* lpReserved;
  /* 0x0010 */ char* lpDesktop;
  /* 0x0018 */ char* lpTitle;
  /* 0x0020 */ unsigned long dwX;
  /* 0x0024 */ unsigned long dwY;
  /* 0x0028 */ unsigned long dwXSize;
  /* 0x002c */ unsigned long dwYSize;
  /* 0x0030 */ unsigned long dwXCountChars;
  /* 0x0034 */ unsigned long dwYCountChars;
  /* 0x0038 */ unsigned long dwFillAttribute;
  /* 0x003c */ unsigned long dwFlags;
  /* 0x0040 */ unsigned short wShowWindow;
  /* 0x0042 */ unsigned short cbReserved2;
  /* 0x0044 */ long Padding_903;
  /* 0x0048 */ unsigned char* lpReserved2;
  /* 0x0050 */ void* hStdInput;
  /* 0x0058 */ void* hStdOutput;
  /* 0x0060 */ void* hStdError;
} STARTUPINFOA, *PSTARTUPINFOA; /* size: 0x0068 */

typedef struct _STARTUPINFOEXA
{
  /* 0x0000 */ struct _STARTUPINFOA StartupInfo;
  /* 0x0068 */ struct _PROC_THREAD_ATTRIBUTE_LIST* lpAttributeList;
} STARTUPINFOEXA, *PSTARTUPINFOEXA; /* size: 0x0070 */

class AutoSpinlockHolder<329,1,1>;

struct LockResourceIdSLock
{
}; /* size: 0x0004 */

typedef struct _IMAGE_COFF_SYMBOLS_HEADER
{
  /* 0x0000 */ unsigned long NumberOfSymbols;
  /* 0x0004 */ unsigned long LvaToFirstSymbol;
  /* 0x0008 */ unsigned long NumberOfLinenumbers;
  /* 0x000c */ unsigned long LvaToFirstLinenumber;
  /* 0x0010 */ unsigned long RvaToFirstByteOfCode;
  /* 0x0014 */ unsigned long RvaToLastByteOfCode;
  /* 0x0018 */ unsigned long RvaToFirstByteOfData;
  /* 0x001c */ unsigned long RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER; /* size: 0x0020 */

struct tagEMRSETMAPPERFLAGS
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long dwFlags;
}; /* size: 0x000c */

struct tagDEBUGHOOKINFO
{
  /* 0x0000 */ unsigned long idThread;
  /* 0x0004 */ unsigned long idThreadInstaller;
  /* 0x0008 */ __int64 lParam;
  /* 0x0010 */ unsigned __int64 wParam;
  /* 0x0018 */ int code;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _IMAGE_RELOCATION
{
  union
  {
    /* 0x0000 */ unsigned long VirtualAddress;
    /* 0x0000 */ unsigned long RelocCount;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long SymbolTableIndex;
  /* 0x0008 */ unsigned short Type;
} IMAGE_RELOCATION, *PIMAGE_RELOCATION; /* size: 0x000a */

struct IHttpSecurity
{
}; /* size: 0x0008 */

struct DestroyedTempTablesSLock
{
}; /* size: 0x0004 */

struct NUMPARSE
{
  /* 0x0000 */ int cDig;
  /* 0x0004 */ unsigned long dwInFlags;
  /* 0x0008 */ unsigned long dwOutFlags;
  /* 0x000c */ int cchUsed;
  /* 0x0010 */ int nBaseShift;
  /* 0x0014 */ int nPwr10;
}; /* size: 0x0018 */

class XE_VersionConfig
{
  /* 0x0000 */ const struct XEActionDataDescriptor sm_NULLADD;
}; /* size: 0x0001 */

struct BlockerEnumSLock
{
}; /* size: 0x0004 */

class CAutoRg<unsigned char>
{
}; /* size: 0x0008 */

typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
  /* 0x0000 */ void* pValue;
  /* 0x0008 */ unsigned long ValueLength;
  /* 0x000c */ long __PADDING__[1];
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE; /* size: 0x0010 */

struct tagABORTPATH
{
  /* 0x0000 */ struct tagEMR emr;
}; /* size: 0x0008 */

class SpinlockHolder<31,19,1>;

class XE_AutoEngineMutex
{
  /* 0x0000 */ void* m_mx;
  /* 0x0008 */ int m_entered;
}; /* size: 0x0010 */

struct ICanHandleException
{
}; /* size: 0x0008 */

class AutoSpinlockHolder<235,1,1>;

typedef struct _LDBL12
{
  /* 0x0000 */ unsigned char ld12[12];
} LDBL12, *PLDBL12; /* size: 0x000c */

class Spinlock<117,8,1>
{
}; /* size: 0x0004 */

typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
{
  /* 0x0000 */ unsigned long Name;
  /* 0x0004 */ unsigned short ValueType;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ValueCount;
  union
  {
    union
    {
      /* 0x0010 */ unsigned long pInt64[1];
      /* 0x0010 */ unsigned long pUint64[1];
      /* 0x0010 */ unsigned long ppString[1];
      /* 0x0010 */ unsigned long pFqbn[1];
      /* 0x0010 */ unsigned long pOctetString[1];
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1; /* size: 0x0014 */

struct ISOSHost_RWLock_Prev0
{
}; /* size: 0x0008 */

class CFixedInfo::CFixedSlot;

struct _TP_IO;

struct tagCONTROLINFO
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_904;
  /* 0x0008 */ struct HACCEL__* hAccel;
  /* 0x0010 */ unsigned short cAccel;
  /* 0x0012 */ char Padding_905[2];
  /* 0x0014 */ unsigned long dwFlags;
}; /* size: 0x0018 */

class XeSqlPkg::logout
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_906[140];
      /* 0x0240 */ unsigned char m_buf[43];
    }; /* size: 0x003b */
    /* 0x0000 */ const int is_cachedOffset;
    /* 0x0000 */ const int is_recoveredOffset;
    /* 0x0000 */ const int is_dacOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class AutoSpinlockHolder<203,3,1>;

class SpinlockHolder<311,1,1>;

class NonPreemptiveSetter
{
  /* 0x0000 */ int m_needToSwitchBack;
}; /* size: 0x0004 */

struct HACCEL__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _SYSTEMTIME StandardDate;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _SYSTEMTIME DaylightDate;
  /* 0x00a8 */ long DaylightBias;
  /* 0x00ac */ wchar_t TimeZoneKeyName[128];
  /* 0x01ac */ unsigned char DynamicDaylightTimeDisabled;
  /* 0x01ad */ char __PADDING__[3];
} TIME_DYNAMIC_ZONE_INFORMATION, *PTIME_DYNAMIC_ZONE_INFORMATION; /* size: 0x01b0 */

struct BpWorkfileSLock
{
}; /* size: 0x0004 */

class Spinlock<133,4,1>
{
}; /* size: 0x0004 */

struct std::char_traits<char>
{
}; /* size: 0x0001 */

class SOS_InterlockedList<SOS_MemoryFreeBlock,0>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct tagEMREXTSELECTCLIPRGN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long cbRgnData;
  /* 0x000c */ unsigned long iMode;
  /* 0x0010 */ unsigned char RgnData[1];
  /* 0x0011 */ char __PADDING__[3];
}; /* size: 0x0014 */

class AutoSpinlockHolder<209,3,1>;

class CSqlProfGuard
{
}; /* size: 0x0001 */

struct HGLRC__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _OSVERSIONINFOW
{
  /* 0x0000 */ unsigned long dwOSVersionInfoSize;
  /* 0x0004 */ unsigned long dwMajorVersion;
  /* 0x0008 */ unsigned long dwMinorVersion;
  /* 0x000c */ unsigned long dwBuildNumber;
  /* 0x0010 */ unsigned long dwPlatformId;
  /* 0x0014 */ wchar_t szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW; /* size: 0x0114 */

struct tagUSEROBJECTFLAGS
{
  /* 0x0000 */ int fInherit;
  /* 0x0004 */ int fReserved;
  /* 0x0008 */ unsigned long dwFlags;
}; /* size: 0x000c */

typedef struct _NON_PAGED_DEBUG_INFO
{
  /* 0x0000 */ unsigned short Signature;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned short Machine;
  /* 0x000a */ unsigned short Characteristics;
  /* 0x000c */ unsigned long TimeDateStamp;
  /* 0x0010 */ unsigned long CheckSum;
  /* 0x0014 */ unsigned long SizeOfImage;
  /* 0x0018 */ unsigned __int64 ImageBase;
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO; /* size: 0x0020 */

class TypeListSize<NullType>
{
}; /* size: 0x0001 */

struct LargePageAllocatorSLock
{
}; /* size: 0x0004 */

class SEList<FreePageElem,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class LargePageAllocator
{
  union
  {
    struct
    {
      /* 0x0000 */ volatile __int64 m_NumberOfPages;
      /* 0x0008 */ int m_Enabled;
      /* 0x000c */ long m_NumberOfPagesInUse;
    }; /* size: 0x0010 */
    /* 0x0000 */ unsigned char* sm_perNodePreAllocation[64];
  }; /* size: 0x0200 */
  /* 0x0010 */ unsigned char* m_largeBuffer;
  /* 0x0018 */ unsigned __int64 m_largeBufferSize;
  /* 0x0020 */ struct LargePageAllocatorSLock m_spinlock;
  /* 0x0024 */ long Padding_907;
  /* 0x0028 */ class SEList<FreePageElem,0> m_FreePages;
}; /* size: 0x0038 */

class SOS_Task::Param
{
  /* 0x0000 */ unsigned long m_flags;
  /* 0x0004 */ long Padding_908;
  /* 0x0008 */ void* m_func /* function */;
  /* 0x0010 */ void* m_pParam;
  /* 0x0018 */ class SOS_ResourceGroup* m_pGroup;
  /* 0x0020 */ class SOS_Task* m_pParentTask;
  /* 0x0028 */ unsigned __int64 m_affinity;
  /* 0x0030 */ struct XEActivityId m_parentActivityId;
}; /* size: 0x0048 */

class GroupNumaConfig::LogicalProcessorInfoEnum
{
  /* 0x0000 */ unsigned char* m_rawAlloc;
  /* 0x0008 */ unsigned char* m_rawAllocEnd;
  /* 0x0010 */ struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX* m_current;
}; /* size: 0x0018 */

class AutoXcursionScope
{
  /* 0x0000 */ char m_Name[260];
  /* 0x0104 */ long Padding_909;
  /* 0x0108 */ const char* m_pComponent;
}; /* size: 0x0110 */

class TSimpleHashTable_EntryAccessor<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>
{
  /* 0x0000 */ class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket* const m_pbucket;
  /* 0x0008 */ const unsigned int m_hashValue;
  /* 0x000c */ long Padding_910;
  /* 0x0010 */ void* m_compareRoutine /* function */;
  /* 0x0018 */ unsigned __int64 m_poolMask;
  /* 0x0020 */ unsigned int m_stateMask;
}; /* size: 0x0028 */

struct tagSTICKYKEYS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
}; /* size: 0x0008 */

class Spinlock<246,1,1>
{
}; /* size: 0x0004 */

class StackUsageInfo
{
  /* 0x0000 */ class StackFrames<16>* m_Stack;
  /* 0x0008 */ unsigned long m_Time;
  /* 0x000c */ long Padding_911;
  /* 0x0010 */ class Worker* m_Worker;
}; /* size: 0x0018 */

class ResourceDescriptor
{
  union
  {
    /* 0x0000 */ const unsigned long MAX_KEYVALUES;
    /* 0x0000 */ const unsigned long MAX_OPTVALUES;
    /* 0x0000 */ volatile long m_ActiveUsers;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long m_Type;
  /* 0x0008 */ struct SOSHOST_CACHESTORE_COOKIE__* m_Cookie;
  /* 0x0010 */ unsigned __int64 m_keys[3];
  /* 0x0028 */ unsigned __int64 m_optionalData[2];
  /* 0x0038 */ class StackUsageInfo m_allocatedStack;
  /* 0x0050 */ class StackUsageInfo m_freedStack;
}; /* size: 0x0068 */

typedef struct _tagpropertykey
{
  /* 0x0000 */ struct _GUID fmtid;
  /* 0x0010 */ unsigned long pid;
} tagpropertykey, *Ptagpropertykey; /* size: 0x0014 */

struct std::tr1::_Get_align<char>
{
  /* 0x0000 */ char _Elt0;
  /* 0x0001 */ char _Elt1;
  /* 0x0002 */ char _Elt2;
}; /* size: 0x0003 */

class AutoSpinlockHolder<75,16,1>;

struct DescriptorInfo::UsageInfo
{
  /* 0x0000 */ volatile unsigned long refInfo;
  /* 0x0004 */ volatile unsigned long clockCost;
}; /* size: 0x0008 */

typedef struct _JOBOBJECT_JOBSET_INFORMATION
{
  /* 0x0000 */ unsigned long MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION; /* size: 0x0004 */

struct CloudPartitionUsageSLock
{
}; /* size: 0x0004 */

class TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>
{
}; /* size: 0x0038 */

struct tagRAWINPUT
{
  /* 0x0000 */ struct tagRAWINPUTHEADER header;
  union
  {
    union
    {
      /* 0x0018 */ struct tagRAWMOUSE mouse;
      /* 0x0018 */ struct tagRAWKEYBOARD keyboard;
      /* 0x0018 */ struct tagRAWHID hid;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ data;
}; /* size: 0x0030 */

class SEList<ClockInfo,64>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct tagANIMATIONINFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iMinAnimate;
}; /* size: 0x0008 */

struct _EVENT_RECORD;

class AutoSpinlockHolder<216,2,1>;

typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
  /* 0x0000 */ void* Buffer;
  /* 0x0008 */ unsigned long BufferSize;
  /* 0x000c */ long Padding_912;
  /* 0x0010 */ void* pfnAllocate /* function */;
  /* 0x0018 */ void* pfnFree /* function */;
  /* 0x0020 */ struct IRpcChannelBuffer* pRpcChannelBuffer;
  /* 0x0028 */ unsigned __int64 Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1, *PNDR_USER_MARSHAL_INFO_LEVEL1; /* size: 0x0050 */

typedef struct _NDR_USER_MARSHAL_INFO
{
  /* 0x0000 */ unsigned long InformationLevel;
  /* 0x0004 */ long Padding_913;
  /* 0x0008 */ struct _NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
} NDR_USER_MARSHAL_INFO, *PNDR_USER_MARSHAL_INFO; /* size: 0x0058 */

class ResManagerIOEntity
{
}; /* size: 0x0138 */

class AutoSpinlockHolder<240,1,1>;

typedef struct _QUERY_SERVICE_CONFIGA
{
  /* 0x0000 */ unsigned long dwServiceType;
  /* 0x0004 */ unsigned long dwStartType;
  /* 0x0008 */ unsigned long dwErrorControl;
  /* 0x000c */ long Padding_914;
  /* 0x0010 */ char* lpBinaryPathName;
  /* 0x0018 */ char* lpLoadOrderGroup;
  /* 0x0020 */ unsigned long dwTagId;
  /* 0x0024 */ long Padding_915;
  /* 0x0028 */ char* lpDependencies;
  /* 0x0030 */ char* lpServiceStartName;
  /* 0x0038 */ char* lpDisplayName;
} QUERY_SERVICE_CONFIGA, *PQUERY_SERVICE_CONFIGA; /* size: 0x0040 */

class std::numeric_limits<unsigned int>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class XeSqlPkg::catalog_metadata_cache_entry_pinned
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_916[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ char NameString[1];
  /* 0x0003 */ char __PADDING__[1];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING; /* size: 0x0004 */

class CSlotHdr
{
  union
  {
    /* 0x0000 */ class CSlotGroup* m_psgGroup;
    /* 0x0000 */ class CSlotHdr* m_pshNext;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _FLOAT128
{
  /* 0x0000 */ __int64 LowPart;
  /* 0x0008 */ __int64 HighPart;
} FLOAT128, *PFLOAT128; /* size: 0x0010 */

class TVarPageMgr<0>
{
  union
  {
    struct
    {
      /* 0x0000 */ class IMemObj* m_pmoOwner;
      /* 0x0008 */ class CVariableInfo* m_pviPageList[7];
      /* 0x0040 */ class CVariableInfo* m_maxPageOnList[7];
      /* 0x0078 */ unsigned __int64 m_cbSlotMax;
      /* 0x0080 */ __int64 m_cTotalPages;
      /* 0x0088 */ __int64 m_cMultiplePages;
      /* 0x0090 */ int m_isDebugOn;
      /* 0x0094 */ long Padding_917;
      /* 0x0098 */ __int64 m_cMaxTotalPages;
    }; /* size: 0x009c */
    /* 0x0000 */ const __int64 xsm_cbMemObjPageSize;
    /* 0x0000 */ const __int64 xsm_cbMultiPageThreshold;
    /* 0x0000 */ enum EPageType xsm_cbPageType;
    /* 0x0000 */ enum EPageType xsm_cbPageTypeDebug;
    /* 0x0000 */ const unsigned long xsm_cbMaxAllocSize;
  }; /* size: 0x009c */
}; /* size: 0x00a0 */

typedef struct _LDT_ENTRY
{
  /* 0x0000 */ unsigned short LimitLow;
  /* 0x0002 */ unsigned short BaseLow;
  union
  {
    union
    {
      struct
      {
        /* 0x0004 */ unsigned char BaseMid;
        /* 0x0005 */ unsigned char Flags1;
        /* 0x0006 */ unsigned char Flags2;
        /* 0x0007 */ unsigned char BaseHi;
      } /* size: 0x0004 */ Bytes;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0004 */ unsigned long BaseMid : 8; /* bit position: 0 */
          /* 0x0004 */ unsigned long Type : 5; /* bit position: 8 */
          /* 0x0004 */ unsigned long Dpl : 2; /* bit position: 13 */
          /* 0x0004 */ unsigned long Pres : 1; /* bit position: 15 */
          /* 0x0004 */ unsigned long LimitHi : 4; /* bit position: 16 */
          /* 0x0004 */ unsigned long Sys : 1; /* bit position: 20 */
          /* 0x0004 */ unsigned long Reserved_0 : 1; /* bit position: 21 */
          /* 0x0004 */ unsigned long Default_Big : 1; /* bit position: 22 */
          /* 0x0004 */ unsigned long Granularity : 1; /* bit position: 23 */
          /* 0x0004 */ unsigned long BaseHi : 8; /* bit position: 24 */
        }; /* bitfield */
      } /* size: 0x0004 */ Bits;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ HighWord;
} LDT_ENTRY, *PLDT_ENTRY; /* size: 0x0008 */

class ErrMsg
{
  /* 0x0000 */ const int x_cwchMaxMsgLen;
  /* 0x0004 */ long Padding_918[5];
  /* 0x0018 */ class SEListElem m_link;
  /* 0x0028 */ unsigned long m_brickId;
  /* 0x002c */ short m_level;
  /* 0x002e */ char Padding_919[2];
  /* 0x0030 */ int m_len;
  /* 0x0034 */ wchar_t m_msg[2048];
}; /* size: 0x1038 */

struct tagEMRFILLRGN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cbRgnData;
  /* 0x001c */ unsigned long ihBrush;
  /* 0x0020 */ unsigned char RgnData[1];
  /* 0x0021 */ char __PADDING__[3];
}; /* size: 0x0024 */

typedef struct _SERVICE_NOTIFY_2A
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ long Padding_920;
  /* 0x0008 */ void* pfnNotifyCallback /* function */;
  /* 0x0010 */ void* pContext;
  /* 0x0018 */ unsigned long dwNotificationStatus;
  /* 0x001c */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
  /* 0x0040 */ unsigned long dwNotificationTriggered;
  /* 0x0044 */ long Padding_921;
  /* 0x0048 */ char* pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A; /* size: 0x0050 */

struct MatrixPrismStateSLock
{
}; /* size: 0x0004 */

class IOStats
{
  /* 0x0000 */ unsigned int m_ReadsArrivedThisInterval;
  /* 0x0004 */ volatile long m_ReadsArrived;
  /* 0x0008 */ unsigned int m_ReadsArrivedUptoPreviousInterval;
  /* 0x000c */ unsigned int m_ReadsIssuedThisInterval;
  /* 0x0010 */ volatile long m_ReadsIssued;
  /* 0x0014 */ unsigned int m_ReadsIssuedUptoPreviousInterval;
  /* 0x0018 */ unsigned int m_ReadsCompletedThisInterval;
  /* 0x001c */ volatile long m_ReadsCompleted;
  /* 0x0020 */ unsigned int m_ReadsCompletedUptoPreviousInterval;
  /* 0x0024 */ unsigned int m_ReadsThrottledThisInterval;
  /* 0x0028 */ volatile long m_ReadsThrottled;
  /* 0x002c */ unsigned int m_ReadsThrottledUptoPreviousInterval;
  /* 0x0030 */ double m_AvgReadIOPS;
  /* 0x0038 */ volatile __int64 m_ReadBytes;
  /* 0x0040 */ unsigned __int64 m_ReadBytesUptoPreviousInterval;
  /* 0x0048 */ unsigned __int64 m_ReadBytesThisInterval;
  /* 0x0050 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ReadStallsExclusive;
  /* 0x0058 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ReadStallsInclusive;
  /* 0x0060 */ unsigned int m_WritesArrivedThisInterval;
  /* 0x0064 */ volatile long m_WritesArrived;
  /* 0x0068 */ unsigned int m_WritesArrivedUptoPreviousInterval;
  /* 0x006c */ unsigned int m_WritesIssuedThisInterval;
  /* 0x0070 */ volatile long m_WritesIssued;
  /* 0x0074 */ unsigned int m_WritesIssuedUptoPreviousInterval;
  /* 0x0078 */ unsigned int m_WritesCompletedThisInterval;
  /* 0x007c */ volatile long m_WritesCompleted;
  /* 0x0080 */ unsigned int m_WritesCompletedUptoPreviousInterval;
  /* 0x0084 */ unsigned int m_WritesThrottledThisInterval;
  /* 0x0088 */ volatile long m_WritesThrottled;
  /* 0x008c */ unsigned int m_WritesThrottledUptoPreviousInterval;
  /* 0x0090 */ double m_AvgWriteIOPS;
  /* 0x0098 */ volatile __int64 m_WriteBytes;
  /* 0x00a0 */ unsigned __int64 m_WriteBytesUptoPreviousInterval;
  /* 0x00a8 */ unsigned __int64 m_WriteBytesThisInterval;
  /* 0x00b0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_WriteStallsExclusive;
  /* 0x00b8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_WriteStallsInclusive;
  /* 0x00c0 */ volatile long m_IoCompletionViolations;
  /* 0x00c4 */ volatile long m_IoIssueViolations;
  /* 0x00c8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_IoIssueDelay;
  /* 0x00d0 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_IoIssueAhead;
  /* 0x00d8 */ volatile long m_NumIoIssueDelay;
  /* 0x00dc */ volatile long m_NumIoIssueAhead;
}; /* size: 0x00e0 */

struct HIMCC__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

typedef struct _MEMORY_BASIC_INFORMATION32
{
  /* 0x0000 */ unsigned long BaseAddress;
  /* 0x0004 */ unsigned long AllocationBase;
  /* 0x0008 */ unsigned long AllocationProtect;
  /* 0x000c */ unsigned long RegionSize;
  /* 0x0010 */ unsigned long State;
  /* 0x0014 */ unsigned long Protect;
  /* 0x0018 */ unsigned long Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32; /* size: 0x001c */

class AutoSpinlockHolder<213,2,1>;

typedef struct __type_info_node
{
  /* 0x0000 */ void* _MemPtr;
  /* 0x0008 */ struct __type_info_node* _Next;
} _type_info_node, *P_type_info_node; /* size: 0x0010 */

class SOS_ObjectStore::ObjectClockAlgorithm
{
}; /* size: 0x0128 */

struct IDispatch
{
}; /* size: 0x0008 */

typedef struct _XSTATE_CONTEXT
{
  /* 0x0000 */ unsigned __int64 Mask;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ unsigned long Reserved1;
  /* 0x0010 */ struct _XSAVE_AREA* Area;
  /* 0x0018 */ void* Buffer;
} XSTATE_CONTEXT, *PXSTATE_CONTEXT; /* size: 0x0020 */

struct tagSAFEARRAY
{
  /* 0x0000 */ unsigned short cDims;
  /* 0x0002 */ unsigned short fFeatures;
  /* 0x0004 */ unsigned long cbElements;
  /* 0x0008 */ unsigned long cLocks;
  /* 0x000c */ long Padding_922;
  /* 0x0010 */ void* pvData;
  /* 0x0018 */ struct tagSAFEARRAYBOUND rgsabound[1];
}; /* size: 0x0020 */

class TEnumerator<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >;

class Spinlock<179,3,1>
{
}; /* size: 0x0004 */

class DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::Iterator;

typedef struct _MUILANGUAGES
{
  /* 0x0000 */ unsigned int TotalSize;
  /* 0x0004 */ unsigned short MaxNumLanguages;
  /* 0x0006 */ unsigned short NumLanguages;
  /* 0x0008 */ unsigned short NumInstalledLanguages;
  /* 0x000a */ char Padding_923[6];
  /* 0x0010 */ struct _MUILANGINFO* LangInfos;
} MUILANGUAGES, *PMUILANGUAGES; /* size: 0x0018 */

class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::List
{
}; /* size: 0x0030 */

struct std::is_error_condition_enum<int>
{
}; /* size: 0x0001 */

typedef struct _USER_MARSHAL_CB
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_924;
  /* 0x0008 */ struct _MIDL_STUB_MESSAGE* pStubMsg;
  /* 0x0010 */ const unsigned char* pReserve;
  /* 0x0018 */ unsigned long Signature;
  /* 0x001c */ enum _USER_MARSHAL_CB_TYPE CBType;
  /* 0x0020 */ const unsigned char* pFormat;
  /* 0x0028 */ const unsigned char* pTypeFormat;
} USER_MARSHAL_CB, *PUSER_MARSHAL_CB; /* size: 0x0030 */

struct std::is_error_code_enum<unsigned long>
{
}; /* size: 0x0001 */

struct IAddrTrackingControl
{
}; /* size: 0x0008 */

struct _ACTIVATION_CONTEXT_DATA;

typedef struct _RDR_CALLOUT_STATE
{
  /* 0x0000 */ long LastError;
  /* 0x0004 */ long Padding_925;
  /* 0x0008 */ void* LastEEInfo;
  /* 0x0010 */ enum _RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
  /* 0x0014 */ long Padding_926;
  /* 0x0018 */ unsigned short* ServerName;
  /* 0x0020 */ unsigned short* ServerPort;
  /* 0x0028 */ unsigned short* RemoteUser;
  /* 0x0030 */ unsigned short* AuthType;
  /* 0x0038 */ unsigned char ResourceTypePresent;
  /* 0x0039 */ unsigned char SessionIdPresent;
  /* 0x003a */ unsigned char InterfacePresent;
  /* 0x003b */ char Padding_927;
  /* 0x003c */ struct _GUID ResourceType;
  /* 0x004c */ struct _GUID SessionId;
  /* 0x005c */ struct _RPC_SYNTAX_IDENTIFIER Interface;
  /* 0x0070 */ void* CertContext;
} RDR_CALLOUT_STATE, *PRDR_CALLOUT_STATE; /* size: 0x0078 */

struct ANON_OBJECT_HEADER_V2
{
  /* 0x0000 */ unsigned short Sig1;
  /* 0x0002 */ unsigned short Sig2;
  /* 0x0004 */ unsigned short Version;
  /* 0x0006 */ unsigned short Machine;
  /* 0x0008 */ unsigned long TimeDateStamp;
  /* 0x000c */ struct _GUID ClassID;
  /* 0x001c */ unsigned long SizeOfData;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long MetaDataSize;
  /* 0x0028 */ unsigned long MetaDataOffset;
}; /* size: 0x002c */

class SpinlockHolder<277,1,1>;

typedef struct _TOKEN_OWNER
{
  /* 0x0000 */ void* Owner;
} TOKEN_OWNER, *PTOKEN_OWNER; /* size: 0x0008 */

class SOS_InterlockedList<SOS_ParentBlockDescriptor,0>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc
{
  /* 0x0000 */ class SOS_InterlockedList<SOS_ParentBlockDescriptor,0> m_freeBlocks;
  /* 0x0010 */ struct _SINGLE_LIST_ENTRY m_next;
  /* 0x0018 */ unsigned char* m_unallocated;
  /* 0x0020 */ unsigned __int64 m_nextPageOnNode;
  /* 0x0028 */ int m_FreeBlockCount;
  /* 0x002c */ unsigned short m_NumaNodeId;
  /* 0x002e */ char Padding_928[2];
  /* 0x0030 */ enum DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc::PageDescState m_state;
  /* 0x0034 */ long __PADDING__[3];
}; /* size: 0x0040 */

struct IWaitMultiple
{
}; /* size: 0x0008 */

typedef struct _TAPE_PREPARE
{
  /* 0x0000 */ unsigned long Operation;
  /* 0x0004 */ unsigned char Immediate;
  /* 0x0005 */ char __PADDING__[3];
} TAPE_PREPARE, *PTAPE_PREPARE; /* size: 0x0008 */

typedef struct _IMAGE_FUNCTION_ENTRY64
{
  /* 0x0000 */ unsigned __int64 StartingAddress;
  /* 0x0008 */ unsigned __int64 EndingAddress;
  union
  {
    /* 0x0010 */ unsigned __int64 EndOfPrologue;
    /* 0x0010 */ unsigned __int64 UnwindInfoAddress;
  }; /* size: 0x0008 */
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64; /* size: 0x0018 */

struct IMessageFilter
{
}; /* size: 0x0008 */

class Spinlock<57,16,1>
{
}; /* size: 0x0004 */

struct tagSTYLEBUFA
{
  /* 0x0000 */ unsigned long dwStyle;
  /* 0x0004 */ char szDescription[32];
}; /* size: 0x0024 */

struct tagPARAMDESCEX
{
  /* 0x0000 */ unsigned long cBytes;
  /* 0x0004 */ long Padding_929;
  /* 0x0008 */ struct tagVARIANT varDefaultValue;
}; /* size: 0x0020 */

typedef struct _WORD_BLOB
{
  /* 0x0000 */ unsigned long clSize;
  /* 0x0004 */ unsigned short asData[1];
  /* 0x0006 */ char __PADDING__[2];
} WORD_BLOB, *PWORD_BLOB; /* size: 0x0008 */

class CAutoP<XE_Log>
{
}; /* size: 0x0008 */

struct XchngTraceSLock
{
}; /* size: 0x0004 */

typedef struct _WOW64_CONTEXT
{
  /* 0x0000 */ unsigned long ContextFlags;
  /* 0x0004 */ unsigned long Dr0;
  /* 0x0008 */ unsigned long Dr1;
  /* 0x000c */ unsigned long Dr2;
  /* 0x0010 */ unsigned long Dr3;
  /* 0x0014 */ unsigned long Dr6;
  /* 0x0018 */ unsigned long Dr7;
  /* 0x001c */ struct _WOW64_FLOATING_SAVE_AREA FloatSave;
  /* 0x008c */ unsigned long SegGs;
  /* 0x0090 */ unsigned long SegFs;
  /* 0x0094 */ unsigned long SegEs;
  /* 0x0098 */ unsigned long SegDs;
  /* 0x009c */ unsigned long Edi;
  /* 0x00a0 */ unsigned long Esi;
  /* 0x00a4 */ unsigned long Ebx;
  /* 0x00a8 */ unsigned long Edx;
  /* 0x00ac */ unsigned long Ecx;
  /* 0x00b0 */ unsigned long Eax;
  /* 0x00b4 */ unsigned long Ebp;
  /* 0x00b8 */ unsigned long Eip;
  /* 0x00bc */ unsigned long SegCs;
  /* 0x00c0 */ unsigned long EFlags;
  /* 0x00c4 */ unsigned long Esp;
  /* 0x00c8 */ unsigned long SegSs;
  /* 0x00cc */ unsigned char ExtendedRegisters[512];
} WOW64_CONTEXT, *PWOW64_CONTEXT; /* size: 0x02cc */

struct tagEMRSETVIEWPORTEXTEX
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct tagSIZE szlExtent;
}; /* size: 0x0010 */

struct tagCOMBOBOXINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcItem;
  /* 0x0014 */ struct tagRECT rcButton;
  /* 0x0024 */ unsigned long stateButton;
  /* 0x0028 */ struct HWND__* hwndCombo;
  /* 0x0030 */ struct HWND__* hwndItem;
  /* 0x0038 */ struct HWND__* hwndList;
}; /* size: 0x0040 */

typedef struct _SEC_WINNT_AUTH_IDENTITY_A
{
  /* 0x0000 */ unsigned char* User;
  /* 0x0008 */ unsigned long UserLength;
  /* 0x000c */ long Padding_930;
  /* 0x0010 */ unsigned char* Domain;
  /* 0x0018 */ unsigned long DomainLength;
  /* 0x001c */ long Padding_931;
  /* 0x0020 */ unsigned char* Password;
  /* 0x0028 */ unsigned long PasswordLength;
  /* 0x002c */ unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A; /* size: 0x0030 */

class ISOSHost_NodeAffinityChangeCallbackImpl
{
  /* 0x0000 */ long Padding_932[20];
  /* 0x0050 */ void* m_pIHostCallbackFunc /* function */;
  /* 0x0058 */ void* m_pIHostParam;
}; /* size: 0x0060 */

class Spinlock<120,8,1>
{
}; /* size: 0x0004 */

struct IBlockingLock
{
}; /* size: 0x0008 */

struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::NodePartition
{
  /* 0x0000 */ class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc,16> m_pageBuckets[5];
  /* 0x0050 */ unsigned __int64 m_firstPageOnNode;
  /* 0x0058 */ unsigned __int64 m_pages;
  /* 0x0060 */ unsigned __int64 m_target;
  /* 0x0068 */ int m_pageBeingAdded;
  /* 0x006c */ unsigned int m_firstCpuId;
  /* 0x0070 */ long __PADDING__[4];
}; /* size: 0x0080 */

class XeSqlPkg::full_update_instead_of_partial_update
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_933[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int compile_timeOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef struct _BY_HANDLE_FILE_INFORMATION
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long dwVolumeSerialNumber;
  /* 0x0020 */ unsigned long nFileSizeHigh;
  /* 0x0024 */ unsigned long nFileSizeLow;
  /* 0x0028 */ unsigned long nNumberOfLinks;
  /* 0x002c */ unsigned long nFileIndexHigh;
  /* 0x0030 */ unsigned long nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION; /* size: 0x0034 */

typedef struct _SE_PACKAGE_CAPABILITY_INFO
{
  /* 0x0000 */ unsigned long Remaining;
  /* 0x0004 */ unsigned long PackageGrantedAccess;
  /* 0x0008 */ unsigned long CapabilityGrantedAccess;
  /* 0x000c */ unsigned long UserGroupsRemaining;
  /* 0x0010 */ unsigned char PackagesPresent;
  /* 0x0011 */ unsigned char PackageMatch;
  /* 0x0012 */ unsigned char CapabilityMatch;
  /* 0x0013 */ unsigned char LogPermissiveFailure;
} SE_PACKAGE_CAPABILITY_INFO, *PSE_PACKAGE_CAPABILITY_INFO; /* size: 0x0014 */

struct std::tr1::_Or<0,0>
{
}; /* size: 0x0001 */

struct tagTEXTMETRICW
{
  /* 0x0000 */ long tmHeight;
  /* 0x0004 */ long tmAscent;
  /* 0x0008 */ long tmDescent;
  /* 0x000c */ long tmInternalLeading;
  /* 0x0010 */ long tmExternalLeading;
  /* 0x0014 */ long tmAveCharWidth;
  /* 0x0018 */ long tmMaxCharWidth;
  /* 0x001c */ long tmWeight;
  /* 0x0020 */ long tmOverhang;
  /* 0x0024 */ long tmDigitizedAspectX;
  /* 0x0028 */ long tmDigitizedAspectY;
  /* 0x002c */ wchar_t tmFirstChar;
  /* 0x002e */ wchar_t tmLastChar;
  /* 0x0030 */ wchar_t tmDefaultChar;
  /* 0x0032 */ wchar_t tmBreakChar;
  /* 0x0034 */ unsigned char tmItalic;
  /* 0x0035 */ unsigned char tmUnderlined;
  /* 0x0036 */ unsigned char tmStruckOut;
  /* 0x0037 */ unsigned char tmPitchAndFamily;
  /* 0x0038 */ unsigned char tmCharSet;
  /* 0x0039 */ char __PADDING__[3];
}; /* size: 0x003c */

struct std::tr1::integral_constant<unsigned __int64,0>
{
  /* 0x0000 */ const unsigned __int64 value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

struct WMIREGINFOW
{
  /* 0x0000 */ unsigned long BufferSize;
  /* 0x0004 */ unsigned long NextWmiRegInfo;
  /* 0x0008 */ unsigned long RegistryPath;
  /* 0x000c */ unsigned long MofResourceName;
  /* 0x0010 */ unsigned long GuidCount;
  /* 0x0014 */ long Padding_934;
  /* 0x0018 */ struct WMIREGGUIDW* WmiRegGuid /* zero-length array */;
}; /* size: 0x0018 */

class SEListEnum<MiniSOSThreadResources,0>;

struct SChannelHookCallInfo
{
  /* 0x0000 */ struct _GUID iid;
  /* 0x0010 */ unsigned long cbSize;
  /* 0x0014 */ struct _GUID uCausality;
  /* 0x0024 */ unsigned long dwServerPid;
  /* 0x0028 */ unsigned long iMethod;
  /* 0x002c */ long Padding_935;
  /* 0x0030 */ void* pObject;
}; /* size: 0x0038 */

class Spinlock<304,1,1>
{
}; /* size: 0x0004 */

typedef struct _NT_TIB
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0008 */ void* StackBase;
  /* 0x0010 */ void* StackLimit;
  /* 0x0018 */ void* SubSystemTib;
  union
  {
    /* 0x0020 */ void* FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ void* ArbitraryUserPointer;
  /* 0x0030 */ struct _NT_TIB* Self;
} NT_TIB, *PNT_TIB; /* size: 0x0038 */

typedef struct _tagPROTOCOLDATA
{
  /* 0x0000 */ unsigned long grfFlags;
  /* 0x0004 */ unsigned long dwState;
  /* 0x0008 */ void* pData;
  /* 0x0010 */ unsigned long cbData;
  /* 0x0014 */ long __PADDING__[1];
} tagPROTOCOLDATA, *PtagPROTOCOLDATA; /* size: 0x0018 */

typedef struct _IMAGE_TLS_DIRECTORY64
{
  /* 0x0000 */ unsigned __int64 StartAddressOfRawData;
  /* 0x0008 */ unsigned __int64 EndAddressOfRawData;
  /* 0x0010 */ unsigned __int64 AddressOfIndex;
  /* 0x0018 */ unsigned __int64 AddressOfCallBacks;
  /* 0x0020 */ unsigned long SizeOfZeroFill;
  /* 0x0024 */ unsigned long Characteristics;
} IMAGE_TLS_DIRECTORY64, *PIMAGE_TLS_DIRECTORY64; /* size: 0x0028 */

struct localeinfo_struct
{
  /* 0x0000 */ struct threadlocaleinfostruct* locinfo;
  /* 0x0008 */ struct threadmbcinfostruct* mbcinfo;
}; /* size: 0x0010 */

struct std::tr1::integral_constant<bool,0>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

typedef union __m256
{
  /* 0x0000 */ float m256_f32[8];
} _m256, *P_m256; /* size: 0x0020 */

class TSyncHashTableBase<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>
{
  /* 0x0000 */ class TSyncHashTableBase<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>::Bucket* m_rgbuckets;
  /* 0x0008 */ unsigned int m_bucketCount;
  /* 0x000c */ unsigned int m_mask;
}; /* size: 0x0010 */

struct __lc_time_data;

class XE_TCollection<0,1>
{
  /* 0x0000 */ struct XEObjectCollection* const m_pCollection;
}; /* size: 0x0008 */

typedef struct _PROCESS_MEMORY_COUNTERS_EX
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long PageFaultCount;
  /* 0x0008 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x0010 */ unsigned __int64 WorkingSetSize;
  /* 0x0018 */ unsigned __int64 QuotaPeakPagedPoolUsage;
  /* 0x0020 */ unsigned __int64 QuotaPagedPoolUsage;
  /* 0x0028 */ unsigned __int64 QuotaPeakNonPagedPoolUsage;
  /* 0x0030 */ unsigned __int64 QuotaNonPagedPoolUsage;
  /* 0x0038 */ unsigned __int64 PagefileUsage;
  /* 0x0040 */ unsigned __int64 PeakPagefileUsage;
  /* 0x0048 */ unsigned __int64 PrivateUsage;
} PROCESS_MEMORY_COUNTERS_EX, *PPROCESS_MEMORY_COUNTERS_EX; /* size: 0x0050 */

struct std::tr1::add_rvalue_reference<void volatile >
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::immediatebindAttribute
{
} _vc_attributes::immediatebindAttribute, *P_vc_attributes::immediatebindAttribute; /* size: 0x0001 */

typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW
{
  /* 0x0000 */ wchar_t* pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *PSERVICE_REQUIRED_PRIVILEGES_INFOW; /* size: 0x0008 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>
{
  /* 0x0000 */ long Padding_936[10];
  /* 0x0028 */ void* m_pfn /* function */;
}; /* size: 0x0030 */

typedef struct __vc_attributes::importlibAttribute
{
  /* 0x0000 */ const char* tlb_file;
} _vc_attributes::importlibAttribute, *P_vc_attributes::importlibAttribute; /* size: 0x0008 */

struct IConnectionPoint
{
}; /* size: 0x0008 */

struct tagEMRLINETO
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _POINTL ptl;
}; /* size: 0x0010 */

class CAutoInAssert
{
  union
  {
    /* 0x0000 */ int sm_isInAssert;
    /* 0x0000 */ int m_isTaskAvailable;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

class XE_MemoryStream
{
  /* 0x0000 */ long Padding_937[2];
  /* 0x0008 */ unsigned int m_FragmentSize;
  /* 0x000c */ long Padding_938;
  /* 0x0010 */ unsigned char* m_memory;
  /* 0x0018 */ unsigned int m_length;
  /* 0x001c */ unsigned int m_curOffset;
}; /* size: 0x0020 */

struct tagRemBRUSH
{
  /* 0x0000 */ unsigned long cbData;
  /* 0x0004 */ unsigned char data[1];
  /* 0x0005 */ char __PADDING__[3];
}; /* size: 0x0008 */

class DbgDataBuff
{
  /* 0x0000 */ long Padding_939[40];
  /* 0x00a0 */ char m_rgszBuf[256];
}; /* size: 0x01a0 */

class CacheEvictionAlgorithmCommon<CacheProbabilisticAlgorithm>
{
  /* 0x0000 */ class SOS_StoreAndClockAlgorithmControlInterface* m_UserControlInterface;
}; /* size: 0x0008 */

class ISOSHost_TaskImpl
{
}; /* size: 0x03d8 */

class XeSqlPkg::catalog_metadata_cache_entry_unpinned
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_940[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XE_ActionForwarder
{
  /* 0x0000 */ void* m_pfnCompletionRoutine /* function */;
  /* 0x0008 */ void* m_cookie;
  /* 0x0010 */ const struct XECollectedEvent* m_pCE;
  /* 0x0018 */ const struct XEAction& m_action;
}; /* size: 0x0020 */

struct tagKBDLLHOOKSTRUCT
{
  /* 0x0000 */ unsigned long vkCode;
  /* 0x0004 */ unsigned long scanCode;
  /* 0x0008 */ unsigned long flags;
  /* 0x000c */ unsigned long time;
  /* 0x0010 */ unsigned __int64 dwExtraInfo;
}; /* size: 0x0018 */

struct tagRPC_EXTENDED_ERROR_INFO
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_941;
  /* 0x0008 */ wchar_t* ComputerName;
  /* 0x0010 */ unsigned long ProcessID;
  union
  {
    union
    {
      /* 0x0014 */ struct _SYSTEMTIME SystemTime;
      /* 0x0014 */ struct _FILETIME FileTime;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
  /* 0x0024 */ unsigned long GeneratingComponent;
  /* 0x0028 */ unsigned long Status;
  /* 0x002c */ unsigned short DetectionLocation;
  /* 0x002e */ unsigned short Flags;
  /* 0x0030 */ int NumberOfParameters;
  /* 0x0034 */ long Padding_942;
  /* 0x0038 */ struct tagRPC_EE_INFO_PARAM Parameters[4];
}; /* size: 0x0098 */

class SEList<CMemBufFormatter::CSinglePageBuffer,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _ENLISTMENT_CRM_INFORMATION
{
  /* 0x0000 */ struct _GUID CrmTransactionManagerId;
  /* 0x0010 */ struct _GUID CrmResourceManagerId;
  /* 0x0020 */ struct _GUID CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION; /* size: 0x0030 */

class SpinlockHolder<322,1,1>;

typedef struct _NETINFOSTRUCT
{
  /* 0x0000 */ unsigned long cbStructure;
  /* 0x0004 */ unsigned long dwProviderVersion;
  /* 0x0008 */ unsigned long dwStatus;
  /* 0x000c */ unsigned long dwCharacteristics;
  /* 0x0010 */ unsigned __int64 dwHandle;
  /* 0x0018 */ unsigned short wNetType;
  /* 0x001a */ char Padding_943[2];
  /* 0x001c */ unsigned long dwPrinters;
  /* 0x0020 */ unsigned long dwDrives;
  /* 0x0024 */ long __PADDING__[1];
} NETINFOSTRUCT, *PNETINFOSTRUCT; /* size: 0x0028 */

typedef struct _RPC_CLIENT_INTERFACE
{
  /* 0x0000 */ unsigned int Length;
  /* 0x0004 */ struct _RPC_SYNTAX_IDENTIFIER InterfaceId;
  /* 0x0018 */ struct _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  /* 0x002c */ long Padding_944;
  /* 0x0030 */ struct RPC_DISPATCH_TABLE* DispatchTable;
  /* 0x0038 */ unsigned int RpcProtseqEndpointCount;
  /* 0x003c */ long Padding_945;
  /* 0x0040 */ struct _RPC_PROTSEQ_ENDPOINT* RpcProtseqEndpoint;
  /* 0x0048 */ unsigned __int64 Reserved;
  /* 0x0050 */ const void* InterpreterInfo;
  /* 0x0058 */ unsigned int Flags;
  /* 0x005c */ long __PADDING__[1];
} RPC_CLIENT_INTERFACE, *PRPC_CLIENT_INTERFACE; /* size: 0x0060 */

class SEList<SOSHost,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class NodeManager
{
  /* 0x0000 */ long Padding_946[6];
  /* 0x0018 */ __int64 m_NodesNumber;
  /* 0x0020 */ class SOS_Node* m_nodes[65];
  /* 0x0228 */ class IMemObj* m_pMemObj;
}; /* size: 0x0230 */

class XeSqlPkg::broker_transmission_exception
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_947[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int conversation_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class Spinlock<293,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<178,3,1>;

class SEListEnum<XE_LogDeserializedPackage::Chunk,0>;

typedef struct _TRACE_LOGFILE_HEADER64
{
  /* 0x0000 */ unsigned long BufferSize;
  union
  {
    /* 0x0004 */ unsigned long Version;
    struct
    {
      /* 0x0004 */ unsigned char MajorVersion;
      /* 0x0005 */ unsigned char MinorVersion;
      /* 0x0006 */ unsigned char SubVersion;
      /* 0x0007 */ unsigned char SubMinorVersion;
    } /* size: 0x0004 */ VersionDetail;
  }; /* size: 0x0004 */
  /* 0x0008 */ unsigned long ProviderVersion;
  /* 0x000c */ unsigned long NumberOfProcessors;
  /* 0x0010 */ union _LARGE_INTEGER EndTime;
  /* 0x0018 */ unsigned long TimerResolution;
  /* 0x001c */ unsigned long MaximumFileSize;
  /* 0x0020 */ unsigned long LogFileMode;
  /* 0x0024 */ unsigned long BuffersWritten;
  union
  {
    /* 0x0028 */ struct _GUID LogInstanceGuid;
    struct
    {
      /* 0x0028 */ unsigned long StartBuffers;
      /* 0x002c */ unsigned long PointerSize;
      /* 0x0030 */ unsigned long EventsLost;
      /* 0x0034 */ unsigned long CpuSpeedInMHz;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x0038 */ unsigned __int64 LoggerName;
  /* 0x0040 */ unsigned __int64 LogFileName;
  /* 0x0048 */ struct _TIME_ZONE_INFORMATION TimeZone;
  /* 0x00f4 */ long Padding_948;
  /* 0x00f8 */ union _LARGE_INTEGER BootTime;
  /* 0x0100 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0108 */ union _LARGE_INTEGER StartTime;
  /* 0x0110 */ unsigned long ReservedFlags;
  /* 0x0114 */ unsigned long BuffersLost;
} TRACE_LOGFILE_HEADER64, *PTRACE_LOGFILE_HEADER64; /* size: 0x0118 */

typedef struct _RPC_MESSAGE
{
  /* 0x0000 */ void* Handle;
  /* 0x0008 */ unsigned long DataRepresentation;
  /* 0x000c */ long Padding_949;
  /* 0x0010 */ void* Buffer;
  /* 0x0018 */ unsigned int BufferLength;
  /* 0x001c */ unsigned int ProcNum;
  /* 0x0020 */ struct _RPC_SYNTAX_IDENTIFIER* TransferSyntax;
  /* 0x0028 */ void* RpcInterfaceInformation;
  /* 0x0030 */ void* ReservedForRuntime;
  /* 0x0038 */ void* ManagerEpv;
  /* 0x0040 */ void* ImportContext;
  /* 0x0048 */ unsigned long RpcFlags;
  /* 0x004c */ long __PADDING__[1];
} RPC_MESSAGE, *PRPC_MESSAGE; /* size: 0x0050 */

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE; /* size: 0x0030 */

struct tagRPCOLEMESSAGE
{
  /* 0x0000 */ void* reserved1;
  /* 0x0008 */ unsigned long dataRepresentation;
  /* 0x000c */ long Padding_950;
  /* 0x0010 */ void* Buffer;
  /* 0x0018 */ unsigned long cbBuffer;
  /* 0x001c */ unsigned long iMethod;
  /* 0x0020 */ void* reserved2[5];
  /* 0x0048 */ unsigned long rpcFlags;
  /* 0x004c */ long __PADDING__[1];
}; /* size: 0x0050 */

typedef struct _OVERLAPPED_ENTRY
{
  /* 0x0000 */ unsigned __int64 lpCompletionKey;
  /* 0x0008 */ struct _OVERLAPPED* lpOverlapped;
  /* 0x0010 */ unsigned __int64 Internal;
  /* 0x0018 */ unsigned long dwNumberOfBytesTransferred;
  /* 0x001c */ long __PADDING__[1];
} OVERLAPPED_ENTRY, *POVERLAPPED_ENTRY; /* size: 0x0020 */

class SpinlockHolder<152,3,1>;

class SpinlockHolder<108,9,1>;

class AutoMakeMicroSOSThread
{
  /* 0x0000 */ int m_madeMicroSOSThread;
  /* 0x0004 */ int m_madeSystemThread;
  /* 0x0008 */ long Padding_951[2];
  /* 0x0010 */ class Worker m_worker;
  /* 0x0b20 */ class ISOSHost_TaskImpl m_task;
}; /* size: 0x0f00 */

class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc,16>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::NodePartition
{
  /* 0x0000 */ class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc,16> m_pageBuckets[5];
  /* 0x0050 */ unsigned __int64 m_firstPageOnNode;
  /* 0x0058 */ unsigned __int64 m_pages;
  /* 0x0060 */ unsigned __int64 m_target;
  /* 0x0068 */ int m_pageBeingAdded;
  /* 0x006c */ unsigned int m_firstCpuId;
  /* 0x0070 */ long __PADDING__[4];
}; /* size: 0x0080 */

class SOS_SchedulerRingRecord
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long sm_NumberOfRecords;
      /* 0x0004 */ long Padding_952[3];
      /* 0x0010 */ class SOS_Scheduler* m_Scheduler;
      /* 0x0018 */ enum SOS_SchedulerRingRecord::scheduler_action m_SchedulerAction;
      /* 0x001c */ long Padding_953;
      /* 0x0020 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_Ticks;
      /* 0x0028 */ class Worker* m_SourceWorker;
      /* 0x0030 */ class Worker* m_TargetWorker;
      /* 0x0038 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_PassiveWorkerSignalTicks;
      /* 0x0040 */ unsigned long m_DiskIOProcessed;
      /* 0x0044 */ unsigned long m_TimersExpired;
      /* 0x0048 */ unsigned long m_NextTimeout;
    }; /* size: 0x003c */
    /* 0x0000 */ const wchar_t** sm_ActionNames /* zero-length array */;
  }; /* size: 0x003c */
}; /* size: 0x0050 */

struct IViewObject
{
}; /* size: 0x0008 */

class SOSResourcePoolData
{
  /* 0x0000 */ unsigned long m_MinCpu;
  /* 0x0004 */ unsigned long m_MaxCpu;
  /* 0x0008 */ unsigned long m_CapCpu;
  /* 0x000c */ unsigned long m_MinMemory;
  /* 0x0010 */ unsigned long m_MaxMemory;
  /* 0x0014 */ unsigned long m_TargetMemory;
  /* 0x0018 */ unsigned long m_MinIo;
  /* 0x001c */ unsigned long m_MaxIo;
  /* 0x0020 */ class SystemAffinity m_SchedulerAffinity;
  /* 0x00a0 */ unsigned short m_MaxWorkers;
  /* 0x00a2 */ char Padding_954[2];
  /* 0x00a4 */ unsigned long m_PoolMetadataID;
  /* 0x00a8 */ int m_CapBufferPoolPages;
  /* 0x00ac */ wchar_t m_PoolName[129];
}; /* size: 0x01b0 */

class AutoSpinlockHolder<100,10,1>;

class SOS_BlockersEnumerator
{
}; /* size: 0x0008 */

typedef struct _userHBITMAP
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_955;
  /* 0x0008 */ union _userHBITMAP::__MIDL_IWinTypes_0007 u;
} userHBITMAP, *PuserHBITMAP; /* size: 0x0010 */

typedef struct _userBITMAP
{
  /* 0x0000 */ long bmType;
  /* 0x0004 */ long bmWidth;
  /* 0x0008 */ long bmHeight;
  /* 0x000c */ long bmWidthBytes;
  /* 0x0010 */ unsigned short bmPlanes;
  /* 0x0012 */ unsigned short bmBitsPixel;
  /* 0x0014 */ unsigned long cbSize;
  /* 0x0018 */ unsigned char pBuffer[1];
  /* 0x0019 */ char __PADDING__[3];
} userBITMAP, *PuserBITMAP; /* size: 0x001c */

class CAutoBase<XE_IDecoder>
{
  /* 0x0000 */ class XE_IDecoder* m_pt;
}; /* size: 0x0008 */

typedef struct _userHPALETTE
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_956;
  /* 0x0008 */ union _userHPALETTE::__MIDL_IWinTypes_0008 u;
} userHPALETTE, *PuserHPALETTE; /* size: 0x0010 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TokenPostReverter
{
}; /* size: 0x0001 */

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
{
  /* 0x0000 */ void* pfnBind /* function */;
  /* 0x0008 */ void* pfnUnbind /* function */;
} GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR; /* size: 0x0010 */

typedef struct _FLAGGED_BYTE_BLOB
{
  /* 0x0000 */ unsigned long fFlags;
  /* 0x0004 */ unsigned long clSize;
  /* 0x0008 */ unsigned char abData[1];
  /* 0x0009 */ char __PADDING__[3];
} FLAGGED_BYTE_BLOB, *PFLAGGED_BYTE_BLOB; /* size: 0x000c */

class SEListEnum<XE_LogDeserializedPackage,0>;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
{
  /* 0x0000 */ unsigned long LimitFlags;
  /* 0x0004 */ unsigned long ViolationLimitFlags;
  /* 0x0008 */ unsigned __int64 IoReadBytes;
  /* 0x0010 */ unsigned __int64 IoReadBytesLimit;
  /* 0x0018 */ unsigned __int64 IoWriteBytes;
  /* 0x0020 */ unsigned __int64 IoWriteBytesLimit;
  /* 0x0028 */ union _LARGE_INTEGER PerJobUserTime;
  /* 0x0030 */ union _LARGE_INTEGER PerJobUserTimeLimit;
  /* 0x0038 */ unsigned __int64 JobMemory;
  /* 0x0040 */ unsigned __int64 JobMemoryLimit;
  /* 0x0048 */ enum _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
  /* 0x004c */ enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION; /* size: 0x0050 */

class TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>
{
}; /* size: 0x0018 */

class CFixedPageMgr
{
  /* 0x0000 */ class IMemObj* m_pmoOwner;
  /* 0x0008 */ unsigned short m_cbSize;
  /* 0x000a */ unsigned short m_listIndexFactor;
  /* 0x000c */ long Padding_957;
  /* 0x0010 */ class SEList<CFixedInfo,16> m_fixedInfoLists[9];
  /* 0x00a0 */ unsigned int m_usedListMask;
  /* 0x00a4 */ long Padding_958;
  /* 0x00a8 */ __int64 m_cTotalPages;
  /* 0x00b0 */ __int64 m_cMaxTotalPages;
}; /* size: 0x00b8 */

class CMemFixed
{
  /* 0x0000 */ const unsigned long xsm_cbMaxSizeFitsOnPage;
  /* 0x0004 */ long Padding_959[13];
  /* 0x0038 */ class CFixedPageMgr m_fxpmFixedPages;
}; /* size: 0x00f0 */

struct std::_Arithmetic_traits<float>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class SEList<Worker,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class std::basic_ostream<char,std::char_traits<char> >
{
}; /* size: 0x0068 */

class std::error_code
{
  /* 0x0000 */ int _Myval;
  /* 0x0004 */ long Padding_960;
  /* 0x0008 */ const class std::error_category* _Mycat;
}; /* size: 0x0010 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class XE_AutoP<XE_LoadedLibrary>
{
}; /* size: 0x0008 */

class XE_ResolvedObject<XEAction>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEAction* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEAction* m_Object;
}; /* size: 0x0020 */

typedef struct _PSAPI_WORKING_SET_EX_INFORMATION
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0008 */ union _PSAPI_WORKING_SET_EX_BLOCK VirtualAttributes;
} PSAPI_WORKING_SET_EX_INFORMATION, *PPSAPI_WORKING_SET_EX_INFORMATION; /* size: 0x0010 */

class AutoSpinlockHolder<148,4,1>;

class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>
{
  /* 0x0000 */ long Padding_961[12];
  /* 0x0030 */ void* m_pv;
}; /* size: 0x0038 */

class LocalStorage
{
  /* 0x0000 */ __int64 m_IndexCount;
  /* 0x0008 */ void** m_rgStore;
}; /* size: 0x0010 */

struct ImgDelayDescr
{
  /* 0x0000 */ unsigned long grAttrs;
  /* 0x0004 */ unsigned long rvaDLLName;
  /* 0x0008 */ unsigned long rvaHmod;
  /* 0x000c */ unsigned long rvaIAT;
  /* 0x0010 */ unsigned long rvaINT;
  /* 0x0014 */ unsigned long rvaBoundIAT;
  /* 0x0018 */ unsigned long rvaUnloadIAT;
  /* 0x001c */ unsigned long dwTimeStamp;
}; /* size: 0x0020 */

class std::numpunct<char>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_962[2];
  /* 0x0010 */ const char* _Grouping;
  /* 0x0018 */ char _Dp;
  /* 0x0019 */ char _Kseparator;
  /* 0x001a */ char Padding_963[6];
  /* 0x0020 */ const char* _Falsename;
  /* 0x0028 */ const char* _Truename;
}; /* size: 0x0030 */

struct NDR_POINTER_QUEUE_STATE;

class std::underflow_error
{
}; /* size: 0x0018 */

class TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<116,8,1>;

class XE_FileProcessor
{
  /* 0x0000 */ struct XE_LogBufferPosition m_Position;
  /* 0x0018 */ class XE_AutoP<XE_IDecoder> m_pDecoder;
  /* 0x0020 */ class XE_BufferWalker<XE_IMetadata> m_bufferWalker;
  /* 0x0048 */ enum XE_FileProcessor::State m_initialState;
  /* 0x004c */ unsigned int m_bufno;
  /* 0x0050 */ struct XEBuffer m_buffer;
  /* 0x0078 */ class XE_ILogReadMessageHandler* const m_msgHandler;
  /* 0x0080 */ class XE_MetadataStore m_mdStore;
}; /* size: 0x00b8 */

class ISOSHost_SemaphoreImpl
{
}; /* size: 0x0030 */

struct XdesHashSLock
{
}; /* size: 0x0004 */

class SEListSized<IORGHashTableEntry,248>
{
  /* 0x0000 */ long Padding_964[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class XE_AutoResource<void *,256>
{
}; /* size: 0x0008 */

class XE_Log
{
  /* 0x0000 */ class XE_AutoResource<void *,168> m_FileLock;
  /* 0x0008 */ unsigned int m_DiskSectorSizeInBytes;
  /* 0x000c */ long Padding_965;
  /* 0x0010 */ unsigned __int64 m_FileSizeInBytes;
  /* 0x0018 */ unsigned __int64 m_FileOffsetInBytes;
  /* 0x0020 */ volatile long m_FileRolloverIndex;
  /* 0x0024 */ unsigned int m_Affinity;
  /* 0x0028 */ int m_IsDiskFull;
  /* 0x002c */ wchar_t m_fileName[260];
  /* 0x0234 */ long Padding_966;
  /* 0x0238 */ class CAutoHandleInternal<-1,&CloseHandle> m_fileHandle;
  /* 0x0240 */ class XE_ILogWriteMessageHandler* const m_msgHandler;
  /* 0x0248 */ unsigned __int64 m_writtenOffset;
  /* 0x0250 */ unsigned int m_ioRequestInUse;
  /* 0x0254 */ long Padding_967;
  /* 0x0258 */ class XE_AutoResource<void *,256> m_FileAsyncIOReq;
  /* 0x0260 */ class XE_AutoResource<void *,200> m_FileAsyncEvent;
}; /* size: 0x0268 */

struct MatrixDvmAgentPriorityQueueSLock
{
}; /* size: 0x0004 */

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem* m_currentObject;
  /* 0x0018 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem* m_baseObject;
  /* 0x0020 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0028 */

struct XE_CompressionCache::MemBlock
{
  /* 0x0000 */ struct XE_CompressionCache::MemBlock* m_pNext;
}; /* size: 0x0008 */

class AutoSpinlockHolder<168,3,1>;

class std::range_error
{
}; /* size: 0x0018 */

class SpinlockHolder<151,3,1>;

struct ISOSClient_ResourceInfo
{
}; /* size: 0x0008 */

class ISOSHost_EventManualImpl
{
}; /* size: 0x00e0 */

class std::numeric_limits<__int64>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class CAutoP<XE_ConfigCrc>
{
}; /* size: 0x0008 */

struct XDBRemoteUriCacheSLock
{
}; /* size: 0x0004 */

class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ long Padding_968[2];
  /* 0x0008 */ class std::_Mutex _Mylock;
  /* 0x0010 */ wchar_t* _Gfirst;
  /* 0x0018 */ wchar_t* _Pfirst;
  /* 0x0020 */ wchar_t** _IGfirst;
  /* 0x0028 */ wchar_t** _IPfirst;
  /* 0x0030 */ wchar_t* _Gnext;
  /* 0x0038 */ wchar_t* _Pnext;
  /* 0x0040 */ wchar_t** _IGnext;
  /* 0x0048 */ wchar_t** _IPnext;
  /* 0x0050 */ int _Gcount;
  /* 0x0054 */ int _Pcount;
  /* 0x0058 */ int* _IGcount;
  /* 0x0060 */ int* _IPcount;
  /* 0x0068 */ class std::locale* _Plocale;
}; /* size: 0x0070 */

class XE_LogDeserializedPackage::Chunk
{
  /* 0x0000 */ unsigned int MAX_ALLOC;
  /* 0x0004 */ long Padding_969[3];
  /* 0x0010 */ unsigned int m_len;
  /* 0x0014 */ unsigned int m_cap;
}; /* size: 0x0018 */

typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ unsigned long FileAttributes;
  /* 0x0034 */ long __PADDING__[1];
} FILE_NETWORK_OPEN_INFORMATION, *PFILE_NETWORK_OPEN_INFORMATION; /* size: 0x0038 */

class MemoryClerk
{
  /* 0x0000 */ long Padding_970[374];
  /* 0x05d8 */ enum SOSHOST_MEMORYCLERK_TYPE m_memoryClerkType;
  /* 0x05dc */ wchar_t m_memoryClerkName[64];
}; /* size: 0x0680 */

typedef struct _SYSTEM_ALARM_CALLBACK_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE; /* size: 0x000c */

class SpinlockHolder<125,7,1>;

struct ISOSHostPrev2
{
}; /* size: 0x0008 */

class CAutoBase<XE_FileSet::Entry>
{
  /* 0x0000 */ class XE_FileSet::Entry* m_pt;
}; /* size: 0x0008 */

struct tagACTCTXA
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ const char* lpSource;
  /* 0x0010 */ unsigned short wProcessorArchitecture;
  /* 0x0012 */ unsigned short wLangId;
  /* 0x0014 */ long Padding_971;
  /* 0x0018 */ const char* lpAssemblyDirectory;
  /* 0x0020 */ const char* lpResourceName;
  /* 0x0028 */ const char* lpApplicationName;
  /* 0x0030 */ struct HINSTANCE__* hModule;
}; /* size: 0x0038 */

struct tagOBJECTDESCRIPTOR
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct _GUID clsid;
  /* 0x0014 */ unsigned long dwDrawAspect;
  /* 0x0018 */ struct tagSIZE sizel;
  /* 0x0020 */ struct _POINTL pointl;
  /* 0x0028 */ unsigned long dwStatus;
  /* 0x002c */ unsigned long dwFullUserTypeName;
  /* 0x0030 */ unsigned long dwSrcOfCopy;
}; /* size: 0x0034 */

class XE_AutoP<XE_BufferMap>
{
}; /* size: 0x0008 */

struct IXMLDOMAttribute
{
}; /* size: 0x0008 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>
{
}; /* size: 0x0001 */

struct DLGITEMTEMPLATE
{
  /* 0x0000 */ unsigned long style;
  /* 0x0004 */ unsigned long dwExtendedStyle;
  /* 0x0008 */ short x;
  /* 0x000a */ short y;
  /* 0x000c */ short cx;
  /* 0x000e */ short cy;
  /* 0x0010 */ unsigned short id;
}; /* size: 0x0012 */

class TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>
{
}; /* size: 0x0018 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_972[10];
  /* 0x0028 */ void* m_pfn /* function */;
}; /* size: 0x0030 */

struct std::is_error_code_enum<std::istreambuf_iterator<char,std::char_traits<char> > >
{
}; /* size: 0x0001 */

class Spinlock<48,18,1>
{
}; /* size: 0x0004 */

typedef struct _SERVICE_USERMODEREBOOT_INFO
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ unsigned long eLowestRunLevel;
  /* 0x0008 */ unsigned long eHighestRunLevel;
} SERVICE_USERMODEREBOOT_INFO, *PSERVICE_USERMODEREBOOT_INFO; /* size: 0x000c */

class Spinlock<327,1,1>
{
}; /* size: 0x0004 */

struct tagSERIALKEYSW
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ wchar_t* lpszActivePort;
  /* 0x0010 */ wchar_t* lpszPort;
  /* 0x0018 */ unsigned int iBaudRate;
  /* 0x001c */ unsigned int iPortState;
  /* 0x0020 */ unsigned int iActive;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

class Spinlock<21,19,1>
{
}; /* size: 0x0004 */

class SOS_UserDescriptor
{
  /* 0x0000 */ long Padding_973[26];
  /* 0x0068 */ class SOS_UserStore* m_ParentStore;
  /* 0x0070 */ volatile long m_externalRef;
  /* 0x0074 */ long Padding_974;
  /* 0x0078 */ class IMemObj* m_parentMemObj;
  /* 0x0080 */ unsigned long m_status;
  /* 0x0084 */ long Padding_975;
  /* 0x0088 */ class CostInfo m_costInfo;
}; /* size: 0x00d0 */

struct tagMDICREATESTRUCTA
{
  /* 0x0000 */ const char* szClass;
  /* 0x0008 */ const char* szTitle;
  /* 0x0010 */ void* hOwner;
  /* 0x0018 */ int x;
  /* 0x001c */ int y;
  /* 0x0020 */ int cx;
  /* 0x0024 */ int cy;
  /* 0x0028 */ unsigned long style;
  /* 0x002c */ long Padding_976;
  /* 0x0030 */ __int64 lParam;
}; /* size: 0x0038 */

class SpinlockHolder<102,10,1>;

struct tm
{
  /* 0x0000 */ int tm_sec;
  /* 0x0004 */ int tm_min;
  /* 0x0008 */ int tm_hour;
  /* 0x000c */ int tm_mday;
  /* 0x0010 */ int tm_mon;
  /* 0x0014 */ int tm_year;
  /* 0x0018 */ int tm_wday;
  /* 0x001c */ int tm_yday;
  /* 0x0020 */ int tm_isdst;
}; /* size: 0x0024 */

class BitManip<unsigned int>
{
}; /* size: 0x0001 */

typedef struct _SEC_WINNT_AUTH_IDENTITY_W
{
  /* 0x0000 */ unsigned short* User;
  /* 0x0008 */ unsigned long UserLength;
  /* 0x000c */ long Padding_977;
  /* 0x0010 */ unsigned short* Domain;
  /* 0x0018 */ unsigned long DomainLength;
  /* 0x001c */ long Padding_978;
  /* 0x0020 */ unsigned short* Password;
  /* 0x0028 */ unsigned long PasswordLength;
  /* 0x002c */ unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W; /* size: 0x0030 */

struct SOS_DispatcherStats
{
  /* 0x0000 */ unsigned __int64 m_itemsProcessed;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_waitDuration;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_processingDuration;
  /* 0x0018 */ int m_isFading;
  /* 0x001c */ unsigned int m_fadeEndTime;
}; /* size: 0x0020 */

typedef struct _OUTLINETEXTMETRICA
{
  /* 0x0000 */ unsigned int otmSize;
  /* 0x0004 */ struct tagTEXTMETRICA otmTextMetrics;
  /* 0x003c */ unsigned char otmFiller;
  /* 0x003d */ struct tagPANOSE otmPanoseNumber;
  /* 0x0047 */ char Padding_979;
  /* 0x0048 */ unsigned int otmfsSelection;
  /* 0x004c */ unsigned int otmfsType;
  /* 0x0050 */ int otmsCharSlopeRise;
  /* 0x0054 */ int otmsCharSlopeRun;
  /* 0x0058 */ int otmItalicAngle;
  /* 0x005c */ unsigned int otmEMSquare;
  /* 0x0060 */ int otmAscent;
  /* 0x0064 */ int otmDescent;
  /* 0x0068 */ unsigned int otmLineGap;
  /* 0x006c */ unsigned int otmsCapEmHeight;
  /* 0x0070 */ unsigned int otmsXHeight;
  /* 0x0074 */ struct tagRECT otmrcFontBox;
  /* 0x0084 */ int otmMacAscent;
  /* 0x0088 */ int otmMacDescent;
  /* 0x008c */ unsigned int otmMacLineGap;
  /* 0x0090 */ unsigned int otmusMinimumPPEM;
  /* 0x0094 */ struct tagPOINT otmptSubscriptSize;
  /* 0x009c */ struct tagPOINT otmptSubscriptOffset;
  /* 0x00a4 */ struct tagPOINT otmptSuperscriptSize;
  /* 0x00ac */ struct tagPOINT otmptSuperscriptOffset;
  /* 0x00b4 */ unsigned int otmsStrikeoutSize;
  /* 0x00b8 */ int otmsStrikeoutPosition;
  /* 0x00bc */ int otmsUnderscoreSize;
  /* 0x00c0 */ int otmsUnderscorePosition;
  /* 0x00c4 */ long Padding_980;
  /* 0x00c8 */ char* otmpFamilyName;
  /* 0x00d0 */ char* otmpFaceName;
  /* 0x00d8 */ char* otmpStyleName;
  /* 0x00e0 */ char* otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA; /* size: 0x00e8 */

class SOS_TRingBufferRecordEnum<SOS_RingBufferRecord>
{
  /* 0x0000 */ class SOS_RingBuffer* m_ringBuffer;
  /* 0x0008 */ unsigned long m_currentRecordIdx;
  /* 0x000c */ unsigned long m_lastRecordId;
  /* 0x0010 */ int m_isFirstGetNextCall;
}; /* size: 0x0018 */

class SOS_RingBufferRecordSerializingEnum
{
  /* 0x0000 */ class SOS_TRingBufferRecordEnum<SOS_RingBufferRecord> m_recordEnum;
  /* 0x0018 */ class SOS_RingBuffer* m_ringBuffer;
}; /* size: 0x0020 */

struct tagEMRPOLYTEXTOUTA
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long iGraphicsMode;
  /* 0x001c */ float exScale;
  /* 0x0020 */ float eyScale;
  /* 0x0024 */ long cStrings;
  /* 0x0028 */ struct tagEMRTEXT aemrtext[1];
}; /* size: 0x0050 */

class std::reverse_iterator<std::_String_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >;

struct HLSURF__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class SEListEnum<SOS_Task,16>;

struct tagBITMAPINFOHEADER
{
  /* 0x0000 */ unsigned long biSize;
  /* 0x0004 */ long biWidth;
  /* 0x0008 */ long biHeight;
  /* 0x000c */ unsigned short biPlanes;
  /* 0x000e */ unsigned short biBitCount;
  /* 0x0010 */ unsigned long biCompression;
  /* 0x0014 */ unsigned long biSizeImage;
  /* 0x0018 */ long biXPelsPerMeter;
  /* 0x001c */ long biYPelsPerMeter;
  /* 0x0020 */ unsigned long biClrUsed;
  /* 0x0024 */ unsigned long biClrImportant;
}; /* size: 0x0028 */

class XeSqlPkg::catalog_metadata_cache_entry_added
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_981[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class SEList<eXcursionEntry,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct TaskTracker
{
  /* 0x0000 */ class SOS_Task* m_pTask;
  /* 0x0008 */ BOOL m_isTracking;
  /* 0x0009 */ BOOL m_isFinished;
  /* 0x000a */ char Padding_982[6];
  /* 0x0010 */ class SEList<eXcursionEntry,16> m_scopeStack;
  /* 0x0020 */ class SEList<eXcursionEntry,0> m_fullPath;
  /* 0x0030 */ unsigned long m_seqForTheSameEntryPoint;
  /* 0x0034 */ unsigned long m_pointsCount;
}; /* size: 0x0038 */

class XeSqlPkg::memory_manager_target_server_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_983[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class SOS_CacheEntryTokenExposed
{
  /* 0x0000 */ unsigned __int64 m_LocalCounter;
  /* 0x0008 */ enum DISTRIBUTED_CACHEID m_DistributedCacheId;
  /* 0x000c */ unsigned short m_OriginalCacheId;
}; /* size: 0x000e */

struct tagCLIPDATA
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long ulClipFmt;
  /* 0x0008 */ unsigned char* pClipData;
}; /* size: 0x0010 */

class PerCPUDataBase<SOS_MemoryWorkSpace::WSCpuPart>
{
}; /* size: 0x0010 */

class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>
{
  /* 0x0000 */ volatile __int64 m_HitLength;
  /* 0x0008 */ volatile __int64 m_MissLength;
  /* 0x0010 */ volatile __int64 m_Misses;
  /* 0x0018 */ volatile __int64 m_Hits;
  /* 0x0020 */ class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>::Bucket* m_rgbuckets;
  /* 0x0028 */ unsigned int m_bucketCount;
  /* 0x002c */ long Padding_984;
  /* 0x0030 */ void* m_compareRoutine /* function */;
}; /* size: 0x0038 */

class ResManagerIOData
{
  /* 0x0000 */ long Padding_985[6];
  /* 0x0018 */ class IMemObj* m_Pmo;
  /* 0x0020 */ class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int> m_ht;
}; /* size: 0x0058 */

struct std::char_traits<unsigned short>
{
}; /* size: 0x0001 */

struct tagVersionedStream
{
  /* 0x0000 */ struct _GUID guidVersion;
  /* 0x0010 */ struct IStream* pStream;
}; /* size: 0x0018 */

struct std::tr1::_Remove_reference<std::locale * &>
{
}; /* size: 0x0001 */

typedef union _Dconst
{
  union
  {
    /* 0x0000 */ unsigned short _Word[8];
    /* 0x0000 */ float _Float;
    /* 0x0000 */ double _Double;
    /* 0x0000 */ double _Long_double;
  }; /* size: 0x0010 */
} Dconst, *PDconst; /* size: 0x0010 */

class SEList<AlignedSmallPageAllocator::PageInfo,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class TypeListSize<TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_istream<unsigned short,std::char_traits<unsigned short> >& _Myistr;
}; /* size: 0x0008 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ long Padding_986[2];
  /* 0x0008 */ class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_enumerators;
  /* 0x0028 */ struct TListSLock m_lock;
}; /* size: 0x0030 */

struct PPM_WMI_PERF_STATES
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long MaxFrequency;
  /* 0x0008 */ unsigned long CurrentState;
  /* 0x000c */ unsigned long MaxPerfState;
  /* 0x0010 */ unsigned long MinPerfState;
  /* 0x0014 */ unsigned long LowestPerfState;
  /* 0x0018 */ unsigned long ThermalConstraint;
  /* 0x001c */ unsigned char BusyAdjThreshold;
  /* 0x001d */ unsigned char PolicyType;
  /* 0x001e */ unsigned char Type;
  /* 0x001f */ unsigned char Reserved;
  /* 0x0020 */ unsigned long TimerInterval;
  /* 0x0024 */ long Padding_987;
  /* 0x0028 */ unsigned __int64 TargetProcessors;
  /* 0x0030 */ unsigned long PStateHandler;
  /* 0x0034 */ unsigned long PStateContext;
  /* 0x0038 */ unsigned long TStateHandler;
  /* 0x003c */ unsigned long TStateContext;
  /* 0x0040 */ unsigned long FeedbackHandler;
  /* 0x0044 */ unsigned long Reserved1;
  /* 0x0048 */ unsigned __int64 Reserved2;
  /* 0x0050 */ struct PPM_WMI_PERF_STATE State[1];
}; /* size: 0x0090 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>
{
}; /* size: 0x0001 */

class XE_DeserializedBuffer
{
}; /* size: 0x0001 */

class XListElem<ProbCostData>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_988;
  /* 0x0018 */ class XList<ProbCostData>* m_pList;
}; /* size: 0x0020 */

struct ISOSHost_OSAffinityChangeCallback
{
}; /* size: 0x0008 */

typedef struct _MEMORY_BASIC_INFORMATION
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ void* AllocationBase;
  /* 0x0010 */ unsigned long AllocationProtect;
  /* 0x0014 */ long Padding_989;
  /* 0x0018 */ unsigned __int64 RegionSize;
  /* 0x0020 */ unsigned long State;
  /* 0x0024 */ unsigned long Protect;
  /* 0x0028 */ unsigned long Type;
  /* 0x002c */ long __PADDING__[1];
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION; /* size: 0x0030 */

typedef struct _OUTLINETEXTMETRICW
{
  /* 0x0000 */ unsigned int otmSize;
  /* 0x0004 */ struct tagTEXTMETRICW otmTextMetrics;
  /* 0x0040 */ unsigned char otmFiller;
  /* 0x0041 */ struct tagPANOSE otmPanoseNumber;
  /* 0x004b */ char Padding_990;
  /* 0x004c */ unsigned int otmfsSelection;
  /* 0x0050 */ unsigned int otmfsType;
  /* 0x0054 */ int otmsCharSlopeRise;
  /* 0x0058 */ int otmsCharSlopeRun;
  /* 0x005c */ int otmItalicAngle;
  /* 0x0060 */ unsigned int otmEMSquare;
  /* 0x0064 */ int otmAscent;
  /* 0x0068 */ int otmDescent;
  /* 0x006c */ unsigned int otmLineGap;
  /* 0x0070 */ unsigned int otmsCapEmHeight;
  /* 0x0074 */ unsigned int otmsXHeight;
  /* 0x0078 */ struct tagRECT otmrcFontBox;
  /* 0x0088 */ int otmMacAscent;
  /* 0x008c */ int otmMacDescent;
  /* 0x0090 */ unsigned int otmMacLineGap;
  /* 0x0094 */ unsigned int otmusMinimumPPEM;
  /* 0x0098 */ struct tagPOINT otmptSubscriptSize;
  /* 0x00a0 */ struct tagPOINT otmptSubscriptOffset;
  /* 0x00a8 */ struct tagPOINT otmptSuperscriptSize;
  /* 0x00b0 */ struct tagPOINT otmptSuperscriptOffset;
  /* 0x00b8 */ unsigned int otmsStrikeoutSize;
  /* 0x00bc */ int otmsStrikeoutPosition;
  /* 0x00c0 */ int otmsUnderscoreSize;
  /* 0x00c4 */ int otmsUnderscorePosition;
  /* 0x00c8 */ char* otmpFamilyName;
  /* 0x00d0 */ char* otmpFaceName;
  /* 0x00d8 */ char* otmpStyleName;
  /* 0x00e0 */ char* otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW; /* size: 0x00e8 */

class TypeListSize<TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

class TCacheStore<CacheClockAlgorithm>::CacheEntryDescriptor
{
  /* 0x0000 */ long Padding_991[34];
  /* 0x0088 */ enum entry_state m_State;
  /* 0x008c */ int m_ShouldDestroyUserData;
  /* 0x0090 */ int m_ShouldDestroyCacheKey;
  /* 0x0094 */ long Padding_992;
  /* 0x0098 */ class TCacheStore<CacheClockAlgorithm>* m_cacheStore;
  /* 0x00a0 */ class IMemObj* m_pmo;
  /* 0x00a8 */ class TCacheStore<CacheClockAlgorithm>::CacheEntryProxy* m_secondaryProxies;
}; /* size: 0x00b0 */

typedef struct _BLENDFUNCTION
{
  /* 0x0000 */ unsigned char BlendOp;
  /* 0x0001 */ unsigned char BlendFlags;
  /* 0x0002 */ unsigned char SourceConstantAlpha;
  /* 0x0003 */ unsigned char AlphaFormat;
} BLENDFUNCTION, *PBLENDFUNCTION; /* size: 0x0004 */

struct PPM_WMI_IDLE_STATES_EX
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned long TargetState;
  /* 0x000c */ unsigned long OldState;
  /* 0x0010 */ void* TargetProcessors;
  /* 0x0018 */ struct PPM_WMI_IDLE_STATE State[1];
}; /* size: 0x0038 */

typedef struct _RPC_PROTSEQ_VECTORW
{
  /* 0x0000 */ unsigned int Count;
  /* 0x0004 */ long Padding_993;
  /* 0x0008 */ unsigned short* Protseq[1];
} RPC_PROTSEQ_VECTORW, *PRPC_PROTSEQ_VECTORW; /* size: 0x0010 */

class CDStream
{
  /* 0x0000 */ class CDumpStream* m_pDevices[10];
  /* 0x0050 */ unsigned long m_nDeviceCount;
}; /* size: 0x0058 */

class XE_TargetStringBuilder
{
  /* 0x0000 */ const wchar_t* sm_truncatedTag /* zero-length array */;
  /* 0x0001 */ char Padding_994[31];
  /* 0x0020 */ wchar_t* m_truncatedValue;
}; /* size: 0x0028 */

class ISOSHost_AutoMutex
{
  /* 0x0000 */ struct ISOSHost_Mutex* m_pMutex;
  /* 0x0008 */ struct ISOSHost* m_pHost;
  /* 0x0010 */ unsigned long m_scopeCtr;
}; /* size: 0x0018 */

typedef struct _TRANSACTION_BIND_INFORMATION
{
  /* 0x0000 */ void* TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION; /* size: 0x0008 */

struct ColumnDescriptor
{
  union
  {
    /* 0x0000 */ const unsigned int CX_INTERVAL_ENCODER;
    /* 0x0000 */ const unsigned int CX_FIXED_ENCODER;
    /* 0x0000 */ const unsigned int CX_RLE_ENCODER;
    /* 0x0000 */ const unsigned int CX_RLE_ZERO_ENCODER;
    /* 0x0000 */ unsigned int length;
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned int encoding;
  /* 0x0008 */ unsigned int rowOffset;
  /* 0x000c */ unsigned int shouldStoreOrRead;
}; /* size: 0x0010 */

class std::codecvt<char,char,int>
{
  /* 0x0000 */ class std::locale::id id;
}; /* size: 0x0010 */

class AutoSpinlockHolder<151,3,1>;

class WcsSafeFakeType3
{
}; /* size: 0x0001 */

class CMemLargePageObj
{
  /* 0x0000 */ long Padding_995[68];
  /* 0x0110 */ class TVarPageMgr<1> m_vpmVariableLargePages;
}; /* size: 0x01b0 */

typedef struct _SERVICE_NOTIFY_2W
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ long Padding_996;
  /* 0x0008 */ void* pfnNotifyCallback /* function */;
  /* 0x0010 */ void* pContext;
  /* 0x0018 */ unsigned long dwNotificationStatus;
  /* 0x001c */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
  /* 0x0040 */ unsigned long dwNotificationTriggered;
  /* 0x0044 */ long Padding_997;
  /* 0x0048 */ wchar_t* pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W; /* size: 0x0050 */

struct tagEMRCREATEDIBPATTERNBRUSHPT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihBrush;
  /* 0x000c */ unsigned long iUsage;
  /* 0x0010 */ unsigned long offBmi;
  /* 0x0014 */ unsigned long cbBmi;
  /* 0x0018 */ unsigned long offBits;
  /* 0x001c */ unsigned long cbBits;
}; /* size: 0x0020 */

typedef struct _PERFORMANCE_INFORMATION
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_998;
  /* 0x0008 */ unsigned __int64 CommitTotal;
  /* 0x0010 */ unsigned __int64 CommitLimit;
  /* 0x0018 */ unsigned __int64 CommitPeak;
  /* 0x0020 */ unsigned __int64 PhysicalTotal;
  /* 0x0028 */ unsigned __int64 PhysicalAvailable;
  /* 0x0030 */ unsigned __int64 SystemCache;
  /* 0x0038 */ unsigned __int64 KernelTotal;
  /* 0x0040 */ unsigned __int64 KernelPaged;
  /* 0x0048 */ unsigned __int64 KernelNonpaged;
  /* 0x0050 */ unsigned __int64 PageSize;
  /* 0x0058 */ unsigned long HandleCount;
  /* 0x005c */ unsigned long ProcessCount;
  /* 0x0060 */ unsigned long ThreadCount;
  /* 0x0064 */ long __PADDING__[1];
} PERFORMANCE_INFORMATION, *PPERFORMANCE_INFORMATION; /* size: 0x0068 */

struct ISOSHost_Task_Prev0
{
}; /* size: 0x0008 */

struct tagRemSTGMEDIUM
{
  /* 0x0000 */ unsigned long tymed;
  /* 0x0004 */ unsigned long dwHandleType;
  /* 0x0008 */ unsigned long pData;
  /* 0x000c */ unsigned long pUnkForRelease;
  /* 0x0010 */ unsigned long cbData;
  /* 0x0014 */ unsigned char data[1];
  /* 0x0015 */ char __PADDING__[3];
}; /* size: 0x0018 */

typedef struct _KTMOBJECT_CURSOR
{
  /* 0x0000 */ struct _GUID LastQuery;
  /* 0x0010 */ unsigned long ObjectIdCount;
  /* 0x0014 */ struct _GUID ObjectIds[1];
} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR; /* size: 0x0024 */

struct tagLICINFO
{
  /* 0x0000 */ long cbLicInfo;
  /* 0x0004 */ int fRuntimeKeyAvail;
  /* 0x0008 */ int fLicVerified;
}; /* size: 0x000c */

struct CMEnlistmentSLock
{
}; /* size: 0x0004 */

class XeSosPkg::malloc_spy_corrupted_memory_detected
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

struct tagMSG
{
  /* 0x0000 */ struct HWND__* hwnd;
  /* 0x0008 */ unsigned int message;
  /* 0x000c */ long Padding_999;
  /* 0x0010 */ unsigned __int64 wParam;
  /* 0x0018 */ __int64 lParam;
  /* 0x0020 */ unsigned long time;
  /* 0x0024 */ struct tagPOINT pt;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

class Spinlock<60,16,1>
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

typedef struct _SERVICE_FAILURE_ACTIONSA
{
  /* 0x0000 */ unsigned long dwResetPeriod;
  /* 0x0004 */ long Padding_1000;
  /* 0x0008 */ char* lpRebootMsg;
  /* 0x0010 */ char* lpCommand;
  /* 0x0018 */ unsigned long cActions;
  /* 0x001c */ long Padding_1001;
  /* 0x0020 */ struct _SC_ACTION* lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *PSERVICE_FAILURE_ACTIONSA; /* size: 0x0028 */

struct tagPAINTSTRUCT
{
  /* 0x0000 */ struct HDC__* hdc;
  /* 0x0008 */ int fErase;
  /* 0x000c */ struct tagRECT rcPaint;
  /* 0x001c */ int fRestore;
  /* 0x0020 */ int fIncUpdate;
  /* 0x0024 */ unsigned char rgbReserved[32];
  /* 0x0044 */ long __PADDING__[1];
}; /* size: 0x0048 */

typedef struct _DISCDLGSTRUCTA
{
  /* 0x0000 */ unsigned long cbStructure;
  /* 0x0004 */ long Padding_1002;
  /* 0x0008 */ struct HWND__* hwndOwner;
  /* 0x0010 */ char* lpLocalName;
  /* 0x0018 */ char* lpRemoteName;
  /* 0x0020 */ unsigned long dwFlags;
  /* 0x0024 */ long __PADDING__[1];
} DISCDLGSTRUCTA, *PDISCDLGSTRUCTA; /* size: 0x0028 */

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION
{
  /* 0x0000 */ void* IoCompletionPortHandle;
  /* 0x0008 */ unsigned __int64 CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION; /* size: 0x0010 */

typedef struct _RPC_SECURITY_QOS_V3_W
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Capabilities;
  /* 0x0008 */ unsigned long IdentityTracking;
  /* 0x000c */ unsigned long ImpersonationType;
  /* 0x0010 */ unsigned long AdditionalSecurityInfoType;
  /* 0x0014 */ long Padding_1003;
  union
  {
    /* 0x0018 */ struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
  } /* size: 0x0008 */ u;
  /* 0x0020 */ void* Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W; /* size: 0x0028 */

struct BSMINFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ long Padding_1004;
  /* 0x0008 */ struct HDESK__* hdesk;
  /* 0x0010 */ struct HWND__* hwnd;
  /* 0x0018 */ struct _LUID luid;
}; /* size: 0x0020 */

class SpinlockHolder<244,1,1>;

class SOSResourceGroupData
{
  /* 0x0000 */ enum IMPORTANCE m_Importance;
  /* 0x0004 */ long m_MaxConcurrentRequests;
  /* 0x0008 */ unsigned long m_MinMemory;
  /* 0x000c */ unsigned short m_MaxWorkers;
  /* 0x000e */ unsigned short m_MaxSessions;
  /* 0x0010 */ unsigned long m_PoolMetadataID;
  /* 0x0014 */ unsigned long m_GroupMetadataID;
  /* 0x0018 */ unsigned int m_MinIo;
  /* 0x001c */ unsigned int m_MaxIo;
  /* 0x0020 */ wchar_t m_GroupName[129];
}; /* size: 0x0124 */

typedef struct _GRADIENT_TRIANGLE
{
  /* 0x0000 */ unsigned long Vertex1;
  /* 0x0004 */ unsigned long Vertex2;
  /* 0x0008 */ unsigned long Vertex3;
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE; /* size: 0x000c */

typedef struct _MODEMSETTINGS
{
  /* 0x0000 */ unsigned long dwActualSize;
  /* 0x0004 */ unsigned long dwRequiredSize;
  /* 0x0008 */ unsigned long dwDevSpecificOffset;
  /* 0x000c */ unsigned long dwDevSpecificSize;
  /* 0x0010 */ unsigned long dwCallSetupFailTimer;
  /* 0x0014 */ unsigned long dwInactivityTimeout;
  /* 0x0018 */ unsigned long dwSpeakerVolume;
  /* 0x001c */ unsigned long dwSpeakerMode;
  /* 0x0020 */ unsigned long dwPreferredModemOptions;
  /* 0x0024 */ unsigned long dwNegotiatedModemOptions;
  /* 0x0028 */ unsigned long dwNegotiatedDCERate;
  /* 0x002c */ unsigned char abVariablePortion[1];
  /* 0x002d */ char __PADDING__[3];
} MODEMSETTINGS, *PMODEMSETTINGS; /* size: 0x0030 */

struct IPicture2
{
}; /* size: 0x0008 */

typedef struct _IMAGE_DEBUG_DIRECTORY
{
  /* 0x0000 */ unsigned long Characteristics;
  /* 0x0004 */ unsigned long TimeDateStamp;
  /* 0x0008 */ unsigned short MajorVersion;
  /* 0x000a */ unsigned short MinorVersion;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned long SizeOfData;
  /* 0x0014 */ unsigned long AddressOfRawData;
  /* 0x0018 */ unsigned long PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY; /* size: 0x001c */

struct XE_NotificationCallbackListSLock
{
}; /* size: 0x0004 */

struct IAsyncRpcChannelBuffer
{
}; /* size: 0x0008 */

class Spinlock<297,1,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_MANDATORY_LABEL_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE; /* size: 0x000c */

typedef struct _ACCESS_DENIED_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} ACCESS_DENIED_ACE, *PACCESS_DENIED_ACE; /* size: 0x000c */

class Spinlock<187,3,1>
{
}; /* size: 0x0004 */

typedef struct _TOKEN_USER_CLAIMS
{
  /* 0x0000 */ void* UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS; /* size: 0x0008 */

typedef struct _POWER_USER_PRESENCE
{
  /* 0x0000 */ enum POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE; /* size: 0x0004 */

struct IInternetHostSecurityManager
{
}; /* size: 0x0008 */

struct _HGROUPENUM;

struct XE_BufferMgrSLock
{
}; /* size: 0x0004 */

class CAutoRg<XMLEventTransformRule>
{
}; /* size: 0x0008 */

struct tagCOPYDATASTRUCT
{
  /* 0x0000 */ unsigned __int64 dwData;
  /* 0x0008 */ unsigned long cbData;
  /* 0x000c */ long Padding_1005;
  /* 0x0010 */ void* lpData;
}; /* size: 0x0018 */

class SpinlockHolder<130,7,1>;

struct std::ctype_base
{
}; /* size: 0x0010 */

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
  /* 0x0000 */ unsigned long BeginAddress;
  /* 0x0004 */ unsigned long EndAddress;
  /* 0x0008 */ unsigned long ExceptionHandler;
  /* 0x000c */ unsigned long HandlerData;
  /* 0x0010 */ unsigned long PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY; /* size: 0x0014 */

struct BITMAPV5HEADER
{
  /* 0x0000 */ unsigned long bV5Size;
  /* 0x0004 */ long bV5Width;
  /* 0x0008 */ long bV5Height;
  /* 0x000c */ unsigned short bV5Planes;
  /* 0x000e */ unsigned short bV5BitCount;
  /* 0x0010 */ unsigned long bV5Compression;
  /* 0x0014 */ unsigned long bV5SizeImage;
  /* 0x0018 */ long bV5XPelsPerMeter;
  /* 0x001c */ long bV5YPelsPerMeter;
  /* 0x0020 */ unsigned long bV5ClrUsed;
  /* 0x0024 */ unsigned long bV5ClrImportant;
  /* 0x0028 */ unsigned long bV5RedMask;
  /* 0x002c */ unsigned long bV5GreenMask;
  /* 0x0030 */ unsigned long bV5BlueMask;
  /* 0x0034 */ unsigned long bV5AlphaMask;
  /* 0x0038 */ unsigned long bV5CSType;
  /* 0x003c */ struct tagICEXYZTRIPLE bV5Endpoints;
  /* 0x0060 */ unsigned long bV5GammaRed;
  /* 0x0064 */ unsigned long bV5GammaGreen;
  /* 0x0068 */ unsigned long bV5GammaBlue;
  /* 0x006c */ unsigned long bV5Intent;
  /* 0x0070 */ unsigned long bV5ProfileData;
  /* 0x0074 */ unsigned long bV5ProfileSize;
  /* 0x0078 */ unsigned long bV5Reserved;
}; /* size: 0x007c */

struct IPipeDouble
{
}; /* size: 0x0008 */

class TypeListSize<TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pNext;
}; /* size: 0x0010 */

typedef struct _ImageArchitectureHeader
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned int AmaskValue : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned int : 7; /* bit position: 1 */
    /* 0x0000 */ unsigned int AmaskShift : 8; /* bit position: 8 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long FirstEntryRVA;
} ImageArchitectureHeader, *PImageArchitectureHeader; /* size: 0x0008 */

typedef struct _QUERY_SERVICE_LOCK_STATUSA
{
  /* 0x0000 */ unsigned long fIsLocked;
  /* 0x0004 */ long Padding_1006;
  /* 0x0008 */ char* lpLockOwner;
  /* 0x0010 */ unsigned long dwLockDuration;
  /* 0x0014 */ long __PADDING__[1];
} QUERY_SERVICE_LOCK_STATUSA, *PQUERY_SERVICE_LOCK_STATUSA; /* size: 0x0018 */

class Spinlock<321,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<324,1,1>;

typedef struct _RPC_IF_ID
{
  /* 0x0000 */ struct _GUID Uuid;
  /* 0x0010 */ unsigned short VersMajor;
  /* 0x0012 */ unsigned short VersMinor;
} RPC_IF_ID, *PRPC_IF_ID; /* size: 0x0014 */

class XeSosPkg::nonpreemptive_long_syncio
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1007[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int start_timeOffset;
    /* 0x0000 */ const int end_timeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int user_data_pointerOffset;
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int scheduler_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0278 */

class EventManualInternal<SuspendQueueSLock>
{
}; /* size: 0x0028 */

class SOS_WaitableAddress
{
  /* 0x0000 */ const unsigned __int64 m_cookie;
  /* 0x0008 */ class EventManualInternal<SuspendQueueSLock> m_event;
  /* 0x0030 */ class SEListElem m_link;
  /* 0x0040 */ enum SOS_WaitableAddress::WaitableState m_state;
}; /* size: 0x0048 */

typedef struct _COAUTHINFO
{
  /* 0x0000 */ unsigned long dwAuthnSvc;
  /* 0x0004 */ unsigned long dwAuthzSvc;
  /* 0x0008 */ wchar_t* pwszServerPrincName;
  /* 0x0010 */ unsigned long dwAuthnLevel;
  /* 0x0014 */ unsigned long dwImpersonationLevel;
  /* 0x0018 */ struct _COAUTHIDENTITY* pAuthIdentityData;
  /* 0x0020 */ unsigned long dwCapabilities;
  /* 0x0024 */ long __PADDING__[1];
} COAUTHINFO, *PCOAUTHINFO; /* size: 0x0028 */

struct std::_Arithmetic_traits<long double>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _COAUTHIDENTITY
{
  /* 0x0000 */ unsigned short* User;
  /* 0x0008 */ unsigned long UserLength;
  /* 0x000c */ long Padding_1008;
  /* 0x0010 */ unsigned short* Domain;
  /* 0x0018 */ unsigned long DomainLength;
  /* 0x001c */ long Padding_1009;
  /* 0x0020 */ unsigned short* Password;
  /* 0x0028 */ unsigned long PasswordLength;
  /* 0x002c */ unsigned long Flags;
} COAUTHIDENTITY, *PCOAUTHIDENTITY; /* size: 0x0030 */

struct tagMOUSEKEYS
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long iMaxSpeed;
  /* 0x000c */ unsigned long iTimeToMaxSpeed;
  /* 0x0010 */ unsigned long iCtrlSpeed;
  /* 0x0014 */ unsigned long dwReserved1;
  /* 0x0018 */ unsigned long dwReserved2;
}; /* size: 0x001c */

class AutoSpinlockHolder<56,16,1>;

struct PPM_WMI_IDLE_STATES
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned long TargetState;
  /* 0x000c */ unsigned long OldState;
  /* 0x0010 */ unsigned __int64 TargetProcessors;
  /* 0x0018 */ struct PPM_WMI_IDLE_STATE State[1];
}; /* size: 0x0038 */

typedef struct _RPC_POLICY
{
  /* 0x0000 */ unsigned int Length;
  /* 0x0004 */ unsigned long EndpointFlags;
  /* 0x0008 */ unsigned long NICFlags;
} RPC_POLICY, *PRPC_POLICY; /* size: 0x000c */

typedef struct _ACCESS_DENIED_CALLBACK_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long SidStart;
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE; /* size: 0x000c */

typedef struct _TOKEN_GROUPS
{
  /* 0x0000 */ unsigned long GroupCount;
  /* 0x0004 */ long Padding_1010;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS; /* size: 0x0018 */

class XeSosPkg::deadlock_scheduler_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1011[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int waited_resourceOffset;
    /* 0x0000 */ const int passesOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class CAutoBase<DkParameter>
{
  /* 0x0000 */ class DkParameter* m_pt;
}; /* size: 0x0008 */

typedef struct _TOKEN_PRIVILEGES
{
  /* 0x0000 */ unsigned long PrivilegeCount;
  /* 0x0004 */ struct _LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES; /* size: 0x0010 */

class Spinlock<90,12,1>
{
}; /* size: 0x0004 */

struct ISOSHost_Mutex
{
}; /* size: 0x0008 */

struct ANON_OBJECT_HEADER
{
  /* 0x0000 */ unsigned short Sig1;
  /* 0x0002 */ unsigned short Sig2;
  /* 0x0004 */ unsigned short Version;
  /* 0x0006 */ unsigned short Machine;
  /* 0x0008 */ unsigned long TimeDateStamp;
  /* 0x000c */ struct _GUID ClassID;
  /* 0x001c */ unsigned long SizeOfData;
}; /* size: 0x0020 */

class IPointerRelease
{
}; /* size: 0x0008 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ long Padding_1012;
  /* 0x0008 */ struct _RTL_CRITICAL_SECTION* CriticalSection;
  /* 0x0010 */ struct _LIST_ENTRY ProcessLocksList;
  /* 0x0020 */ unsigned long EntryCount;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ unsigned short CreatorBackTraceIndexHigh;
  /* 0x002e */ unsigned short SpareWORD;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG; /* size: 0x0030 */

typedef struct _RTL_CRITICAL_SECTION
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
  /* 0x0008 */ long LockCount;
  /* 0x000c */ long RecursionCount;
  /* 0x0010 */ void* OwningThread;
  /* 0x0018 */ void* LockSemaphore;
  /* 0x0020 */ unsigned __int64 SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION; /* size: 0x0028 */

typedef struct _PSFEATURE_OUTPUT
{
  /* 0x0000 */ int bPageIndependent;
  /* 0x0004 */ int bSetPageDevice;
} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT; /* size: 0x0008 */

class SOS_CacheStoreBase
{
  /* 0x0000 */ long Padding_1013[374];
  /* 0x05d8 */ unsigned long m_MinPageSize;
  union
  {
    /* 0x0000 */ class SOS_CacheStoreBase* sm_distributedCacheInstances[3];
    /* 0x0000 */ unsigned __int64 sm_distributedCacheInstanceUserData[3];
    /* 0x0000 */ const wchar_t* sm_distributedCacheNames[4];
  }; /* size: 0x0020 */
  /* 0x0020 */ long Padding_1014[367];
  /* 0x05dc */ enum cache_type m_type;
  /* 0x05e0 */ unsigned long m_configFlags;
  /* 0x05e4 */ enum SOSHOST_CACHESTORE_TYPE m_cacheStoreType;
  /* 0x05e8 */ int m_numberOfPartitions;
  /* 0x05ec */ long Padding_1015;
  /* 0x05f0 */ class IMemObj** m_partitionedPmos;
}; /* size: 0x0600 */

struct MemoryUtilizationEffects::EffectInfo
{
  /* 0x0000 */ unsigned long duration;
  /* 0x0004 */ unsigned char state;
  /* 0x0005 */ unsigned char reversedIndicator;
  /* 0x0006 */ char __PADDING__[2];
}; /* size: 0x0008 */

class SOS_ResourceMonitorRingRecord
{
  /* 0x0000 */ long Padding_1016[34];
  /* 0x0088 */ enum resource_notification m_Notification;
  /* 0x008c */ unsigned long m_IndicatorsProcessWide;
  /* 0x0090 */ unsigned long m_IndicatorsSystemWide;
  /* 0x0094 */ unsigned short m_NodeId;
  /* 0x0096 */ char Padding_1017[2];
  /* 0x0098 */ struct MemoryUtilizationEffects::EffectInfo m_effects[3];
}; /* size: 0x00b0 */

class SOSQueue<SystemThread,144>
{
}; /* size: 0x0010 */

class SystemThreadDispatcher
{
  /* 0x0000 */ volatile long m_SysThreadsBeingCreated;
  /* 0x0004 */ volatile long m_IdleSysThreads;
  /* 0x0008 */ volatile long m_SysThreadCount;
  /* 0x000c */ int m_SysThreadFailure;
  /* 0x0010 */ volatile long m_MaxSysThreadLimit;
  /* 0x0014 */ long Padding_1018;
  /* 0x0018 */ class SOSQueue<Worker,0> m_workerQueue[2];
  /* 0x0038 */ class SOSQueue<SystemThread,144> m_sysThreadPool;
  /* 0x0048 */ class SchedulerManager* m_schedMan;
  /* 0x0050 */ struct SysThreadDispatcherSLock m_lock;
  /* 0x0054 */ volatile long m_MaxIdleSysThreads;
}; /* size: 0x0058 */

class RefCountImpl<SOS_PartitionedHeap>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class AutoSpinlockHolder<182,3,1>;

class SOSHost_CacheStoreHashBucketUserDataEnum
{
}; /* size: 0x0038 */

struct tagMONITORINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcMonitor;
  /* 0x0014 */ struct tagRECT rcWork;
  /* 0x0024 */ unsigned long dwFlags;
}; /* size: 0x0028 */

struct tagPROPPAGEINFO
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_1019;
  /* 0x0008 */ wchar_t* pszTitle;
  /* 0x0010 */ struct tagSIZE size;
  /* 0x0018 */ wchar_t* pszDocString;
  /* 0x0020 */ wchar_t* pszHelpFile;
  /* 0x0028 */ unsigned long dwHelpContext;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

typedef struct _WIN32_FILE_ATTRIBUTE_DATA
{
  /* 0x0000 */ unsigned long dwFileAttributes;
  /* 0x0004 */ struct _FILETIME ftCreationTime;
  /* 0x000c */ struct _FILETIME ftLastAccessTime;
  /* 0x0014 */ struct _FILETIME ftLastWriteTime;
  /* 0x001c */ unsigned long nFileSizeHigh;
  /* 0x0020 */ unsigned long nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *PWIN32_FILE_ATTRIBUTE_DATA; /* size: 0x0024 */

class TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryDescriptor
{
  /* 0x0000 */ long Padding_1020[46];
  /* 0x00b8 */ enum entry_state m_State;
  /* 0x00bc */ int m_ShouldDestroyUserData;
  /* 0x00c0 */ int m_ShouldDestroyCacheKey;
  /* 0x00c4 */ long Padding_1021;
  /* 0x00c8 */ class TCacheStore<CacheProbabilisticAlgorithm>* m_cacheStore;
  /* 0x00d0 */ class IMemObj* m_pmo;
  /* 0x00d8 */ class TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy* m_secondaryProxies;
}; /* size: 0x00e0 */

typedef struct _DOCINFOW
{
  /* 0x0000 */ int cbSize;
  /* 0x0004 */ long Padding_1022;
  /* 0x0008 */ const wchar_t* lpszDocName;
  /* 0x0010 */ const wchar_t* lpszOutput;
  /* 0x0018 */ const wchar_t* lpszDatatype;
  /* 0x0020 */ unsigned long fwType;
  /* 0x0024 */ long __PADDING__[1];
} DOCINFOW, *PDOCINFOW; /* size: 0x0028 */

class std::bad_typeid
{
}; /* size: 0x0018 */

typedef struct _RTL_BARRIER
{
  /* 0x0000 */ unsigned long Reserved1;
  /* 0x0004 */ unsigned long Reserved2;
  /* 0x0008 */ unsigned __int64 Reserved3[2];
  /* 0x0018 */ unsigned long Reserved4;
  /* 0x001c */ unsigned long Reserved5;
} RTL_BARRIER, *PRTL_BARRIER; /* size: 0x0020 */

struct tagEMRGLSBOUNDEDRECORD
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cbData;
  /* 0x001c */ unsigned char Data[1];
  /* 0x001d */ char __PADDING__[3];
}; /* size: 0x0020 */

struct tagEMRPOLYLINE16
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ unsigned long cpts;
  /* 0x001c */ struct tagPOINTS apts[1];
}; /* size: 0x0020 */

struct OneProcSimNodeContextSLock
{
}; /* size: 0x0004 */

struct ISWbemRefreshableItem
{
}; /* size: 0x0008 */

class CAutoRefc<XE_XMLConfiguredSessionEnumerator>
{
  /* 0x0000 */ class XE_XMLConfiguredSessionEnumerator* m_pt;
}; /* size: 0x0008 */

class SpinlockHolder<215,2,1>;

class CFnHashNames
{
}; /* size: 0x0001 */

typedef struct _DISPLAY_DEVICEA
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ char DeviceName[32];
  /* 0x0024 */ char DeviceString[128];
  /* 0x00a4 */ unsigned long StateFlags;
  /* 0x00a8 */ char DeviceID[128];
  /* 0x0128 */ char DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA; /* size: 0x01a8 */

typedef struct _remoteMETAFILEPICT
{
  /* 0x0000 */ long mm;
  /* 0x0004 */ long xExt;
  /* 0x0008 */ long yExt;
  /* 0x000c */ long Padding_1023;
  /* 0x0010 */ struct _userHMETAFILE* hMF;
} remoteMETAFILEPICT, *PremoteMETAFILEPICT; /* size: 0x0018 */

typedef struct _tagPROTOCOL_ARGUMENT
{
  /* 0x0000 */ const wchar_t* szMethod;
  /* 0x0008 */ const wchar_t* szTargetUrl;
} tagPROTOCOL_ARGUMENT, *PtagPROTOCOL_ARGUMENT; /* size: 0x0010 */

class Spinlock<131,6,1>
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::helper_attributes::repeatableAttribute
{
} _vc_attributes::helper_attributes::repeatableAttribute, *P_vc_attributes::helper_attributes::repeatableAttribute; /* size: 0x0001 */

class ExcHandler
{
  /* 0x0000 */ unsigned __int64 exc_seccookie;
  /* 0x0008 */ class ExcHandler* exc_prev;
  /* 0x0010 */ void* exc_func /* function */;
  /* 0x0018 */ unsigned short exc_number;
  /* 0x001a */ unsigned char exc_severity;
}; /* size: 0x0020 */

struct tagEMRSCALEVIEWPORTEXTEX
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ long xNum;
  /* 0x000c */ long xDenom;
  /* 0x0010 */ long yNum;
  /* 0x0014 */ long yDenom;
}; /* size: 0x0018 */

struct tagENHMETAHEADER
{
  /* 0x0000 */ unsigned long iType;
  /* 0x0004 */ unsigned long nSize;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ struct _RECTL rclFrame;
  /* 0x0028 */ unsigned long dSignature;
  /* 0x002c */ unsigned long nVersion;
  /* 0x0030 */ unsigned long nBytes;
  /* 0x0034 */ unsigned long nRecords;
  /* 0x0038 */ unsigned short nHandles;
  /* 0x003a */ unsigned short sReserved;
  /* 0x003c */ unsigned long nDescription;
  /* 0x0040 */ unsigned long offDescription;
  /* 0x0044 */ unsigned long nPalEntries;
  /* 0x0048 */ struct tagSIZE szlDevice;
  /* 0x0050 */ struct tagSIZE szlMillimeters;
  /* 0x0058 */ unsigned long cbPixelFormat;
  /* 0x005c */ unsigned long offPixelFormat;
  /* 0x0060 */ unsigned long bOpenGL;
  /* 0x0064 */ struct tagSIZE szlMicrometers;
}; /* size: 0x006c */

class Spinlock<172,3,1>
{
}; /* size: 0x0004 */

struct XE_DeferredEvent
{
  /* 0x0000 */ long Padding_1024[2];
  /* 0x0008 */ struct IXMLDOMNode* m_eventConfig;
}; /* size: 0x0010 */

struct QExecSLock
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

struct tagMOUSEMOVEPOINT
{
  /* 0x0000 */ int x;
  /* 0x0004 */ int y;
  /* 0x0008 */ unsigned long time;
  /* 0x000c */ long Padding_1025;
  /* 0x0010 */ unsigned __int64 dwExtraInfo;
}; /* size: 0x0018 */

class ISOSHost_SharedMemoryImpl
{
}; /* size: 0x0028 */

typedef struct _cpinfoexA
{
  /* 0x0000 */ unsigned int MaxCharSize;
  /* 0x0004 */ unsigned char DefaultChar[2];
  /* 0x0006 */ unsigned char LeadByte[12];
  /* 0x0012 */ wchar_t UnicodeDefaultChar;
  /* 0x0014 */ unsigned int CodePage;
  /* 0x0018 */ char CodePageName[260];
} cpinfoexA, *PcpinfoexA; /* size: 0x011c */

typedef struct _JIT_DEBUG_INFO
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwProcessorArchitecture;
  /* 0x0008 */ unsigned long dwThreadID;
  /* 0x000c */ unsigned long dwReserved0;
  /* 0x0010 */ unsigned __int64 lpExceptionAddress;
  /* 0x0018 */ unsigned __int64 lpExceptionRecord;
  /* 0x0020 */ unsigned __int64 lpContextRecord;
} JIT_DEBUG_INFO, *PJIT_DEBUG_INFO; /* size: 0x0028 */

class SpinlockHolder<92,11,1>;

struct ITypeLib2
{
}; /* size: 0x0008 */

class Spinlock<251,1,1>
{
}; /* size: 0x0004 */

struct SecuritySLock
{
}; /* size: 0x0004 */

class ContextUMSProxy
{
  /* 0x0000 */ struct _SLIST_ENTRY m_slistLink;
  /* 0x0010 */ class SEListElem m_listLink;
  /* 0x0020 */ class Worker* m_Worker;
  /* 0x0028 */ void* m_UmsContext;
}; /* size: 0x0030 */

class Spinlock<39,18,1>
{
}; /* size: 0x0004 */

typedef struct _wireSAFEARRAY
{
  /* 0x0000 */ unsigned short cDims;
  /* 0x0002 */ unsigned short fFeatures;
  /* 0x0004 */ unsigned long cbElements;
  /* 0x0008 */ unsigned long cLocks;
  /* 0x000c */ long Padding_1026;
  /* 0x0010 */ struct _wireSAFEARRAY_UNION uArrayStructs;
  /* 0x0038 */ struct tagSAFEARRAYBOUND rgsabound[1];
} wireSAFEARRAY, *PwireSAFEARRAY; /* size: 0x0040 */

struct tagEMRSETCOLORADJUSTMENT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct tagCOLORADJUSTMENT ColorAdjustment;
}; /* size: 0x0020 */

class Spinlock<175,3,1>
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::nonextensibleAttribute
{
} _vc_attributes::nonextensibleAttribute, *P_vc_attributes::nonextensibleAttribute; /* size: 0x0001 */

class AutoSpinlockHolder<298,1,1>;

struct XMLColumnTransformRule
{
  /* 0x0000 */ class XE_AutoRg<unsigned short> m_columnName;
  /* 0x0008 */ struct ColumnTransformRule m_rule;
}; /* size: 0x0010 */

struct tagPOLYTEXTW
{
  /* 0x0000 */ int x;
  /* 0x0004 */ int y;
  /* 0x0008 */ unsigned int n;
  /* 0x000c */ long Padding_1027;
  /* 0x0010 */ const wchar_t* lpstr;
  /* 0x0018 */ unsigned int uiFlags;
  /* 0x001c */ struct tagRECT rcl;
  /* 0x002c */ long Padding_1028;
  /* 0x0030 */ int* pdx;
}; /* size: 0x0038 */

struct tagSOLE_AUTHENTICATION_INFO
{
  /* 0x0000 */ unsigned long dwAuthnSvc;
  /* 0x0004 */ unsigned long dwAuthzSvc;
  /* 0x0008 */ void* pAuthInfo;
}; /* size: 0x0010 */

struct DroppedAllocUnitSLock
{
}; /* size: 0x0004 */

struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::FragmentDesc
{
  /* 0x0000 */ unsigned char* m_start;
  /* 0x0008 */ unsigned char* m_end;
  /* 0x0010 */ int m_pagesPerFragment;
  /* 0x0014 */ long Padding_1029;
  /* 0x0018 */ struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::FragmentDesc* m_nextFragment;
  /* 0x0020 */ int m_freePageCount;
  /* 0x0024 */ long Padding_1030[3];
  /* 0x0030 */ class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::PageDesc,16> m_freePages;
  /* 0x0040 */ unsigned char* m_unallocated;
  /* 0x0048 */ int m_pageBeingCommitted;
  /* 0x004c */ long Padding_1031;
  /* 0x0050 */ class DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>* m_allocator;
  /* 0x0058 */ long __PADDING__[2];
}; /* size: 0x0060 */

class PerCPUData<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition>
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0010 */

class DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>
{
  union
  {
    /* 0x0000 */ int sm_initialized;
    /* 0x0000 */ class MemoryClerk* m_clerk;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short m_nodeCount;
  /* 0x000a */ char Padding_1032[6];
  /* 0x0010 */ unsigned char* m_outlineBuffer;
  /* 0x0018 */ unsigned __int64 m_everOnlineNodes;
  /* 0x0020 */ long Padding_1033[8];
  /* 0x0040 */ struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::FragmentDesc m_fragment;
  /* 0x00a0 */ int m_fragmentBeingCreated;
  /* 0x00a4 */ long Padding_1034[7];
  /* 0x00c0 */ class PerCPUData<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition> m_cpuParts;
  /* 0x00d0 */ long Padding_1035[12];
  /* 0x0100 */ struct DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::NodePartition m_nodePart[64];
}; /* size: 0x2100 */

typedef struct __vc_attributes::atl::tag_nameAttribute
{
  /* 0x0000 */ const char* name;
  /* 0x0008 */ const char* parse_func;
} _vc_attributes::atl::tag_nameAttribute, *P_vc_attributes::atl::tag_nameAttribute; /* size: 0x0010 */

struct tagHELPWININFOW
{
  /* 0x0000 */ int wStructSize;
  /* 0x0004 */ int x;
  /* 0x0008 */ int y;
  /* 0x000c */ int dx;
  /* 0x0010 */ int dy;
  /* 0x0014 */ int wMax;
  /* 0x0018 */ wchar_t rgchMember[2];
}; /* size: 0x001c */

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
  /* 0x0000 */ unsigned __int64 LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION; /* size: 0x0008 */

typedef struct __vc_attributes::idAttribute
{
  /* 0x0000 */ int id_num;
} _vc_attributes::idAttribute, *P_vc_attributes::idAttribute; /* size: 0x0004 */

class AutoSpinlockHolder<129,7,1>;

class SOS_IOCompRequest
{
  union
  {
    /* 0x0000 */ const unsigned short ALIVE_SIGNATURE;
    /* 0x0000 */ struct _OVERLAPPED m_nt;
  }; /* size: 0x0020 */
  /* 0x0020 */ unsigned long m_crc32;
  /* 0x0024 */ unsigned short m_signature;
  /* 0x0026 */ char Padding_1036[2];
  /* 0x0028 */ class SEListElem m_link;
  /* 0x0038 */ void* m_fileHandle;
  /* 0x0040 */ unsigned long m_actualBytes;
  /* 0x0044 */ int m_errcode;
  /* 0x0048 */ void* m_pCR /* function */;
  /* 0x0050 */ void* m_pUserData;
  /* 0x0058 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_enqueueTicks;
  /* 0x0060 */ unsigned short m_flag;
  /* 0x0062 */ char Padding_1037[6];
  /* 0x0068 */ class SOS_ResourceGroup* m_ResourceGroup;
  /* 0x0070 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ResTag;
  /* 0x0078 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_LimitTag;
  /* 0x0080 */ unsigned __int64 m_ShareIOs;
  /* 0x0088 */ void* m_VolumeId;
}; /* size: 0x0090 */

struct SOS_IOCompRequestEnum::Element
{
  /* 0x0000 */ class SOS_IOCompRequest m_ioCompReq;
  /* 0x0090 */ const void* m_originalPtr;
  /* 0x0098 */ enum SOS_Scheduler::IOType m_ioType;
  /* 0x009c */ long Padding_1038;
  /* 0x00a0 */ class SOS_Scheduler* m_pSched;
}; /* size: 0x00a8 */

class MutexBlockerEnumerator
{
  /* 0x0000 */ long Padding_1039[2];
  /* 0x0008 */ class SOS_Task* m_blockingTask;
  /* 0x0010 */ int m_alreadyEnumerated;
}; /* size: 0x0018 */

struct MatrixMemTableStateSLock
{
}; /* size: 0x0004 */

typedef struct _PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned char Version;
  /* 0x0003 */ unsigned char HwCountersCount;
  /* 0x0004 */ unsigned long ContextSwitchCount;
  /* 0x0008 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0010 */ unsigned __int64 CycleTime;
  /* 0x0018 */ unsigned long RetryCount;
  /* 0x001c */ unsigned long Reserved;
  /* 0x0020 */ struct _HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA; /* size: 0x0120 */

struct XE_TArray<XEPackage *,2>
{
  /* 0x0000 */ struct XEPackage* m_array[2];
}; /* size: 0x0010 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

typedef struct _devicemodeA
{
  /* 0x0000 */ unsigned char dmDeviceName[32];
  /* 0x0020 */ unsigned short dmSpecVersion;
  /* 0x0022 */ unsigned short dmDriverVersion;
  /* 0x0024 */ unsigned short dmSize;
  /* 0x0026 */ unsigned short dmDriverExtra;
  /* 0x0028 */ unsigned long dmFields;
  union
  {
    struct
    {
      /* 0x002c */ short dmOrientation;
      /* 0x002e */ short dmPaperSize;
      /* 0x0030 */ short dmPaperLength;
      /* 0x0032 */ short dmPaperWidth;
      /* 0x0034 */ short dmScale;
      /* 0x0036 */ short dmCopies;
      /* 0x0038 */ short dmDefaultSource;
      /* 0x003a */ short dmPrintQuality;
    }; /* size: 0x0010 */
    struct
    {
      /* 0x002c */ struct _POINTL dmPosition;
      /* 0x0034 */ unsigned long dmDisplayOrientation;
      /* 0x0038 */ unsigned long dmDisplayFixedOutput;
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
  /* 0x003c */ short dmColor;
  /* 0x003e */ short dmDuplex;
  /* 0x0040 */ short dmYResolution;
  /* 0x0042 */ short dmTTOption;
  /* 0x0044 */ short dmCollate;
  /* 0x0046 */ unsigned char dmFormName[32];
  /* 0x0066 */ unsigned short dmLogPixels;
  /* 0x0068 */ unsigned long dmBitsPerPel;
  /* 0x006c */ unsigned long dmPelsWidth;
  /* 0x0070 */ unsigned long dmPelsHeight;
  union
  {
    /* 0x0074 */ unsigned long dmDisplayFlags;
    /* 0x0074 */ unsigned long dmNup;
  }; /* size: 0x0004 */
  /* 0x0078 */ unsigned long dmDisplayFrequency;
  /* 0x007c */ unsigned long dmICMMethod;
  /* 0x0080 */ unsigned long dmICMIntent;
  /* 0x0084 */ unsigned long dmMediaType;
  /* 0x0088 */ unsigned long dmDitherType;
  /* 0x008c */ unsigned long dmReserved1;
  /* 0x0090 */ unsigned long dmReserved2;
  /* 0x0094 */ unsigned long dmPanningWidth;
  /* 0x0098 */ unsigned long dmPanningHeight;
} devicemodeA, *PdevicemodeA; /* size: 0x009c */

class UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

typedef struct _CONSOLE_FONT_INFOEX
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long nFont;
  /* 0x0008 */ struct _COORD dwFontSize;
  /* 0x000c */ unsigned int FontFamily;
  /* 0x0010 */ unsigned int FontWeight;
  /* 0x0014 */ wchar_t FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX; /* size: 0x0054 */

typedef struct _PACKEDEVENTINFO
{
  /* 0x0000 */ unsigned long ulSize;
  /* 0x0004 */ unsigned long ulNumEventsForLogFile;
  /* 0x0008 */ unsigned long* ulOffsets /* zero-length array */;
} PACKEDEVENTINFO, *PPACKEDEVENTINFO; /* size: 0x0008 */

class SpinlockHolder<17,19,1>;

class CAutoRg<XE_LogSpecs::LogSpec>
{
}; /* size: 0x0008 */

class SEListEnum<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

struct ISOSHost_RWLock
{
}; /* size: 0x0008 */

class Spinlock<155,3,1>
{
}; /* size: 0x0004 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;

typedef struct _WIN32_FIND_STREAM_DATA
{
  /* 0x0000 */ union _LARGE_INTEGER StreamSize;
  /* 0x0008 */ wchar_t cStreamName[296];
} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA; /* size: 0x0258 */

struct HTASK__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class SpinlockHolder<323,1,1>;

struct $_TypeDescriptor$_extraBytes_26
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[26];
}; /* size: 0x002a */

struct tagRPC_ERROR_ENUM_HANDLE
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ long Padding_1040;
  /* 0x0008 */ void* CurrentPos;
  /* 0x0010 */ void* Head;
}; /* size: 0x0018 */

class Spinlock<130,7,1>
{
}; /* size: 0x0004 */

class ISOSHost_TaskAutoSwitchNonPreemptiveHelper
{
  /* 0x0000 */ struct ISOSHost* const m_pISOSHost;
  /* 0x0008 */ void* const m_pvBuf;
}; /* size: 0x0010 */

typedef struct _UUID_VECTOR
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_1041;
  /* 0x0008 */ struct _GUID* Uuid[1];
} UUID_VECTOR, *PUUID_VECTOR; /* size: 0x0010 */

class TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>
{
}; /* size: 0x0018 */

struct std::_Arithmetic_traits<double>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class AbortTaskListEntry
{
  /* 0x0000 */ long Padding_1042[4];
  /* 0x0010 */ unsigned long m_RetCode;
  /* 0x0014 */ unsigned long m_TaskMark;
}; /* size: 0x0018 */

struct HWINSTA__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct tagWINDOWINFO
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ struct tagRECT rcWindow;
  /* 0x0014 */ struct tagRECT rcClient;
  /* 0x0024 */ unsigned long dwStyle;
  /* 0x0028 */ unsigned long dwExStyle;
  /* 0x002c */ unsigned long dwWindowStatus;
  /* 0x0030 */ unsigned int cxWindowBorders;
  /* 0x0034 */ unsigned int cyWindowBorders;
  /* 0x0038 */ unsigned short atomWindowType;
  /* 0x003a */ unsigned short wCreatorVersion;
}; /* size: 0x003c */

class SchedulerManagerList
{
}; /* size: 0x0018 */

class SchedulerManager::SchedulerList
{
  /* 0x0000 */ class SchedulerManagerList m_list;
  /* 0x0018 */ unsigned long m_numSchedulers;
  /* 0x001c */ long Padding_1043;
  /* 0x0020 */ unsigned __int64 m_affinity;
  /* 0x0028 */ class SOS_RWLock m_lock;
}; /* size: 0x0058 */

class SchedulerManager
{
  /* 0x0000 */ long Padding_1044[6];
  /* 0x0018 */ class SchedulerManager::SchedulerList m_onlineSchedulers;
  /* 0x0070 */ class SchedulerManager::SchedulerList m_offlineSchedulers;
  /* 0x00c8 */ class SystemThreadDispatcher m_systemThreadDispatcher;
  /* 0x0120 */ class IMemObj* m_pMemObj;
  /* 0x0128 */ class SOS_Node* m_pNode;
  /* 0x0130 */ unsigned long m_LastBestSchedulerToUse;
  /* 0x0134 */ unsigned long m_FirstSchedulerId;
  /* 0x0138 */ unsigned long m_LastSchedulerId;
}; /* size: 0x0140 */

struct SpinlockStat::Entry
{
  /* 0x0000 */ unsigned __int64 m_spins;
  /* 0x0008 */ unsigned __int64 m_collisions;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_sleepTicks;
  /* 0x0018 */ unsigned long m_backoffs;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class SpinlockStat
{
  /* 0x0000 */ struct SpinlockStat::Entry m_entries[336];
}; /* size: 0x2a00 */

class CSystemTimes
{
  /* 0x0000 */ __int64 m_IdleTime;
  /* 0x0008 */ __int64 m_KernelTime;
  /* 0x0010 */ __int64 m_UserTime;
  /* 0x0018 */ __int64 m_WallClockTime;
}; /* size: 0x0020 */

class SchedulerMonitor::ProcessTrack
{
  /* 0x0000 */ unsigned int m_pass;
  /* 0x0004 */ long Padding_1045;
  /* 0x0008 */ class CThreadTimes m_procStart;
  /* 0x0020 */ class CThreadTimes m_procCurr;
  /* 0x0038 */ class CThreadTimes m_procDiff;
  /* 0x0050 */ class CSystemTimes m_sysStart;
  /* 0x0070 */ class CSystemTimes m_sysCurr;
  /* 0x0090 */ class CSystemTimes m_sysDiff;
  /* 0x00b0 */ struct _PROCESS_MEMORY_COUNTERS m_memStart;
  /* 0x00f8 */ struct _PROCESS_MEMORY_COUNTERS m_memCurr;
}; /* size: 0x0140 */

class SchedulerMonitor
{
  union
  {
    struct
    {
      /* 0x0000 */ void* m_SnapshotHdl;
      /* 0x0008 */ class Worker* m_MonitoredWorker;
    }; /* size: 0x0010 */
    /* 0x0000 */ class SOS_Node* sm_principalNode;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned int m_nPasses;
  /* 0x0014 */ long Padding_1046;
  /* 0x0018 */ class SOS_Node* m_localNode;
  /* 0x0020 */ class SOS_Task* m_pTask;
  /* 0x0028 */ volatile long m_prevIOCompletionPasses;
  /* 0x002c */ long Padding_1047;
  /* 0x0030 */ class SchedulerMonitor::Track m_ioTrack;
  /* 0x01d0 */ volatile long m_prevRMNotificationsSent;
  /* 0x01d4 */ long Padding_1048;
  /* 0x01d8 */ __int64 m_prevRMMemoryAllocated;
  /* 0x01e0 */ class SchedulerMonitor::Track m_rmTrack;
  /* 0x0380 */ volatile long m_sumLoadBalanceFactor;
  /* 0x0384 */ long Padding_1049;
  /* 0x0388 */ class SchedulerMonitor::ProcessTrack m_onlineDeadlockTrack;
  /* 0x04c8 */ class SchedulerMonitor::ProcessTrack m_offlineDeadlockTrack;
  /* 0x0608 */ class SchedulerMonitor::ProcessTrack m_healthTrack;
}; /* size: 0x0748 */

class SOS_Node
{
  /* 0x0000 */ long Padding_1050[34];
  /* 0x0088 */ unsigned short m_NodeId;
  /* 0x008a */ char Padding_1051[6];
  /* 0x0090 */ class StackFramesStore* m_StackStore;
  /* 0x0098 */ class MemoryClerk* m_MemoryClerk;
  /* 0x00a0 */ class SOS_Scheduler* m_AnyScheduler;
  /* 0x00a8 */ volatile long m_IOCompletionPasses;
  /* 0x00ac */ volatile int m_IOCompletionActive;
  /* 0x00b0 */ class Worker* m_IOCompletionListener;
  /* 0x00b8 */ class NodeAffinity m_CPUMask;
  /* 0x00c8 */ class SOS_NodeInfo* m_NodeInfo;
  /* 0x00d0 */ class MemoryNode* m_MemoryNode;
  /* 0x00d8 */ volatile long m_AvgLoadBalanceFactor;
  /* 0x00dc */ volatile long m_SchedulerSwitch;
  /* 0x00e0 */ volatile long m_SchedulerPass;
  /* 0x00e4 */ enum SOS_Node::NodeIdleState m_IdleState;
  /* 0x00e8 */ class SOS_RingBuffer* m_ExceptionRingBuffer;
  /* 0x00f0 */ class SOS_RingBuffer* m_SpinlockBackoffRingBuffer;
  /* 0x00f8 */ class SOS_TraceStream* m_ExternalDataStream;
  union
  {
    /* 0x0000 */ __int64 sm_lastUsedNodeCount;
    /* 0x0000 */ const unsigned int sm_cExceptionCounters;
  }; /* size: 0x0008 */
  /* 0x0008 */ long Padding_1052[62];
  /* 0x0100 */ struct NodeSLock m_SpinLock;
  /* 0x0104 */ long Padding_1053;
  /* 0x0108 */ class IMemObj* m_pMemObj;
  /* 0x0110 */ class SchedulerManager m_normalSchedulerManager;
  /* 0x0250 */ class SchedulerManager m_hiddenSchedulerManager;
  /* 0x0390 */ void* m_hdlCompPort;
  /* 0x0398 */ class ResourceMonitor m_resourceMonitor;
  /* 0x0588 */ volatile long m_LazyPreemptiveWorkers;
  /* 0x058c */ long Padding_1054;
  /* 0x0590 */ class ClockAlgorithm::ControlInfo m_clockAlgorithmControlInfo;
  /* 0x05c0 */ unsigned long m_Flags;
  /* 0x05c4 */ long Padding_1055;
  /* 0x05c8 */ unsigned __int64 m_PermanentTasksDistribution;
  /* 0x05d0 */ unsigned __int64 m_TimerTasksDistribution;
  /* 0x05d8 */ unsigned long m_avgCpuAllocationNewWorker[64];
  /* 0x06d8 */ class SpinlockStat m_spinlockStats;
  /* 0x30d8 */ class NodeMemoryNotification m_memNotification;
  /* 0x3128 */ class MemoryClerk** m_defaultMemoryClerks;
  /* 0x3130 */ __int64 m_lastSchedulingActivity;
  /* 0x3138 */ class SchedulerMonitor m_schedMon;
  /* 0x3880 */ unsigned long m_nextCPUToBindHiddenScheduler;
  /* 0x3884 */ long Padding_1056;
  /* 0x3888 */ class SOS_Mutex m_stackStoreCreationMutex;
  /* 0x38b8 */ class CAutoRg<unsigned __int64> m_pExceptionCounters;
}; /* size: 0x38c0 */

class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct IMallocSpy
{
}; /* size: 0x0008 */

struct std::tr1::add_reference<void const >
{
}; /* size: 0x0001 */

struct tagVS_FIXEDFILEINFO
{
  /* 0x0000 */ unsigned long dwSignature;
  /* 0x0004 */ unsigned long dwStrucVersion;
  /* 0x0008 */ unsigned long dwFileVersionMS;
  /* 0x000c */ unsigned long dwFileVersionLS;
  /* 0x0010 */ unsigned long dwProductVersionMS;
  /* 0x0014 */ unsigned long dwProductVersionLS;
  /* 0x0018 */ unsigned long dwFileFlagsMask;
  /* 0x001c */ unsigned long dwFileFlags;
  /* 0x0020 */ unsigned long dwFileOS;
  /* 0x0024 */ unsigned long dwFileType;
  /* 0x0028 */ unsigned long dwFileSubtype;
  /* 0x002c */ unsigned long dwFileDateMS;
  /* 0x0030 */ unsigned long dwFileDateLS;
}; /* size: 0x0034 */

class AutoSpinlockHolder<131,6,1>;

struct SDetailedMemObjInfo
{
  /* 0x0000 */ void* address;
  /* 0x0008 */ int cchFilename;
  /* 0x000c */ long Padding_1057;
  /* 0x0010 */ const char* szFilename;
  /* 0x0018 */ int iLine;
  /* 0x001c */ long Padding_1058;
  /* 0x0020 */ __int64 cbSize;
  /* 0x0028 */ int bTag;
  /* 0x002c */ unsigned long dwCreationTime;
  /* 0x0030 */ unsigned long nthCall;
  /* 0x0034 */ long Padding_1059;
  /* 0x0038 */ void* stackTrace;
}; /* size: 0x0040 */

struct _TP_WORK;

class Spinlock<315,1,1>
{
}; /* size: 0x0004 */

struct tagEMREXTCREATEPEN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPen;
  /* 0x000c */ unsigned long offBmi;
  /* 0x0010 */ unsigned long cbBmi;
  /* 0x0014 */ unsigned long offBits;
  /* 0x0018 */ unsigned long cbBits;
  /* 0x001c */ struct tagEXTLOGPEN32 elp;
}; /* size: 0x0038 */

class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct tagWTSSESSION_NOTIFICATION
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ unsigned long dwSessionId;
}; /* size: 0x0008 */

class std::numeric_limits<long>
{
  union
  {
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

struct IXMLDOMCharacterData
{
}; /* size: 0x0008 */

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent> >;

class CAutoShrink
{
  /* 0x0000 */ class IMemObj* m_pmo;
  /* 0x0008 */ void* m_pvOldMark;
}; /* size: 0x0010 */

struct tagEMRALPHABLEND
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ struct _RECTL rclBounds;
  /* 0x0018 */ long xDest;
  /* 0x001c */ long yDest;
  /* 0x0020 */ long cxDest;
  /* 0x0024 */ long cyDest;
  /* 0x0028 */ unsigned long dwRop;
  /* 0x002c */ long xSrc;
  /* 0x0030 */ long ySrc;
  /* 0x0034 */ struct tagXFORM xformSrc;
  /* 0x004c */ unsigned long crBkColorSrc;
  /* 0x0050 */ unsigned long iUsageSrc;
  /* 0x0054 */ unsigned long offBmiSrc;
  /* 0x0058 */ unsigned long cbBmiSrc;
  /* 0x005c */ unsigned long offBitsSrc;
  /* 0x0060 */ unsigned long cbBitsSrc;
  /* 0x0064 */ long cxSrc;
  /* 0x0068 */ long cySrc;
}; /* size: 0x006c */

struct tagWNODE_METHOD_ITEM
{
  /* 0x0000 */ struct _WNODE_HEADER WnodeHeader;
  /* 0x0030 */ unsigned long OffsetInstanceName;
  /* 0x0034 */ unsigned long InstanceIndex;
  /* 0x0038 */ unsigned long MethodId;
  /* 0x003c */ unsigned long DataBlockOffset;
  /* 0x0040 */ unsigned long SizeDataBlock;
  union
  {
    /* 0x0044 */ unsigned char* VariableData /* zero-length array */;
    /* 0x0044 */ long __PADDING__[1];
  }; /* size: 0x0004 */
}; /* size: 0x0048 */

class ISOSHostImpl
{
}; /* size: 0x0090 */

struct MemMgrSLock
{
}; /* size: 0x0004 */

class FreePagePool
{
  /* 0x0000 */ volatile long m_NumberOfPagesInUse;
  /* 0x0004 */ volatile long m_NumberOfPages;
  /* 0x0008 */ unsigned __int64 m_pageSize;
  /* 0x0010 */ unsigned char* m_buffer;
  /* 0x0018 */ unsigned __int64 m_bufferSize;
  /* 0x0020 */ struct MemMgrSLock m_freePagesLock;
  /* 0x0024 */ long Padding_1060;
  /* 0x0028 */ class SEList<FreePageElem,0> m_freePages;
}; /* size: 0x0038 */

struct ICallFactory
{
}; /* size: 0x0008 */

class IContextHandleImpl;

class std::numeric_limits<float>
{
  union
  {
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
    /* 0x0000 */ const int max_exponent;
    /* 0x0000 */ const int max_exponent10;
    /* 0x0000 */ const int min_exponent;
    /* 0x0000 */ const int min_exponent10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

typedef struct _DISPLAY_DEVICEW
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ wchar_t DeviceName[32];
  /* 0x0044 */ wchar_t DeviceString[128];
  /* 0x0144 */ unsigned long StateFlags;
  /* 0x0148 */ wchar_t DeviceID[128];
  /* 0x0248 */ wchar_t DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW; /* size: 0x0348 */

class SpinlockHolder<179,3,1>;

class TList<SchedulerManager,Worker,16,TListSLock>
{
  /* 0x0000 */ long Padding_1061[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

struct ISOSHostPrev0
{
}; /* size: 0x0008 */

typedef struct _UMS_CREATE_THREAD_ATTRIBUTES
{
  /* 0x0000 */ unsigned long UmsVersion;
  /* 0x0004 */ long Padding_1062;
  /* 0x0008 */ void* UmsContext;
  /* 0x0010 */ void* UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES; /* size: 0x0018 */

struct value_entA
{
  /* 0x0000 */ char* ve_valuename;
  /* 0x0008 */ unsigned long ve_valuelen;
  /* 0x000c */ long Padding_1063;
  /* 0x0010 */ unsigned __int64 ve_valueptr;
  /* 0x0018 */ unsigned long ve_type;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
  /* 0x0000 */ struct _GUID EnlistmentId;
  /* 0x0010 */ struct _GUID UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT; /* size: 0x0020 */

struct XE_TEvent<3,0,13>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,13> m_dynamicAttr;
  /* 0x0288 */ struct XEEvent m_event;
}; /* size: 0x02d0 */

class SpinlockHolder<99,11,1>;

typedef struct _EXCEPTION_POINTERS
{
  /* 0x0000 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0008 */ struct _CONTEXT* ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS; /* size: 0x0010 */

class SpinlockHolder<223,2,1>;

typedef struct _FPO_DATA
{
  /* 0x0000 */ unsigned long ulOffStart;
  /* 0x0004 */ unsigned long cbProcSize;
  /* 0x0008 */ unsigned long cdwLocals;
  /* 0x000c */ unsigned short cdwParams;
  struct /* bitfield */
  {
    /* 0x000e */ unsigned short cbProlog : 8; /* bit position: 0 */
    /* 0x000e */ unsigned short cbRegs : 3; /* bit position: 8 */
    /* 0x000e */ unsigned short fHasSEH : 1; /* bit position: 11 */
    /* 0x000e */ unsigned short fUseBP : 1; /* bit position: 12 */
    /* 0x000e */ unsigned short reserved : 1; /* bit position: 13 */
    /* 0x000e */ unsigned short cbFrame : 2; /* bit position: 14 */
  }; /* bitfield */
} FPO_DATA, *PFPO_DATA; /* size: 0x0010 */

union DescriptorInfo::ClockAtomicInfo
{
  union
  {
    /* 0x0000 */ volatile struct DescriptorInfo::UsageInfo usageInfo;
    /* 0x0000 */ volatile unsigned __int64 lockxchgInfo;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class DescriptorInfo
{
  union
  {
    /* 0x0000 */ const unsigned long INVISIBLE;
    /* 0x0000 */ const unsigned long NOTPINNED;
    /* 0x0000 */ const unsigned long PINNED;
    /* 0x0000 */ const unsigned long DIRTY;
    /* 0x0000 */ const unsigned long MAX_PINNED_VALUE;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1064[5];
  /* 0x0018 */ union DescriptorInfo::ClockAtomicInfo m_atomicInfo;
  /* 0x0020 */ unsigned __int64 m_poolMask;
  struct /* bitfield */
  {
    /* 0x0028 */ int m_isOkToSimulate : 1; /* bit position: 0 */
    /* 0x0028 */ int m_isOkForHistory : 1; /* bit position: 1 */
  }; /* bitfield */
  /* 0x002c */ long Padding_1065;
  /* 0x0030 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_timeToGenerate;
  /* 0x0038 */ __int64 m_numberOfPages;
}; /* size: 0x0040 */

typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
  /* 0x0000 */ struct _GUID TmIdentity;
  /* 0x0010 */ unsigned long Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT; /* size: 0x0014 */

struct BatchSLock
{
}; /* size: 0x0004 */

struct LIST_ENTRY64
{
  /* 0x0000 */ unsigned __int64 Flink;
  /* 0x0008 */ unsigned __int64 Blink;
}; /* size: 0x0010 */

class SEList<SOS_Node,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct HMONITOR__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

struct XE_TCollection<1,0>::TCol<1>
{
}; /* size: 0x0001 */

typedef struct _MEMORYSTATUS
{
  /* 0x0000 */ unsigned long dwLength;
  /* 0x0004 */ unsigned long dwMemoryLoad;
  /* 0x0008 */ unsigned __int64 dwTotalPhys;
  /* 0x0010 */ unsigned __int64 dwAvailPhys;
  /* 0x0018 */ unsigned __int64 dwTotalPageFile;
  /* 0x0020 */ unsigned __int64 dwAvailPageFile;
  /* 0x0028 */ unsigned __int64 dwTotalVirtual;
  /* 0x0030 */ unsigned __int64 dwAvailVirtual;
} MEMORYSTATUS, *PMEMORYSTATUS; /* size: 0x0038 */

struct IWbemServices
{
}; /* size: 0x0008 */

typedef struct _CONSOLE_FONT_INFO
{
  /* 0x0000 */ unsigned long nFont;
  /* 0x0004 */ struct _COORD dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO; /* size: 0x0008 */

class AutoSpinlockHolder<156,3,1>;

struct CXReaderPosition
{
  /* 0x0000 */ unsigned long startOfPageXRef;
  /* 0x0004 */ unsigned int pageOffset;
}; /* size: 0x0008 */

class ResourceGroupData
{
}; /* size: 0x0134 */

typedef union __m128
{
  union
  {
    /* 0x0000 */ float m128_f32[4];
    /* 0x0000 */ unsigned __int64 m128_u64[2];
    /* 0x0000 */ char m128_i8[16];
    /* 0x0000 */ short m128_i16[8];
    /* 0x0000 */ int m128_i32[4];
    /* 0x0000 */ __int64 m128_i64[2];
    /* 0x0000 */ unsigned char m128_u8[16];
    /* 0x0000 */ unsigned short m128_u16[8];
    /* 0x0000 */ unsigned int m128_u32[4];
  }; /* size: 0x0010 */
} _m128, *P_m128; /* size: 0x0010 */

class SEListEnum<SOS_ResourceGroup,16>;

struct ResourceClerkListSLock
{
}; /* size: 0x0004 */

class TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock>
{
  /* 0x0000 */ long Padding_1066[4];
  /* 0x0010 */ struct ResourceClerkListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

struct tagCLEANLOCALSTORAGE
{
  /* 0x0000 */ struct IUnknown* pInterface;
  /* 0x0008 */ void* pStorage;
  /* 0x0010 */ unsigned long flags;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

class XeSqlPkg::databases_log_shrink
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1067[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class CSlotGroup
{
  /* 0x0000 */ long Padding_1068[2];
  /* 0x0008 */ const unsigned short m_cbSlotSize;
  /* 0x000a */ char Padding_1069[6];
  /* 0x0010 */ class CFreeSlot* m_pfsFreeList;
}; /* size: 0x0018 */

typedef struct _TOKEN_APPCONTAINER_INFORMATION
{
  /* 0x0000 */ void* TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION; /* size: 0x0008 */

struct tagTTPOLYGONHEADER
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long dwType;
  /* 0x0008 */ struct tagPOINTFX pfxStart;
}; /* size: 0x0010 */

typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW
{
  /* 0x0000 */ unsigned long dwReason;
  /* 0x0004 */ long Padding_1070;
  /* 0x0008 */ wchar_t* pszComment;
  /* 0x0010 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
  /* 0x0034 */ long __PADDING__[1];
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW; /* size: 0x0038 */

class std::basic_streambuf<char,std::char_traits<char> >
{
  /* 0x0000 */ long Padding_1071[2];
  /* 0x0008 */ class std::_Mutex _Mylock;
  /* 0x0010 */ char* _Gfirst;
  /* 0x0018 */ char* _Pfirst;
  /* 0x0020 */ char** _IGfirst;
  /* 0x0028 */ char** _IPfirst;
  /* 0x0030 */ char* _Gnext;
  /* 0x0038 */ char* _Pnext;
  /* 0x0040 */ char** _IGnext;
  /* 0x0048 */ char** _IPnext;
  /* 0x0050 */ int _Gcount;
  /* 0x0054 */ int _Pcount;
  /* 0x0058 */ int* _IGcount;
  /* 0x0060 */ int* _IPcount;
  /* 0x0068 */ class std::locale* _Plocale;
}; /* size: 0x0070 */

typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER
{
  /* 0x0000 */ unsigned char Name[16];
  /* 0x0010 */ unsigned char Date[12];
  /* 0x001c */ unsigned char UserID[6];
  /* 0x0022 */ unsigned char GroupID[6];
  /* 0x0028 */ unsigned char Mode[8];
  /* 0x0030 */ unsigned char Size[10];
  /* 0x003a */ unsigned char EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER; /* size: 0x003c */

class Spinlock<216,2,1>
{
}; /* size: 0x0004 */

class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct SEQueueSizeThreadSafeSLock
{
}; /* size: 0x0004 */

class SOS_StateProtectors<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost
{
}; /* size: 0x0001 */

typedef struct _lldiv_t
{
  /* 0x0000 */ __int64 quot;
  /* 0x0008 */ __int64 rem;
} lldiv_t, *Plldiv_t; /* size: 0x0010 */

class SEListEnum<PageHeapPageInfo,40>
{
  /* 0x0000 */ class SEList<PageHeapPageInfo,40>* m_pList;
  /* 0x0008 */ class PageHeapPageInfo* m_pNext;
}; /* size: 0x0010 */

typedef struct __vc_attributes::helper_attributes::requires_valueAttribute
{
} _vc_attributes::helper_attributes::requires_valueAttribute, *P_vc_attributes::helper_attributes::requires_valueAttribute; /* size: 0x0001 */

struct XE_TEvent<3,0,12>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,12> m_dynamicAttr;
  /* 0x0260 */ struct XEEvent m_event;
}; /* size: 0x02a8 */

class XeSosPkg::large_cache_memory_pressure
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1072[140];
      /* 0x0240 */ unsigned char m_buf[89];
    }; /* size: 0x0069 */
    /* 0x0000 */ const int cache_addressOffset;
    /* 0x0000 */ const int descriptor_addressOffset;
    /* 0x0000 */ const int user_data_addressOffset;
    /* 0x0000 */ const int size_in_pagesOffset;
    /* 0x0000 */ const int time_to_generateOffset;
    /* 0x0000 */ const int use_countOffset;
    /* 0x0000 */ const int average_intervalOffset;
    /* 0x0000 */ const int probability_of_reuseOffset;
    /* 0x0000 */ const int valueOffset;
    /* 0x0000 */ const int cutoff_indexOffset;
    /* 0x0000 */ const int benefit_cutoffOffset;
    /* 0x0000 */ const int was_removedOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x02a0 */

struct tagDIBSECTION
{
  /* 0x0000 */ struct tagBITMAP dsBm;
  /* 0x0020 */ struct tagBITMAPINFOHEADER dsBmih;
  /* 0x0048 */ unsigned long dsBitfields[3];
  /* 0x0054 */ long Padding_1073;
  /* 0x0058 */ void* dshSection;
  /* 0x0060 */ unsigned long dsOffset;
  /* 0x0064 */ long __PADDING__[1];
}; /* size: 0x0068 */

class TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>
{
}; /* size: 0x0038 */

struct tagICONMETRICSA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iHorzSpacing;
  /* 0x0008 */ int iVertSpacing;
  /* 0x000c */ int iTitleWrap;
  /* 0x0010 */ struct tagLOGFONTA lfFont;
}; /* size: 0x004c */

class Spinlock<61,16,1>
{
}; /* size: 0x0004 */

struct _ASSEMBLY_STORAGE_MAP;

typedef struct _tagAUTHENTICATEINFO
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ unsigned long dwReserved;
} tagAUTHENTICATEINFO, *PtagAUTHENTICATEINFO; /* size: 0x0008 */

struct XE_TCollection<0,1>::TCol<0>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<29,19,1>;

typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION; /* size: 0x0008 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>
{
  /* 0x0000 */ long Padding_1074[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class CAutoRg<CXFilePageForRead>
{
}; /* size: 0x0008 */

struct tagHIGHCONTRASTA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ char* lpszDefaultScheme;
}; /* size: 0x0010 */

class IMemoryAllocator
{
}; /* size: 0x0008 */

class XE_ConfiguredSession
{
  /* 0x0000 */ long Padding_1075[4];
  /* 0x0010 */ struct XEError m_err;
  /* 0x0028 */ class XE_AutoRg<XE_AutoRg<unsigned short> > m_pErrStrings;
  /* 0x0030 */ unsigned short m_nErrStrings;
  /* 0x0032 */ char Padding_1076[2];
  /* 0x0034 */ enum XE_ConfiguredSession::XECreateSessionOptions m_createFlags;
}; /* size: 0x0038 */

class SpinlockHolder<330,1,1>;

class TypeList<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

typedef struct _SECURITY_DESCRIPTOR_RELATIVE
{
  /* 0x0000 */ unsigned char Revision;
  /* 0x0001 */ unsigned char Sbz1;
  /* 0x0002 */ unsigned short Control;
  /* 0x0004 */ unsigned long Owner;
  /* 0x0008 */ unsigned long Group;
  /* 0x000c */ unsigned long Sacl;
  /* 0x0010 */ unsigned long Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, *PSECURITY_DESCRIPTOR_RELATIVE; /* size: 0x0014 */

class TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

typedef struct _TOKEN_STATISTICS
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ union _LARGE_INTEGER ExpirationTime;
  /* 0x0018 */ enum _TOKEN_TYPE TokenType;
  /* 0x001c */ enum _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  /* 0x0020 */ unsigned long DynamicCharged;
  /* 0x0024 */ unsigned long DynamicAvailable;
  /* 0x0028 */ unsigned long GroupCount;
  /* 0x002c */ unsigned long PrivilegeCount;
  /* 0x0030 */ struct _LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS; /* size: 0x0038 */

class CAutoBase<XMLColumnTransformRule>
{
  /* 0x0000 */ struct XMLColumnTransformRule* m_pt;
}; /* size: 0x0008 */

class XeSosPkg::crt_out_of_memory_routine_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1077[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int sizeOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct tagEMRSETMITERLIMIT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ float eMiterLimit;
}; /* size: 0x000c */

class SOS_CacheStore::ConfigurationInfo
{
  /* 0x0000 */ unsigned long m_EntriesPerTick;
}; /* size: 0x0004 */

typedef struct _GRADIENT_RECT
{
  /* 0x0000 */ unsigned long UpperLeft;
  /* 0x0004 */ unsigned long LowerRight;
} GRADIENT_RECT, *PGRADIENT_RECT; /* size: 0x0008 */

typedef struct __vc_attributes::progidAttribute
{
  /* 0x0000 */ const char* name;
} _vc_attributes::progidAttribute, *P_vc_attributes::progidAttribute; /* size: 0x0008 */

class XeSosPkg::thread_attached
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeSqlPkg::databases_log_file_used_size_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1078[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _IMAGE_RESOURCE_DATA_ENTRY
{
  /* 0x0000 */ unsigned long OffsetToData;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long CodePage;
  /* 0x000c */ unsigned long Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY; /* size: 0x0010 */

struct tagHEAPLIST32
{
  /* 0x0000 */ unsigned __int64 dwSize;
  /* 0x0008 */ unsigned long th32ProcessID;
  /* 0x000c */ long Padding_1079;
  /* 0x0010 */ unsigned __int64 th32HeapID;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>
{
}; /* size: 0x0018 */

class CAutoMalloc<DkParameter *>
{
}; /* size: 0x0008 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

typedef struct _COMSTAT
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long fCtsHold : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long fDsrHold : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long fRlsdHold : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long fXoffHold : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long fXoffSent : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long fEof : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long fTxim : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long fReserved : 25; /* bit position: 7 */
  }; /* bitfield */
  /* 0x0004 */ unsigned long cbInQue;
  /* 0x0008 */ unsigned long cbOutQue;
} COMSTAT, *PCOMSTAT; /* size: 0x000c */

typedef struct __vc_attributes::dispinterfaceAttribute
{
} _vc_attributes::dispinterfaceAttribute, *P_vc_attributes::dispinterfaceAttribute; /* size: 0x0001 */

class Spinlock<118,8,1>
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::atl::soap_methodAttribute
{
  /* 0x0000 */ const char* name;
} _vc_attributes::atl::soap_methodAttribute, *P_vc_attributes::atl::soap_methodAttribute; /* size: 0x0008 */

class ISOSHost_TaskCallbackImpl
{
}; /* size: 0x0028 */

typedef struct _ENUM_SERVICE_STATUS_PROCESSW
{
  /* 0x0000 */ wchar_t* lpServiceName;
  /* 0x0008 */ wchar_t* lpDisplayName;
  /* 0x0010 */ struct _SERVICE_STATUS_PROCESS ServiceStatusProcess;
  /* 0x0034 */ long __PADDING__[1];
} ENUM_SERVICE_STATUS_PROCESSW, *PENUM_SERVICE_STATUS_PROCESSW; /* size: 0x0038 */

class SOSHost_Node
{
}; /* size: 0x38c0 */

struct tagKERNINGPAIR
{
  /* 0x0000 */ unsigned short wFirst;
  /* 0x0002 */ unsigned short wSecond;
  /* 0x0004 */ int iKernAmount;
}; /* size: 0x0008 */

class AutoSpinlockHolder<132,5,1>;

struct tagCOLORMATCHTOTARGET
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long dwAction;
  /* 0x000c */ unsigned long dwFlags;
  /* 0x0010 */ unsigned long cbName;
  /* 0x0014 */ unsigned long cbData;
  /* 0x0018 */ unsigned char Data[1];
  /* 0x0019 */ char __PADDING__[3];
}; /* size: 0x001c */

class AutoSpinlockHolder<177,3,1>;

class SOS_MemoryFragmentDescriptor
{
  union
  {
    /* 0x0000 */ const unsigned int AdditionalFragmentSize;
    /* 0x0000 */ struct _SLIST_ENTRY m_next;
  }; /* size: 0x0010 */
  /* 0x0010 */ void* m_Address;
  /* 0x0018 */ unsigned __int64 m_Size;
  /* 0x0020 */ class SOS_MemoryFragmentManager* m_FragmentManager;
}; /* size: 0x0030 */

struct tagEMRCREATEPEN
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihPen;
  /* 0x000c */ struct tagLOGPEN lopn;
}; /* size: 0x001c */

struct ISequentialStream
{
}; /* size: 0x0008 */

typedef struct _BrowseDlgConfig_HW
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bIncludeInstanceIndex : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long bSingleCounterPerAdd : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long bSingleCounterPerDialog : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long bLocalCountersOnly : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long bWildCardInstances : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long bHideDetailBox : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long bInitializePath : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long bDisableMachineSelection : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long bIncludeCostlyObjects : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long bShowObjectBrowser : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long bReserved : 22; /* bit position: 10 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_1080;
  /* 0x0008 */ struct HWND__* hWndOwner;
  /* 0x0010 */ void* hDataSource;
  /* 0x0018 */ wchar_t* szReturnPathBuffer;
  /* 0x0020 */ unsigned long cchReturnPathLength;
  /* 0x0024 */ long Padding_1081;
  /* 0x0028 */ void* pCallBack /* function */;
  /* 0x0030 */ unsigned __int64 dwCallBackArg;
  /* 0x0038 */ long CallBackStatus;
  /* 0x003c */ unsigned long dwDefaultDetailLevel;
  /* 0x0040 */ wchar_t* szDialogBoxCaption;
} BrowseDlgConfig_HW, *PBrowseDlgConfig_HW; /* size: 0x0048 */

typedef struct __vc_attributes::moduleAttribute
{
  /* 0x0000 */ enum __vc_attributes::moduleAttribute::type_e type;
  /* 0x0004 */ long Padding_1082;
  /* 0x0008 */ const char* name;
  /* 0x0010 */ const char* version;
  /* 0x0018 */ const char* uuid;
  /* 0x0020 */ int lcid;
  /* 0x0024 */ BOOL control;
  /* 0x0025 */ char Padding_1083[3];
  /* 0x0028 */ const char* helpstring;
  /* 0x0030 */ int helpstringcontext;
  /* 0x0034 */ long Padding_1084;
  /* 0x0038 */ const char* helpstringdll;
  /* 0x0040 */ const char* helpfile;
  /* 0x0048 */ int helpcontext;
  /* 0x004c */ BOOL hidden;
  /* 0x004d */ BOOL restricted;
  /* 0x004e */ char Padding_1085[2];
  /* 0x0050 */ const char* custom;
  /* 0x0058 */ const char* resource_name;
} _vc_attributes::moduleAttribute, *P_vc_attributes::moduleAttribute; /* size: 0x0060 */

typedef struct _EVENT_TRACE_LOGFILEA
{
  /* 0x0000 */ char* LogFileName;
  /* 0x0008 */ char* LoggerName;
  /* 0x0010 */ __int64 CurrentTime;
  /* 0x0018 */ unsigned long BuffersRead;
  union
  {
    /* 0x001c */ unsigned long LogFileMode;
    /* 0x001c */ unsigned long ProcessTraceMode;
  }; /* size: 0x0004 */
  /* 0x0020 */ struct _EVENT_TRACE CurrentEvent;
  /* 0x0078 */ struct _TRACE_LOGFILE_HEADER LogfileHeader;
  /* 0x0190 */ void* BufferCallback /* function */;
  /* 0x0198 */ unsigned long BufferSize;
  /* 0x019c */ unsigned long Filled;
  /* 0x01a0 */ unsigned long EventsLost;
  /* 0x01a4 */ long Padding_1086;
  union
  {
    /* 0x01a8 */ void* EventCallback /* function */;
    /* 0x01a8 */ void* EventRecordCallback /* function */;
  }; /* size: 0x0008 */
  /* 0x01b0 */ unsigned long IsKernelTrace;
  /* 0x01b4 */ long Padding_1087;
  /* 0x01b8 */ void* Context;
} EVENT_TRACE_LOGFILEA, *PEVENT_TRACE_LOGFILEA; /* size: 0x01c0 */

struct std::is_error_code_enum<char const *>
{
}; /* size: 0x0001 */

struct ISOSHostPrev3
{
}; /* size: 0x0008 */

class std::_Winit
{
  /* 0x0000 */ int _Init_cnt;
}; /* size: 0x0001 */

struct $_TypeDescriptor$_extraBytes_19
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[19];
}; /* size: 0x0023 */

class PreemptiveSetter
{
  /* 0x0000 */ int m_needToSwitchBack;
}; /* size: 0x0004 */

struct CXFileDirectoryEntry
{
  /* 0x0000 */ unsigned long m_pageLocationPhysical;
}; /* size: 0x0004 */

typedef struct _RPC_SECURITY_QOS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Capabilities;
  /* 0x0008 */ unsigned long IdentityTracking;
  /* 0x000c */ unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS; /* size: 0x0010 */

struct OSAffinityChangeCallbackList
{
}; /* size: 0x0030 */

typedef struct _CONSOLE_HISTORY_INFO
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ unsigned int HistoryBufferSize;
  /* 0x0008 */ unsigned int NumberOfHistoryBuffers;
  /* 0x000c */ unsigned long dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO; /* size: 0x0010 */

typedef struct _PDH_RAW_LOG_RECORD
{
  /* 0x0000 */ unsigned long dwStructureSize;
  /* 0x0004 */ unsigned long dwRecordType;
  /* 0x0008 */ unsigned long dwItems;
  /* 0x000c */ unsigned char RawBytes[1];
  /* 0x000d */ char __PADDING__[3];
} PDH_RAW_LOG_RECORD, *PPDH_RAW_LOG_RECORD; /* size: 0x0010 */

class SEListEnum<SOS_ResourcePool,0>;

class XE_TCollection<1,0>
{
  /* 0x0000 */ const struct XEObjectCollection* const m_pCollection;
}; /* size: 0x0008 */

typedef struct _RPC_SERVER_INTERFACE
{
  /* 0x0000 */ unsigned int Length;
  /* 0x0004 */ struct _RPC_SYNTAX_IDENTIFIER InterfaceId;
  /* 0x0018 */ struct _RPC_SYNTAX_IDENTIFIER TransferSyntax;
  /* 0x002c */ long Padding_1088;
  /* 0x0030 */ struct RPC_DISPATCH_TABLE* DispatchTable;
  /* 0x0038 */ unsigned int RpcProtseqEndpointCount;
  /* 0x003c */ long Padding_1089;
  /* 0x0040 */ struct _RPC_PROTSEQ_ENDPOINT* RpcProtseqEndpoint;
  /* 0x0048 */ void* DefaultManagerEpv;
  /* 0x0050 */ const void* InterpreterInfo;
  /* 0x0058 */ unsigned int Flags;
  /* 0x005c */ long __PADDING__[1];
} RPC_SERVER_INTERFACE, *PRPC_SERVER_INTERFACE; /* size: 0x0060 */

typedef struct __vc_attributes::hiddenAttribute
{
} _vc_attributes::hiddenAttribute, *P_vc_attributes::hiddenAttribute; /* size: 0x0001 */

struct ObjectPoolSLock
{
}; /* size: 0x0004 */

typedef struct _NT_TIB64
{
  /* 0x0000 */ unsigned __int64 ExceptionList;
  /* 0x0008 */ unsigned __int64 StackBase;
  /* 0x0010 */ unsigned __int64 StackLimit;
  /* 0x0018 */ unsigned __int64 SubSystemTib;
  union
  {
    /* 0x0020 */ unsigned __int64 FiberData;
    /* 0x0020 */ unsigned long Version;
  }; /* size: 0x0008 */
  /* 0x0028 */ unsigned __int64 ArbitraryUserPointer;
  /* 0x0030 */ unsigned __int64 Self;
} NT_TIB64, *PNT_TIB64; /* size: 0x0038 */

typedef struct _ABCFLOAT
{
  /* 0x0000 */ float abcfA;
  /* 0x0004 */ float abcfB;
  /* 0x0008 */ float abcfC;
} ABCFLOAT, *PABCFLOAT; /* size: 0x000c */

typedef struct _POWER_SESSION_TIMEOUTS
{
  /* 0x0000 */ unsigned long InputTimeout;
  /* 0x0004 */ unsigned long DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS; /* size: 0x0008 */

class SpinlockHolder<116,8,1>;

class CAutoBase<XMLEventTransformRule>
{
  /* 0x0000 */ struct XMLEventTransformRule* m_pt;
}; /* size: 0x0008 */

class SOS_CPUInfo
{
  /* 0x0000 */ unsigned short m_NodeId;
  /* 0x0002 */ unsigned short m_NumaNodeId;
  /* 0x0004 */ unsigned long m_Id;
  /* 0x0008 */ unsigned long m_OSId;
  /* 0x000c */ long Padding_1090;
  /* 0x0010 */ class GroupAffinity m_Affinity;
}; /* size: 0x0020 */

struct IReleaseMarshalBuffers
{
}; /* size: 0x0008 */

typedef struct _userSTGMEDIUM::_STGMEDIUM_UNION
{
  /* 0x0000 */ unsigned long tymed;
  /* 0x0004 */ long Padding_1091;
  /* 0x0008 */ union _userSTGMEDIUM::_STGMEDIUM_UNION::__MIDL_IAdviseSink_0003 u;
} userSTGMEDIUM::_STGMEDIUM_UNION, *PuserSTGMEDIUM::_STGMEDIUM_UNION; /* size: 0x0010 */

typedef struct _userHMETAFILEPICT
{
  /* 0x0000 */ long fContext;
  /* 0x0004 */ long Padding_1092;
  /* 0x0008 */ union _userHMETAFILEPICT::__MIDL_IWinTypes_0005 u;
} userHMETAFILEPICT, *PuserHMETAFILEPICT; /* size: 0x0010 */

struct BufLinkSLock
{
}; /* size: 0x0004 */

class Spinlock<198,3,1>
{
}; /* size: 0x0004 */

class SEList<TCallback<void,SOS_Task *,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class GlobalSchedulerList
{
}; /* size: 0x0020 */

typedef struct _SUPPORTED_OS_INFO
{
  /* 0x0000 */ unsigned short OsCount;
  /* 0x0002 */ unsigned short MitigationExist;
  /* 0x0004 */ unsigned short OsList[4];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO; /* size: 0x000c */

class Spinlock<206,3,1>
{
}; /* size: 0x0004 */

typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA
{
  /* 0x0000 */ unsigned long dwReason;
  /* 0x0004 */ long Padding_1093;
  /* 0x0008 */ char* pszComment;
  /* 0x0010 */ struct _SERVICE_STATUS_PROCESS ServiceStatus;
  /* 0x0034 */ long __PADDING__[1];
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA; /* size: 0x0038 */

class Spinlock<19,19,1>
{
}; /* size: 0x0004 */

struct InterlockedTraits<4>
{
}; /* size: 0x0001 */

typedef struct _ACCESS_DENIED_OBJECT_ACE
{
  /* 0x0000 */ struct _ACE_HEADER Header;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ struct _GUID ObjectType;
  /* 0x001c */ struct _GUID InheritedObjectType;
  /* 0x002c */ unsigned long SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE; /* size: 0x0030 */

struct tagEMRSELECTOBJECT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihObject;
}; /* size: 0x000c */

class StackHashCallStack
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ unsigned short m_cFrames;
  /* 0x0012 */ char Padding_1094[2];
  /* 0x0014 */ unsigned long m_dwCheckSum;
  /* 0x0018 */ void* m_rgFrames[64];
  /* 0x0218 */ unsigned long m_dwUserData;
  /* 0x021c */ unsigned long m_dwHitCount;
}; /* size: 0x0220 */

typedef union _SOSTICKCOUNT64
{
  union
  {
    /* 0x0000 */ volatile struct _SOSKSYSTEM_TIME TickCount;
    /* 0x0000 */ volatile unsigned __int64 TickCountQuad;
  }; /* size: 0x000c */
} SOSTICKCOUNT64, *PSOSTICKCOUNT64; /* size: 0x0010 */

struct std::tr1::_Is_integral<signed char>
{
}; /* size: 0x0001 */

class SEList<ErrMsg,24>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class Spinlock<234,1,1>
{
}; /* size: 0x0004 */

struct tagEMRSETTEXTCOLOR
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long crColor;
}; /* size: 0x000c */

class CMemDbg<CMemProc>
{
  /* 0x0000 */ const unsigned __int64 xsm_cbMaxSizeFitsOnPage;
  /* 0x0008 */ long Padding_1095[32];
  /* 0x0088 */ class SOS_Task* m_pTask;
  /* 0x0090 */ int m_fUseFree;
  /* 0x0094 */ unsigned long m_bTraceOptions;
  /* 0x0098 */ class CMallocSpy m_msSpy;
  /* 0x0440 */ int m_fReadOnly;
  /* 0x0444 */ int m_fCheckThreadAccess;
  /* 0x0448 */ int m_fBeingDestroyed;
  /* 0x044c */ long Padding_1096;
  /* 0x0450 */ class Worker* m_pLockOwner;
}; /* size: 0x0458 */

struct std::is_error_condition_enum<std::error_code>
{
}; /* size: 0x0001 */

typedef struct _PROCESS_INFORMATION
{
  /* 0x0000 */ void* hProcess;
  /* 0x0008 */ void* hThread;
  /* 0x0010 */ unsigned long dwProcessId;
  /* 0x0014 */ unsigned long dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION; /* size: 0x0018 */

typedef struct _PROCESS_WS_WATCH_INFORMATION_EX
{
  /* 0x0000 */ struct _PROCESS_WS_WATCH_INFORMATION BasicInfo;
  /* 0x0010 */ unsigned __int64 FaultingThreadId;
  /* 0x0018 */ unsigned __int64 Flags;
} PROCESS_WS_WATCH_INFORMATION_EX, *PPROCESS_WS_WATCH_INFORMATION_EX; /* size: 0x0020 */

class Spinlock<261,1,1>
{
}; /* size: 0x0004 */

struct tagNONCLIENTMETRICSA
{
  /* 0x0000 */ unsigned int cbSize;
  /* 0x0004 */ int iBorderWidth;
  /* 0x0008 */ int iScrollWidth;
  /* 0x000c */ int iScrollHeight;
  /* 0x0010 */ int iCaptionWidth;
  /* 0x0014 */ int iCaptionHeight;
  /* 0x0018 */ struct tagLOGFONTA lfCaptionFont;
  /* 0x0054 */ int iSmCaptionWidth;
  /* 0x0058 */ int iSmCaptionHeight;
  /* 0x005c */ struct tagLOGFONTA lfSmCaptionFont;
  /* 0x0098 */ int iMenuWidth;
  /* 0x009c */ int iMenuHeight;
  /* 0x00a0 */ struct tagLOGFONTA lfMenuFont;
  /* 0x00dc */ struct tagLOGFONTA lfStatusFont;
  /* 0x0118 */ struct tagLOGFONTA lfMessageFont;
}; /* size: 0x0154 */

struct tagMDICREATESTRUCTW
{
  /* 0x0000 */ const wchar_t* szClass;
  /* 0x0008 */ const wchar_t* szTitle;
  /* 0x0010 */ void* hOwner;
  /* 0x0018 */ int x;
  /* 0x001c */ int y;
  /* 0x0020 */ int cx;
  /* 0x0024 */ int cy;
  /* 0x0028 */ unsigned long style;
  /* 0x002c */ long Padding_1097;
  /* 0x0030 */ __int64 lParam;
}; /* size: 0x0038 */

class Spinlock<309,1,1>
{
}; /* size: 0x0004 */

class XMLCXTargetConfigHelper
{
  /* 0x0000 */ long Padding_1098[134];
  /* 0x0218 */ class XE_AutoP<XE_CXHistoryTargetConfig> m_pTargetConfig;
}; /* size: 0x0220 */

typedef struct _KCRM_TRANSACTION_BLOB
{
  /* 0x0000 */ struct _GUID UOW;
  /* 0x0010 */ struct _GUID TmIdentity;
  /* 0x0020 */ unsigned long IsolationLevel;
  /* 0x0024 */ unsigned long IsolationFlags;
  /* 0x0028 */ unsigned long Timeout;
  /* 0x002c */ wchar_t Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB; /* size: 0x00ac */

class SEList<ArmedWaypoint,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class eXcursionManager
{
  union
  {
    struct
    {
      /* 0x0000 */ BOOL m_IsTracking;
      /* 0x0001 */ char Padding_1099[7];
      /* 0x0008 */ struct _RTL_CRITICAL_SECTION m_BigLock;
      /* 0x0030 */ class SEList<eXcursionEntry,0> m_StartList;
      /* 0x0040 */ class SEList<eXcursionEntry,0> m_DisableList;
      /* 0x0050 */ class SEList<eXcursionEntry,0> m_IgnoreList;
    }; /* size: 0x0059 */
    /* 0x0000 */ const unsigned long MAX_TRACK;
  }; /* size: 0x0059 */
  /* 0x0059 */ char Padding_1100[7];
  /* 0x0060 */ struct TaskTracker m_Trackers[1024];
  /* 0xe060 */ unsigned long m_trackerCount;
  /* 0xe064 */ long Padding_1101;
  /* 0xe068 */ class SEList<ArmedWaypoint,0> m_failpointList;
}; /* size: 0xe078 */

typedef struct _XSTATE_CONFIGURATION
{
  /* 0x0000 */ unsigned __int64 EnabledFeatures;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long OptimizedSave : 1; /* bit position: 0 */
  /* 0x0010 */ struct _XSTATE_FEATURE Features[64];
} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION; /* size: 0x0210 */

struct std::tr1::_Cat_base<1>
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::size_isAttribute
{
  /* 0x0000 */ const char* expression;
} _vc_attributes::size_isAttribute, *P_vc_attributes::size_isAttribute; /* size: 0x0008 */

typedef struct __vc_attributes::rangeAttribute
{
  /* 0x0000 */ int low_val;
  /* 0x0004 */ int high_val;
} _vc_attributes::rangeAttribute, *P_vc_attributes::rangeAttribute; /* size: 0x0008 */

class SOS_NoForceRemoveStoreController
{
}; /* size: 0x0010 */

typedef struct __vc_attributes::uidefaultAttribute
{
} _vc_attributes::uidefaultAttribute, *P_vc_attributes::uidefaultAttribute; /* size: 0x0001 */

struct std::tr1::_Or<0,1>
{
}; /* size: 0x0001 */

typedef struct __vc_attributes::outAttribute
{
} _vc_attributes::outAttribute, *P_vc_attributes::outAttribute; /* size: 0x0001 */

class XeSosPkg::cpu_config_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1102[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int old_cpu_maskOffset;
    /* 0x0000 */ const int new_cpu_maskOffset;
    /* 0x0000 */ const int cpu_groupOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct __vc_attributes::pointer_defaultAttribute
{
  /* 0x0000 */ enum __vc_attributes::pointer_defaultAttribute::type_e type;
} _vc_attributes::pointer_defaultAttribute, *P_vc_attributes::pointer_defaultAttribute; /* size: 0x0004 */

typedef struct __vc_attributes::idl_moduleAttribute
{
  /* 0x0000 */ const char* name;
  /* 0x0008 */ const char* dllname;
  /* 0x0010 */ const char* version;
  /* 0x0018 */ const char* uuid;
  /* 0x0020 */ const char* helpstring;
  /* 0x0028 */ int helpstringcontext;
  /* 0x002c */ int helpcontext;
  /* 0x0030 */ BOOL hidden;
  /* 0x0031 */ BOOL restricted;
  /* 0x0032 */ char __PADDING__[6];
} _vc_attributes::idl_moduleAttribute, *P_vc_attributes::idl_moduleAttribute; /* size: 0x0038 */

typedef struct __vc_attributes::max_isAttribute
{
  /* 0x0000 */ const char* expression;
} _vc_attributes::max_isAttribute, *P_vc_attributes::max_isAttribute; /* size: 0x0008 */

typedef struct __vc_attributes::propgetAttribute
{
} _vc_attributes::propgetAttribute, *P_vc_attributes::propgetAttribute; /* size: 0x0001 */

class AutoSpinlockHolder<310,1,1>;

typedef struct __vc_attributes::idl_quoteAttribute
{
  /* 0x0000 */ const char* text;
} _vc_attributes::idl_quoteAttribute, *P_vc_attributes::idl_quoteAttribute; /* size: 0x0008 */

class Spinlock<324,1,1>
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::pragmaAttribute
{
  /* 0x0000 */ const char* token_sequence;
} _vc_attributes::pragmaAttribute, *P_vc_attributes::pragmaAttribute; /* size: 0x0008 */

typedef struct __vc_attributes::propputrefAttribute
{
} _vc_attributes::propputrefAttribute, *P_vc_attributes::propputrefAttribute; /* size: 0x0001 */

class SpinlockHolder<121,8,1>;

class CXFixedTable
{
  /* 0x0000 */ unsigned int m_elementCount;
  /* 0x0004 */ long Padding_1103;
  /* 0x0008 */ unsigned char* m_columnStorage;
  /* 0x0010 */ struct ColumnDescriptor* m_pColumnDescriptors;
  /* 0x0018 */ class CXBaseColumn** m_columnArray;
  /* 0x0020 */ unsigned long* m_storedHeader;
  /* 0x0028 */ void** m_callArray /* function */;
  /* 0x0030 */ void** m_getArray /* function */;
  /* 0x0038 */ unsigned int m_columnCount;
  /* 0x003c */ unsigned int m_totalStorageSize;
}; /* size: 0x0040 */

typedef struct __vc_attributes::oleautomationAttribute
{
} _vc_attributes::oleautomationAttribute, *P_vc_attributes::oleautomationAttribute; /* size: 0x0001 */

typedef struct __vc_attributes::atl::db_sourceAttribute
{
  /* 0x0000 */ const char* source;
  /* 0x0008 */ const char* name;
  /* 0x0010 */ const char* hresult;
} _vc_attributes::atl::db_sourceAttribute, *P_vc_attributes::atl::db_sourceAttribute; /* size: 0x0018 */

class SpinlockHolder<187,3,1>;

typedef struct __vc_attributes::atl::implements_categoryAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::atl::implements_categoryAttribute, *P_vc_attributes::atl::implements_categoryAttribute; /* size: 0x0008 */

class AutoSpinlockHolder<291,1,1>;

typedef struct __vc_attributes::atl::requires_categoryAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::atl::requires_categoryAttribute, *P_vc_attributes::atl::requires_categoryAttribute; /* size: 0x0008 */

typedef struct __vc_attributes::atl::rdxAttribute
{
  /* 0x0000 */ const char* key;
  /* 0x0008 */ const char* valuename;
  /* 0x0010 */ const char* regtype;
} _vc_attributes::atl::rdxAttribute, *P_vc_attributes::atl::rdxAttribute; /* size: 0x0018 */

typedef struct __vc_attributes::atl::db_accessorAttribute
{
  /* 0x0000 */ int id;
  /* 0x0004 */ BOOL auto_;
  /* 0x0005 */ char __PADDING__[3];
} _vc_attributes::atl::db_accessorAttribute, *P_vc_attributes::atl::db_accessorAttribute; /* size: 0x0008 */

typedef struct __vc_attributes::atl::registration_scriptAttribute
{
  /* 0x0000 */ const char* script;
} _vc_attributes::atl::registration_scriptAttribute, *P_vc_attributes::atl::registration_scriptAttribute; /* size: 0x0008 */

class SpinlockHolder<58,16,1>;

typedef struct __vc_attributes::no_injected_textAttribute
{
  /* 0x0000 */ BOOL value;
} _vc_attributes::no_injected_textAttribute, *P_vc_attributes::no_injected_textAttribute; /* size: 0x0001 */

typedef struct __vc_attributes::defaultvtableAttribute
{
  /* 0x0000 */ const char* value;
} _vc_attributes::defaultvtableAttribute, *P_vc_attributes::defaultvtableAttribute; /* size: 0x0008 */

typedef struct __vc_attributes::includeAttribute
{
  /* 0x0000 */ const char* include_file;
} _vc_attributes::includeAttribute, *P_vc_attributes::includeAttribute; /* size: 0x0008 */

class XeSqlPkg::checkpoint_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1104[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef struct _PDH_DATA_ITEM_PATH_ELEMENTS_W
{
  /* 0x0000 */ wchar_t* szMachineName;
  /* 0x0008 */ struct _GUID ObjectGUID;
  /* 0x0018 */ unsigned long dwItemId;
  /* 0x001c */ long Padding_1105;
  /* 0x0020 */ wchar_t* szInstanceName;
} PDH_DATA_ITEM_PATH_ELEMENTS_W, *PPDH_DATA_ITEM_PATH_ELEMENTS_W; /* size: 0x0028 */

typedef struct _PDH_COUNTER_PATH_ELEMENTS_W
{
  /* 0x0000 */ wchar_t* szMachineName;
  /* 0x0008 */ wchar_t* szObjectName;
  /* 0x0010 */ wchar_t* szInstanceName;
  /* 0x0018 */ wchar_t* szParentInstance;
  /* 0x0020 */ unsigned long dwInstanceIndex;
  /* 0x0024 */ long Padding_1106;
  /* 0x0028 */ wchar_t* szCounterName;
} PDH_COUNTER_PATH_ELEMENTS_W, *PPDH_COUNTER_PATH_ELEMENTS_W; /* size: 0x0030 */

typedef struct _PDH_COUNTER_INFO_W
{
  /* 0x0000 */ unsigned long dwLength;
  /* 0x0004 */ unsigned long dwType;
  /* 0x0008 */ unsigned long CVersion;
  /* 0x000c */ unsigned long CStatus;
  /* 0x0010 */ long lScale;
  /* 0x0014 */ long lDefaultScale;
  /* 0x0018 */ unsigned __int64 dwUserData;
  /* 0x0020 */ unsigned __int64 dwQueryUserData;
  /* 0x0028 */ wchar_t* szFullPath;
  union
  {
    /* 0x0030 */ struct _PDH_DATA_ITEM_PATH_ELEMENTS_W DataItemPath;
    /* 0x0030 */ struct _PDH_COUNTER_PATH_ELEMENTS_W CounterPath;
    struct
    {
      /* 0x0030 */ wchar_t* szMachineName;
      /* 0x0038 */ wchar_t* szObjectName;
      /* 0x0040 */ wchar_t* szInstanceName;
      /* 0x0048 */ wchar_t* szParentInstance;
      /* 0x0050 */ unsigned long dwInstanceIndex;
      /* 0x0054 */ long Padding_1107;
      /* 0x0058 */ wchar_t* szCounterName;
    }; /* size: 0x002c */
  }; /* size: 0x0030 */
  /* 0x0060 */ wchar_t* szExplainText;
  /* 0x0068 */ unsigned long DataBuffer[1];
  /* 0x006c */ long __PADDING__[1];
} PDH_COUNTER_INFO_W, *PPDH_COUNTER_INFO_W; /* size: 0x0070 */

class Spinlock<139,4,1>
{
}; /* size: 0x0004 */

typedef struct __vc_attributes::uniqueAttribute
{
} _vc_attributes::uniqueAttribute, *P_vc_attributes::uniqueAttribute; /* size: 0x0001 */

class Spinlock<14,19,1>
{
}; /* size: 0x0004 */

struct SessionMgrPriorityQueueSLock
{
}; /* size: 0x0004 */

struct tagMOUSEHOOKSTRUCTEX
{
  /* 0x0000 */ long Padding_1108[8];
  /* 0x0020 */ unsigned long mouseData;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct XPRESS9_STATUS_T
{
  /* 0x0000 */ unsigned int m_uStatus;
  /* 0x0004 */ unsigned int m_uLineNumber;
  /* 0x0008 */ const char* m_pFilename;
  /* 0x0010 */ const char* m_pFunction;
  /* 0x0018 */ char m_ErrorDescription[1024];
}; /* size: 0x0418 */

class XeSqlPkg::allocation_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1109[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int ec_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int au_id_longOffset;
    /* 0x0000 */ const int au_id_shortOffset;
    /* 0x0000 */ const int ls_ws_idOffset;
    /* 0x0000 */ const int ls_sub_idOffset;
    /* 0x0000 */ const int ls_nest_idOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0328 */
}; /* size: 0x0278 */

typedef struct _tagPROTOCOLFILTERDATA
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_1110;
  /* 0x0008 */ struct IInternetProtocolSink* pProtocolSink;
  /* 0x0010 */ struct IInternetProtocol* pProtocol;
  /* 0x0018 */ struct IUnknown* pUnk;
  /* 0x0020 */ unsigned long dwFilterFlags;
  /* 0x0024 */ long __PADDING__[1];
} tagPROTOCOLFILTERDATA, *PtagPROTOCOLFILTERDATA; /* size: 0x0028 */

class AutoSpinlockHolder<336,0,1>;

struct tagBITMAPFILEHEADER
{
  /* 0x0000 */ unsigned short bfType;
  /* 0x0002 */ unsigned long bfSize;
  /* 0x0006 */ unsigned short bfReserved1;
  /* 0x0008 */ unsigned short bfReserved2;
  /* 0x000a */ unsigned long bfOffBits;
}; /* size: 0x000e */

struct ScriptDeploymentWorkersSLock
{
}; /* size: 0x0004 */

class TTemplateInfo<1231,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

class SpinlockHolder<59,16,1>;

class ReduceTypeListNode<ExtIntCodeProtector<1>,TypeList<NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<143,4,1>;

struct tagCONNECTDATA
{
  /* 0x0000 */ struct IUnknown* pUnk;
  /* 0x0008 */ unsigned long dwCookie;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct _TP_WAIT;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long RaiseExceptionOnInvalidHandleReference : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long HandleExceptionsPermanentlyEnabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long ReservedFlags : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY; /* size: 0x0004 */

typedef struct _TP_POOL_STACK_INFORMATION
{
  /* 0x0000 */ unsigned __int64 StackReserve;
  /* 0x0008 */ unsigned __int64 StackCommit;
} TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION; /* size: 0x0010 */

class Spinlock<145,4,1>
{
}; /* size: 0x0004 */

struct CM_FMConfigSLock
{
}; /* size: 0x0004 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>
{
}; /* size: 0x0010 */

struct tagEMRCREATEBRUSHINDIRECT
{
  /* 0x0000 */ struct tagEMR emr;
  /* 0x0008 */ unsigned long ihBrush;
  /* 0x000c */ struct tagLOGBRUSH32 lb;
}; /* size: 0x0018 */

class SEListEnum<DkParameter,0>;

struct pvalueA
{
  /* 0x0000 */ char* pv_valuename;
  /* 0x0008 */ int pv_valuelen;
  /* 0x000c */ long Padding_1111;
  /* 0x0010 */ void* pv_value_context;
  /* 0x0018 */ unsigned long pv_type;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class CPvArrayAllocator
{
  /* 0x0000 */ long Padding_1112[2];
  /* 0x0008 */ class IMemObj* m_pmo;
}; /* size: 0x0010 */

typedef struct _SECURITY_CAPABILITIES
{
  /* 0x0000 */ void* AppContainerSid;
  /* 0x0008 */ struct _SID_AND_ATTRIBUTES* Capabilities;
  /* 0x0010 */ unsigned long CapabilityCount;
  /* 0x0014 */ unsigned long Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES; /* size: 0x0018 */

struct tagBITMAPINFO
{
  /* 0x0000 */ struct tagBITMAPINFOHEADER bmiHeader;
  /* 0x0028 */ struct tagRGBQUAD bmiColors[1];
}; /* size: 0x002c */

typedef struct _COMMTIMEOUTS
{
  /* 0x0000 */ unsigned long ReadIntervalTimeout;
  /* 0x0004 */ unsigned long ReadTotalTimeoutMultiplier;
  /* 0x0008 */ unsigned long ReadTotalTimeoutConstant;
  /* 0x000c */ unsigned long WriteTotalTimeoutMultiplier;
  /* 0x0010 */ unsigned long WriteTotalTimeoutConstant;
} COMMTIMEOUTS, *PCOMMTIMEOUTS; /* size: 0x0014 */

typedef struct _TOKEN_PRIMARY_GROUP
{
  /* 0x0000 */ void* PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP; /* size: 0x0008 */

struct RemoteBatchStatsListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::file_written
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1113[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
    /* 0x0000 */ const int io_dataOffset;
  }; /* size: 0x02c0 */
}; /* size: 0x0278 */

struct ISOSHost_NodeAffinityChangeCallback
{
}; /* size: 0x0008 */

class XeSqlPkg::broker_activation_task_limit_reached
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1114[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct tagPOINTF
{
  /* 0x0000 */ float x;
  /* 0x0004 */ float y;
}; /* size: 0x0008 */

class CAutoBase<XE_FileSet>
{
  /* 0x0000 */ class XE_FileSet* m_pt;
}; /* size: 0x0008 */

class XeSqlPkg::database_started
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1115[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class CClassInfo
{
  union
  {
    struct
    {
      /* 0x0000 */ void* const xm_fnSerializePointer_CMemBufFormatter /* function */;
      /* 0x0008 */ void* const xm_fnDeSerializePointer_CMemBufFormatter /* function */;
      /* 0x0010 */ void* const xm_fnSerializePointer_RPCStream /* function */;
      /* 0x0018 */ void* const xm_fnDeSerializePointer_RPCStream /* function */;
    }; /* size: 0x0020 */
    /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[2912];
  }; /* size: 0x5b00 */
  /* 0x0020 */ const unsigned int xm_id;
  /* 0x0024 */ long Padding_1116;
  /* 0x0028 */ const unsigned __int64 xm_cb;
  /* 0x0030 */ const BOOL xm_serializableVirtual;
  /* 0x0031 */ char Padding_1117[7];
  /* 0x0038 */ const unsigned __int64 xm_compilerOffset;
  /* 0x0040 */ const unsigned int xm_ver;
  /* 0x0044 */ long Padding_1118;
  /* 0x0048 */ void* const xm_fnCreateObject /* function */;
  /* 0x0050 */ void* const xm_fnCreateObjectArray /* function */;
  /* 0x0058 */ void* const xm_fnGetClassInfo /* function */;
  /* 0x0060 */ const wchar_t** const xm_name;
  /* 0x0068 */ const unsigned __int64 xm_vtable;
  /* 0x0070 */ const class CClassInfo* xm_next;
  /* 0x0078 */ const class CClassInfo** m_templateFamily;
}; /* size: 0x0080 */

class AutoSpinlockHolder<53,16,1>;

typedef struct _EXCEPTION_REGISTRATION_RECORD
{
  /* 0x0000 */ struct _EXCEPTION_REGISTRATION_RECORD* Next;
  /* 0x0008 */ void* Handler /* function */;
} EXCEPTION_REGISTRATION_RECORD, *PEXCEPTION_REGISTRATION_RECORD; /* size: 0x0010 */

class SEListEnum<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>* m_pNext;
}; /* size: 0x0010 */

class SOS_MemoryFragmentManager
{
  union
  {
    /* 0x0000 */ class SOS_MemoryFragmentManager sm_MemoryFragmentManager;
    /* 0x0000 */ class DescriptorAllocator<SOS_MemoryFragmentDescriptor,0> sm_MemoryFragmentDescriptorAllocator;
    struct
    {
      /* 0x0000 */ class SOS_InterlockedList<SOS_MemoryFragmentDescriptor,0> m_fragmentList;
      /* 0x0010 */ enum SOS_MemoryModel m_MemoryModel;
      /* 0x0014 */ unsigned int m_FragmentCount;
      /* 0x0018 */ unsigned __int64 m_FragmentSize;
      /* 0x0020 */ unsigned int m_MaxFragments;
    }; /* size: 0x0024 */
  }; /* size: 0x2100 */
}; /* size: 0x0030 */

struct IObjectWithSite
{
}; /* size: 0x0008 */

struct $_TypeDescriptor$_extraBytes_15
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[15];
}; /* size: 0x001f */

typedef struct _APPLICATIONLAUNCH_SETTING_VALUE
{
  /* 0x0000 */ union _LARGE_INTEGER ActivationTime;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ButtonInstanceID;
} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE; /* size: 0x0010 */

class std::numeric_limits<bool>
{
  union
  {
    /* 0x0000 */ const BOOL is_modulo;
    /* 0x0000 */ const BOOL is_signed;
    /* 0x0000 */ const int digits;
    /* 0x0000 */ const int digits10;
    /* 0x0000 */ const int max_digits10;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class XeSosPkg::assert_fired
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1119[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int assert_typeOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int expressionOffset;
    /* 0x0000 */ const int file_pathOffset;
    /* 0x0000 */ const int descriptionOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class Spinlock<168,3,1>
{
}; /* size: 0x0004 */

typedef struct _tagDATAINFO
{
  /* 0x0000 */ unsigned long ulTotalSize;
  /* 0x0004 */ unsigned long ulavrPacketSize;
  /* 0x0008 */ unsigned long ulConnectSpeed;
  /* 0x000c */ unsigned long ulProcessorSpeed;
} tagDATAINFO, *PtagDATAINFO; /* size: 0x0010 */

class Spinlock<183,3,1>
{
}; /* size: 0x0004 */

typedef struct _POWER_MONITOR_INVOCATION
{
  /* 0x0000 */ unsigned char On;
  /* 0x0001 */ unsigned char Console;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION; /* size: 0x0002 */

class AutoSpinlockHolder<124,7,1>;

struct ICreateTypeLib
{
}; /* size: 0x0008 */

class SpinlockHolder<321,1,1>;

class XE_PredicateResult
{
}; /* size: 0x0001 */

class SEList<SOS_ResourceGroup,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct tagQACONTAINER
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_1120;
  /* 0x0008 */ struct IOleClientSite* pClientSite;
  /* 0x0010 */ struct IAdviseSinkEx* pAdviseSink;
  /* 0x0018 */ struct IPropertyNotifySink* pPropertyNotifySink;
  /* 0x0020 */ struct IUnknown* pUnkEventSink;
  /* 0x0028 */ unsigned long dwAmbientFlags;
  /* 0x002c */ unsigned long colorFore;
  /* 0x0030 */ unsigned long colorBack;
  /* 0x0034 */ long Padding_1121;
  /* 0x0038 */ struct IFont* pFont;
  /* 0x0040 */ struct IOleUndoManager* pUndoMgr;
  /* 0x0048 */ unsigned long dwAppearance;
  /* 0x004c */ long lcid;
  /* 0x0050 */ struct HPALETTE__* hpal;
  /* 0x0058 */ struct IBindHost* pBindHost;
  /* 0x0060 */ struct IOleControlSite* pOleControlSite;
  /* 0x0068 */ struct IServiceProvider* pServiceProvider;
}; /* size: 0x0070 */

class SpinlockHolder<10,19,1>;

class SEList<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_FindSessionNameComparer
{
  /* 0x0000 */ const wchar_t* const m_name;
}; /* size: 0x0008 */

struct tagPARSEDURLW
{
  /* 0x0000 */ unsigned long cbSize;
  /* 0x0004 */ long Padding_1122;
  /* 0x0008 */ const wchar_t* pszProtocol;
  /* 0x0010 */ unsigned int cchProtocol;
  /* 0x0014 */ long Padding_1123;
  /* 0x0018 */ const wchar_t* pszSuffix;
  /* 0x0020 */ unsigned int cchSuffix;
  /* 0x0024 */ unsigned int nScheme;
}; /* size: 0x0028 */

typedef struct _IMAGE_TLS_DIRECTORY32
{
  /* 0x0000 */ unsigned long StartAddressOfRawData;
  /* 0x0004 */ unsigned long EndAddressOfRawData;
  /* 0x0008 */ unsigned long AddressOfIndex;
  /* 0x000c */ unsigned long AddressOfCallBacks;
  /* 0x0010 */ unsigned long SizeOfZeroFill;
  /* 0x0014 */ unsigned long Characteristics;
} IMAGE_TLS_DIRECTORY32, *PIMAGE_TLS_DIRECTORY32; /* size: 0x0018 */

class SpinlockHolder<77,14,1>;

class XeSqlPkg::xtp_matgen
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1124[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

struct CCompatLevel::SerializableVersionInternal<CCompatLevel>;

class std::num_put<unsigned short,std::ostreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_1125[2];
  /* 0x0010 */ struct _Cvtvec _Cvt;
}; /* size: 0x0018 */

typedef struct _TOKEN_AUDIT_POLICY
{
  /* 0x0000 */ unsigned char PerUserPolicy[29];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY; /* size: 0x001d */

struct XdesSLock
{
}; /* size: 0x0004 */

struct ProgressReportSLock
{
}; /* size: 0x0004 */

struct PPM_IDLE_ACCOUNTING
{
  /* 0x0000 */ unsigned long StateCount;
  /* 0x0004 */ unsigned long TotalTransitions;
  /* 0x0008 */ unsigned long ResetCount;
  /* 0x000c */ long Padding_1126;
  /* 0x0010 */ unsigned __int64 StartTime;
  /* 0x0018 */ struct PPM_IDLE_STATE_ACCOUNTING State[1];
}; /* size: 0x0048 */

class XeSqlPkg::query_rpc_get_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1127[140];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
    /* 0x0000 */ const int after_updateOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class Spinlock<45,18,1>
{
}; /* size: 0x0004 */

struct PPM_THERMALCHANGE_EVENT
{
  /* 0x0000 */ unsigned long ThermalConstraint;
  /* 0x0004 */ long Padding_1128;
  /* 0x0008 */ unsigned __int64 Processors;
}; /* size: 0x0010 */

class XeSosPkg::context_switch_callback_executed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1129[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int transitionOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

typedef struct _ACL_REVISION_INFORMATION
{
  /* 0x0000 */ unsigned long AclRevision;
} ACL_REVISION_INFORMATION, *PACL_REVISION_INFORMATION; /* size: 0x0004 */

class XE_SteamConstantElimination<char,4096>
{
  /* 0x0000 */ long Padding_1130[1034];
  /* 0x1028 */ class XE_IStream* m_pStream;
  /* 0x1030 */ char m_inputBuffer[4096];
  /* 0x2030 */ unsigned int m_symAlreadyRead;
}; /* size: 0x2038 */

class ResourceClerk
{
  /* 0x0000 */ long Padding_1131[10];
  /* 0x0028 */ class SOS_Node* m_Node;
  /* 0x0030 */ class SOSHost* m_host;
  /* 0x0038 */ enum ResourceClerk::TYPE m_resourceClerkType;
}; /* size: 0x0040 */

struct PROCESSOR_PERFSTATE_POLICY
{
  /* 0x0000 */ unsigned long Revision;
  /* 0x0004 */ unsigned char MaxThrottle;
  /* 0x0005 */ unsigned char MinThrottle;
  /* 0x0006 */ unsigned char BusyAdjThreshold;
  union
  {
    /* 0x0007 */ unsigned char Spare;
    union
    {
      union
      {
        /* 0x0007 */ unsigned char AsBYTE;
        struct /* bitfield */
        {
          /* 0x0007 */ unsigned char NoDomainAccounting : 1; /* bit position: 0 */
          /* 0x0007 */ unsigned char IncreasePolicy : 2; /* bit position: 1 */
          /* 0x0007 */ unsigned char DecreasePolicy : 2; /* bit position: 3 */
          /* 0x0007 */ unsigned char Reserved : 3; /* bit position: 5 */
        }; /* bitfield */
      }; /* size: 0x0001 */
    } /* size: 0x0001 */ Flags;
  }; /* size: 0x0001 */
  /* 0x0008 */ unsigned long TimeCheck;
  /* 0x000c */ unsigned long IncreaseTime;
  /* 0x0010 */ unsigned long DecreaseTime;
  /* 0x0014 */ unsigned long IncreasePercent;
  /* 0x0018 */ unsigned long DecreasePercent;
}; /* size: 0x001c */

struct SYSTEM_BATTERY_STATE
{
  /* 0x0000 */ unsigned char AcOnLine;
  /* 0x0001 */ unsigned char BatteryPresent;
  /* 0x0002 */ unsigned char Charging;
  /* 0x0003 */ unsigned char Discharging;
  /* 0x0004 */ unsigned char Spare1[4];
  /* 0x0008 */ unsigned long MaxCapacity;
  /* 0x000c */ unsigned long RemainingCapacity;
  /* 0x0010 */ unsigned long Rate;
  /* 0x0014 */ unsigned long EstimatedTime;
  /* 0x0018 */ unsigned long DefaultAlert1;
  /* 0x001c */ unsigned long DefaultAlert2;
}; /* size: 0x0020 */

struct RPC_STATS_VECTOR
{
  /* 0x0000 */ unsigned int Count;
  /* 0x0004 */ unsigned long Stats[1];
}; /* size: 0x0008 */

class TCallbackList<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

struct RPC_IF_ID_VECTOR
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_1132;
  /* 0x0008 */ struct _RPC_IF_ID* IfId[1];
}; /* size: 0x0010 */

typedef struct _LDOUBLE
{
  /* 0x0000 */ unsigned char ld[10];
} LDOUBLE, *PLDOUBLE; /* size: 0x000a */

struct _BEM_REFERENCE;

class TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class SpinlockHolder<103,10,1>;

class XE_SessionEnumerator
{
  /* 0x0000 */ void* m_sessionEnum;
  /* 0x0008 */ struct _GUID m_tag;
  /* 0x0018 */ int m_fMatchTag;
}; /* size: 0x0020 */

struct InterlockedTraits<8>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<331,0,1>;

struct tagINTERFACEINFO
{
  /* 0x0000 */ struct IUnknown* pUnk;
  /* 0x0008 */ struct _GUID iid;
  /* 0x0018 */ unsigned short wMethod;
  /* 0x001a */ char __PADDING__[6];
}; /* size: 0x0020 */

class Spinlock<111,9,1>
{
}; /* size: 0x0004 */

struct TdsTvpSLock
{
}; /* size: 0x0004 */

struct stat
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1133[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long st_size;
  /* 0x0018 */ __int64 st_atime;
  /* 0x0020 */ __int64 st_mtime;
  /* 0x0028 */ __int64 st_ctime;
}; /* size: 0x0030 */

typedef struct __m128d
{
  /* 0x0000 */ double m128d_f64[2];
} _m128d, *P_m128d; /* size: 0x0010 */

typedef struct _LOCALGROUP_MEMBERS_INFO_0
{
  /* 0x0000 */ void* lgrmi0_sid;
} LOCALGROUP_MEMBERS_INFO_0, *PLOCALGROUP_MEMBERS_INFO_0; /* size: 0x0008 */

class XeSosPkg::large_cache_entry_value_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1134[140];
      /* 0x0240 */ unsigned char m_buf[89];
    }; /* size: 0x0069 */
    /* 0x0000 */ const int cache_addressOffset;
    /* 0x0000 */ const int descriptor_addressOffset;
    /* 0x0000 */ const int user_data_addressOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int size_in_pagesOffset;
    /* 0x0000 */ const int time_to_generateOffset;
    /* 0x0000 */ const int use_countOffset;
    /* 0x0000 */ const int average_intervalOffset;
    /* 0x0000 */ const int time_since_last_useOffset;
    /* 0x0000 */ const int probability_of_reuseOffset;
    /* 0x0000 */ const int old_valueOffset;
    /* 0x0000 */ const int new_valueOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x02a0 */

class AutoSpinlockHolder<98,11,1>;

struct std::tr1::add_rvalue_reference<void>
{
}; /* size: 0x0001 */

struct IWbemConstructClassObject
{
}; /* size: 0x0008 */

struct std::_Iterator012<std::random_access_iterator_tag,unsigned short,__int64,unsigned short const *,unsigned short const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

struct std::iterator_traits<__int64>
{
}; /* size: 0x0001 */

struct CM_FMHistorySLock
{
}; /* size: 0x0004 */

class TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>
{
}; /* size: 0x0018 */

class AutoSpinlockHolder<267,1,1>;

class AutoSpinlockHolder<165,3,1>;

class XE_FileSet::Entry
{
  /* 0x0000 */ wchar_t m_Path[260];
  /* 0x0208 */ void* m_Payload;
}; /* size: 0x0210 */

class Spinlock<173,3,1>
{
}; /* size: 0x0004 */

typedef struct _PO_WAKE_SOURCE_INFO
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Offsets[1];
} PO_WAKE_SOURCE_INFO, *PPO_WAKE_SOURCE_INFO; /* size: 0x0008 */

class Spinlock<283,1,1>
{
}; /* size: 0x0004 */

class Spinlock<330,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<129,7,1>;

class CacheClockHand<CacheProbabilisticAlgorithm,ProbCostData>
{
  /* 0x0000 */ class ProbCostData* const CLOCK_CANTSETPOSITION;
  /* 0x0008 */ long Padding_1135[24];
  /* 0x0068 */ class ProbCostData* m_descriptor;
  /* 0x0070 */ class CacheProbabilisticAlgorithm* m_algorithm;
  /* 0x0078 */ int m_isMoving;
}; /* size: 0x0080 */

class CacheCostModelBuilder
{
  /* 0x0000 */ struct DynInterval m_dynIntervalsCache[703];
  /* 0xafc0 */ int m_dynIntCacheIndex;
  /* 0xafc4 */ long Padding_1136;
  /* 0xafc8 */ double m_avgValueOfEntry;
  /* 0xafd0 */ double m_stdDevValueOfEntry;
}; /* size: 0xafd8 */

class CacheProbabilisticAlgorithm
{
  union
  {
    /* 0x0000 */ const int SOSHOST_EXPOSED;
    /* 0x0000 */ enum cache_type TYPE;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1137[17];
  /* 0x0048 */ __int64 m_sizeInPages;
  /* 0x0050 */ double m_valueOfMemory;
  /* 0x0058 */ double m_memoryPressureBenefitCutoffs[3];
  /* 0x0070 */ unsigned long m_cutoffIndex;
  /* 0x0074 */ long Padding_1138;
  /* 0x0078 */ class CacheClockHand<CacheProbabilisticAlgorithm,ProbCostData> m_hand;
  /* 0x00f8 */ class ClockHand::Statistic m_sweepStats;
  /* 0x0158 */ class CacheCostModelBuilder m_modelBuilder;
  /* 0xb130 */ class CostModelCombiner m_modelCombiner;
  /* 0xb150 */ class CacheWideStats m_cacheWideStats;
}; /* size: 0xb180 */

class SpinlockHolder<174,3,1>;

class SpinlockHolder<66,16,1>;

class AutoSpinlockHolder<105,9,1>;

class SpinlockHolder<107,9,1>;

class CAutoP<XE_FileReaderDefaultPolicy>
{
}; /* size: 0x0008 */

class ReduceTypeListNode<NullType,NullType>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION
{
  /* 0x0000 */ unsigned long FlagsToEnable;
  /* 0x0004 */ unsigned long FlagsToDisable;
} SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION, *PSYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION; /* size: 0x0008 */

class AutoSpinlockHolder<198,3,1>;

class CAutoRg<EventTypeEntry>
{
}; /* size: 0x0008 */

struct XPRESS9_ENCODER_PARAMS_T
{
  /* 0x0000 */ unsigned int m_cbSize;
  /* 0x0004 */ unsigned int m_uMaxStreamLength;
  /* 0x0008 */ unsigned int m_uMtfEntryCount;
  /* 0x000c */ unsigned int m_uLookupDepth;
  /* 0x0010 */ unsigned int m_uWindowSizeLog2;
  /* 0x0014 */ unsigned int m_uOptimizationLevel;
  /* 0x0018 */ unsigned int m_uPtrMinMatchLength;
  /* 0x001c */ unsigned int m_uMtfMinMatchLength;
}; /* size: 0x0020 */

struct IDmpDump
{
}; /* size: 0x0008 */

struct FgcbPrpFillSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<225,2,1>;

class AutoSpinlockHolder<46,18,1>;

typedef struct _exception
{
  /* 0x0000 */ int type;
  /* 0x0004 */ long Padding_1139;
  /* 0x0008 */ char* name;
  /* 0x0010 */ double arg1;
  /* 0x0018 */ double arg2;
  /* 0x0020 */ double retval;
} exception, *Pexception; /* size: 0x0028 */

class CAutoRefc<IXMLDOMDocument2>
{
  /* 0x0000 */ struct IXMLDOMDocument2* m_pt;
}; /* size: 0x0008 */

class SpinlockHolder<168,3,1>;

typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER
{
  /* 0x0000 */ unsigned char First0x24BytesOfBootSector[36];
} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER; /* size: 0x0024 */

class Spinlock<149,4,1>
{
}; /* size: 0x0004 */

class WCharKey
{
  /* 0x0000 */ const wchar_t* m_value;
}; /* size: 0x0008 */

class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;

struct XE_TObjects<XEPackage,2>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEPackage *,2> m_objectPtrs;
}; /* size: 0x0020 */

class Spinlock<230,1,1>
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

struct XE_TArray<XEDataAttribute,25>
{
  /* 0x0000 */ struct XEDataAttribute m_array[25];
}; /* size: 0x03e8 */

class SpinlockHolder<105,9,1>;

struct ColumnStoreBuildStateListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<291,1,1>;

class SEListSized<SOS_Scheduler,3224>
{
  /* 0x0000 */ long Padding_1140[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class SEList<XE_XMLObjectString,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class PageHeapMemObj
{
  /* 0x0000 */ const unsigned __int64 xsm_cbMaxSizeFitsOnPage;
  /* 0x0008 */ long Padding_1141[12];
  /* 0x0038 */ __int64 m_totalPages;
  /* 0x0040 */ __int64 m_multiplePages;
  /* 0x0048 */ __int64 m_maxPages;
  /* 0x0050 */ class SEList<PageHeapPageInfo,40> m_pagesList;
  /* 0x0060 */ int m_fTrackOn;
  /* 0x0064 */ int m_fIsUnaligned;
}; /* size: 0x0068 */

class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,1>,0>
{
  /* 0x0000 */ wchar_t m_buffer[1024];
  /* 0x0800 */ const wchar_t* m_comperand;
  /* 0x0808 */ unsigned int m_cbCompRemaining;
  /* 0x080c */ int m_result;
}; /* size: 0x0810 */

class CRTSEHTranslatorSetter<CRTSEHSOSTranslatorSetter>
{
  /* 0x0000 */ void* m_oldTranslator /* function */;
}; /* size: 0x0008 */

class XeSqlPkg::all_database_segment_files_attach
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1142[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int recovery_unit_idOffset;
    /* 0x0000 */ const int files_countOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

struct XE_TEvent<4,1,25>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,25> m_dynamicAttr;
  /* 0x04c0 */ struct XEEvent m_event;
}; /* size: 0x0508 */

class SESListEnum<XESessionContext,56>;

class PerCPUDataBase<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition>
{
}; /* size: 0x0010 */

struct XBitmap<StaticStorage<1024> >
{
  /* 0x0000 */ struct StaticStorage<1024> m_storage;
}; /* size: 0x0080 */

class PerCPUDataBase<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition>::Enum;

class Spinlock<18,19,1>
{
}; /* size: 0x0004 */

class Spinlock<248,1,1>
{
}; /* size: 0x0004 */

class TAutoMutex<SOS_RecursiveMutex,4294967295>
{
  /* 0x0000 */ class SOS_RecursiveMutex* m_pMutex;
  /* 0x0008 */ unsigned long m_scopeCtr;
}; /* size: 0x0010 */

class SEList<SOS_Scheduler,3224>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class IMemObj
{
  /* 0x0000 */ long Padding_1143[4];
  /* 0x0010 */ unsigned __int64 m_PageSize;
  /* 0x0018 */ enum SOSHOST_MEMOBJ_ID m_Id;
  /* 0x001c */ long Padding_1144;
  /* 0x0020 */ class MemObjProxy* m_pListProxy;
  /* 0x0028 */ unsigned long m_status;
  /* 0x002c */ long Padding_1145;
  /* 0x0030 */ class PageAllocator* m_parentAllocator;
}; /* size: 0x0038 */

class XeSqlPkg::xtp_create_table
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1146[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class MemObjProxy
{
  /* 0x0000 */ long Padding_1147[8];
  /* 0x0020 */ void* m_MemObjCookie;
  /* 0x0028 */ volatile long m_refCountExternal;
  /* 0x002c */ long Padding_1148;
  /* 0x0030 */ class IMemObj* m_pMemObj;
  /* 0x0038 */ unsigned long m_creationOptions;
}; /* size: 0x0040 */

class QuotaController
{
  union
  {
    struct
    {
      /* 0x0000 */ __int64 m_Allocated;
      /* 0x0008 */ long Padding_1149[14];
      /* 0x0040 */ __int64 m_Freed;
      /* 0x0048 */ long Padding_1150[14];
      /* 0x0080 */ __int64 m_requests;
      /* 0x0088 */ long Padding_1151[14];
      /* 0x00c0 */ unsigned long m_controlFlags;
      /* 0x00c4 */ long Padding_1152;
      /* 0x00c8 */ __int64 m_SoftQuota;
      /* 0x00d0 */ __int64 m_HardQuota;
      /* 0x00d8 */ __int64 m_PredictedAllocations;
      /* 0x00e0 */ void* m_UpdateQuotas /* function */;
      /* 0x00e8 */ volatile __int64 m_sampling;
      /* 0x00f0 */ __int64 m_currentRate;
      /* 0x00f8 */ __int64 m_prevOutstandingAllocations;
      /* 0x0100 */ volatile long m_updateInProgress;
    }; /* size: 0x0058 */
    /* 0x0000 */ const int GENERAL_REQUESTS_TO_UPDATE;
    /* 0x0000 */ const int GENERAL_SAMPLES_TO_UPDATE;
    /* 0x0000 */ const int GENERAL_REQUESTS_TO_PREDICT_FOR;
  }; /* size: 0x0058 */
}; /* size: 0x0140 */

class PageAllocator
{
  /* 0x0000 */ const unsigned int BAD_PAGE_ID;
  /* 0x0004 */ long Padding_1153;
  /* 0x0008 */ unsigned long m_PageSize;
  /* 0x000c */ long Padding_1154[13];
  /* 0x0040 */ class QuotaController m_quotaControllers[4];
}; /* size: 0x0540 */

class XEPackage0::XE_ETWEventStream
{
  union
  {
    struct
    {
      /* 0x0000 */ const struct XECollectedEvent* const m_pCE;
      /* 0x0008 */ const struct XEEvent* const m_event;
      /* 0x0010 */ const class PackageProperty* const m_packageProperties;
      /* 0x0018 */ unsigned short m_eddIndex;
      /* 0x001a */ unsigned short m_addIndex;
      /* 0x001c */ unsigned short m_addLimit;
      /* 0x001e */ char Padding_1155[2];
      /* 0x0020 */ enum XEPackage0::XE_ETWEventStream::Phase m_phase;
      /* 0x0024 */ struct XE_ETWActionMetadata m_actionMetadataBuffer[16];
      /* 0x01a4 */ unsigned int m_actionMetadataBufferIndex;
    }; /* size: 0x01a6 */
    /* 0x0000 */ const char ANSITERM;
    /* 0x0000 */ const wchar_t UNICODETERM;
  }; /* size: 0x01a6 */
}; /* size: 0x01a8 */

class Spinlock<146,4,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<45,18,1>;

struct XEPackage0::EventTraceQueryProperties
{
  /* 0x0000 */ struct _EVENT_TRACE_PROPERTIES m_properties;
  /* 0x0078 */ wchar_t m_sessionName[1024];
  /* 0x0878 */ wchar_t m_logFilePath[1024];
}; /* size: 0x1078 */

class XEPackage0::XE_ETWMofBlock
{
  /* 0x0000 */ struct _EVENT_TRACE_HEADER m_header;
  /* 0x0030 */ struct _MOF_FIELD m_data[16];
  /* 0x0130 */ unsigned int m_mofIndex;
  /* 0x0134 */ unsigned int m_mofRemaining;
  /* 0x0138 */ unsigned long m_maxMofBlockSize;
}; /* size: 0x0140 */

class XeSqlPkg::hadr_thread_pool_worker_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1156[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int worker_limitOffset;
    /* 0x0000 */ const int idle_workersOffset;
    /* 0x0000 */ const int active_workersOffset;
    /* 0x0000 */ const int worker_start_successOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class TEnumerator<TList<ExternalCacheList,ExternalCache,8,TListSLock> >
{
  /* 0x0000 */ class ExternalCache* m_currentObject;
  /* 0x0008 */ class ExternalCache* m_lastObjectSeen;
  /* 0x0010 */ class TList<ExternalCacheList,ExternalCache,8,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class TAutoMutex<UnfairRecursiveMutexInternal<SuspendQueueSLock,0>,4294967295>
{
  /* 0x0000 */ class UnfairRecursiveMutexInternal<SuspendQueueSLock,0>* m_pMutex;
  /* 0x0008 */ unsigned long m_scopeCtr;
}; /* size: 0x0010 */

class Spinlock<235,1,1>
{
}; /* size: 0x0004 */

typedef struct _SHARE_INFO_1005
{
  /* 0x0000 */ unsigned long shi1005_flags;
} SHARE_INFO_1005, *PSHARE_INFO_1005; /* size: 0x0004 */

class CAutoBase<CAutoRefc<XList<XE_TargetEntry> > >
{
  /* 0x0000 */ class CAutoRefc<XList<XE_TargetEntry> >* m_pt;
}; /* size: 0x0008 */

class PeriodicTimer<100>::AutoCheck
{
  /* 0x0000 */ class PeriodicTimer<100>* m_timer;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_currentTime;
}; /* size: 0x0010 */

class XeSqlPkg::broker_queue_activation_alert
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1157[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int queue_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int time_since_receive_secsOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x01c0 */
}; /* size: 0x0258 */

class SOS_ResourceGroup
{
  /* 0x0000 */ long Padding_1158[206];
  /* 0x0338 */ class SOS_ResourcePool* m_Pool;
  /* 0x0340 */ struct _SYSTEMTIME m_CreationTime;
  /* 0x0350 */ volatile long m_MaxRequestsCurrent;
  /* 0x0354 */ volatile short m_MaxWorkersCurrent;
  /* 0x0356 */ volatile short m_MaxSessionsCurrent;
  /* 0x0358 */ class EventAutoInternal<SuspendQueueSLock> m_throttlingEvent;
  /* 0x0380 */ unsigned long m_flags;
  /* 0x0384 */ long Padding_1159;
  /* 0x0388 */ unsigned long* m_runnableWorkerWeight;
}; /* size: 0x0390 */

class CAutoRefc<XE_PredicateExpr>
{
  /* 0x0000 */ class XE_PredicateExpr* m_pt;
}; /* size: 0x0008 */

class SEListEnum<XE_XMLObjectString,0>;

class XeSosPkg::large_cache_caching_decision
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1160[140];
      /* 0x0240 */ unsigned char m_buf[83];
    }; /* size: 0x0063 */
    /* 0x0000 */ const int cache_addressOffset;
    /* 0x0000 */ const int descriptor_addressOffset;
    /* 0x0000 */ const int user_data_addressOffset;
    /* 0x0000 */ const int is_insertionOffset;
    /* 0x0000 */ const int decisionOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int size_in_pagesOffset;
    /* 0x0000 */ const int time_to_generateOffset;
    /* 0x0000 */ const int use_countOffset;
    /* 0x0000 */ const int average_intervalOffset;
    /* 0x0000 */ const int probability_of_reuseOffset;
    /* 0x0000 */ const int valueOffset;
    /* 0x0000 */ const int value_of_memoryOffset;
  }; /* size: 0x02d0 */
}; /* size: 0x0298 */

struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_1161;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[2];
}; /* size: 0x0028 */

class AggregatedStats
{
  /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ticksCPU;
  /* 0x0008 */ int m_Reported;
}; /* size: 0x0010 */

class SOS_Task
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned long NoPoolTracking;
      /* 0x0004 */ long Padding_1162[11];
      /* 0x0030 */ enum TASK_LOAD_TYPE m_LoadType;
      /* 0x0034 */ long Padding_1163;
      /* 0x0038 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_EnqueueTicks;
      /* 0x0040 */ class SOS_Task::Param m_Params;
      /* 0x0088 */ void* m_pExitValue;
      /* 0x0090 */ struct TaskSLock m_Lock;
      /* 0x0094 */ long Padding_1164;
      /* 0x0098 */ class Worker* m_pWorker;
      /* 0x00a0 */ class SOS_Scheduler* m_pSched;
      /* 0x00a8 */ class SOSHost* m_pHost;
      /* 0x00b0 */ enum SOS_Task::TASK_QUEUE_STATE m_State;
      /* 0x00b4 */ class AtomicBits<unsigned long> m_Flags;
      /* 0x00b8 */ enum SOS_Task::TASK_ABORT_TYPE m_taskAbortType;
    }; /* size: 0x0088 */
    struct
    {
      /* 0x0000 */ const unsigned long SOS_WAITINFOS_PER_TASK;
      /* 0x0004 */ long Padding_1165[47];
      /* 0x00c0 */ class SOS_WaitInfo* m_pWaitInfo;
      /* 0x00c8 */ class SEShortStack<SOS_ExternalAutoWait,6> m_WaitInfoExternal;
      /* 0x0100 */ unsigned long m_progressMark;
      /* 0x0104 */ unsigned long m_deadlockResources;
      /* 0x0108 */ unsigned int m_LastWaitType;
      /* 0x010c */ char m_chWaitString[30];
      /* 0x012a */ char Padding_1166[6];
      /* 0x0130 */ class SEListElem m_linkDeadlockSearchQueue;
      /* 0x0140 */ class AbortTaskListEntry m_linkAbortElem;
      /* 0x0158 */ enum SOS_Task::TASK_DEADLOCK_PRIORITY m_deadlockPriority;
      /* 0x015c */ unsigned long m_contextSwitches;
      /* 0x0160 */ unsigned long m_numberOfIOs;
      /* 0x0164 */ long Padding_1167;
      /* 0x0168 */ unsigned __int64 m_byteCountIOs;
      /* 0x0170 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_cpuTicks;
    }; /* size: 0x00b2 */
    /* 0x0000 */ enum MemoryBrokerType TASKMEMORYBROKER_OTHER;
    /* 0x0000 */ const unsigned long TASKMEMORYBROKER_LAST;
  }; /* size: 0x00b2 */
  /* 0x00b2 */ char Padding_1168[198];
  /* 0x0178 */ __int64 m_memoryCounters[8];
  /* 0x01b8 */ __int64 m_allMemoryAllocated;
  /* 0x01c0 */ __int64 m_inFlightCounters[64];
  /* 0x03c0 */ class AggregatedStats m_childStats;
}; /* size: 0x03d0 */

class XeSqlPkg::promote_tran_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1169[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0148 */
}; /* size: 0x0248 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,16777216,0,2,0> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class AutoSpinlockHolder<135,4,1>;

struct RangeGenerationSLock
{
}; /* size: 0x0004 */

class SOS_NodeInfo
{
  /* 0x0000 */ long Padding_1170[8];
  /* 0x0020 */ unsigned short m_MemoryNodeInfoId;
}; /* size: 0x0028 */

struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionWithActive
{
}; /* size: 0x0080 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,524288,4194304,4,0> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class TMemoryBlockAllocator<0,524288,4194304,4,0>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,524288,4194304,4,0> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionWithActive m_nodePart[64];
  /* 0x20c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,524288,4194304,4,0> > m_reservationForActiveParts;
}; /* size: 0x2100 */

class UnfairRecursiveMutexInternal<SuspendQueueSLock,0>
{
  union
  {
    /* 0x0000 */ const unsigned __int64 sm_invalidOwnerWaitingForTransfer;
    /* 0x0000 */ struct SuspendQueueSLock m_lock;
  }; /* size: 0x0008 */
  /* 0x0008 */ class SOSQueue<Worker,0> m_waitingWorkers;
  /* 0x0018 */ class Worker* m_pOwner;
  /* 0x0020 */ class SOS_Task* m_pOwningTaskNoRef;
  /* 0x0028 */ class SOS_Scheduler* m_ownerScheduler;
  /* 0x0030 */ __int64 m_cRecursion;
}; /* size: 0x0038 */

class PhysicalPageCache
{
  /* 0x0000 */ class UnfairRecursiveMutexInternal<SuspendQueueSLock,0> m_lock;
  /* 0x0038 */ unsigned __int64 m_ppCacheSize;
  /* 0x0040 */ unsigned __int64 m_ppcache[2048];
}; /* size: 0x4040 */

class PeriodicTimer<100>
{
  union
  {
    /* 0x0000 */ const class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> PeriodTicks;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastPeriodTime;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

class PeriodicTimer<120000>
{
  union
  {
    /* 0x0000 */ const class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> PeriodTicks;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastPeriodTime;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct VmLowSLock
{
}; /* size: 0x0004 */

struct VMResourceControl
{
  /* 0x0000 */ struct VmLowSLock lock;
  /* 0x0004 */ int isVmResourceLow;
  /* 0x0008 */ unsigned long vmAmountToReleasePressure;
  /* 0x000c */ long Padding_1171;
  /* 0x0010 */ void* vmResourceHandle;
}; /* size: 0x0018 */

class SOS_Atomic<_MEMORYSTATUSEX>
{
  /* 0x0000 */ struct _MEMORYSTATUSEX m_object;
  /* 0x0040 */ unsigned int m_counter;
}; /* size: 0x0048 */

class MemoryNode
{
  union
  {
    /* 0x0000 */ const __int64 MaxPages;
    /* 0x0000 */ void* sm_VirtualAllocExNuma /* function */;
    /* 0x0000 */ void* sm_VirtualAllocExNumaLarge /* function */;
    struct
    {
      /* 0x0000 */ void* sm_AllocateUserPhysicalPagesNuma /* function */;
      /* 0x0008 */ long Padding_1172[10];
      /* 0x0030 */ volatile long m_Id;
      /* 0x0034 */ long Padding_1173;
      /* 0x0038 */ __int64 m_VasPagesReserved;
      /* 0x0040 */ __int64 m_VasPagesCommitted;
      /* 0x0048 */ __int64 m_SharedMemoryPagesCommitted;
      /* 0x0050 */ __int64 m_AWEPagesAllocated;
      /* 0x0058 */ __int64 m_WorkSpacePagesCommitted;
      /* 0x0060 */ __int64 m_ForeignPagesCommitted;
      /* 0x0068 */ __int64 m_AwayPagesCommitted;
      /* 0x0070 */ __int64 m_TakenAwayPagesCommitted;
      /* 0x0078 */ __int64 m_AllocationPendingPages;
      /* 0x0080 */ unsigned short m_NumaNodeId;
      /* 0x0082 */ char Padding_1174[6];
      /* 0x0088 */ __int64 m_LocalTargetPages;
      /* 0x0090 */ __int64 m_AvailablePages;
    }; /* size: 0x0066 */
    /* 0x0000 */ unsigned long sm_ActiveNodes;
    /* 0x0000 */ unsigned long sm_MaxSizeForVMPressure;
    struct
    {
      /* 0x0000 */ unsigned long sm_MinSizeForVMPressure;
      /* 0x0004 */ long Padding_1175[37];
      /* 0x0098 */ class LargePageAllocator m_largePageAllocator;
      /* 0x00d0 */ class SOS_InterlockedList<SOS_MemoryFreeBlock,0> m_awayList;
      /* 0x00e0 */ class PhysicalPageCache m_ppCache;
      /* 0x4120 */ unsigned long m_options;
    }; /* size: 0x4090 */
    /* 0x0000 */ int sm_adjustmentInProgress;
    /* 0x0000 */ class PeriodicTimer<100> sm_memoryAdjustmentTimer;
    /* 0x0000 */ int sm_statusDumpInProgress;
    /* 0x0000 */ class PeriodicTimer<120000> sm_memoryStatusDumpTimer;
    /* 0x0000 */ class FreePagePool sm_emergencyPageAllocator;
    /* 0x0000 */ const unsigned long sm_timeToWaitOnVMLow;
    /* 0x0000 */ struct VMResourceControl sm_vmStatus;
    /* 0x0000 */ const unsigned long sm_VirtualAllocMaxRetries;
    /* 0x0000 */ volatile long sm_DidDumpOnFailure[6];
    /* 0x0000 */ const wchar_t** sm_failureNames /* zero-length array */;
    /* 0x0000 */ const wchar_t** sm_oomFactorNames /* zero-length array */;
    /* 0x0000 */ unsigned long sm_memStatus;
    /* 0x0000 */ __int64 sm_startupTotalPhysicalPages;
    /* 0x0000 */ class SOS_Atomic<_MEMORYSTATUSEX> sm_ms64atomic;
  }; /* size: 0x4090 */
}; /* size: 0x4130 */

class SpinlockHolder<243,1,1>
{
  /* 0x0000 */ class Spinlock<243,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class XeSqlPkg::query_rpc_server_collection_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1176[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_descriptorOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class CAutoP<XEPackage0::PairingTarget>
{
}; /* size: 0x0008 */

class SpinlockHolder<110,9,1>;

class Spinlock<12,19,1>
{
}; /* size: 0x0004 */

struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionWithActive
{
}; /* size: 0x00c0 */

struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionWithoutActive
{
}; /* size: 0x00c0 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,32768,524288,8,1> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class TMemoryBlockAllocator<0,32768,524288,8,1>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,32768,524288,8,1> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionWithoutActive m_nodePart[64];
  /* 0x30c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,32768,524288,8,1> > m_reservationForActiveParts;
}; /* size: 0x3100 */

class AutoSpinlockHolder<1,19,1>;

class Spinlock<281,1,1>
{
}; /* size: 0x0004 */

struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionWithActive
{
}; /* size: 0x00c0 */

class XeSqlPkg::query_driver_sent_rows_affected
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1177[143];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x001e */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int rows_affectedOffset;
  }; /* size: 0x001e */
}; /* size: 0x0260 */

class SOS_RingBufferRecord
{
  /* 0x0000 */ long Padding_1178;
  /* 0x0004 */ unsigned long m_Id;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_TimeStamp;
}; /* size: 0x0010 */

class SpinlockHolder<236,1,1>
{
  /* 0x0000 */ class Spinlock<236,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class XE_FileTargetParams
{
  union
  {
    /* 0x0000 */ const wchar_t* const XE_File_LogFileName;
    /* 0x0000 */ const wchar_t* const XE_File_LogMaxFileSizeInMBytes;
    /* 0x0000 */ const wchar_t* const XE_File_LogMaxRolloverFiles;
    /* 0x0000 */ const wchar_t* const XE_File_LogMaxFiles;
    /* 0x0000 */ const wchar_t* const XE_File_LogIncrementSizeInMBytes;
    /* 0x0000 */ const wchar_t* const XE_File_MetadataFileName;
    /* 0x0000 */ const wchar_t* const XE_File_SortOptions;
    /* 0x0000 */ const wchar_t* const XE_File_BufferSizeInKBytes;
    /* 0x0000 */ const wchar_t* const XE_File_BufferTimeoutInMSec;
    /* 0x0000 */ const wchar_t* const XE_Live_LiveWriter;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

class XeSosPkg::node_created
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1179[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int cpu_maskOffset;
    /* 0x0000 */ const int affinity_maskOffset;
    /* 0x0000 */ const int cpu_groupOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSosPkg::dump_exception_routine_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1180[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int exception_codeOffset;
    /* 0x0000 */ const int exception_addressOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class TSimpleHashTable_EntryAccessor<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>
{
  /* 0x0000 */ class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>::Bucket* const m_pbucket;
  /* 0x0008 */ const unsigned int m_hashValue;
  /* 0x000c */ long Padding_1181;
  /* 0x0010 */ void* m_compareRoutine /* function */;
  /* 0x0018 */ unsigned __int64 m_poolMask;
  /* 0x0020 */ unsigned int m_stateMask;
}; /* size: 0x0028 */

class AutoSpinlockHolder<20,19,1>;

class AutoSpinlockHolder<221,2,1>;

class SpinlockHolder<191,3,1>;

struct AsyncStatsListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<6,19,1>;

struct TlsSlotInfo
{
  /* 0x0000 */ unsigned long HkSlot;
  /* 0x0004 */ unsigned long FirstSlot;
  /* 0x0008 */ unsigned long NumberOfEntries;
}; /* size: 0x000c */

class SystemThreadPool
{
  /* 0x0000 */ unsigned int m_lock;
  /* 0x0004 */ long Padding_1182;
  /* 0x0008 */ class TSinglyLinkedList<SystemThreadPool::SystemThreadBlock> m_sysThreadBlocks;
}; /* size: 0x0010 */

struct SysThreadSLock
{
}; /* size: 0x0004 */

class SystemThread
{
  /* 0x0000 */ long Padding_1183[48];
  /* 0x00c0 */ unsigned long m_CPUId;
  union
  {
    /* 0x0000 */ struct TlsSlotInfo sm_tlsSlotInfo;
    /* 0x0000 */ const unsigned long SYSTHREAD_TLSSLOTS;
    /* 0x0000 */ const unsigned long NEEDED_TLSSLOTS;
    /* 0x0000 */ class SystemThreadPool sm_SysThreadPool;
    /* 0x0000 */ unsigned long sm_FirstNonVolatileIdx;
    /* 0x0000 */ void* sm_GetThreadIOPendingFlag /* function */;
  }; /* size: 0x0010 */
  /* 0x0010 */ long Padding_1184[46];
  /* 0x00c8 */ class GroupAffinity m_affinity;
  /* 0x00d8 */ struct SysThreadSLock m_lock;
  /* 0x00dc */ long Padding_1185;
  /* 0x00e0 */ class SystemThread* m_pSignalledBy;
  /* 0x00e8 */ class Worker* m_pWorker;
  /* 0x00f0 */ unsigned long m_Status;
  /* 0x00f4 */ long Padding_1186;
  /* 0x00f8 */ class SystemThread* m_pMyself;
  /* 0x0100 */ unsigned long m_Id;
  /* 0x0104 */ long Padding_1187;
  /* 0x0108 */ void* m_FiberContext;
  /* 0x0110 */ void* m_OsHandle;
  /* 0x0118 */ void* m_Token;
  /* 0x0120 */ void* m_Event;
  /* 0x0128 */ class SOS_Scheduler* m_pScheduler;
  /* 0x0130 */ unsigned long m_workerDirections;
}; /* size: 0x0138 */

class Spinlock<94,11,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_scan_control
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1188[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int scan_statusOffset;
    /* 0x0000 */ const int shutdown_typeOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XE_StreamCompare<char,XEPackage0::StringCompare<char,2>,2>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ const char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

class XeSqlPkg::query_execution_batch_processing_bitmap_build
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1189[143];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int bytesOffset;
    /* 0x0000 */ const int is_fast_bitmapOffset;
  }; /* size: 0x0019 */
}; /* size: 0x0258 */

class SEListEnum<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>* m_pNext;
}; /* size: 0x0010 */

class SpinlockHolder<212,2,1>;

class SpinlockHolder<74,16,1>;

class Spinlock<54,16,1>
{
}; /* size: 0x0004 */

struct LockHashSLock
{
}; /* size: 0x0004 */

class StackFrames<40>
{
  union
  {
    struct
    {
      /* 0x0000 */ volatile long m_ActiveUsers;
      /* 0x0004 */ unsigned long m_ResourceType;
      /* 0x0008 */ struct SOSHOST_CACHESTORE_COOKIE__* m_Cookie;
    }; /* size: 0x0010 */
    /* 0x0000 */ const unsigned int sm_framesToSkip;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned long m_hashValue;
  /* 0x0014 */ long Padding_1190;
  /* 0x0018 */ void* m_frames[40];
  /* 0x0158 */ unsigned long m_count;
  /* 0x015c */ long Padding_1191;
  /* 0x0160 */ class StackFramesStore* m_StackFramesStore;
}; /* size: 0x0168 */

class SpinlockHolder<96,11,1>;

struct ChannelForceCloseManagerSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<7,19,1>;

class Spinlock<41,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::qn_dynamics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1192[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int activityOffset;
    /* 0x0000 */ const int query_notification_xml_informationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class Spinlock<165,3,1>
{
}; /* size: 0x0004 */

class TMemoryBlockAllocator<0,16777216,0,2,0>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,16777216,0,2,0> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionWithActive m_nodePart[64];
  /* 0x10c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,16777216,0,2,0> > m_reservationForActiveParts;
}; /* size: 0x1100 */

class XeSqlPkg::query_rx_allocate_buffers
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1193[143];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int is_eosOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0019 */
}; /* size: 0x0258 */

class Spinlock<98,11,1>
{
}; /* size: 0x0004 */

struct RpcPackageSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<222,2,1>
{
  /* 0x0000 */ class Spinlock<222,2,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class SOSHost
{
  /* 0x0000 */ long Padding_1194[8];
  /* 0x0020 */ class MemoryClerk* m_DefaultMemClerk;
  /* 0x0028 */ enum SOSHOST_CLIENTID m_clientId;
  /* 0x002c */ wchar_t m_szClientName[32];
  /* 0x006c */ unsigned long m_tasksEnqueued;
  /* 0x0070 */ unsigned long m_tasksActive;
  /* 0x0074 */ unsigned long m_iosCompleted;
  /* 0x0078 */ unsigned __int64 m_ioBytesCompleted;
  /* 0x0080 */ unsigned long m_iosActive;
}; /* size: 0x0088 */

class SpinlockHolder<113,9,1>;

class CAutoP<IAutoSimpleXact>
{
}; /* size: 0x0008 */

class AutoSimpleXact
{
  /* 0x0000 */ class CAutoP<IAutoSimpleXact> m_pimpl;
}; /* size: 0x0008 */

class AutoSpinlockHolder<286,1,1>;

struct XE_TypeTraits<XEType>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class XeSosPkg::multiple_tasks_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1195[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int tasks_countOffset;
    /* 0x0000 */ const int execution_flagsOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::hadr_dump_primary_progress
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1196[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int send_queue_sizeOffset;
    /* 0x0000 */ const int common_redo_lsnOffset;
    /* 0x0000 */ const int truncation_lsnOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<27,19,1>;

class XEPackage0::HistoryTargetFailureInterface
{
  /* 0x0000 */ long Padding_1197[2];
  /* 0x0008 */ unsigned int m_failuresRecorded;
  /* 0x000c */ int m_active;
  /* 0x0010 */ int m_deactivatedDueToErrors;
}; /* size: 0x0018 */

class XeSqlPkg::dbtable_options_refresh
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1198[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct XE_TEvent<3,0,11>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,11> m_dynamicAttr;
  /* 0x0238 */ struct XEEvent m_event;
}; /* size: 0x0280 */

class XeSosPkg::large_cache_state_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1199[140];
      /* 0x0240 */ unsigned char m_buf[74];
    }; /* size: 0x005a */
    /* 0x0000 */ const int cache_addressOffset;
    /* 0x0000 */ const int descriptor_addressOffset;
    /* 0x0000 */ const int user_data_addressOffset;
    /* 0x0000 */ const int start_stateOffset;
    /* 0x0000 */ const int end_stateOffset;
    /* 0x0000 */ const int size_in_pagesOffset;
    /* 0x0000 */ const int time_to_generateOffset;
    /* 0x0000 */ const int use_countOffset;
    /* 0x0000 */ const int average_intervalOffset;
    /* 0x0000 */ const int probability_of_reuseOffset;
    /* 0x0000 */ const int valueOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0290 */

class SpinlockHolder<224,2,1>;

class SESListSized<XEPackage0::RingTarget::EventEntry,0>
{
  /* 0x0000 */ long Padding_1200[2];
  /* 0x0008 */ unsigned long m_size;
}; /* size: 0x0010 */

class SortedList<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>
{
  /* 0x0000 */ class SESListSized<XEPackage0::RingTarget::EventEntry,0> m_list;
  /* 0x0010 */ class XEPackage0::RingTarget::EventEntry* m_pTail;
  /* 0x0018 */ class XE_BaseAllocator m_allocator;
  /* 0x0020 */ unsigned int m_firstIndexCount;
  /* 0x0024 */ unsigned int m_ratioTimes100;
  /* 0x0028 */ unsigned int m_nextGrowSize;
  /* 0x002c */ long Padding_1201;
  /* 0x0030 */ struct SortedList<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>::Index* m_indexes;
  /* 0x0038 */ unsigned int m_cIndexes;
  /* 0x003c */ int m_isDirty;
}; /* size: 0x0040 */

class XEPackage0::RingTarget
{
  /* 0x0000 */ const unsigned int AVERAGE_EVENT_SIZE;
  /* 0x0004 */ long Padding_1202;
  /* 0x0008 */ void* m_hSess;
  /* 0x0010 */ void* m_lock;
  /* 0x0018 */ class SortedList<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator> m_events;
  /* 0x0058 */ unsigned int m_memAllocated;
  /* 0x005c */ unsigned int m_memMax;
  /* 0x0060 */ unsigned int m_maxEventCount;
  /* 0x0064 */ enum XEPackage0::RingTarget::Mode m_mode;
  /* 0x0068 */ unsigned int m_cCap;
  /* 0x006c */ long Padding_1203;
  /* 0x0070 */ struct XEPackage0::RingTarget::Stats m_stats;
  /* 0x0088 */ class XE_Auto m_packageHolder;
  /* 0x0090 */ class XE_AutoP<XEPackage0::RingTarget::PackageEntry> m_packages[1024];
  /* 0x2090 */ void* m_notificationSlot;
  /* 0x2098 */ class XEPackage0::RingTarget::EventEntry* m_pLastRemoved;
  /* 0x20a0 */ unsigned int m_avgEventSize;
  /* 0x20a4 */ long Padding_1204;
  /* 0x20a8 */ class XE_ErrorContext m_ErrorContext;
}; /* size: 0x20b0 */

class SpinlockHolder<232,2,1>;

class XEPackage0::RingTarget::EventTypeEntry
{
  /* 0x0000 */ unsigned __int64 m_Count;
  /* 0x0008 */ class XEPackage0::RingTarget::EventEntry* m_LastEvent;
}; /* size: 0x0010 */

class SpinlockHolder<194,3,1>;

struct DeferredWFExtDropSLock
{
}; /* size: 0x0004 */

class Spinlock<160,3,1>
{
}; /* size: 0x0004 */

class SOS_StateProtectors<ExtIntCodeProtector<0>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost
{
}; /* size: 0x0008 */

class AutoSpinlockHolder<320,1,1>;

class SOS_ExternalAutoWait
{
  /* 0x0000 */ long Padding_1205[10];
  /* 0x0028 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_waitStartedTime;
  /* 0x0030 */ int m_fPushed;
}; /* size: 0x0038 */

class XeSqlPkg::hadr_db_manager_redo
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1206[140];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0054 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int log_truncation_blockOffset;
    /* 0x0000 */ const int hadr_truncation_blockOffset;
    /* 0x0000 */ const int redo_pointOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0288 */

class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>
{
  /* 0x0000 */ long Padding_1207[12];
  /* 0x0030 */ void* m_pv;
}; /* size: 0x0038 */

class PerCPUData<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition>
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0010 */

class XeSqlPkg::xfcb_failed_request
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1208[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int errorcodeOffset;
    /* 0x0000 */ const int http_errorcodeOffset;
    /* 0x0000 */ const int mapped_errorcodeOffset;
    /* 0x0000 */ const int callback_statusOffset;
    /* 0x0000 */ const int retry_countOffset;
    /* 0x0000 */ const int file_byte_offsetOffset;
    /* 0x0000 */ const int file_byte_countOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0278 */

struct XE_TEvent<4,1,5>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,5> m_dynamicAttr;
  /* 0x01a0 */ struct XEEvent m_event;
}; /* size: 0x01e8 */

class XeSosPkg::wait_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1209[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int wait_typeOffset;
    /* 0x0000 */ const int wait_resultOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int signal_durationOffset;
    /* 0x0000 */ const int wait_resourceOffset;
  }; /* size: 0x01e8 */
}; /* size: 0x0268 */

class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition>
{
}; /* size: 0x0010 */

class PerCPUDataBase<DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::CpuPartition>::Enum;

class SpinlockHolder<299,1,1>;

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem
{
  /* 0x0000 */ long Padding_1210[8];
  /* 0x0020 */ class SOSCallbackEvent* volatile m_pNoUsersEvent;
}; /* size: 0x0028 */

class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ long Padding_1211[2];
  /* 0x0008 */ class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_enumerators;
  /* 0x0028 */ struct TListSLock m_lock;
}; /* size: 0x0030 */

class XeSqlPkg::broker_transmission_acksm_event_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1212[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class SEListSized<DynInterval,0>
{
  /* 0x0000 */ long Padding_1213[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class SEListEnum<SOS_Scheduler,3224>
{
  /* 0x0000 */ class SEList<SOS_Scheduler,3224>* m_pList;
  /* 0x0008 */ class SOS_Scheduler* m_pNext;
}; /* size: 0x0010 */

class Spinlock<278,1,1>
{
}; /* size: 0x0004 */

class Spinlock<292,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<21,19,1>;

class SEList<SOS_WaitableAddress,48>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class TSyncHashTableBase<SOS_WaitableAddress,unsigned __int64,WaitableAddressHashBucketSLock,48,0,&SOS_WaitableAddressManager::CookieHash>::Bucket
{
  /* 0x0000 */ class SEList<SOS_WaitableAddress,48> m_lst;
  /* 0x0010 */ struct WaitableAddressHashBucketSLock m_slock;
}; /* size: 0x0018 */

class PeriodicTimer<5000>::AutoCheck
{
  /* 0x0000 */ class PeriodicTimer<5000>* m_timer;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_currentTime;
}; /* size: 0x0010 */

class XeSqlPkg::xtp_offline_checkpoint_scan_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1214[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int start_lsnOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class TypeListNode<void *,TypeListNode<SystemAffinity,TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

typedef struct _HEAP_REGION_INFORMATION
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 ReserveSize;
  /* 0x0010 */ unsigned __int64 CommitSize;
  /* 0x0018 */ unsigned __int64 FirstRangeInformationOffset;
  /* 0x0020 */ unsigned __int64 NextRegionInformationOffset;
} HEAP_REGION_INFORMATION, *PHEAP_REGION_INFORMATION; /* size: 0x0028 */

typedef struct _HEAP_RANGE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 Size;
  /* 0x0010 */ unsigned long Type;
  /* 0x0014 */ unsigned long Protection;
  /* 0x0018 */ unsigned __int64 FirstBlockInformationOffset;
  /* 0x0020 */ unsigned __int64 NextRangeInformationOffset;
} HEAP_RANGE_INFORMATION, *PHEAP_RANGE_INFORMATION; /* size: 0x0028 */

typedef struct _HEAP_PERFORMANCE_COUNTERS_INFORMATION
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Version;
  /* 0x0008 */ unsigned long HeapIndex;
  /* 0x000c */ unsigned long LastHeapIndex;
  /* 0x0010 */ unsigned __int64 BaseAddress;
  /* 0x0018 */ unsigned __int64 ReserveSize;
  /* 0x0020 */ unsigned __int64 CommitSize;
  /* 0x0028 */ unsigned long SegmentCount;
  /* 0x002c */ long Padding_1215;
  /* 0x0030 */ unsigned __int64 LargeUCRMemory;
  /* 0x0038 */ unsigned long UCRLength;
  /* 0x003c */ long Padding_1216;
  /* 0x0040 */ unsigned __int64 AllocatedSpace;
  /* 0x0048 */ unsigned __int64 FreeSpace;
  /* 0x0050 */ unsigned long FreeListLength;
  /* 0x0054 */ unsigned long Contention;
  /* 0x0058 */ unsigned long VirtualBlocks;
  /* 0x005c */ unsigned long CommitRate;
  /* 0x0060 */ unsigned long DecommitRate;
  /* 0x0064 */ long __PADDING__[1];
} HEAP_PERFORMANCE_COUNTERS_INFORMATION, *PHEAP_PERFORMANCE_COUNTERS_INFORMATION; /* size: 0x0068 */

typedef struct _HEAP_INFORMATION_ITEM
{
  /* 0x0000 */ unsigned long Level;
  /* 0x0004 */ long Padding_1217;
  /* 0x0008 */ unsigned __int64 Size;
  union
  {
    /* 0x0010 */ struct _PROCESS_HEAP_INFORMATION ProcessHeapInformation;
    /* 0x0010 */ struct _HEAP_INFORMATION HeapInformation;
    /* 0x0010 */ struct _HEAP_REGION_INFORMATION HeapRegionInformation;
    /* 0x0010 */ struct _HEAP_RANGE_INFORMATION HeapRangeInformation;
    /* 0x0010 */ struct _HEAP_BLOCK_INFORMATION HeapBlockInformation;
    /* 0x0010 */ struct _HEAP_PERFORMANCE_COUNTERS_INFORMATION HeapPerfInformation;
    struct
    {
      /* 0x0010 */ unsigned __int64 DynamicStart;
      /* 0x0018 */ long __PADDING__[24];
    }; /* size: 0x0068 */
  }; /* size: 0x0068 */
} HEAP_INFORMATION_ITEM, *PHEAP_INFORMATION_ITEM; /* size: 0x0078 */

class CRTSEHTranslatorSetter<CRTSEHNoTranslatorSetter>
{
  /* 0x0000 */ void* m_oldTranslator /* function */;
}; /* size: 0x0008 */

typedef struct _PROCESS_FOREGROUND_BACKGROUND
{
  /* 0x0000 */ unsigned char Foreground;
} PROCESS_FOREGROUND_BACKGROUND, *PPROCESS_FOREGROUND_BACKGROUND; /* size: 0x0001 */

class SEList<TCallback<void,NullType,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class TCallback<void,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0018 */

struct SesSecContextSLock
{
}; /* size: 0x0004 */

typedef struct _BOOT_ENTRY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Id;
  /* 0x000c */ unsigned long Attributes;
  /* 0x0010 */ unsigned long FriendlyNameOffset;
  /* 0x0014 */ unsigned long BootFilePathOffset;
  /* 0x0018 */ unsigned long OsOptionsLength;
  /* 0x001c */ unsigned char OsOptions[1];
  /* 0x001d */ char __PADDING__[3];
} BOOT_ENTRY, *PBOOT_ENTRY; /* size: 0x0020 */

typedef struct _BOOT_ENTRY_LIST
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ struct _BOOT_ENTRY BootEntry;
} BOOT_ENTRY_LIST, *PBOOT_ENTRY_LIST; /* size: 0x0024 */

class XeSqlPkg::query_driver_sent_activation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1218[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<4>::FuncPtr<void,void *,SOS_Node *,unsigned __int64,unsigned __int64>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>
{
  /* 0x0000 */ long Padding_1219[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class SEList<XListElem<ProbCostData>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XeSqlPkg::hadr_partner_updated_lsns
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1220[143];
      /* 0x0240 */ unsigned char m_buf[144];
    }; /* size: 0x0094 */
    /* 0x0000 */ const int redo_targetOffset;
    /* 0x0000 */ const int redone_timeOffset;
    /* 0x0000 */ const int redo_rateOffset;
    /* 0x0000 */ const int redo_queue_sizeOffset;
    /* 0x0000 */ const int commit_timeOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
    /* 0x0000 */ const int database_replica_idOffset;
    /* 0x0000 */ const int truncation_lsnOffset;
    /* 0x0000 */ const int hardened_lsnOffset;
    /* 0x0000 */ const int undo_lsnOffset;
    /* 0x0000 */ const int oldest_xact_lsnOffset;
    /* 0x0000 */ const int start_of_log_lsnOffset;
    /* 0x0000 */ const int redo_lsnOffset;
    /* 0x0000 */ const int end_of_log_lsnOffset;
    /* 0x0000 */ const int commit_lsnOffset;
    /* 0x0000 */ const int shipped_lsnOffset;
    /* 0x0000 */ const int log_scan_lsnOffset;
  }; /* size: 0x0094 */
}; /* size: 0x02d0 */

class FunctionCallBinder_1<void,void (__cdecl*)(ISOSHost_IOCompRequest *),ISOSHost_IOCompRequestImpl *>
{
  /* 0x0000 */ void* m_f /* function */;
  /* 0x0008 */ class ISOSHost_IOCompRequestImpl* m_p1;
}; /* size: 0x0010 */

struct CacheStoreClockSLock
{
}; /* size: 0x0004 */

class XList<ProbCostData>
{
  /* 0x0000 */ long Padding_1221[2];
  /* 0x0008 */ class SEList<XListElem<ProbCostData>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<ProbCostData>,0> m_enumerators;
  /* 0x0028 */ struct CacheStoreClockSLock m_lock;
}; /* size: 0x0030 */

class CAutoP<SOSHost_OSThreadCreateDestroyCallback>
{
}; /* size: 0x0008 */

class FunctionCallBinder_4<void,void (__cdecl*)(void *,ISOSHost_Node *,unsigned __int64,unsigned __int64),void *,ISOSHost_NodeImpl *,unsigned __int64,unsigned __int64>
{
  /* 0x0000 */ void* m_f /* function */;
  /* 0x0008 */ void* m_p1;
  /* 0x0010 */ class ISOSHost_NodeImpl* m_p2;
  /* 0x0018 */ unsigned __int64 m_p3;
  /* 0x0020 */ unsigned __int64 m_p4;
}; /* size: 0x0028 */

class SEListEnum<XListElem<ProbCostData>,0>;

class XeSqlPkg::hadr_db_manager_page_request
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1222[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int read_ahead_countOffset;
    /* 0x0000 */ const int message_log_idOffset;
    /* 0x0000 */ const int minimum_lsnOffset;
    /* 0x0000 */ const int page_lsnOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >;

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent> >;

typedef struct _GROUP_USERS_INFO_0
{
  /* 0x0000 */ wchar_t* grui0_name;
} GROUP_USERS_INFO_0, *PGROUP_USERS_INFO_0; /* size: 0x0008 */

class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct tagDBPARAMS
{
  /* 0x0000 */ void* pData;
  /* 0x0008 */ unsigned __int64 cParamSets;
  /* 0x0010 */ unsigned __int64 hAccessor;
}; /* size: 0x0018 */

class TypeListNode<MemoryUtilizationInfo const * const,TypeListNode<enum MemoryUtilizationEffects::Effects,TypeListNode<MemoryUtilizationEffects::EffectInfo const * const,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class StackHashControl
{
  /* 0x0000 */ void* m_stackHashFile;
  /* 0x0008 */ int m_stackHashingEnabled;
  /* 0x000c */ long Padding_1223;
  /* 0x0010 */ class CallStackHashTable m_hashTable;
  /* 0x0430 */ long m_callCount;
  /* 0x0434 */ long m_callStartingPoint;
  /* 0x0438 */ unsigned __int64 m_taskPtr;
}; /* size: 0x0440 */

class XeSqlPkg::logconsolidation_defunct_cleanup_complete
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1224[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int tenant_idOffset;
    /* 0x0000 */ const int rows_deletedOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class SOS_TopLevelBlockDescriptor
{
  union
  {
    /* 0x0000 */ const unsigned int AdditionalFragmentSize;
    /* 0x0000 */ struct _SLIST_ENTRY m_next;
    /* 0x0000 */ unsigned __int64 sm_SmallestBlockAllocatorSize;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned __int64* m_commitmentMap;
  /* 0x0018 */ unsigned __int64* m_physicalPageArray;
  /* 0x0020 */ unsigned __int64* m_userDataMap;
  /* 0x0028 */ void* m_Address;
  /* 0x0030 */ class SOS_MemoryFragmentDescriptor* m_Fragment;
  /* 0x0038 */ enum SOS_MemoryModel m_MemoryModel;
}; /* size: 0x0040 */

struct TraceFlagMapping
{
  /* 0x0000 */ unsigned long sos;
  /* 0x0004 */ unsigned long external;
}; /* size: 0x0008 */

class TEnumerator<TList<PoolList,SOS_ResourcePool,0,TListSLock> >
{
  /* 0x0000 */ class SOS_ResourcePool* m_currentObject;
  /* 0x0008 */ class SOS_ResourcePool* m_lastObjectSeen;
  /* 0x0010 */ class TList<PoolList,SOS_ResourcePool,0,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

typedef struct _PERF_COUNTER_DEFINITION
{
  /* 0x0000 */ unsigned long ByteLength;
  /* 0x0004 */ unsigned long CounterNameTitleIndex;
  /* 0x0008 */ unsigned long CounterNameTitle;
  /* 0x000c */ unsigned long CounterHelpTitleIndex;
  /* 0x0010 */ unsigned long CounterHelpTitle;
  /* 0x0014 */ long DefaultScale;
  /* 0x0018 */ unsigned long DetailLevel;
  /* 0x001c */ unsigned long CounterType;
  /* 0x0020 */ unsigned long CounterSize;
  /* 0x0024 */ unsigned long CounterOffset;
} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION; /* size: 0x0028 */

class AutoSpinlockHolder<25,19,1>;

class TEnumerator<TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock> >
{
  /* 0x0000 */ class SOS_DispatcherPoolBase* m_currentObject;
  /* 0x0008 */ class SOS_DispatcherPoolBase* m_lastObjectSeen;
  /* 0x0010 */ class TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class XeSqlPkg::query_memory_grant_requested
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1225[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int requested_memoryOffset;
    /* 0x0000 */ const int available_memoryOffset;
    /* 0x0000 */ const int needed_memoryOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc
{
  /* 0x0000 */ class SOS_InterlockedList<SOS_TopLevelBlockDescriptor,0> m_freeBlocks;
  /* 0x0010 */ struct _SINGLE_LIST_ENTRY m_next;
  /* 0x0018 */ unsigned char* m_unallocated;
  /* 0x0020 */ unsigned __int64 m_nextPageOnNode;
  /* 0x0028 */ int m_FreeBlockCount;
  /* 0x002c */ unsigned short m_NumaNodeId;
  /* 0x002e */ char Padding_1226[2];
  /* 0x0030 */ enum DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc::PageDescState m_state;
  /* 0x0034 */ long __PADDING__[3];
}; /* size: 0x0040 */

struct CLUSPROP_PARTITION_INFO_EX
{
}; /* size: 0x0490 */

typedef struct _SYSTEM_VERIFIER_ISSUE
{
  /* 0x0000 */ unsigned __int64 IssueType;
  /* 0x0008 */ void* Address;
  /* 0x0010 */ unsigned __int64 Parameters[2];
} SYSTEM_VERIFIER_ISSUE, *PSYSTEM_VERIFIER_ISSUE; /* size: 0x0020 */

class Spinlock<290,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<29,19,1>;

class TCallbackListBase<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >
{
}; /* size: 0x0010 */

struct SEReplSecondaryWorkerListSLock
{
}; /* size: 0x0004 */

typedef struct _CLUSTER_VALIDATE_DIRECTORY
{
  union
  {
    /* 0x0000 */ wchar_t* szPath /* zero-length array */;
    /* 0x0000 */ char __PADDING__[2];
  }; /* size: 0x0002 */
} CLUSTER_VALIDATE_DIRECTORY, *PCLUSTER_VALIDATE_DIRECTORY; /* size: 0x0002 */

typedef struct _SESSION_INFO_10
{
  /* 0x0000 */ wchar_t* sesi10_cname;
  /* 0x0008 */ wchar_t* sesi10_username;
  /* 0x0010 */ unsigned long sesi10_time;
  /* 0x0014 */ unsigned long sesi10_idle_time;
} SESSION_INFO_10, *PSESSION_INFO_10; /* size: 0x0018 */

class TSimpleHashTable_EntryAccessor<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>
{
  /* 0x0000 */ class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>::Bucket* const m_pbucket;
  /* 0x0008 */ const unsigned int m_hashValue;
  /* 0x000c */ long Padding_1227;
  /* 0x0010 */ void* m_compareRoutine /* function */;
  /* 0x0018 */ unsigned __int64 m_poolMask;
  /* 0x0020 */ unsigned int m_stateMask;
}; /* size: 0x0028 */

struct XE_TEvent<4,2,8>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,8> m_dynamicAttr;
  /* 0x0250 */ struct XEEvent m_event;
}; /* size: 0x0298 */

class TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0030 */

class TMRUContainer<MiniSOSThreadResources,0>
{
}; /* size: 0x0010 */

class TObjectPool<TMRUContainer<MiniSOSThreadResources,0>,ObjectPoolSLock>
{
  /* 0x0000 */ struct ObjectPoolSLock m_lock;
  /* 0x0004 */ long Padding_1228;
  /* 0x0008 */ class TMRUContainer<MiniSOSThreadResources,0> m_collection;
}; /* size: 0x0018 */

struct MiniThreadSLock
{
}; /* size: 0x0004 */

class SEList<MiniSOSThreadResources,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class MiniSOSThreadResourcesMgr
{
  /* 0x0000 */ class TObjectPool<TMRUContainer<MiniSOSThreadResources,0>,ObjectPoolSLock> m_objectPool;
  /* 0x0018 */ volatile long m_poolSize;
  /* 0x001c */ volatile long m_poolSizeMin;
  /* 0x0020 */ volatile long m_poolSizeIdeal;
  /* 0x0024 */ volatile long m_poolSizeMax;
  /* 0x0028 */ struct MiniThreadSLock m_miniThreadLock;
  /* 0x002c */ long Padding_1229;
  /* 0x0030 */ class SEList<MiniSOSThreadResources,0> m_miniThreadList;
  /* 0x0040 */ long m_miniThreadCount;
}; /* size: 0x0048 */

class CAutoBase<SOS_ResourcePool>
{
  /* 0x0000 */ class SOS_ResourcePool* m_pt;
}; /* size: 0x0008 */

class TypeListSize<TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > >
{
}; /* size: 0x0001 */

class TSinglyLinkedList<void>
{
}; /* size: 0x0008 */

class Spinlock<89,12,1>
{
}; /* size: 0x0004 */

class SEList<ResQueueWaiter,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SOS_DispatcherPoolBase
{
  /* 0x0000 */ long Padding_1230[10];
  /* 0x0028 */ class IMemObj* m_pmo;
}; /* size: 0x0030 */

class AutoSpinlockHolder<301,1,1>
{
}; /* size: 0x0010 */

class TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock>
{
  /* 0x0000 */ long Padding_1231[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class SEList<ContextUMSProxy,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SOS_InterlockedList<ContextUMSProxy,0>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

class UMSControl
{
  union
  {
    struct
    {
      /* 0x0000 */ void* m_CreateUmsCompletionList /* function */;
      /* 0x0008 */ void* m_EnterUmsSchedulingMode /* function */;
      /* 0x0010 */ void* m_DequeueUmsCompletionListItems /* function */;
      /* 0x0018 */ void* m_GetUmsCompletionListEvent /* function */;
      /* 0x0020 */ void* m_ExecuteUmsThread /* function */;
      /* 0x0028 */ void* m_UmsThreadYield /* function */;
      /* 0x0030 */ void* m_DeleteUmsCompletionList /* function */;
      /* 0x0038 */ void* m_GetCurrentUmsThread /* function */;
      /* 0x0040 */ void* m_GetNextUmsListItem /* function */;
      /* 0x0048 */ void* m_CreateUmsThreadContext /* function */;
      /* 0x0050 */ void* m_QueryUmsThreadInformation /* function */;
      /* 0x0058 */ void* m_SetUmsThreadInformation /* function */;
      /* 0x0060 */ void* m_UMSListBootstrap;
      /* 0x0068 */ class SOS_RingBuffer* m_UMSRingBootstrap;
      /* 0x0070 */ class SEList<ContextUMSProxy,16> m_bootstrapList;
      /* 0x0080 */ class SOS_InterlockedList<ContextUMSProxy,0> m_freeContexts;
    }; /* size: 0x0090 */
    /* 0x0000 */ class UMSControl sm_umsControl;
  }; /* size: 0x0090 */
}; /* size: 0x0090 */

class XeSqlPkg::hadr_db_manager_status_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1232[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int reasonOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _UMS_SCHEDULER_STARTUP_INFO
{
  /* 0x0000 */ unsigned long UmsVersion;
  /* 0x0004 */ long Padding_1233;
  /* 0x0008 */ void* CompletionList;
  /* 0x0010 */ void* SchedulerProc /* function */;
  /* 0x0018 */ void* SchedulerParam;
} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO; /* size: 0x0020 */

class MemObjCache<CMemThread<CMemObj> >
{
  /* 0x0000 */ long Padding_1234[108];
  /* 0x01b0 */ void* m_cacheEntryDescriptor;
  /* 0x01b8 */ class CostInfo m_costInfo;
}; /* size: 0x0200 */

typedef struct _ACTRL_ACCESS_ENTRYA
{
  /* 0x0000 */ struct _TRUSTEE_A Trustee;
  /* 0x0020 */ unsigned long fAccessFlags;
  /* 0x0024 */ unsigned long Access;
  /* 0x0028 */ unsigned long ProvSpecificAccess;
  /* 0x002c */ unsigned long Inheritance;
  /* 0x0030 */ char* lpInheritProperty;
} ACTRL_ACCESS_ENTRYA, *PACTRL_ACCESS_ENTRYA; /* size: 0x0038 */

struct XE_TArray<XEEvent *,83>
{
  /* 0x0000 */ struct XEEvent* m_array[83];
}; /* size: 0x0298 */

class AutoSpinlockHolder<324,1,1>;

class SpinlockHolder<28,19,1>;

class CMemPartitioned<CMemThread<CMemLargePageObj> >
{
  /* 0x0000 */ long Padding_1235[148];
  /* 0x0250 */ class IMemObj** m_partitionMemObj;
  /* 0x0258 */ int m_numberOfPartitions;
  /* 0x025c */ enum PartitioningType m_partType;
  /* 0x0260 */ enum AllocatorType m_allocatorType;
  /* 0x0264 */ long Padding_1236;
  /* 0x0268 */ __int64 m_cPages;
}; /* size: 0x0270 */

class CAutoBase<XEPackage0::RingTarget>
{
  /* 0x0000 */ class XEPackage0::RingTarget* m_pt;
}; /* size: 0x0008 */

class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,8192,524288,16,1> >
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0001 */

class Spinlock<142,4,1>
{
}; /* size: 0x0004 */

struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition
{
  /* 0x0000 */ unsigned short m_nodeId;
  /* 0x0002 */ char Padding_1237[6];
  /* 0x0008 */ struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc* m_activePage;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::AutoReset
{
  /* 0x0000 */ int* m_flag;
}; /* size: 0x0008 */

struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition
{
  /* 0x0000 */ unsigned short m_nodeId;
  /* 0x0002 */ char Padding_1238[6];
  /* 0x0008 */ struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc* m_activePage;
}; /* size: 0x0010 */

class AutoSpinlockHolder<223,2,1>;

struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::AutoReset
{
  /* 0x0000 */ int* m_flag;
}; /* size: 0x0008 */

class CXFrontendLookupTable<2,unsigned __int64,1024>
{
  /* 0x0000 */ struct CXFrontendLookupTable<2,unsigned __int64,1024>::LookupEntry m_lookupTable[1024];
}; /* size: 0x6000 */

class SpinlockHolder<211,2,1>
{
  /* 0x0000 */ class Spinlock<211,2,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class XeSqlPkg::broker_transmission_acksm_action_fire
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1239[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class Spinlock<211,2,1>
{
}; /* size: 0x0004 */

struct SEReplSubtypeVersionSLock
{
}; /* size: 0x0004 */

class TEnumerator<TList<HostManager,SOSHost,0,TListSLock> >
{
  /* 0x0000 */ class SOSHost* m_currentObject;
  /* 0x0008 */ class SOSHost* m_lastObjectSeen;
  /* 0x0010 */ class TList<HostManager,SOSHost,0,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class XE_CXRollingDictionary<2,unsigned __int64,1024,65536,1,0>
{
  /* 0x0000 */ long Padding_1240[2];
  /* 0x0008 */ class CXFrontendLookupTable<2,unsigned __int64,1024> m_frontendTable;
  /* 0x6008 */ class CXLRUHashTable<2,unsigned __int64,65536> m_lruTable;
  /* 0x6018 */ unsigned int m_maxLRUElements;
  /* 0x601c */ long Padding_1241;
  /* 0x6020 */ class XE_CXFileWriter* m_pStorage;
  /* 0x6028 */ void* m_pStorageLock;
  /* 0x6030 */ struct DictionaryStats m_stats;
}; /* size: 0x6068 */

class TList<HostManager,SOSHost,0,TListSLock>
{
  /* 0x0000 */ long Padding_1242[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class CAutoBase<XEPackage0::HistoryTarget>
{
  /* 0x0000 */ class XEPackage0::HistoryTarget* m_pt;
}; /* size: 0x0008 */

typedef struct _PDH_RAW_COUNTER_ITEM_A
{
  /* 0x0000 */ char* szName;
  /* 0x0008 */ struct _PDH_RAW_COUNTER RawValue;
} PDH_RAW_COUNTER_ITEM_A, *PPDH_RAW_COUNTER_ITEM_A; /* size: 0x0030 */

class SEListEnum<ErrMsg,24>;

class CSlotPageMgr
{
  /* 0x0000 */ class IMemObj* m_pmoOwner;
  /* 0x0008 */ unsigned short m_cbSlotMax;
  /* 0x000a */ unsigned short m_cbSlotInc;
  /* 0x000c */ long Padding_1243;
  /* 0x0010 */ class CSlotInfo* m_psiPages;
  /* 0x0018 */ class CSlotGroup** m_rgpsgGroups;
  /* 0x0020 */ class CSlotHdr* m_pshFreeHdrs;
  /* 0x0028 */ __int64 m_cTotalPages;
  /* 0x0030 */ __int64 m_cMaxTotalPages;
}; /* size: 0x0038 */

class CMemObj
{
  union
  {
    /* 0x0000 */ const unsigned long xsm_cbVBlkSize;
    /* 0x0000 */ const unsigned long xsm_cbVBlkOvrhd;
    /* 0x0000 */ const unsigned long xsm_cbVIOvrhd;
    /* 0x0000 */ const unsigned long xsm_cbPgSetOvrhd;
    /* 0x0000 */ const unsigned long xsm_cbMaxSizeFitsOnPage;
    /* 0x0000 */ const unsigned long xsm_cbMaxSizeFitsOnLargePage;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1244[13];
  /* 0x0038 */ class TVarPageMgr<0> m_vpmVariablePages;
  /* 0x00d8 */ class CSlotPageMgr m_spmSlotPages;
}; /* size: 0x0110 */

class StackFrames<20>
{
  union
  {
    struct
    {
      /* 0x0000 */ volatile long m_ActiveUsers;
      /* 0x0004 */ unsigned long m_ResourceType;
      /* 0x0008 */ struct SOSHOST_CACHESTORE_COOKIE__* m_Cookie;
    }; /* size: 0x0010 */
    /* 0x0000 */ const unsigned int sm_framesToSkip;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned long m_hashValue;
  /* 0x0014 */ long Padding_1245;
  /* 0x0018 */ void* m_frames[20];
  /* 0x00b8 */ unsigned long m_count;
  /* 0x00bc */ long Padding_1246;
  /* 0x00c0 */ class StackFramesStore* m_StackFramesStore;
}; /* size: 0x00c8 */

class CVariableInfo
{
  /* 0x0000 */ long Padding_1247[4];
  /* 0x0010 */ long m_cPages;
  /* 0x0014 */ short m_cUsedBlocks;
  /* 0x0016 */ short m_listIdx;
  /* 0x0018 */ unsigned __int64 m_cbMaxBlock;
  /* 0x0020 */ class CVariableInfo* m_pviPrev;
  /* 0x0028 */ class CVariableInfo* m_pviNext;
}; /* size: 0x0030 */

struct HttpEndpointSLock
{
}; /* size: 0x0004 */

class CSlotInfo
{
  /* 0x0000 */ long Padding_1248[4];
  /* 0x0010 */ class CSlotInfo* m_psiNext;
  /* 0x0018 */ class CSlotHdr m_shFirstHdr;
}; /* size: 0x0020 */

class CFreeSlot
{
  /* 0x0000 */ unsigned __int64 m_pfsNext;
}; /* size: 0x0008 */

class Spinlock<273,3,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::logreader_add_compensation_range
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1249[140];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x002a */
    /* 0x0000 */ const int xdesid_lowOffset;
    /* 0x0000 */ const int xdesid_highOffset;
    /* 0x0000 */ const int last_op_codeOffset;
    /* 0x0000 */ const int first_lsnOffset;
    /* 0x0000 */ const int last_lsnOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

struct MemoryObjectFactory::MemObjUsesFree<CMemFixed>
{
}; /* size: 0x0001 */

class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>
{
}; /* size: 0x0020 */

class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem
{
  /* 0x0000 */ long Padding_1250[8];
  /* 0x0020 */ class SOSCallbackEvent* volatile m_pNoUsersEvent;
}; /* size: 0x0028 */

class XeSqlPkg::logreader_add_tran_info
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1251[140];
      /* 0x0240 */ unsigned char m_buf[58];
    }; /* size: 0x004a */
    /* 0x0000 */ const int xdesid_lowOffset;
    /* 0x0000 */ const int xdesid_highOffset;
    /* 0x0000 */ const int num_hashed_transOffset;
    /* 0x0000 */ const int num_compensated_transOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int begin_xact_lsnOffset;
    /* 0x0000 */ const int last_xact_lsnOffset;
    /* 0x0000 */ const int hardened_lsnOffset;
    /* 0x0000 */ const int first_begin_xact_lsnOffset;
    /* 0x0000 */ const int last_end_xact_lsnOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0280 */

struct SqlTraceFileBufferSLock
{
}; /* size: 0x0004 */

struct MemoryObjectFactory::MemObjUsesFree<CMemLargePageObj>
{
}; /* size: 0x0001 */

class MiniSOSThreadResources
{
  /* 0x0000 */ class SEListElem m_linkPool;
  /* 0x0010 */ class Worker m_worker;
  /* 0x0b20 */ class ISOSHost_TaskImpl m_task;
  /* 0x0ef8 */ void* m_hEvent;
  /* 0x0f00 */ struct _TEB* m_teb;
  /* 0x0f08 */ unsigned long m_threadId;
}; /* size: 0x0f10 */

class XeSqlPkg::metadata_manager_lock_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1252[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int modeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

typedef struct _ACTIVATION_CONTEXT_STACK
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long NextCookieSequenceNumber;
  /* 0x0008 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
  /* 0x0010 */ struct _LIST_ENTRY FrameListCache;
} ACTIVATION_CONTEXT_STACK, *PACTIVATION_CONTEXT_STACK; /* size: 0x0020 */

typedef struct _GDI_TEB_BATCH
{
  /* 0x0000 */ unsigned long Offset;
  /* 0x0004 */ long Padding_1253;
  /* 0x0008 */ unsigned __int64 HDC;
  /* 0x0010 */ unsigned long Buffer[310];
} GDI_TEB_BATCH, *PGDI_TEB_BATCH; /* size: 0x04e8 */

typedef struct _Wx86ThreadState
{
  /* 0x0000 */ unsigned long* CallBx86Eip;
  /* 0x0008 */ void* DeallocationCpu;
  /* 0x0010 */ unsigned char UseKnownWx86Dll;
  /* 0x0011 */ char OleStubInvoked;
  /* 0x0012 */ char __PADDING__[6];
} Wx86ThreadState, *PWx86ThreadState; /* size: 0x0018 */

typedef struct _TEB
{
  /* 0x0000 */ struct _NT_TIB NtTib;
  /* 0x0038 */ void* EnvironmentPointer;
  /* 0x0040 */ struct _CLIENT_ID ClientId;
  /* 0x0050 */ void* ActiveRpcHandle;
  /* 0x0058 */ void* ThreadLocalStoragePointer;
  /* 0x0060 */ struct _PEB* ProcessEnvironmentBlock;
  /* 0x0068 */ unsigned long LastErrorValue;
  /* 0x006c */ unsigned long CountOfOwnedCriticalSections;
  /* 0x0070 */ void* CsrClientThread;
  /* 0x0078 */ void* Win32ThreadInfo;
  /* 0x0080 */ unsigned long User32Reserved[26];
  /* 0x00e8 */ unsigned long UserReserved[5];
  /* 0x00fc */ long Padding_1254;
  /* 0x0100 */ void* WOW32Reserved;
  /* 0x0108 */ unsigned long CurrentLocale;
  /* 0x010c */ unsigned long FpSoftwareStatusRegister;
  /* 0x0110 */ void* SystemReserved1[54];
  /* 0x02c0 */ long ExceptionCode;
  /* 0x02c4 */ long Padding_1255;
  /* 0x02c8 */ struct _ACTIVATION_CONTEXT_STACK ActivationContextStack;
  /* 0x02e8 */ unsigned char SpareBytes1[8];
  /* 0x02f0 */ struct _GDI_TEB_BATCH GdiTebBatch;
  /* 0x07d8 */ struct _CLIENT_ID RealClientId;
  /* 0x07e8 */ void* GdiCachedProcessHandle;
  /* 0x07f0 */ unsigned long GdiClientPID;
  /* 0x07f4 */ unsigned long GdiClientTID;
  /* 0x07f8 */ void* GdiThreadLocalInfo;
  /* 0x0800 */ unsigned __int64 Win32ClientInfo[62];
  /* 0x09f0 */ void* glDispatchTable[233];
  /* 0x1138 */ unsigned __int64 glReserved1[29];
  /* 0x1220 */ void* glReserved2;
  /* 0x1228 */ void* glSectionInfo;
  /* 0x1230 */ void* glSection;
  /* 0x1238 */ void* glTable;
  /* 0x1240 */ void* glCurrentRC;
  /* 0x1248 */ void* glContext;
  /* 0x1250 */ unsigned long LastStatusValue;
  /* 0x1254 */ long Padding_1256;
  /* 0x1258 */ struct _UNICODE_STRING StaticUnicodeString;
  /* 0x1268 */ wchar_t StaticUnicodeBuffer[261];
  /* 0x1472 */ char Padding_1257[6];
  /* 0x1478 */ void* DeallocationStack;
  /* 0x1480 */ void* TlsSlots[64];
  /* 0x1680 */ struct _LIST_ENTRY TlsLinks;
  /* 0x1690 */ void* Vdm;
  /* 0x1698 */ void* ReservedForNtRpc;
  /* 0x16a0 */ void* DbgSsReserved[2];
  /* 0x16b0 */ unsigned long HardErrorMode;
  /* 0x16b4 */ long Padding_1258;
  /* 0x16b8 */ void* Instrumentation[16];
  /* 0x1738 */ void* WinSockData;
  /* 0x1740 */ unsigned long GdiBatchCount;
  /* 0x1744 */ unsigned char InDbgPrint;
  /* 0x1745 */ unsigned char FreeStackOnTermination;
  /* 0x1746 */ unsigned char HasFiberData;
  /* 0x1747 */ unsigned char IdealProcessor;
  /* 0x1748 */ unsigned long Spare3;
  /* 0x174c */ long Padding_1259;
  /* 0x1750 */ void* ReservedForPerf;
  /* 0x1758 */ void* ReservedForOle;
  /* 0x1760 */ unsigned long WaitingOnLoaderLock;
  /* 0x1764 */ long Padding_1260;
  /* 0x1768 */ struct _Wx86ThreadState Wx86Thread;
  /* 0x1780 */ void** TlsExpansionSlots;
  /* 0x1788 */ void* DeallocationBStore;
  /* 0x1790 */ void* BStoreLimit;
  /* 0x1798 */ unsigned long ImpersonationLocale;
  /* 0x179c */ unsigned long IsImpersonating;
  /* 0x17a0 */ void* NlsCache;
  /* 0x17a8 */ void* pShimData;
  /* 0x17b0 */ unsigned long HeapVirtualAffinity;
  /* 0x17b4 */ long Padding_1261;
  /* 0x17b8 */ void* CurrentTransactionHandle;
  /* 0x17c0 */ struct _TEB_ACTIVE_FRAME* ActiveFrame;
  /* 0x17c8 */ void* FlsData;
} TEB, *PTEB; /* size: 0x17d0 */

class XE_EngineObjectFactory
{
}; /* size: 0x0008 */

typedef struct _PLUGPLAY_CONTROL_CONFLICT_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ struct _CM_RESOURCE_LIST* ResourceList;
  /* 0x0018 */ unsigned long ResourceListSize;
  /* 0x001c */ long Padding_1262;
  /* 0x0020 */ struct _PLUGPLAY_CONTROL_CONFLICT_LIST* ConflictBuffer;
  /* 0x0028 */ unsigned long ConflictBufferSize;
  /* 0x002c */ unsigned long Flags;
  /* 0x0030 */ long Status;
  /* 0x0034 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_CONFLICT_DATA, *PPLUGPLAY_CONTROL_CONFLICT_DATA; /* size: 0x0038 */

typedef struct _PEB
{
  /* 0x0000 */ unsigned char InheritedAddressSpace;
  /* 0x0001 */ unsigned char ReadImageFileExecOptions;
  /* 0x0002 */ unsigned char BeingDebugged;
  /* 0x0003 */ unsigned char SpareBool;
  /* 0x0004 */ long Padding_1263;
  /* 0x0008 */ void* Mutant;
  /* 0x0010 */ void* ImageBaseAddress;
  /* 0x0018 */ struct _PEB_LDR_DATA* Ldr;
  /* 0x0020 */ struct _RTL_USER_PROCESS_PARAMETERS* ProcessParameters;
  /* 0x0028 */ void* SubSystemData;
  /* 0x0030 */ void* ProcessHeap;
  /* 0x0038 */ struct _RTL_CRITICAL_SECTION* FastPebLock;
  /* 0x0040 */ void* SparePtr1;
  /* 0x0048 */ void* SparePtr2;
  /* 0x0050 */ unsigned long EnvironmentUpdateCount;
  /* 0x0054 */ long Padding_1264;
  /* 0x0058 */ void* KernelCallbackTable;
  /* 0x0060 */ unsigned long SystemReserved[1];
  struct /* bitfield */
  {
    /* 0x0064 */ unsigned long ExecuteOptions : 2; /* bit position: 0 */
    /* 0x0064 */ unsigned long SpareBits : 30; /* bit position: 2 */
  }; /* bitfield */
  /* 0x0068 */ struct _PEB_FREE_BLOCK* FreeList;
  /* 0x0070 */ unsigned long TlsExpansionCounter;
  /* 0x0074 */ long Padding_1265;
  /* 0x0078 */ void* TlsBitmap;
  /* 0x0080 */ unsigned long TlsBitmapBits[2];
  /* 0x0088 */ void* ReadOnlySharedMemoryBase;
  /* 0x0090 */ void* ReadOnlySharedMemoryHeap;
  /* 0x0098 */ void** ReadOnlyStaticServerData;
  /* 0x00a0 */ void* AnsiCodePageData;
  /* 0x00a8 */ void* OemCodePageData;
  /* 0x00b0 */ void* UnicodeCaseTableData;
  /* 0x00b8 */ unsigned long NumberOfProcessors;
  /* 0x00bc */ unsigned long NtGlobalFlag;
  /* 0x00c0 */ union _LARGE_INTEGER CriticalSectionTimeout;
  /* 0x00c8 */ unsigned __int64 HeapSegmentReserve;
  /* 0x00d0 */ unsigned __int64 HeapSegmentCommit;
  /* 0x00d8 */ unsigned __int64 HeapDeCommitTotalFreeThreshold;
  /* 0x00e0 */ unsigned __int64 HeapDeCommitFreeBlockThreshold;
  /* 0x00e8 */ unsigned long NumberOfHeaps;
  /* 0x00ec */ unsigned long MaximumNumberOfHeaps;
  /* 0x00f0 */ void** ProcessHeaps;
  /* 0x00f8 */ void* GdiSharedHandleTable;
  /* 0x0100 */ void* ProcessStarterHelper;
  /* 0x0108 */ unsigned long GdiDCAttributeList;
  /* 0x010c */ long Padding_1266;
  /* 0x0110 */ struct _RTL_CRITICAL_SECTION* LoaderLock;
  /* 0x0118 */ unsigned long OSMajorVersion;
  /* 0x011c */ unsigned long OSMinorVersion;
  /* 0x0120 */ unsigned short OSBuildNumber;
  /* 0x0122 */ unsigned short OSCSDVersion;
  /* 0x0124 */ unsigned long OSPlatformId;
  /* 0x0128 */ unsigned long ImageSubsystem;
  /* 0x012c */ unsigned long ImageSubsystemMajorVersion;
  /* 0x0130 */ unsigned long ImageSubsystemMinorVersion;
  /* 0x0134 */ long Padding_1267;
  /* 0x0138 */ unsigned __int64 ImageProcessAffinityMask;
  /* 0x0140 */ unsigned long GdiHandleBuffer[60];
  /* 0x0230 */ void* PostProcessInitRoutine /* function */;
  /* 0x0238 */ void* TlsExpansionBitmap;
  /* 0x0240 */ unsigned long TlsExpansionBitmapBits[32];
  /* 0x02c0 */ unsigned long SessionId;
  /* 0x02c4 */ long Padding_1268;
  /* 0x02c8 */ union _ULARGE_INTEGER AppCompatFlags;
  /* 0x02d0 */ union _ULARGE_INTEGER AppCompatFlagsUser;
  /* 0x02d8 */ void* pShimData;
  /* 0x02e0 */ void* AppCompatInfo;
  /* 0x02e8 */ struct _UNICODE_STRING CSDVersion;
  /* 0x02f8 */ const struct _ACTIVATION_CONTEXT_DATA* ActivationContextData;
  /* 0x0300 */ struct _ASSEMBLY_STORAGE_MAP* ProcessAssemblyStorageMap;
  /* 0x0308 */ const struct _ACTIVATION_CONTEXT_DATA* SystemDefaultActivationContextData;
  /* 0x0310 */ struct _ASSEMBLY_STORAGE_MAP* SystemAssemblyStorageMap;
  /* 0x0318 */ unsigned __int64 MinimumStackCommit;
  /* 0x0320 */ void** FlsCallback;
  /* 0x0328 */ struct _LIST_ENTRY FlsListHead;
  /* 0x0338 */ void* FlsBitmap;
  /* 0x0340 */ unsigned long FlsBitmapBits[4];
  /* 0x0350 */ unsigned long FlsHighIndex;
  /* 0x0354 */ long __PADDING__[1];
} PEB, *PPEB; /* size: 0x0358 */

typedef struct _PEB_LDR_DATA
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned char Initialized;
  /* 0x0005 */ char Padding_1269[3];
  /* 0x0008 */ void* SsHandle;
  /* 0x0010 */ struct _LIST_ENTRY InLoadOrderModuleList;
  /* 0x0020 */ struct _LIST_ENTRY InMemoryOrderModuleList;
  /* 0x0030 */ struct _LIST_ENTRY InInitializationOrderModuleList;
  /* 0x0040 */ void* EntryInProgress;
} PEB_LDR_DATA, *PPEB_LDR_DATA; /* size: 0x0048 */

struct XE_BufferAlloc
{
  /* 0x0000 */ class XE_BufferMgr* m_pSourceMgr;
  /* 0x0008 */ class XE_Buffer* m_pSource;
  /* 0x0010 */ unsigned char* m_pBuffer;
}; /* size: 0x0018 */

class MemObjCache<PageHeapMemObj>
{
  /* 0x0000 */ long Padding_1270[26];
  /* 0x0068 */ void* m_cacheEntryDescriptor;
  /* 0x0070 */ class CostInfo m_costInfo;
}; /* size: 0x00b8 */

class CMemPartitioned<CMemThread<PageHeapMemObj> >
{
  /* 0x0000 */ long Padding_1271[66];
  /* 0x0108 */ class IMemObj** m_partitionMemObj;
  /* 0x0110 */ int m_numberOfPartitions;
  /* 0x0114 */ enum PartitioningType m_partType;
  /* 0x0118 */ enum AllocatorType m_allocatorType;
  /* 0x011c */ long Padding_1272;
  /* 0x0120 */ __int64 m_cPages;
}; /* size: 0x0128 */

class MemObjCache<CMemDbg<PageHeapMemObj> >
{
  /* 0x0000 */ long Padding_1273[270];
  /* 0x0438 */ void* m_cacheEntryDescriptor;
  /* 0x0440 */ class CostInfo m_costInfo;
}; /* size: 0x0488 */

typedef struct _PEB_FREE_BLOCK
{
  /* 0x0000 */ struct _PEB_FREE_BLOCK* Next;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long __PADDING__[1];
} PEB_FREE_BLOCK, *PPEB_FREE_BLOCK; /* size: 0x0010 */

class Spinlock<275,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::availability_group_lease_expired
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1274[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_group_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_ag_database_api_call
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1275[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int is_enteringOffset;
    /* 0x0000 */ const int api_nameOffset;
    /* 0x0000 */ const int ag_nameOffset;
    /* 0x0000 */ const int db_nameOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<282,1,1>;

class MemObjCache<CMemThread<PageHeapMemObj> >
{
  /* 0x0000 */ long Padding_1276[66];
  /* 0x0108 */ void* m_cacheEntryDescriptor;
  /* 0x0110 */ class CostInfo m_costInfo;
}; /* size: 0x0158 */

typedef struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
  /* 0x0000 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
  /* 0x0008 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ long __PADDING__[1];
} RTL_ACTIVATION_CONTEXT_STACK_FRAME, *PRTL_ACTIVATION_CONTEXT_STACK_FRAME; /* size: 0x0018 */

class SpinlockHolder<280,1,1>;

typedef struct _TEB_ACTIVE_FRAME
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_1277;
  /* 0x0008 */ struct _TEB_ACTIVE_FRAME* Previous;
  /* 0x0010 */ const struct _TEB_ACTIVE_FRAME_CONTEXT* Context;
} TEB_ACTIVE_FRAME, *PTEB_ACTIVE_FRAME; /* size: 0x0018 */

class CMemThread<CMemLargePageObj>
{
  /* 0x0000 */ long Padding_1278[108];
  /* 0x01b0 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x0228 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0250 */

class CMemPartitioned<CMemThread<CMemFixed> >
{
  /* 0x0000 */ long Padding_1279[100];
  /* 0x0190 */ class IMemObj** m_partitionMemObj;
  /* 0x0198 */ int m_numberOfPartitions;
  /* 0x019c */ enum PartitioningType m_partType;
  /* 0x01a0 */ enum AllocatorType m_allocatorType;
  /* 0x01a4 */ long Padding_1280;
  /* 0x01a8 */ __int64 m_cPages;
}; /* size: 0x01b0 */

class SOSHost_CacheStore
{
  /* 0x0000 */ long Padding_1281[710];
  /* 0x0b18 */ class ISOSHost_MemObjImpl* m_pIHostMemObjDefault;
}; /* size: 0x0b40 */

struct CMRosterSLock
{
}; /* size: 0x0004 */

class MemObjCache<CMemLargePageObj>
{
  /* 0x0000 */ long Padding_1282[108];
  /* 0x01b0 */ void* m_cacheEntryDescriptor;
  /* 0x01b8 */ class CostInfo m_costInfo;
}; /* size: 0x0200 */

class DescriptorAllocator<SOS_MemoryFreeBlock,0>::Iterator;

class Spinlock<310,1,1>
{
}; /* size: 0x0004 */

struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::FragmentDesc
{
  /* 0x0000 */ unsigned char* m_start;
  /* 0x0008 */ unsigned char* m_end;
  /* 0x0010 */ int m_pagesPerFragment;
  /* 0x0014 */ long Padding_1283;
  /* 0x0018 */ struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::FragmentDesc* m_nextFragment;
  /* 0x0020 */ int m_freePageCount;
  /* 0x0024 */ long Padding_1284[3];
  /* 0x0030 */ class SOS_InterlockedList<DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc,16> m_freePages;
  /* 0x0040 */ unsigned char* m_unallocated;
  /* 0x0048 */ int m_pageBeingCommitted;
  /* 0x004c */ long Padding_1285;
  /* 0x0050 */ class DescriptorAllocator<SOS_MemoryFreeBlock,0>* m_allocator;
  /* 0x0058 */ long __PADDING__[2];
}; /* size: 0x0060 */

class DescriptorAllocator<SOS_MemoryFreeBlock,0>
{
  union
  {
    /* 0x0000 */ int sm_initialized;
    /* 0x0000 */ class MemoryClerk* m_clerk;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short m_nodeCount;
  /* 0x000a */ char Padding_1286[6];
  /* 0x0010 */ unsigned char* m_outlineBuffer;
  /* 0x0018 */ unsigned __int64 m_everOnlineNodes;
  /* 0x0020 */ long Padding_1287[8];
  /* 0x0040 */ struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::FragmentDesc m_fragment;
  /* 0x00a0 */ int m_fragmentBeingCreated;
  /* 0x00a4 */ long Padding_1288[7];
  /* 0x00c0 */ class PerCPUData<DescriptorAllocator<SOS_MemoryFreeBlock,0>::CpuPartition> m_cpuParts;
  /* 0x00d0 */ long Padding_1289[12];
  /* 0x0100 */ struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::NodePartition m_nodePart[64];
}; /* size: 0x2100 */

class XeSqlPkg::database_bootpage_sync
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1290[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class MemObjCache<CMemDbg<CMemLargePageObj> >
{
  /* 0x0000 */ long Padding_1291[352];
  /* 0x0580 */ void* m_cacheEntryDescriptor;
  /* 0x0588 */ class CostInfo m_costInfo;
}; /* size: 0x05d0 */

typedef struct _finddata64i32_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long Padding_1292;
  /* 0x0008 */ __int64 time_create;
  /* 0x0010 */ __int64 time_access;
  /* 0x0018 */ __int64 time_write;
  /* 0x0020 */ unsigned long size;
  /* 0x0024 */ char name[260];
} finddata64i32_t, *Pfinddata64i32_t; /* size: 0x0128 */

class XeSqlPkg::hobt_schema_mgr_hobt_page
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1293[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int allocation_unitOffset;
    /* 0x0000 */ const int hobt_allocation_pageOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0260 */

class SOS_MemoryFreeBlock
{
  union
  {
    /* 0x0000 */ const unsigned int AdditionalFragmentSize;
    /* 0x0000 */ struct _SLIST_ENTRY m_next;
  }; /* size: 0x0010 */
  /* 0x0010 */ void* m_BlockAddress;
  /* 0x0018 */ unsigned __int64 m_BlockSize;
  /* 0x0020 */ void* m_Cookie;
  /* 0x0028 */ unsigned __int64 m_Count;
  /* 0x0030 */ unsigned long m_Protection;
  /* 0x0034 */ long Padding_1294;
  /* 0x0038 */ unsigned __int64 m_TotalBytesCommitted;
}; /* size: 0x0040 */

class Spinlock<150,4,1>
{
}; /* size: 0x0004 */

struct DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc
{
  /* 0x0000 */ class SOS_InterlockedList<SOS_MemoryFreeBlock,0> m_freeBlocks;
  /* 0x0010 */ struct _SINGLE_LIST_ENTRY m_next;
  /* 0x0018 */ unsigned char* m_unallocated;
  /* 0x0020 */ unsigned __int64 m_nextPageOnNode;
  /* 0x0028 */ int m_FreeBlockCount;
  /* 0x002c */ unsigned short m_NumaNodeId;
  /* 0x002e */ char Padding_1295[2];
  /* 0x0030 */ enum DescriptorAllocator<SOS_MemoryFreeBlock,0>::PageDesc::PageDescState m_state;
  /* 0x0034 */ long __PADDING__[3];
}; /* size: 0x0040 */

class CMemThread<CMemDbg<CMemLargePageObj> >
{
  /* 0x0000 */ long Padding_1296[352];
  /* 0x0580 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x05f8 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0620 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class MemoryClerkInternal
{
  /* 0x0000 */ const wchar_t* DEFAULTNAME /* zero-length array */;
  /* 0x0001 */ char Padding_1297[1407];
  /* 0x0580 */ class MemoryNode* m_MemoryNode;
  /* 0x0588 */ int m_UseLargePagesIfPossible;
  /* 0x058c */ enum MemoryBrokerType m_ParentBrokerType;
  /* 0x0590 */ enum AllocationFailMode m_FailMode;
  /* 0x0594 */ unsigned long m_StaticallyBoundPoolId;
  /* 0x0598 */ int m_AllowSystemToOverrideStaticallyBoundPoolId;
  /* 0x059c */ enum MemoryWorkSpaces m_WorkSpaceId;
  /* 0x05a0 */ __int64 m_numVirtualMemReservedPages;
  /* 0x05a8 */ __int64 m_numVirtualMemCommittedPages;
  /* 0x05b0 */ __int64 m_numAWEAllocatedPages;
  /* 0x05b8 */ __int64 m_numSharedMemReservedPages;
  /* 0x05c0 */ __int64 m_numSharedMemCommittedPages;
  /* 0x05c8 */ class MemoryClerkInternal::NotificationInterface* m_notificationInterface;
  /* 0x05d0 */ enum MemoryClerkInternal::TYPE m_memoryClerkInternalType;
}; /* size: 0x0600 */

class MemoryClerkInternal::NotificationInterface
{
}; /* size: 0x0008 */

class DmpPointer<SEList<MemObjProxy,0> >
{
  /* 0x0000 */ class SEList<MemObjProxy,0>* m_pRaw;
}; /* size: 0x0008 */

class SOS_GlobalMemoryRecord
{
  /* 0x0000 */ const unsigned long REPORT_MEM_GRANULARITY;
  /* 0x0004 */ long Padding_1298[3];
  /* 0x0010 */ unsigned __int64 m_ullTotalPhys;
  /* 0x0018 */ unsigned __int64 m_ullAvailPhys;
  /* 0x0020 */ unsigned __int64 m_ullTotalPageFile;
  /* 0x0028 */ unsigned __int64 m_ullAvailPageFile;
  /* 0x0030 */ unsigned __int64 m_ullTotalVirtual;
  /* 0x0038 */ unsigned __int64 m_ullAvailVirtual;
  /* 0x0040 */ unsigned __int64 m_ullAvailExtendedVirtual;
  /* 0x0048 */ unsigned long m_memUtilization;
}; /* size: 0x0050 */

typedef struct _WKSTA_INFO_1043
{
  /* 0x0000 */ unsigned long wki1043_lock_maximum;
} WKSTA_INFO_1043, *PWKSTA_INFO_1043; /* size: 0x0004 */

struct SOS_MemoryConfig
{
  /* 0x0000 */ __int64 m_numberOfMemNodes;
  /* 0x0008 */ __int64 m_numberOfMemClerks;
  /* 0x0010 */ wchar_t** m_clerkNames;
  /* 0x0018 */ __int64 m_mappingSOSNodeToMemNode[64];
  /* 0x0218 */ unsigned __int64 m_distanceBitMask[64];
}; /* size: 0x0418 */

class AutoSpinlockHolder<26,19,1>;

class MemoryBrokerClerk
{
  /* 0x0000 */ long Padding_1299[10];
  /* 0x0028 */ double m_LastBenefit;
  /* 0x0030 */ double m_LastInternalBenefit;
  /* 0x0038 */ double m_LastValueOfMemory;
  /* 0x0040 */ __int64 m_PagesFreedPeriodic;
  /* 0x0048 */ __int64 m_PagesFreedPressure;
}; /* size: 0x0050 */

class Spinlock<156,3,1>
{
}; /* size: 0x0004 */

class SOSHost_SharedMemory
{
}; /* size: 0x0020 */

class XE_PackageManagerUtilities
{
}; /* size: 0x0001 */

class CDumpStream
{
  /* 0x0000 */ long Padding_1300[2];
  /* 0x0008 */ wchar_t m_wszDeviceName[256];
  /* 0x0208 */ unsigned long m_dwLastError;
  /* 0x020c */ enum DBGSTRM_ERR_TYPE m_typeError;
}; /* size: 0x0210 */

struct RemoteDiagListSLock
{
}; /* size: 0x0004 */

class IfNullTypeZeroElseOne<SystemAffinity const &>
{
}; /* size: 0x0001 */

class XTListElem<ProbCostData>
{
}; /* size: 0x0020 */

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_1301;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0020 */

typedef struct _FILE_INTERNAL_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER IndexNumber;
} FILE_INTERNAL_INFORMATION, *PFILE_INTERNAL_INFORMATION; /* size: 0x0008 */

struct SequencedObjectSLock
{
}; /* size: 0x0004 */

class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;

class DmpPointer<SOS_Task>
{
  /* 0x0000 */ class SOS_Task* m_pRaw;
}; /* size: 0x0008 */

class TlsDumpHelper
{
  /* 0x0000 */ long Padding_1302[36];
  /* 0x0090 */ class DmpPointer<SystemThread> m_SystemThread;
  /* 0x0098 */ class DmpPointer<SOS_Task> m_Task;
  /* 0x00a0 */ class DmpPointer<enum SOS_TIMERRESULT (__cdecl*)(void *,unsigned long *,unsigned long *)> m_TimerTaskFunc;
  /* 0x00a8 */ class SQLError m_SQLError;
}; /* size: 0x00c0 */

class DmpPointer<PageHeapPageInfo>
{
  /* 0x0000 */ class PageHeapPageInfo* m_pRaw;
}; /* size: 0x0008 */

class CacheClockHand<CacheClockAlgorithm,ClockInfo>
{
  /* 0x0000 */ class ClockInfo* const CLOCK_CANTSETPOSITION;
  /* 0x0008 */ long Padding_1303[24];
  /* 0x0068 */ class ClockInfo* m_descriptor;
  /* 0x0070 */ class CacheClockAlgorithm* m_algorithm;
  /* 0x0078 */ int m_isMoving;
}; /* size: 0x0080 */

class TClockAlgorithm<CacheClockHand<CacheClockAlgorithm,ClockInfo> >
{
  /* 0x0000 */ unsigned long m_ConfiguredEntriesPerTick;
  /* 0x0004 */ unsigned long m_InternalEntriesPerTick;
  /* 0x0008 */ class CacheClockHand<CacheClockAlgorithm,ClockInfo> m_clockHands[2];
  /* 0x0108 */ class ClockAlgorithm::ControlInfo m_externalHandControl;
}; /* size: 0x0138 */

class Spinlock<8,19,1>
{
}; /* size: 0x0004 */

typedef struct _wfinddata64_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long Padding_1304;
  /* 0x0008 */ __int64 time_create;
  /* 0x0010 */ __int64 time_access;
  /* 0x0018 */ __int64 time_write;
  /* 0x0020 */ __int64 size;
  /* 0x0028 */ wchar_t name[260];
} wfinddata64_t, *Pwfinddata64_t; /* size: 0x0230 */

class SpinlockHolder<176,3,1>;

class TCacheStore<CacheClockAlgorithm>
{
  union
  {
    /* 0x0000 */ const unsigned long DEFAULT_HASHTABLE;
    /* 0x0000 */ enum cache_type CACHETYPE;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1305[381];
  /* 0x05f8 */ enum DISTRIBUTED_CACHEID m_DistributedCacheId;
  /* 0x05fc */ unsigned short m_CacheId;
  /* 0x05fe */ char Padding_1306[2];
  /* 0x0600 */ __int64 m_cacheDescriptorSize;
  /* 0x0608 */ __int64 m_numberOfHashTable;
  /* 0x0610 */ void* m_destroyRoutine /* function */;
  /* 0x0618 */ class PageAllocator* m_smallPageAllocator;
  /* 0x0620 */ class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>* m_hashTableArray;
  /* 0x0628 */ __int64 m_smallObjectIndex;
  /* 0x0630 */ __int64 m_tokenIndex;
  /* 0x0638 */ int m_isClearedForTeardown;
  /* 0x063c */ long Padding_1307;
  /* 0x0640 */ class CacheClockAlgorithm m_evictionAlgorithm;
  /* 0x07a0 */ class TCacheSimulation<CacheClockAlgorithm> m_simulationAlgorithm;
  /* 0x0910 */ class SOS_StoreAndClockAlgorithmControlInterface* m_userControlInterface;
  /* 0x0918 */ unsigned __int64 m_localCounter;
  /* 0x0920 */ long Padding_1308[8];
  /* 0x0940 */ class QuotaController m_quotaForEntries;
  /* 0x0a80 */ class SOS_CacheStoreBase::Statistic m_stats;
  /* 0x0a98 */ wchar_t m_name[64];
}; /* size: 0x0b40 */

class SpinlockHolder<52,16,1>;

class Spinlock<132,5,1>
{
}; /* size: 0x0004 */

class Spinlock<182,3,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::database_segment_state_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1309[143];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int local_database_segment_idOffset;
    /* 0x0000 */ const int previous_stateOffset;
    /* 0x0000 */ const int new_stateOffset;
  }; /* size: 0x0012 */
}; /* size: 0x0250 */

struct SyncPointSLock
{
}; /* size: 0x0004 */

class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>
{
  /* 0x0000 */ volatile __int64 m_HitLength;
  /* 0x0008 */ volatile __int64 m_MissLength;
  /* 0x0010 */ volatile __int64 m_Misses;
  /* 0x0018 */ volatile __int64 m_Hits;
  /* 0x0020 */ class TSimpleHashTable<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket* m_rgbuckets;
  /* 0x0028 */ unsigned int m_bucketCount;
  /* 0x002c */ long Padding_1310;
  /* 0x0030 */ void* m_compareRoutine /* function */;
}; /* size: 0x0038 */

class DmpPointer<XE_SingletonTargetManager *>
{
  /* 0x0000 */ class XE_SingletonTargetManager** m_pRaw;
}; /* size: 0x0008 */

typedef struct _DETOUR_SECTION_HEADER
{
  /* 0x0000 */ unsigned long cbHeaderSize;
  /* 0x0004 */ unsigned long nSignature;
  /* 0x0008 */ unsigned long nDataOffset;
  /* 0x000c */ unsigned long cbDataSize;
  /* 0x0010 */ unsigned long nOriginalImportVirtualAddress;
  /* 0x0014 */ unsigned long nOriginalImportSize;
  /* 0x0018 */ unsigned long nOriginalBoundImportVirtualAddress;
  /* 0x001c */ unsigned long nOriginalBoundImportSize;
  /* 0x0020 */ unsigned long nOriginalIatVirtualAddress;
  /* 0x0024 */ unsigned long nOriginalIatSize;
  /* 0x0028 */ unsigned long nOriginalSizeOfImage;
  /* 0x002c */ unsigned long cbPrePE;
  /* 0x0030 */ unsigned long nOriginalClrFlags;
  /* 0x0034 */ unsigned long reserved1;
  /* 0x0038 */ unsigned long reserved2;
  /* 0x003c */ unsigned long reserved3;
} DETOUR_SECTION_HEADER, *PDETOUR_SECTION_HEADER; /* size: 0x0040 */

class SOS_StoreAndClockAlgorithmControlInterface
{
  /* 0x0000 */ long Padding_1311[3];
  /* 0x000c */ unsigned long m_controlFlags;
}; /* size: 0x0010 */

class Spinlock<64,16,1>
{
}; /* size: 0x0004 */

class SEListEnum<TCacheStore<CacheClockAlgorithm>::CacheEntryProxy,0>;

class SEListEnum<TCallback<void,SOS_Task *,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,SOS_Task *,NullType,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,SOS_Task *,NullType,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class Spinlock<161,3,1>
{
}; /* size: 0x0004 */

typedef struct _CLUS_MAINTENANCE_MODE_INFOEX
{
  /* 0x0000 */ int InMaintenance;
  /* 0x0004 */ enum _MAINTENANCE_MODE_TYPE_ENUM MaintainenceModeType;
  /* 0x0008 */ enum CLUSTER_RESOURCE_STATE InternalState;
  /* 0x000c */ unsigned long Signature;
} CLUS_MAINTENANCE_MODE_INFOEX, *PCLUS_MAINTENANCE_MODE_INFOEX; /* size: 0x0010 */

class Spinlock<272,3,1>
{
}; /* size: 0x0004 */

class EventInternal<SuspendQueueSLock>
{
  /* 0x0000 */ enum EVENT_STATE m_EventState;
  /* 0x0004 */ enum SOS_EVENT_TYPE m_EventType;
  /* 0x0008 */ class SOSQueue<Worker,0> m_WaitingWorkers;
  /* 0x0018 */ __int64 m_SignalCount;
  /* 0x0020 */ struct SuspendQueueSLock m_Lock;
}; /* size: 0x0028 */

class Spinlock<174,3,1>
{
}; /* size: 0x0004 */

class SEList<SOS_IOCompRequest,40>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SpinlockHolder<309,1,1>;

class AutoSpinlockHolder<97,11,1>;

class SEListEnum<SOS_IOCompRequest,40>;

class AutoSpinlockHolder<197,3,1>;

class SpinlockHolder<250,1,1>;

class SOS_CacheEntryToken
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned __int64 m_LocalCounter;
      /* 0x0008 */ unsigned short m_OriginalCacheId;
      /* 0x000a */ unsigned short m_SourceCacheId;
      /* 0x000c */ enum DISTRIBUTED_CACHEID m_DistributedCacheId;
    }; /* size: 0x0010 */
    /* 0x0000 */ enum DISTRIBUTED_CACHEID InvalidDistributedCacheId;
  }; /* size: 0x0010 */
  /* 0x0010 */ unsigned __int64 m_likelyPresenceMask;
}; /* size: 0x0018 */

class SpinlockHolder<104,10,1>;

struct std::bidirectional_iterator_tag
{
}; /* size: 0x0001 */

struct std::random_access_iterator_tag
{
}; /* size: 0x0001 */

struct CursorSLock
{
}; /* size: 0x0004 */

class std::length_error
{
}; /* size: 0x0018 */

class std::basic_string<char,std::char_traits<char>,std::allocator<char> >
{
  /* 0x0000 */ const unsigned __int64 npos;
}; /* size: 0x0028 */

class std::runtime_error
{
}; /* size: 0x0018 */

class std::ctype<char>
{
  union
  {
    /* 0x0000 */ class std::locale::id id;
    /* 0x0000 */ const unsigned __int64 table_size;
  }; /* size: 0x0008 */
  /* 0x0008 */ long Padding_1312[2];
  /* 0x0010 */ struct _Ctypevec _Ctype;
}; /* size: 0x0028 */

class SpinlockHolder<297,1,1>;

class AutoSpinlockHolder<122,7,1>;

class DumpSEListIterator<SEList<Worker,16>,2048>
{
}; /* size: 0x0020 */

class std::_Lockit
{
  /* 0x0000 */ int _Locktype;
}; /* size: 0x0004 */

class std::_Locinfo
{
  /* 0x0000 */ class std::_Lockit _Lock;
  /* 0x0004 */ long Padding_1313;
  /* 0x0008 */ class std::_Yarn<char> _Days;
  /* 0x0018 */ class std::_Yarn<char> _Months;
  /* 0x0028 */ class std::_Yarn<char> _Oldlocname;
  /* 0x0038 */ class std::_Yarn<char> _Newlocname;
}; /* size: 0x0048 */

struct FTInitSLock
{
}; /* size: 0x0004 */

class std::locale::facet
{
  /* 0x0000 */ long Padding_1314[2];
  /* 0x0008 */ unsigned __int64 _Refs;
}; /* size: 0x0010 */

class std::locale
{
  /* 0x0000 */ class std::locale::_Locimp* _Ptr;
}; /* size: 0x0008 */

class std::locale::_Locimp
{
  /* 0x0000 */ long Padding_1315[4];
  /* 0x0010 */ class std::locale::facet** _Facetvec;
  /* 0x0018 */ unsigned __int64 _Facetcount;
  /* 0x0020 */ int _Catmask;
  /* 0x0024 */ BOOL _Xparent;
  /* 0x0025 */ char Padding_1316[3];
  /* 0x0028 */ class std::_Yarn<char> _Name;
  /* 0x0000 */ class std::locale::_Locimp* _Clocptr;
}; /* size: 0x0038 */

typedef struct _stat32
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1317[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long st_size;
  /* 0x0018 */ long st_atime;
  /* 0x001c */ long st_mtime;
  /* 0x0020 */ long st_ctime;
} stat32, *Pstat32; /* size: 0x0024 */

class AutoSpinlockHolder<262,1,1>;

struct FsDeletedFolderCleanupSLock
{
}; /* size: 0x0004 */

class std::ctype_byname<char>
{
}; /* size: 0x0028 */

class SpinlockHolder<238,1,1>;

class SpinlockHolder<197,3,1>;

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ long Padding_1318[2];
  /* 0x0008 */ __int64 _Chcount;
}; /* size: 0x0070 */

class AutoSpinlockHolder<318,1,1>;

class std::basic_istream<unsigned short,std::char_traits<unsigned short> >::sentry
{
  /* 0x0000 */ long Padding_1319[2];
  /* 0x0008 */ BOOL _Ok;
}; /* size: 0x0010 */

class AutoSpinlockHolder<210,2,1>;

class Spinlock<148,4,1>
{
}; /* size: 0x0004 */

class DumpSEListIterator<SEList<MemObjProxy,0>,4194304>
{
}; /* size: 0x0020 */

class DmpPointer<SOSHost>
{
  /* 0x0000 */ class SOSHost* m_pRaw;
}; /* size: 0x0008 */

struct XE_TEvent<4,1,15>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,15> m_dynamicAttr;
  /* 0x0330 */ struct XEEvent m_event;
}; /* size: 0x0378 */

class std::error_category
{
}; /* size: 0x0008 */

struct XE_TArray<XEMessage *,0>
{
  /* 0x0000 */ struct XEMessage** m_array;
}; /* size: 0x0008 */

struct XE_TObjects<XEMessage,0>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMessage *,0> m_objectPtrs;
}; /* size: 0x0018 */

struct std::allocator<char>::rebind<char>
{
}; /* size: 0x0001 */

class std::basic_ios<char,std::char_traits<char> >
{
  /* 0x0000 */ long Padding_1320[18];
  /* 0x0048 */ class std::basic_streambuf<char,std::char_traits<char> >* _Mystrbuf;
  /* 0x0050 */ class std::basic_ostream<char,std::char_traits<char> >* _Tiestr;
  /* 0x0058 */ char _Fillch;
}; /* size: 0x0060 */

class AutoSpinlockHolder<273,3,1>;

struct ResQueueSLock
{
}; /* size: 0x0004 */

class ResQueueBase
{
  /* 0x0000 */ class SEList<ResQueueWaiter,0> m_waiters;
  /* 0x0010 */ struct ResQueueSLock m_spinLock;
  /* 0x0014 */ long Padding_1321;
  /* 0x0018 */ class ListBase m_list;
}; /* size: 0x0028 */

struct DiagManagerSLock
{
}; /* size: 0x0004 */

struct std::iterator<std::input_iterator_tag,char,__int64,char *,char &>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<99,11,1>;

class std::basic_ostream<char,std::char_traits<char> >::sentry
{
  /* 0x0000 */ long Padding_1322[2];
  /* 0x0008 */ BOOL _Ok;
}; /* size: 0x0010 */

class std::basic_ostream<char,std::char_traits<char> >::_Sentry_base
{
  /* 0x0000 */ class std::basic_ostream<char,std::char_traits<char> >& _Myostr;
}; /* size: 0x0008 */

class Spinlock<240,1,1>
{
}; /* size: 0x0004 */

class Spinlock<124,7,1>
{
}; /* size: 0x0004 */

struct std::_Iterator012<std::random_access_iterator_tag,char,__int64,char const *,char const &,std::_Iterator_base0>
{
}; /* size: 0x0001 */

class TypeListSize<TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

class std::bad_cast
{
}; /* size: 0x0018 */

typedef struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_1323;
  /* 0x0008 */ const struct _UNICODE_STRING* FullDllName;
  /* 0x0010 */ const struct _UNICODE_STRING* BaseDllName;
  /* 0x0018 */ void* DllBase;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ long __PADDING__[1];
} LDR_DLL_UNLOADED_NOTIFICATION_DATA, *PLDR_DLL_UNLOADED_NOTIFICATION_DATA; /* size: 0x0028 */

typedef union _LDR_DLL_NOTIFICATION_DATA
{
  union
  {
    /* 0x0000 */ struct _LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
    /* 0x0000 */ struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
  }; /* size: 0x0028 */
} LDR_DLL_NOTIFICATION_DATA, *PLDR_DLL_NOTIFICATION_DATA; /* size: 0x0028 */

class std::system_error
{
  /* 0x0000 */ long Padding_1324[6];
  /* 0x0018 */ class std::error_code _Mycode;
}; /* size: 0x0028 */

struct XE_TArray<XEMap *,21>
{
  /* 0x0000 */ struct XEMap* m_array[21];
}; /* size: 0x00a8 */

typedef struct _XSAVE_FEATURE
{
  /* 0x0000 */ unsigned long FeatureId;
  /* 0x0004 */ long Padding_1325;
  union
  {
    /* 0x0008 */ struct _XSAVE_VENDORS* Vendors;
    /* 0x0008 */ unsigned __int64 Unused;
  }; /* size: 0x0008 */
} XSAVE_FEATURE, *PXSAVE_FEATURE; /* size: 0x0010 */

typedef struct _XSAVE_POLICY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Size;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long MaxSaveAreaLength;
  /* 0x0010 */ unsigned __int64 FeatureBitmask;
  /* 0x0018 */ unsigned long NumberOfFeatures;
  /* 0x001c */ long Padding_1326;
  /* 0x0020 */ struct _XSAVE_FEATURE Features[1];
} XSAVE_POLICY, *PXSAVE_POLICY; /* size: 0x0030 */

typedef struct _SYSTEM_PROCESSOR_POLICY_INFORMATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long PolicyId;
  /* 0x0008 */ struct _XSAVE_POLICY Policy;
} SYSTEM_PROCESSOR_POLICY_INFORMATION, *PSYSTEM_PROCESSOR_POLICY_INFORMATION; /* size: 0x0038 */

class std::invalid_argument
{
}; /* size: 0x0018 */

class Spinlock<53,16,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<87,12,1>;

struct XE_TObjects<XEMap,21>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,21> m_objectPtrs;
}; /* size: 0x00b8 */

class Spinlock<325,1,1>
{
}; /* size: 0x0004 */

class UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

struct std::_Outit
{
}; /* size: 0x0001 */

struct XE_TMap<7>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[7];
  }; /* size: 0x0070 */
  /* 0x0070 */ struct XEMap m_map;
}; /* size: 0x00a0 */

class std::basic_iostream<char,std::char_traits<char> >
{
}; /* size: 0x0078 */

struct RpcResponderContextSLock
{
}; /* size: 0x0004 */

class std::istrstream
{
  /* 0x0000 */ long Padding_1327[4];
  /* 0x0010 */ class std::strstreambuf _Strbuffer;
}; /* size: 0x0110 */

class AutoSpinlockHolder<333,0,1>;

class AutoSpinlockHolder<35,19,1>;

struct XVBcsnSLock
{
}; /* size: 0x0004 */

struct SubpDescSLock
{
}; /* size: 0x0004 */

struct std::iterator<std::output_iterator_tag,void,void,void,void>
{
}; /* size: 0x0001 */

struct XE_TypeTraits<XEEvent>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class std::logic_error
{
}; /* size: 0x0018 */

typedef struct _TIME_FIELDS
{
  /* 0x0000 */ short Year;
  /* 0x0002 */ short Month;
  /* 0x0004 */ short Day;
  /* 0x0006 */ short Hour;
  /* 0x0008 */ short Minute;
  /* 0x000a */ short Second;
  /* 0x000c */ short Milliseconds;
  /* 0x000e */ short Weekday;
} TIME_FIELDS, *PTIME_FIELDS; /* size: 0x0010 */

class std::basic_istream<char,std::char_traits<char> >
{
  /* 0x0000 */ long Padding_1328[2];
  /* 0x0008 */ __int64 _Chcount;
}; /* size: 0x0070 */

struct OptInfoMgrSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<214,2,1>;

struct ITransactionDispenser
{
}; /* size: 0x0008 */

struct XTSMgrSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<273,3,1>;

class std::error_condition
{
  /* 0x0000 */ int _Myval;
  /* 0x0004 */ long Padding_1329;
  /* 0x0008 */ const class std::error_category* _Mycat;
}; /* size: 0x0010 */

class XeSqlPkg::validate_file
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1330[143];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int is_log_fileOffset;
    /* 0x0000 */ const int file_logical_nameOffset;
    /* 0x0000 */ const int file_physical_nameOffset;
  }; /* size: 0x0025 */
}; /* size: 0x0268 */

class SpinlockHolder<302,1,1>;

class AutoSpinlockHolder<217,2,1>;

class SEListEnum<XE_SessionSrv,1400>
{
  /* 0x0000 */ class SEList<XE_SessionSrv,1400>* m_pList;
  /* 0x0008 */ class XE_SessionSrv* m_pNext;
}; /* size: 0x0010 */

class std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> >
{
  /* 0x0000 */ const char* _Ptr;
}; /* size: 0x0008 */

class WaitForGraphEdge
{
  /* 0x0000 */ long Padding_1331[2];
  /* 0x0008 */ class WaitForGraphVertex* m_SourceVertex;
  /* 0x0010 */ class WaitForGraphVertex* m_DestinationVertex;
  /* 0x0018 */ class WaitForGraphEdge* m_NextOutgoingEdgeForSource;
  /* 0x0020 */ class WaitForGraphEdge* m_NextIncomingEdgeForDestination;
  /* 0x0028 */ enum WaitForGraphEdge::WaitForGraphEdgeState m_State;
}; /* size: 0x0030 */

class std::_String_const_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >
{
  /* 0x0000 */ const wchar_t* _Ptr;
}; /* size: 0x0008 */

class CAutoRefc<XE_DAttrExpr>
{
  /* 0x0000 */ class XE_DAttrExpr* m_pt;
}; /* size: 0x0008 */

struct std::_Allocator_base<unsigned short>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<280,1,1>;

struct std::_Allocator_base<char>
{
}; /* size: 0x0001 */

class std::overflow_error
{
}; /* size: 0x0018 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class std::hash<std::error_condition>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<38,18,1>;

typedef struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING
{
  /* 0x0000 */ void* ResolutionContext;
} ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING, *PASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING; /* size: 0x0008 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

struct std::iterator<std::input_iterator_tag,unsigned short,__int64,unsigned short *,unsigned short &>
{
}; /* size: 0x0001 */

class std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> >
{
  /* 0x0000 */ class std::basic_streambuf<unsigned short,std::char_traits<unsigned short> >* _Strbuf;
  /* 0x0008 */ BOOL _Got;
  /* 0x0009 */ char Padding_1332;
  /* 0x000a */ wchar_t _Val;
}; /* size: 0x0010 */

struct CSIBuildMemSLock
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class std::numpunct<unsigned short>
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_1333[2];
  /* 0x0010 */ const char* _Grouping;
  /* 0x0018 */ wchar_t _Dp;
  /* 0x001a */ wchar_t _Kseparator;
  /* 0x001c */ long Padding_1334;
  /* 0x0020 */ const wchar_t* _Falsename;
  /* 0x0028 */ const wchar_t* _Truename;
}; /* size: 0x0030 */

class DmpPointer<IMemObj>
{
  /* 0x0000 */ class IMemObj* m_pRaw;
}; /* size: 0x0008 */

class SEListEnum<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>* m_pNext;
}; /* size: 0x0010 */

struct std::nothrow_t
{
}; /* size: 0x0001 */

class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType> >
{
}; /* size: 0x0030 */

struct std::allocator<unsigned short>::rebind<unsigned short>
{
}; /* size: 0x0001 */

class Spinlock<167,3,1>
{
}; /* size: 0x0004 */

struct std::unary_function<std::error_code,unsigned __int64>
{
}; /* size: 0x0001 */

class std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_1335[2];
  /* 0x0010 */ struct _Cvtvec _Cvt;
}; /* size: 0x0018 */

struct IODispenserPauseSLock
{
}; /* size: 0x0004 */

struct LCSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<118,8,1>;

class std::fpos<int>
{
  union
  {
    /* 0x0000 */ const int _Stz;
    /* 0x0000 */ __int64 _Myoff;
  }; /* size: 0x0008 */
  /* 0x0008 */ __int64 _Fpos;
  /* 0x0010 */ int _Mystate;
}; /* size: 0x0018 */

class Spinlock<100,10,1>
{
}; /* size: 0x0004 */

struct StaticStorage<206>
{
  /* 0x0000 */ unsigned int m_buf[7];
}; /* size: 0x001c */

struct XBitmap<StaticStorage<206> >
{
  /* 0x0000 */ struct StaticStorage<206> m_storage;
}; /* size: 0x001c */

class std::num_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >
{
  /* 0x0000 */ class std::locale::id id;
  /* 0x0008 */ long Padding_1336[2];
  /* 0x0010 */ struct _Cvtvec _Cvt;
}; /* size: 0x0018 */

class Spinlock<7,19,1>
{
}; /* size: 0x0004 */

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >
{
}; /* size: 0x0068 */

class std::_String_iterator<char,std::char_traits<char>,std::allocator<char> >;

typedef struct _SERVER_INFO_1017
{
  /* 0x0000 */ unsigned long sv1017_announce;
} SERVER_INFO_1017, *PSERVER_INFO_1017; /* size: 0x0004 */

class std::reverse_iterator<std::_String_iterator<char,std::char_traits<char>,std::allocator<char> > >;

class std::reverse_iterator<std::_String_const_iterator<char,std::char_traits<char>,std::allocator<char> > >;

class Spinlock<313,1,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<127,7,1>;

class std::strstream
{
  /* 0x0000 */ long Padding_1337[6];
  /* 0x0018 */ class std::strstreambuf _Strbuffer;
}; /* size: 0x0118 */

class std::_Timevec
{
  /* 0x0000 */ void* _Timeptr;
}; /* size: 0x0008 */

class TypeListNode<ExtIntCodeProtector<1>,NullType>
{
}; /* size: 0x0001 */

class std::_String_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;

class XeSqlPkg::query_rx_sending_activation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1338[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class std::reverse_iterator<std::_String_const_iterator<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> > >;

struct DataPortSourceInfoCreditSLock
{
}; /* size: 0x0004 */

struct PageCopierSLock
{
}; /* size: 0x0004 */

class std::ios_base
{
  /* 0x0000 */ long Padding_1339[2];
  /* 0x0008 */ unsigned __int64 _Stdstr;
  /* 0x0010 */ int _Mystate;
  /* 0x0014 */ int _Except;
  /* 0x0018 */ int _Fmtfl;
  /* 0x001c */ long Padding_1340;
  /* 0x0020 */ __int64 _Prec;
  /* 0x0028 */ __int64 _Wide;
  /* 0x0030 */ struct std::ios_base::_Iosarray* _Arr;
  /* 0x0038 */ struct std::ios_base::_Fnarray* _Calls;
  /* 0x0040 */ class std::locale* _Ploc;
  union
  {
    /* 0x0000 */ int _Index;
    /* 0x0000 */ BOOL _Sync;
  }; /* size: 0x0004 */
}; /* size: 0x0048 */

class Spinlock<36,19,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<125,7,1>;

struct std::ios_base::_Iosarray
{
  /* 0x0000 */ struct std::ios_base::_Iosarray* _Next;
  /* 0x0008 */ int _Index;
  /* 0x000c */ long _Lo;
  /* 0x0010 */ void* _Vp;
}; /* size: 0x0018 */

class Spinlock<322,1,1>
{
}; /* size: 0x0004 */

class Spinlock<260,1,1>
{
}; /* size: 0x0004 */

struct std::ios_base::_Fnarray
{
  /* 0x0000 */ struct std::ios_base::_Fnarray* _Next;
  /* 0x0008 */ int _Index;
  /* 0x000c */ long Padding_1341;
  /* 0x0010 */ void* _Pfn /* function */;
}; /* size: 0x0018 */

class AutoSpinlockHolder<201,3,1>;

class XeSqlPkg::hadr_undo_manager_test_point
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1342[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int test_pointOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class std::ios_base::Init
{
  /* 0x0000 */ int _Init_cnt;
}; /* size: 0x0001 */

class std::ios_base::failure
{
}; /* size: 0x0028 */

class std::_Locbase<int>
{
  union
  {
    /* 0x0000 */ const int collate;
    /* 0x0000 */ const int ctype;
    /* 0x0000 */ const int monetary;
    /* 0x0000 */ const int numeric;
    /* 0x0000 */ const int time;
    /* 0x0000 */ const int messages;
    /* 0x0000 */ const int all;
    /* 0x0000 */ const int none;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

class Spinlock<1,19,1>
{
}; /* size: 0x0004 */

class std::basic_ostream<unsigned short,std::char_traits<unsigned short> >::sentry
{
  /* 0x0000 */ long Padding_1343[2];
  /* 0x0008 */ BOOL _Ok;
}; /* size: 0x0010 */

class AutoSpinlockHolder<312,1,1>;

struct SEReplPartitionByKeySLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_server_runtime_create
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1344[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class UsageInfo
{
  union
  {
    /* 0x0000 */ const unsigned long INVALIDATED;
    /* 0x0000 */ unsigned long m_usageCount;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

class TSList<SystemThreadPool::SystemThreadBlock>
{
}; /* size: 0x0008 */

struct XE_TypeTraits<XEObject>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class SpinlockHolder<166,3,1>;

struct XE_TArray<XEDataAttribute,24>
{
  /* 0x0000 */ struct XEDataAttribute m_array[24];
}; /* size: 0x03c0 */

class SpinlockHolder<314,1,1>;

class DDRecursiveMutexBlockerEnumerator
{
}; /* size: 0x0018 */

class XeSqlPkg::redo_worker_entry
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1345[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class SEList<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct SOS_DispatcherSchedmonInfo
{
  /* 0x0000 */ unsigned int m_suspectTimeoutMS;
  /* 0x0004 */ unsigned int m_stuckTimeoutMS;
  /* 0x0008 */ unsigned int m_reconfigurePeriodMS;
}; /* size: 0x000c */

class XE_TCollection<1,1>;

class XeSqlPkg::hadr_db_manager_db_queue_restart
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1346[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int clean_shutdownOffset;
    /* 0x0000 */ const int log_acceptOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0278 */

class SOS_HiddenWorkerEnum
{
}; /* size: 0x0028 */

struct XE_TTarget<3>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,3> m_customizableAttr;
  }; /* size: 0x00a8 */
  /* 0x00a8 */ struct XETarget m_target;
}; /* size: 0x00e0 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>
{
  /* 0x0000 */ long Padding_1347[10];
  /* 0x0028 */ void* m_pfn /* function */;
}; /* size: 0x0030 */

struct TransmitterMessageQueuesSLock
{
}; /* size: 0x0004 */

struct TFormatterTypesPolicy<RPCStream>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,void *,SystemAffinity,SystemAffinity,NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity,SystemAffinity,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class XeSqlPkg::page_compression_attempt_failed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1348[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int failure_reasonOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class SpinlockHolder<91,11,1>;

class SEList<MemoryBrokerClerk,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SpinlockHolder<279,1,1>;

class SEListEnum<MemoryBrokerClerk,8>;

class SpinlockHolder<131,6,1>;

class Spinlock<256,1,1>
{
}; /* size: 0x0004 */

class Spinlock<186,3,1>
{
}; /* size: 0x0004 */

class TCacheSimulation<CacheProbabilisticAlgorithm>
{
  /* 0x0000 */ long Padding_1349[11362];
  /* 0xb188 */ unsigned __int64 m_simulationBenefit;
  /* 0xb190 */ __int64 m_savedSimulationSize;
}; /* size: 0xb198 */

class TCacheStore<CacheProbabilisticAlgorithm>
{
  union
  {
    /* 0x0000 */ const unsigned long DEFAULT_HASHTABLE;
    /* 0x0000 */ enum cache_type CACHETYPE;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1350[381];
  /* 0x05f8 */ enum DISTRIBUTED_CACHEID m_DistributedCacheId;
  /* 0x05fc */ unsigned short m_CacheId;
  /* 0x05fe */ char Padding_1351[2];
  /* 0x0600 */ __int64 m_cacheDescriptorSize;
  /* 0x0608 */ __int64 m_numberOfHashTable;
  /* 0x0610 */ void* m_destroyRoutine /* function */;
  /* 0x0618 */ class PageAllocator* m_smallPageAllocator;
  /* 0x0620 */ class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>* m_hashTableArray;
  /* 0x0628 */ __int64 m_smallObjectIndex;
  /* 0x0630 */ __int64 m_tokenIndex;
  /* 0x0638 */ int m_isClearedForTeardown;
  /* 0x063c */ long Padding_1352;
  /* 0x0640 */ class CacheProbabilisticAlgorithm m_evictionAlgorithm;
  /* 0xb7c0 */ class TCacheSimulation<CacheProbabilisticAlgorithm> m_simulationAlgorithm;
  /* 0x16958 */ class SOS_StoreAndClockAlgorithmControlInterface* m_userControlInterface;
  /* 0x16960 */ unsigned __int64 m_localCounter;
  /* 0x16968 */ long Padding_1353[6];
  /* 0x16980 */ class QuotaController m_quotaForEntries;
  /* 0x16ac0 */ class SOS_CacheStoreBase::Statistic m_stats;
  /* 0x16ad8 */ wchar_t m_name[64];
}; /* size: 0x16b80 */

class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>
{
  /* 0x0000 */ volatile __int64 m_HitLength;
  /* 0x0008 */ volatile __int64 m_MissLength;
  /* 0x0010 */ volatile __int64 m_Misses;
  /* 0x0018 */ volatile __int64 m_Hits;
  /* 0x0020 */ class TSimpleHashTable<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,CacheStoreSLock,0,unsigned int>::Bucket* m_rgbuckets;
  /* 0x0028 */ unsigned int m_bucketCount;
  /* 0x002c */ long Padding_1354;
  /* 0x0030 */ void* m_compareRoutine /* function */;
}; /* size: 0x0038 */

struct IoreqSLock
{
}; /* size: 0x0004 */

struct XE_TEvent<4,0,18>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,18> m_dynamicAttr;
  /* 0x0378 */ struct XEEvent m_event;
}; /* size: 0x03c0 */

class XeSqlPkg::deadlock_monitor_mem_stats
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,18> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1355[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int count_cyclesOffset;
    /* 0x0000 */ const int peak_mem_utilOffset;
    /* 0x0000 */ const int vertex_primary_pool_capOffset;
    /* 0x0000 */ const int vertex_secondary_pool_capOffset;
    /* 0x0000 */ const int vertex_avg_alloc_countOffset;
    /* 0x0000 */ const int vertex_max_alloc_countOffset;
    /* 0x0000 */ const int edge_primary_pool_capOffset;
    /* 0x0000 */ const int edge_secondary_pool_capOffset;
    /* 0x0000 */ const int edge_avg_alloc_countOffset;
    /* 0x0000 */ const int edge_max_alloc_countOffset;
    /* 0x0000 */ const int scc_primary_pool_capOffset;
    /* 0x0000 */ const int scc_secondary_pool_capOffset;
    /* 0x0000 */ const int scc_avg_alloc_countOffset;
    /* 0x0000 */ const int scc_max_alloc_countOffset;
    /* 0x0000 */ const int vertex_hash_primary_pool_capOffset;
    /* 0x0000 */ const int vertex_hash_secondary_pool_capOffset;
    /* 0x0000 */ const int vertex_hash_avg_alloc_countOffset;
    /* 0x0000 */ const int vertex_hash_max_alloc_countOffset;
  }; /* size: 0x03c0 */
}; /* size: 0x0290 */

class AutoSpinlockHolder<271,1,1>;

class ProbCostData
{
  /* 0x0000 */ long Padding_1356[24];
  /* 0x0060 */ class CacheProbabilisticAlgorithm* m_evictionAlgorithm;
  /* 0x0068 */ unsigned __int64 m_createTime;
  /* 0x0070 */ unsigned __int64 m_lastUseTime;
  /* 0x0078 */ unsigned __int64 m_useCount;
  /* 0x0080 */ unsigned __int64 m_avgIntervalOfReuse;
  /* 0x0088 */ double m_reuseProbability;
  /* 0x0090 */ double m_latestValueOfMemory;
}; /* size: 0x0098 */

class TypeListSize<TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class XE_StreamCompare<unsigned char,XEPackage0::BinaryCompare<unsigned char,0>,0>
{
  /* 0x0000 */ unsigned char m_buffer[1024];
  /* 0x0400 */ const unsigned char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

class CAutoRg<XEPackage0::OrphanEntry>
{
}; /* size: 0x0008 */

struct SOSHost_CacheStoreHashTableDescriptor
{
  /* 0x0000 */ int numberOfBuckets;
  /* 0x0004 */ long Padding_1357;
  /* 0x0008 */ void* compareRoutine /* function */;
}; /* size: 0x0010 */

class SpinlockHolder<145,4,1>;

class XeSqlPkg::hadr_db_manager_redo_control
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1358[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int redo_statusOffset;
    /* 0x0000 */ const int shutdown_typeOffset;
    /* 0x0000 */ const int stopatOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

class TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy
{
  /* 0x0000 */ long Padding_1359[4];
  /* 0x0010 */ class TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryDescriptor* m_CacheEntryDescriptor;
  /* 0x0018 */ unsigned int m_HashValue;
}; /* size: 0x0020 */

struct ClrHostTaskSLock
{
}; /* size: 0x0004 */

class SEList<SOS_TraceStream,8>;

class Spinlock<171,3,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<47,18,1>;

class Spinlock<303,1,1>
{
}; /* size: 0x0004 */

class PoolList
{
}; /* size: 0x0018 */

class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>
{
  /* 0x0000 */ volatile __int64 m_HitLength;
  /* 0x0008 */ volatile __int64 m_MissLength;
  /* 0x0010 */ volatile __int64 m_Misses;
  /* 0x0018 */ volatile __int64 m_Hits;
  /* 0x0020 */ class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int>::Bucket* m_rgbuckets;
  /* 0x0028 */ unsigned int m_bucketCount;
  /* 0x002c */ long Padding_1360;
  /* 0x0030 */ void* m_compareRoutine /* function */;
}; /* size: 0x0038 */

class SOS_ResourceManager
{
  union
  {
    struct
    {
      /* 0x0000 */ volatile long m_ConfigVersion;
      /* 0x0004 */ volatile long m_InMemPoolMetadataId;
      /* 0x0008 */ volatile long m_InMemGroupMetadataId;
    }; /* size: 0x000c */
    /* 0x0000 */ const unsigned long SYSTEM_ID;
    /* 0x0000 */ const unsigned long DEFAULT_ID;
    /* 0x0000 */ const unsigned long START_USER_OBJECTS_IDS;
    /* 0x0000 */ const unsigned long SYSTEM_METADATA_ID;
    /* 0x0000 */ const unsigned long DEFAULT_METADATA_ID;
    /* 0x0000 */ const unsigned long START_USER_OBJECTS_METADATA_IDS;
    /* 0x0000 */ const unsigned long START_IN_MEM_METADATA_IDS;
    /* 0x0000 */ const unsigned long INVALID_METADATA_POOL_ID;
    struct
    {
      /* 0x0000 */ const unsigned long INVALID_METADATA_GROUP_ID;
      /* 0x0004 */ long Padding_1361[2];
      /* 0x000c */ unsigned long m_PoolLocalStorageSize;
      /* 0x0010 */ unsigned long m_GroupLocalStorageSize;
      /* 0x0014 */ long Padding_1362;
      /* 0x0018 */ void* m_NameCompareFunction /* function */;
      /* 0x0020 */ void* m_HashCompute /* function */;
    }; /* size: 0x001c */
    /* 0x0000 */ enum SOS_ResourceManager::UnitOfFairness sm_UnitOfFairness;
    /* 0x0000 */ unsigned long sm_GlobalCapCpu;
  }; /* size: 0x001c */
  /* 0x001c */ long Padding_1363[3];
  /* 0x0028 */ class IMemObj* m_pmo;
  /* 0x0030 */ class SOS_RWLock m_lock;
  /* 0x0060 */ class SOS_ResourceGroup m_defaultGroup;
  /* 0x03f0 */ class SOS_ResourceGroup m_systemGroup;
  /* 0x0780 */ class SOS_ResourcePool m_defaultPool;
  /* 0x0b70 */ class SOS_ResourcePool m_systemPool;
  /* 0x0f60 */ class PoolList m_poolList;
  /* 0x0f78 */ class GroupList m_groupList;
  /* 0x0f90 */ class TSimpleHashTable<SOS_ResourceGroup,ResManagerHashSLock,0,unsigned int> m_groupTable;
  /* 0x0fc8 */ __int64 m_catGroupsPresent;
  /* 0x0fd0 */ __int64 m_catPoolsPresent;
  /* 0x0fd8 */ __int64 m_inMemGroupsPresent;
  /* 0x0fe0 */ __int64 m_inMemPoolsPresent;
  /* 0x0fe8 */ unsigned long m_Classifier;
  /* 0x0fec */ int m_isInDefaultConfiguration;
}; /* size: 0x0ff0 */

class SpinlockHolder<89,12,1>;

class Spinlock<296,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_lsn_sync_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1364[140];
      /* 0x0240 */ unsigned char m_buf[80];
    }; /* size: 0x0060 */
    /* 0x0000 */ const int message_log_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int redo_pointOffset;
    /* 0x0000 */ const int log_truncation_blockOffset;
    /* 0x0000 */ const int hadr_truncation_blockOffset;
    /* 0x0000 */ const int recovery_pointOffset;
    /* 0x0000 */ const int sync_hardened_pointOffset;
    /* 0x0000 */ const int minimum_skip_lsnOffset;
    /* 0x0000 */ const int hardened_skip_lsnOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0290 */

class Spinlock<74,16,1>
{
}; /* size: 0x0004 */

class XE_AutoRg<XEPackage0::RingTarget::EventTypeEntry>
{
}; /* size: 0x0008 */

class XEPackage0::RingTarget::PackageEntry
{
  /* 0x0000 */ unsigned int m_Size;
  /* 0x0004 */ long Padding_1365;
  /* 0x0008 */ class XE_AutoRg<XEPackage0::RingTarget::EventTypeEntry> m_eventTypes;
}; /* size: 0x0010 */

class SOS_ResourceManager::AutoSwitchSystemGroup
{
  /* 0x0000 */ class SOS_ResourceGroup* m_oldGroup;
}; /* size: 0x0008 */

struct BufWriteLogSLock
{
}; /* size: 0x0004 */

class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pNext;
}; /* size: 0x0010 */

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_currentObject;
  /* 0x0018 */ class BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem* m_baseObject;
  /* 0x0020 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0028 */

class ExcHandlerIterator
{
  /* 0x0000 */ class ExcHandler* m_pCurrentHandler;
}; /* size: 0x0008 */

class SOSResourceGroupStats
{
  /* 0x0000 */ volatile long m_RequestsActive;
  /* 0x0004 */ volatile long m_WorkersActive;
  /* 0x0008 */ volatile long m_SessionsActive;
  /* 0x000c */ volatile long m_RequestsThrottled;
  /* 0x0010 */ volatile __int64 m_TotalRequestsThrottled;
  /* 0x0018 */ volatile __int64 m_RequestsCompleted;
  /* 0x0020 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_CPUMsecConsumed;
  /* 0x0028 */ volatile __int64 m_RequestsCompletedPrevious;
  /* 0x0030 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_CPUMsecConsumedPrevious;
}; /* size: 0x0038 */

class TChildEnumerator<GlobalSchedulerEnum,SOS_Scheduler,TEnumerator<TList<SOS_Scheduler,SOS_Task,16,TListSLock> >,SOS_Task>;

class TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > >
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<211,2,1>
{
}; /* size: 0x0010 */

class XeSqlPkg::glm_local_brick_release_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1366[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

struct TClassName<unsigned int,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class XeSqlPkg::buffer_pool_page_freed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1367[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int page_sizeOffset;
    /* 0x0000 */ const int page_locationOffset;
    /* 0x0000 */ const int numa_node_idOffset;
    /* 0x0000 */ const int steal_optionsOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>
{
}; /* size: 0x0020 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::List
{
}; /* size: 0x0030 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem
{
  /* 0x0000 */ long Padding_1368[8];
  /* 0x0020 */ class SOSCallbackEvent* volatile m_pNoUsersEvent;
}; /* size: 0x0028 */

struct BitOrdinal<524288>
{
}; /* size: 0x0001 */

struct TClassName<unsigned long,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class PageMap
{
  union
  {
    /* 0x0000 */ const unsigned long ENTRIES_PER_TABLE;
    /* 0x0000 */ const unsigned __int64 PAGE_DIRECTORY_SIZE;
    /* 0x0000 */ const unsigned long MAX_PAGE_ENTRIES;
    /* 0x0000 */ const unsigned int BAD_TABLE_ENTRY;
    /* 0x0000 */ void** m_pageDirectory[2048];
  }; /* size: 0x4000 */
  /* 0x4000 */ unsigned int m_freeEntriesList;
  /* 0x4004 */ unsigned long m_nextFreePageTable;
  /* 0x4008 */ unsigned int m_nextFreeEntry;
  /* 0x400c */ long Padding_1369;
  /* 0x4010 */ class PageAllocator* m_pageAllocator;
}; /* size: 0x4018 */

class PageAllocatorForSinglePartition
{
  /* 0x0000 */ long Padding_1370[337];
  /* 0x0544 */ unsigned long m_CPUId;
  /* 0x0548 */ class SOS_PartitionedHeap* m_Heap;
  /* 0x0550 */ class PageMap m_pageMap;
  /* 0x4568 */ class PageAllocator* m_pageAllocator;
  /* 0x4570 */ unsigned long m_status;
}; /* size: 0x4580 */

struct RemoteSessionListSLock
{
}; /* size: 0x0004 */

struct PartitionedHeapFreeListSLock
{
}; /* size: 0x0004 */

class SOS_PartitionedHeap
{
  union
  {
    /* 0x0000 */ const unsigned int MAX_PARTITIONS;
    struct
    {
      /* 0x0000 */ const unsigned int MAX_PARTITIONS_DEFAULT;
      /* 0x0004 */ enum SOS_PARTITIONEDHEAP m_HeapType;
      /* 0x0008 */ unsigned long m_NumberOfPartitions;
      /* 0x000c */ enum PARTITIONING_TYPE m_PartitioningType;
    }; /* size: 0x0010 */
    /* 0x0000 */ const unsigned __int64 UNRESTRICTED;
  }; /* size: 0x0010 */
  /* 0x0010 */ struct SOS_PartitionedHeap::Partition* m_partitions;
  /* 0x0018 */ class UnfairRecursiveMutexInternal<SuspendQueueSLock,0> m_mutex;
  /* 0x0050 */ class SOS_WaitInfo m_waitInfoObj;
  /* 0x0078 */ unsigned __int64 m_restrictedSize;
  /* 0x0080 */ class TSinglyLinkedList<void> m_restrictedFreeList;
  /* 0x0088 */ unsigned __int64 m_restrictedFreeListCount;
  /* 0x0090 */ unsigned __int64 m_restrictedFreeListMax;
  /* 0x0098 */ struct PartitionedHeapFreeListSLock m_restrictedFreeListLock;
}; /* size: 0x00a0 */

struct BitOrdinal<32768>
{
}; /* size: 0x0001 */

struct SOS_PartitionedHeap::Partition
{
  /* 0x0000 */ class IMemObj* m_memObj;
  /* 0x0008 */ class PageAllocatorForSinglePartition* m_pageAllocator;
}; /* size: 0x0010 */

class SOS_MemoryNodeEnum
{
}; /* size: 0x0028 */

class TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock>
{
  /* 0x0000 */ long Padding_1371[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class AutoSpinlockHolder<295,1,1>;

class XeSqlPkg::column_store_rowgroup_read_issued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1372[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int rowgroup_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int accessor_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class SOSHost_AutoRecursiveMutex
{
  /* 0x0000 */ class SOSHost_RecursiveMutex* m_pMutex;
  /* 0x0008 */ class SOSHost* m_pHost;
  /* 0x0010 */ unsigned long m_scopeCtr;
}; /* size: 0x0018 */

class SOSHost_RecursiveMutex
{
}; /* size: 0x00e8 */

struct SOS_DispatcherPoolStats
{
  /* 0x0000 */ enum DISPATCHERPOOL_TYPE m_id;
  /* 0x0004 */ unsigned int m_dispatchersCount;
  /* 0x0008 */ unsigned int m_idealDispatchers;
  /* 0x000c */ unsigned int m_timeoutMS;
  /* 0x0010 */ unsigned int m_fadingDispatchers;
  /* 0x0014 */ unsigned int m_queueSize;
  /* 0x0018 */ const wchar_t* const m_name;
}; /* size: 0x0020 */

class XeSqlPkg::query_rpc_close
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1373[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct _PSAPI_WS_WATCH_INFORMATION
{
  /* 0x0000 */ void* FaultingPc;
  /* 0x0008 */ void* FaultingVa;
} PSAPI_WS_WATCH_INFORMATION, *PPSAPI_WS_WATCH_INFORMATION; /* size: 0x0010 */

typedef struct _PSAPI_WS_WATCH_INFORMATION_EX
{
  /* 0x0000 */ struct _PSAPI_WS_WATCH_INFORMATION BasicInfo;
  /* 0x0010 */ unsigned __int64 FaultingThreadId;
  /* 0x0018 */ unsigned __int64 Flags;
} PSAPI_WS_WATCH_INFORMATION_EX, *PPSAPI_WS_WATCH_INFORMATION_EX; /* size: 0x0020 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,void *,SystemAffinity const &,SystemAffinity const &,NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class XeSqlPkg::column_store_object_pool_miss
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1374[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class TypeListNode<int *,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>,void,void *,SystemAffinity const &,SystemAffinity const &,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>
{
}; /* size: 0x0018 */

class TCallbackList<TCallback<void,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

class SOS_SchedulerEnum
{
}; /* size: 0x0028 */

struct XdesMgrSLock
{
}; /* size: 0x0004 */

class PerCPUData<SOS_MemoryWorkSpace::WSCpuPart>
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0010 */

struct LZ77_MTF_STATE_T
{
  /* 0x0000 */ __int64 m_iMtfLastPtr;
  /* 0x0008 */ __int64 m_iMtfOffset[4];
}; /* size: 0x0028 */

struct LZ77_IR_STATE_T
{
  /* 0x0000 */ unsigned char* m_pIrBuffer;
  /* 0x0008 */ unsigned __int64 m_uIrBufferSize;
  /* 0x0010 */ unsigned char* m_pIrPtr;
  /* 0x0018 */ const unsigned char* m_pIrSrc;
  /* 0x0020 */ struct LZ77_MTF_STATE_T m_Mtf;
}; /* size: 0x0048 */

class Spinlock<116,8,1>
{
}; /* size: 0x0004 */

class TCallbackListBase<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64> >
{
}; /* size: 0x0030 */

class AlignedSmallPageAllocator
{
  /* 0x0000 */ long Padding_1375[350];
  /* 0x0578 */ class UnfairRecursiveMutexInternal<SuspendQueueSLock,0> m_lock;
  /* 0x05b0 */ class SEList<AlignedSmallPageAllocator::PageInfo,16> m_pageLists[17];
  /* 0x06c0 */ unsigned int m_usedListMask;
  /* 0x06c4 */ unsigned int m_blocksOnPage;
}; /* size: 0x0700 */

class AutoSpinlockHolder<114,9,1>;

class XeSqlPkg::selective_xml_index_path_not_supported
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1376[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int xml_pathOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::sort_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1377[140];
      /* 0x0240 */ unsigned char m_buf[5];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int sort_warning_typeOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class CAutoRefc<SOS_Task>
{
  /* 0x0000 */ class SOS_Task* m_pt;
}; /* size: 0x0008 */

class SOS_DispatcherBase
{
  /* 0x0000 */ long Padding_1378[10];
  /* 0x0028 */ unsigned __int64 m_itemsProcessed;
  /* 0x0030 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_timeProcessingStarted;
  /* 0x0038 */ class SchedulerMonitor::Track m_track;
  /* 0x01d8 */ class IMemObj* m_pmo;
  /* 0x01e0 */ class CAutoRefc<SOS_Task> m_pTask;
}; /* size: 0x01e8 */

class Spinlock<103,10,1>
{
}; /* size: 0x0004 */

struct XE_TArray<XEAction *,10>
{
  /* 0x0000 */ struct XEAction* m_array[10];
}; /* size: 0x0050 */

struct XE_TArray<XEPredicateCompare *,63>
{
  /* 0x0000 */ struct XEPredicateCompare* m_array[63];
}; /* size: 0x01f8 */

class Spinlock<247,1,1>
{
}; /* size: 0x0004 */

class ExternalCache
{
  /* 0x0000 */ long Padding_1379[10];
  /* 0x0028 */ unsigned __int64 m_MaxEntrySize;
}; /* size: 0x0030 */

class SpinlockHolder<210,2,1>;

class TList<ExternalCacheList,ExternalCache,8,TListSLock>
{
  /* 0x0000 */ long Padding_1380[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class AutoSpinlockHolder<84,13,1>;

struct XE_TObjects<XEPredicateCompare,63>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEPredicateCompare *,63> m_objectPtrs;
}; /* size: 0x0208 */

class TAutoMutex<UnfairRecursiveMutexInternal<PaddedSpinlock<SuspendQueueSLock>,0>,4294967295>;

class SEListEnum<FreePageElem,0>;

class TListElem<TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock> >
{
  /* 0x0000 */ long Padding_1381[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1382;
  /* 0x0018 */ class CacheClockAlgorithm* m_pList;
}; /* size: 0x0020 */

class TAutoMutex<UnfairRecursiveMutexInternal<SuspendQueueSLock,1>,4294967295>;

class SEListEnum<MemoryNode,0>;

class AutoSpinlockHolder<277,1,1>;

class SOS_CacheStoreEntriesEnum
{
}; /* size: 0x0028 */

class Spinlock<3,19,1>
{
}; /* size: 0x0004 */

class TCallbackListBase<TCallback<void,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

class AutoSpinlockHolder<315,1,1>;

class TraceLine
{
  /* 0x0000 */ enum TraceLine::OutputType m_type;
  /* 0x0004 */ int m_length;
  /* 0x0008 */ wchar_t m_buffer[2048];
}; /* size: 0x1008 */

class SOS_CallResult<unsigned long>
{
}; /* size: 0x000c */

class IfNullTypeZeroElseOne<SOS_Node *>
{
}; /* size: 0x0001 */

class AutoCallPrePostNode<TypeListNode<ExtIntCodeProtector<1>,NullType> >
{
}; /* size: 0x0008 */

class SOSClient_MemoryNotificationCallback
{
}; /* size: 0x0008 */

class CAutoBase<XEPackage0::RingTarget::PackageEntry>
{
  /* 0x0000 */ class XEPackage0::RingTarget::PackageEntry* m_pt;
}; /* size: 0x0008 */

class XeSqlPkg::hadr_filestream_message_file_request
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1383[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int root_idOffset;
    /* 0x0000 */ const int eol_requestedOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class TEnumerator<TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock> >
{
  /* 0x0000 */ class ClockInfo* m_currentObject;
  /* 0x0008 */ class ClockInfo* m_lastObjectSeen;
  /* 0x0010 */ class TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

struct LastSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<24,19,1>;

class TList<CacheClockAlgorithm,ClockInfo,64,CacheStoreClockSLock>
{
  /* 0x0000 */ long Padding_1384[4];
  /* 0x0010 */ struct CacheStoreClockSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

struct std::_Arithmetic_traits<unsigned short>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class CAutoBase<double>
{
  /* 0x0000 */ double* m_pt;
}; /* size: 0x0008 */

class Spinlock<265,1,1>
{
}; /* size: 0x0004 */

struct BitManipTraits<unsigned __int64,0>
{
}; /* size: 0x0001 */

class SOS_UnfairRecursiveMutexExtendedGuarantee
{
  /* 0x0000 */ struct SuspendQueueSLock m_Lock;
  /* 0x0004 */ long Padding_1385;
  /* 0x0008 */ class SOSQueue<Worker,0> m_WaitingWorkers;
  /* 0x0018 */ class Worker* volatile m_pOwner;
  /* 0x0020 */ class SOS_Task* m_pOwningTaskNoRef;
  /* 0x0028 */ class SOS_Scheduler* m_ownerScheduler;
  /* 0x0030 */ __int64 m_cRecursion;
}; /* size: 0x0038 */

class XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int m_LogMaxRollover;
      /* 0x0004 */ long Padding_1386;
      /* 0x0008 */ unsigned __int64 m_LogMaxSizeInBytes;
      /* 0x0010 */ unsigned __int64 m_LogGrowthSizeInBytes;
    }; /* size: 0x0014 */
    /* 0x0000 */ const unsigned int BYTES_PER_MBYTES;
  }; /* size: 0x0014 */
  /* 0x0014 */ long Padding_1387;
  /* 0x0018 */ class XE_AutoP<XE_LogSpecs> m_logs;
  /* 0x0020 */ class XE_ILogWriteMessageHandler* m_msgHandler;
}; /* size: 0x0028 */

class XE_AutoRg<XE_AutoP<XE_Log> >
{
}; /* size: 0x0008 */

class XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker>
{
  union
  {
    /* 0x0000 */ const unsigned int BYTES_PER_KBYTES;
    /* 0x0000 */ const unsigned int BYTES_PER_MBYTES;
    /* 0x0000 */ const unsigned int DEFAULT_BUFFER_SIZE_KB;
    /* 0x0000 */ const unsigned int MAX_WRITE_SIZE;
    /* 0x0000 */ const unsigned int MIN_WRITE_SIZE;
    /* 0x0000 */ const unsigned int WRITE_ALIGNMENT;
    /* 0x0000 */ const unsigned int DEFAULT_BUFFER_TIMEOUT_MS;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1388;
  /* 0x0008 */ unsigned int m_Alignment;
  /* 0x000c */ long Padding_1389;
  /* 0x0010 */ class XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion> m_logPolicy;
  /* 0x0038 */ class XE_AutoRg<XE_AutoP<XE_Log> > m_logs;
  /* 0x0040 */ class XE_ILogWriteMessageHandler* m_msgHandler;
  /* 0x0048 */ class XE_MetadataTracker* m_metadataSource;
  /* 0x0050 */ unsigned int m_maxWriteSize;
  /* 0x0054 */ unsigned int m_partialBufferSize;
  /* 0x0058 */ unsigned __int64 m_partialBufferStartOffset;
}; /* size: 0x0060 */

class XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> >
{
  /* 0x0000 */ class XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> m_encoder;
  /* 0x0060 */ class XE_MetadataTracker* m_pMetadataSource;
}; /* size: 0x0068 */

class AssertSingleTaskAccess
{
  /* 0x0000 */ class Worker** m_ppLockOwner;
  /* 0x0008 */ int m_isOwnerSet;
  /* 0x000c */ int m_isReader;
}; /* size: 0x0010 */

typedef struct _ALPC_PORT_ATTRIBUTES
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ struct _SECURITY_QUALITY_OF_SERVICE SecurityQos;
  /* 0x0010 */ unsigned __int64 MaxMessageLength;
  /* 0x0018 */ unsigned __int64 MemoryBandwidth;
  /* 0x0020 */ unsigned __int64 MaxPoolUsage;
  /* 0x0028 */ unsigned __int64 MaxSectionSize;
  /* 0x0030 */ unsigned __int64 MaxViewSize;
  /* 0x0038 */ unsigned __int64 MaxTotalSectionSize;
  /* 0x0040 */ unsigned long DupObjectTypes;
  /* 0x0044 */ unsigned long Reserved;
} ALPC_PORT_ATTRIBUTES, *PALPC_PORT_ATTRIBUTES; /* size: 0x0048 */

class CAutoP<XEPackage0::XE_FileTarget>
{
}; /* size: 0x0008 */

struct XEPackage0::ActivityIdXferAction
{
}; /* size: 0x0001 */

class SOSListElem
{
}; /* size: 0x0010 */

struct std::is_error_code_enum<unsigned char const *>
{
}; /* size: 0x0001 */

struct XE_TEvent<4,1,24>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,24> m_dynamicAttr;
  /* 0x0498 */ struct XEEvent m_event;
}; /* size: 0x04e0 */

class SpinlockHolder<265,1,1>;

class RefCountImpl<ISOSHost_MemObjImpl>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class CAutoBase<XEPackage0::XE_FileTarget>
{
  /* 0x0000 */ class XEPackage0::XE_FileTarget* m_pt;
}; /* size: 0x0008 */

typedef struct _TRUSTEE_ACCESSW
{
  /* 0x0000 */ wchar_t* lpProperty;
  /* 0x0008 */ unsigned long Access;
  /* 0x000c */ unsigned long fAccessFlags;
  /* 0x0010 */ unsigned long fReturnedAccess;
  /* 0x0014 */ long __PADDING__[1];
} TRUSTEE_ACCESSW, *PTRUSTEE_ACCESSW; /* size: 0x0018 */

class ETWSessionController
{
  /* 0x0000 */ struct _EVENT_TRACE_PROPERTIES m_properties;
  /* 0x0078 */ wchar_t m_sessionName[1024];
  /* 0x0878 */ wchar_t m_logFileName[261];
}; /* size: 0x0a88 */

class AutoSpinlockHolder<252,1,1>
{
}; /* size: 0x0010 */

class Spinlock<158,3,1>
{
}; /* size: 0x0004 */

struct TestTeamTastasSLock
{
}; /* size: 0x0004 */

class TAutoMutex<SOS_Mutex,1>
{
  /* 0x0000 */ class SOS_Mutex* m_pMutex;
  /* 0x0008 */ unsigned long m_scopeCtr;
}; /* size: 0x0010 */

struct ISOSHost_Mutex_Prev0
{
}; /* size: 0x0008 */

class SpinlockHolder<252,1,1>
{
  /* 0x0000 */ class Spinlock<252,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >
{
}; /* size: 0x0001 */

class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

typedef struct _INVERTED_FUNCTION_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ struct _RUNTIME_FUNCTION* FunctionTable;
    /* 0x0000 */ struct _DYNAMIC_FUNCTION_TABLE* DynamicTable;
  }; /* size: 0x0008 */
  /* 0x0008 */ void* ImageBase;
  /* 0x0010 */ unsigned long SizeOfImage;
  /* 0x0014 */ unsigned long SizeOfTable;
} INVERTED_FUNCTION_TABLE_ENTRY, *PINVERTED_FUNCTION_TABLE_ENTRY; /* size: 0x0018 */

class XE_Aggregator<1>
{
}; /* size: 0x0001 */

class SOS_DDRecursiveMutex
{
  /* 0x0000 */ class SOS_RecursiveMutex m_mutex;
  /* 0x0040 */ struct BlockerEnumSLock* m_pLock;
}; /* size: 0x0048 */

class CAutoBase<XEPackage0::EventTraceQueryProperties>
{
  /* 0x0000 */ struct XEPackage0::EventTraceQueryProperties* m_pt;
}; /* size: 0x0008 */

class SOS_MemoryNodeOOMRingRecord
{
  /* 0x0000 */ long Padding_1390[34];
  /* 0x0088 */ enum MemoryNode::FAILURES m_Failure;
  /* 0x008c */ long Padding_1391;
  /* 0x0090 */ unsigned __int64 m_Resources;
  /* 0x0098 */ class SOS_Task* m_Task;
  /* 0x00a0 */ unsigned long m_PoolMetadataID;
  /* 0x00a4 */ unsigned long m_LastError;
  /* 0x00a8 */ enum OomFactor m_OomFactor;
}; /* size: 0x00b0 */

class CAutoBase<XEPackage0::BucketizingTarget>
{
  /* 0x0000 */ class XEPackage0::BucketizingTarget* m_pt;
}; /* size: 0x0008 */

struct WPRSLock
{
}; /* size: 0x0004 */

class CAutoBase<XEPackage0::BucketizingTarget::Entry *>
{
  /* 0x0000 */ class XEPackage0::BucketizingTarget::Entry** m_pt;
}; /* size: 0x0008 */

class XE_Xml<XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >
{
  union
  {
    /* 0x0000 */ const unsigned int STACK_STREAM_BUFFER;
    /* 0x0000 */ const unsigned int MIN_CDATA_INVALID_STRING;
    /* 0x0000 */ const class XE_LiveSessionMetadata* m_metadata;
  }; /* size: 0x0008 */
  /* 0x0008 */ enum XE_XmlOptions m_opts;
  /* 0x000c */ long Padding_1392;
  /* 0x0010 */ const class XE_StandardFormatter m_formatter;
  /* 0x01d0 */ class XE_ParserFactory<XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> > m_parserFactory;
  /* 0x0200 */ void* m_pfnSymbolizeCallstack /* function */;
  /* 0x0208 */ struct _TIME_ZONE_INFORMATION* m_timeZoneInfo;
  /* 0x0210 */ class XE_AutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> > m_objectCache;
}; /* size: 0x0218 */

struct $_TypeDescriptor$_extraBytes_27
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[27];
}; /* size: 0x002b */

typedef struct _FILE_IS_REMOTE_DEVICE_INFORMATION
{
  /* 0x0000 */ unsigned char IsRemote;
} FILE_IS_REMOTE_DEVICE_INFORMATION, *PFILE_IS_REMOTE_DEVICE_INFORMATION; /* size: 0x0001 */

struct $_s__CatchableTypeArray$_extraBytes_16
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s__CatchableType* arrayOfCatchableTypes[2];
}; /* size: 0x0014 */

class Spinlock<238,1,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<91,11,1>;

typedef struct _RTL_UNLOAD_EVENT_TRACE32
{
  /* 0x0000 */ unsigned long BaseAddress;
  /* 0x0004 */ unsigned long SizeOfImage;
  /* 0x0008 */ unsigned long Sequence;
  /* 0x000c */ unsigned long TimeDateStamp;
  /* 0x0010 */ unsigned long CheckSum;
  /* 0x0014 */ wchar_t ImageName[32];
  /* 0x0054 */ unsigned long Version[2];
} RTL_UNLOAD_EVENT_TRACE32, *PRTL_UNLOAD_EVENT_TRACE32; /* size: 0x005c */

struct std::tr1::_Cat_base<0>
{
}; /* size: 0x0001 */

struct ArmedWaypoint
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ struct eXcursionEntry* m_pTrackerRootScope;
  /* 0x0018 */ unsigned long m_trackerPosition;
  /* 0x001c */ unsigned long m_pointPosition;
  /* 0x0020 */ struct eXcursionEntry* m_pEntryToVerify;
  /* 0x0028 */ enum eXcursionAction m_action;
  /* 0x002c */ unsigned long m_actionArg;
}; /* size: 0x0030 */

struct std::tr1::_Remove_reference<void * (__cdecl*&)(unsigned __int64)>
{
}; /* size: 0x0001 */

struct eXcursionEntry
{
  /* 0x0000 */ class SEListElem m_linkList;
  /* 0x0010 */ class SEListElem m_stackingList;
  /* 0x0020 */ const char* m_pComponent;
  /* 0x0028 */ const char* m_pName;
  /* 0x0030 */ unsigned long m_IsPointWhereTrackingModeChanged;
  /* 0x0034 */ enum eXcursionEntryType m_entryType;
  /* 0x0038 */ BOOL m_wasIgnored;
  /* 0x0039 */ char Padding_1393[3];
  /* 0x003c */ enum eXcursionAction m_actionTaken;
}; /* size: 0x0040 */

class XeDvmPkg::dvm_agent_work_item_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1394[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class MemObjProxyLinkList
{
}; /* size: 0x0018 */

class XE_IStream
{
}; /* size: 0x0008 */

class StreamCDATAReader<char,XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >
{
  /* 0x0000 */ const class XE_Xml<XE_LiveSessionMetadata,XE_StandardFormatter,XE_SerializedEvent<XE_LiveSessionMetadata,XE_VersionConfig> >* m_pXml;
  /* 0x0008 */ class XStringXmlBuilder& m_sbuf;
  /* 0x0010 */ unsigned char m_buffer[5120];
  /* 0x1410 */ int m_firstRead;
}; /* size: 0x1418 */

class Spinlock<170,3,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<109,9,1>;

class Spinlock<305,1,1>
{
}; /* size: 0x0004 */

class XE_AutoP<XEPackage0::PairingTarget>
{
}; /* size: 0x0008 */

class SEListEnum<XEPackage0::SourceAction,0>
{
  /* 0x0000 */ class SEList<XEPackage0::SourceAction,0>* m_pList;
  /* 0x0008 */ struct XEPackage0::SourceAction* m_pNext;
}; /* size: 0x0010 */

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_1395;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0020 */

class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ long Padding_1396[2];
  /* 0x0008 */ class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0> m_enumerators;
  /* 0x0028 */ struct TListSLock m_lock;
}; /* size: 0x0030 */

struct SOS_RWLock::RWLockWaiter
{
  /* 0x0000 */ class SOSListElem m_link;
  /* 0x0010 */ enum RWLockMode m_mode;
  /* 0x0014 */ int m_acquired;
  /* 0x0018 */ class EventAutoInternal<SuspendQueueSLock> m_event;
}; /* size: 0x0040 */

class SEListEnum<SOS_RWLock::RWLockWaiter,0>;

struct GlobalSchedulerListSLock
{
}; /* size: 0x0004 */

class RefCountImpl<PageAllocatorForSinglePartition>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class SpinlockHolder<257,1,1>;

class TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>
{
}; /* size: 0x0018 */

class SOS_SharedMemory
{
  /* 0x0000 */ int m_AlreadyExisted;
  /* 0x0004 */ long Padding_1397;
  /* 0x0008 */ void* const m_hMap;
  /* 0x0010 */ const unsigned long m_protectionFlags;
  /* 0x0014 */ long Padding_1398;
  /* 0x0018 */ class MemoryClerkInternal* const m_pMMC;
}; /* size: 0x0020 */

class XE_AutoP<XE_XMLObjectString>
{
}; /* size: 0x0008 */

class AutoRaiseDeadlockPriority;

typedef struct _SERVER_INFO_1547
{
  /* 0x0000 */ unsigned long sv1547_alertschedule;
} SERVER_INFO_1547, *PSERVER_INFO_1547; /* size: 0x0004 */

class SOS_Task::AutoSwitchPreemptive
{
}; /* size: 0x0060 */

class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class CAutoP<XEPackage0::OrphanEntry>
{
}; /* size: 0x0008 */

struct ActiveDescriptorSLock
{
}; /* size: 0x0004 */

class Spinlock<137,4,1>
{
}; /* size: 0x0004 */

class Spinlock<237,1,1>
{
}; /* size: 0x0004 */

class UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >::Elem
{
}; /* size: 0x0010 */

class XE_AutoP<XEPackage0::RingTarget>
{
}; /* size: 0x0008 */

class CAutoP<XEPackage0::CounterTarget>
{
}; /* size: 0x0008 */

class CMemProc
{
  /* 0x0000 */ const unsigned long xsm_cbMaxSizeFitsOnPage;
  /* 0x0004 */ long Padding_1399[13];
  /* 0x0038 */ class CIncPageMgr m_ipmIncrementalPages;
}; /* size: 0x0088 */

class Spinlock<86,13,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_VERIFIER_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long Level;
  /* 0x0008 */ struct _UNICODE_STRING DriverName;
  /* 0x0018 */ unsigned long RaiseIrqls;
  /* 0x001c */ unsigned long AcquireSpinLocks;
  /* 0x0020 */ unsigned long SynchronizeExecutions;
  /* 0x0024 */ unsigned long AllocationsAttempted;
  /* 0x0028 */ unsigned long AllocationsSucceeded;
  /* 0x002c */ unsigned long AllocationsSucceededSpecialPool;
  /* 0x0030 */ unsigned long AllocationsWithNoTag;
  /* 0x0034 */ unsigned long TrimRequests;
  /* 0x0038 */ unsigned long Trims;
  /* 0x003c */ unsigned long AllocationsFailed;
  /* 0x0040 */ unsigned long AllocationsFailedDeliberately;
  /* 0x0044 */ unsigned long Loads;
  /* 0x0048 */ unsigned long Unloads;
  /* 0x004c */ unsigned long UnTrackedPool;
  /* 0x0050 */ unsigned long CurrentPagedPoolAllocations;
  /* 0x0054 */ unsigned long CurrentNonPagedPoolAllocations;
  /* 0x0058 */ unsigned long PeakPagedPoolAllocations;
  /* 0x005c */ unsigned long PeakNonPagedPoolAllocations;
  /* 0x0060 */ unsigned __int64 PagedPoolUsageInBytes;
  /* 0x0068 */ unsigned __int64 NonPagedPoolUsageInBytes;
  /* 0x0070 */ unsigned __int64 PeakPagedPoolUsageInBytes;
  /* 0x0078 */ unsigned __int64 PeakNonPagedPoolUsageInBytes;
} SYSTEM_VERIFIER_INFORMATION, *PSYSTEM_VERIFIER_INFORMATION; /* size: 0x0080 */

typedef struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION
{
  /* 0x0000 */ struct _SYSTEM_VERIFIER_INFORMATION Legacy;
  /* 0x0080 */ unsigned long RaiseIrqls;
  /* 0x0084 */ unsigned long AcquireSpinLocks;
  /* 0x0088 */ unsigned long SynchronizeExecutions;
  /* 0x008c */ unsigned long AllocationsWithNoTag;
  /* 0x0090 */ unsigned long AllocationsFailed;
  /* 0x0094 */ unsigned long AllocationsFailedDeliberately;
  /* 0x0098 */ unsigned __int64 LockedBytes;
  /* 0x00a0 */ unsigned __int64 PeakLockedBytes;
  /* 0x00a8 */ unsigned __int64 MappedLockedBytes;
  /* 0x00b0 */ unsigned __int64 PeakMappedLockedBytes;
  /* 0x00b8 */ unsigned __int64 MappedIoSpaceBytes;
  /* 0x00c0 */ unsigned __int64 PeakMappedIoSpaceBytes;
  /* 0x00c8 */ unsigned __int64 PagesForMdlBytes;
  /* 0x00d0 */ unsigned __int64 PeakPagesForMdlBytes;
  /* 0x00d8 */ unsigned __int64 ContiguousMemoryBytes;
  /* 0x00e0 */ unsigned __int64 PeakContiguousMemoryBytes;
} SYSTEM_VERIFIER_COUNTERS_INFORMATION, *PSYSTEM_VERIFIER_COUNTERS_INFORMATION; /* size: 0x00e8 */

class AutoSpinlockHolder<251,1,1>
{
}; /* size: 0x0010 */

class PageAllocator::PageIdStruct
{
  /* 0x0000 */ unsigned int m_pageId;
}; /* size: 0x0004 */

class SpinlockHolder<249,1,1>
{
  /* 0x0000 */ class Spinlock<249,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionWithActive
{
}; /* size: 0x00c0 */

class std::basic_filebuf<unsigned short,std::char_traits<unsigned short> >;

class TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>
{
}; /* size: 0x0020 */

class SEList<IORGHashTableEntry,248>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class Spinlock<154,3,1>
{
}; /* size: 0x0004 */

class ISOSHost_CacheStoreImpl
{
}; /* size: 0x0b80 */

class SEListEnum<ContextUMSProxy,16>;

struct DatasetFreeListSLock
{
}; /* size: 0x0004 */

struct $_TypeDescriptor$_extraBytes_24
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[24];
}; /* size: 0x0028 */

struct XE_LogBufferHeader_v0
{
  /* 0x0000 */ unsigned short m_logVersion;
  /* 0x0002 */ char Padding_1400[2];
  /* 0x0004 */ unsigned int m_paddedLengthInBytes;
  /* 0x0008 */ unsigned short m_headerOffsetInBytes;
  /* 0x000a */ unsigned short m_dataOffsetInBytes;
  /* 0x000c */ unsigned int m_dataLengthInBytes;
}; /* size: 0x0010 */

class CPageInfo
{
  /* 0x0000 */ long Padding_1401;
  /* 0x0004 */ unsigned short m_ptType;
  /* 0x0006 */ unsigned char m_allocatorType;
  /* 0x0007 */ char Padding_1402;
  /* 0x0008 */ class IMemObj* m_pmoOwner;
}; /* size: 0x0010 */

class PerCPUDataBase<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition>
{
}; /* size: 0x0010 */

class PerCPUDataBase<DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition>::Enum;

class SEListEnum<XListEnumerator<ProbCostData>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<ProbCostData>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<ProbCostData>* m_pNext;
}; /* size: 0x0010 */

class CAutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> >
{
}; /* size: 0x0008 */

struct std::_Arithmetic_traits<unsigned __int64>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _CLUS_STORAGE_SET_DRIVELETTER
{
  /* 0x0000 */ unsigned long PartitionNumber;
  /* 0x0004 */ unsigned long DriveLetterMask;
} CLUS_STORAGE_SET_DRIVELETTER, *PCLUS_STORAGE_SET_DRIVELETTER; /* size: 0x0008 */

class XListEnumerator<ProbCostData>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class ProbCostData* m_currentObject;
  /* 0x0018 */ class ProbCostData* m_baseObject;
  /* 0x0020 */ class XList<ProbCostData>* m_pList;
}; /* size: 0x0028 */

class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,1>,2>
{
  /* 0x0000 */ wchar_t m_buffer[1024];
  /* 0x0800 */ const wchar_t* m_comperand;
  /* 0x0808 */ unsigned int m_cbCompRemaining;
  /* 0x080c */ int m_result;
}; /* size: 0x0810 */

class TCallbackListBase<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType> >
{
}; /* size: 0x0030 */

class XTListEnumerator<ProbCostData>
{
}; /* size: 0x0028 */

struct std::_Facetptr<std::numpunct<unsigned short> >
{
  /* 0x0000 */ const class std::locale::facet* _Psave;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class ISOSHost_RWLockImpl
{
}; /* size: 0x0040 */

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_1403;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0020 */

class SpinlockHolder<88,12,1>;

class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ long Padding_1404[2];
  /* 0x0008 */ class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0> m_enumerators;
  /* 0x0028 */ struct TListSLock m_lock;
}; /* size: 0x0030 */

struct std::is_error_code_enum<unsigned char>
{
}; /* size: 0x0001 */

class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,2>,0>
{
  /* 0x0000 */ wchar_t m_buffer[1024];
  /* 0x0800 */ const wchar_t* m_comperand;
  /* 0x0808 */ unsigned int m_cbCompRemaining;
  /* 0x080c */ int m_result;
}; /* size: 0x0810 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>
{
  /* 0x0000 */ long Padding_1405[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class SEHashTable<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>
{
  /* 0x0000 */ class SEList<XEPackage0::OrphanEntry,0>* m_buckets;
  /* 0x0008 */ unsigned int m_bucketCount;
  /* 0x000c */ unsigned int m_mask;
  /* 0x0010 */ unsigned int m_entryCount;
  /* 0x0014 */ long Padding_1406;
  /* 0x0018 */ class XE_BaseAllocator m_allocator;
}; /* size: 0x0020 */

class XEPackage0::OrphanTempManager
{
  union
  {
    /* 0x0000 */ const unsigned int ORPHANS_TEMP_BUCKETS;
    /* 0x0000 */ class SEHashTable<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator> m_orphans;
  }; /* size: 0x0020 */
  /* 0x0020 */ class XEPackage0::OrphanTempStorage* m_pStorage;
}; /* size: 0x0028 */

class CAutoRg<XE_AutoP<XE_Log> >
{
}; /* size: 0x0008 */

class std::basic_filebuf<char,std::char_traits<char> >;

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class XE_StreamCompare<unsigned short,XEPackage0::StringCompare<unsigned short,2>,2>
{
  /* 0x0000 */ wchar_t m_buffer[1024];
  /* 0x0800 */ const wchar_t* m_comperand;
  /* 0x0808 */ unsigned int m_cbCompRemaining;
  /* 0x080c */ int m_result;
}; /* size: 0x0810 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class TEnumerator<TList<SOS_Node,SystemThread,160,TListSLock> >
{
  /* 0x0000 */ class SystemThread* m_currentObject;
  /* 0x0008 */ class SystemThread* m_lastObjectSeen;
  /* 0x0010 */ class TList<SOS_Node,SystemThread,160,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

struct std::is_error_code_enum<char>
{
}; /* size: 0x0001 */

typedef struct _IO_RESOURCE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char Option;
  /* 0x0001 */ unsigned char Type;
  /* 0x0002 */ unsigned char ShareDisposition;
  /* 0x0003 */ unsigned char Spare1;
  /* 0x0004 */ unsigned short Flags;
  /* 0x0006 */ unsigned short Spare2;
  union
  {
    union
    {
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Port;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory;
      struct
      {
        /* 0x0008 */ unsigned long MinimumVector;
        /* 0x000c */ unsigned long MaximumVector;
        /* 0x0010 */ enum _IRQ_DEVICE_POLICY AffinityPolicy;
        /* 0x0014 */ enum _IRQ_PRIORITY PriorityPolicy;
        /* 0x0018 */ unsigned __int64 TargetedProcessors;
      } /* size: 0x0018 */ Interrupt;
      struct
      {
        /* 0x0008 */ unsigned long MinimumChannel;
        /* 0x000c */ unsigned long MaximumChannel;
      } /* size: 0x0008 */ Dma;
      struct
      {
        /* 0x0008 */ unsigned long RequestLine;
        /* 0x000c */ unsigned long Reserved;
        /* 0x0010 */ unsigned long Channel;
        /* 0x0014 */ unsigned long TransferWidth;
      } /* size: 0x0010 */ DmaV3;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long Alignment;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Generic;
      struct
      {
        /* 0x0008 */ unsigned long Data[3];
      } /* size: 0x000c */ DevicePrivate;
      struct
      {
        /* 0x0008 */ unsigned long Length;
        /* 0x000c */ unsigned long MinBusNumber;
        /* 0x0010 */ unsigned long MaxBusNumber;
        /* 0x0014 */ unsigned long Reserved;
      } /* size: 0x0010 */ BusNumber;
      struct
      {
        /* 0x0008 */ unsigned long Priority;
        /* 0x000c */ unsigned long Reserved1;
        /* 0x0010 */ unsigned long Reserved2;
      } /* size: 0x000c */ ConfigData;
      struct
      {
        /* 0x0008 */ unsigned long Length40;
        /* 0x000c */ unsigned long Alignment40;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory40;
      struct
      {
        /* 0x0008 */ unsigned long Length48;
        /* 0x000c */ unsigned long Alignment48;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory48;
      struct
      {
        /* 0x0008 */ unsigned long Length64;
        /* 0x000c */ unsigned long Alignment64;
        /* 0x0010 */ union _LARGE_INTEGER MinimumAddress;
        /* 0x0018 */ union _LARGE_INTEGER MaximumAddress;
      } /* size: 0x0018 */ Memory64;
      struct
      {
        /* 0x0008 */ unsigned char Class;
        /* 0x0009 */ unsigned char Type;
        /* 0x000a */ unsigned char Reserved1;
        /* 0x000b */ unsigned char Reserved2;
        /* 0x000c */ unsigned long IdLowPart;
        /* 0x0010 */ unsigned long IdHighPart;
      } /* size: 0x000c */ Connection;
    }; /* size: 0x0018 */
  } /* size: 0x0018 */ u;
} IO_RESOURCE_DESCRIPTOR, *PIO_RESOURCE_DESCRIPTOR; /* size: 0x0020 */

class TList<SOS_Node,SystemThread,160,TListSLock>
{
  /* 0x0000 */ long Padding_1407[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class TCallbackBaseWithParam<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>
{
  /* 0x0000 */ long Padding_1408[6];
  /* 0x0018 */ void* m_pv;
}; /* size: 0x0020 */

struct XEPackage0::StreamPartition
{
  /* 0x0000 */ unsigned __int64 m_eventSequenceId;
  /* 0x0008 */ class XE_CXFileWriter* m_pEventStream;
  /* 0x0010 */ unsigned long m_quickLock;
  /* 0x0014 */ long Padding_1409;
  /* 0x0018 */ void* m_lock;
}; /* size: 0x0020 */

class SOS_MemoryBrokerRingRecord
{
  /* 0x0000 */ long Padding_1410[4];
  /* 0x0010 */ __int64 m_MemoryRatio;
  /* 0x0018 */ __int64 m_Previous;
  /* 0x0020 */ __int64 m_TargetAllocations;
  /* 0x0028 */ __int64 m_Rate;
  /* 0x0030 */ __int64 m_Allocations;
  /* 0x0038 */ __int64 m_Predicted;
  /* 0x0040 */ __int64 m_Overall;
  /* 0x0048 */ unsigned long m_PoolMetadataID;
  /* 0x004c */ enum MemoryBrokerType m_Type;
  /* 0x0050 */ enum SOS_MemoryBroker::NOTIFICATION m_LastNotification;
  /* 0x0054 */ unsigned long m_DeltaTime;
  /* 0x0000 */ const wchar_t** sm_ActionNames /* zero-length array */;
}; /* size: 0x0058 */

class XE_ISerializedEvent<XE_LiveSessionMetadata>
{
}; /* size: 0x0008 */

struct SQLMRRow
{
  /* 0x0000 */ const wchar_t* rDescription;
  /* 0x0008 */ __int64 rValue;
}; /* size: 0x0010 */

class AutoSpinlockHolder<64,16,1>;

class TEnumerator<TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock> >
{
  /* 0x0000 */ class SOS_Scheduler* m_currentObject;
  /* 0x0008 */ class SOS_Scheduler* m_lastObjectSeen;
  /* 0x0010 */ class TList<SchedulerManagerList,SOS_Scheduler,8,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

typedef union _MCI_ADDR
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned long Address;
      /* 0x0004 */ unsigned long Reserved;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 QuadPart;
  }; /* size: 0x0008 */
} MCI_ADDR, *PMCI_ADDR; /* size: 0x0008 */

typedef struct _MCA_EXCEPTION
{
  /* 0x0000 */ unsigned long VersionNumber;
  /* 0x0004 */ enum MCA_EXCEPTION_TYPE ExceptionType;
  /* 0x0008 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0010 */ unsigned long ProcessorNumber;
  /* 0x0014 */ unsigned long Reserved1;
  union
  {
    union
    {
      struct
      {
        /* 0x0018 */ unsigned char BankNumber;
        /* 0x0019 */ unsigned char Reserved2[7];
        /* 0x0020 */ union _MCI_STATS Status;
        /* 0x0028 */ union _MCI_ADDR Address;
        /* 0x0030 */ unsigned __int64 Misc;
      } /* size: 0x0020 */ Mca;
      struct
      {
        /* 0x0018 */ unsigned __int64 Address;
        /* 0x0020 */ unsigned __int64 Type;
      } /* size: 0x0010 */ Mce;
    }; /* size: 0x0020 */
  } /* size: 0x0020 */ u;
  /* 0x0038 */ unsigned long ExtCnt;
  /* 0x003c */ unsigned long Reserved3;
  /* 0x0040 */ unsigned __int64 ExtReg[24];
} MCA_EXCEPTION, *PMCA_EXCEPTION; /* size: 0x0100 */

struct FsAgentSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_wsfc_rollback_ag_listener_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1411[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int listener_idOffset;
    /* 0x0000 */ const int dns_nameOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class SpinlockHolder<36,19,1>;

struct XEPackage0::GetLastErrorPredicateSource
{
}; /* size: 0x0001 */

class SEListEnum<ExternalCache,8>;

class XEPackage0::StringCompare<unsigned short,2>
{
}; /* size: 0x0001 */

class XeSqlPkg::hadr_undo_of_redo_log_scan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1412[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int Log_RemainingOffset;
    /* 0x0000 */ const int Total_LogOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class SEListSizedSLock<SOS_Scheduler,3224,GlobalSchedulerListSLock>
{
  /* 0x0000 */ long Padding_1413[6];
  /* 0x0018 */ struct GlobalSchedulerListSLock m_lock;
}; /* size: 0x0020 */

struct XEPackage0::CallStackAction
{
  /* 0x0000 */ const unsigned long FRAMES_TO_CAPTURE;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct XEPackage0::CollectFileTimeAction
{
}; /* size: 0x0001 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem
{
  /* 0x0000 */ long Padding_1414[8];
  /* 0x0020 */ class SOSCallbackEvent* volatile m_pNoUsersEvent;
}; /* size: 0x0028 */

struct std::tr1::_Is_integral<unsigned short>
{
}; /* size: 0x0001 */

struct SOSHost_VersionInfo
{
  /* 0x0000 */ unsigned long m_version;
  /* 0x0004 */ long Padding_1415;
  /* 0x0008 */ unsigned __int64 m_hostCapabilities;
  /* 0x0010 */ unsigned __int64 m_memObjCapabilites;
}; /* size: 0x0018 */

typedef struct _NET_VALIDATE_PERSISTED_FIELDS
{
  /* 0x0000 */ unsigned long PresentFields;
  /* 0x0004 */ struct _FILETIME PasswordLastSet;
  /* 0x000c */ struct _FILETIME BadPasswordTime;
  /* 0x0014 */ struct _FILETIME LockoutTime;
  /* 0x001c */ unsigned long BadPasswordCount;
  /* 0x0020 */ unsigned long PasswordHistoryLength;
  /* 0x0024 */ long Padding_1416;
  /* 0x0028 */ struct _NET_VALIDATE_PASSWORD_HASH* PasswordHistory;
} NET_VALIDATE_PERSISTED_FIELDS, *PNET_VALIDATE_PERSISTED_FIELDS; /* size: 0x0030 */

typedef struct _NET_VALIDATE_AUTHENTICATION_INPUT_ARG
{
  /* 0x0000 */ struct _NET_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
  /* 0x0030 */ unsigned char PasswordMatched;
  /* 0x0031 */ char __PADDING__[7];
} NET_VALIDATE_AUTHENTICATION_INPUT_ARG, *PNET_VALIDATE_AUTHENTICATION_INPUT_ARG; /* size: 0x0038 */

struct CVarPageMgr
{
  union
  {
    /* 0x0000 */ const unsigned long xsm_cbVBlkOvrhd;
    /* 0x0000 */ const unsigned long xsm_cbVBlkSize;
    /* 0x0000 */ const unsigned long xsm_cbVIOvrhd;
    /* 0x0000 */ const unsigned long xsm_cbPgSetOvrhd;
    /* 0x0000 */ const unsigned long xsm_cbMaxAlloc;
    /* 0x0000 */ const unsigned long xsm_cbMaxAllocLargePage;
    /* 0x0000 */ const unsigned long MAX_PAGELIST_INDEX;
  }; /* size: 0x0004 */
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct OneProcSimServicePartitionSLock
{
}; /* size: 0x0004 */

class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

typedef struct _ACTRL_ACCESS_INFOW
{
  /* 0x0000 */ unsigned long fAccessPermission;
  /* 0x0004 */ long Padding_1417;
  /* 0x0008 */ wchar_t* lpAccessPermissionName;
} ACTRL_ACCESS_INFOW, *PACTRL_ACCESS_INFOW; /* size: 0x0010 */

struct std::tr1::add_rvalue_reference<void const >
{
}; /* size: 0x0001 */

class XEPackage0::StringCompare<char,2>
{
}; /* size: 0x0001 */

class Spinlock<280,1,1>
{
}; /* size: 0x0004 */

class Spinlock<201,3,1>
{
}; /* size: 0x0004 */

class HostedResourcePoolData
{
}; /* size: 0x0001 */

struct std::tr1::_Get_align<int>
{
  /* 0x0000 */ int _Elt0;
  /* 0x0004 */ char _Elt1;
  /* 0x0005 */ char Padding_1418[3];
  /* 0x0008 */ int _Elt2;
}; /* size: 0x000c */

class DescriptorAllocator<SOS_MemoryFragmentDescriptor,0>::Iterator;

class XE_Aggregator<0>
{
}; /* size: 0x0001 */

struct XEPackage0::CountingPredicateSource
{
}; /* size: 0x0001 */

class TimerRequest
{
  /* 0x0000 */ long Padding_1419[2];
  /* 0x0008 */ class SEListElem m_link;
  /* 0x0018 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_timeoutTicks;
  /* 0x0020 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ticksExpiration;
  /* 0x0028 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ticksIdleTimeout;
  /* 0x0030 */ int m_isDeferred;
}; /* size: 0x0034 */

struct std::tr1::_Is_integral<unsigned long>
{
}; /* size: 0x0001 */

class SEListEnum<TimerRequest,8>;

struct XEPackage0::GenerateEventSequenceNumber
{
}; /* size: 0x0001 */

class XEPackage0::BucketizingTarget::Entry
{
  /* 0x0000 */ unsigned __int64 m_count;
  /* 0x0008 */ unsigned int m_size;
  /* 0x000c */ int m_isVld;
  /* 0x0010 */ class XE_AutoRg<unsigned char> m_pData;
  /* 0x0018 */ unsigned char* m_pInternal;
}; /* size: 0x0020 */

class std::__non_rtti_object
{
}; /* size: 0x0018 */

struct _HREGBATCHNOTIFICATION;

class CMallocSpy::CGuardBytes
{
  /* 0x0000 */ unsigned char m_rgbBytes[16];
}; /* size: 0x0010 */

struct XBitmap<StaticStorage<64> >
{
  /* 0x0000 */ struct StaticStorage<64> m_storage;
}; /* size: 0x0008 */

struct XE_TArray<XEEvent *,14>
{
  /* 0x0000 */ struct XEEvent* m_array[14];
}; /* size: 0x0070 */

struct std::iterator_traits<unsigned int>
{
}; /* size: 0x0001 */

class CExceptSetTrans
{
  /* 0x0000 */ void* est_pfnSTF /* function */;
}; /* size: 0x0008 */

class SpinlockHolder<45,18,1>;

struct ISOSHost_IOCompRequest
{
}; /* size: 0x0008 */

class MemObjCache<CMemThread<CMemDbg<CMemObj> > >
{
  /* 0x0000 */ long Padding_1420[352];
  /* 0x0580 */ void* m_cacheEntryDescriptor;
  /* 0x0588 */ class CostInfo m_costInfo;
}; /* size: 0x05d0 */

class CMemThread<CMemDbg<CMemObj> >
{
  /* 0x0000 */ long Padding_1421[312];
  /* 0x04e0 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x0558 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0580 */

class SOS_HiddenSchedulerEnum
{
}; /* size: 0x0028 */

class SOS_WorkerEnum
{
}; /* size: 0x0028 */

typedef struct _UNWIND_INFO
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Version : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char Flags : 5; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0001 */ unsigned char SizeOfProlog;
  /* 0x0002 */ unsigned char CountOfCodes;
  struct /* bitfield */
  {
    /* 0x0003 */ unsigned char FrameRegister : 4; /* bit position: 0 */
    /* 0x0003 */ unsigned char FrameOffset : 4; /* bit position: 4 */
  }; /* bitfield */
  /* 0x0004 */ union _UNWIND_CODE UnwindCode[1];
} UNWIND_INFO, *PUNWIND_INFO; /* size: 0x0006 */

typedef struct _Collvec
{
  /* 0x0000 */ unsigned long _Hand;
  /* 0x0004 */ unsigned int _Page;
} Collvec, *PCollvec; /* size: 0x0008 */

class XeCloudMinPkg::start_copy_to_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1422[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int non_draining_copyOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02d0 */
}; /* size: 0x0290 */

class ISOSHost_AutoShrink
{
  /* 0x0000 */ struct ISOSHost_MemObj* m_pmo;
  /* 0x0008 */ void* m_pvOldMark;
}; /* size: 0x0010 */

struct ISOSHost_MemObj
{
}; /* size: 0x0008 */

class XE_BufferCollector
{
  /* 0x0000 */ struct XECollectedEvent m_collectedEvent;
  /* 0x0028 */ unsigned char m_buffer[512];
}; /* size: 0x0228 */

class SpinlockHolder<60,16,1>;

struct XE_TEvent<4,1,12>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,12> m_dynamicAttr;
  /* 0x02b8 */ struct XEEvent m_event;
}; /* size: 0x0300 */

struct ISOSHost_TaskCallback
{
}; /* size: 0x0008 */

typedef struct _SERVER_INFO_1520
{
  /* 0x0000 */ unsigned long sv1520_maxcopyreadlen;
} SERVER_INFO_1520, *PSERVER_INFO_1520; /* size: 0x0004 */

class XeCloudMinPkg::add_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,18> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1423[140];
      /* 0x0240 */ unsigned char m_buf[106];
    }; /* size: 0x007a */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int add_as_downOffset;
    /* 0x0000 */ const int deferred_commitOffset;
    /* 0x0000 */ const int continuous_copyOffset;
    /* 0x0000 */ const int quorum_setOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int additional_hashOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
    /* 0x0000 */ const int filtering_low_keyOffset;
    /* 0x0000 */ const int filtering_high_keyOffset;
  }; /* size: 0x03c0 */
}; /* size: 0x02b0 */

class ISOSHost_TaskAutoSwitchPreemptiveHelper
{
  /* 0x0000 */ struct ISOSHost* const m_pISOSHost;
  /* 0x0008 */ void* const m_pvBuf;
}; /* size: 0x0010 */

class TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class SOS_StateProtectors<ExtIntCodeProtector<0>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0004 */

class SOS_LargeCacheStoreEntriesEnum
{
}; /* size: 0x0028 */

class SOS_NodeEnumIncludeUninitializedNodes
{
}; /* size: 0x0028 */

class Spinlock<81,13,1>
{
}; /* size: 0x0004 */

class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>;

class XlistEmptyFlightRecorder
{
}; /* size: 0x0001 */

struct tagDBIMPLICITSESSION
{
  /* 0x0000 */ struct IUnknown* pUnkOuter;
  /* 0x0008 */ struct _GUID* piid;
  /* 0x0010 */ struct IUnknown* pSession;
}; /* size: 0x0018 */

class AutoDisableThreadSwitchOut
{
  /* 0x0000 */ int m_switchedOut;
}; /* size: 0x0004 */

class SEList<Worker,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _NET_DISPLAY_USER
{
  /* 0x0000 */ wchar_t* usri1_name;
  /* 0x0008 */ wchar_t* usri1_comment;
  /* 0x0010 */ unsigned long usri1_flags;
  /* 0x0014 */ long Padding_1424;
  /* 0x0018 */ wchar_t* usri1_full_name;
  /* 0x0020 */ unsigned long usri1_user_id;
  /* 0x0024 */ unsigned long usri1_next_index;
} NET_DISPLAY_USER, *PNET_DISPLAY_USER; /* size: 0x0028 */

class SEListEnum<Worker,0>;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>
{
  /* 0x0000 */ long Padding_1425[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class TBaseSafeCallbackList<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType> >
{
}; /* size: 0x0030 */

typedef struct _RTL_DEBUG_INFORMATION32
{
  /* 0x0000 */ unsigned long SectionHandleClient;
  /* 0x0004 */ unsigned long ViewBaseClient;
  /* 0x0008 */ unsigned long ViewBaseTarget;
  /* 0x000c */ unsigned long ViewBaseDelta;
  /* 0x0010 */ unsigned long EventPairClient;
  /* 0x0014 */ unsigned long EventPairTarget;
  /* 0x0018 */ unsigned long TargetProcessId;
  /* 0x001c */ unsigned long TargetThreadHandle;
  /* 0x0020 */ unsigned long Flags;
  /* 0x0024 */ unsigned long OffsetFree;
  /* 0x0028 */ unsigned long CommitSize;
  /* 0x002c */ unsigned long ViewSize;
  union
  {
    /* 0x0030 */ unsigned long Modules;
    /* 0x0030 */ unsigned long ModulesEx;
  }; /* size: 0x0004 */
  /* 0x0034 */ unsigned long BackTraces;
  /* 0x0038 */ unsigned long Heaps;
  /* 0x003c */ unsigned long Locks;
  /* 0x0040 */ unsigned long SpecificHeap;
  /* 0x0044 */ unsigned long TargetProcessHandle;
  /* 0x0048 */ unsigned long VerifierOptions;
  /* 0x004c */ unsigned long ProcessHeap;
  /* 0x0050 */ unsigned long CriticalSectionHandle;
  /* 0x0054 */ unsigned long CriticalSectionOwnerThread;
  /* 0x0058 */ unsigned long Reserved[4];
} RTL_DEBUG_INFORMATION32, *PRTL_DEBUG_INFORMATION32; /* size: 0x0068 */

typedef struct _FILE_MAILSLOT_QUERY_INFORMATION
{
  /* 0x0000 */ unsigned long MaximumMessageSize;
  /* 0x0004 */ unsigned long MailslotQuota;
  /* 0x0008 */ unsigned long NextMessageSize;
  /* 0x000c */ unsigned long MessagesAvailable;
  /* 0x0010 */ union _LARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_QUERY_INFORMATION, *PFILE_MAILSLOT_QUERY_INFORMATION; /* size: 0x0018 */

class XeCMPkg::cma_config_filename
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1426[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int config_filenameOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock>
{
  /* 0x0000 */ long Padding_1427[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class XeCloudMinPkg::persisted_catchup_to_secondary_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1428[140];
      /* 0x0240 */ unsigned char m_buf[105];
    }; /* size: 0x0079 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int catchup_return_codeOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0370 */
}; /* size: 0x02b0 */

class SEListEnum<SystemThread,160>;

class XeCMPkg::cm_release_manager
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1429[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int manager_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class TListElem<TList<SOS_Node,SystemThread,160,TListSLock> >
{
  /* 0x0000 */ long Padding_1430[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1431;
  /* 0x0018 */ class SOS_Node* m_pList;
}; /* size: 0x0020 */

class SOSHost_TaskAutoOffFlags
{
  /* 0x0000 */ class Worker::TaskAutoOffFlags m_nativeAutoOffFlags;
}; /* size: 0x0004 */

class CacheClockHand<CacheProbabilisticAlgorithm,ProbCostData>::Fuse
{
  /* 0x0000 */ int* m_isMoving;
  /* 0x0008 */ int m_working;
}; /* size: 0x0010 */

class SpinlockHolder<217,2,1>;

struct ISOSHost_Task
{
}; /* size: 0x0008 */

typedef struct _SYSTEM_POOLTAG_INFORMATION
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_1432;
  /* 0x0008 */ struct _SYSTEM_POOLTAG TagInfo[1];
} SYSTEM_POOLTAG_INFORMATION, *PSYSTEM_POOLTAG_INFORMATION; /* size: 0x0030 */

class XeCloudMinPkg::become_primary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1433[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int new_epochOffset;
    /* 0x0000 */ const int become_nothing_on_failureOffset;
    /* 0x0000 */ const int min_quorum_countOffset;
    /* 0x0000 */ const int target_replica_countOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0250 */

class MemoryNodeList
{
}; /* size: 0x0018 */

typedef struct _SERVER_INFO_1503
{
  /* 0x0000 */ unsigned long sv1503_opensearch;
} SERVER_INFO_1503, *PSERVER_INFO_1503; /* size: 0x0004 */

class AutoSwitchPreemptive
{
  /* 0x0000 */ int m_fMakeSwitch;
  /* 0x0004 */ int m_IsLazyPreemptive;
  /* 0x0008 */ class Worker* m_pWorker;
  /* 0x0010 */ class SOS_Scheduler* m_pScheduler;
  /* 0x0018 */ class SOS_ExternalAutoWait m_extAutoWait;
}; /* size: 0x0050 */

typedef struct _VARIABLE_NAME
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ struct _GUID VendorGuid;
  /* 0x0014 */ wchar_t Name[1];
  /* 0x0016 */ char __PADDING__[2];
} VARIABLE_NAME, *PVARIABLE_NAME; /* size: 0x0018 */

typedef struct _JOURNAL_SET_KEY_SECURITY_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_1434;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _UNICODE_STRING KeyPathName;
  /* 0x0028 */ unsigned long OldSecurityDescriptorLength;
  /* 0x002c */ long Padding_1435;
  /* 0x0030 */ void* OldSecurityDescriptor;
  /* 0x0038 */ unsigned long NewSecurityDescriptorLength;
  /* 0x003c */ long Padding_1436;
  /* 0x0040 */ void* NewSecurityDescriptor;
} JOURNAL_SET_KEY_SECURITY_INFORMATION, *PJOURNAL_SET_KEY_SECURITY_INFORMATION; /* size: 0x0048 */

class SEListEnum<SOSHost,0>;

typedef struct _QUERY_PERFORMANCE_COUNTER_FLAGS
{
  union
  {
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long KernelTransition : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
    /* 0x0000 */ unsigned long ul;
  }; /* size: 0x0004 */
} QUERY_PERFORMANCE_COUNTER_FLAGS, *PQUERY_PERFORMANCE_COUNTER_FLAGS; /* size: 0x0004 */

class SOSResourcePoolStats
{
  /* 0x0000 */ volatile long m_CPUViolationCount;
  /* 0x0004 */ long Padding_1437;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_CPUMsecConsumed;
  /* 0x0010 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_CPUMsecConsumedPrevious;
  /* 0x0018 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_CPUMsecViolation;
  /* 0x0020 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_CPUMsecViolationPrevious;
}; /* size: 0x0028 */

struct IKernelTransaction
{
}; /* size: 0x0008 */

struct RingBufferRecordSLock
{
}; /* size: 0x0004 */

class CAutoSaveWin32Error
{
  /* 0x0000 */ const unsigned long m_dwErr;
}; /* size: 0x0004 */

class SOS_LargeCacheEntry
{
}; /* size: 0x00e0 */

class SEList<MemObjProxy,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEListEnum<MemObjProxy,0>;

class SpinlockHolder<275,1,1>;

class IORGHashTableKey
{
  /* 0x0000 */ void* m_VolumeEntity;
}; /* size: 0x0008 */

class TypeListNode<ResourceClerk const *,TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class SEList<SOS_ResourcePool,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XListEnumerator<SOS_DispatcherBase>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class SOS_DispatcherBase* m_currentObject;
  /* 0x0018 */ class SOS_DispatcherBase* m_baseObject;
  /* 0x0020 */ class XList<SOS_DispatcherBase>* m_pList;
}; /* size: 0x0028 */

class TList<PoolList,SOS_ResourcePool,0,TListSLock>
{
  /* 0x0000 */ long Padding_1438[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

typedef struct _FILE_FS_DRIVER_PATH_INFORMATION
{
  /* 0x0000 */ unsigned char DriverInPath;
  /* 0x0001 */ char Padding_1439[3];
  /* 0x0004 */ unsigned long DriverNameLength;
  /* 0x0008 */ wchar_t DriverName[1];
  /* 0x000a */ char __PADDING__[2];
} FILE_FS_DRIVER_PATH_INFORMATION, *PFILE_FS_DRIVER_PATH_INFORMATION; /* size: 0x000c */

class DescriptorAllocator<SOS_ParentBlockDescriptor,0>::Iterator;

class SOS_InterlockedList<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc,16>
{
  /* 0x0000 */ union _SLIST_HEADER m_head;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::FragmentDesc
{
  /* 0x0000 */ unsigned char* m_start;
  /* 0x0008 */ unsigned char* m_end;
  /* 0x0010 */ int m_pagesPerFragment;
  /* 0x0014 */ long Padding_1440;
  /* 0x0018 */ struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::FragmentDesc* m_nextFragment;
  /* 0x0020 */ int m_freePageCount;
  /* 0x0024 */ long Padding_1441[3];
  /* 0x0030 */ class SOS_InterlockedList<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc,16> m_freePages;
  /* 0x0040 */ unsigned char* m_unallocated;
  /* 0x0048 */ int m_pageBeingCommitted;
  /* 0x004c */ long Padding_1442;
  /* 0x0050 */ class DescriptorAllocator<SOS_ParentBlockDescriptor,0>* m_allocator;
  /* 0x0058 */ long __PADDING__[2];
}; /* size: 0x0060 */

class PerCPUData<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition>
{
  /* 0x0000 */ unsigned __int64 s_reservationOffset;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::NodePartition
{
  /* 0x0000 */ class SOS_InterlockedList<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::PageDesc,16> m_pageBuckets[5];
  /* 0x0050 */ unsigned __int64 m_firstPageOnNode;
  /* 0x0058 */ unsigned __int64 m_pages;
  /* 0x0060 */ unsigned __int64 m_target;
  /* 0x0068 */ int m_pageBeingAdded;
  /* 0x006c */ unsigned int m_firstCpuId;
  /* 0x0070 */ long __PADDING__[4];
}; /* size: 0x0080 */

class DescriptorAllocator<SOS_ParentBlockDescriptor,0>
{
  union
  {
    /* 0x0000 */ int sm_initialized;
    /* 0x0000 */ class MemoryClerk* m_clerk;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned short m_nodeCount;
  /* 0x000a */ char Padding_1443[6];
  /* 0x0010 */ unsigned char* m_outlineBuffer;
  /* 0x0018 */ unsigned __int64 m_everOnlineNodes;
  /* 0x0020 */ long Padding_1444[8];
  /* 0x0040 */ struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::FragmentDesc m_fragment;
  /* 0x00a0 */ int m_fragmentBeingCreated;
  /* 0x00a4 */ long Padding_1445[7];
  /* 0x00c0 */ class PerCPUData<DescriptorAllocator<SOS_ParentBlockDescriptor,0>::CpuPartition> m_cpuParts;
  /* 0x00d0 */ long Padding_1446[12];
  /* 0x0100 */ struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::NodePartition m_nodePart[64];
}; /* size: 0x2100 */

class XeCloudMinPkg::start_persisted_catchup_to_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1447[140];
      /* 0x0240 */ unsigned char m_buf[75];
    }; /* size: 0x005b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0290 */

typedef struct _AE_NETLOGOFF
{
  /* 0x0000 */ unsigned long ae_nf_compname;
  /* 0x0004 */ unsigned long ae_nf_username;
  /* 0x0008 */ unsigned long ae_nf_reserved1;
  /* 0x000c */ unsigned long ae_nf_reserved2;
} AE_NETLOGOFF, *PAE_NETLOGOFF; /* size: 0x0010 */

typedef struct _RTL_HEAP_ENTRY
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ unsigned short Flags;
  /* 0x000a */ unsigned short AllocatorBackTraceIndex;
  /* 0x000c */ long Padding_1448;
  union
  {
    union
    {
      struct
      {
        /* 0x0010 */ unsigned __int64 Settable;
        /* 0x0018 */ unsigned long Tag;
        /* 0x001c */ long __PADDING__[1];
      } /* size: 0x0010 */ s1;
      struct
      {
        /* 0x0010 */ unsigned __int64 CommittedSize;
        /* 0x0018 */ void* FirstBlock;
      } /* size: 0x0010 */ s2;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ u;
} RTL_HEAP_ENTRY, *PRTL_HEAP_ENTRY; /* size: 0x0020 */

class XE_VersionConfig_v0
{
  /* 0x0000 */ const struct XEActionDataDescriptor_v0 sm_NULLADD;
}; /* size: 0x0001 */

class SpinlockHolder<122,7,1>;

class SOS_ParentBlockDescriptor
{
  union
  {
    /* 0x0000 */ class DescriptorAllocator<SOS_MemoryFreeBlock,0> sm_MemoryFreeBlockAllocator;
    /* 0x0000 */ const unsigned int AdditionalFragmentSize;
    struct
    {
      /* 0x0000 */ class SEListElem m_partialListElem;
      /* 0x0010 */ class SEListElem m_elem;
      /* 0x0020 */ void* m_Address;
      /* 0x0028 */ void* m_Unallocated;
      /* 0x0030 */ class SOS_MemoryBlockAllocator* m_Allocator;
      /* 0x0038 */ void* m_ParentBlock;
      /* 0x0040 */ unsigned __int64 m_TotalBlocks;
      /* 0x0048 */ unsigned __int64 m_UncommittedBlocks;
      /* 0x0050 */ unsigned long m_OriginalCpuId;
      /* 0x0054 */ unsigned short m_OriginalNodeId;
      /* 0x0056 */ unsigned short m_PartialListBucket;
      /* 0x0058 */ int m_Hashed;
    }; /* size: 0x005c */
    struct
    {
      /* 0x0000 */ const unsigned __int64 MaxTotalBlocks;
      /* 0x0008 */ long Padding_1449[22];
      /* 0x0060 */ unsigned __int64 m_stateAndFreeBlocks;
      /* 0x0068 */ long Padding_1450[2];
      /* 0x0070 */ class SOS_InterlockedList<SOS_MemoryFreeBlock,0> m_freeList;
      /* 0x0080 */ class SOS_InterlockedList<SOS_MemoryFreeBlock,0> m_uncommittedList;
    }; /* size: 0x0030 */
  }; /* size: 0x2100 */
}; /* size: 0x0090 */

typedef struct _FINDFIRSTACTIVATIONCONTEXTSECTION
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ const struct _GUID* ExtensionGuid;
  /* 0x0010 */ unsigned long Id;
  /* 0x0014 */ unsigned long Depth;
  /* 0x0018 */ unsigned long OutFlags;
  /* 0x001c */ long __PADDING__[1];
} FINDFIRSTACTIVATIONCONTEXTSECTION, *PFINDFIRSTACTIVATIONCONTEXTSECTION; /* size: 0x0020 */

class SOS_MemoryBlockAllocator
{
  /* 0x0000 */ long Padding_1451[2];
  /* 0x0008 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition> m_activeParts;
  /* 0x0018 */ unsigned __int64 m_BlockSize;
  /* 0x0020 */ unsigned short m_BucketCount;
  /* 0x0022 */ unsigned short m_FillFactorShift;
  /* 0x0024 */ enum SOS_MemoryBlockAllocator::PartitionMode m_allocatorPartition;
  /* 0x0028 */ class SOS_MemoryBlockAllocator* m_ParentAllocator;
  /* 0x0030 */ class SOS_MemoryTopLevelBlockAllocator* m_TopLevelAllocator;
  /* 0x0038 */ class SOS_MemoryWorkSpace* m_WorkSpace;
  /* 0x0040 */ unsigned int m_numChildAllocators;
  /* 0x0044 */ long Padding_1452[15];
  /* 0x0080 */ class OomIndicator m_OomIndicator;
  /* 0x0000 */ class DescriptorAllocator<SOS_ParentBlockDescriptor,0> sm_ParentBlockDescriptorAllocator;
}; /* size: 0x00c0 */

typedef struct _PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING SymbolicLinkName;
  /* 0x0010 */ struct _GUID* AliasClassGuid;
  /* 0x0018 */ wchar_t* AliasSymbolicLinkName;
  /* 0x0020 */ unsigned long AliasSymbolicLinkNameLength;
  /* 0x0024 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA, *PPLUGPLAY_CONTROL_INTERFACE_ALIAS_DATA; /* size: 0x0028 */

class SOS_MemoryWorkSpace
{
  union
  {
    struct
    {
      /* 0x0000 */ class SOS_MemoryWorkSpace::BlockDescriptorBucket* sm_LookupTable;
      /* 0x0008 */ enum MemoryWorkSpaces m_WorkSpaceId;
      /* 0x000c */ unsigned int m_TotalAllocators;
    }; /* size: 0x0010 */
    /* 0x0000 */ __int64 sm_OSCommitmentReservedPages;
    /* 0x0000 */ class PerCPUData<SOS_MemoryWorkSpace::WSCpuPart> sm_cpuPartitions;
    /* 0x0000 */ class OomIndicator sm_OomIndicator;
    /* 0x0000 */ class MemoryClerk sm_descriptorClerk;
    /* 0x0000 */ unsigned __int64 sm_Buckets;
  }; /* size: 0x0680 */
}; /* size: 0x0010 */

class XeCloudMinPkg::async_transport_connect
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1453[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int destination_descriptionOffset;
    /* 0x0000 */ const int destination_addressOffset;
    /* 0x0000 */ const int destination_circuit_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class SEList<SOS_ParentBlockDescriptor,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SOS_MemoryWorkSpace::BlockDescriptorBucket
{
  /* 0x0000 */ class SEList<SOS_ParentBlockDescriptor,16> m_list;
  /* 0x0010 */ struct BlockDescriptorBucketSLock m_lock;
}; /* size: 0x0018 */

typedef struct _DYNAMIC_FUNCTION_TABLE
{
  /* 0x0000 */ struct _LIST_ENTRY ListEntry;
  /* 0x0010 */ struct _RUNTIME_FUNCTION* FunctionTable;
  /* 0x0018 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0020 */ unsigned __int64 MinimumAddress;
  /* 0x0028 */ unsigned __int64 MaximumAddress;
  /* 0x0030 */ unsigned __int64 BaseAddress;
  /* 0x0038 */ void* Callback /* function */;
  /* 0x0040 */ void* Context;
  /* 0x0048 */ wchar_t* OutOfProcessCallbackDll;
  /* 0x0050 */ enum _FUNCTION_TABLE_TYPE Type;
  /* 0x0054 */ unsigned long EntryCount;
} DYNAMIC_FUNCTION_TABLE, *PDYNAMIC_FUNCTION_TABLE; /* size: 0x0058 */

class SEQueue<SOS_Task,0>
{
  /* 0x0000 */ class SEList<SOS_Task,0> m_selist;
}; /* size: 0x0010 */

class CFixedInfo
{
  /* 0x0000 */ long Padding_1454[4];
  /* 0x0010 */ class SEListElem m_link;
  /* 0x0020 */ class CFreeSlot* m_pfsFreeList;
  /* 0x0028 */ unsigned char* m_pbAvailable;
  /* 0x0030 */ short m_cfsCount;
  /* 0x0032 */ short m_cfsCurrent;
  /* 0x0034 */ unsigned short m_cbSize;
  /* 0x0036 */ unsigned char m_listIndex;
}; /* size: 0x0040 */

class DispatcherWorkSample
{
}; /* size: 0x0001 */

struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionWithoutActive
{
}; /* size: 0x0140 */

class DispatcherQueueSample
{
}; /* size: 0x0001 */

class SEList<SOS_DispatcherPoolBase,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEListEnum<SOS_DispatcherPoolBase,8>;

typedef struct _SYSTEM_SESSION_BIGPOOL_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NextEntryOffset;
  /* 0x0008 */ unsigned long SessionId;
  /* 0x000c */ unsigned long Count;
  /* 0x0010 */ struct _SYSTEM_BIGPOOL_ENTRY AllocatedInfo[1];
} SYSTEM_SESSION_BIGPOOL_INFORMATION, *PSYSTEM_SESSION_BIGPOOL_INFORMATION; /* size: 0x0028 */

class TMemoryBlockAllocator<0,8192,524288,16,1>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,8192,524288,16,1> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,8192,524288,16,1>::NodePartitionWithoutActive m_nodePart[64];
  /* 0x50c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,8192,524288,16,1> > m_reservationForActiveParts;
}; /* size: 0x5100 */

class SEListEnum<SOS_Node,0>
{
  /* 0x0000 */ class SEList<SOS_Node,0>* m_pList;
  /* 0x0008 */ class SOS_Node* m_pNext;
}; /* size: 0x0010 */

class TypeListSize<TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > > >
{
}; /* size: 0x0001 */

class SOSExceptionNoTranslatorSetter
{
}; /* size: 0x0008 */

class SOSHost_OSThreadCreateDestroyCallback
{
}; /* size: 0x0030 */

class TListElem<TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock> >
{
  /* 0x0000 */ long Padding_1455[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1456;
  /* 0x0018 */ class MemoryBrokerClerkList* m_pList;
}; /* size: 0x0020 */

class SEQueue<SystemThread,144>
{
  /* 0x0000 */ class SEList<SystemThread,144> m_selist;
}; /* size: 0x0010 */

class AutoSpinlockHolder<69,16,1>;

class HostedResourcePoolStats
{
}; /* size: 0x0001 */

class PmoAllocator
{
  /* 0x0000 */ class IMemObj* m_pmo;
}; /* size: 0x0008 */

class CAutoRefc<XE_CompressionBufferRefCount>
{
  /* 0x0000 */ class XE_CompressionBufferRefCount* m_pt;
}; /* size: 0x0008 */

class SEListEnum<ClockInfo,64>;

class SpinlockHolder<245,1,1>
{
  /* 0x0000 */ class Spinlock<245,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class SEListEnum<SOS_Node,16>;

class TListElem<TList<MemoryNodeList,MemoryNode,0,TListSLock> >
{
  /* 0x0000 */ long Padding_1457[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1458;
  /* 0x0018 */ class MemoryNodeList* m_pList;
}; /* size: 0x0020 */

struct QryScanSLock
{
}; /* size: 0x0004 */

class SEList<ResourceClerk,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEListEnum<ResourceClerk,8>;

class AutoSpinlockHolder<245,1,1>
{
}; /* size: 0x0010 */

typedef union _PSAPI_WORKING_SET_BLOCK
{
  union
  {
    /* 0x0000 */ unsigned __int64 Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Protection : 5; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ShareCount : 3; /* bit position: 5 */
      /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 8 */
      /* 0x0000 */ unsigned __int64 Reserved : 3; /* bit position: 9 */
      /* 0x0000 */ unsigned __int64 VirtualPage : 52; /* bit position: 12 */
    }; /* bitfield */
  }; /* size: 0x0008 */
} PSAPI_WORKING_SET_BLOCK, *PPSAPI_WORKING_SET_BLOCK; /* size: 0x0008 */

class GlobalNodeEnum
{
}; /* size: 0x0028 */

struct CXLRUHashTable<2,unsigned __int64,65536>::LookupEntry
{
  /* 0x0000 */ unsigned __int64 hashKey[2];
  /* 0x0010 */ unsigned long dictionaryEntry;
  /* 0x0014 */ unsigned int lastAccessTime;
  /* 0x0018 */ unsigned int nextEntryInBucketChain;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class ISOSHost_MemoryClerkImpl
{
}; /* size: 0x0700 */

class SOS_SpinlockBackoffRecord
{
  /* 0x0000 */ unsigned long sm_NumberOfRecords;
  /* 0x0004 */ long Padding_1459[3];
  /* 0x0010 */ const class Worker* m_Worker;
  /* 0x0018 */ const void* m_Lock;
  /* 0x0020 */ enum SPINLOCK_TYPE m_Type;
  /* 0x0024 */ unsigned long m_Duration;
  /* 0x0028 */ unsigned long m_Backoffs;
}; /* size: 0x0030 */

class SpinlockHolder<65,16,1>;

class TypeListNode<void *,TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class XEPackage0::BufferedReader
{
  /* 0x0000 */ long Padding_1460[2];
  /* 0x0008 */ class XE_IStream* m_reader;
  /* 0x0010 */ unsigned char m_buffer[4096];
}; /* size: 0x1010 */

class XE_CollectedEvent<XE_LiveSessionMetadata>
{
  /* 0x0000 */ const class XE_LiveSessionMetadata* m_metadata;
  /* 0x0008 */ const struct XECollectedEvent* m_pCollectedEvent;
  /* 0x0010 */ const struct XEEvent* m_event;
  /* 0x0018 */ unsigned short m_index;
  /* 0x001a */ unsigned short m_flavor;
  /* 0x001c */ long Padding_1461;
  /* 0x0020 */ const unsigned char* m_pBuf;
}; /* size: 0x0028 */

struct TableFlushRecord
{
  /* 0x0000 */ struct XERelativeObjectId objectTableFlushed;
  /* 0x0004 */ unsigned long storedTableReference;
  /* 0x0008 */ unsigned __int64 minEventTime;
  /* 0x0010 */ unsigned __int64 maxEventTime;
  /* 0x0018 */ unsigned int partitionId;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

class SOSHost_NodeAffinityChangeCallback
{
  /* 0x0000 */ long Padding_1462[14];
  /* 0x0038 */ void* m_pHostCallbackFunc /* function */;
  /* 0x0040 */ void* m_pHostParam;
}; /* size: 0x0048 */

class AutoSpinlockHolder<81,13,1>;

typedef struct _USER_INFO_1025
{
  /* 0x0000 */ unsigned long usri1025_code_page;
} USER_INFO_1025, *PUSER_INFO_1025; /* size: 0x0004 */

struct SerializeControl<CMemBufFormatter,1>
{
}; /* size: 0x0001 */

class SOSHost_RWLock
{
  /* 0x0000 */ long Padding_1463[12];
  /* 0x0030 */ struct ISOSClient_ResourceInfo* m_resInfo;
}; /* size: 0x0038 */

class AutoSpinlockHolder<153,3,1>;

class StateProtectorNode<NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TypeListNode<void *,TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class CacheEvictionAlgorithmCommon<CacheClockAlgorithm>
{
  /* 0x0000 */ class SOS_StoreAndClockAlgorithmControlInterface* m_UserControlInterface;
}; /* size: 0x0008 */

class CMemPartitioned<CMemThread<CMemProc> >
{
  /* 0x0000 */ long Padding_1464[74];
  /* 0x0128 */ class IMemObj** m_partitionMemObj;
  /* 0x0130 */ int m_numberOfPartitions;
  /* 0x0134 */ enum PartitioningType m_partType;
  /* 0x0138 */ enum AllocatorType m_allocatorType;
  /* 0x013c */ long Padding_1465;
  /* 0x0140 */ __int64 m_cPages;
}; /* size: 0x0148 */

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent> >;

struct IRowsetChapterMember
{
}; /* size: 0x0008 */

struct ISOSHost_Semaphore_Prev0
{
}; /* size: 0x0008 */

class TCacheEntry<CacheProbabilisticAlgorithm>
{
}; /* size: 0x00e0 */

class XListInvalidLock
{
}; /* size: 0x0001 */

struct XPipeSLock
{
}; /* size: 0x0004 */

struct ISOSHost_MemObjPrev0
{
}; /* size: 0x0008 */

typedef struct _LPC_UNREGISTER_PROCESS_MSG
{
  /* 0x0000 */ struct _PORT_MESSAGE PortMsg;
  /* 0x0028 */ void* UniqueProcessId;
} LPC_UNREGISTER_PROCESS_MSG, *PLPC_UNREGISTER_PROCESS_MSG; /* size: 0x0030 */

class MemObjCache<CMemFixed>
{
  /* 0x0000 */ long Padding_1466[60];
  /* 0x00f0 */ void* m_cacheEntryDescriptor;
  /* 0x00f8 */ class CostInfo m_costInfo;
}; /* size: 0x0140 */

typedef struct _PROCESS_PRIORITY_CLASS
{
  /* 0x0000 */ unsigned char Foreground;
  /* 0x0001 */ unsigned char PriorityClass;
} PROCESS_PRIORITY_CLASS, *PPROCESS_PRIORITY_CLASS; /* size: 0x0002 */

class Spinlock<24,19,1>
{
}; /* size: 0x0004 */

struct HashTableStatistic
{
  /* 0x0000 */ unsigned int m_BucketCount;
  /* 0x0004 */ unsigned int m_BucketsInUse;
  /* 0x0008 */ unsigned int m_MaxBucketLength;
  /* 0x000c */ unsigned int m_MinBucketLength;
  /* 0x0010 */ unsigned int m_AvgBucketLength;
  /* 0x0014 */ unsigned int m_MaxBucketLengthEver;
  /* 0x0018 */ unsigned __int64 m_Hits;
  /* 0x0020 */ unsigned __int64 m_Misses;
  /* 0x0028 */ unsigned int m_AvgScanHitLength;
  /* 0x002c */ unsigned int m_AvgScanMissLength;
}; /* size: 0x0030 */

class SEList<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class CMemThread<CMemFixed>
{
  /* 0x0000 */ long Padding_1467[60];
  /* 0x00f0 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x0168 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0190 */

class Spinlock<80,13,1>
{
}; /* size: 0x0004 */

class XeSosPkg::task_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1468[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int durationOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSosPkg::resource_monitor_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,25> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1469[140];
      /* 0x0240 */ unsigned char m_buf[160];
    }; /* size: 0x00b0 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int memory_utilization_pctOffset;
    /* 0x0000 */ const int total_physical_memory_kbOffset;
    /* 0x0000 */ const int available_physical_memory_kbOffset;
    /* 0x0000 */ const int total_page_file_kbOffset;
    /* 0x0000 */ const int available_page_file_kbOffset;
    /* 0x0000 */ const int total_virtual_address_space_kbOffset;
    /* 0x0000 */ const int available_virtual_address_space_kbOffset;
    /* 0x0000 */ const int available_extended_virtual_address_space_kbOffset;
    /* 0x0000 */ const int memory_node_idOffset;
    /* 0x0000 */ const int target_kbOffset;
    /* 0x0000 */ const int reserved_kbOffset;
    /* 0x0000 */ const int committed_kbOffset;
    /* 0x0000 */ const int shared_committed_kbOffset;
    /* 0x0000 */ const int awe_kbOffset;
    /* 0x0000 */ const int pages_kbOffset;
    /* 0x0000 */ const int notificationOffset;
    /* 0x0000 */ const int process_indicatorsOffset;
    /* 0x0000 */ const int system_indicatorsOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int apply_low_pmOffset;
    /* 0x0000 */ const int apply_high_pmOffset;
    /* 0x0000 */ const int revert_high_pmOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0508 */
}; /* size: 0x02e0 */

typedef struct _MEMORY_FRAME_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 UseDescription : 4; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 ListDescription : 3; /* bit position: 4 */
    /* 0x0000 */ unsigned __int64 Reserved0 : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned __int64 Pinned : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned __int64 DontUse : 48; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Priority : 3; /* bit position: 57 */
    /* 0x0000 */ unsigned __int64 Reserved : 4; /* bit position: 60 */
  }; /* bitfield */
} MEMORY_FRAME_INFORMATION, *PMEMORY_FRAME_INFORMATION; /* size: 0x0008 */

typedef struct _FILEOFFSET_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 DontUse : 9; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 Offset : 48; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 57 */
  }; /* bitfield */
} FILEOFFSET_INFORMATION, *PFILEOFFSET_INFORMATION; /* size: 0x0008 */

typedef struct _UNIQUE_PROCESS_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned __int64 DontUse : 9; /* bit position: 0 */
    /* 0x0000 */ unsigned __int64 UniqueProcessKey : 48; /* bit position: 9 */
    /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 57 */
  }; /* bitfield */
} UNIQUE_PROCESS_INFORMATION, *PUNIQUE_PROCESS_INFORMATION; /* size: 0x0008 */

typedef struct _MMPFN_IDENTITY
{
  union
  {
    union
    {
      /* 0x0000 */ struct _MEMORY_FRAME_INFORMATION e1;
      /* 0x0000 */ struct _FILEOFFSET_INFORMATION e2;
      /* 0x0000 */ struct _PAGEDIR_INFORMATION e3;
      /* 0x0000 */ struct _UNIQUE_PROCESS_INFORMATION e4;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
  /* 0x0008 */ unsigned __int64 PageFrameIndex;
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0010 */ unsigned __int64 Image : 1; /* bit position: 0 */
          /* 0x0010 */ unsigned __int64 Mismatch : 1; /* bit position: 1 */
        }; /* bitfield */
      } /* size: 0x0008 */ e1;
      struct
      {
        /* 0x0010 */ unsigned __int64 CombinedPage : 1; /* bit position: 0 */
      } /* size: 0x0008 */ e2;
      /* 0x0010 */ void* FileObject;
      /* 0x0010 */ void* UniqueFileObjectKey;
      /* 0x0010 */ void* ProtoPteAddress;
      /* 0x0010 */ void* VirtualAddress;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u2;
} MMPFN_IDENTITY, *PMMPFN_IDENTITY; /* size: 0x0018 */

typedef struct _MM_COMBINEDPAGE_IDENTITY
{
  /* 0x0000 */ struct _MMPFN_IDENTITY PfnIdentity;
  union
  {
    /* 0x0018 */ unsigned __int64 SharedInitial : 1; /* bit position: 0 */
    /* 0x0018 */ unsigned __int64 ProtoPte;
  }; /* size: 0x0008 */
} MM_COMBINEDPAGE_IDENTITY, *PMM_COMBINEDPAGE_IDENTITY; /* size: 0x0020 */

class XeSosPkg::page_freed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1470[140];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int page_sizeOffset;
    /* 0x0000 */ const int page_locationOffset;
    /* 0x0000 */ const int allocator_typeOffset;
    /* 0x0000 */ const int pool_idOffset;
    /* 0x0000 */ const int memory_clerk_addressOffset;
    /* 0x0000 */ const int memory_clerk_nameOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0278 */

class AutoSpinlockHolder<290,1,1>;

class XeSosPkg::task_started
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1471[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int entry_pointOffset;
    /* 0x0000 */ const int pending_timeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSosPkg::security_handler_routine_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1472[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int error_codeOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef struct _Wx86TIB
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long InitialPc;
  /* 0x0008 */ void* StackBase;
  /* 0x000c */ void* StackLimit;
  /* 0x0010 */ void* DeallocationStack;
  /* 0x0014 */ unsigned long LogFlags;
  /* 0x0018 */ unsigned long InitialSp;
  /* 0x001c */ unsigned char SimulationCount;
  /* 0x001d */ unsigned char InCpuSimulation;
  /* 0x001e */ unsigned char EmulateInitialPc;
  /* 0x001f */ unsigned char Initialized;
  /* 0x0020 */ struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
  /* 0x0024 */ void* CpuContext;
  /* 0x0028 */ struct _CONTEXT* InitialExceptionContext;
  /* 0x002c */ void* pCallersRIID;
  /* 0x0030 */ void* pCallersUnknown;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ void* SelfRegDllName;
  /* 0x003c */ void* SelfRegDllHandle;
} Wx86TIB, *PWx86TIB; /* size: 0x0040 */

class XeSosPkg::memory_node_oom_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,24> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1473[140];
      /* 0x0240 */ unsigned char m_buf[164];
    }; /* size: 0x00b4 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int memory_utilization_pctOffset;
    /* 0x0000 */ const int total_physical_memory_kbOffset;
    /* 0x0000 */ const int available_physical_memory_kbOffset;
    /* 0x0000 */ const int total_page_file_kbOffset;
    /* 0x0000 */ const int available_page_file_kbOffset;
    /* 0x0000 */ const int total_virtual_address_space_kbOffset;
    /* 0x0000 */ const int available_virtual_address_space_kbOffset;
    /* 0x0000 */ const int available_extended_virtual_address_space_kbOffset;
    /* 0x0000 */ const int memory_node_idOffset;
    /* 0x0000 */ const int target_kbOffset;
    /* 0x0000 */ const int reserved_kbOffset;
    /* 0x0000 */ const int committed_kbOffset;
    /* 0x0000 */ const int shared_committed_kbOffset;
    /* 0x0000 */ const int awe_kbOffset;
    /* 0x0000 */ const int pages_kbOffset;
    /* 0x0000 */ const int failureOffset;
    /* 0x0000 */ const int resourcesOffset;
    /* 0x0000 */ const int factorOffset;
    /* 0x0000 */ const int last_errorOffset;
    /* 0x0000 */ const int taskOffset;
    /* 0x0000 */ const int pool_metadata_idOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x04e0 */
}; /* size: 0x02e8 */

class Spinlock<29,19,1>
{
}; /* size: 0x0004 */

class XeSosPkg::memory_broker_clerks_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1474[140];
      /* 0x0240 */ unsigned char m_buf[92];
    }; /* size: 0x006c */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int total_pagesOffset;
    /* 0x0000 */ const int simulated_pagesOffset;
    /* 0x0000 */ const int simulation_benefitOffset;
    /* 0x0000 */ const int internal_benefitOffset;
    /* 0x0000 */ const int external_benefitOffset;
    /* 0x0000 */ const int value_of_memoryOffset;
    /* 0x0000 */ const int periodic_freed_pagesOffset;
    /* 0x0000 */ const int internal_freed_pagesOffset;
    /* 0x0000 */ const int clerk_nameOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0300 */
}; /* size: 0x02a0 */

struct StaticStorage<0>
{
  /* 0x0000 */ unsigned int m_buf[1];
}; /* size: 0x0004 */

class XeSosPkg::exception_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1475[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int user_definedOffset;
    /* 0x0000 */ const int originOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

typedef struct _IO_STATUS_BLOCK
{
  union
  {
    /* 0x0000 */ long Status;
    /* 0x0000 */ void* Pointer;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned __int64 Information;
} IO_STATUS_BLOCK, *PIO_STATUS_BLOCK; /* size: 0x0010 */

class XeSosPkg::memory_broker_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1476[140];
      /* 0x0240 */ unsigned char m_buf[96];
    }; /* size: 0x0070 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int delta_timeOffset;
    /* 0x0000 */ const int memory_ratioOffset;
    /* 0x0000 */ const int new_targetOffset;
    /* 0x0000 */ const int overallOffset;
    /* 0x0000 */ const int rateOffset;
    /* 0x0000 */ const int currently_predicatedOffset;
    /* 0x0000 */ const int currently_allocatedOffset;
    /* 0x0000 */ const int previously_allocatedOffset;
    /* 0x0000 */ const int brokerOffset;
    /* 0x0000 */ const int notificationOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0328 */
}; /* size: 0x02a0 */

class XeSosPkg::scheduler_online_state_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1477[140];
      /* 0x0240 */ unsigned char m_buf[5];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int is_onlineOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

typedef struct _PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long BufferLength;
  /* 0x0008 */ void* Buffer;
} PLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA, *PPLUGPLAY_CONTROL_BLOCKED_DRIVER_DATA; /* size: 0x0010 */

class TList<GroupList,SOS_ResourceGroup,16,TListSLock>
{
  /* 0x0000 */ long Padding_1478[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class ISOSHost_NodeImpl
{
}; /* size: 0x38c8 */

typedef struct _FILE_IO_COMPLETION_INFORMATION
{
  /* 0x0000 */ void* KeyContext;
  /* 0x0008 */ void* ApcContext;
  /* 0x0010 */ struct _IO_STATUS_BLOCK IoStatusBlock;
} FILE_IO_COMPLETION_INFORMATION, *PFILE_IO_COMPLETION_INFORMATION; /* size: 0x0020 */

class MemoryNodeManager
{
  union
  {
    struct
    {
      /* 0x0000 */ class MemoryNodeList m_memoryNodeList;
      /* 0x0018 */ volatile long m_memBufferSize;
      /* 0x001c */ long Padding_1479;
      /* 0x0020 */ void* m_memBuffer;
      /* 0x0028 */ volatile long m_nextMemNodeId;
      /* 0x002c */ long Padding_1480;
      /* 0x0030 */ class MemoryNode* m_nodes[65];
    }; /* size: 0x0230 */
    /* 0x0000 */ const volatile long sm_maxMemoryNodeId;
  }; /* size: 0x0230 */
}; /* size: 0x0238 */

class CSerializeContext<CMemBufFormatter>::LocalStorage<16>
{
  /* 0x0000 */ const void* m_rgStore[16];
}; /* size: 0x0080 */

class CSerializeContext<CMemBufFormatter>
{
  union
  {
    struct
    {
      /* 0x0000 */ class CMemBufFormatter* m_formatter;
      /* 0x0008 */ class IMemObj* m_memObj;
    }; /* size: 0x0010 */
    /* 0x0000 */ const unsigned int xsm_pageSize;
    /* 0x0000 */ const unsigned int xsm_pointersOnPage;
    /* 0x0000 */ const unsigned int xsm_pointersMax;
    /* 0x0000 */ const unsigned int xsm_maxOverflowPerDirPage;
    /* 0x0000 */ const unsigned int xsm_pagesMax;
    /* 0x0000 */ const unsigned int xsm_overflowPagesMax;
    /* 0x0000 */ const unsigned int xsm_pointersOnPageShift;
    /* 0x0000 */ const unsigned int xsm_maxOverflowPerDirPageShift;
    /* 0x0000 */ const unsigned int xsm_overflowPagesMaxShift;
  }; /* size: 0x0010 */
  /* 0x0010 */ const void** m_pageDir[984];
  /* 0x1ed0 */ unsigned int m_cpMap;
  /* 0x1ed4 */ long Padding_1481;
  /* 0x1ed8 */ const void*** m_rgpMap;
  /* 0x1ee0 */ unsigned int m_cpMapOverflow;
  /* 0x1ee4 */ unsigned int m_numOverflowPages;
  /* 0x1ee8 */ const void*** m_rgpMapOverflowPage;
  /* 0x1ef0 */ class PageAllocator* m_mapPageAllocator;
  /* 0x1ef8 */ enum AllocatorType m_allocatorType;
  /* 0x1efc */ long Padding_1482;
  /* 0x1f00 */ class CSerializeContext<CMemBufFormatter>::LocalStorage<16> m_localStorage;
  /* 0x1f80 */ class SOS_TraceStream& m_outStream;
  /* 0x1f88 */ enum CSerializeContext<CMemBufFormatter>::DESERIALIZE_MODES m_deSerializeMode;
  /* 0x1f8c */ long Padding_1483;
  /* 0x1f90 */ class CSerializeParam* m_serializeParam;
  /* 0x1f98 */ unsigned int* m_versionVector;
}; /* size: 0x1fa0 */

class SOS_CacheEntry
{
}; /* size: 0x00b0 */

class EventAutoInternal<PaddedSpinlock<SuspendQueueSLock> >;

class AutoSpinlockHolder<313,1,1>;

class TCallbackListBase<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

class TypeListNode<unsigned long,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_ACPI_AUDIT_INFORMATION
{
  /* 0x0000 */ unsigned long RsdpCount;
  struct /* bitfield */
  {
    /* 0x0004 */ unsigned long SameRsdt : 1; /* bit position: 0 */
    /* 0x0004 */ unsigned long SlicPresent : 1; /* bit position: 1 */
    /* 0x0004 */ unsigned long SlicDifferent : 1; /* bit position: 2 */
  }; /* bitfield */
} SYSTEM_ACPI_AUDIT_INFORMATION, *PSYSTEM_ACPI_AUDIT_INFORMATION; /* size: 0x0008 */

class DmpPointer<CFixedInfo>
{
  /* 0x0000 */ class CFixedInfo* m_pRaw;
}; /* size: 0x0008 */

class SOSHost_OSAffinityChangeCallback
{
}; /* size: 0x0038 */

struct CSerializeContext<CMemBufFormatter>::NativeTypeFormatter
{
}; /* size: 0x0001 */

class DumpSEListIterator<SEList<PageHeapPageInfo,40>,512>
{
}; /* size: 0x0020 */

class DmpPointer<PageHeapMemObj>
{
  /* 0x0000 */ class PageHeapMemObj* m_pRaw;
}; /* size: 0x0008 */

typedef struct _CLUSTER_READ_BATCH_COMMAND
{
  /* 0x0000 */ enum _CLUSTER_REG_COMMAND Command;
  /* 0x0004 */ unsigned long dwOptions;
  /* 0x0008 */ const wchar_t* wzSubkeyName;
  /* 0x0010 */ const wchar_t* wzValueName;
  /* 0x0018 */ const unsigned char* lpData;
  /* 0x0020 */ unsigned long cbData;
  /* 0x0024 */ long __PADDING__[1];
} CLUSTER_READ_BATCH_COMMAND, *PCLUSTER_READ_BATCH_COMMAND; /* size: 0x0028 */

class PerCPUDataBase<SOS_MemoryBlockAllocator::ActivePartition>
{
}; /* size: 0x0010 */

class IfNullTypeZeroElseOne<SOS_DispatcherBase const * const>
{
}; /* size: 0x0001 */

class PerCPUDataBase<SOS_MemoryBlockAllocator::ActivePartition>::Enum;

struct IdentitySLock
{
}; /* size: 0x0004 */

class LocalStorageCache
{
  /* 0x0000 */ void* m_rgStore[18];
}; /* size: 0x0090 */

class OSF_Tracing
{
}; /* size: 0x0001 */

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_1484;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pList;
}; /* size: 0x0020 */

class DkParametersEnum
{
  /* 0x0000 */ class DkParameter* m_currentEnumParameter;
  /* 0x0008 */ enum DkParametersEnum::EnumFilter m_filter;
  /* 0x000c */ long Padding_1485;
  /* 0x0010 */ const class SEList<DkParameter,0>& m_list;
}; /* size: 0x0018 */

class AutoSpinlockHolder<85,13,1>;

class DmpPointer<Worker>
{
  /* 0x0000 */ class Worker* m_pRaw;
}; /* size: 0x0008 */

typedef struct _FILESHARE_CHANGE
{
  /* 0x0000 */ enum _FILESHARE_CHANGE_ENUM Change;
  /* 0x0004 */ wchar_t ShareName[84];
} FILESHARE_CHANGE, *PFILESHARE_CHANGE; /* size: 0x00ac */

class SchedulerPoolData
{
  union
  {
    /* 0x0000 */ const unsigned long x_minCpuGranularity;
    /* 0x0000 */ unsigned __int64 m_usedMask;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct PoolData m_poolData[64];
  /* 0x0808 */ unsigned long m_cpuIdle;
  /* 0x080c */ unsigned long m_cpuUser;
  /* 0x0810 */ unsigned long m_totalRunnable;
  /* 0x0814 */ unsigned long m_totalRunnableGroups;
  /* 0x0818 */ unsigned long m_totalRunnablePools;
  /* 0x081c */ long Padding_1486;
  /* 0x0820 */ __int64 m_lastUnitExtracted;
  /* 0x0828 */ unsigned __int64 m_cpuCalculationHistory[64];
  /* 0x0a28 */ unsigned __int64 m_cpuNonGovernedHistory[64];
  /* 0x0c28 */ unsigned long m_sampleCount;
}; /* size: 0x0c30 */

class SOS_NodeEnum
{
}; /* size: 0x0028 */

class DumpCallbackSOSBase
{
}; /* size: 0x0001 */

class ISOSHost_TaskAutoSwitchLazyPreemptiveHelper
{
  /* 0x0000 */ struct ISOSHost* const m_pISOSHost;
  /* 0x0008 */ void* const m_pvBuf;
}; /* size: 0x0010 */

struct GlobalTraceFlagsSLock
{
}; /* size: 0x0004 */

struct CGlobalTraceFlags::DeclaredFlag
{
  /* 0x0000 */ unsigned short m_flag;
  /* 0x0002 */ char Padding_1487[2];
  /* 0x0004 */ enum CGlobalTraceFlags::FlagKind m_presence;
  /* 0x0008 */ int m_isStartup;
  /* 0x000c */ int m_isDbcc;
  /* 0x0010 */ int m_isLocal;
}; /* size: 0x0014 */

class CGlobalTraceFlags
{
  union
  {
    /* 0x0000 */ class CGlobalTraceFlags _singleton;
    /* 0x0000 */ const int x_cbUlTraceFlags;
    /* 0x0000 */ unsigned char x_rgUlTraceFlagsMatrix[1288];
    /* 0x0000 */ unsigned char x_rgUlTraceFlagsBrick[1288];
    /* 0x0000 */ struct GlobalTraceFlagsSLock sm_slock;
    /* 0x0000 */ struct CGlobalTraceFlags::DeclaredFlag* sm_declaredFlags /* zero-length array */;
  }; /* size: 0x0508 */
}; /* size: 0x0001 */

class AutoCallPrePostNode<NullType>
{
}; /* size: 0x0001 */

class DmpPointer<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >
{
  /* 0x0000 */ class TList<SOS_Node,SOS_RingBuffer,0,TListSLock>* m_pRaw;
}; /* size: 0x0008 */

class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;

typedef struct _FILE_PIPE_INFORMATION
{
  /* 0x0000 */ unsigned long ReadMode;
  /* 0x0004 */ unsigned long CompletionMode;
} FILE_PIPE_INFORMATION, *PFILE_PIPE_INFORMATION; /* size: 0x0008 */

class DmpPointer<TlsSlotInfo>
{
  /* 0x0000 */ struct TlsSlotInfo* m_pRaw;
}; /* size: 0x0008 */

class SEListEnum<eXcursionEntry,16>;

typedef struct _USE_INFO_3
{
  /* 0x0000 */ struct _USE_INFO_2 ui3_ui2;
  /* 0x0038 */ unsigned long ui3_flags;
  /* 0x003c */ long __PADDING__[1];
} USE_INFO_3, *PUSE_INFO_3; /* size: 0x0040 */

class SEListEnum<SOS_ParentBlockDescriptor,16>;

class SpinlockHolder<138,4,1>;

typedef struct _EX_ATTRIBUTE_INFORMATION_REGISTRATION
{
  /* 0x0000 */ void* QueryRoutine /* function */;
  /* 0x0008 */ void* SetRoutine /* function */;
} EX_ATTRIBUTE_INFORMATION_REGISTRATION, *PEX_ATTRIBUTE_INFORMATION_REGISTRATION; /* size: 0x0010 */

class DispatcherConfigSample
{
  /* 0x0000 */ const int IsCpuBound;
}; /* size: 0x0001 */

class UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

class AutoSpinlockHolder<28,19,1>;

struct SharableSessionObjectsSLock
{
}; /* size: 0x0004 */

struct IoRgVolumeHashTableSLock
{
}; /* size: 0x0004 */

class TSimpleHashTable<IORGHashTableEntry,IoRgVolumeHashTableSLock,248,unsigned int>::Bucket
{
  /* 0x0000 */ class SEListSized<IORGHashTableEntry,248> m_lst;
  /* 0x0018 */ struct IoRgVolumeHashTableSLock m_slock;
  /* 0x001c */ unsigned short m_historyCount;
  /* 0x001e */ unsigned short m_maxLen;
}; /* size: 0x0020 */

class DmpPointer<PoolList>
{
  /* 0x0000 */ class PoolList* m_pRaw;
}; /* size: 0x0008 */

struct XE_TArray<XEMap *,6>
{
  /* 0x0000 */ struct XEMap* m_array[6];
}; /* size: 0x0030 */

class DmpPointer<SOS_ResourcePool>
{
  /* 0x0000 */ class SOS_ResourcePool* m_pRaw;
}; /* size: 0x0008 */

struct SOS_MemoryBlockAllocator::ActivePartition
{
  /* 0x0000 */ class SOS_ParentBlockDescriptor* m_activeParentBlock;
  /* 0x0008 */ struct ActiveDescriptorSLock m_blockLock;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

class IElementVisitor
{
}; /* size: 0x0008 */

class DmpPointer<MemoryNode>
{
  /* 0x0000 */ class MemoryNode* m_pRaw;
}; /* size: 0x0008 */

class DumpSEListIterator<SEList<SOS_ResourceGroup,16>,512>
{
}; /* size: 0x0020 */

class SOSHost_IOCompRequest
{
  /* 0x0000 */ long Padding_1488[36];
  /* 0x0090 */ void* m_pRealCompRoutine /* function */;
  /* 0x0098 */ class SOSHost* m_pHost;
}; /* size: 0x00a0 */

typedef struct _SECTION_IMAGE_INFORMATION
{
  /* 0x0000 */ void* TransferAddress;
  /* 0x0008 */ unsigned long ZeroBits;
  /* 0x000c */ long Padding_1489;
  /* 0x0010 */ unsigned __int64 MaximumStackSize;
  /* 0x0018 */ unsigned __int64 CommittedStackSize;
  /* 0x0020 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0024 */ unsigned short SubSystemMinorVersion;
      /* 0x0026 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0024 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  /* 0x0028 */ unsigned long GpValue;
  /* 0x002c */ unsigned short ImageCharacteristics;
  /* 0x002e */ unsigned short DllCharacteristics;
  /* 0x0030 */ unsigned short Machine;
  /* 0x0032 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0033 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0033 */ unsigned char ComPlusNativeReady : 1; /* bit position: 0 */
      /* 0x0033 */ unsigned char ComPlusILOnly : 1; /* bit position: 1 */
      /* 0x0033 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 2 */
      /* 0x0033 */ unsigned char ImageMappedFlat : 1; /* bit position: 3 */
      /* 0x0033 */ unsigned char BaseBelow4gb : 1; /* bit position: 4 */
      /* 0x0033 */ unsigned char Reserved : 3; /* bit position: 5 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0034 */ unsigned long LoaderFlags;
  /* 0x0038 */ unsigned long ImageFileSize;
  /* 0x003c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION, *PSECTION_IMAGE_INFORMATION; /* size: 0x0040 */

typedef struct _RTL_USER_PROCESS_INFORMATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_1490;
  /* 0x0008 */ void* Process;
  /* 0x0010 */ void* Thread;
  /* 0x0018 */ struct _CLIENT_ID ClientId;
  /* 0x0028 */ struct _SECTION_IMAGE_INFORMATION ImageInformation;
} RTL_USER_PROCESS_INFORMATION, *PRTL_USER_PROCESS_INFORMATION; /* size: 0x0068 */

class SOS_LargeCacheStore
{
  /* 0x0000 */ long Padding_1491[23286];
  /* 0x16bd8 */ unsigned int m_testHooks;
}; /* size: 0x16c00 */

class Spinlock<92,11,1>
{
}; /* size: 0x0004 */

class SEList<SOS_Task,320>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEQueue<SOS_Task,320>
{
  /* 0x0000 */ class SEList<SOS_Task,320> m_selist;
}; /* size: 0x0010 */

class AutoSpinlockHolder<74,16,1>;

class SOS_NodeEnumFromMemNode
{
}; /* size: 0x0010 */

class CallProtectorImpl
{
}; /* size: 0x0001 */

class XeSqlPkg::cursor_manager_cursor_plan_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1492[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::databases_log_cache_read
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1493[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class SOS_ObjectStoreDescriptorList
{
}; /* size: 0x0010 */

struct LogonTriggerCacheSLock
{
}; /* size: 0x0004 */

class SEListEnum<AlignedSmallPageAllocator::PageInfo,16>;

class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>,void,void *,SOS_Node *,unsigned __int64,unsigned __int64>
{
  /* 0x0000 */ long Padding_1494[12];
  /* 0x0030 */ void* m_pv;
}; /* size: 0x0038 */

class DmpListIterator<Worker,8,16,SEList<Worker,16>,8,2048>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class TList<MemoryNodeList,MemoryNode,0,TListSLock>
{
  /* 0x0000 */ long Padding_1495[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class ErrMsgsBase
{
  /* 0x0000 */ class SEList<ErrMsg,24> m_msgs;
  /* 0x0010 */ class IMemObj* m_pmo;
}; /* size: 0x0018 */

class DmpPointer<unsigned short>
{
  /* 0x0000 */ unsigned short* m_pRaw;
}; /* size: 0x0008 */

class SOS_AutoEnableThreadPriorityBoost
{
  /* 0x0000 */ int m_boostAlreadyDisabled;
}; /* size: 0x0004 */

class XeSqlPkg::user_settable
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1496[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int user_counterOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0258 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>
{
  /* 0x0000 */ long Padding_1497[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class XeSqlPkg::cursor_manager_cursor_worktable_use_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1498[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class DmpPointer<SEShortStack<SOS_ExternalAutoWait,6> >
{
  /* 0x0000 */ class SEShortStack<SOS_ExternalAutoWait,6>* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOS_Task::Param>
{
  /* 0x0000 */ class SOS_Task::Param* m_pRaw;
}; /* size: 0x0008 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

typedef struct _CM_EISA_SLOT_INFORMATION
{
  /* 0x0000 */ unsigned char ReturnCode;
  /* 0x0001 */ unsigned char ReturnFlags;
  /* 0x0002 */ unsigned char MajorRevision;
  /* 0x0003 */ unsigned char MinorRevision;
  /* 0x0004 */ unsigned short Checksum;
  /* 0x0006 */ unsigned char NumberFunctions;
  /* 0x0007 */ unsigned char FunctionInformation;
  /* 0x0008 */ unsigned long CompressedId;
} CM_EISA_SLOT_INFORMATION, *PCM_EISA_SLOT_INFORMATION; /* size: 0x000c */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<long,void *,enum Worker::CallbackType,NullType,NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class DmpPointer<void>
{
  /* 0x0000 */ void* m_pRaw;
}; /* size: 0x0008 */

class TCallbackBase<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType> >,long,void *,enum Worker::CallbackType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class SpinlockHolder<140,4,1>;

class Spinlock<47,18,1>
{
}; /* size: 0x0004 */

class CAutoBase<DkParameter *>
{
  /* 0x0000 */ class DkParameter** m_pt;
}; /* size: 0x0008 */

class AutoSpinlockHolder<246,1,1>;

class CIncInfo::CIncSizeBlock::Enum
{
  /* 0x0000 */ unsigned char* m_endOfPage;
  /* 0x0008 */ unsigned short* m_slot;
  /* 0x0010 */ unsigned __int64 m_userSize;
  /* 0x0018 */ unsigned char* m_userAddress;
}; /* size: 0x0020 */

class AutoSpinlockHolder<80,13,1>;

class CFnCompNames
{
}; /* size: 0x0001 */

class ResourceInventory
{
  /* 0x0000 */ class SOS_CacheStore* m_pStore;
  /* 0x0008 */ class StackFramesStore* m_pStackFramesStore;
  /* 0x0010 */ volatile long m_resourcesInUse;
}; /* size: 0x0018 */

class TListElem<TList<SchedulerManager,Worker,16,TListSLock> >
{
  /* 0x0000 */ long Padding_1499[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1500;
  /* 0x0018 */ class SchedulerManager* m_pList;
}; /* size: 0x0020 */

class DmpPointer<SEList<SOS_Scheduler,8> >
{
  /* 0x0000 */ class SEList<SOS_Scheduler,8>* m_pRaw;
}; /* size: 0x0008 */

class TListElem<TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock> >
{
  /* 0x0000 */ long Padding_1501[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1502;
  /* 0x0018 */ class ResourceClerkList* m_pList;
}; /* size: 0x0020 */

class SpinlockHolder<41,1,1>;

class TListElem<TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock> >
{
  /* 0x0000 */ long Padding_1503[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1504;
  /* 0x0018 */ class SOS_Node* m_pList;
}; /* size: 0x0020 */

class SEListEnum<SOS_Scheduler,8>;

class TList<SOS_Node,SOS_RingBuffer,0,TListSLock>
{
  /* 0x0000 */ long Padding_1505[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

struct ISOSHost_EventAuto_Prev0
{
}; /* size: 0x0008 */

class SOSExceptionStandardTranslatorSetter
{
}; /* size: 0x0008 */

class SEQueue<Worker,0>
{
  /* 0x0000 */ class SEList<Worker,0> m_selist;
}; /* size: 0x0010 */

class TListElem<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >
{
  /* 0x0000 */ long Padding_1506[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1507;
  /* 0x0018 */ class SOS_Node* m_pList;
}; /* size: 0x0020 */

class SEListEnum<Worker,16>;

class TCacheStoreEntriesEnum<CacheProbabilisticAlgorithm>
{
}; /* size: 0x0028 */

struct HttpSLock
{
}; /* size: 0x0004 */

class SpinlockBase::SpinInfo
{
  /* 0x0000 */ enum SPINLOCK_TYPE m_type;
  /* 0x0004 */ long Padding_1508;
  /* 0x0008 */ class Worker* m_pWorker;
  /* 0x0010 */ class SOS_Node* m_pNode;
  /* 0x0018 */ class SpinlockStat* m_pStat;
  /* 0x0020 */ unsigned int m_backoffs;
  /* 0x0024 */ long Padding_1509;
  /* 0x0028 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastLongBackoffTime;
}; /* size: 0x0030 */

class XTList<ProbCostData>
{
  /* 0x0000 */ long Padding_1510[12];
  /* 0x0030 */ unsigned int m_entryCount;
}; /* size: 0x0038 */

struct SMemObjInfo
{
  /* 0x0000 */ void* iID;
  /* 0x0008 */ int cPages;
  /* 0x000c */ long Padding_1511;
  /* 0x0010 */ __int64 cBytes;
  /* 0x0018 */ int cchName;
  /* 0x001c */ long Padding_1512;
  /* 0x0020 */ char* szName;
  /* 0x0028 */ void* stackTrace;
  /* 0x0030 */ struct _FILETIME creationTime;
}; /* size: 0x0038 */

class TListElem<TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock> >
{
  /* 0x0000 */ long Padding_1513[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1514;
  /* 0x0018 */ class MemObjProxyLinkList* m_pList;
}; /* size: 0x0020 */

struct BackupSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<48,18,1>;

struct $_TypeDescriptor$_extraBytes_23
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[23];
}; /* size: 0x0027 */

class AutoCallThis<TypeListNode<ExtIntCodeProtector<1>,NullType> >
{
  /* 0x0000 */ class StateProtectorNode<TypeListNode<ExtIntCodeProtector<1>,NullType> >* m_pState;
}; /* size: 0x0008 */

struct TransmitterTransportUsersSLock
{
}; /* size: 0x0004 */

class StateProtectorNode<TypeListNode<ExtIntCodeProtector<1>,NullType> >
{
}; /* size: 0x0004 */

class TCacheStoreEntriesEnum<CacheClockAlgorithm>
{
}; /* size: 0x0028 */

struct XE_TMap<3>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[3];
  }; /* size: 0x0030 */
  /* 0x0030 */ struct XEMap m_map;
}; /* size: 0x0060 */

class TEnumerator<TList<NodeManager,SOS_Node,16,TListSLock> >
{
  /* 0x0000 */ class SOS_Node* m_currentObject;
  /* 0x0008 */ class SOS_Node* m_lastObjectSeen;
  /* 0x0010 */ class TList<NodeManager,SOS_Node,16,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class TList<NodeManager,SOS_Node,16,TListSLock>
{
  /* 0x0000 */ long Padding_1515[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

struct WorkerExceptInfo
{
  /* 0x0000 */ long number;
  /* 0x0004 */ long severity;
  /* 0x0008 */ void* address;
}; /* size: 0x0010 */

class TCallbackBaseWithParam<UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >,long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType>
{
  /* 0x0000 */ long Padding_1516[6];
  /* 0x0018 */ void* m_pv;
}; /* size: 0x0020 */

class ISOSHost_IOCompRequestImpl
{
  /* 0x0000 */ long Padding_1517[42];
  /* 0x00a8 */ void* m_pRealCompRoutine /* function */;
}; /* size: 0x00b0 */

class CVariableInfo::CVarBlock
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char m_btUsed : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned char m_btType : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned char m_btNeedsZeroing : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned char m_btLargePage : 1; /* bit position: 3 */
  }; /* bitfield */
  /* 0x0001 */ char Padding_1518;
  /* 0x0002 */ unsigned short m_cbUserLengthCorr;
  /* 0x0004 */ unsigned long m_cbPrevBlockLen;
  /* 0x0008 */ unsigned long m_cbBlockLength;
  /* 0x000c */ long Padding_1519;
  /* 0x0010 */ class CVariableInfo::CVarBlock* m_pvbPrev;
  /* 0x0018 */ class CVariableInfo::CVarBlock* m_pvbNext;
}; /* size: 0x0020 */

struct XE_TArray<XEEvent *,402>
{
  /* 0x0000 */ struct XEEvent* m_array[402];
}; /* size: 0x0c90 */

class ShortStackException
{
}; /* size: 0x0001 */

class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >
{
}; /* size: 0x0001 */

class DmpPointer<MemoryPoolManager>
{
  /* 0x0000 */ class MemoryPoolManager* m_pRaw;
}; /* size: 0x0008 */

class UnsafeCallbackTraits<TCallbackWithParam<long,void *,enum SOS_Task::TASK_CALLBACK_TYPE,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

struct XE_TMap<4>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[4];
  }; /* size: 0x0040 */
  /* 0x0040 */ struct XEMap m_map;
}; /* size: 0x0070 */

typedef struct _PROCESSOR_IDLE_STATES
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Revision;
  /* 0x0008 */ unsigned long Count;
  /* 0x000c */ unsigned long Type;
  /* 0x0010 */ unsigned __int64 TargetProcessors;
  /* 0x0018 */ struct _PROCESSOR_IDLE_STATE State[1];
} PROCESSOR_IDLE_STATES, *PPROCESSOR_IDLE_STATES; /* size: 0x0038 */

class DumpTListIterator<TList<SOS_Node,SOS_RingBuffer,0,TListSLock>,512>
{
}; /* size: 0x0020 */

struct ICommand
{
}; /* size: 0x0008 */

struct MatrixDvmPriorityQueueSLock
{
}; /* size: 0x0004 */

class WaitForGraphStronglyConnectedComponent::CostingProperties
{
  /* 0x0000 */ long Padding_1520[2];
  /* 0x0008 */ BOOL m_FMinCostVidValid;
  /* 0x0009 */ char Padding_1521[3];
  /* 0x000c */ unsigned int m_MinCostVid;
  /* 0x0010 */ unsigned int m_NumExcludedVertices;
  /* 0x0014 */ unsigned int m_NumExcludedCostableVertices;
}; /* size: 0x0018 */

class WaitForGraphStronglyConnectedComponent
{
  /* 0x0000 */ long Padding_1522[2];
  /* 0x0008 */ class WaitForGraph* m_PWaitForGraph;
  /* 0x0010 */ unsigned int m_Id;
  /* 0x0014 */ unsigned int m_Size;
  /* 0x0018 */ unsigned int m_NumCostableVertices;
  /* 0x001c */ long Padding_1523;
  /* 0x0020 */ class WaitForGraphStronglyConnectedComponent::CostingProperties m_persistentCostingProperties;
  /* 0x0038 */ class WaitForGraphStronglyConnectedComponent::CostingProperties m_tempCostingProperties;
}; /* size: 0x0050 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,NullType,NullType,NullType,NullType> >,void,NullType,NullType,NullType,NullType>::ArgCountDiscriminator<0>::FuncPtr<void,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

class IORGHashTableEntry
{
  /* 0x0000 */ long Padding_1524[62];
  /* 0x00f8 */ class SEListElem m_link;
  /* 0x0108 */ class IORGHashTableEntry* m_ParentEntry;
  /* 0x0110 */ class IORGHashTableKey m_key;
}; /* size: 0x0118 */

struct ISOSHost_SharedMemory
{
}; /* size: 0x0008 */

class CAutoMalloc<unsigned short>
{
}; /* size: 0x0008 */

class DkParameter
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ const struct DkParameterMetadata* m_metadata;
  /* 0x0018 */ unsigned int m_uintArg;
  /* 0x001c */ long Padding_1525;
  /* 0x0020 */ double m_floatArg;
  /* 0x0028 */ class CAutoMalloc<unsigned short> m_stringArg;
  /* 0x0030 */ unsigned int m_stringArgSizeInWChars;
  /* 0x0034 */ int m_position;
  /* 0x0038 */ class CAutoMalloc<unsigned short> m_expression;
  /* 0x0040 */ enum DkParameter::DkParameterStatus m_status;
  /* 0x0044 */ BOOL m_argumentPresent;
  /* 0x0045 */ char Padding_1526[3];
  /* 0x0048 */ const wchar_t* m_reason;
  /* 0x0050 */ HRESULT m_hr;
}; /* size: 0x0058 */

typedef struct _MUILANGCFGLIST
{
  /* 0x0000 */ unsigned int TotalSize;
  /* 0x0004 */ unsigned short NumLanguages;
  /* 0x0006 */ unsigned short MaxNumLanguages;
  /* 0x0008 */ struct _MUILANGCFGNODE* LanguageConfigs;
} MUILANGCFGLIST, *PMUILANGCFGLIST; /* size: 0x0010 */

class SOSHost_Task
{
}; /* size: 0x03d0 */

class IfNullTypeZeroElseOne<unsigned long>
{
}; /* size: 0x0001 */

class Spinlock<255,1,1>
{
}; /* size: 0x0004 */

class SystemThreadPool::SystemThreadBlock
{
  /* 0x0000 */ const unsigned int SystemThreadsPerBlock;
  /* 0x0004 */ long Padding_1527;
  /* 0x0008 */ struct XBitmap<StaticStorage<64> > m_records;
  /* 0x0010 */ unsigned char m_storage[19968];
}; /* size: 0x4e10 */

struct $_TypeDescriptor$_extraBytes_20
{
  /* 0x0000 */ const void* pVFTable;
  /* 0x0008 */ void* spare;
  /* 0x0010 */ char name[20];
}; /* size: 0x0024 */

class Spinlock<329,1,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<233,1,1>;

class NoExceptionPmoAllocator
{
}; /* size: 0x0008 */

class TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>
{
}; /* size: 0x0030 */

class AutoSwitchLazyPreemptive
{
  /* 0x0000 */ int m_fMakeSwitch;
  /* 0x0004 */ long Padding_1528;
  /* 0x0008 */ class Worker* m_pWorker;
  /* 0x0010 */ class SOS_Scheduler* m_pScheduler;
}; /* size: 0x0018 */

class SOSHost_TaskAutoSwitchLazyPreemptive
{
  /* 0x0000 */ class AutoSwitchLazyPreemptive m_nativeAutoSwitch;
}; /* size: 0x0018 */

class DmpListIterator<SOS_Node,8,16,SEList<SOS_Node,16>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class HostManager
{
  /* 0x0000 */ long Padding_1529[6];
  /* 0x0018 */ class IMemObj* m_pMemObj;
}; /* size: 0x0020 */

class MemoryObjectFactory
{
}; /* size: 0x0001 */

struct MemoryObjectFactory::MemObjUsesFree<CMemProc>
{
}; /* size: 0x0001 */

class DumpSEListIterator<SEList<SOS_Node,16>,512>
{
}; /* size: 0x0020 */

class DumpSEListIterator<SEList<SOS_Scheduler,8>,512>
{
}; /* size: 0x0020 */

class Spinlock<291,1,1>
{
}; /* size: 0x0004 */

struct ISOSHostPrev4
{
}; /* size: 0x0008 */

typedef struct _RTL_PROCESS_VERIFIER_OPTIONS
{
  /* 0x0000 */ unsigned long SizeStruct;
  /* 0x0004 */ unsigned long Option;
  /* 0x0008 */ unsigned char OptionData[1];
  /* 0x0009 */ char __PADDING__[3];
} RTL_PROCESS_VERIFIER_OPTIONS, *PRTL_PROCESS_VERIFIER_OPTIONS; /* size: 0x000c */

class Spinlock<253,1,1>
{
}; /* size: 0x0004 */

class DmpPointer<SchedulerManagerList>
{
  /* 0x0000 */ class SchedulerManagerList* m_pRaw;
}; /* size: 0x0008 */

class MemObjControlFlags
{
  /* 0x0000 */ long m_allocationCallCount;
  /* 0x0004 */ long m_failureCount;
  /* 0x0008 */ unsigned long m_memObjFlags;
  /* 0x000c */ int m_useStrictMallocSpy;
  /* 0x0010 */ unsigned long m_failurePercentage;
  /* 0x0014 */ long Padding_1530;
  /* 0x0018 */ unsigned __int64 m_maxFailureSize;
  /* 0x0020 */ unsigned __int64 m_minFailureSize;
  /* 0x0028 */ long m_maxFailureCount;
  /* 0x002c */ long m_minFailureCount;
  /* 0x0030 */ unsigned long m_validationPeriod;
}; /* size: 0x0038 */

struct HoBtDroppedListSLock
{
}; /* size: 0x0004 */

class SOS_ObjectStore
{
  /* 0x0000 */ long Padding_1531[374];
  /* 0x05d8 */ enum SOSHOST_OBJECTSTORE_TYPE m_Type;
  /* 0x05dc */ int m_areSubStoresInitialized;
  /* 0x05e0 */ unsigned int m_numSubStores;
  /* 0x0000 */ const unsigned int NUM_SUBSTORES_EMBEDDED;
  /* 0x0004 */ long Padding_1532[377];
  /* 0x05e8 */ class SOS_ObjectStore::ObjectClockAlgorithm m_clockAlgorithm;
  /* 0x0710 */ class SOS_ObjectStore::ObjectSubStore* m_pSubStores;
  /* 0x0718 */ class SOS_ObjectStore::ObjectSubStore m_optimizedSubStores[2];
  /* 0x0d38 */ wchar_t m_StoreName[64];
}; /* size: 0x0dc0 */

class Spinlock<43,18,1>
{
}; /* size: 0x0004 */

class DmpPointer<SOS_Node>
{
  /* 0x0000 */ class SOS_Node* m_pRaw;
}; /* size: 0x0008 */

class SpinlockHolder<167,3,1>;

struct SEReplQueueCommitListSLock
{
}; /* size: 0x0004 */

class Spinlock<271,1,1>
{
}; /* size: 0x0004 */

struct tagDBLITERALINFO
{
  /* 0x0000 */ wchar_t* pwszLiteralValue;
  /* 0x0008 */ wchar_t* pwszInvalidChars;
  /* 0x0010 */ wchar_t* pwszInvalidStartingChars;
  /* 0x0018 */ unsigned long lt;
  /* 0x001c */ int fSupported;
  /* 0x0020 */ unsigned long cchMaxLen;
  /* 0x0024 */ long __PADDING__[1];
}; /* size: 0x0028 */

struct SOS_ObjectStore::SubStoreDescriptor
{
  /* 0x0000 */ wchar_t m_name[64];
  /* 0x0080 */ unsigned __int64 m_maxEntries;
  /* 0x0088 */ void* m_deactivateCallback /* function */;
}; /* size: 0x0090 */

class TCacheEntry<CacheClockAlgorithm>
{
}; /* size: 0x00b0 */

struct XELiveTargetClientAPI
{
  /* 0x0000 */ struct XEAPI m_header;
  /* 0x0010 */ void* ProcessBuffer /* function */;
  /* 0x0018 */ void* NotifyForcedUnregister /* function */;
  /* 0x0020 */ void* GetName /* function */;
}; /* size: 0x0028 */

class TListElem<TList<HostManager,SOSHost,0,TListSLock> >
{
  /* 0x0000 */ long Padding_1533[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1534;
  /* 0x0018 */ class HostManager* m_pList;
}; /* size: 0x0020 */

class SEList<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class Spinlock<78,14,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<247,1,1>
{
}; /* size: 0x0010 */

class ReturnValueHolder<unsigned long>
{
  /* 0x0000 */ unsigned long m_returnValue;
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_102
{
  /* 0x0000 */ unsigned long sv102_platform_id;
  /* 0x0004 */ long Padding_1535;
  /* 0x0008 */ wchar_t* sv102_name;
  /* 0x0010 */ unsigned long sv102_version_major;
  /* 0x0014 */ unsigned long sv102_version_minor;
  /* 0x0018 */ unsigned long sv102_type;
  /* 0x001c */ long Padding_1536;
  /* 0x0020 */ wchar_t* sv102_comment;
  /* 0x0028 */ unsigned long sv102_users;
  /* 0x002c */ long sv102_disc;
  /* 0x0030 */ int sv102_hidden;
  /* 0x0034 */ unsigned long sv102_announce;
  /* 0x0038 */ unsigned long sv102_anndelta;
  /* 0x003c */ unsigned long sv102_licenses;
  /* 0x0040 */ wchar_t* sv102_userpath;
} SERVER_INFO_102, *PSERVER_INFO_102; /* size: 0x0048 */

class SpinlockHolder<251,1,1>
{
  /* 0x0000 */ class Spinlock<251,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class Spinlock<288,1,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<196,3,1>;

class VolumeIOData
{
  /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_ResTag;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_LimitTag;
  /* 0x0010 */ unsigned __int64 m_ShareIOs;
}; /* size: 0x0018 */

class TypeListSize<TypeListNode<void *,TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > > > >
{
}; /* size: 0x0001 */

class ISOSHost_TaskAutoOnFlagsHelper
{
  /* 0x0000 */ struct ISOSHost* const m_pISOSHost;
  /* 0x0008 */ void* const m_pvBuf;
}; /* size: 0x0010 */

class SpinlockHolder<185,3,1>;

class AutoSpinlockHolder<145,4,1>;

class NoLock
{
}; /* size: 0x0001 */

class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::Elem>* m_pNext;
}; /* size: 0x0010 */

class SOSHost_TaskCallback
{
}; /* size: 0x0020 */

class AutoSpinlockHolder<238,1,1>;

class TList<SOS_Scheduler,SOS_Task,16,TListSLock>
{
  /* 0x0000 */ long Padding_1537[4];
  /* 0x0010 */ struct TListSLock m_lock;
  /* 0x0014 */ unsigned int m_entryCount;
}; /* size: 0x0018 */

class XeCloudMinPkg::set_partition_lock_mode
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1538[140];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x001b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int lock_modeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

struct IRowsetChange
{
}; /* size: 0x0008 */

class SOS_SchedulerMonitorRecord
{
  /* 0x0000 */ unsigned long sm_NumberOfRecords;
  /* 0x0004 */ long Padding_1539[3];
  /* 0x0010 */ enum SOS_SchedulerMonitorRecord::EventType m_Event;
  /* 0x0014 */ unsigned short m_NodeId;
  /* 0x0016 */ char Padding_1540[2];
  /* 0x0018 */ unsigned long m_SchedulerId;
  /* 0x001c */ long Padding_1541;
  /* 0x0020 */ class Worker* m_Worker;
  /* 0x0028 */ __int64 m_Progress;
  /* 0x0030 */ __int64 m_TaskMemoryAllocated;
  /* 0x0038 */ unsigned int m_WorkerUtilization;
  /* 0x003c */ unsigned int m_ProcessUtilization;
  /* 0x0040 */ unsigned int m_SystemIdle;
  /* 0x0044 */ long Padding_1542;
  /* 0x0048 */ __int64 m_KernelTime;
  /* 0x0050 */ __int64 m_UserTime;
  /* 0x0058 */ unsigned long m_PageFaults;
  /* 0x005c */ long Padding_1543;
  /* 0x0060 */ __int64 m_WorkingSetDelta;
  /* 0x0068 */ unsigned long m_MemoryUtilization;
}; /* size: 0x0070 */

struct If<0,CSerializeContext<RPCStream>::ElementalSerializer,CSerializeContext<RPCStream>::ClassSerializer>
{
}; /* size: 0x0001 */

class CCompatLevel
{
  /* 0x0000 */ enum CCompatLevel::compatibilitylevel m_cmpt;
}; /* size: 0x0004 */

class SpinlockHolder<126,7,1>;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

struct CRefCount::ClassName
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

typedef struct _MUICCENTRY
{
  /* 0x0000 */ unsigned int lCultureNameOffset;
  /* 0x0004 */ unsigned int ulCultureID;
  /* 0x0008 */ unsigned long ulLanguageType;
  /* 0x000c */ long Padding_1544;
  /* 0x0010 */ struct _MUICCENTRY* pNeutralCulture;
  /* 0x0018 */ struct _MUICCENTRY* lBaseLanguageIndices[4];
  /* 0x0038 */ int lParentLanguageIndices[4];
} MUICCENTRY, *PMUICCENTRY; /* size: 0x0048 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> >,void,SOS_DispatcherBase const * const,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class XE_LogWriter<XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > >
{
  /* 0x0000 */ volatile long m_BufferLoggedCount;
  /* 0x0004 */ volatile long m_BufferDroppedCount;
  /* 0x0008 */ class XE_MetadataEncoder<XE_FileWriter<XE_FileWriterDefaultPolicy<1,&XEPackage0::DefaultFileExtenstion>,XE_MetadataTracker> > m_encoder;
  /* 0x0070 */ class XE_ILogWriteMessageHandler* const m_msgHandler;
}; /* size: 0x0078 */

class SOSHost_TaskAutoOnFlags
{
  /* 0x0000 */ class Worker::TaskAutoOnFlags m_nativeAutoOnFlags;
}; /* size: 0x0010 */

class SEListEnum<TCacheStore<CacheProbabilisticAlgorithm>::CacheEntryProxy,0>;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

struct ISOSHost_EventAuto
{
}; /* size: 0x0008 */

class Spinlock<52,16,1>
{
}; /* size: 0x0004 */

class RefCountImpl<XList<ProbCostData> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class XEPackage0::CounterTarget::PackageEntry
{
  /* 0x0000 */ class XEPackage0::CounterTarget::Counters m_parts[128];
  /* 0x0c00 */ const struct XEPackageMetadata* const m_pMD;
}; /* size: 0x0c08 */

class AutoChangeDeadlockPriority
{
  /* 0x0000 */ enum SOS_Task::TASK_DEADLOCK_PRIORITY m_oldTaskDeadlockPriority;
  /* 0x0004 */ int m_fSwitched;
}; /* size: 0x0008 */

typedef struct _FILE_FS_VOLUME_FLAGS_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
} FILE_FS_VOLUME_FLAGS_INFORMATION, *PFILE_FS_VOLUME_FLAGS_INFORMATION; /* size: 0x0004 */

class SOSHost_MemoryClerk
{
  /* 0x0000 */ long Padding_1545[408];
  /* 0x0660 */ class SOSClient_MemoryNotificationCallback* m_pNotifyCallback;
  /* 0x0668 */ class SOS_Mutex m_notifyCallbackLock;
}; /* size: 0x06c0 */

class GenericEvent
{
  /* 0x0000 */ unsigned short m_currentAction;
  /* 0x0002 */ char Padding_1546[6];
  /* 0x0008 */ class XE_BufferCollector m_bc;
  /* 0x0230 */ struct XESessionContext* m_currentContext;
  /* 0x0238 */ unsigned int m_stMask;
  /* 0x023c */ enum GenericEvent::PublishResult m_publishResult;
}; /* size: 0x0240 */

class Spinlock<70,16,1>
{
}; /* size: 0x0004 */

class Spinlock<219,2,1>
{
}; /* size: 0x0004 */

class SEListSized<SOS_IOCompRequest,40>
{
  /* 0x0000 */ long Padding_1547[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class SOS_AutoReleaseResourceGroup
{
}; /* size: 0x0008 */

class AutoSpinlockHolder<335,0,1>;

class Spinlock<239,1,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<226,2,1>;

class SOSHost_TaskAutoSwitchPreemptive
{
  /* 0x0000 */ class SOS_Task::AutoSwitchPreemptive m_nativeAutoSwitch;
}; /* size: 0x0060 */

typedef struct _SERVER_INFO_1594
{
  /* 0x0000 */ unsigned long sv1594_requiresecuritysignature;
} SERVER_INFO_1594, *PSERVER_INFO_1594; /* size: 0x0004 */

class Spinlock<68,16,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<177,3,1>;

class ETWProviderSnapshot
{
  /* 0x0000 */ struct _TRACE_GUID_PROPERTIES** m_providers;
  /* 0x0008 */ struct _TRACE_GUID_PROPERTIES* m_pData;
  /* 0x0010 */ unsigned long m_count;
  /* 0x0014 */ unsigned long m_iter;
}; /* size: 0x0018 */

class TListElem<TList<GroupList,SOS_ResourceGroup,16,TListSLock> >
{
  /* 0x0000 */ long Padding_1548[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1549;
  /* 0x0018 */ class GroupList* m_pList;
}; /* size: 0x0020 */

class TypeListNode<SOS_DispatcherBase const * const,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class AutoTraceLock
{
  /* 0x0000 */ class SOS_RecursiveMutex* const m_pMutex;
}; /* size: 0x0008 */

class AutoSpinlockHolder<73,16,1>;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class SOS_AutoAllowNonyield
{
  union
  {
    /* 0x0000 */ const int SOS_LONGSYNCIO_VALVEVALUE;
    /* 0x0000 */ int m_oldState;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1550;
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_startTicks;
  /* 0x0010 */ void* m_fileHandle;
  /* 0x0018 */ void* m_pData;
}; /* size: 0x0020 */

class TypeListNode<unsigned short,TypeListNode<unsigned int,TypeListNode<SchedulerMonitor::ProcessTrack const *,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class SOS_Semaphore
{
  /* 0x0000 */ long m_countAvail;
  /* 0x0004 */ long m_maxCount;
  /* 0x0008 */ struct SuspendQueueSLock m_Lock;
  /* 0x000c */ long Padding_1551;
  /* 0x0010 */ class SOSQueue<Worker,0> m_WaitingWorkers;
}; /* size: 0x0020 */

struct HadrTransportListSLock
{
}; /* size: 0x0004 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_1552[10];
  /* 0x0028 */ void* m_pfn /* function */;
}; /* size: 0x0030 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_1553[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class SOS_StackHashingControl
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

struct BitOrdinal<512>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>,void,unsigned long,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class XeSqlPkg::memory_node_foreign_node_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1554[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class SOS_Tracing
{
}; /* size: 0x0001 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>
{
}; /* size: 0x0020 */

struct BitOrdinal<32>
{
}; /* size: 0x0001 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64>,TListSLock,SOSCallbackEvent>::List
{
}; /* size: 0x0030 */

struct TClassName<float,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>;

struct TClassName<int,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class TEnumerator<TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock> >
{
  /* 0x0000 */ class MemObjProxy* m_currentObject;
  /* 0x0008 */ class MemObjProxy* m_lastObjectSeen;
  /* 0x0010 */ class TList<MemObjProxyLinkList,MemObjProxy,0,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class XeSqlPkg::broker_activation_stored_procedure_invoked
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1555[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct TClassName<unsigned char,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class AutoSpinlockHolder<325,1,1>;

class SOS_UserStoreEntriesEnum
{
}; /* size: 0x0028 */

class XeSqlPkg::catalog_metadata_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1556[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct TClassName<long,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class SOS_SystemThreadEnum
{
}; /* size: 0x0028 */

class SEListEnum<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallbackWithParam<long,void *,enum Worker::CallbackType,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class SpinlockHolder<57,16,1>;

class WParseName
{
  /* 0x0000 */ wchar_t* _wsServer;
  /* 0x0008 */ wchar_t* _wsDatabase;
  /* 0x0010 */ wchar_t* _wsSchema;
  /* 0x0018 */ wchar_t* _wsTable;
  /* 0x0020 */ unsigned long _cwsServer;
  /* 0x0024 */ unsigned long _cwsDatabase;
  /* 0x0028 */ unsigned long _cwsSchema;
  /* 0x002c */ unsigned long _cwsTable;
}; /* size: 0x0030 */

class TEnumerator<TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock> >
{
  /* 0x0000 */ class ResourceClerk* m_currentObject;
  /* 0x0008 */ class ResourceClerk* m_lastObjectSeen;
  /* 0x0010 */ class TList<ResourceClerkList,ResourceClerk,8,ResourceClerkListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class TTemplateInfo<1348,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

class MemoryBrokerConstants
{
  union
  {
    /* 0x0000 */ const double POLE;
    /* 0x0000 */ const unsigned long SWEEP_TIME;
    /* 0x0000 */ const unsigned long MAX_COST_MODEL_INTERVALS;
    /* 0x0000 */ const unsigned long INITIAL_INTERVAL_COUNT;
    /* 0x0000 */ const double THRESHOLD_FOR_SPLITTING;
    /* 0x0000 */ const unsigned long MAX_HISTORY_ENTRIES_PER_BUCKET;
    /* 0x0000 */ const unsigned long MAX_LOW_USE_COUNT_TRACKED;
    /* 0x0000 */ const unsigned long ENTRIES_TO_PROCESS_UNDER_MEM_PRESSURE;
    /* 0x0000 */ const unsigned long SIMULATION_MIN_ENTRIES;
    /* 0x0000 */ const unsigned long SIMULATION_MAX_PERCENT_OF_ACTUAL_SIZE;
    /* 0x0000 */ const unsigned long NumMemoryPressureBenefitCutoff;
    /* 0x0000 */ const unsigned long MAX_CHAINLENGTH_ALLOWED;
    /* 0x0000 */ const double EXTERNAL_PRESSURE_CUTOFF;
    /* 0x0000 */ const unsigned long NUM_POINTS_OF_HISTORY;
    /* 0x0000 */ const unsigned long DOUBLE_TO_UINT64_MULTIPLIER;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

struct NodeAffinityChangeCallbackList
{
}; /* size: 0x0030 */

struct MaxWorkerThreadsChangeCallbackList
{
}; /* size: 0x0030 */

class TCallbackList<TCallback<void,SOS_Task *,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,int *,NullType,NullType,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >
{
}; /* size: 0x0010 */

class TCallbackList<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >
{
}; /* size: 0x0010 */

class SOS_PublicGlobals
{
  union
  {
    /* 0x0000 */ class NodeManager sm_NodeManager;
    /* 0x0000 */ class SmallBitmap sm_WorkerLsBitmap;
    /* 0x0000 */ class SOS_CPUInfo* sm_CPUInfo;
    /* 0x0000 */ class SOS_MemoryNodeInfo sm_MemoryNodeInfo[64];
    /* 0x0000 */ class SOS_NodeInfo sm_SOSNodeInfo[64];
    /* 0x0000 */ class SOS_ResourceManager sm_ResourceManager;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sm_QuantumLengthInMS;
    /* 0x0000 */ class MemoryClerk sm_osMemoryClerk;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sm_IdleTimeOutTicks;
    /* 0x0000 */ class SystemAffinity sm_AffinityMask;
    /* 0x0000 */ class SystemAffinity sm_osSystemAffinity;
    /* 0x0000 */ struct NodeAffinityChangeCallbackList sm_NodeAffinityChangeCallbackList;
    /* 0x0000 */ struct OSAffinityChangeCallbackList sm_OSAffinityChangeCallbackList;
    /* 0x0000 */ struct CpuChangeCallbackList sm_CpuChangeCallbackList;
    /* 0x0000 */ struct MaxWorkerThreadsChangeCallbackList sm_MaxWorkerThreadsChangeCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,SOS_Task *,NullType,NullType,NullType> > sm_SetAbortCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> > sm_NonYieldSchedulerCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> > sm_NonYieldIOCPCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> > sm_DeadlockSchedulerCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> > sm_IdleServerEventCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,int *,NullType,NullType,NullType> > sm_IdleServerCheckCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> > sm_MemUtilizationEffectCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> > sm_NonYieldRMCallbackList;
    /* 0x0000 */ enum WORKER_TYPE sm_WorkerType;
    /* 0x0000 */ void* sm_DumpExceptionHandlerRoutine /* function */;
    /* 0x0000 */ void* sm_OutOfMemoryHandlerRoutine /* function */;
    /* 0x0000 */ int sm_IsHotAddCpuSupportEnabled;
    /* 0x0000 */ int sm_IsHotAddMemorySupportEnabled;
    /* 0x0000 */ int sm_MallocSpyStatus;
    /* 0x0000 */ int sm_Priority;
    /* 0x0000 */ int sm_UseUMS;
    /* 0x0000 */ __int64 sm_SpinCounter;
    /* 0x0000 */ volatile long sm_MinPooledWorkers;
    /* 0x0000 */ short sm_NodeLsSize;
    /* 0x0000 */ short sm_SchedLsSize;
    /* 0x0000 */ struct _SYSTEM_INFO sm_SysInfo;
    /* 0x0000 */ unsigned int sm_MaxWorkers;
    /* 0x0000 */ enum SOS_OS::MaxWorkersConfigType sm_MaxWorkersConfigType;
    /* 0x0000 */ unsigned int sm_WorkersAvailableTotal;
    /* 0x0000 */ unsigned int sm_SchedNum;
    /* 0x0000 */ unsigned __int64 sm_StackSize;
    /* 0x0000 */ void* sm_BootFinalize /* function */;
    /* 0x0000 */ void* sm_NodeInit /* function */;
    /* 0x0000 */ unsigned long sm_cpuCount;
    /* 0x0000 */ unsigned long sm_cpuCountAtStartup;
    /* 0x0000 */ unsigned long sm_IdleTimeOut;
    /* 0x0000 */ unsigned long sm_maxCpuCount;
    /* 0x0000 */ void* sm_ExitRoutine /* function */;
    /* 0x0000 */ void* sm_RaiseExecutionAbortedErrorCallbackRoutine /* function */;
    /* 0x0000 */ void* sm_SwitchCallBackRoutine /* function */;
    /* 0x0000 */ void* sm_BootEvent;
    /* 0x0000 */ void* sm_ProcessSID;
    /* 0x0000 */ class HostManager sm_HostManager;
    /* 0x0000 */ class MemoryNodeManager sm_MemoryNodeManager;
    /* 0x0000 */ class MiniSOSThreadResourcesMgr sm_MiniSOSThreadResourcesMgr;
    /* 0x0000 */ unsigned __int64 sm_CpuTicksPerMillisecond;
    /* 0x0000 */ class TCallbackList<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> > sm_SchedInit;
    /* 0x0000 */ class GlobalSchedulerList sm_GlobalSchedulerList;
    /* 0x0000 */ struct BlockerEnumSLock* sm_lockSlots /* zero-length array */;
    /* 0x0000 */ unsigned char sm_traceFlags[213];
    /* 0x0000 */ const char* sm_MemObjIdsToNames[324];
    /* 0x0000 */ const wchar_t* sm_MemObjIdsToWideNames[324];
    /* 0x0000 */ int sm_memObjControlEnabled;
    /* 0x0000 */ class MemObjControlFlags sm_memObjControlFlags[324];
    /* 0x0000 */ const wchar_t* sm_MemClerkIdsToNames[59];
    /* 0x0000 */ const wchar_t* sm_CacheStoreIdsToNames[46];
    /* 0x0000 */ const wchar_t* sm_ObjectStoreIdsToNames[14];
    /* 0x0000 */ const wchar_t* sm_UserStoreIdsToNames[11];
    /* 0x0000 */ const wchar_t* sm_HostClientIdsToWideNames[69];
    /* 0x0000 */ class MutexEnumCreator sm_Creator;
    /* 0x0000 */ int sm_isIdleDetectionEnabled;
    /* 0x0000 */ unsigned long sm_osStatus;
    /* 0x0000 */ unsigned long sm_osOptions;
    /* 0x0000 */ unsigned long sm_osStats;
    /* 0x0000 */ int sm_isResourceManagerEnabled;
    /* 0x0000 */ __int64 sm_TlsOffset;
    /* 0x0000 */ int sm_CommonCriteriaModeEnabled;
    /* 0x0000 */ volatile long sm_CpuConsumers;
    /* 0x0000 */ const wchar_t* sm_SOS_DISPATCHER_POOL_NAMES[13];
    /* 0x0000 */ const wchar_t* sm_ClockHandWideNames[3];
    /* 0x0000 */ const wchar_t* sm_clockHandStateNames[3];
    /* 0x0000 */ const wchar_t* sm_ringBufferNames[34];
    /* 0x0000 */ const wchar_t* sm_TaskStateIdsToWideNames[7];
    /* 0x0000 */ const wchar_t* sm_workerStateIdsToNames[5];
    /* 0x0000 */ class SOS_MemoryWorkSpace* sm_rgpMemoryWorkSpaces[1];
    /* 0x0000 */ unsigned __int64 sm_excGlobalCookie;
  }; /* size: 0x46e0 */
}; /* size: 0x0001 */

class TEnumerator<TList<SchedulerManager,Worker,16,TListSLock> >
{
  /* 0x0000 */ class Worker* m_currentObject;
  /* 0x0008 */ class Worker* m_lastObjectSeen;
  /* 0x0010 */ class TList<SchedulerManager,Worker,16,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

struct TClassName<char,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class ExtIntCodeProtector<1>
{
  /* 0x0000 */ int m_inExternalCode;
}; /* size: 0x0004 */

struct BitOrdinal<2>
{
}; /* size: 0x0001 */

class CTraceWstr
{
  /* 0x0000 */ const wchar_t* m_wsStr;
  /* 0x0008 */ unsigned long m_cbStr;
}; /* size: 0x0010 */

class YourFormatterTemplate
{
}; /* size: 0x0001 */

struct BitOrdinal<65536>
{
}; /* size: 0x0001 */

class TTemplateInfo<1234,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

class ContextHandle
{
  /* 0x0000 */ const class IContextHandleImpl* m_ContextRoot;
}; /* size: 0x0008 */

class SOS_OS::OSInitializer
{
}; /* size: 0x0001 */

class SOS_OS
{
  union
  {
    /* 0x0000 */ class MemoryNode* sm_InitialMemoryNode;
    /* 0x0000 */ void* sm_GrdExCallBackRoutine /* function */;
    /* 0x0000 */ class TCallbackList<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType> > sm_StuckDispatcherCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,NullType,NullType,NullType,NullType> > sm_ExternalMonitorCallbackList;
    /* 0x0000 */ class TBaseSafeCallbackList<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,unsigned long,NullType,NullType,NullType> > sm_OSThreadCreateDestroyCallbackList;
    /* 0x0000 */ class TCallbackList<TCallback<void,NullType,NullType,NullType,NullType> > sm_ResourceMonitorCallbackList;
    /* 0x0000 */ enum SOS_DBG_BUFFER_TYPE sm_DbgBufferType;
    /* 0x0000 */ __int64 sm_DbgBufferSize;
    /* 0x0000 */ unsigned long sm_ReservedMemorySize;
    /* 0x0000 */ unsigned long sm_MinNUMAMemory;
    /* 0x0000 */ unsigned long sm_OSQuantumLength;
    /* 0x0000 */ unsigned long sm_OSClockInterval;
    /* 0x0000 */ class SOS_RingBuffer* sm_OOMRingBuffer;
    /* 0x0000 */ class SOS_RingBuffer* sm_MemoryBrokerRingBuffer;
    /* 0x0000 */ class SOS_RingBuffer* sm_SchedulerMonitorRingBuffer;
    /* 0x0000 */ volatile long sm_WorkerPressureCount;
    /* 0x0000 */ int sm_ServerIdle;
    /* 0x0000 */ unsigned __int64 sm_MinQuantumLength;
    /* 0x0000 */ class SOS_Node* sm_LastNodeEnqueuedOn;
    /* 0x0000 */ void* sm_FnInitializeProcThreadAttributeList /* function */;
    /* 0x0000 */ void* sm_FnDeleteProcThreadAttributeList /* function */;
    /* 0x0000 */ void* sm_FnUpdateProcThreadAttribute /* function */;
    /* 0x0000 */ void* sm_FnCreateRemoteThreadEx /* function */;
    /* 0x0000 */ long sm_SchedTotal;
    /* 0x0000 */ long sm_HiddenSchedId;
    /* 0x0000 */ class IMemObj* sm_pMemObj;
    /* 0x0000 */ volatile long sm_MaxWorkersBeingCreated;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sm_QuantumThiefLength;
    /* 0x0000 */ void* sm_WorkerInit /* function */;
    /* 0x0000 */ void* sm_KillProcessMutex;
    /* 0x0000 */ class SOS_WaitableAddressManager* sm_pWaitAddrMgr;
    /* 0x0000 */ struct SOS_MemoryConfig sm_memoryConfiguration;
    /* 0x0000 */ void* sm_SetThreadStackGuarantee /* function */;
    /* 0x0000 */ unsigned long sm_ProcessSIDLength;
    /* 0x0000 */ void* sm_NtQuerySystemInformation /* function */;
    /* 0x0000 */ void* sm_GetSystemTimes /* function */;
    /* 0x0000 */ unsigned long* sm_AffinityToCPUInfo;
    /* 0x0000 */ void* sm_pfnSetProcessAffinityUpdateMode /* function */;
    /* 0x0000 */ void* sm_SecurityHandlerRoutine /* function */;
    /* 0x0000 */ void* sm_MaxWorkersLowerBoundViolatedCallbackRoutine /* function */;
    /* 0x0000 */ struct HINSTANCE__* sm_hmodSQLOS;
    /* 0x0000 */ class SOS_OS::OSInitializer sm_OSInitializer;
    /* 0x0000 */ class SOS_OS::QpcInitializer sm_QpcInitializer;
    /* 0x0000 */ struct _OSVERSIONINFOEXW sm_OSVersionInfo;
    /* 0x0000 */ struct SOS_OS::RegistryOSVersion sm_RegistryOSVersion;
  }; /* size: 0x0418 */
}; /* size: 0x0001 */

typedef struct _PUBLIC_OBJECT_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned long Attributes;
  /* 0x0004 */ unsigned long GrantedAccess;
  /* 0x0008 */ unsigned long HandleCount;
  /* 0x000c */ unsigned long PointerCount;
  /* 0x0010 */ unsigned long Reserved[10];
} PUBLIC_OBJECT_BASIC_INFORMATION, *PPUBLIC_OBJECT_BASIC_INFORMATION; /* size: 0x0038 */

struct IsElemental<_GUID>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
{
  /* 0x0000 */ void* Object;
  /* 0x0008 */ unsigned __int64 UniqueProcessId;
  /* 0x0010 */ unsigned __int64 HandleValue;
  /* 0x0018 */ unsigned long GrantedAccess;
  /* 0x001c */ unsigned short CreatorBackTraceIndex;
  /* 0x001e */ unsigned short ObjectTypeIndex;
  /* 0x0020 */ unsigned long HandleAttributes;
  /* 0x0024 */ unsigned long Reserved;
} SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX, *PSYSTEM_HANDLE_TABLE_ENTRY_INFO_EX; /* size: 0x0028 */

class TChildEnumerator<GlobalNodeEnum,SOS_Node,TEnumerator<TList<SOS_Node,SOS_RingBuffer,0,TListSLock> >,SOS_RingBuffer>;

class TTemplateInfo<1224,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

class XeGDMPkg::gdma_lwfg_buffer_publish_lwfg
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1557[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int lwfg_sequence_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdma_activated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1558[143];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
    /* 0x0000 */ const int gdma_addressOffset;
    /* 0x0000 */ const int gdma_task_addressOffset;
  }; /* size: 0x0030 */
}; /* size: 0x0270 */

struct XE_TArray<XEMap *,3>
{
  /* 0x0000 */ struct XEMap* m_array[3];
}; /* size: 0x0018 */

struct XE_TObjects<XEMap,3>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,3> m_objectPtrs;
}; /* size: 0x0028 */

struct XE_TArray<XEPredicateSource *,4>
{
  /* 0x0000 */ struct XEPredicateSource* m_array[4];
}; /* size: 0x0020 */

typedef union _BUF_PSAPI_WORKING_SET_EX_BLOCK
{
  union
  {
    /* 0x0000 */ unsigned __int64 Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned __int64 ShareCount : 3; /* bit position: 1 */
      /* 0x0000 */ unsigned __int64 Win32Protection : 11; /* bit position: 4 */
      /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 15 */
      /* 0x0000 */ unsigned __int64 Node : 6; /* bit position: 16 */
      /* 0x0000 */ unsigned __int64 Locked : 1; /* bit position: 22 */
      /* 0x0000 */ unsigned __int64 LargePage : 1; /* bit position: 23 */
      /* 0x0000 */ unsigned __int64 Reserved : 7; /* bit position: 24 */
      /* 0x0000 */ unsigned __int64 Bad : 1; /* bit position: 31 */
      /* 0x0000 */ unsigned __int64 ReservedUlong : 32; /* bit position: 32 */
    }; /* bitfield */
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ unsigned __int64 Valid : 1; /* bit position: 0 */
        /* 0x0000 */ unsigned __int64 Reserved0 : 14; /* bit position: 1 */
        /* 0x0000 */ unsigned __int64 Shared : 1; /* bit position: 15 */
        /* 0x0000 */ unsigned __int64 Reserved1 : 15; /* bit position: 16 */
        /* 0x0000 */ unsigned __int64 Bad : 1; /* bit position: 31 */
        /* 0x0000 */ unsigned __int64 ReservedUlong : 32; /* bit position: 32 */
      }; /* bitfield */
    } /* size: 0x0008 */ Invalid;
  }; /* size: 0x0008 */
} BUF_PSAPI_WORKING_SET_EX_BLOCK, *PBUF_PSAPI_WORKING_SET_EX_BLOCK; /* size: 0x0008 */

typedef struct _BUF_PSAPI_WORKING_SET_EX_INFORMATION
{
  /* 0x0000 */ void* VirtualAddress;
  /* 0x0008 */ union _BUF_PSAPI_WORKING_SET_EX_BLOCK VirtualAttributes;
} BUF_PSAPI_WORKING_SET_EX_INFORMATION, *PBUF_PSAPI_WORKING_SET_EX_INFORMATION; /* size: 0x0010 */

typedef struct _AE_SERVICESTAT
{
  /* 0x0000 */ unsigned long ae_ss_compname;
  /* 0x0004 */ unsigned long ae_ss_username;
  /* 0x0008 */ unsigned long ae_ss_svcname;
  /* 0x000c */ unsigned long ae_ss_status;
  /* 0x0010 */ unsigned long ae_ss_code;
  /* 0x0014 */ unsigned long ae_ss_text;
  /* 0x0018 */ unsigned long ae_ss_returnval;
} AE_SERVICESTAT, *PAE_SERVICESTAT; /* size: 0x001c */

struct XE_TObjects<XEPredicateSource,4>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEPredicateSource *,4> m_objectPtrs;
}; /* size: 0x0030 */

struct SEReplSecondaryRowsetMetadataSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<316,1,1>;

class TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

struct XE_TArray<XEEvent *,1>
{
  /* 0x0000 */ struct XEEvent* m_array[1];
}; /* size: 0x0008 */

struct XE_TObjects<XEEvent,1>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEEvent *,1> m_objectPtrs;
}; /* size: 0x0018 */

class TypeListNode<MemoryUtilizationEffects::EffectInfo const * const,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

struct XE_TArray<XEType *,28>
{
  /* 0x0000 */ struct XEType* m_array[28];
}; /* size: 0x00e0 */

struct SESList<XEPackage0::RingTarget::EventEntry,0>
{
  /* 0x0000 */ struct SListBase m_list;
}; /* size: 0x0008 */

struct SOS_OS::HypervisorInfo
{
  /* 0x0000 */ int m_isEnabled;
  /* 0x0004 */ int m_isRootPartition;
  /* 0x0008 */ unsigned int m_majorVersion;
  /* 0x000c */ unsigned int m_minorVersion;
}; /* size: 0x0010 */

class Spinlock<104,10,1>
{
}; /* size: 0x0004 */

struct XE_PackageManager::PackageMapEntry
{
  /* 0x0000 */ struct XEPackage* m_package;
  /* 0x0008 */ void* m_creator /* function */;
  /* 0x0010 */ int m_created;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

class XE_PackageManager
{
  union
  {
    /* 0x0000 */ unsigned int sm_nStaticPackageCreators;
    /* 0x0000 */ struct XE_PackageManager::PackageMapEntry* const sm_staticPackageCreators;
    /* 0x0000 */ struct XE_PackageManager::PackageMapEntry sm_packageCreators[1024];
    /* 0x0000 */ unsigned int sm_nPackageCreators;
    /* 0x0000 */ struct HINSTANCE__* sm_hModule;
    /* 0x0000 */ struct _GUID sm_moduleGUID;
    /* 0x0000 */ void* sm_initLock;
    /* 0x0000 */ void* sm_targetLock;
    /* 0x0000 */ void* sm_eventLock;
  }; /* size: 0x6000 */
}; /* size: 0x0001 */

class AutoSpinlockHolder<14,19,1>;

class XEPackage0::RingTarget::EventEntry
{
  /* 0x0000 */ class XEPackage0::RingTarget::EventEntry* m_next;
  /* 0x0008 */ const struct XEEvent* m_EventMd;
  /* 0x0010 */ unsigned int m_AllocatedLength;
  /* 0x0014 */ struct XEEventBufferHeader m_event;
}; /* size: 0x0030 */

class SEList<SOS_Scheduler,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class TEnumerator<TList<MemoryNodeList,MemoryNode,0,TListSLock> >
{
  /* 0x0000 */ class MemoryNode* m_currentObject;
  /* 0x0008 */ class MemoryNode* m_lastObjectSeen;
  /* 0x0010 */ class TList<MemoryNodeList,MemoryNode,0,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class XeSqlPkg::query_rpc_wake_up
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1559[140];
      /* 0x0240 */ unsigned char m_buf[2];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int in_clone_loopOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::check_message_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1560[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int message_opcodeOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class SOS_StateProtectors<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>
{
}; /* size: 0x0004 */

typedef struct _REPL_IDIR_INFO_1
{
  /* 0x0000 */ wchar_t* rpid1_dirname;
  /* 0x0008 */ unsigned long rpid1_state;
  /* 0x000c */ long Padding_1561;
  /* 0x0010 */ wchar_t* rpid1_mastername;
  /* 0x0018 */ unsigned long rpid1_last_update_time;
  /* 0x001c */ unsigned long rpid1_lockcount;
  /* 0x0020 */ unsigned long rpid1_locktime;
  /* 0x0024 */ long __PADDING__[1];
} REPL_IDIR_INFO_1, *PREPL_IDIR_INFO_1; /* size: 0x0028 */

class SOS_StateProtectors<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost
{
}; /* size: 0x0008 */

class CAutoHandleInternal<0,&CloseHandle>
{
  /* 0x0000 */ void* m_h;
}; /* size: 0x0008 */

class TListElem<TList<ExternalCacheList,ExternalCache,8,TListSLock> >
{
  /* 0x0000 */ long Padding_1562[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1563;
  /* 0x0018 */ class ExternalCacheList* m_pList;
}; /* size: 0x0020 */

class SOS_OnlineNodeEnum
{
}; /* size: 0x0028 */

typedef struct _RTL_AVL_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
} RTL_AVL_TREE, *PRTL_AVL_TREE; /* size: 0x0008 */

typedef struct _SEMAPHORE_BASIC_INFORMATION
{
  /* 0x0000 */ long CurrentCount;
  /* 0x0004 */ long MaximumCount;
} SEMAPHORE_BASIC_INFORMATION, *PSEMAPHORE_BASIC_INFORMATION; /* size: 0x0008 */

typedef union _PROCESS_MEMORY_ALLOCATION_MODE
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long TopDown : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Reserved : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PROCESS_MEMORY_ALLOCATION_MODE, *PPROCESS_MEMORY_ALLOCATION_MODE; /* size: 0x0004 */

class TypeListNode<void *,TypeListNode<SOS_Node *,TypeListNode<unsigned __int64,TypeListNode<unsigned __int64,NullType> > > >
{
}; /* size: 0x0001 */

typedef struct _PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ struct _GUID* InterfaceGuid;
  /* 0x0018 */ struct _UNICODE_STRING Reference;
  /* 0x0028 */ unsigned char Register;
  /* 0x0029 */ char Padding_1564[7];
  /* 0x0030 */ wchar_t* SymLink;
  /* 0x0038 */ unsigned long SymLinkLength;
  /* 0x003c */ long __PADDING__[1];
} PLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA, *PPLUGPLAY_CONTROL_CLASS_ASSOCIATION_DATA; /* size: 0x0040 */

class AutoSwitchLazyPreemptiveToNonPreemptive
{
  /* 0x0000 */ int m_fMakeSwitch;
  /* 0x0004 */ long Padding_1565;
  /* 0x0008 */ class Worker* m_pWorker;
  /* 0x0010 */ class SOS_Scheduler* m_pScheduler;
}; /* size: 0x0018 */

class XeSqlPkg::database_created
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1566[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::log_blocks_uncache
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1567[140];
      /* 0x0240 */ unsigned char m_buf[38];
    }; /* size: 0x0036 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int start_log_block_idOffset;
    /* 0x0000 */ const int last_log_block_idOffset;
    /* 0x0000 */ const int private_consumer_idOffset;
    /* 0x0000 */ const int weightOffset;
    /* 0x0000 */ const int cache_buffer_pointerOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::metadata_preallocate_object_id
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1568[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int in_memory_nextOffset;
    /* 0x0000 */ const int on_disk_nextOffset;
    /* 0x0000 */ const int generated_nextOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

class Spinlock<245,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_wsfc_change_notifier_severe_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1569[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int error_numberOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION
{
  /* 0x0000 */ enum _IO_PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFORMATION, *PFILE_IO_PRIORITY_HINT_INFORMATION; /* size: 0x0004 */

class SEListEnum<SystemThread,144>;

class SOSHost_MemObj
{
  /* 0x0000 */ long Padding_1570[2];
  /* 0x0008 */ class IMemObj* m_pmo;
  /* 0x0010 */ class IMemObj* m_pmoAllocatedOutOf;
  /* 0x0018 */ class SOSHost* m_pHost;
}; /* size: 0x0020 */

class TListElem<TList<PoolList,SOS_ResourcePool,0,TListSLock> >
{
  /* 0x0000 */ long Padding_1571[4];
  /* 0x0010 */ volatile long m_refCount;
  /* 0x0014 */ long Padding_1572;
  /* 0x0018 */ class PoolList* m_pList;
}; /* size: 0x0020 */

typedef struct _COVERAGE_MODULE_REQUEST
{
  /* 0x0000 */ enum _COVERAGE_REQUEST_CODES RequestType;
  /* 0x0004 */ long Padding_1573;
  union
  {
    union
    {
      /* 0x0008 */ unsigned char MD5Hash[16];
      /* 0x0008 */ struct _UNICODE_STRING ModuleName;
    }; /* size: 0x0010 */
  } /* size: 0x0010 */ SearchInfo;
} COVERAGE_MODULE_REQUEST, *PCOVERAGE_MODULE_REQUEST; /* size: 0x0018 */

typedef struct _COVERAGE_MODULES
{
  /* 0x0000 */ unsigned long ListAndReset;
  /* 0x0004 */ unsigned long NumberOfModules;
  /* 0x0008 */ struct _COVERAGE_MODULE_REQUEST ModuleRequestInfo;
  /* 0x0020 */ struct _COVERAGE_MODULE_INFO Modules[1];
} COVERAGE_MODULES, *PCOVERAGE_MODULES; /* size: 0x0040 */

typedef struct _WKSTA_INFO_1012
{
  /* 0x0000 */ unsigned long wki1012_maximum_collection_count;
} WKSTA_INFO_1012, *PWKSTA_INFO_1012; /* size: 0x0004 */

typedef struct _KEY_VALUE_PARTIAL_INFORMATION
{
  /* 0x0000 */ unsigned long TitleIndex;
  /* 0x0004 */ unsigned long Type;
  /* 0x0008 */ unsigned long DataLength;
  /* 0x000c */ unsigned char Data[1];
  /* 0x000d */ char __PADDING__[3];
} KEY_VALUE_PARTIAL_INFORMATION, *PKEY_VALUE_PARTIAL_INFORMATION; /* size: 0x0010 */

typedef struct _RTL_PROCESS_HEAPS
{
  /* 0x0000 */ unsigned long NumberOfHeaps;
  /* 0x0004 */ long Padding_1574;
  /* 0x0008 */ struct _RTL_HEAP_INFORMATION Heaps[1];
} RTL_PROCESS_HEAPS, *PRTL_PROCESS_HEAPS; /* size: 0x0060 */

class RefCountImpl<XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity const &,SystemAffinity const &,NullType>,TListSLock,SOSCallbackEvent>::Elem> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct IParentRowset
{
}; /* size: 0x0008 */

class XListElem<SOS_DispatcherBase>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_1575;
  /* 0x0018 */ class XList<SOS_DispatcherBase>* m_pList;
}; /* size: 0x0020 */

typedef struct _SERVER_INFO_1544
{
  /* 0x0000 */ unsigned long sv1544_initconntable;
} SERVER_INFO_1544, *PSERVER_INFO_1544; /* size: 0x0004 */

class XE_AlignedArray<XE_Buffer *>
{
  /* 0x0000 */ void* m_memory;
  /* 0x0008 */ struct XE_AlignedArray<XE_Buffer *>::Element* m_array;
}; /* size: 0x0010 */

struct SESList<XE_Buffer,24>
{
  /* 0x0000 */ struct SListBase m_list;
}; /* size: 0x0008 */

class SEListSized<XE_Buffer,8>
{
  /* 0x0000 */ long Padding_1576[4];
  /* 0x0010 */ unsigned long m_size;
}; /* size: 0x0018 */

class SOSHost_EventManual
{
  /* 0x0000 */ long Padding_1577[52];
  /* 0x00d0 */ struct ISOSClient_ResourceInfo* m_resInfo;
}; /* size: 0x00d8 */

class CAutoP<XE_FlushRequest>
{
}; /* size: 0x0008 */

class XE_BufferMgr
{
  /* 0x0000 */ class XE_AlignedArray<XE_Buffer *> m_active;
  /* 0x0010 */ unsigned long m_activeSlots;
  /* 0x0014 */ long Padding_1578;
  /* 0x0018 */ struct XESessionBufferProperties m_bufferProps;
  /* 0x0030 */ class XE_Session* m_pSession;
  /* 0x0038 */ enum XESessionBufferPolicy m_flushPolicy;
  /* 0x003c */ unsigned int m_totalBuffers;
  /* 0x0040 */ int m_generateSequenceNumbers;
  /* 0x0044 */ long Padding_1579;
  /* 0x0048 */ unsigned __int64 m_bufferSize;
  /* 0x0050 */ unsigned __int64 m_totalBufferSize;
  /* 0x0058 */ unsigned __int64 m_bufferAllocSize;
  /* 0x0060 */ unsigned __int64 m_totalBufferAllocSize;
  /* 0x0068 */ unsigned char* m_rawMemory;
  /* 0x0070 */ struct SESList<XE_Buffer,24> m_allbuffers;
  /* 0x0078 */ long Padding_1580[2];
  /* 0x0080 */ struct XE_BufferMgrSLock m_lock;
  /* 0x0084 */ long Padding_1581;
  /* 0x0088 */ class SEListSized<XE_Buffer,8> m_free;
  /* 0x00a0 */ class SEListSized<XE_Buffer,8> m_pending;
  /* 0x00b8 */ unsigned int m_processingCount;
  /* 0x00bc */ long Padding_1582;
  /* 0x00c0 */ class SOSHost_EventManual m_freeBufferEvent;
  /* 0x0198 */ class CAutoP<XE_FlushRequest> m_flushRequest;
  /* 0x01a0 */ unsigned int m_curSequenceNumber;
}; /* size: 0x01c0 */

struct XE_TEvent<4,3,8>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,3> m_customizableAttr;
  /* 0x0148 */ struct XE_TArray<XEDataAttribute,8> m_dynamicAttr;
  /* 0x0288 */ struct XEEvent m_event;
}; /* size: 0x02d0 */

class XeSqlPkg::sp_cache_remove
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,3,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1583[140];
      /* 0x0240 */ unsigned char m_buf[43];
    }; /* size: 0x003b */
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int remove_methodOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int cached_textOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int plan_handleOffset;
  }; /* size: 0x02d0 */
}; /* size: 0x0270 */

class XeSqlPkg::hekaton_matgen
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1584[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int proc_textOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct SOS_MemoryWorkSpace::WSCpuPart
{
  /* 0x0000 */ __int64 m_allocatedPages[64];
}; /* size: 0x0200 */

class XeSqlPkg::hadr_worker_pool_thread
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1585[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int actionOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeDvmPkg::dvm_agent_quiesced
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1586[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

class XeDvmPkg::dvm_initialized
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1587[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

class XeDvmPkg::dvm_agent_state_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1588[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int locationOffset;
    /* 0x0000 */ const int expected_stateOffset;
    /* 0x0000 */ const int current_stateOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeDvmPkg::dvm_agent_activated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1589[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

class IFailpointAPI;

class XeDvmPkg::dvm_agent_work_item_dequeued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1590[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct SQLDK_Callbacks
{
  /* 0x0000 */ void* pfnAssertFail /* function */;
  /* 0x0008 */ class IFailpointAPI* pFailpointAPI;
  /* 0x0010 */ class SqlDkHost_ITraceFlag* piTraceFlagProvider;
}; /* size: 0x0018 */

class XeDvmPkg::dvm_agent_initialized
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1591[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

class SEList<XEPackage0::OrphanEntry,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _TEB_ACTIVE_FRAME_CONTEXT_EX
{
  /* 0x0000 */ struct _TEB_ACTIVE_FRAME_CONTEXT BasicContext;
  /* 0x0010 */ const char* SourceLocation;
} TEB_ACTIVE_FRAME_CONTEXT_EX, *PTEB_ACTIVE_FRAME_CONTEXT_EX; /* size: 0x0018 */

class XeSqlPkg::remote_dmv_stream_runtime_cache_miss
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1592[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

struct XE_TEvent<4,2,22>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,22> m_dynamicAttr;
  /* 0x0480 */ struct XEEvent m_event;
}; /* size: 0x04c8 */

class XeSqlPkg::existing_connection
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,22> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1593[140];
      /* 0x0240 */ unsigned char m_buf[143];
    }; /* size: 0x009f */
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int is_dacOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int packet_sizeOffset;
    /* 0x0000 */ const int transaction_countOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int client_pidOffset;
    /* 0x0000 */ const int optionsOffset;
    /* 0x0000 */ const int options_textOffset;
    /* 0x0000 */ const int started_event_session_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int client_app_nameOffset;
    /* 0x0000 */ const int client_hostnameOffset;
    /* 0x0000 */ const int nt_domainOffset;
    /* 0x0000 */ const int nt_userOffset;
    /* 0x0000 */ const int session_nt_domainOffset;
    /* 0x0000 */ const int session_nt_userOffset;
    /* 0x0000 */ const int server_principal_nameOffset;
    /* 0x0000 */ const int server_principal_sidOffset;
    /* 0x0000 */ const int session_server_principal_nameOffset;
    /* 0x0000 */ const int session_server_principal_sidOffset;
  }; /* size: 0x04c8 */
}; /* size: 0x02d0 */

class SqlDkHost_ITraceFlag
{
}; /* size: 0x0008 */

class XeSqlPkg::hadr_ar_critical_section_entry_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1594[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int entry_stateOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class CMemMgrInfo
{
  /* 0x0000 */ unsigned long m_version;
  /* 0x0004 */ long Padding_1595;
  /* 0x0008 */ void* m_BucketsPtr;
  /* 0x0010 */ void** m_LookupTablePtr;
  /* 0x0018 */ void* m_SmallestBlockAllocatorSizePtr;
  /* 0x0020 */ unsigned long m_BucketElementSize;
  /* 0x0024 */ unsigned long m_nextPtrOffset;
  /* 0x0028 */ unsigned long m_anchorOffsetInBucket;
  /* 0x002c */ unsigned long m_listElementOffsetInDescriptor;
  /* 0x0030 */ unsigned long m_addressOffsetInDescriptor;
  /* 0x0034 */ unsigned long m_allocatorOffsetInDescriptor;
  /* 0x0038 */ unsigned long m_parentOffsetInDescriptor;
  /* 0x003c */ unsigned long m_freeListOffsetInDescriptor;
  /* 0x0040 */ unsigned long m_parentOffsetInAllocator;
  /* 0x0044 */ unsigned long m_addressOffsetInTopLevelDescriptor;
  /* 0x0048 */ unsigned long m_userDataOffsetInTopLevelDescriptor;
  /* 0x004c */ unsigned long m_nextDescOffsetInTopLevelDescriptor;
  /* 0x0050 */ void* m_topLevelBlockAllocatorPtr;
  /* 0x0058 */ unsigned long m_userDataElementSize;
  /* 0x005c */ unsigned long m_freeListArrayOffsetInTopLevelAllocator;
  /* 0x0060 */ unsigned long m_elemSizeInTopLevelAllocatorFreeListArray;
  /* 0x0064 */ unsigned long m_nextPtrOffsetInSListHeader;
  /* 0x0068 */ unsigned long m_userDataShift;
  /* 0x006c */ unsigned long m_poolsMask;
  /* 0x0070 */ void** m_64KBlockArrayPtr;
  /* 0x0078 */ unsigned long m_64KBlockElementSize;
  /* 0x007c */ unsigned long m_stateOffsetInDescriptor;
  /* 0x0080 */ unsigned long m_emptyDescriptorState;
  /* 0x0084 */ unsigned long m_descriptorStateMask;
  /* 0x0088 */ unsigned long m_blockSizeOffsetInFreeBlockDesc;
  /* 0x008c */ unsigned long m_blockAddressOffsetInFreeBlockDesc;
  /* 0x0090 */ unsigned long m_nextOffsetInFreeeBlockDesc;
  /* 0x0094 */ unsigned long m_maxNodes;
  /* 0x0098 */ void* m_smallestBlockAllocatorPtr;
  /* 0x00a0 */ unsigned long m_blockSizeOffsetInAllocator;
  /* 0x00a4 */ long Padding_1596;
  /* 0x00a8 */ unsigned __int64 m_topLevelBlockSize;
}; /* size: 0x00b0 */

class XeSqlPkg::glm_primary_brick_release_response
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1597[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int lock_resultOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

typedef struct _USER_INFO_1051
{
  /* 0x0000 */ unsigned long usri1051_primary_group_id;
} USER_INFO_1051, *PUSER_INFO_1051; /* size: 0x0004 */

struct DMP_CLIENT_CALLBACK_COOKIE__
{
  /* 0x0000 */ int unused;
}; /* size: 0x0004 */

class DmpStaticBaseCustomizeCallback
{
}; /* size: 0x0008 */

class XE_AutoP<XEPackage0::CounterTarget>
{
}; /* size: 0x0008 */

struct DistributedDumpInfoBlock
{
  /* 0x0000 */ struct _GUID m_transId;
  /* 0x0010 */ unsigned long m_localId;
  /* 0x0014 */ wchar_t m_dumpOrigin[261];
  /* 0x021e */ unsigned short m_padding;
}; /* size: 0x0220 */

typedef struct _PS_CPU_QUOTA_QUERY_INFORMATION
{
  /* 0x0000 */ unsigned long SessionCount;
  /* 0x0004 */ struct _PS_CPU_QUOTA_QUERY_ENTRY SessionInformation[1];
} PS_CPU_QUOTA_QUERY_INFORMATION, *PPS_CPU_QUOTA_QUERY_INFORMATION; /* size: 0x000c */

struct IDmpClient
{
}; /* size: 0x0008 */

typedef struct _REPL_EDIR_INFO_1001
{
  /* 0x0000 */ unsigned long rped1001_extent;
} REPL_EDIR_INFO_1001, *PREPL_EDIR_INFO_1001; /* size: 0x0004 */

struct tagMDAXISINFO
{
  /* 0x0000 */ unsigned __int64 cbSize;
  /* 0x0008 */ unsigned __int64 iAxis;
  /* 0x0010 */ unsigned __int64 cDimensions;
  /* 0x0018 */ unsigned __int64 cCoordinates;
  /* 0x0020 */ unsigned __int64* rgcColumns;
  /* 0x0028 */ wchar_t** rgpwszDimensionNames;
}; /* size: 0x0030 */

struct _RTLP_CURDIR_REF;

typedef struct _RTL_STACK_TRACE_DATABASE_CREATE
{
  /* 0x0000 */ void* CommitBase;
  /* 0x0008 */ unsigned __int64 CommitSize;
  /* 0x0010 */ unsigned __int64 ReserveSize;
} RTL_STACK_TRACE_DATABASE_CREATE, *PRTL_STACK_TRACE_DATABASE_CREATE; /* size: 0x0018 */

class SEList<DkParameter,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class DkParametersProcessor
{
  union
  {
    /* 0x0000 */ const wchar_t QUOTE;
    /* 0x0000 */ const wchar_t NULL_TERMINATOR;
    /* 0x0000 */ const wchar_t SPACE;
    /* 0x0000 */ const wchar_t DASH;
    /* 0x0000 */ const wchar_t SLASH;
    /* 0x0000 */ const wchar_t BACKSLASH;
    /* 0x0000 */ const wchar_t ATSIGN;
    /* 0x0000 */ const unsigned int ALLOCA_THRESHOLD;
    /* 0x0000 */ const unsigned int MAX_FILE_RECURSION;
    /* 0x0000 */ const unsigned int MAX_FILE_SIZE;
    /* 0x0000 */ unsigned int m_processFileRecursion;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_1598;
  /* 0x0008 */ class SEList<DkParameter,0> m_list;
  /* 0x0018 */ const struct DkParameterMetadata* m_metadata;
  /* 0x0020 */ unsigned int m_metadataSize;
  /* 0x0024 */ enum DkParametersProcessor::BOMtype m_lastBOM;
  /* 0x0028 */ unsigned long m_lastError;
  /* 0x002c */ long Padding_1599;
  /* 0x0030 */ class CAutoMalloc<unsigned short> m_lastExpression;
  /* 0x0038 */ class CAutoMalloc<unsigned short> m_lastFileName;
  /* 0x0040 */ class CAutoMalloc<unsigned short> m_lastFileBuffer;
  /* 0x0048 */ const struct DkParameterMetadata* m_lastMetadata;
  /* 0x0050 */ unsigned int m_argidx;
  /* 0x0054 */ unsigned int m_argc;
  /* 0x0058 */ wchar_t** m_argv;
  /* 0x0060 */ BOOL m_parseEscapeChars;
  /* 0x0061 */ char Padding_1600[7];
  /* 0x0068 */ class CAutoMalloc<DkParameter *> m_positionals;
  /* 0x0070 */ unsigned int m_positionalsCount;
  /* 0x0074 */ unsigned int m_positionalsCapacity;
}; /* size: 0x0078 */

struct CLUSTERVERSIONINFO_NT4
{
  /* 0x0000 */ unsigned long dwVersionInfoSize;
  /* 0x0004 */ unsigned short MajorVersion;
  /* 0x0006 */ unsigned short MinorVersion;
  /* 0x0008 */ unsigned short BuildNumber;
  /* 0x000a */ wchar_t szVendorId[64];
  /* 0x008a */ wchar_t szCSDVersion[64];
  /* 0x010a */ char __PADDING__[2];
}; /* size: 0x010c */

struct PvArrayChunk;

class SESListEnum<XEPackage0::RingTarget::EventEntry,0>
{
  /* 0x0000 */ const struct SESList<XEPackage0::RingTarget::EventEntry,0>* const m_pList;
  /* 0x0008 */ class XEPackage0::RingTarget::EventEntry* m_pCurr;
}; /* size: 0x0010 */

class CDynPvArray
{
  /* 0x0000 */ struct PvArrayChunk* m_pacRoot;
  /* 0x0008 */ unsigned long m_cSize;
}; /* size: 0x0010 */

typedef struct _HEAP_BLOCK_EXTRA_INFORMATION
{
  /* 0x0000 */ unsigned char Next;
  /* 0x0001 */ char Padding_1601[3];
  /* 0x0004 */ unsigned long Type;
  /* 0x0008 */ unsigned __int64 Size;
} HEAP_BLOCK_EXTRA_INFORMATION, *PHEAP_BLOCK_EXTRA_INFORMATION; /* size: 0x0010 */

class XeSqlPkg::column_store_index_build_low_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1602[140];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0032 */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int rowgroup_idOffset;
    /* 0x0000 */ const int rows_per_colsegmentOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class CMemBufFormatter::CSinglePageBuffer
{
  /* 0x0000 */ unsigned char* m_buffer;
  /* 0x0008 */ class SEListElem m_link;
}; /* size: 0x0018 */

class XeSqlPkg::hadr_database_replica_disjoin_completion
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1603[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int availability_group_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class SEListEnum<CMemBufFormatter::CSinglePageBuffer,8>;

class XeSqlPkg::deadlock_monitor_pmo_status
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1604[140];
      /* 0x0240 */ unsigned char m_buf[30];
    }; /* size: 0x002e */
    /* 0x0000 */ const int count_cyclesOffset;
    /* 0x0000 */ const int checkpointOffset;
    /* 0x0000 */ const int pmo_markOffset;
    /* 0x0000 */ const int pmo_pages_allocOffset;
    /* 0x0000 */ const int ringbuffer_pmo_pages_allocOffset;
    /* 0x0000 */ const int xml_deadlock_report_pmo_pages_allocOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class XeSqlPkg::backup_restore_test_io_retry
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1605[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int retry_countOffset;
    /* 0x0000 */ const int operationOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

struct _HRESTYPEENUM;

class XeSqlPkg::hadr_dump_sync_primary_progress
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1606[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int hardened_log_block_idOffset;
    /* 0x0000 */ const int hardened_lsnOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct _WKSTA_INFO_1055
{
  /* 0x0000 */ int wki1055_use_raw_write;
} WKSTA_INFO_1055, *PWKSTA_INFO_1055; /* size: 0x0004 */

struct RPCStream::UINT128
{
  /* 0x0000 */ unsigned __int64 loWord;
  /* 0x0008 */ unsigned __int64 hiWord;
}; /* size: 0x0010 */

typedef struct _PS_ATTRIBUTE_LIST
{
  /* 0x0000 */ unsigned __int64 TotalLength;
  /* 0x0008 */ struct _PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, *PPS_ATTRIBUTE_LIST; /* size: 0x0028 */

struct tagDB_VARNUMERIC
{
  /* 0x0000 */ unsigned char precision;
  /* 0x0001 */ char scale;
  /* 0x0002 */ unsigned char sign;
  /* 0x0003 */ unsigned char val[1];
}; /* size: 0x0004 */

class CMemBufFormatter
{
  /* 0x0000 */ unsigned __int64 m_pageSize;
  /* 0x0008 */ unsigned __int64 m_size;
  /* 0x0010 */ class SEList<CMemBufFormatter::CSinglePageBuffer,8> m_linearizedData;
  /* 0x0020 */ class IMemObj* m_pmo;
  /* 0x0028 */ BOOL m_fUsePages;
  /* 0x0029 */ char Padding_1607[7];
  /* 0x0030 */ class CMemBufFormatter::CSinglePageBuffer* m_currentReadPage;
  /* 0x0038 */ unsigned __int64 m_currentPageReadPos;
  /* 0x0040 */ unsigned __int64 m_totalBytesRead;
  /* 0x0048 */ class CMemBufFormatter::CSinglePageBuffer* m_currentWritePage;
  /* 0x0050 */ unsigned __int64 m_currentPageWritePos;
}; /* size: 0x0058 */

typedef struct _DMA_CONFIGURATION_BYTE0
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char Channel : 3; /* bit position: 0 */
    /* 0x0000 */ unsigned char Reserved : 3; /* bit position: 3 */
    /* 0x0000 */ unsigned char Shared : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char MoreEntries : 1; /* bit position: 7 */
  }; /* bitfield */
} DMA_CONFIGURATION_BYTE0, *PDMA_CONFIGURATION_BYTE0; /* size: 0x0001 */

typedef struct _SYSTEM_WATCHDOG_HANDLER_INFORMATION
{
  /* 0x0000 */ void* WdHandler /* function */;
  /* 0x0008 */ void* Context;
} SYSTEM_WATCHDOG_HANDLER_INFORMATION, *PSYSTEM_WATCHDOG_HANDLER_INFORMATION; /* size: 0x0010 */

class XeSqlPkg::logreader_add_eor
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1608[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int xdesid_lowOffset;
    /* 0x0000 */ const int xdesid_highOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int originator_db_versionOffset;
    /* 0x0000 */ const int originator_pubidOffset;
    /* 0x0000 */ const int originatorOffset;
    /* 0x0000 */ const int originator_dbOffset;
    /* 0x0000 */ const int originator_lsnOffset;
    /* 0x0000 */ const int current_lsnOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0278 */

class CSerializeParam
{
  /* 0x0000 */ class CSerializeParam* m_prevScopeParam;
  /* 0x0008 */ __int64 m_rgParam[4];
  /* 0x0028 */ int m_cbParam;
}; /* size: 0x0030 */

struct CSerializeContext<CMemBufFormatter>::GenericSerializer;

typedef struct _SERVICE_INFO_1
{
  /* 0x0000 */ wchar_t* svci1_name;
  /* 0x0008 */ unsigned long svci1_status;
  /* 0x000c */ unsigned long svci1_code;
  /* 0x0010 */ unsigned long svci1_pid;
  /* 0x0014 */ long __PADDING__[1];
} SERVICE_INFO_1, *PSERVICE_INFO_1; /* size: 0x0018 */

struct CSerializeContext<CMemBufFormatter>::ElementalSerializer
{
}; /* size: 0x0001 */

struct CSerializeContext<CMemBufFormatter>::ClassSerializer
{
}; /* size: 0x0001 */

class XeSqlPkg::fulltext_reorganize_source_fragment
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1609[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int fragment_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class IWCharStream
{
}; /* size: 0x0008 */

class XeSqlPkg::query_rpc_server_runtime_cache_remove
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1610[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

typedef struct _REPL_INFO_1002
{
  /* 0x0000 */ unsigned long rp1002_guardtime;
} REPL_INFO_1002, *PREPL_INFO_1002; /* size: 0x0004 */

class XeSqlPkg::query_rpc_process_cmd_insert_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class NonYieldSystemInformation
{
  union
  {
    struct
    {
      /* 0x0000 */ class SOS_RingBuffer* m_NonYieldProcessTableRingBuffer;
      /* 0x0008 */ class SOS_RingBuffer* m_NonYieldThreadTableRingBuffer;
    }; /* size: 0x0010 */
    /* 0x0000 */ class NonYieldSystemInformation sm_NonYieldSystemInfo;
  }; /* size: 0x270d0 */
  /* 0x0010 */ class SchedulerMonitor* m_ownerSchedMon;
  /* 0x0018 */ class CPerfmonCounter m_perfmonCounters[7];
  /* 0x70c0 */ __int64 m_firstKernelTime[8192];
  /* 0x170c0 */ __int64 m_firstUserTime[8192];
  /* 0x270c0 */ void* m_hQuery;
  /* 0x270c8 */ long m_pdhStatus;
  /* 0x270cc */ struct NonYieldAnalysisSLock m_lock;
}; /* size: 0x270d0 */

typedef struct _LDRP_CSLIST
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY* Tail;
} LDRP_CSLIST, *PLDRP_CSLIST; /* size: 0x0008 */

typedef struct _LDR_DDAG_NODE
{
  /* 0x0000 */ struct _LIST_ENTRY Modules;
  /* 0x0010 */ struct _LDR_SERVICE_TAG_RECORD* ServiceTagList;
  /* 0x0018 */ unsigned long LoadCount;
  /* 0x001c */ unsigned long ReferenceCount;
  /* 0x0020 */ unsigned long DependencyCount;
  /* 0x0024 */ long Padding_1611;
  union
  {
    /* 0x0028 */ struct _LDRP_CSLIST Dependencies;
    /* 0x0028 */ struct _SINGLE_LIST_ENTRY RemovalLink;
  }; /* size: 0x0008 */
  /* 0x0030 */ struct _LDRP_CSLIST IncomingDependencies;
  /* 0x0038 */ enum _LDR_DDAG_STATE State;
  /* 0x003c */ long Padding_1612;
  /* 0x0040 */ struct _SINGLE_LIST_ENTRY CondenseLink;
  /* 0x0048 */ unsigned long PreorderNumber;
  /* 0x004c */ unsigned long LowestLink;
} LDR_DDAG_NODE, *PLDR_DDAG_NODE; /* size: 0x0050 */

typedef struct _JOURNAL_SET_DELETE_VALUE_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_1613;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _UNICODE_STRING KeyPathName;
  /* 0x0028 */ struct _UNICODE_STRING ValueName;
  /* 0x0038 */ unsigned long OldValueType;
  /* 0x003c */ unsigned long OldDataLength;
  /* 0x0040 */ void* OldData;
  /* 0x0048 */ unsigned long NewValueType;
  /* 0x004c */ unsigned long NewDataLength;
  /* 0x0050 */ void* NewData;
} JOURNAL_SET_DELETE_VALUE_INFORMATION, *PJOURNAL_SET_DELETE_VALUE_INFORMATION; /* size: 0x0058 */

struct _LDRP_DLL_SNAP_CONTEXT;

struct CompilerOffset
{
  /* 0x0000 */ unsigned __int64 ActualSize;
}; /* size: 0x0008 */

class XE_StreamCompare<char,XEPackage0::StringCompare<char,1>,0>
{
  /* 0x0000 */ char m_buffer[1024];
  /* 0x0400 */ const char* m_comperand;
  /* 0x0408 */ unsigned int m_cbCompRemaining;
  /* 0x040c */ int m_result;
}; /* size: 0x0410 */

typedef struct _KEY_WOW64_FLAGS_INFORMATION
{
  /* 0x0000 */ unsigned long UserFlags;
} KEY_WOW64_FLAGS_INFORMATION, *PKEY_WOW64_FLAGS_INFORMATION; /* size: 0x0004 */

struct XEPackage0::PartitionedCountingPredicateSource
{
}; /* size: 0x0001 */

class CAutoBase<IAutoReadOnlyXact>
{
  /* 0x0000 */ class IAutoReadOnlyXact* m_pt;
}; /* size: 0x0008 */

class XeSqlPkg::query_rpc_server_collection_cache_remove
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1614[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_descriptorOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

typedef struct _SYSTEM_VA_LIST_INFORMATION
{
  /* 0x0000 */ unsigned __int64 VirtualSize;
  /* 0x0008 */ unsigned __int64 VirtualPeak;
  /* 0x0010 */ unsigned __int64 VirtualLimit;
  /* 0x0018 */ unsigned __int64 AllocationFailures;
} SYSTEM_VA_LIST_INFORMATION, *PSYSTEM_VA_LIST_INFORMATION; /* size: 0x0020 */

typedef struct _USER_INFO_1010
{
  /* 0x0000 */ unsigned long usri1010_auth_flags;
} USER_INFO_1010, *PUSER_INFO_1010; /* size: 0x0004 */

class IAutoSimpleXact
{
}; /* size: 0x0008 */

typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER
{
  /* 0x0000 */ void* ClientSession;
  /* 0x0008 */ void* ClientProcess;
} FILE_PIPE_CLIENT_PROCESS_BUFFER, *PFILE_PIPE_CLIENT_PROCESS_BUFFER; /* size: 0x0010 */

typedef struct _SERVER_INFO_1584
{
  /* 0x0000 */ unsigned long sv1584_maxpagedpoolchunksize;
} SERVER_INFO_1584, *PSERVER_INFO_1584; /* size: 0x0004 */

class XEPackage0::BinaryCompare<unsigned char,0>
{
}; /* size: 0x0001 */

class CSessionTraceFlags
{
  /* 0x0000 */ unsigned long m_cRef;
  /* 0x0004 */ unsigned long m_rgFlags[10];
  /* 0x002c */ long Padding_1615;
  /* 0x0030 */ class CSessionTraceFlags* m_pNext;
}; /* size: 0x0038 */

class XeSqlPkg::hadr_worker_pool_task
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1616[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int task_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int wait_timeOffset;
    /* 0x0000 */ const int task_typeOffset;
    /* 0x0000 */ const int task_stateOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

typedef struct _LPC_CLIENT_DIED_MSG
{
  /* 0x0000 */ struct _PORT_MESSAGE PortMsg;
  /* 0x0028 */ union _LARGE_INTEGER CreateTime;
} LPC_CLIENT_DIED_MSG, *PLPC_CLIENT_DIED_MSG; /* size: 0x0030 */

class XeSqlPkg::broker_activation_task_started
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1617[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::databases_bulk_copy_throughput
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1618[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

struct XE_TEvent<4,1,7>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,7> m_dynamicAttr;
  /* 0x01f0 */ struct XEEvent m_event;
}; /* size: 0x0238 */

class XeSqlPkg::databases_log_truncation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1619[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::databases_log_file_size_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1620[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::memory_node_free_node_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1621[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::cursor_manager_cursor_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1622[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _FILE_MAILSLOT_PEEK_BUFFER
{
  /* 0x0000 */ unsigned long ReadDataAvailable;
  /* 0x0004 */ unsigned long NumberOfMessages;
  /* 0x0008 */ unsigned long MessageLength;
} FILE_MAILSLOT_PEEK_BUFFER, *PFILE_MAILSLOT_PEEK_BUFFER; /* size: 0x000c */

class XeSqlPkg::memory_node_stolen_node_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1623[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::query_scan_uncache
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::databases_bulk_insert_rows
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1624[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::cursor_manager_cursor_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1625[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _OBJECTS_AND_SID
{
  /* 0x0000 */ unsigned long ObjectsPresent;
  /* 0x0004 */ struct _GUID ObjectTypeGuid;
  /* 0x0014 */ struct _GUID InheritedObjectTypeGuid;
  /* 0x0024 */ long Padding_1626;
  /* 0x0028 */ struct _SID* pSid;
} OBJECTS_AND_SID, *POBJECTS_AND_SID; /* size: 0x0030 */

class XeSqlPkg::databases_bulk_copy_rows
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1627[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct _MEMORY_WORKING_SET_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NumberOfEntries;
  /* 0x0008 */ struct _MEMORY_WORKING_SET_BLOCK WorkingSetInfo[1];
} MEMORY_WORKING_SET_INFORMATION, *PMEMORY_WORKING_SET_INFORMATION; /* size: 0x0010 */

class XeSqlPkg::databases_backup_restore_throughput
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1628[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::databases_log_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1629[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct XE_TArray<XEDataAttribute,56>
{
  /* 0x0000 */ struct XEDataAttribute m_array[56];
}; /* size: 0x08c0 */

struct XE_TEvent<3,0,56>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,56> m_dynamicAttr;
  /* 0x0940 */ struct XEEvent m_event;
}; /* size: 0x0988 */

class XeSqlPkg::memory_manager_database_cache_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1630[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::databases_log_flush
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1631[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::memory_manager_reserved_server_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1632[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct XEPackage0::CollectProcessIdAction
{
}; /* size: 0x0001 */

typedef struct _NET_DISPLAY_MACHINE
{
  /* 0x0000 */ wchar_t* usri2_name;
  /* 0x0008 */ wchar_t* usri2_comment;
  /* 0x0010 */ unsigned long usri2_flags;
  /* 0x0014 */ unsigned long usri2_user_id;
  /* 0x0018 */ unsigned long usri2_next_index;
  /* 0x001c */ long __PADDING__[1];
} NET_DISPLAY_MACHINE, *PNET_DISPLAY_MACHINE; /* size: 0x0020 */

class XeSqlPkg::buffer_node_database_pages
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1633[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::scan_started
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1634[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x01e8 */
}; /* size: 0x0260 */

class XeSqlPkg::cursor_manager_cursor_plan_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1635[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::memory_manager_free_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1636[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::memory_node_total_node_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1637[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::locks_lock_waits
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1638[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int lock_typeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::plan_cache_cache_attempt
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1639[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cache_entry_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::memory_node_target_node_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1640[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::availability_replica_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1641[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_group_nameOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSqlPkg::databases_dbcc_logical_scan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1642[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::fulltext_query_recompile
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1643[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int recompile_reasonOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::cursor_manager_cached_cursor_added
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1644[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::database_transaction_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1645[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::databases_log_flush_wait
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1646[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _EFI_DRIVER_ENTRY_LIST
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ struct _EFI_DRIVER_ENTRY DriverEntry;
} EFI_DRIVER_ENTRY_LIST, *PEFI_DRIVER_ENTRY_LIST; /* size: 0x0018 */

class XeSqlPkg::buffer_node_page_life_expectancy
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1647[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::partition_metadata_lock_mode
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1648[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int lock_modeOffset;
    /* 0x0000 */ const int transaction_nameOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::errorlog_written
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1649[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int messageOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::cursor_manager_cursor_worktable_use_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1650[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::delete_partition_content
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1651[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int content_delete_flagsOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::databases_shrink_data_movement
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1652[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::cursor_manager_cached_cursor_removed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1653[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::databases_log_growth
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1654[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::fabric_unpair
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1655[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int pairing_database_idOffset;
    /* 0x0000 */ const int pairing_database_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::buffer_manager_target_pages
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1656[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::cursor_manager_cursor_cache_attempt
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1657[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::physical_seeding_copy_to_secondary_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1658[140];
      /* 0x0240 */ unsigned char m_buf[74];
    }; /* size: 0x005a */
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_cluster_nameOffset;
    /* 0x0000 */ const int remote_server_nameOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_group_nameOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0290 */

class XeSqlPkg::buffer_manager_database_pages
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1659[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::broker_activation_task_aborted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1660[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::cursor_manager_cursor_memory_usage
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1661[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int incrementOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::buffer_manager_page_life_expectancy
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1662[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::metadata_initiate_unlock_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1663[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::memory_node_database_node_memory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1664[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::session_mgr_work_item_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1665[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::cursor_manager_cursor_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1666[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int countOffset;
    /* 0x0000 */ const int cursor_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class CObjName;

class XeSqlPkg::metadata_agent_lock_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1667[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int modeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class CBaseClassInfo
{
  union
  {
    /* 0x0000 */ const class CBaseClassInfo* xsm_rgpBaseClassInfo[2912];
    struct
    {
      /* 0x0000 */ const unsigned int xm_idBase;
      /* 0x0004 */ const long xm_cbOffset;
      /* 0x0008 */ const class CBaseClassInfo* xm_pNext;
    }; /* size: 0x0010 */
  }; /* size: 0x5b00 */
}; /* size: 0x0010 */

class XeSqlPkg::mixed_page_skipextent
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1668[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int lock_resultOffset;
    /* 0x0000 */ const int skipcountOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class XeCloudMinPkg::primary_commit_log_flush
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1669[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

struct MDAvailabilityGroupDbId
{
  /* 0x0000 */ unsigned long m_agId;
  /* 0x0004 */ struct _GUID m_dbId;
}; /* size: 0x0014 */

class SQLSOS_NonYieldProcessTableRecord
{
  /* 0x0000 */ unsigned long sm_NumberOfRecords;
  /* 0x0004 */ long Padding_1670[3];
  /* 0x0010 */ unsigned long m_ProcessID;
  /* 0x0014 */ wchar_t m_ProcessName[260];
  /* 0x021c */ unsigned long m_PageFaultCount;
  /* 0x0220 */ unsigned __int64 m_WorkingSetSize;
  /* 0x0228 */ unsigned __int64 m_PrivateUsage;
}; /* size: 0x0230 */

class XeCloudMinPkg::catchup_from_primary_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,19> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1671[140];
      /* 0x0240 */ unsigned char m_buf[125];
    }; /* size: 0x008d */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int forwarder_epochOffset;
    /* 0x0000 */ const int forwarder_csnOffset;
    /* 0x0000 */ const int create_utcOffset;
    /* 0x0000 */ const int copied_rowsOffset;
    /* 0x0000 */ const int copied_bytesOffset;
    /* 0x0000 */ const int catchup_return_codeOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x03e8 */
}; /* size: 0x02c0 */

class XeCloudMinPkg::primary_commit_ack
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1672[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class CAutoMalloc<DkParameter>
{
}; /* size: 0x0008 */

class UcsTrace
{
  /* 0x0000 */ unsigned long sm_UcsTraceMask;
}; /* size: 0x0001 */

class XeCloudMinPkg::prefer_copy_over_catchup
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,15> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1673[140];
      /* 0x0240 */ unsigned char m_buf[110];
    }; /* size: 0x007e */
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int log_to_scan_kbOffset;
    /* 0x0000 */ const int data_pages_kbOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int start_lsnOffset;
    /* 0x0000 */ const int end_lsnOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0348 */
}; /* size: 0x02b0 */

struct CSerializeContext<RPCStream>::GenericSerializer;

struct CSerializeContext<RPCStream>::CharTypeFormatter;

struct XE_TArray<XEEvent *,0>
{
  /* 0x0000 */ struct XEEvent** m_array;
}; /* size: 0x0008 */

struct CSerializeContext<RPCStream>::NativeTypeFormatter
{
}; /* size: 0x0001 */

class TCallbackListBase<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType> >
{
}; /* size: 0x0030 */

struct CSerializeContext<RPCStream>::ElementalSerializer
{
}; /* size: 0x0001 */

class XeSqlPkg::hadr_db_manager_establish_db_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1674[140];
      /* 0x0240 */ unsigned char m_buf[84];
    }; /* size: 0x0064 */
    /* 0x0000 */ const int msg_sourceOffset;
    /* 0x0000 */ const int message_log_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int recovery_pointOffset;
    /* 0x0000 */ const int log_truncation_blockOffset;
    /* 0x0000 */ const int hadr_truncation_blockOffset;
    /* 0x0000 */ const int log_backup_lsnOffset;
    /* 0x0000 */ const int minimum_skip_lsnOffset;
    /* 0x0000 */ const int redo_pointOffset;
    /* 0x0000 */ const int redo_timeOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0298 */

class XeSqlPkg::fastloadcontext_enabled
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1675[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class DefBaseAllocator
{
}; /* size: 0x0008 */

class SQLSOS_NonYieldThreadTableRecord
{
  /* 0x0000 */ unsigned long sm_NumberOfRecords;
  /* 0x0004 */ long Padding_1676[3];
  /* 0x0010 */ unsigned long m_ProcessID;
  /* 0x0014 */ unsigned long m_ThreadID;
  /* 0x0018 */ __int64 m_UserTimeStart;
  /* 0x0020 */ __int64 m_UserTimeEnd;
  /* 0x0028 */ __int64 m_KernelTimeStart;
  /* 0x0030 */ __int64 m_KernelTimeEnd;
}; /* size: 0x0038 */

class XeSqlPkg::query_driver_sent_statistics_profile
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1677[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

struct XE_TEvent<4,0,14>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,14> m_dynamicAttr;
  /* 0x02d8 */ struct XEEvent m_event;
}; /* size: 0x0320 */

class XeCloudMinPkg::become_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,14> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1678[140];
      /* 0x0240 */ unsigned char m_buf[85];
    }; /* size: 0x0065 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int become_nothing_on_failureOffset;
    /* 0x0000 */ const int filteredOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int hint_stream_idOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0320 */
}; /* size: 0x0298 */

typedef struct _SYSDBG_VIRTUAL
{
  /* 0x0000 */ void* Address;
  /* 0x0008 */ void* Buffer;
  /* 0x0010 */ unsigned long Request;
  /* 0x0014 */ long __PADDING__[1];
} SYSDBG_VIRTUAL, *PSYSDBG_VIRTUAL; /* size: 0x0018 */

class XeCloudMinPkg::become_forwarder_pending
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1679[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int no_copyOffset;
    /* 0x0000 */ const int additional_hashOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class std::_Init_locks
{
}; /* size: 0x0001 */

class XeCloudMinPkg::physical_seeding_fall_back_to_SERepl
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1680[140];
      /* 0x0240 */ unsigned char m_buf[78];
    }; /* size: 0x005e */
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_cluster_nameOffset;
    /* 0x0000 */ const int remote_server_nameOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_group_nameOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
    /* 0x0000 */ const int fall_back_reasonOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0290 */

class XeCloudMinPkg::set_partition_throttling_mode
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1681[140];
      /* 0x0240 */ unsigned char m_buf[23];
    }; /* size: 0x0027 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int throttling_modeOffset;
    /* 0x0000 */ const int throttling_reasonOffset;
    /* 0x0000 */ const int throttling_incident_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class XeCloudMinPkg::cps_update_peak_worker_count
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1682[140];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0054 */
    /* 0x0000 */ const int scoped_database_idOffset;
    /* 0x0000 */ const int current_worker_countOffset;
    /* 0x0000 */ const int new_worker_countOffset;
    /* 0x0000 */ const int current_update_offset_msOffset;
    /* 0x0000 */ const int new_update_offset_msOffset;
    /* 0x0000 */ const int current_counterOffset;
    /* 0x0000 */ const int new_counterOffset;
    /* 0x0000 */ const int refresh_interval_msOffset;
    /* 0x0000 */ const int server_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0288 */

typedef struct _SYSTEM_LEGACY_DRIVER_INFORMATION
{
  /* 0x0000 */ unsigned long VetoType;
  /* 0x0004 */ long Padding_1683;
  /* 0x0008 */ struct _UNICODE_STRING VetoList;
} SYSTEM_LEGACY_DRIVER_INFORMATION, *PSYSTEM_LEGACY_DRIVER_INFORMATION; /* size: 0x0018 */

class XeCloudMinPkg::repl_commit_xact
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1684[140];
      /* 0x0240 */ unsigned char m_buf[59];
    }; /* size: 0x004b */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cloud_partition_idOffset;
    /* 0x0000 */ const int is_forwarder_or_secondaryOffset;
    /* 0x0000 */ const int xact_csnOffset;
    /* 0x0000 */ const int xact_epochOffset;
    /* 0x0000 */ const int xact_commit_time_sourceOffset;
    /* 0x0000 */ const int app_nameOffset;
    /* 0x0000 */ const int tablegroup_nameOffset;
    /* 0x0000 */ const int low_keyOffset;
    /* 0x0000 */ const int high_keyOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0280 */

class TypeListNode<SchedulerMonitor::ProcessTrack const *,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

class XeSqlPkg::hadr_xrf_deleteAllXrf_beforeEntry
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1685[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int dbIdOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class SEList<SOS_ResourceGroup,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XeSqlPkg::physical_page_write
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1686[140];
      /* 0x0240 */ unsigned char m_buf[6];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class SEListEnum<SOS_ResourceGroup,0>;

class TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XeSqlPkg::query_rpc_server_collection_cache_insert
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1687[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_descriptorOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class Spinlock<151,3,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::xfcb_read_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1688[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int file_byte_offsetOffset;
    /* 0x0000 */ const int file_byte_countOffset;
    /* 0x0000 */ const int bytes_readOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class SpinlockHolder<263,1,1>;

struct RpcRequestorContextSLock
{
}; /* size: 0x0004 */

struct SpinEventMutexSLock
{
}; /* size: 0x0004 */

struct AsyncOpAdminWorkRegistrationHashTableSLock
{
}; /* size: 0x0004 */

class XeCloudMinPkg::kill_primary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1689[140];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x001b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int replica_subtypeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<199,3,1>;

class Spinlock<113,9,1>
{
}; /* size: 0x0004 */

class XeCloudMinPkg::become_forwarder
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1690[140];
      /* 0x0240 */ unsigned char m_buf[87];
    }; /* size: 0x0067 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int become_nothing_on_failureOffset;
    /* 0x0000 */ const int filteredOffset;
    /* 0x0000 */ const int process_deferred_commitOffset;
    /* 0x0000 */ const int continuous_copy_targetOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int hint_stream_idOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0370 */
}; /* size: 0x0298 */

class TypeListNode<unsigned int,TypeListNode<SchedulerMonitor::ProcessTrack const *,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XeCloudMinPkg::set_partition_commit_mode
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1691[140];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x001b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int commit_modeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >
{
}; /* size: 0x0001 */

class XeCloudMinPkg::partition_quorum_loss
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1692[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int last_epochOffset;
    /* 0x0000 */ const int last_csnOffset;
    /* 0x0000 */ const int pending_epochOffset;
    /* 0x0000 */ const int pending_csnOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >::Elem
{
}; /* size: 0x0010 */

class SpinlockHolder<82,13,1>;

class XeCloudMinPkg::catchup_to_secondary_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,15> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1693[140];
      /* 0x0240 */ unsigned char m_buf[97];
    }; /* size: 0x0071 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int create_utcOffset;
    /* 0x0000 */ const int catchup_return_codeOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0348 */
}; /* size: 0x02a8 */

class AutoSpinlockHolder<294,1,1>;

typedef struct _NETLOGON_INFO_3
{
  /* 0x0000 */ unsigned long netlog3_flags;
  /* 0x0004 */ unsigned long netlog3_logon_attempts;
  /* 0x0008 */ unsigned long netlog3_reserved1;
  /* 0x000c */ unsigned long netlog3_reserved2;
  /* 0x0010 */ unsigned long netlog3_reserved3;
  /* 0x0014 */ unsigned long netlog3_reserved4;
  /* 0x0018 */ unsigned long netlog3_reserved5;
} NETLOGON_INFO_3, *PNETLOGON_INFO_3; /* size: 0x001c */

class Spinlock<79,13,1>
{
}; /* size: 0x0004 */

class XeCloudMinPkg::physical_seeding_start_copy_from_primary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1694[140];
      /* 0x0240 */ unsigned char m_buf[58];
    }; /* size: 0x004a */
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_cluster_nameOffset;
    /* 0x0000 */ const int remote_server_nameOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_group_nameOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0280 */

class SpinlockHolder<101,10,1>;

class Spinlock<55,16,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::replica_create_local_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1695[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int phase_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::glm_acquire_database_lock_exception
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1696[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_reference_typeOffset;
    /* 0x0000 */ const int lock_modeOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int lock_optionOffset;
    /* 0x0000 */ const int lock_policyOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class XeSqlPkg::query_rpc_lob_action
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1697[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int lob_actionOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int lengthOffset;
    /* 0x0000 */ const int sizeOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

typedef struct _SI_COPYFILE
{
  /* 0x0000 */ unsigned long SourceFileNameLength;
  /* 0x0004 */ unsigned long DestinationFileNameLength;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ wchar_t FileNameBuffer[1];
  /* 0x000e */ char __PADDING__[2];
} SI_COPYFILE, *PSI_COPYFILE; /* size: 0x0010 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

class XeSqlPkg::ghost_cleanup_task_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1698[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int page_packets_queuedOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >,void,SchedulerMonitor::Track const *,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

struct tagDBPROP
{
  /* 0x0000 */ unsigned long dwPropertyID;
  /* 0x0004 */ unsigned long dwOptions;
  /* 0x0008 */ unsigned long dwStatus;
  /* 0x000c */ long Padding_1699;
  /* 0x0010 */ struct tagDBID colid;
  /* 0x0030 */ struct tagVARIANT vValue;
}; /* size: 0x0048 */

class SpinlockHolder<290,1,1>;

typedef struct _MEMORY_SCRUB_INFORMATION
{
  /* 0x0000 */ void* Handle;
  /* 0x0008 */ unsigned __int64 PagesScrubbed;
} MEMORY_SCRUB_INFORMATION, *PMEMORY_SCRUB_INFORMATION; /* size: 0x0010 */

typedef struct _PDH_TIME_INFO
{
  /* 0x0000 */ __int64 StartTime;
  /* 0x0008 */ __int64 EndTime;
  /* 0x0010 */ unsigned long SampleCount;
  /* 0x0014 */ long __PADDING__[1];
} PDH_TIME_INFO, *PPDH_TIME_INFO; /* size: 0x0018 */

typedef struct _wfinddata64i32_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long Padding_1700;
  /* 0x0008 */ __int64 time_create;
  /* 0x0010 */ __int64 time_access;
  /* 0x0018 */ __int64 time_write;
  /* 0x0020 */ unsigned long size;
  /* 0x0024 */ wchar_t name[260];
  /* 0x022c */ long __PADDING__[1];
} wfinddata64i32_t, *Pwfinddata64i32_t; /* size: 0x0230 */

class AutoSpinlockHolder<219,2,1>;

class AutoSpinlockHolder<30,19,1>;

class AutoSpinlockHolder<95,11,1>;

typedef struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
  /* 0x0000 */ struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION* Information;
  /* 0x0008 */ void* SectionBase;
  /* 0x0010 */ unsigned long SectionLength;
  /* 0x0014 */ long Padding_1701;
  /* 0x0018 */ void* SectionGlobalDataBase;
  /* 0x0020 */ unsigned long SectionGlobalDataLength;
  /* 0x0024 */ long __PADDING__[1];
} ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA; /* size: 0x0028 */

typedef struct _SERVER_INFO_1549
{
  /* 0x0000 */ unsigned long sv1549_networkerrorthreshold;
} SERVER_INFO_1549, *PSERVER_INFO_1549; /* size: 0x0004 */

struct SessionMgrSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::log_single_record
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1702[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int slot_idOffset;
    /* 0x0000 */ const int used_sizeOffset;
    /* 0x0000 */ const int reservation_sizeOffset;
    /* 0x0000 */ const int log_op_idOffset;
    /* 0x0000 */ const int log_op_nameOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class Spinlock<319,1,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<191,3,1>;

typedef struct _JOURNAL_SET_KEY_USER_FLAGS_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_1703;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _UNICODE_STRING KeyPathName;
  /* 0x0028 */ unsigned long OldFlags;
  /* 0x002c */ unsigned long NewFlags;
} JOURNAL_SET_KEY_USER_FLAGS_INFORMATION, *PJOURNAL_SET_KEY_USER_FLAGS_INFORMATION; /* size: 0x0030 */

struct CompPlanSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::redo_caught_up
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1704[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::database_ddl_stmt_runtime_check
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1705[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int statement_typeOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

struct FabricReplicaTransportSLock
{
}; /* size: 0x0004 */

typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION
{
  /* 0x0000 */ unsigned long FileAttributes;
  /* 0x0004 */ unsigned long ReparseTag;
} FILE_ATTRIBUTE_TAG_INFORMATION, *PFILE_ATTRIBUTE_TAG_INFORMATION; /* size: 0x0008 */

class XeSqlPkg::reserve_log_space
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1706[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int reserve_sizeOffset;
    /* 0x0000 */ const int log_sizeOffset;
    /* 0x0000 */ const int frag_countOffset;
    /* 0x0000 */ const int error_code_pointerOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

struct SoapSessionsSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<81,13,1>;

class SpinlockHolder<281,1,1>;

struct ExtentActivationSLock
{
}; /* size: 0x0004 */

typedef struct _PS_SYSTEM_DLL_INIT_BLOCK
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long SystemDllWowRelocation;
  /* 0x0008 */ unsigned __int64 SystemDllNativeRelocation;
  /* 0x0010 */ unsigned long Wow64SharedInformation[16];
  /* 0x0050 */ unsigned long RngData;
  /* 0x0054 */ long Padding_1707;
  /* 0x0058 */ unsigned __int64 MitigationOptions;
} PS_SYSTEM_DLL_INIT_BLOCK, *PPS_SYSTEM_DLL_INIT_BLOCK; /* size: 0x0060 */

class Spinlock<223,2,1>
{
}; /* size: 0x0004 */

struct SEReplPartitionByIdSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<239,1,1>;

struct SloInfoListSLock
{
}; /* size: 0x0004 */

class XeCloudMinPkg::repl_commit_xact_apply
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1708[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cloud_partition_idOffset;
    /* 0x0000 */ const int is_target_of_continuous_copyOffset;
    /* 0x0000 */ const int xact_csnOffset;
    /* 0x0000 */ const int xact_epochOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

struct Pow<10,6>
{
}; /* size: 0x0001 */

class SpinlockHolder<295,1,1>;

class SpinlockHolder<202,3,1>
{
  /* 0x0000 */ class Spinlock<202,3,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class SpinlockHolder<73,16,1>;

class XeCloudMinPkg::start_catchup_from_primary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1709[140];
      /* 0x0240 */ unsigned char m_buf[75];
    }; /* size: 0x005b */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0290 */

struct GuardianSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<133,4,1>;

class XeSqlPkg::prefetch_extent
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1710[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int extent_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

struct TransmitterHeartbeatDestinationsSLock
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1536
{
  /* 0x0000 */ int sv1536_enableoplocks;
} SERVER_INFO_1536, *PSERVER_INFO_1536; /* size: 0x0004 */

class RefCountImpl<XE_PredicateExpr>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct SbListSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<317,1,1>;

typedef struct _KEY_HANDLE_TAGS_INFORMATION
{
  /* 0x0000 */ unsigned long HandleTags;
} KEY_HANDLE_TAGS_INFORMATION, *PKEY_HANDLE_TAGS_INFORMATION; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>
{
  /* 0x0000 */ long Padding_1711[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

typedef struct _WKSTA_INFO_402
{
  /* 0x0000 */ unsigned long wki402_char_wait;
  /* 0x0004 */ unsigned long wki402_collection_time;
  /* 0x0008 */ unsigned long wki402_maximum_collection_count;
  /* 0x000c */ unsigned long wki402_keep_conn;
  /* 0x0010 */ unsigned long wki402_keep_search;
  /* 0x0014 */ unsigned long wki402_max_cmds;
  /* 0x0018 */ unsigned long wki402_num_work_buf;
  /* 0x001c */ unsigned long wki402_siz_work_buf;
  /* 0x0020 */ unsigned long wki402_max_wrk_cache;
  /* 0x0024 */ unsigned long wki402_sess_timeout;
  /* 0x0028 */ unsigned long wki402_siz_error;
  /* 0x002c */ unsigned long wki402_num_alerts;
  /* 0x0030 */ unsigned long wki402_num_services;
  /* 0x0034 */ unsigned long wki402_errlog_sz;
  /* 0x0038 */ unsigned long wki402_print_buf_time;
  /* 0x003c */ unsigned long wki402_num_char_buf;
  /* 0x0040 */ unsigned long wki402_siz_char_buf;
  /* 0x0044 */ long Padding_1712;
  /* 0x0048 */ wchar_t* wki402_wrk_heuristics;
  /* 0x0050 */ unsigned long wki402_mailslots;
  /* 0x0054 */ unsigned long wki402_num_dgram_buf;
  /* 0x0058 */ unsigned long wki402_max_threads;
  /* 0x005c */ long __PADDING__[1];
} WKSTA_INFO_402, *PWKSTA_INFO_402; /* size: 0x0060 */

struct If<1,CSerializeContext<CMemBufFormatter>::NativeTypeFormatter,CSerializeContext<CMemBufFormatter>::CharTypeFormatter>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

typedef struct _REG_NOTIFY_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ enum _REG_ACTION Action;
  /* 0x0008 */ unsigned long KeyLength;
  /* 0x000c */ wchar_t Key[1];
  /* 0x000e */ char __PADDING__[2];
} REG_NOTIFY_INFORMATION, *PREG_NOTIFY_INFORMATION; /* size: 0x0010 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>
{
}; /* size: 0x0001 */

class XeSqlPkg::file_written_to_replica
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1713[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
    /* 0x0000 */ const int io_dataOffset;
  }; /* size: 0x02c0 */
}; /* size: 0x0278 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >,void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

struct SEReplSecondaryTaskProxySLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<200,3,1>;

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION
{
  /* 0x0000 */ unsigned char KernelDebuggerEnabled;
  /* 0x0001 */ unsigned char KernelDebuggerNotPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION, *PSYSTEM_KERNEL_DEBUGGER_INFORMATION; /* size: 0x0002 */

typedef struct _BrowseDlgConfig_A
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bIncludeInstanceIndex : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long bSingleCounterPerAdd : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long bSingleCounterPerDialog : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long bLocalCountersOnly : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long bWildCardInstances : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long bHideDetailBox : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long bInitializePath : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long bDisableMachineSelection : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long bIncludeCostlyObjects : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long bShowObjectBrowser : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long bReserved : 22; /* bit position: 10 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_1714;
  /* 0x0008 */ struct HWND__* hWndOwner;
  /* 0x0010 */ char* szDataSource;
  /* 0x0018 */ char* szReturnPathBuffer;
  /* 0x0020 */ unsigned long cchReturnPathLength;
  /* 0x0024 */ long Padding_1715;
  /* 0x0028 */ void* pCallBack /* function */;
  /* 0x0030 */ unsigned __int64 dwCallBackArg;
  /* 0x0038 */ long CallBackStatus;
  /* 0x003c */ unsigned long dwDefaultDetailLevel;
  /* 0x0040 */ char* szDialogBoxCaption;
} BrowseDlgConfig_A, *PBrowseDlgConfig_A; /* size: 0x0048 */

struct XE_TEvent<4,2,17>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,17> m_dynamicAttr;
  /* 0x03b8 */ struct XEEvent m_event;
}; /* size: 0x0400 */

class XeSqlPkg::query_rpc_delete_rows
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1716[140];
      /* 0x0240 */ unsigned char m_buf[2];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int use_local_rowsetOffset;
    /* 0x0000 */ const int row_deletedOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

struct DataPortSourceInfoQueueSLock
{
}; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1048
{
  /* 0x0000 */ int wki1048_use_opportunistic_locking;
} WKSTA_INFO_1048, *PWKSTA_INFO_1048; /* size: 0x0004 */

class SpinlockHolder<195,3,1>;

class XeSqlPkg::deadlock_monitor_serialized_local_wait_for_graph
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1717[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int count_cyclesOffset;
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int objOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class AutoSpinlockHolder<66,16,1>;

class Spinlock<140,4,1>
{
}; /* size: 0x0004 */

struct XBitmap<StaticStorage<0> >
{
  /* 0x0000 */ struct StaticStorage<0> m_storage;
}; /* size: 0x0004 */

struct TsqlDebugSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<200,3,1>;

typedef struct _SERVER_INFO_1601
{
  /* 0x0000 */ unsigned long sv1598_lowdiskspaceminimum;
} SERVER_INFO_1601, *PSERVER_INFO_1601; /* size: 0x0004 */

struct IRowsetIdentity
{
}; /* size: 0x0008 */

class CAutoStreamHeader
{
  /* 0x0000 */ class CDStream* m_pCDStream;
  /* 0x0008 */ char m_savedHeader[256];
  /* 0x0108 */ char m_savedParent[256];
}; /* size: 0x0208 */

class SpinlockHolder<336,0,1>;

struct CommitTableSLock
{
}; /* size: 0x0004 */

class TBaseSafeCallbackList<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0030 */

class XeSqlPkg::collect_all_ExecUdfLobAccess
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1718[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

class AutoSpinlockHolder<39,18,1>;

class SpinlockHolder<84,13,1>;

class AutoSpinlockHolder<83,13,1>;

struct std::_Arithmetic_traits<int>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class std::basic_ostringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;

typedef struct _KAFFINITY_ENUMERATION_CONTEXT
{
  /* 0x0000 */ struct _KAFFINITY_EX* Affinity;
  /* 0x0008 */ unsigned __int64 CurrentMask;
  /* 0x0010 */ unsigned short CurrentIndex;
  /* 0x0012 */ char __PADDING__[6];
} KAFFINITY_ENUMERATION_CONTEXT, *PKAFFINITY_ENUMERATION_CONTEXT; /* size: 0x0018 */

struct std::is_error_code_enum<unsigned __int64>
{
}; /* size: 0x0001 */

struct std::is_error_code_enum<std::error_condition>
{
}; /* size: 0x0001 */

struct std::is_error_code_enum<SOS_TraceStream & (__cdecl*)(SOS_TraceStream &)>
{
}; /* size: 0x0001 */

struct std::is_error_code_enum<unsigned int>
{
}; /* size: 0x0001 */

struct std::_Arithmetic_traits<__int64>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct std::is_error_condition_enum<std::error_condition>
{
}; /* size: 0x0001 */

struct std::iterator_traits<unsigned short>
{
}; /* size: 0x0001 */

typedef struct _THREAD_TLS_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_1719;
  union
  {
    /* 0x0008 */ void* NewTlsData;
    /* 0x0008 */ void* OldTlsData;
  }; /* size: 0x0008 */
  /* 0x0010 */ void* ThreadId;
} THREAD_TLS_INFORMATION, *PTHREAD_TLS_INFORMATION; /* size: 0x0018 */

class std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >;

typedef struct _SERVER_INFO_103
{
  /* 0x0000 */ unsigned long sv103_platform_id;
  /* 0x0004 */ long Padding_1720;
  /* 0x0008 */ wchar_t* sv103_name;
  /* 0x0010 */ unsigned long sv103_version_major;
  /* 0x0014 */ unsigned long sv103_version_minor;
  /* 0x0018 */ unsigned long sv103_type;
  /* 0x001c */ long Padding_1721;
  /* 0x0020 */ wchar_t* sv103_comment;
  /* 0x0028 */ unsigned long sv103_users;
  /* 0x002c */ long sv103_disc;
  /* 0x0030 */ int sv103_hidden;
  /* 0x0034 */ unsigned long sv103_announce;
  /* 0x0038 */ unsigned long sv103_anndelta;
  /* 0x003c */ unsigned long sv103_licenses;
  /* 0x0040 */ wchar_t* sv103_userpath;
  /* 0x0048 */ unsigned long sv103_capabilities;
  /* 0x004c */ long __PADDING__[1];
} SERVER_INFO_103, *PSERVER_INFO_103; /* size: 0x0050 */

typedef struct _REPL_INFO_0
{
  /* 0x0000 */ unsigned long rp0_role;
  /* 0x0004 */ long Padding_1722;
  /* 0x0008 */ wchar_t* rp0_exportpath;
  /* 0x0010 */ wchar_t* rp0_exportlist;
  /* 0x0018 */ wchar_t* rp0_importpath;
  /* 0x0020 */ wchar_t* rp0_importlist;
  /* 0x0028 */ wchar_t* rp0_logonusername;
  /* 0x0030 */ unsigned long rp0_interval;
  /* 0x0034 */ unsigned long rp0_pulse;
  /* 0x0038 */ unsigned long rp0_guardtime;
  /* 0x003c */ unsigned long rp0_random;
} REPL_INFO_0, *PREPL_INFO_0; /* size: 0x0040 */

struct std::_Arithmetic_traits<signed char>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct std::_Facetptr<std::numpunct<char> >
{
  /* 0x0000 */ const class std::locale::facet* _Psave;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

typedef struct _PROCESS_TLS_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long OperationType;
  /* 0x0008 */ unsigned long ThreadDataCount;
  union
  {
    /* 0x000c */ unsigned long TlsIndex;
    /* 0x000c */ unsigned long PreviousCount;
  }; /* size: 0x0004 */
  /* 0x0010 */ struct _THREAD_TLS_INFORMATION ThreadData[1];
} PROCESS_TLS_INFORMATION, *PPROCESS_TLS_INFORMATION; /* size: 0x0028 */

struct std::is_error_code_enum<int>
{
}; /* size: 0x0001 */

struct std::_Arithmetic_traits<short>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct SQLMRRowDouble
{
  /* 0x0000 */ const wchar_t* rDescription;
  /* 0x0008 */ double rValue;
}; /* size: 0x0010 */

struct std::_Pickinteger<1>
{
}; /* size: 0x0001 */

class std::basic_fstream<unsigned short,std::char_traits<unsigned short> >;

typedef struct _FILE_NAME_INFORMATION
{
  /* 0x0000 */ unsigned long FileNameLength;
  /* 0x0004 */ wchar_t FileName[1];
  /* 0x0006 */ char __PADDING__[2];
} FILE_NAME_INFORMATION, *PFILE_NAME_INFORMATION; /* size: 0x0008 */

struct std::is_error_code_enum<enum std::io_errc::io_errc>
{
}; /* size: 0x0001 */

typedef struct _FILE_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CreationTime;
  /* 0x0008 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0010 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0018 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0020 */ unsigned long FileAttributes;
  /* 0x0024 */ long __PADDING__[1];
} FILE_BASIC_INFORMATION, *PFILE_BASIC_INFORMATION; /* size: 0x0028 */

typedef struct _FILE_EA_INFORMATION
{
  /* 0x0000 */ unsigned long EaSize;
} FILE_EA_INFORMATION, *PFILE_EA_INFORMATION; /* size: 0x0004 */

typedef struct _FILE_ACCESS_INFORMATION
{
  /* 0x0000 */ unsigned long AccessFlags;
} FILE_ACCESS_INFORMATION, *PFILE_ACCESS_INFORMATION; /* size: 0x0004 */

typedef struct _FILE_POSITION_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CurrentByteOffset;
} FILE_POSITION_INFORMATION, *PFILE_POSITION_INFORMATION; /* size: 0x0008 */

typedef struct _FILE_MODE_INFORMATION
{
  /* 0x0000 */ unsigned long Mode;
} FILE_MODE_INFORMATION, *PFILE_MODE_INFORMATION; /* size: 0x0004 */

typedef struct _FILE_ALIGNMENT_INFORMATION
{
  /* 0x0000 */ unsigned long AlignmentRequirement;
} FILE_ALIGNMENT_INFORMATION, *PFILE_ALIGNMENT_INFORMATION; /* size: 0x0004 */

typedef struct _FILE_ALL_INFORMATION
{
  /* 0x0000 */ struct _FILE_BASIC_INFORMATION BasicInformation;
  /* 0x0028 */ struct _FILE_STANDARD_INFORMATION StandardInformation;
  /* 0x0040 */ struct _FILE_INTERNAL_INFORMATION InternalInformation;
  /* 0x0048 */ struct _FILE_EA_INFORMATION EaInformation;
  /* 0x004c */ struct _FILE_ACCESS_INFORMATION AccessInformation;
  /* 0x0050 */ struct _FILE_POSITION_INFORMATION PositionInformation;
  /* 0x0058 */ struct _FILE_MODE_INFORMATION ModeInformation;
  /* 0x005c */ struct _FILE_ALIGNMENT_INFORMATION AlignmentInformation;
  /* 0x0060 */ struct _FILE_NAME_INFORMATION NameInformation;
} FILE_ALL_INFORMATION, *PFILE_ALL_INFORMATION; /* size: 0x0068 */

struct std::iterator_traits<unsigned long>
{
}; /* size: 0x0001 */

struct std::is_error_code_enum<std::ios_base::failure>
{
}; /* size: 0x0001 */

class std::basic_stringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;

typedef struct _WINDOWS_OS_OPTIONS
{
  /* 0x0000 */ unsigned char Signature[8];
  /* 0x0008 */ unsigned long Version;
  /* 0x000c */ unsigned long Length;
  /* 0x0010 */ unsigned long OsLoadPathOffset;
  /* 0x0014 */ wchar_t OsLoadOptions[1];
  /* 0x0016 */ char __PADDING__[2];
} WINDOWS_OS_OPTIONS, *PWINDOWS_OS_OPTIONS; /* size: 0x0018 */

struct std::_Arithmetic_traits<long>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _USER_MODALS_INFO_1004
{
  /* 0x0000 */ unsigned long usrmod1004_force_logoff;
} USER_MODALS_INFO_1004, *PUSER_MODALS_INFO_1004; /* size: 0x0004 */

typedef struct _AE_CONNSTOP
{
  /* 0x0000 */ unsigned long ae_cp_compname;
  /* 0x0004 */ unsigned long ae_cp_username;
  /* 0x0008 */ unsigned long ae_cp_netname;
  /* 0x000c */ unsigned long ae_cp_connid;
  /* 0x0010 */ unsigned long ae_cp_reason;
} AE_CONNSTOP, *PAE_CONNSTOP; /* size: 0x0014 */

struct std::is_error_code_enum<enum std::errc::errc>
{
}; /* size: 0x0001 */

struct std::_Arithmetic_traits<unsigned long>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct std::is_error_condition_enum<std::allocator<char> >
{
}; /* size: 0x0001 */

struct std::is_error_condition_enum<enum std::io_errc::io_errc>
{
}; /* size: 0x0001 */

typedef struct _FILE_ZERO_DATA_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER FileOffset;
  /* 0x0008 */ union _LARGE_INTEGER BeyondFinalZero;
} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION; /* size: 0x0010 */

struct std::iterator_traits<short>
{
}; /* size: 0x0001 */

typedef struct _REPL_INFO_1000
{
  /* 0x0000 */ unsigned long rp1000_interval;
} REPL_INFO_1000, *PREPL_INFO_1000; /* size: 0x0004 */

struct std::identity<std::strstream>
{
}; /* size: 0x0001 */

typedef struct _PLUGPLAY_CONTROL_DEPTH_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ unsigned long DeviceDepth;
  /* 0x0014 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_DEPTH_DATA, *PPLUGPLAY_CONTROL_DEPTH_DATA; /* size: 0x0018 */

typedef struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1
{
  /* 0x0000 */ unsigned long Name;
  /* 0x0004 */ unsigned short ValueType;
  /* 0x0006 */ unsigned short Reserved;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long ValueCount;
  union
  {
    union
    {
      /* 0x0010 */ unsigned long pInt64[1];
      /* 0x0010 */ unsigned long pUint64[1];
      /* 0x0010 */ unsigned long ppString[1];
      /* 0x0010 */ unsigned long pFqbn[1];
      /* 0x0010 */ unsigned long pOctetString[1];
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ Values;
} TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1, *PTOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1; /* size: 0x0014 */

struct std::is_error_code_enum<signed char>
{
}; /* size: 0x0001 */

class DmpPointer<XE_ModuleManager *>
{
  /* 0x0000 */ class XE_ModuleManager** m_pRaw;
}; /* size: 0x0008 */

class std::basic_ifstream<char,std::char_traits<char> >;

struct std::iterator_traits<unsigned __int64>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_POWER_STATE_DISABLE_REASON
{
  /* 0x0000 */ unsigned char AffectedState[8];
  /* 0x0008 */ unsigned long PowerReasonCode;
  /* 0x000c */ unsigned long PowerReasonLength;
} SYSTEM_POWER_STATE_DISABLE_REASON, *PSYSTEM_POWER_STATE_DISABLE_REASON; /* size: 0x0010 */

class std::basic_ifstream<unsigned short,std::char_traits<unsigned short> >;

struct std::_Int_iterator_tag
{
}; /* size: 0x0001 */

class DmpListIterator<SOS_RingBuffer,8,0,SEList<SOS_RingBuffer,0>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

struct std::_Facetptr<std::ctype<char> >
{
  /* 0x0000 */ const class std::locale::facet* _Psave;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

struct XListDmpOffsets<XE_TargetEntry>
{
}; /* size: 0x0001 */

struct std::is_error_code_enum<std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >
{
}; /* size: 0x0001 */

typedef struct _KUSER_SHARED_DATA
{
  /* 0x0000 */ unsigned long TickCountLowDeprecated;
  /* 0x0004 */ unsigned long TickCountMultiplier;
  /* 0x0008 */ volatile struct _KSYSTEM_TIME InterruptTime;
  /* 0x0014 */ volatile struct _KSYSTEM_TIME SystemTime;
  /* 0x0020 */ volatile struct _KSYSTEM_TIME TimeZoneBias;
  /* 0x002c */ unsigned short ImageNumberLow;
  /* 0x002e */ unsigned short ImageNumberHigh;
  /* 0x0030 */ wchar_t NtSystemRoot[260];
  /* 0x0238 */ unsigned long MaxStackTraceDepth;
  /* 0x023c */ unsigned long CryptoExponent;
  /* 0x0240 */ unsigned long TimeZoneId;
  /* 0x0244 */ unsigned long LargePageMinimum;
  /* 0x0248 */ unsigned long AitSamplingValue;
  /* 0x024c */ unsigned long AppCompatFlag;
  /* 0x0250 */ unsigned __int64 RNGSeedVersion;
  /* 0x0258 */ unsigned long GlobalValidationRunlevel;
  /* 0x025c */ unsigned long Reserved2[2];
  /* 0x0264 */ enum _NT_PRODUCT_TYPE NtProductType;
  /* 0x0268 */ unsigned char ProductTypeIsValid;
  /* 0x0269 */ unsigned char Reserved0[1];
  /* 0x026a */ unsigned short NativeProcessorArchitecture;
  /* 0x026c */ unsigned long NtMajorVersion;
  /* 0x0270 */ unsigned long NtMinorVersion;
  /* 0x0274 */ unsigned char ProcessorFeatures[64];
  /* 0x02b4 */ unsigned long Reserved1;
  /* 0x02b8 */ unsigned long Reserved3;
  /* 0x02bc */ volatile unsigned long TimeSlip;
  /* 0x02c0 */ enum _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
  /* 0x02c4 */ unsigned long AltArchitecturePad[1];
  /* 0x02c8 */ union _LARGE_INTEGER SystemExpirationDate;
  /* 0x02d0 */ unsigned long SuiteMask;
  /* 0x02d4 */ unsigned char KdDebuggerEnabled;
  union
  {
    /* 0x02d5 */ unsigned char MitigationPolicies;
    struct /* bitfield */
    {
      /* 0x02d5 */ unsigned char NXSupportPolicy : 2; /* bit position: 0 */
      /* 0x02d5 */ unsigned char SEHValidationPolicy : 2; /* bit position: 2 */
      /* 0x02d5 */ unsigned char CurDirDevicesSkippedForDlls : 2; /* bit position: 4 */
      /* 0x02d5 */ unsigned char Reserved : 2; /* bit position: 6 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x02d6 */ unsigned char Reserved6[2];
  /* 0x02d8 */ volatile unsigned long ActiveConsoleId;
  /* 0x02dc */ volatile unsigned long DismountCount;
  /* 0x02e0 */ unsigned long ComPlusPackage;
  /* 0x02e4 */ unsigned long LastSystemRITEventTickCount;
  /* 0x02e8 */ unsigned long NumberOfPhysicalPages;
  /* 0x02ec */ unsigned char SafeBootMode;
  /* 0x02ed */ unsigned char Reserved12[3];
  union
  {
    /* 0x02f0 */ unsigned long SharedDataFlags;
    struct /* bitfield */
    {
      /* 0x02f0 */ unsigned long DbgErrorPortPresent : 1; /* bit position: 0 */
      /* 0x02f0 */ unsigned long DbgElevationEnabled : 1; /* bit position: 1 */
      /* 0x02f0 */ unsigned long DbgVirtEnabled : 1; /* bit position: 2 */
      /* 0x02f0 */ unsigned long DbgInstallerDetectEnabled : 1; /* bit position: 3 */
      /* 0x02f0 */ unsigned long DbgLkgEnabled : 1; /* bit position: 4 */
      /* 0x02f0 */ unsigned long DbgDynProcessorEnabled : 1; /* bit position: 5 */
      /* 0x02f0 */ unsigned long DbgConsoleBrokerEnabled : 1; /* bit position: 6 */
      /* 0x02f0 */ unsigned long SpareBits : 25; /* bit position: 7 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x02f4 */ unsigned long DataFlagsPad[1];
  /* 0x02f8 */ unsigned __int64 TestRetInstruction;
  /* 0x0300 */ unsigned long Reserved9;
  /* 0x0304 */ unsigned long Reserved10;
  /* 0x0308 */ unsigned __int64 SystemCallPad[3];
  union
  {
    /* 0x0320 */ volatile struct _KSYSTEM_TIME TickCount;
    /* 0x0320 */ volatile unsigned __int64 TickCountQuad;
    /* 0x0320 */ unsigned long ReservedTickCountOverlay[3];
  }; /* size: 0x000c */
  /* 0x032c */ unsigned long TickCountPad[1];
  /* 0x0330 */ unsigned long Cookie;
  /* 0x0334 */ unsigned long CookiePad[1];
  /* 0x0338 */ __int64 ConsoleSessionForegroundProcessId;
  /* 0x0340 */ volatile unsigned __int64 TimeUpdateSequence;
  /* 0x0348 */ unsigned __int64 LastTimeUpdateQpcValue;
  /* 0x0350 */ unsigned __int64 LastInterruptTimeUpdateQpcValue;
  /* 0x0358 */ unsigned __int64 QpcTimeIncrement;
  /* 0x0360 */ unsigned long QpcTimeIncrement32;
  /* 0x0364 */ unsigned long Reserved8[7];
  /* 0x0380 */ unsigned short UserModeGlobalLogger[16];
  /* 0x03a0 */ unsigned long ImageFileExecutionOptions;
  /* 0x03a4 */ unsigned long LangGenerationCount;
  /* 0x03a8 */ volatile unsigned __int64 InterruptTimeBias;
  /* 0x03b0 */ volatile unsigned __int64 TscQpcBias;
  /* 0x03b8 */ volatile unsigned long ActiveProcessorCount;
  /* 0x03bc */ volatile unsigned char ActiveGroupCount;
  /* 0x03bd */ unsigned char QpcTimeIncrementShift;
  union
  {
    /* 0x03be */ unsigned short TscQpcData;
    struct
    {
      /* 0x03be */ volatile unsigned char TscQpcEnabled;
      /* 0x03bf */ unsigned char TscQpcShift;
    }; /* size: 0x0002 */
  }; /* size: 0x0002 */
  /* 0x03c0 */ struct _XSTATE_CONFIGURATION XState;
} KUSER_SHARED_DATA, *PKUSER_SHARED_DATA; /* size: 0x05d0 */

struct std::tr1::_Is_floating_point<double>
{
}; /* size: 0x0001 */

class IsArray<unsigned long>
{
}; /* size: 0x0001 */

struct std::tr1::_Remove_reference<void (__cdecl*&)(void *)>
{
}; /* size: 0x0001 */

struct std::tr1::_Or<1,0>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_CALL_COUNT_INFORMATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long NumberOfTables;
} SYSTEM_CALL_COUNT_INFORMATION, *PSYSTEM_CALL_COUNT_INFORMATION; /* size: 0x0008 */

struct std::tr1::integral_constant<bool,1>
{
  /* 0x0000 */ const BOOL value;
}; /* size: 0x0001 */

struct std::tr1::_Is_integral<unsigned int>
{
}; /* size: 0x0001 */

class DmpPointer<GroupList>
{
  /* 0x0000 */ class GroupList* m_pRaw;
}; /* size: 0x0008 */

struct std::tr1::_Is_integral<unsigned __int64>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_SPCALL2_INFORMATION
{
  /* 0x0000 */ void* InputData;
  /* 0x0008 */ void* OutputData;
  /* 0x0010 */ unsigned long InputDataSize;
  /* 0x0014 */ unsigned long OutputDataSize;
  /* 0x0018 */ long Status;
  /* 0x001c */ long __PADDING__[1];
} SYSTEM_SPCALL2_INFORMATION, *PSYSTEM_SPCALL2_INFORMATION; /* size: 0x0020 */

struct std::tr1::_Remove_reference<char * &>
{
}; /* size: 0x0001 */

struct std::tr1::_Is_void<void>
{
}; /* size: 0x0001 */

struct std::tr1::_Remove_reference<__int64 &>
{
}; /* size: 0x0001 */

struct std::tr1::_Is_integral<char>
{
}; /* size: 0x0001 */

typedef struct _AE_SESSLOGON
{
  /* 0x0000 */ unsigned long ae_so_compname;
  /* 0x0004 */ unsigned long ae_so_username;
  /* 0x0008 */ unsigned long ae_so_privilege;
} AE_SESSLOGON, *PAE_SESSLOGON; /* size: 0x000c */

struct std::tr1::_Is_integral<long>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_SYSTEM_PARTITION_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING SystemPartition;
} SYSTEM_SYSTEM_PARTITION_INFORMATION, *PSYSTEM_SYSTEM_PARTITION_INFORMATION; /* size: 0x0010 */

struct std::tr1::_Remove_reference<std::ios_base::_Fnarray * &>
{
}; /* size: 0x0001 */

struct std::tr1::_Is_integral<int>
{
}; /* size: 0x0001 */

typedef struct _RTL_PERTHREAD_CURDIR
{
  /* 0x0000 */ struct _RTL_DRIVE_LETTER_CURDIR* CurrentDirectories;
  /* 0x0008 */ struct _UNICODE_STRING* ImageName;
  /* 0x0010 */ void* Environment;
} RTL_PERTHREAD_CURDIR, *PRTL_PERTHREAD_CURDIR; /* size: 0x0018 */

struct std::tr1::add_rvalue_reference<void const volatile >
{
}; /* size: 0x0001 */

class DmpPointer<SOS_ResourceGroup>
{
  /* 0x0000 */ class SOS_ResourceGroup* m_pRaw;
}; /* size: 0x0008 */

struct std::tr1::add_reference<void const volatile >
{
}; /* size: 0x0001 */

typedef struct _WKSTA_INFO_1051
{
  /* 0x0000 */ int wki1051_buf_named_pipes;
} WKSTA_INFO_1051, *PWKSTA_INFO_1051; /* size: 0x0004 */

struct std::tr1::_Remove_reference<std::ios_base::_Iosarray * &>
{
}; /* size: 0x0001 */

struct std::tr1::_Is_integral<__int64>
{
}; /* size: 0x0001 */

typedef struct _QUAD
{
  union
  {
    /* 0x0000 */ __int64 UseThisFieldToCopy;
    /* 0x0000 */ double DoNotUseThisField;
  }; /* size: 0x0008 */
} QUAD, *PQUAD; /* size: 0x0008 */

struct std::tr1::_Get_align<long>
{
  /* 0x0000 */ long _Elt0;
  /* 0x0004 */ char _Elt1;
  /* 0x0005 */ char Padding_1723[3];
  /* 0x0008 */ long _Elt2;
}; /* size: 0x000c */

struct std::tr1::_Remove_reference<int &>
{
}; /* size: 0x0001 */

struct std::tr1::add_reference<void>
{
}; /* size: 0x0001 */

struct std::tr1::enable_if<1,std::error_condition>
{
}; /* size: 0x0001 */

struct tagDBCONSTRAINTDESC
{
  /* 0x0000 */ struct tagDBID* pConstraintID;
  /* 0x0008 */ unsigned long ConstraintType;
  /* 0x000c */ long Padding_1724;
  /* 0x0010 */ unsigned __int64 cColumns;
  /* 0x0018 */ struct tagDBID* rgColumnList;
  /* 0x0020 */ struct tagDBID* pReferencedTableID;
  /* 0x0028 */ unsigned __int64 cForeignKeyColumns;
  /* 0x0030 */ struct tagDBID* rgForeignKeyColumnList;
  /* 0x0038 */ wchar_t* pwszConstraintText;
  /* 0x0040 */ unsigned long UpdateRule;
  /* 0x0044 */ unsigned long DeleteRule;
  /* 0x0048 */ unsigned long MatchType;
  /* 0x004c */ unsigned long Deferrability;
  /* 0x0050 */ unsigned __int64 cReserved;
  /* 0x0058 */ struct tagDBPROPSET* rgReserved;
}; /* size: 0x0060 */

struct std::tr1::_Is_integral<unsigned char>
{
}; /* size: 0x0001 */

typedef struct _THREAD_CYCLE_TIME_INFORMATION
{
  /* 0x0000 */ unsigned __int64 AccumulatedCycles;
  /* 0x0008 */ unsigned __int64 CurrentCycleCount;
} THREAD_CYCLE_TIME_INFORMATION, *PTHREAD_CYCLE_TIME_INFORMATION; /* size: 0x0010 */

struct std::tr1::_Remove_reference<char &>
{
}; /* size: 0x0001 */

typedef struct _SERVER_INFO_1563
{
  /* 0x0000 */ unsigned long sv1563_sharingviolationretries;
} SERVER_INFO_1563, *PSERVER_INFO_1563; /* size: 0x0004 */

struct std::tr1::enable_if<0,std::error_code>
{
}; /* size: 0x0001 */

struct std::tr1::_Is_integral<short>
{
}; /* size: 0x0001 */

struct std::tr1::_Is_floating_point<long double>
{
}; /* size: 0x0001 */

struct std::tr1::enable_if<0,std::error_condition>
{
}; /* size: 0x0001 */

typedef struct _CLUSTER_VALIDATE_CSV_FILENAME
{
  union
  {
    /* 0x0000 */ wchar_t* szFileName /* zero-length array */;
    /* 0x0000 */ char __PADDING__[2];
  }; /* size: 0x0002 */
} CLUSTER_VALIDATE_CSV_FILENAME, *PCLUSTER_VALIDATE_CSV_FILENAME; /* size: 0x0002 */

struct std::tr1::_Or<1,1>
{
}; /* size: 0x0001 */

class std::basic_fstream<char,std::char_traits<char> >;

struct _HNETWORK;

struct std::is_error_condition_enum<std::allocator<unsigned short> >
{
}; /* size: 0x0001 */

typedef struct _SERVER_INFO_1564
{
  /* 0x0000 */ unsigned long sv1564_sharingviolationdelay;
} SERVER_INFO_1564, *PSERVER_INFO_1564; /* size: 0x0004 */

struct XE_TArray<XEDataAttribute,21>
{
  /* 0x0000 */ struct XEDataAttribute m_array[21];
}; /* size: 0x0348 */

struct XE_TEvent<3,0,21>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,21> m_dynamicAttr;
  /* 0x03c8 */ struct XEEvent m_event;
}; /* size: 0x0410 */

struct std::is_error_condition_enum<std::istreambuf_iterator<unsigned short,std::char_traits<unsigned short> > >
{
}; /* size: 0x0001 */

struct _WNF_USER_SUBSCRIPTION;

class std::basic_istringstream<char,std::char_traits<char>,std::allocator<char> >;

struct std::_Arithmetic_traits<char>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

typedef struct _OBJECT_ATTRIBUTES32
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long RootDirectory;
  /* 0x0008 */ unsigned long ObjectName;
  /* 0x000c */ unsigned long Attributes;
  /* 0x0010 */ unsigned long SecurityDescriptor;
  /* 0x0014 */ unsigned long SecurityQualityOfService;
} OBJECT_ATTRIBUTES32, *POBJECT_ATTRIBUTES32; /* size: 0x0018 */

struct std::iterator_traits<char>
{
}; /* size: 0x0001 */

struct std::_Arithmetic_traits<unsigned char>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class std::basic_ofstream<char,std::char_traits<char> >;

struct std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
{
  /* 0x0000 */ const class std::locale::facet* _Psave;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

struct std::is_error_code_enum<unsigned short>
{
}; /* size: 0x0001 */

typedef struct _FILE_VOLUME_NAME_INFORMATION
{
  /* 0x0000 */ unsigned long DeviceNameLength;
  /* 0x0004 */ wchar_t DeviceName[1];
  /* 0x0006 */ char __PADDING__[2];
} FILE_VOLUME_NAME_INFORMATION, *PFILE_VOLUME_NAME_INFORMATION; /* size: 0x0008 */

struct std::is_error_code_enum<std::allocator<unsigned short> >
{
}; /* size: 0x0001 */

typedef struct _PARSE_MESSAGE_CONTEXT
{
  /* 0x0000 */ unsigned long fFlags;
  /* 0x0004 */ unsigned long cwSavColumn;
  /* 0x0008 */ unsigned __int64 iwSrc;
  /* 0x0010 */ unsigned __int64 iwDst;
  /* 0x0018 */ unsigned __int64 iwDstSpace;
  /* 0x0020 */ char* lpvArgStart;
} PARSE_MESSAGE_CONTEXT, *PPARSE_MESSAGE_CONTEXT; /* size: 0x0028 */

class std::basic_stringbuf<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;

typedef struct _OBJECT_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned long Attributes;
  /* 0x0004 */ unsigned long GrantedAccess;
  /* 0x0008 */ unsigned long HandleCount;
  /* 0x000c */ unsigned long PointerCount;
  /* 0x0010 */ unsigned long PagedPoolCharge;
  /* 0x0014 */ unsigned long NonPagedPoolCharge;
  /* 0x0018 */ unsigned long Reserved[3];
  /* 0x0024 */ unsigned long NameInfoSize;
  /* 0x0028 */ unsigned long TypeInfoSize;
  /* 0x002c */ unsigned long SecurityDescriptorSize;
  /* 0x0030 */ union _LARGE_INTEGER CreationTime;
} OBJECT_BASIC_INFORMATION, *POBJECT_BASIC_INFORMATION; /* size: 0x0038 */

struct std::iterator_traits<unsigned char>
{
}; /* size: 0x0001 */

struct std::is_error_condition_enum<std::istreambuf_iterator<char,std::char_traits<char> > >
{
}; /* size: 0x0001 */

class std::collate<unsigned short>;

struct std::iterator_traits<bool>
{
}; /* size: 0x0001 */

class std::basic_ofstream<unsigned short,std::char_traits<unsigned short> >;

typedef struct _SERVER_INFO_502
{
  /* 0x0000 */ unsigned long sv502_sessopens;
  /* 0x0004 */ unsigned long sv502_sessvcs;
  /* 0x0008 */ unsigned long sv502_opensearch;
  /* 0x000c */ unsigned long sv502_sizreqbuf;
  /* 0x0010 */ unsigned long sv502_initworkitems;
  /* 0x0014 */ unsigned long sv502_maxworkitems;
  /* 0x0018 */ unsigned long sv502_rawworkitems;
  /* 0x001c */ unsigned long sv502_irpstacksize;
  /* 0x0020 */ unsigned long sv502_maxrawbuflen;
  /* 0x0024 */ unsigned long sv502_sessusers;
  /* 0x0028 */ unsigned long sv502_sessconns;
  /* 0x002c */ unsigned long sv502_maxpagedmemoryusage;
  /* 0x0030 */ unsigned long sv502_maxnonpagedmemoryusage;
  /* 0x0034 */ int sv502_enablesoftcompat;
  /* 0x0038 */ int sv502_enableforcedlogoff;
  /* 0x003c */ int sv502_timesource;
  /* 0x0040 */ int sv502_acceptdownlevelapis;
  /* 0x0044 */ int sv502_lmannounce;
} SERVER_INFO_502, *PSERVER_INFO_502; /* size: 0x0048 */

struct std::is_error_code_enum<std::error_code>
{
}; /* size: 0x0001 */

union CLUSPROP_SYNTAX
{
  union
  {
    /* 0x0000 */ unsigned long dw;
    struct
    {
      /* 0x0000 */ unsigned short wFormat;
      /* 0x0002 */ unsigned short wType;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

struct CLUSPROP_VALUE
{
  /* 0x0000 */ union CLUSPROP_SYNTAX Syntax;
  /* 0x0004 */ unsigned long cbLength;
}; /* size: 0x0008 */

class std::basic_string<unsigned int,std::char_traits<unsigned int>,std::allocator<unsigned int> >;

struct std::_Arithmetic_traits<bool>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct std::iterator_traits<long>
{
}; /* size: 0x0001 */

class std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >;

struct std::_Arithmetic_traits<unsigned int>
{
  /* 0x0000 */ const int _Rank;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct std::_Facetptr<std::ctype<unsigned short> >
{
  /* 0x0000 */ const class std::locale::facet* _Psave;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

struct CLUSPROP_LONG
{
  /* 0x0000 */ long Padding_1725[2];
  /* 0x0008 */ long l;
}; /* size: 0x000c */

struct std::is_error_code_enum<std::allocator<char> >
{
}; /* size: 0x0001 */

class std::basic_istringstream<unsigned short,std::char_traits<unsigned short>,std::allocator<unsigned short> >;

struct XE_TObjects<XEType,0>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEType *,0> m_objectPtrs;
}; /* size: 0x0018 */

struct ReplWorkerPoolsSLock
{
}; /* size: 0x0004 */

typedef struct _BrowseDlgConfig_W
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long bIncludeInstanceIndex : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long bSingleCounterPerAdd : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long bSingleCounterPerDialog : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long bLocalCountersOnly : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long bWildCardInstances : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long bHideDetailBox : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned long bInitializePath : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned long bDisableMachineSelection : 1; /* bit position: 7 */
    /* 0x0000 */ unsigned long bIncludeCostlyObjects : 1; /* bit position: 8 */
    /* 0x0000 */ unsigned long bShowObjectBrowser : 1; /* bit position: 9 */
    /* 0x0000 */ unsigned long bReserved : 22; /* bit position: 10 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_1726;
  /* 0x0008 */ struct HWND__* hWndOwner;
  /* 0x0010 */ wchar_t* szDataSource;
  /* 0x0018 */ wchar_t* szReturnPathBuffer;
  /* 0x0020 */ unsigned long cchReturnPathLength;
  /* 0x0024 */ long Padding_1727;
  /* 0x0028 */ void* pCallBack /* function */;
  /* 0x0030 */ unsigned __int64 dwCallBackArg;
  /* 0x0038 */ long CallBackStatus;
  /* 0x003c */ unsigned long dwDefaultDetailLevel;
  /* 0x0040 */ wchar_t* szDialogBoxCaption;
} BrowseDlgConfig_W, *PBrowseDlgConfig_W; /* size: 0x0048 */

class AutoSpinlockHolder<136,4,1>;

struct XE_TObjects<XEPredicateSource,11>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEPredicateSource *,11> m_objectPtrs;
}; /* size: 0x0068 */

struct FileTableSLock
{
}; /* size: 0x0004 */

struct CLUSPROP_WORD
{
  /* 0x0000 */ long Padding_1728[2];
  /* 0x0008 */ unsigned short w;
  /* 0x000a */ char __PADDING__[2];
}; /* size: 0x000c */

class UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

class UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

typedef struct _ADMIN_OTHER_INFO
{
  /* 0x0000 */ unsigned long alrtad_errcode;
  /* 0x0004 */ unsigned long alrtad_numstrings;
} ADMIN_OTHER_INFO, *PADMIN_OTHER_INFO; /* size: 0x0008 */

class SpinlockHolder<8,19,1>;

typedef struct _SERVER_INFO_1580
{
  /* 0x0000 */ unsigned long sv1580_maxfreemfcbs;
} SERVER_INFO_1580, *PSERVER_INFO_1580; /* size: 0x0004 */

struct CLUSPROP_SECURITY_DESCRIPTOR
{
  /* 0x0000 */ long Padding_1729[2];
  union
  {
    /* 0x0008 */ struct _SECURITY_DESCRIPTOR_RELATIVE sd;
    /* 0x0008 */ unsigned char* rgbSecurityDescriptor /* zero-length array */;
    /* 0x0008 */ long __PADDING__[5];
  }; /* size: 0x0014 */
}; /* size: 0x001c */

class AutoSpinlockHolder<110,9,1>;

class SpinlockHolder<1,19,1>;

struct _HGROUP;

class AutoSpinlockHolder<86,13,1>;

struct CLUSPROP_FILETIME
{
  /* 0x0000 */ long Padding_1730[2];
  /* 0x0008 */ struct _FILETIME ft;
}; /* size: 0x0010 */

struct LsListSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<161,3,1>;

typedef struct _PS_MEMORY_RESERVE
{
  /* 0x0000 */ void* ReserveAddress;
  /* 0x0008 */ unsigned __int64 ReserveSize;
} PS_MEMORY_RESERVE, *PPS_MEMORY_RESERVE; /* size: 0x0010 */

struct _HRESENUM;

class XE_DtorAccess
{
}; /* size: 0x0001 */

struct XE_TypeTraits<XEPredicateCompare>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

struct SEReplRowsetMetadataSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<331,0,1>;

class Spinlock<91,11,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<284,1,1>
{
  /* 0x0000 */ class Spinlock<284,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

struct XVBListSLock
{
}; /* size: 0x0004 */

struct XeSessionStorageSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<134,4,1>;

struct LogPoolHashBucketSLock
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER IdleTime;
  /* 0x0008 */ union _LARGE_INTEGER KernelTime;
  /* 0x0010 */ union _LARGE_INTEGER UserTime;
  /* 0x0018 */ union _LARGE_INTEGER Reserved1[2];
  /* 0x0028 */ unsigned long Reserved2;
  /* 0x002c */ long __PADDING__[1];
} SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION, *PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION; /* size: 0x0030 */

typedef struct _MUISTRINGPOOL
{
  /* 0x0000 */ unsigned int TotalSize;
  /* 0x0004 */ unsigned short MaxNumStrings;
  /* 0x0006 */ unsigned short NumStrings;
  /* 0x0008 */ unsigned short MaxNumCharsInPool;
  /* 0x000a */ unsigned short NumCharsInPool;
  /* 0x000c */ long Padding_1731;
  /* 0x0010 */ short* Strings;
  /* 0x0018 */ wchar_t* Pool;
} MUISTRINGPOOL, *PMUISTRINGPOOL; /* size: 0x0020 */

class CAutoRefc<XE_FunctionExpr>
{
  /* 0x0000 */ class XE_FunctionExpr* m_pt;
}; /* size: 0x0008 */

class SpinlockHolder<141,4,1>;

typedef struct _MUILANGCFGNODE
{
  /* 0x0000 */ short LangSpec;
  /* 0x0002 */ unsigned short FallbackTypes;
  /* 0x0004 */ unsigned short Reserved;
  /* 0x0006 */ short FallbackSpecs[3];
} MUILANGCFGNODE, *PMUILANGCFGNODE; /* size: 0x000c */

struct TCMAAGEDescSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<312,1,1>;

class AutoSpinlockHolder<322,1,1>;

typedef struct _ACTRL_ACCESS_ENTRYW
{
  /* 0x0000 */ struct _TRUSTEE_W Trustee;
  /* 0x0020 */ unsigned long fAccessFlags;
  /* 0x0024 */ unsigned long Access;
  /* 0x0028 */ unsigned long ProvSpecificAccess;
  /* 0x002c */ unsigned long Inheritance;
  /* 0x0030 */ wchar_t* lpInheritProperty;
} ACTRL_ACCESS_ENTRYW, *PACTRL_ACCESS_ENTRYW; /* size: 0x0038 */

typedef struct _STARTUPINFOEXW
{
  /* 0x0000 */ struct _STARTUPINFOW StartupInfo;
  /* 0x0068 */ struct _PROC_THREAD_ATTRIBUTE_LIST* lpAttributeList;
} STARTUPINFOEXW, *PSTARTUPINFOEXW; /* size: 0x0070 */

typedef struct _MUILANGLISTNODE
{
  /* 0x0000 */ unsigned short LanguageType;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ short LanguageSpec;
} MUILANGLISTNODE, *PMUILANGLISTNODE; /* size: 0x0006 */

class AutoSpinlockHolder<137,4,1>;

struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;

class AutoSpinlockHolder<171,3,1>;

typedef struct _SYSTEM_GDI_DRIVER_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING DriverName;
  /* 0x0010 */ void* ImageAddress;
  /* 0x0018 */ void* SectionPointer;
  /* 0x0020 */ void* EntryPoint;
  /* 0x0028 */ struct _IMAGE_EXPORT_DIRECTORY* ExportSectionPointer;
  /* 0x0030 */ unsigned long ImageLength;
  /* 0x0034 */ long __PADDING__[1];
} SYSTEM_GDI_DRIVER_INFORMATION, *PSYSTEM_GDI_DRIVER_INFORMATION; /* size: 0x0038 */

class SpinlockHolder<67,16,1>;

struct XE_TEvent<4,1,10>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,10> m_dynamicAttr;
  /* 0x0268 */ struct XEEvent m_event;
}; /* size: 0x02b0 */

class Spinlock<215,2,1>
{
}; /* size: 0x0004 */

struct SEReplReplicaSLock
{
}; /* size: 0x0004 */

struct CLUS_SCSI_ADDRESS
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned char PortNumber;
      /* 0x0001 */ unsigned char PathId;
      /* 0x0002 */ unsigned char TargetId;
      /* 0x0003 */ unsigned char Lun;
    }; /* size: 0x0004 */
    /* 0x0000 */ unsigned long dw;
  }; /* size: 0x0004 */
}; /* size: 0x0004 */

class SpinlockHolder<83,13,1>;

class Spinlock<83,13,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<166,3,1>;

class AutoSpinlockHolder<50,17,1>;

struct RfsThreadQSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<33,19,1>;

typedef struct _OBJECT_DIRECTORY_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
  /* 0x0010 */ struct _UNICODE_STRING TypeName;
} OBJECT_DIRECTORY_INFORMATION, *POBJECT_DIRECTORY_INFORMATION; /* size: 0x0020 */

class SpinlockHolder<120,8,1>;

class DmpPointer<TList<NodeManager,SOS_Node,16,TListSLock> >
{
  /* 0x0000 */ class TList<NodeManager,SOS_Node,16,TListSLock>* m_pRaw;
}; /* size: 0x0008 */

struct SbControlSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<38,18,1>;

class SpinlockHolder<53,16,1>;

struct tagDBBINDING
{
  /* 0x0000 */ unsigned __int64 iOrdinal;
  /* 0x0008 */ unsigned __int64 obValue;
  /* 0x0010 */ unsigned __int64 obLength;
  /* 0x0018 */ unsigned __int64 obStatus;
  /* 0x0020 */ struct ITypeInfo* pTypeInfo;
  /* 0x0028 */ struct tagDBOBJECT* pObject;
  /* 0x0030 */ struct tagDBBINDEXT* pBindExt;
  /* 0x0038 */ unsigned long dwPart;
  /* 0x003c */ unsigned long dwMemOwner;
  /* 0x0040 */ unsigned long eParamIO;
  /* 0x0044 */ long Padding_1732;
  /* 0x0048 */ unsigned __int64 cbMaxLen;
  /* 0x0050 */ unsigned long dwFlags;
  /* 0x0054 */ unsigned short wType;
  /* 0x0056 */ unsigned char bPrecision;
  /* 0x0057 */ unsigned char bScale;
}; /* size: 0x0058 */

struct QueryStoreStatsCookieCacheSLock
{
}; /* size: 0x0004 */

class UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >
{
}; /* size: 0x0001 */

typedef struct _PDH_FMT_COUNTERVALUE_ITEM_W
{
  /* 0x0000 */ wchar_t* szName;
  /* 0x0008 */ struct _PDH_FMT_COUNTERVALUE FmtValue;
} PDH_FMT_COUNTERVALUE_ITEM_W, *PPDH_FMT_COUNTERVALUE_ITEM_W; /* size: 0x0018 */

class Spinlock<11,19,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::query_execution_print_partition_elimination_info
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1733[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int partition_elimination_infoOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<297,1,1>;

class XeSqlPkg::dbtable_startup
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1734[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class TCacheStoreUserDataEnumerator<ResourceInventory,ResourceDescriptor>;

class AutoSpinlockHolder<220,2,1>;

typedef struct _COUNTER_READING
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Index;
  /* 0x0008 */ unsigned __int64 Start;
  /* 0x0010 */ unsigned __int64 Total;
} COUNTER_READING, *PCOUNTER_READING; /* size: 0x0018 */

class SpinlockHolder<153,3,1>;

class SpinlockHolder<221,2,1>;

typedef struct _SERVER_INFO_1598
{
  /* 0x0000 */ unsigned long sv1598_enableW9xsecuritysignature;
} SERVER_INFO_1598, *PSERVER_INFO_1598; /* size: 0x0004 */

class AutoSpinlockHolder<265,1,1>;

typedef struct _CONFIG_INFO_0
{
  /* 0x0000 */ wchar_t* cfgi0_key;
  /* 0x0008 */ wchar_t* cfgi0_data;
} CONFIG_INFO_0, *PCONFIG_INFO_0; /* size: 0x0010 */

class SpinlockHolder<329,1,1>;

struct DbTableSLock
{
}; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1027
{
  /* 0x0000 */ unsigned long wki1027_errlog_sz;
} WKSTA_INFO_1027, *PWKSTA_INFO_1027; /* size: 0x0004 */

struct COMInitSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<18,19,1>;

struct DirtyPageListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::database_xml_deadlock_report
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1735[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int deadlock_cycle_idOffset;
    /* 0x0000 */ const int server_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int xml_reportOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class SpinlockHolder<271,1,1>;

class XeSqlPkg::check_phase_tracing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1736[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int call_durationOffset;
    /* 0x0000 */ const int is_remoteOffset;
    /* 0x0000 */ const int command_phaseOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class SpinlockHolder<288,1,1>;

typedef struct _PSAPI_WORKING_SET_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NumberOfEntries;
  /* 0x0008 */ union _PSAPI_WORKING_SET_BLOCK WorkingSetInfo[1];
} PSAPI_WORKING_SET_INFORMATION, *PPSAPI_WORKING_SET_INFORMATION; /* size: 0x0010 */

class XeSqlPkg::query_rpc_prepare_cmd_insert_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1737[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_locate_or_insertOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

struct QueryStoreExecStatsAggSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::read_only_route_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1738[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int route_portOffset;
    /* 0x0000 */ const int route_server_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _PDH_RAW_COUNTER_ITEM_W
{
  /* 0x0000 */ wchar_t* szName;
  /* 0x0008 */ struct _PDH_RAW_COUNTER RawValue;
} PDH_RAW_COUNTER_ITEM_W, *PPDH_RAW_COUNTER_ITEM_W; /* size: 0x0030 */

typedef struct _SERVER_INFO_1511
{
  /* 0x0000 */ unsigned long sv1511_sessconns;
} SERVER_INFO_1511, *PSERVER_INFO_1511; /* size: 0x0004 */

class AutoSpinlockHolder<109,9,1>;

class SpinlockHolder<112,9,1>;

class AutoSpinlockHolder<314,1,1>;

class AutoSpinlockHolder<327,1,1>;

struct HadrArTransportSLock
{
}; /* size: 0x0004 */

class TypeListNode<SOS_Task *,TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

typedef struct _WKSTA_TRANSPORT_INFO_0
{
  /* 0x0000 */ unsigned long wkti0_quality_of_service;
  /* 0x0004 */ unsigned long wkti0_number_of_vcs;
  /* 0x0008 */ wchar_t* wkti0_transport_name;
  /* 0x0010 */ wchar_t* wkti0_transport_address;
  /* 0x0018 */ int wkti0_wan_ish;
  /* 0x001c */ long __PADDING__[1];
} WKSTA_TRANSPORT_INFO_0, *PWKSTA_TRANSPORT_INFO_0; /* size: 0x0020 */

class AutoSpinlockHolder<55,16,1>;

class SpinlockHolder<142,4,1>;

struct LangResLoadSLock
{
}; /* size: 0x0004 */

typedef struct _PLUGPLAY_CONTROL_RELATED_DEVICE_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING TargetDeviceInstance;
  /* 0x0010 */ unsigned long Relation;
  /* 0x0014 */ long Padding_1739;
  /* 0x0018 */ wchar_t* RelatedDeviceInstance;
  /* 0x0020 */ unsigned long RelatedDeviceInstanceLength;
  /* 0x0024 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_RELATED_DEVICE_DATA, *PPLUGPLAY_CONTROL_RELATED_DEVICE_DATA; /* size: 0x0028 */

class SpinlockHolder<276,1,1>;

class SpinlockHolder<139,4,1>;

class Spinlock<30,19,1>
{
}; /* size: 0x0004 */

class SESListEnum<XEPackage0::XE_LiveWriter::LiveClientEntry,0>;

struct SEReplBackgroundTaskListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<189,3,1>;

class XeSqlPkg::database_attached
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1740[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct QSCacheSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::drop_database_ex_lock_acquire
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1741[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class AutoSpinlockHolder<204,3,1>;

class AutoSpinlockHolder<258,1,1>;

class XeSqlPkg::commit_tran_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1742[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int new_transaction_startedOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0170 */
}; /* size: 0x0250 */

struct LogPoolRefCountedObjectSLock
{
}; /* size: 0x0004 */

class CAutoBase<XEPackage0::CounterTarget::PackageEntry>
{
  /* 0x0000 */ class XEPackage0::CounterTarget::PackageEntry* m_pt;
}; /* size: 0x0008 */

struct FsContainerListWithDeleteSLock
{
}; /* size: 0x0004 */

typedef struct _RTL_CRITICAL_SECTION64
{
  /* 0x0000 */ unsigned __int64 DebugInfo;
  /* 0x0008 */ long LockCount;
  /* 0x000c */ long RecursionCount;
  /* 0x0010 */ unsigned __int64 OwningThread;
  /* 0x0018 */ unsigned __int64 LockSemaphore;
  /* 0x0020 */ unsigned __int64 SpinCount;
} RTL_CRITICAL_SECTION64, *PRTL_CRITICAL_SECTION64; /* size: 0x0028 */

class Spinlock<218,2,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_PREFETCH_STATS
{
  /* 0x0000 */ unsigned long DemandFilePageCount;
  /* 0x0004 */ unsigned long DemandFileIOCount;
  /* 0x0008 */ unsigned long TrickleFilePageCount;
  /* 0x000c */ unsigned long TrickleFileIOCount;
  /* 0x0010 */ unsigned long DemandPrivatePageCount;
  /* 0x0014 */ unsigned long DemandPrivateIOCount;
  /* 0x0018 */ unsigned long TricklePrivatePageCount;
  /* 0x001c */ unsigned long TricklePrivateIOCount;
} SYSTEM_PREFETCH_STATS, *PSYSTEM_PREFETCH_STATS; /* size: 0x0020 */

class TypeListNode<SOS_Scheduler * const,TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

typedef struct _SERVER_INFO_1530
{
  /* 0x0000 */ unsigned long sv1530_minfreeworkitems;
} SERVER_INFO_1530, *PSERVER_INFO_1530; /* size: 0x0004 */

class AutoSpinlockHolder<70,16,1>;

class AutoSpinlockHolder<23,19,1>;

typedef struct _PO_WAKE_SOURCE_HEADER
{
  /* 0x0000 */ enum PO_WAKE_SOURCE_TYPE Type;
  /* 0x0004 */ unsigned long Size;
} PO_WAKE_SOURCE_HEADER, *PPO_WAKE_SOURCE_HEADER; /* size: 0x0008 */

class SpinlockHolder<169,3,1>;

struct MatrixMtmTxnSLock
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1513
{
  /* 0x0000 */ unsigned long sv1513_maxpagedmemoryusage;
} SERVER_INFO_1513, *PSERVER_INFO_1513; /* size: 0x0004 */

class Spinlock<224,2,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1743[140];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x0039 */
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int proposed_stateOffset;
    /* 0x0000 */ const int target_stateOffset;
    /* 0x0000 */ const int dbmgr_object_typeOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class AutoSpinlockHolder<0,19,1>;

class XeSqlPkg::redo_single_record
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1744[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int slot_idOffset;
    /* 0x0000 */ const int log_op_idOffset;
    /* 0x0000 */ const int log_op_nameOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

struct HadrArccSLock
{
}; /* size: 0x0004 */

struct ConnectsSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_log_block_send_complete
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1745[143];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int has_been_sentOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int log_block_sizeOffset;
    /* 0x0000 */ const int log_buffer_sizeOffset;
  }; /* size: 0x0015 */
}; /* size: 0x0258 */

class AutoSpinlockHolder<57,16,1>;

class XeSqlPkg::mixed_page_scan_file
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1746[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int sgam_fileOffset;
    /* 0x0000 */ const int sgam_pageOffset;
    /* 0x0000 */ const int start_file_idOffset;
    /* 0x0000 */ const int start_page_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0250 */

struct AllocCachesHashSLock
{
}; /* size: 0x0004 */

typedef struct _ACTRL_CONTROL_INFOW
{
  /* 0x0000 */ wchar_t* lpControlId;
  /* 0x0008 */ wchar_t* lpControlName;
} ACTRL_CONTROL_INFOW, *PACTRL_CONTROL_INFOW; /* size: 0x0010 */

class AutoSpinlockHolder<9,19,1>;

class UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >
{
}; /* size: 0x0001 */

class UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

struct CMEDDbSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<78,14,1>;

class AutoSpinlockHolder<228,1,1>;

typedef struct _SERVER_TRANSPORT_INFO_1
{
  /* 0x0000 */ unsigned long svti1_numberofvcs;
  /* 0x0004 */ long Padding_1747;
  /* 0x0008 */ wchar_t* svti1_transportname;
  /* 0x0010 */ unsigned char* svti1_transportaddress;
  /* 0x0018 */ unsigned long svti1_transportaddresslength;
  /* 0x001c */ long Padding_1748;
  /* 0x0020 */ wchar_t* svti1_networkaddress;
  /* 0x0028 */ wchar_t* svti1_domain;
} SERVER_TRANSPORT_INFO_1, *PSERVER_TRANSPORT_INFO_1; /* size: 0x0030 */

class TCallbackListBase<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0030 */

typedef struct _GROUP_INFO_0
{
  /* 0x0000 */ wchar_t* grpi0_name;
} GROUP_INFO_0, *PGROUP_INFO_0; /* size: 0x0008 */

struct SessionKillerSLock
{
}; /* size: 0x0004 */

typedef struct _CM_MCA_POS_DATA
{
  /* 0x0000 */ unsigned short AdapterId;
  /* 0x0002 */ unsigned char PosData1;
  /* 0x0003 */ unsigned char PosData2;
  /* 0x0004 */ unsigned char PosData3;
  /* 0x0005 */ unsigned char PosData4;
} CM_MCA_POS_DATA, *PCM_MCA_POS_DATA; /* size: 0x0006 */

struct ResourceSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<227,2,1>;

typedef struct _SYSTEM_PREFETCH_OPTIONS
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long LowerPriority : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long VirtualOffsets : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long TrickleIOs : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long SkipInStorePages : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long PrefetchFilesByVa : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long Spare : 3; /* bit position: 5 */
    /* 0x0000 */ unsigned long ScenarioType : 8; /* bit position: 8 */
  }; /* bitfield */
} SYSTEM_PREFETCH_OPTIONS, *PSYSTEM_PREFETCH_OPTIONS; /* size: 0x0004 */

class AutoSpinlockHolder<174,3,1>;

class Spinlock<109,9,1>
{
}; /* size: 0x0004 */

typedef struct _THREAD_LAST_SYSCALL_INFORMATION
{
  /* 0x0000 */ void* FirstArgument;
  /* 0x0008 */ unsigned short SystemCallNumber;
  /* 0x000a */ char __PADDING__[6];
} THREAD_LAST_SYSCALL_INFORMATION, *PTHREAD_LAST_SYSCALL_INFORMATION; /* size: 0x0010 */

class XeSqlPkg::lock_timeout
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1749[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

class Spinlock<97,11,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::matrix_database_state_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1750[143];
      /* 0x0240 */ unsigned char m_buf[6];
    }; /* size: 0x000a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int previous_stateOffset;
    /* 0x0000 */ const int new_stateOffset;
  }; /* size: 0x000a */
}; /* size: 0x0248 */

struct XE_TArray<XEDataAttribute,23>
{
  /* 0x0000 */ struct XEDataAttribute m_array[23];
}; /* size: 0x0398 */

struct XE_TEvent<4,0,23>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,23> m_dynamicAttr;
  /* 0x0440 */ struct XEEvent m_event;
}; /* size: 0x0488 */

class XeSqlPkg::logreader_process_filestream_info
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,23> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1751[140];
      /* 0x0240 */ unsigned char m_buf[152];
    }; /* size: 0x00a8 */
    /* 0x0000 */ const int log_operationOffset;
    /* 0x0000 */ const int fsi_rowset_idOffset;
    /* 0x0000 */ const int fsi_txt_file_id_lowOffset;
    /* 0x0000 */ const int fsi_txt_file_id_highOffset;
    /* 0x0000 */ const int fsi_col_offsetOffset;
    /* 0x0000 */ const int fsi_current_lsnOffset;
    /* 0x0000 */ const int fsi_base_lsnOffset;
    /* 0x0000 */ const int fsi_filegroup_idOffset;
    /* 0x0000 */ const int fsi_db_idOffset;
    /* 0x0000 */ const int fsi_info_flagsOffset;
    /* 0x0000 */ const int fsi_sizeOffset;
    /* 0x0000 */ const int fsi_offsetOffset;
    /* 0x0000 */ const int fsi_old_sizeOffset;
    /* 0x0000 */ const int fsi_new_sizeOffset;
    /* 0x0000 */ const int log_rowset_idOffset;
    /* 0x0000 */ const int log_txt_file_id_lowOffset;
    /* 0x0000 */ const int log_txt_file_id_highOffset;
    /* 0x0000 */ const int log_current_lsnOffset;
    /* 0x0000 */ const int log_base_lsnOffset;
    /* 0x0000 */ const int log_filegroup_idOffset;
    /* 0x0000 */ const int log_db_idOffset;
    /* 0x0000 */ const int begin_lsnOffset;
    /* 0x0000 */ const int end_lsnOffset;
  }; /* size: 0x0488 */
}; /* size: 0x02d8 */

class AutoSpinlockHolder<302,1,1>;

struct ICommandStream
{
}; /* size: 0x0008 */

class AutoSpinlockHolder<306,1,1>;

struct DropTempOSLock
{
}; /* size: 0x0004 */

struct SEListSLock
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION
{
  /* 0x0000 */ unsigned long Operation;
} SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION, *PSYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION; /* size: 0x0004 */

class Spinlock<188,3,1>
{
}; /* size: 0x0004 */

typedef struct _CM_SCSI_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned char HostIdentifier;
  /* 0x0005 */ char __PADDING__[1];
} CM_SCSI_DEVICE_DATA, *PCM_SCSI_DEVICE_DATA; /* size: 0x0006 */

struct AsyncOpAdminClientRegistrationListSLock
{
}; /* size: 0x0004 */

typedef struct _OBJECT_ATTRIBUTES64
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_1752;
  /* 0x0008 */ unsigned __int64 RootDirectory;
  /* 0x0010 */ unsigned __int64 ObjectName;
  /* 0x0018 */ unsigned long Attributes;
  /* 0x001c */ long Padding_1753;
  /* 0x0020 */ unsigned __int64 SecurityDescriptor;
  /* 0x0028 */ unsigned __int64 SecurityQualityOfService;
} OBJECT_ATTRIBUTES64, *POBJECT_ATTRIBUTES64; /* size: 0x0030 */

struct XcbHashSLock
{
}; /* size: 0x0004 */

struct XPacketListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<171,3,1>;

struct EvtNotifDelayedDropSLock
{
}; /* size: 0x0004 */

class Spinlock<308,1,1>
{
}; /* size: 0x0004 */

struct CLUSPROP_CSV_PARTITION_INFO_EX
{
}; /* size: 0x0490 */

class Spinlock<13,19,1>
{
}; /* size: 0x0004 */

typedef struct _FILE_OBJECTID_BUFFER
{
  /* 0x0000 */ unsigned char ObjectId[16];
  union
  {
    struct
    {
      /* 0x0010 */ unsigned char BirthVolumeId[16];
      /* 0x0020 */ unsigned char BirthObjectId[16];
      /* 0x0030 */ unsigned char DomainId[16];
    }; /* size: 0x0030 */
    /* 0x0010 */ unsigned char ExtendedInfo[48];
  }; /* size: 0x0030 */
} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER; /* size: 0x0040 */

struct SEReplFlowControlSLock
{
}; /* size: 0x0004 */

typedef struct _CLUS_CSV_VOLUME_INFO
{
  /* 0x0000 */ union _ULARGE_INTEGER VolumeOffset;
  /* 0x0008 */ unsigned long PartitionNumber;
  /* 0x000c */ enum _CLUSTER_CSV_VOLUME_FAULT_STATE FaultState;
  /* 0x0010 */ enum _CLUSTER_SHARED_VOLUME_BACKUP_STATE BackupState;
  /* 0x0014 */ wchar_t szVolumeFriendlyName[260];
  /* 0x021c */ wchar_t szVolumeName[50];
} CLUS_CSV_VOLUME_INFO, *PCLUS_CSV_VOLUME_INFO; /* size: 0x0280 */

class AutoSpinlockHolder<13,19,1>;

class XeSqlPkg::query_scan_setup
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

struct Pow<10,4>
{
}; /* size: 0x0001 */

class SpinlockHolder<54,16,1>;

class TTemplateInfo<1235,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

struct XDBUriCacheSLock
{
}; /* size: 0x0004 */

typedef struct _SL_APPX_CACHE_VALUE_DESCRIPTOR
{
  /* 0x0000 */ unsigned char HashedName[32];
  /* 0x0020 */ unsigned __int64 Expiration;
  /* 0x0028 */ unsigned long DataSize;
  /* 0x002c */ unsigned char Data[1];
  /* 0x002d */ char __PADDING__[3];
} SL_APPX_CACHE_VALUE_DESCRIPTOR, *PSL_APPX_CACHE_VALUE_DESCRIPTOR; /* size: 0x0030 */

class SpinlockHolder<117,8,1>;

class SpinlockHolder<165,3,1>;

class XeSqlPkg::query_rpc_server_collection_create
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1754[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_descriptorOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

struct DelayLoadProc
{
  /* 0x0000 */ int fImportByName;
  /* 0x0004 */ long Padding_1755;
  union
  {
    /* 0x0008 */ const char* szProcName;
    struct
    {
      /* 0x0008 */ unsigned long dwOrdinal;
      /* 0x000c */ long __PADDING__[1];
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
}; /* size: 0x0010 */

struct QueryStoreHtCacheSLock
{
}; /* size: 0x0004 */

typedef struct _SL_APPX_CACHE
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned long DataSize;
  /* 0x000c */ long Padding_1756;
  /* 0x0010 */ unsigned __int64 DataCheckSum;
  /* 0x0018 */ struct _SL_APPX_CACHE_VALUE_DESCRIPTOR Descriptors[1];
} SL_APPX_CACHE, *PSL_APPX_CACHE; /* size: 0x0048 */

struct DropSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::lock_deadlock_chain
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,18> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1757[140];
      /* 0x0240 */ unsigned char m_buf[90];
    }; /* size: 0x006a */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int deadlock_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int resource_owner_typeOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0428 */
}; /* size: 0x02a0 */

struct QueryStoreStmtCompAggSLock
{
}; /* size: 0x0004 */

class Spinlock<5,19,1>
{
}; /* size: 0x0004 */

struct ICommandProperties
{
}; /* size: 0x0008 */

class SpinlockHolder<328,1,1>;

typedef struct _CLUSTER_IP_ENTRY
{
  /* 0x0000 */ const wchar_t* lpszIpAddress;
  /* 0x0008 */ unsigned long dwPrefixLength;
  /* 0x000c */ long __PADDING__[1];
} CLUSTER_IP_ENTRY, *PCLUSTER_IP_ENTRY; /* size: 0x0010 */

class SpinlockHolder<94,11,1>;

typedef struct _DECRYPTION_STATUS_BUFFER
{
  /* 0x0000 */ unsigned char NoEncryptedStreams;
} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER; /* size: 0x0001 */

class AutoSpinlockHolder<309,1,1>;

struct BitOrdinal<128>
{
}; /* size: 0x0001 */

typedef struct _CONNECTION_INFO_1
{
  /* 0x0000 */ unsigned long coni1_id;
  /* 0x0004 */ unsigned long coni1_type;
  /* 0x0008 */ unsigned long coni1_num_opens;
  /* 0x000c */ unsigned long coni1_num_users;
  /* 0x0010 */ unsigned long coni1_time;
  /* 0x0014 */ long Padding_1758;
  /* 0x0018 */ wchar_t* coni1_username;
  /* 0x0020 */ wchar_t* coni1_netname;
} CONNECTION_INFO_1, *PCONNECTION_INFO_1; /* size: 0x0028 */

typedef struct _TP_TASK
{
  /* 0x0000 */ const struct _TP_TASK_CALLBACKS* Callbacks;
  /* 0x0008 */ unsigned long NumaNode;
  /* 0x000c */ unsigned char IdealProcessor;
  /* 0x000d */ char Padding_1759[3];
  /* 0x0010 */ struct _LIST_ENTRY ListEntry;
} TP_TASK, *PTP_TASK; /* size: 0x0020 */

typedef struct _TP_DIRECT
{
  /* 0x0000 */ struct _TP_TASK Task;
  /* 0x0020 */ unsigned __int64 Lock;
  /* 0x0028 */ struct _LIST_ENTRY IoCompletionInformationList;
  /* 0x0038 */ void* Callback /* function */;
  /* 0x0040 */ unsigned long NumaNode;
  /* 0x0044 */ unsigned char IdealProcessor;
  /* 0x0045 */ char __PADDING__[3];
} TP_DIRECT, *PTP_DIRECT; /* size: 0x0048 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

struct TClassName<long double,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType> >,void,unsigned long *,SOS_Scheduler * const,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

struct DbtHashSLock
{
}; /* size: 0x0004 */

struct HUFFMAN_NODE_T
{
  /* 0x0000 */ struct HUFFMAN_NODE_T* m_pSon[2];
  /* 0x0010 */ struct HUFFMAN_NODE_T* m_pNext;
  /* 0x0018 */ unsigned int m_uCount;
  /* 0x001c */ unsigned short m_uSymbol;
  /* 0x001e */ unsigned short m_uBits;
}; /* size: 0x0020 */

class Spinlock<257,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<93,11,1>;

class XeSqlPkg::queryvm_context_writeback
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1760[143];
      /* 0x0240 */ unsigned char m_buf[39];
    }; /* size: 0x002b */
    /* 0x0000 */ const int dump_pointOffset;
    /* 0x0000 */ const int remote_exchange_node_idOffset;
    /* 0x0000 */ const int remote_exchange_thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int context_newidtOffset;
    /* 0x0000 */ const int context_lasterrorOffset;
  }; /* size: 0x002b */
}; /* size: 0x0268 */

typedef struct _WKSTA_INFO_1045
{
  /* 0x0000 */ unsigned long wki1045_pipe_maximum;
} WKSTA_INFO_1045, *PWKSTA_INFO_1045; /* size: 0x0004 */

struct _TP_JOB;

struct BIO_STATE_T
{
  /* 0x0000 */ unsigned __int64 m_uShiftRegister;
  /* 0x0008 */ __int64 m_iBitsAvailable;
  /* 0x0010 */ unsigned int* m_pBitStreamPtr;
}; /* size: 0x0018 */

struct LZ77_PASS2_STATE_T
{
  /* 0x0000 */ unsigned int m_uShortSymbolMask[704];
  /* 0x0b00 */ unsigned int m_uLongLengthMask[256];
  /* 0x0f00 */ struct LZ77_IR_STATE_T m_Ir;
  /* 0x0f48 */ unsigned __int64 m_uComputedEncodedSizeBits;
  /* 0x0f50 */ unsigned __int64 m_uActualEncodedSizeBits;
  /* 0x0f58 */ unsigned __int64 m_uBytesCopiedFromScratch;
  /* 0x0f60 */ struct BIO_STATE_T m_BioState;
  /* 0x0f78 */ struct LZ77_PASS1_STATE_T* m_pState;
}; /* size: 0x0f80 */

class AutoSpinlockHolder<264,1,1>;

typedef struct _KEY_VIRTUALIZATION_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long VirtualizationCandidate : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long VirtualizationEnabled : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long VirtualTarget : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long VirtualStore : 1; /* bit position: 3 */
    /* 0x0000 */ unsigned long VirtualSource : 1; /* bit position: 4 */
    /* 0x0000 */ unsigned long Reserved : 27; /* bit position: 5 */
  }; /* bitfield */
} KEY_VIRTUALIZATION_INFORMATION, *PKEY_VIRTUALIZATION_INFORMATION; /* size: 0x0004 */

class AutoSpinlockHolder<299,1,1>;

struct SessionMgrWorkItemListSLock
{
}; /* size: 0x0004 */

class Spinlock<6,19,1>
{
}; /* size: 0x0004 */

typedef struct _RTL_QUERY_REGISTRY_TABLE
{
  /* 0x0000 */ void* QueryRoutine /* function */;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ long Padding_1761;
  /* 0x0010 */ wchar_t* Name;
  /* 0x0018 */ void* EntryContext;
  /* 0x0020 */ unsigned long DefaultType;
  /* 0x0024 */ long Padding_1762;
  /* 0x0028 */ void* DefaultData;
  /* 0x0030 */ unsigned long DefaultLength;
  /* 0x0034 */ long __PADDING__[1];
} RTL_QUERY_REGISTRY_TABLE, *PRTL_QUERY_REGISTRY_TABLE; /* size: 0x0038 */

class AutoSpinlockHolder<232,2,1>;

struct XE_TTarget<0>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  }; /* size: 0x0008 */
  /* 0x0008 */ struct XETarget m_target;
}; /* size: 0x0040 */

typedef struct _SOS_VMCOUNTERS_EX
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long PageFaultCount;
  /* 0x0008 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x0010 */ unsigned __int64 WorkingSetSize;
  /* 0x0018 */ unsigned __int64 QuotaPeakPagedPoolUsage;
  /* 0x0020 */ unsigned __int64 QuotaPagedPoolUsage;
  /* 0x0028 */ unsigned __int64 QuotaPeakNonPagedPoolUsage;
  /* 0x0030 */ unsigned __int64 QuotaNonPagedPoolUsage;
  /* 0x0038 */ unsigned __int64 PagefileUsage;
  /* 0x0040 */ unsigned __int64 PeakPagefileUsage;
  /* 0x0048 */ unsigned __int64 PrivateUsage;
} SOS_VMCOUNTERS_EX, *PSOS_VMCOUNTERS_EX; /* size: 0x0050 */

class XeSqlPkg::group_commit_value_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1763[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int waiters_per_flushOffset;
    /* 0x0000 */ const int duration_msOffset;
    /* 0x0000 */ const int waitersOffset;
    /* 0x0000 */ const int flushes_per_secOffset;
    /* 0x0000 */ const int next_sample_duration_msOffset;
    /* 0x0000 */ const int next_sample_indexOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

struct IndexUsageStatsSLock
{
}; /* size: 0x0004 */

struct XE_TTarget<4>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,4> m_customizableAttr;
  }; /* size: 0x00e0 */
  /* 0x00e0 */ struct XETarget m_target;
}; /* size: 0x0118 */

typedef struct _PERF_DATA_BLOCK
{
  /* 0x0000 */ wchar_t Signature[4];
  /* 0x0008 */ unsigned long LittleEndian;
  /* 0x000c */ unsigned long Version;
  /* 0x0010 */ unsigned long Revision;
  /* 0x0014 */ unsigned long TotalByteLength;
  /* 0x0018 */ unsigned long HeaderLength;
  /* 0x001c */ unsigned long NumObjectTypes;
  /* 0x0020 */ long DefaultObject;
  /* 0x0024 */ struct _SYSTEMTIME SystemTime;
  /* 0x0034 */ long Padding_1764;
  /* 0x0038 */ union _LARGE_INTEGER PerfTime;
  /* 0x0040 */ union _LARGE_INTEGER PerfFreq;
  /* 0x0048 */ union _LARGE_INTEGER PerfTime100nSec;
  /* 0x0050 */ unsigned long SystemNameLength;
  /* 0x0054 */ unsigned long SystemNameOffset;
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK; /* size: 0x0058 */

class AutoSpinlockHolder<71,16,1>;

class SpinlockHolder<292,1,1>;

class XeSqlPkg::selective_xml_index_no_compatible_xsd_types
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1765[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int xml_pathOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<261,1,1>;

class XeSqlPkg::query_pre_execution_showplan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1766[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int nest_levelOffset;
    /* 0x0000 */ const int estimated_rowsOffset;
    /* 0x0000 */ const int estimated_costOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int showplan_xmlOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

struct SEReplBackgroundTaskControlSLock
{
}; /* size: 0x0004 */

struct _RTL_TRACE_DATABASE;

struct HadrAghXAccessSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::after_natively_compiled_proc_entry_removal_on_drop
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1767[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class IntegralController
{
  union
  {
    /* 0x0000 */ const double sm_tScoreCutoffs[118];
    struct
    {
      /* 0x0000 */ unsigned long m_statsPos;
      /* 0x0004 */ int m_completeStats;
      /* 0x0008 */ double m_sizeHistory[120];
      /* 0x03c8 */ double m_benefitHistory[120];
      /* 0x0788 */ double m_latestSize;
      /* 0x0790 */ double m_latestBenefit;
      /* 0x0798 */ double m_currentSlope;
      /* 0x07a0 */ double m_bestFitLineIntercept;
      /* 0x07a8 */ double m_currentBenefitIntercept;
      /* 0x07b0 */ double m_currentSizeIntercept;
      /* 0x07b8 */ double m_targetSizeInPages;
    }; /* size: 0x07c0 */
  }; /* size: 0x07c0 */
}; /* size: 0x07c0 */

typedef struct _IO_ERROR_LOG_PACKET
{
  /* 0x0000 */ unsigned char MajorFunctionCode;
  /* 0x0001 */ unsigned char RetryCount;
  /* 0x0002 */ unsigned short DumpDataSize;
  /* 0x0004 */ unsigned short NumberOfStrings;
  /* 0x0006 */ unsigned short StringOffset;
  /* 0x0008 */ unsigned short EventCategory;
  /* 0x000a */ char Padding_1768[2];
  /* 0x000c */ long ErrorCode;
  /* 0x0010 */ unsigned long UniqueErrorValue;
  /* 0x0014 */ long FinalStatus;
  /* 0x0018 */ unsigned long SequenceNumber;
  /* 0x001c */ unsigned long IoControlCode;
  /* 0x0020 */ union _LARGE_INTEGER DeviceOffset;
  /* 0x0028 */ unsigned long DumpData[1];
  /* 0x002c */ long __PADDING__[1];
} IO_ERROR_LOG_PACKET, *PIO_ERROR_LOG_PACKET; /* size: 0x0030 */

typedef struct _SERVER_INFO_1542
{
  /* 0x0000 */ int sv1542_maxfreeconnections;
} SERVER_INFO_1542, *PSERVER_INFO_1542; /* size: 0x0004 */

class TypeListSize<TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

typedef struct _KLDR_DATA_TABLE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY InLoadOrderLinks;
  /* 0x0010 */ void* ExceptionTable;
  /* 0x0018 */ unsigned long ExceptionTableSize;
  /* 0x001c */ long Padding_1769;
  /* 0x0020 */ void* GpValue;
  /* 0x0028 */ struct _NON_PAGED_DEBUG_INFO* NonPagedDebugInfo;
  /* 0x0030 */ void* DllBase;
  /* 0x0038 */ void* EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_1770;
  /* 0x0048 */ struct _UNICODE_STRING FullDllName;
  /* 0x0058 */ struct _UNICODE_STRING BaseDllName;
  /* 0x0068 */ unsigned long Flags;
  /* 0x006c */ unsigned short LoadCount;
  /* 0x006e */ unsigned short __Unused5;
  /* 0x0070 */ void* SectionPointer;
  /* 0x0078 */ unsigned long CheckSum;
  /* 0x007c */ unsigned long CoverageSectionSize;
  /* 0x0080 */ void* CoverageSection;
  /* 0x0088 */ void* LoadedImports;
  /* 0x0090 */ void* PatchInformation;
  /* 0x0098 */ unsigned long SizeOfImageNotRounded;
  /* 0x009c */ unsigned long TimeDateStamp;
} KLDR_DATA_TABLE_ENTRY, *PKLDR_DATA_TABLE_ENTRY; /* size: 0x00a0 */

class SpinlockHolder<254,1,1>;

class AutoSpinlockHolder<5,19,1>;

typedef struct _PLUGPLAY_CONTROL_INTERFACE_LIST_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ struct _GUID* InterfaceGuid;
  /* 0x0018 */ wchar_t* InterfaceList;
  /* 0x0020 */ unsigned long InterfaceListSize;
  /* 0x0024 */ unsigned long Flags;
} PLUGPLAY_CONTROL_INTERFACE_LIST_DATA, *PPLUGPLAY_CONTROL_INTERFACE_LIST_DATA; /* size: 0x0028 */

class SpinlockHolder<186,3,1>;

struct HoBtHashSLock
{
}; /* size: 0x0004 */

struct ISQLErrorInfo
{
}; /* size: 0x0008 */

class Spinlock<157,3,1>
{
}; /* size: 0x0004 */

class Spinlock<143,4,1>
{
}; /* size: 0x0004 */

struct tagDBPROPINFO
{
  /* 0x0000 */ wchar_t* pwszDescription;
  /* 0x0008 */ unsigned long dwPropertyID;
  /* 0x000c */ unsigned long dwFlags;
  /* 0x0010 */ unsigned short vtType;
  /* 0x0012 */ char Padding_1771[6];
  /* 0x0018 */ struct tagVARIANT vValues;
}; /* size: 0x0030 */

class AutoSpinlockHolder<157,3,1>;

class OstreamStreamBuf
{
  /* 0x0000 */ long Padding_1772[28];
  /* 0x0070 */ class std::basic_ostream<char,std::char_traits<char> >& m_os;
  /* 0x0078 */ char m_rgszBuf[256];
}; /* size: 0x0178 */

struct _CLUSTER_MRR_RESPONSE;

class TypeListSize<TypeListNode<void *,TypeListNode<SystemAffinity const &,TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

class Spinlock<300,3,1>
{
}; /* size: 0x0004 */

struct XE_TEvent<4,2,4>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,4> m_dynamicAttr;
  /* 0x01b0 */ struct XEEvent m_event;
}; /* size: 0x01f8 */

class TypeListSize<TypeListNode<SystemAffinity,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XeSqlPkg::trace_flag_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1773[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int flagOffset;
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int new_valueOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<120,8,1>;

class XeSqlPkg::rpc_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1774[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int connection_reset_optionOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
    /* 0x0000 */ const int data_streamOffset;
  }; /* size: 0x01f8 */
}; /* size: 0x0260 */

class Spinlock<306,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::all_database_segments_metadata_create
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1775[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::query_instance_cache_remote_remove
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

struct DbccCheckSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::calculate_dop_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1776[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int configured_maxdopOffset;
    /* 0x0000 */ const int max_concurrent_branchesOffset;
    /* 0x0000 */ const int parallel_segmentsOffset;
    /* 0x0000 */ const int schedulersOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class TypeListNode<SOS_Task *,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

struct TCMMessageListSLock
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1586
{
  /* 0x0000 */ unsigned long sv1586_maxthreadsperqueue;
} SERVER_INFO_1586, *PSERVER_INFO_1586; /* size: 0x0004 */

class Spinlock<102,10,1>
{
}; /* size: 0x0004 */

typedef struct _NET_VALIDATE_PASSWORD_HASH
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_1777;
  /* 0x0008 */ unsigned char* Hash;
} NET_VALIDATE_PASSWORD_HASH, *PNET_VALIDATE_PASSWORD_HASH; /* size: 0x0010 */

typedef struct _NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
{
  /* 0x0000 */ struct _NET_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
  /* 0x0030 */ wchar_t* ClearPassword;
  /* 0x0038 */ wchar_t* UserAccountName;
  /* 0x0040 */ struct _NET_VALIDATE_PASSWORD_HASH HashedPassword;
  /* 0x0050 */ unsigned char PasswordMatch;
  /* 0x0051 */ char __PADDING__[7];
} NET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG, *PNET_VALIDATE_PASSWORD_CHANGE_INPUT_ARG; /* size: 0x0058 */

class AutoSpinlockHolder<260,1,1>;

typedef struct _USER_INFO_1
{
  /* 0x0000 */ wchar_t* usri1_name;
  /* 0x0008 */ wchar_t* usri1_password;
  /* 0x0010 */ unsigned long usri1_password_age;
  /* 0x0014 */ unsigned long usri1_priv;
  /* 0x0018 */ wchar_t* usri1_home_dir;
  /* 0x0020 */ wchar_t* usri1_comment;
  /* 0x0028 */ unsigned long usri1_flags;
  /* 0x002c */ long Padding_1778;
  /* 0x0030 */ wchar_t* usri1_script_path;
} USER_INFO_1, *PUSER_INFO_1; /* size: 0x0038 */

class XeSqlPkg::page_split
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1779[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int splitOperationOffset;
    /* 0x0000 */ const int new_page_file_idOffset;
    /* 0x0000 */ const int new_page_page_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<222,2,1>
{
}; /* size: 0x0010 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class XeSqlPkg::sql_batch_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1780[140];
      /* 0x0240 */ unsigned char m_buf[57];
    }; /* size: 0x0049 */
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int resultOffset;
    /* 0x0000 */ const int batch_textOffset;
  }; /* size: 0x0260 */
}; /* size: 0x0280 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<2>::FuncPtr<void,enum WakeUpReason,unsigned long,NullType,NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >,void,enum WakeUpReason,unsigned long,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class XeSqlPkg::cursor_open
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1781[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int cursor_typeOffset;
    /* 0x0000 */ const int protocol_execution_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::recovery_unit_file_metadata_copy
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1782[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class SpinlockHolder<233,1,1>;

class Spinlock<95,11,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::mbr_lmd_read_primary_file_group_flags
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1783[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int field_offsetOffset;
    /* 0x0000 */ const int field_sizeOffset;
    /* 0x0000 */ const int field_valueOffset;
    /* 0x0000 */ const int field_nameOffset;
    /* 0x0000 */ const int archive_file_nameOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

struct RemoteBatchStatsHashTableSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<310,1,1>;

class XeSqlPkg::log_consumer_act
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1784[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int consumer_idOffset;
    /* 0x0000 */ const int activity_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class SpinlockHolder<293,1,1>;

class SpinlockHolder<335,0,1>;

typedef struct _SYSTEM_POWER_LOGGING_ENTRY
{
  /* 0x0000 */ unsigned long Reason;
  /* 0x0004 */ unsigned long States;
} SYSTEM_POWER_LOGGING_ENTRY, *PSYSTEM_POWER_LOGGING_ENTRY; /* size: 0x0008 */

typedef struct _RTL_BUFFER
{
  /* 0x0000 */ unsigned char* Buffer;
  /* 0x0008 */ unsigned char* StaticBuffer;
  /* 0x0010 */ unsigned __int64 Size;
  /* 0x0018 */ unsigned __int64 StaticSize;
  /* 0x0020 */ unsigned __int64 ReservedForAllocatedSize;
  /* 0x0028 */ void* ReservedForIMalloc;
} RTL_BUFFER, *PRTL_BUFFER; /* size: 0x0030 */

class TCallback<void,SOS_Task *,NullType,NullType,NullType>
{
}; /* size: 0x0018 */

class XeSqlPkg::metadata_ddl_add_column
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1785[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int datatypeOffset;
    /* 0x0000 */ const int collationOffset;
    /* 0x0000 */ const int nullableOffset;
    /* 0x0000 */ const int maxlenOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<130,7,1>;

class XeSqlPkg::database_rename
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1786[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int previous_nameOffset;
    /* 0x0000 */ const int new_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class AutoSpinlockHolder<51,17,1>;

class SpinlockHolder<20,19,1>;

class XeSqlPkg::ipc_call
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1787[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int proc_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class TypeListSize<TypeListNode<NullType,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XeSqlPkg::query_optimizer_tree
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1788[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int output_treeOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

struct SEReplPartitionKillSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::add_file_rollback
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1789[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

struct CMEDHashSetSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::bitmap_disabled_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1790[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int query_operation_node_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct FsGhostStatusSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<52,16,1>;

class XeSqlPkg::query_plan_intrinsic_operators
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1791[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int intrinsic_nameOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class AutoSpinlockHolder<37,18,1>;

struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionWithoutActive
{
}; /* size: 0x0080 */

struct FileTableFcbSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::natively_compiled_proc_execution_started
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1792[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

struct SEReplQueueXactHashSLock
{
}; /* size: 0x0004 */

class Spinlock<115,8,1>
{
}; /* size: 0x0004 */

typedef struct _PROCESS_HANDLE_TRACING_ENABLE
{
  /* 0x0000 */ unsigned long Flags;
} PROCESS_HANDLE_TRACING_ENABLE, *PPROCESS_HANDLE_TRACING_ENABLE; /* size: 0x0004 */

class SpinlockHolder<326,1,1>;

class Spinlock<214,2,1>
{
}; /* size: 0x0004 */

typedef struct _USER_INFO_2
{
  /* 0x0000 */ wchar_t* usri2_name;
  /* 0x0008 */ wchar_t* usri2_password;
  /* 0x0010 */ unsigned long usri2_password_age;
  /* 0x0014 */ unsigned long usri2_priv;
  /* 0x0018 */ wchar_t* usri2_home_dir;
  /* 0x0020 */ wchar_t* usri2_comment;
  /* 0x0028 */ unsigned long usri2_flags;
  /* 0x002c */ long Padding_1793;
  /* 0x0030 */ wchar_t* usri2_script_path;
  /* 0x0038 */ unsigned long usri2_auth_flags;
  /* 0x003c */ long Padding_1794;
  /* 0x0040 */ wchar_t* usri2_full_name;
  /* 0x0048 */ wchar_t* usri2_usr_comment;
  /* 0x0050 */ wchar_t* usri2_parms;
  /* 0x0058 */ wchar_t* usri2_workstations;
  /* 0x0060 */ unsigned long usri2_last_logon;
  /* 0x0064 */ unsigned long usri2_last_logoff;
  /* 0x0068 */ unsigned long usri2_acct_expires;
  /* 0x006c */ unsigned long usri2_max_storage;
  /* 0x0070 */ unsigned long usri2_units_per_week;
  /* 0x0074 */ long Padding_1795;
  /* 0x0078 */ unsigned char* usri2_logon_hours;
  /* 0x0080 */ unsigned long usri2_bad_pw_count;
  /* 0x0084 */ unsigned long usri2_num_logons;
  /* 0x0088 */ wchar_t* usri2_logon_server;
  /* 0x0090 */ unsigned long usri2_country_code;
  /* 0x0094 */ unsigned long usri2_code_page;
} USER_INFO_2, *PUSER_INFO_2; /* size: 0x0098 */

class SpinlockHolder<157,3,1>;

class AutoSpinlockHolder<179,3,1>;

class XeSqlPkg::before_redo_lsn_update
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

struct SEReplPartitionSessionEventListSLock
{
}; /* size: 0x0004 */

struct BpRepartitionSLock
{
}; /* size: 0x0004 */

class Spinlock<282,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::xfcb_header_obtained
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1796[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int file_byte_offsetOffset;
    /* 0x0000 */ const int file_byte_countOffset;
    /* 0x0000 */ const int http_errorcodeOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::leaf_page_disfavored
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1797[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<319,1,1>;

class SpinlockHolder<119,8,1>;

struct XE_TArray<XECustomizableAttribute,7>
{
  /* 0x0000 */ struct XECustomizableAttribute m_array[7];
}; /* size: 0x0188 */

struct XE_TEvent<4,7,10>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,7> m_customizableAttr;
  /* 0x0228 */ struct XE_TArray<XEDataAttribute,10> m_dynamicAttr;
  /* 0x03b8 */ struct XEEvent m_event;
}; /* size: 0x0400 */

class XeSqlPkg::filestream_file_io_trace
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,7,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1798[140];
      /* 0x0240 */ unsigned char m_buf[69];
    }; /* size: 0x0055 */
    /* 0x0000 */ const int verbosityOffset;
    /* 0x0000 */ const int componentOffset;
    /* 0x0000 */ const int locationOffset;
    /* 0x0000 */ const int messageOffset;
    /* 0x0000 */ const int workitem_descriptionOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int correlation_idsOffset;
    /* 0x0000 */ const int logical_pathOffset;
    /* 0x0000 */ const int physical_pathOffset;
    /* 0x0000 */ const int original_pathOffset;
  }; /* size: 0x0400 */
}; /* size: 0x0288 */

class AutoSpinlockHolder<276,1,1>;

class XeSqlPkg::broker_dialog_transmission_body_dequeue
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1799[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int message_referenceOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class AutoSpinlockHolder<296,1,1>;

class XeSqlPkg::hadr_dump_log_progress
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1800[140];
      /* 0x0240 */ unsigned char m_buf[93];
    }; /* size: 0x006d */
    /* 0x0000 */ const int last_shipped_log_block_idOffset;
    /* 0x0000 */ const int last_shipped_log_block_sizeOffset;
    /* 0x0000 */ const int sequence_numOffset;
    /* 0x0000 */ const int target_redoOffset;
    /* 0x0000 */ const int redo_rateOffset;
    /* 0x0000 */ const int redo_queue_sizeOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int is_send_watermarkOffset;
    /* 0x0000 */ const int last_redone_lsnOffset;
    /* 0x0000 */ const int hardened_lsnOffset;
    /* 0x0000 */ const int truncation_lsnOffset;
    /* 0x0000 */ const int end_of_log_lsnOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x02a0 */

class SpinlockHolder<98,11,1>;

class SpinlockHolder<193,3,1>;

class Spinlock<232,2,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::columnstore_tuple_mover_begin_compress
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1801[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int delta_store_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class TypeListSize<TypeListNode<void *,TypeListNode<enum Worker::CallbackType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<187,3,1>;

typedef struct _FILE_BOTH_DIR_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ union _LARGE_INTEGER CreationTime;
  /* 0x0010 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0018 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0020 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0038 */ unsigned long FileAttributes;
  /* 0x003c */ unsigned long FileNameLength;
  /* 0x0040 */ unsigned long EaSize;
  /* 0x0044 */ char ShortNameLength;
  /* 0x0045 */ char Padding_1802;
  /* 0x0046 */ wchar_t ShortName[12];
  /* 0x005e */ wchar_t FileName[1];
} FILE_BOTH_DIR_INFORMATION, *PFILE_BOTH_DIR_INFORMATION; /* size: 0x0060 */

class AutoSpinlockHolder<54,16,1>;

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION
{
  /* 0x0000 */ unsigned long ProcessorCount;
  /* 0x0004 */ unsigned long Offsets[1];
} SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION, *PSYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION; /* size: 0x0008 */

class Spinlock<164,3,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<65,16,1>;

class XeSqlPkg::hobt_schema_mgr_factory
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1803[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int schema_mgr_addrOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

struct HttpConnCacheSLock
{
}; /* size: 0x0004 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>
{
  /* 0x0000 */ long Padding_1804[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class XeSqlPkg::hadr_xrf_copyXrf_partialCopy
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1805[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int dbIdOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::lock_redo_unblocked
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1806[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class XeSqlPkg::remote_dmv_stream_blob_fetch_client
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1807[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,int *,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >,void,int *,NullType,NullType,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class XeSqlPkg::xtp_recover_table
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1808[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class AutoSpinlockHolder<31,19,1>;

class XeSqlPkg::hadr_sql_instance_to_node_map_key_created_opened
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1809[143];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int is_createdOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int map_key_nameOffset;
  }; /* size: 0x0015 */
}; /* size: 0x0258 */

class SpinlockHolder<231,2,1>;

class SpinlockHolder<75,16,1>;

struct SOS_DispatcherQueueSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::security_cache_database_timestamp_increment
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1810[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

struct IRow
{
}; /* size: 0x0008 */

class AutoSpinlockHolder<205,3,1>;

class SOSHost_EventAuto
{
  /* 0x0000 */ long Padding_1811[52];
  /* 0x00d0 */ struct ISOSClient_ResourceInfo* m_resInfo;
}; /* size: 0x00d8 */

struct FabricTvfDataConsumerListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::broker_transmission_object_worktable_save_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1812[140];
      /* 0x0240 */ unsigned char m_buf[31];
    }; /* size: 0x002f */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int is_savedOffset;
    /* 0x0000 */ const int is_new_recordOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

struct FakeOsNumaConfig::FakeNode
{
  /* 0x0000 */ int m_isPresent;
  /* 0x0004 */ long Padding_1813;
  /* 0x0008 */ class GroupAffinity m_processorMask;
}; /* size: 0x0018 */

class FakeOsNumaConfig
{
  /* 0x0000 */ long Padding_1814[2];
  /* 0x0008 */ class OsNumaConfig* m_oldConfig;
  /* 0x0010 */ struct FakeOsNumaConfig::FakeNode m_fakeNodes[64];
  /* 0x0610 */ class SystemAffinity m_processAffinity;
  /* 0x0690 */ unsigned long m_lpPerPp;
  /* 0x0694 */ unsigned long m_lpPerCore;
}; /* size: 0x0698 */

typedef struct _TIME_OF_DAY_INFO
{
  /* 0x0000 */ unsigned long tod_elapsedt;
  /* 0x0004 */ unsigned long tod_msecs;
  /* 0x0008 */ unsigned long tod_hours;
  /* 0x000c */ unsigned long tod_mins;
  /* 0x0010 */ unsigned long tod_secs;
  /* 0x0014 */ unsigned long tod_hunds;
  /* 0x0018 */ long tod_timezone;
  /* 0x001c */ unsigned long tod_tinterval;
  /* 0x0020 */ unsigned long tod_day;
  /* 0x0024 */ unsigned long tod_month;
  /* 0x0028 */ unsigned long tod_year;
  /* 0x002c */ unsigned long tod_weekday;
} TIME_OF_DAY_INFO, *PTIME_OF_DAY_INFO; /* size: 0x0030 */

struct XE_TObjects<XEEvent,0>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEEvent *,0> m_objectPtrs;
}; /* size: 0x0018 */

typedef struct _SERVER_TRANSPORT_INFO_3
{
  /* 0x0000 */ unsigned long svti3_numberofvcs;
  /* 0x0004 */ long Padding_1815;
  /* 0x0008 */ wchar_t* svti3_transportname;
  /* 0x0010 */ unsigned char* svti3_transportaddress;
  /* 0x0018 */ unsigned long svti3_transportaddresslength;
  /* 0x001c */ long Padding_1816;
  /* 0x0020 */ wchar_t* svti3_networkaddress;
  /* 0x0028 */ wchar_t* svti3_domain;
  /* 0x0030 */ unsigned long svti3_flags;
  /* 0x0034 */ unsigned long svti3_passwordlength;
  /* 0x0038 */ unsigned char svti3_password[256];
} SERVER_TRANSPORT_INFO_3, *PSERVER_TRANSPORT_INFO_3; /* size: 0x0138 */

class AutoSpinlockHolder<158,3,1>;

class SpinlockHolder<147,4,1>;

class XeSqlPkg::hadr_transport_session_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1817[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int target_stateOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int target_availability_replica_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

typedef struct _stat32i64
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1818[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long Padding_1819;
  /* 0x0018 */ __int64 st_size;
  /* 0x0020 */ long st_atime;
  /* 0x0024 */ long st_mtime;
  /* 0x0028 */ long st_ctime;
  /* 0x002c */ long __PADDING__[1];
} stat32i64, *Pstat32i64; /* size: 0x0030 */

class XeSqlPkg::hadr_transport_get_message
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1820[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int target_availability_replica_idOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class SpinlockHolder<246,1,1>;

class AutoSpinlockHolder<248,1,1>;

class XeSqlPkg::query_execution_get_batch_vector
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1821[143];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int query_thread_idOffset;
    /* 0x0000 */ const int is_const_vectorOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int normalized_data_countOffset;
    /* 0x0000 */ const int unnormalized_data_countOffset;
    /* 0x0000 */ const int null_data_countOffset;
    /* 0x0000 */ const int column_nameOffset;
  }; /* size: 0x0025 */
}; /* size: 0x0268 */

class XeSqlPkg::hadr_wsfc_change_notifier_node_not_online
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1822[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int local_node_stateOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class TypeListNode<enum MemoryUtilizationEffects::Effects,TypeListNode<MemoryUtilizationEffects::EffectInfo const * const,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XeSqlPkg::logconsolidation_sectors_moving_to_data
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class Spinlock<284,1,1>
{
}; /* size: 0x0004 */

struct DelayLoadInfo
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ long Padding_1823;
  /* 0x0008 */ const struct ImgDelayDescr* pidd;
  /* 0x0010 */ void** ppfn /* function */;
  /* 0x0018 */ const char* szDll;
  /* 0x0020 */ struct DelayLoadProc dlp;
  /* 0x0030 */ struct HINSTANCE__* hmodCur;
  /* 0x0038 */ void* pfnCur /* function */;
  /* 0x0040 */ unsigned long dwLastError;
  /* 0x0044 */ long __PADDING__[1];
}; /* size: 0x0048 */

class XeSqlPkg::hadr_transport_configuration_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1824[143];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x000d */
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int target_stateOffset;
  }; /* size: 0x000d */
}; /* size: 0x0250 */

class XeSqlPkg::metadata_manager_catalog_updated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1825[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int from_brick_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class SpinlockHolder<24,19,1>;

typedef struct _stat64i32
{
  /* 0x0000 */ unsigned int st_dev;
  /* 0x0004 */ unsigned short st_ino;
  /* 0x0006 */ unsigned short st_mode;
  /* 0x0008 */ short st_nlink;
  /* 0x000a */ short st_uid;
  /* 0x000c */ short st_gid;
  /* 0x000e */ char Padding_1826[2];
  /* 0x0010 */ unsigned int st_rdev;
  /* 0x0014 */ long st_size;
  /* 0x0018 */ __int64 st_atime;
  /* 0x0020 */ __int64 st_mtime;
  /* 0x0028 */ __int64 st_ctime;
} stat64i32, *Pstat64i32; /* size: 0x0030 */

class SpinlockHolder<97,11,1>;

struct RpcDispachSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::ghost_cleanup
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1827[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int allocation_unit_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<206,3,1>;

class XeSqlPkg::database_detached
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1828[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class GlobalSchedulerEnum
{
}; /* size: 0x0010 */

class SpinlockHolder<266,1,1>;

class SpinlockHolder<3,19,1>;

class XeSqlPkg::filegroup_property_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1829[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int new_propertyOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<104,10,1>;

class XeSqlPkg::sql_statement_plan_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1830[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int statement_start_offsetOffset;
    /* 0x0000 */ const int statement_end_offsetOffset;
    /* 0x0000 */ const int source_brick_idOffset;
    /* 0x0000 */ const int plan_handleOffset;
    /* 0x0000 */ const int parent_plan_handleOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::query_driver_topology
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1831[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int topologyOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct XE_TypeTraits<XETarget>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallback<void,TListSLock,SOSCallbackEvent,NullType,NullType,NullType,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pNext;
}; /* size: 0x0010 */

class XeSqlPkg::query_rpc_server_collection_cache_miss
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1832[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_descriptorOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

struct ScriptDeploymentRequestsSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_backup_info_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1833[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_sub_typeOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int backup_lsnOffset;
    /* 0x0000 */ const int oldest_xact_lsnOffset;
    /* 0x0000 */ const int min_skip_lsnOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

class AutoSpinlockHolder<185,3,1>;

class XeSqlPkg::replica_create_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1834[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int phase_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int message_opcodeOffset;
    /* 0x0000 */ const int split_ageOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<173,3,1>;

class SOS_MemoryManager
{
}; /* size: 0x0001 */

class TCacheStoreUserDataEnumerator<StackFramesStore,StackFrames<16> >;

class XeSqlPkg::broker_transmission_timer_armed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1835[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int timerOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

typedef struct _SERVER_INFO_1107
{
  /* 0x0000 */ unsigned long sv1107_users;
} SERVER_INFO_1107, *PSERVER_INFO_1107; /* size: 0x0004 */

class AutoSpinlockHolder<36,19,1>;

struct XE_SessionTargetMgrSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<100,10,1>;

class XeSqlPkg::query_remote_memory_return_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1836[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int returned_remote_memory_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_target_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_granted_pagesOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

struct CMA_FMHistorySLock
{
}; /* size: 0x0004 */

class SpinlockHolder<127,7,1>;

typedef struct _USER_INFO_1008
{
  /* 0x0000 */ unsigned long usri1008_flags;
} USER_INFO_1008, *PUSER_INFO_1008; /* size: 0x0004 */

class AutoSpinlockHolder<11,19,1>;

class SpinlockHolder<228,1,1>;

class AutoSpinlockHolder<304,1,1>;

class XeSqlPkg::physical_filegroup_create
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1837[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int filegroup_log_idOffset;
    /* 0x0000 */ const int logical_filegroup_idOffset;
    /* 0x0000 */ const int recovery_unit_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int filegroup_guidOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

typedef struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ struct _QUERY_PERFORMANCE_COUNTER_FLAGS Flags;
  /* 0x0008 */ struct _QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags;
} SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION, *PSYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION; /* size: 0x000c */

struct XE_TEvent<4,6,10>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,6> m_customizableAttr;
  /* 0x01f0 */ struct XE_TArray<XEDataAttribute,10> m_dynamicAttr;
  /* 0x0380 */ struct XEEvent m_event;
}; /* size: 0x03c8 */

class AutoSpinlockHolder<281,1,1>;

class Spinlock<85,13,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::logreader_apply_filter_proc
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1838[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filter_proc_idOffset;
    /* 0x0000 */ const int use_rowOffset;
    /* 0x0000 */ const int current_lsnOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::ioaff_scan_worker_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1839[140];
      /* 0x0240 */ unsigned char m_buf[132];
    }; /* size: 0x0094 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int worker_idOffset;
    /* 0x0000 */ const int total_pages_readOffset;
    /* 0x0000 */ const int total_pages_processedOffset;
    /* 0x0000 */ const int total_ranges_processedOffset;
    /* 0x0000 */ const int total_ranges_generated_for_localOffset;
    /* 0x0000 */ const int total_ranges_generated_for_remoteOffset;
    /* 0x0000 */ const int total_ranges_local_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_ranges_remote_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_pages_local_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_pages_remote_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_ranges_local_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_ranges_remote_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_pages_local_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_pages_remote_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_time_msOffset;
  }; /* size: 0x0398 */
}; /* size: 0x02c8 */

class Spinlock<185,3,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::database_suspect_data_page
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1840[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int page_errorOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x01e8 */
}; /* size: 0x0258 */

class SpinlockHolder<161,3,1>;

class XeSqlPkg::sql_statement_recompile
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1841[140];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x0039 */
    /* 0x0000 */ const int recompile_causeOffset;
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int nest_levelOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x02e8 */
}; /* size: 0x0270 */

class Spinlock<166,3,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_prepare_cmd_get_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1842[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class AutoSpinlockHolder<76,15,1>;

class SpinlockHolder<2,19,1>;

class SpinlockHolder<114,9,1>;

class XeSqlPkg::query_execution_get_batch_from_column_store
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1843[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int query_thread_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class SpinlockHolder<124,7,1>;

class SpinlockHolder<264,1,1>;

typedef struct _USER_INFO_1020
{
  /* 0x0000 */ unsigned long usri1020_units_per_week;
  /* 0x0004 */ long Padding_1844;
  /* 0x0008 */ unsigned char* usri1020_logon_hours;
} USER_INFO_1020, *PUSER_INFO_1020; /* size: 0x0010 */

class SpinlockHolder<235,1,1>;

class SEList<DynInterval,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class AutoSpinlockHolder<72,16,1>;

class SpinlockHolder<203,3,1>;

class SpinlockHolder<87,12,1>;

class SpinlockHolder<134,4,1>;

class XeCloudMinPkg::establish_persistent_catchup_to_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,14> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1845[140];
      /* 0x0240 */ unsigned char m_buf[102];
    }; /* size: 0x0076 */
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int log_to_scan_kbOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int start_lsnOffset;
    /* 0x0000 */ const int end_lsnOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0320 */
}; /* size: 0x02a8 */

class Spinlock<254,1,1>
{
}; /* size: 0x0004 */

struct VdiOpSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_ag_lease_renewal
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1846[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int new_timeoutOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct LogLcSLock
{
}; /* size: 0x0004 */

class SOS_CallResult<long>
{
}; /* size: 0x000c */

class XeSqlPkg::query_rpc_server_runtime_init
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1847[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int table_nameOffset;
    /* 0x0000 */ const int index_nameOffset;
    /* 0x0000 */ const int schema_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::mixed_page_scan_page
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1848[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int sgam_fileOffset;
    /* 0x0000 */ const int sgam_pageOffset;
    /* 0x0000 */ const int start_file_idOffset;
    /* 0x0000 */ const int start_page_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0250 */

class XeSqlPkg::query_compiled
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1849[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int parent_idOffset;
    /* 0x0000 */ const int qte_typeOffset;
    /* 0x0000 */ const int logical_operatorOffset;
    /* 0x0000 */ const int physical_operatorOffset;
    /* 0x0000 */ const int dynamic_attributesOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::database_file_size_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1850[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int file_typeOffset;
    /* 0x0000 */ const int is_automaticOffset;
    /* 0x0000 */ const int total_size_kbOffset;
    /* 0x0000 */ const int size_change_kbOffset;
    /* 0x0000 */ const int file_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0270 */

class XeSqlPkg::natively_compiled_proc_slow_parameter_passing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1851[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int reasonOffset;
    /* 0x0000 */ const int parameter_indexOffset;
    /* 0x0000 */ const int parameter_nameOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class XeSqlPkg::log_pool_memory_status
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1852[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int memory_statusOffset;
    /* 0x0000 */ const int stampOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class AutoCallPrePostNode<TypeListNode<ExtIntCodeProtector<0>,NullType> >
{
}; /* size: 0x0008 */

class XeSqlPkg::query_rpc_prepare_cmd_set_range
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1853[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int one_rowOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeCloudMinPkg::ping_check
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1854[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int message_idOffset;
    /* 0x0000 */ const int function_nameOffset;
    /* 0x0000 */ const int descriptionOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeCloudMinPkg::async_transport_dequeue_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1855[140];
      /* 0x0240 */ unsigned char m_buf[46];
    }; /* size: 0x003e */
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int destination_type_groupOffset;
    /* 0x0000 */ const int message_handleOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_flagsOffset;
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int ack_sequence_numberOffset;
    /* 0x0000 */ const int message_countOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_idOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0270 */

class XeSqlPkg::backup_restore_test_delay
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1856[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int delay_location_nameOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::metadata_delete_global_temp_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1857[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

struct FabricMonitorSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_server_runtime_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1858[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

struct SbObjectSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::mixed_page_deallocation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1859[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int is_loggedOffset;
    /* 0x0000 */ const int rollbackOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0250 */

class SpinlockHolder<196,3,1>;

class XeSqlPkg::column_store_index_build_process_segment
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1860[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int hobtidOffset;
    /* 0x0000 */ const int rowgroup_idOffset;
    /* 0x0000 */ const int rowcountOffset;
    /* 0x0000 */ const int trim_reasonOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class SpinlockHolder<79,13,1>;

typedef struct _wfinddata32i64_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long time_create;
  /* 0x0008 */ long time_access;
  /* 0x000c */ long time_write;
  /* 0x0010 */ __int64 size;
  /* 0x0018 */ wchar_t name[260];
} wfinddata32i64_t, *Pwfinddata32i64_t; /* size: 0x0220 */

class XeSqlPkg::perfobject_processor
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,21> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1861[140];
      /* 0x0240 */ unsigned char m_buf[168];
    }; /* size: 0x00b8 */
    /* 0x0000 */ const int percent_c1_timeOffset;
    /* 0x0000 */ const int percent_c2_timeOffset;
    /* 0x0000 */ const int percent_c3_timeOffset;
    /* 0x0000 */ const int percent_dpc_timeOffset;
    /* 0x0000 */ const int percent_idle_timeOffset;
    /* 0x0000 */ const int percent_interrupt_timeOffset;
    /* 0x0000 */ const int percent_maximum_frequencyOffset;
    /* 0x0000 */ const int percent_priority_timeOffset;
    /* 0x0000 */ const int percent_privileged_timeOffset;
    /* 0x0000 */ const int percent_processor_timeOffset;
    /* 0x0000 */ const int percent_user_timeOffset;
    /* 0x0000 */ const int c1_transitions_per_secondOffset;
    /* 0x0000 */ const int c2_transitions_per_secondOffset;
    /* 0x0000 */ const int c3_transitions_per_secondOffset;
    /* 0x0000 */ const int dpc_rateOffset;
    /* 0x0000 */ const int dpcs_queued_per_secondOffset;
    /* 0x0000 */ const int interrupts_per_secondOffset;
    /* 0x0000 */ const int parking_statusOffset;
    /* 0x0000 */ const int processor_frequencyOffset;
    /* 0x0000 */ const int processor_state_flagsOffset;
    /* 0x0000 */ const int instance_nameOffset;
  }; /* size: 0x0410 */
}; /* size: 0x02e8 */

class XeCMPkg::cma_enlistment_reply_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1862[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class AutoChangeThreadPriority
{
  /* 0x0000 */ void* m_currentThreadHandle;
  /* 0x0008 */ int m_originalPriority;
}; /* size: 0x0010 */

class XeSqlPkg::check_thread_page_io_statistics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1863[140];
      /* 0x0240 */ unsigned char m_buf[27];
    }; /* size: 0x002b */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int is_remoteOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int read_ahead_readsOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class TCallbackListBase<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >
{
}; /* size: 0x0010 */

class XeCMPkg::cma_shutdown_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1864[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XE_SessionCtxtPublishEnum
{
  /* 0x0000 */ struct XESessionContextRecord* m_pSessionCtxtRecord;
  /* 0x0008 */ unsigned int m_slotIdx;
  /* 0x000c */ long Padding_1865;
  /* 0x0010 */ struct XESessionContextRecord m_recursiveRecord;
}; /* size: 0x0028 */

class AutoSpinlockHolder<230,1,1>;

typedef struct _OBJECT_TYPE_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING TypeName;
  /* 0x0010 */ unsigned long TotalNumberOfObjects;
  /* 0x0014 */ unsigned long TotalNumberOfHandles;
  /* 0x0018 */ unsigned long TotalPagedPoolUsage;
  /* 0x001c */ unsigned long TotalNonPagedPoolUsage;
  /* 0x0020 */ unsigned long TotalNamePoolUsage;
  /* 0x0024 */ unsigned long TotalHandleTableUsage;
  /* 0x0028 */ unsigned long HighWaterNumberOfObjects;
  /* 0x002c */ unsigned long HighWaterNumberOfHandles;
  /* 0x0030 */ unsigned long HighWaterPagedPoolUsage;
  /* 0x0034 */ unsigned long HighWaterNonPagedPoolUsage;
  /* 0x0038 */ unsigned long HighWaterNamePoolUsage;
  /* 0x003c */ unsigned long HighWaterHandleTableUsage;
  /* 0x0040 */ unsigned long InvalidAttributes;
  /* 0x0044 */ struct _GENERIC_MAPPING GenericMapping;
  /* 0x0054 */ unsigned long ValidAccessMask;
  /* 0x0058 */ unsigned char SecurityRequired;
  /* 0x0059 */ unsigned char MaintainHandleCount;
  /* 0x005a */ char Padding_1866[2];
  /* 0x005c */ unsigned long PoolType;
  /* 0x0060 */ unsigned long DefaultPagedPoolCharge;
  /* 0x0064 */ unsigned long DefaultNonPagedPoolCharge;
} OBJECT_TYPE_INFORMATION, *POBJECT_TYPE_INFORMATION; /* size: 0x0068 */

class SpinlockHolder<19,19,1>;

class AutoSpinlockHolder<33,19,1>;

struct MatrixDvmAgentWorkItemListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::calculate_dop
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1867[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int dopOffset;
    /* 0x0000 */ const int stage_infoOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<59,16,1>;

class XeSqlPkg::hekaton_sal_error
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1868[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int feature_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>
{
  /* 0x0000 */ long Padding_1869[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class XeSqlPkg::server_max_workers
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1870[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int scheduler_addressOffset;
    /* 0x0000 */ const int workload_groupOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::xtp_create_procedure
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1871[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::broker_transmission_lazyflusher_processing_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class XeSqlPkg::deprecation_announcement
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1872[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int feature_idOffset;
    /* 0x0000 */ const int featureOffset;
    /* 0x0000 */ const int messageOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

class XeSqlPkg::column_store_code_coverage
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1873[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int code_pointOffset;
    /* 0x0000 */ const int optional_value1Offset;
    /* 0x0000 */ const int optional_value2Offset;
    /* 0x0000 */ const int descriptionOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType> >,void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class RefCountImpl<XList<SOS_DispatcherBase> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

struct XE_TypeTraits<XEMessage>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class XeSqlPkg::oledb_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1874[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int messageOffset;
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int parametersOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0270 */

class SpinlockHolder<268,1,1>;

struct TestTeamExponentialTastasSLock
{
}; /* size: 0x0004 */

class XeCloudMinPkg::secondary_failure_report
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1875[140];
      /* 0x0240 */ unsigned char m_buf[81];
    }; /* size: 0x0061 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int replica_subtypeOffset;
    /* 0x0000 */ const int replica_statusOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0298 */

class UnfairRecursiveMutexInternal<PaddedSpinlock<SuspendQueueSLock>,0>;

class XeCloudMinPkg::change_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1876[140];
      /* 0x0240 */ unsigned char m_buf[79];
    }; /* size: 0x005f */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int quorum_setOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02d0 */
}; /* size: 0x0290 */

class Spinlock<328,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<183,3,1>;

class XeCloudMinPkg::repl_msg_dispatch
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1877[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int msg_sequence_numberOffset;
    /* 0x0000 */ const int replica_typeOffset;
    /* 0x0000 */ const int replica_subtypeOffset;
    /* 0x0000 */ const int partition_md_idOffset;
    /* 0x0000 */ const int partition_host_db_idOffset;
    /* 0x0000 */ const int partition_db_idOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_versionOffset;
    /* 0x0000 */ const int message_flagsOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0260 */

struct XE_TEvent<4,3,6>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,3> m_customizableAttr;
  /* 0x0148 */ struct XE_TArray<XEDataAttribute,6> m_dynamicAttr;
  /* 0x0238 */ struct XEEvent m_event;
}; /* size: 0x0280 */

class SpinlockHolder<260,1,1>;

class CAutoP<SOS_ResourceGroup>
{
}; /* size: 0x0008 */

class TCallback<void,int *,NullType,NullType,NullType>
{
}; /* size: 0x0018 */

class SpinlockHolder<64,16,1>;

class XeSqlPkg::query_execution_spool_secondary_open_before_primary
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1878[143];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x000d */
    /* 0x0000 */ const int secondary_spool_query_operation_node_idOffset;
    /* 0x0000 */ const int primary_spool_query_operation_node_idOffset;
    /* 0x0000 */ const int primary_spool_never_openedOffset;
  }; /* size: 0x000d */
}; /* size: 0x0250 */

struct MatrixOpCollSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<263,1,1>;

class XeSqlPkg::sp_cache_miss
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,3,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1879[140];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0032 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int cached_textOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0268 */

struct DataPortConsumerSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::queryvm_context_access_int64
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1880[143];
      /* 0x0240 */ unsigned char m_buf[31];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int remote_exchange_node_idOffset;
    /* 0x0000 */ const int remote_exchange_thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int context_accessed_nameOffset;
    /* 0x0000 */ const int context_accessed_valueOffset;
  }; /* size: 0x0023 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<68,16,1>;

class XeSqlPkg::metadata_cache_vlr_posted
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1881[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cache_typeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class TypeListSize<TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class XeSqlPkg::db_lock_acquired_from_cache
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1882[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int ref_count_totalOffset;
    /* 0x0000 */ const int ref_typeOffset;
    /* 0x0000 */ const int ref_type_countOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class SpinlockHolder<63,16,1>;

class XeSqlPkg::log_consumer_life
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1883[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int consumer_idOffset;
    /* 0x0000 */ const int is_aliveOffset;
    /* 0x0000 */ const int consumer_nameOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class SpinlockHolder<111,9,1>;

class Spinlock<190,3,1>
{
}; /* size: 0x0004 */

struct timecaps_tag
{
  /* 0x0000 */ unsigned int wPeriodMin;
  /* 0x0004 */ unsigned int wPeriodMax;
}; /* size: 0x0008 */

struct RemoteThreadCacheSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::database_cmptlevel_change
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1884[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int previous_valueOffset;
    /* 0x0000 */ const int new_valueOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<175,3,1>;

class XeCloudMinPkg::async_transport_connection_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1885[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int destination_descriptionOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct TICacheSLock
{
}; /* size: 0x0004 */

typedef union _RTL_ELEVATION_FLAGS
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long ElevationEnabled : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long VirtualizationEnabled : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long InstallerDetectEnabled : 1; /* bit position: 2 */
      /* 0x0000 */ unsigned long ReservedBits : 29; /* bit position: 3 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} RTL_ELEVATION_FLAGS, *PRTL_ELEVATION_FLAGS; /* size: 0x0004 */

typedef struct _RTC_ALLOCA_NODE
{
  /* 0x0000 */ int guard1;
  /* 0x0004 */ struct _RTC_ALLOCA_NODE* next;
  /* 0x000c */ unsigned __int64 allocaSize;
  /* 0x0014 */ int guard2[3];
} RTC_ALLOCA_NODE, *PRTC_ALLOCA_NODE; /* size: 0x0020 */

struct IMDFind
{
}; /* size: 0x0008 */

class Spinlock<108,9,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::database_segment_creation_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1886[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int local_brick_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class Spinlock<221,2,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::data_initialize_object_initialization
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

struct ReplLogReaderHistoryCacheSLock
{
}; /* size: 0x0004 */

struct XE_TEvent<4,0,20>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x00a8 */ struct XE_TArray<XEDataAttribute,20> m_dynamicAttr;
  /* 0x03c8 */ struct XEEvent m_event;
}; /* size: 0x0410 */

typedef struct _complex
{
  /* 0x0000 */ double x;
  /* 0x0008 */ double y;
} complex, *Pcomplex; /* size: 0x0010 */

class SpinlockHolder<150,4,1>;

class XeSqlPkg::query_execution_batch_hash_join_spilled
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1887[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int spilling_levelOffset;
    /* 0x0000 */ const int spilled_partitions_percentOffset;
    /* 0x0000 */ const int build_side_spilled_data_sizeOffset;
    /* 0x0000 */ const int build_side_in_memory_data_sizeOffset;
    /* 0x0000 */ const int probe_side_spilled_data_sizeOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

struct QueryStoreSelfAggSLock
{
}; /* size: 0x0004 */

class TCallbackListBase<TCallback<void,enum WakeUpReason,unsigned long,NullType,NullType> >
{
}; /* size: 0x0010 */

class XeSqlPkg::session_mgr_work_item_end_execution
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1888[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class Spinlock<267,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::database_agent_request_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1889[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int local_brick_idOffset;
    /* 0x0000 */ const int remote_brick_idOffset;
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class SOSHost_CallExternalTraits
{
}; /* size: 0x0001 */

class XeSqlPkg::hobt_schema_mgr_column
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1890[140];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x002a */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int ddl_operationOffset;
    /* 0x0000 */ const int column_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

struct FabricDbMgrPtrSLock
{
}; /* size: 0x0004 */

typedef struct _RTL_HANDLE_TABLE_ENTRY
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    /* 0x0000 */ struct _RTL_HANDLE_TABLE_ENTRY* NextFree;
  }; /* size: 0x0008 */
} RTL_HANDLE_TABLE_ENTRY, *PRTL_HANDLE_TABLE_ENTRY; /* size: 0x0008 */

struct XactLockInfoSLock
{
}; /* size: 0x0004 */

struct SbDebugListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::availability_replica_state_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1891[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int previous_stateOffset;
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_group_nameOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
    /* 0x0000 */ const int availability_replica_nameOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

struct TransmitterStreamsSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<123,7,1>;

class Spinlock<279,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::lock_acquired
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1892[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

class SpinlockHolder<4,19,1>;

typedef struct _RTL_DEBUG_INFORMATION
{
  /* 0x0000 */ void* SectionHandleClient;
  /* 0x0008 */ void* ViewBaseClient;
  /* 0x0010 */ void* ViewBaseTarget;
  /* 0x0018 */ unsigned __int64 ViewBaseDelta;
  /* 0x0020 */ void* EventPairClient;
  /* 0x0028 */ void* EventPairTarget;
  /* 0x0030 */ void* TargetProcessId;
  /* 0x0038 */ void* TargetThreadHandle;
  /* 0x0040 */ unsigned long Flags;
  /* 0x0044 */ long Padding_1893;
  /* 0x0048 */ unsigned __int64 OffsetFree;
  /* 0x0050 */ unsigned __int64 CommitSize;
  /* 0x0058 */ unsigned __int64 ViewSize;
  union
  {
    /* 0x0060 */ struct _RTL_PROCESS_MODULES* Modules;
    /* 0x0060 */ struct _RTL_PROCESS_MODULE_INFORMATION_EX* ModulesEx;
  }; /* size: 0x0008 */
  /* 0x0068 */ struct _RTL_PROCESS_BACKTRACES* BackTraces;
  /* 0x0070 */ struct _RTL_PROCESS_HEAPS* Heaps;
  /* 0x0078 */ struct _RTL_PROCESS_LOCKS* Locks;
  /* 0x0080 */ void* SpecificHeap;
  /* 0x0088 */ void* TargetProcessHandle;
  /* 0x0090 */ struct _RTL_PROCESS_VERIFIER_OPTIONS* VerifierOptions;
  /* 0x0098 */ void* ProcessHeap;
  /* 0x00a0 */ void* CriticalSectionHandle;
  /* 0x00a8 */ void* CriticalSectionOwnerThread;
  /* 0x00b0 */ void* Reserved[4];
} RTL_DEBUG_INFORMATION, *PRTL_DEBUG_INFORMATION; /* size: 0x00d0 */

class SpinlockHolder<300,3,1>;

class SpinlockHolder<0,19,1>;

class XeSqlPkg::query_store_persist_on_shutdown_failed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1894[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int dbIdOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class Spinlock<336,0,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::remote_dmv_stream_open_server
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1895[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

struct SecCtxtCacheSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_prepare_cmd_wake_up
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1896[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int table_nameOffset;
    /* 0x0000 */ const int index_nameOffset;
    /* 0x0000 */ const int schema_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class SpinlockHolder<258,1,1>;

class XeSqlPkg::file_read_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1897[140];
      /* 0x0240 */ unsigned char m_buf[60];
    }; /* size: 0x004c */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
    /* 0x0000 */ const int io_dataOffset;
  }; /* size: 0x02e8 */
}; /* size: 0x0280 */

class Spinlock<263,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::disk_write_async
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1898[143];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int error_code_pointerOffset;
    /* 0x0000 */ const int is_log_recordOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int sizeOffset;
  }; /* size: 0x0025 */
}; /* size: 0x0268 */

class SEListEnum<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,SOS_DispatcherBase const * const,NullType,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class SpinlockHolder<317,1,1>;

class Spinlock<17,19,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_filestream_file_close
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1899[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int open_modeOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::before_natively_compiled_proc_entry_removal_on_drop
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1900[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class SOS_IOCompRequestEnum
{
  /* 0x0000 */ class GlobalSchedulerEnum m_schedEnum;
  /* 0x0010 */ struct SOS_IOCompRequestEnum::Element m_element;
}; /* size: 0x00b8 */

class CMemThread<CMemDbg<CMemProc> >
{
  /* 0x0000 */ long Padding_1901[278];
  /* 0x0458 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x04d0 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x04f8 */

typedef struct _ALPC_SECURITY_ATTR
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_1902;
  /* 0x0008 */ struct _SECURITY_QUALITY_OF_SERVICE* QoS;
  /* 0x0010 */ void* ContextHandle;
} ALPC_SECURITY_ATTR, *PALPC_SECURITY_ATTR; /* size: 0x0018 */

typedef struct _PERF_INSTANCE_DEFINITION
{
  /* 0x0000 */ unsigned long ByteLength;
  /* 0x0004 */ unsigned long ParentObjectTitleIndex;
  /* 0x0008 */ unsigned long ParentObjectInstance;
  /* 0x000c */ long UniqueID;
  /* 0x0010 */ unsigned long NameOffset;
  /* 0x0014 */ unsigned long NameLength;
} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION; /* size: 0x0018 */

struct QeShutdownSLock
{
}; /* size: 0x0004 */

class Spinlock<229,1,1>
{
}; /* size: 0x0004 */

typedef struct _CM_INT13_DRIVE_PARAMETER
{
  /* 0x0000 */ unsigned short DriveSelect;
  /* 0x0002 */ unsigned long MaxCylinders;
  /* 0x0006 */ unsigned short SectorsPerTrack;
  /* 0x0008 */ unsigned short MaxHeads;
  /* 0x000a */ unsigned short NumberDrives;
} CM_INT13_DRIVE_PARAMETER, *PCM_INT13_DRIVE_PARAMETER; /* size: 0x000c */

class XeSqlPkg::uncached_sql_batch_statistics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1903[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class AutoSpinlockHolder<266,1,1>;

class XeSqlPkg::clustered_columnstore_index_rebuild
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1904[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int rebuild_phaseOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

typedef struct _PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ enum _PNP_QUERY_RELATION Operation;
  /* 0x0014 */ unsigned long BufferLength;
  /* 0x0018 */ wchar_t* Buffer;
} PLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA, *PPLUGPLAY_CONTROL_DEVICE_RELATIONS_DATA; /* size: 0x0020 */

struct LogLfmSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::mixed_page_allocation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1905[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int is_loggedOffset;
    /* 0x0000 */ const int rollbackOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0250 */

struct TransportDestinationSLock
{
}; /* size: 0x0004 */

class TypeListSize<TypeListNode<void *,TypeListNode<enum SOS_Task::TASK_CALLBACK_TYPE,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

class Spinlock<210,2,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::sp_statement_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1906[140];
      /* 0x0240 */ unsigned char m_buf[96];
    }; /* size: 0x0070 */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int last_row_countOffset;
    /* 0x0000 */ const int nest_levelOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x02a0 */

class XeSqlPkg::sort_statistics_tracing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1907[140];
      /* 0x0240 */ unsigned char m_buf[66];
    }; /* size: 0x0052 */
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int allocation_unit_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int input_phase_max_buffersOffset;
    /* 0x0000 */ const int input_phase_max_fanoutOffset;
    /* 0x0000 */ const int input_phase_max_ioOffset;
    /* 0x0000 */ const int input_phase_bobsOffset;
    /* 0x0000 */ const int merge_phase_max_buffersOffset;
    /* 0x0000 */ const int merge_phase_max_fanoutOffset;
    /* 0x0000 */ const int merge_phase_bobsOffset;
    /* 0x0000 */ const int max_memory_grantOffset;
    /* 0x0000 */ const int estimate_total_rowsOffset;
    /* 0x0000 */ const int is_fast_key_optimizedOffset;
    /* 0x0000 */ const int is_uniqueOffset;
    /* 0x0000 */ const int is_partitionedOffset;
    /* 0x0000 */ const int is_manualOffset;
  }; /* size: 0x0398 */
}; /* size: 0x0288 */

class AutoSpinlockHolder<328,1,1>;

class XeSqlPkg::session_mgr_event_notification_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1908[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int eventOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct If<1,CSerializeContext<CMemBufFormatter>::ElementalSerializer,CSerializeContext<CMemBufFormatter>::GenericSerializer>
{
}; /* size: 0x0001 */

struct ReadaheadSLock
{
}; /* size: 0x0004 */

struct XE_DispQueueSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_store_failed_to_load_forced_plan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1909[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int partial_textOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

struct RemoteSessionHashTableSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<307,1,1>;

typedef struct _PEBS_DS_SAVE_AREA
{
  /* 0x0000 */ unsigned __int64 BtsBufferBase;
  /* 0x0008 */ unsigned __int64 BtsIndex;
  /* 0x0010 */ unsigned __int64 BtsAbsoluteMaximum;
  /* 0x0018 */ unsigned __int64 BtsInterruptThreshold;
  /* 0x0020 */ unsigned __int64 PebsBufferBase;
  /* 0x0028 */ unsigned __int64 PebsIndex;
  /* 0x0030 */ unsigned __int64 PebsAbsoluteMaximum;
  /* 0x0038 */ unsigned __int64 PebsInterruptThreshold;
  /* 0x0040 */ unsigned __int64 PebsCounterReset0;
  /* 0x0048 */ unsigned __int64 PebsCounterReset1;
  /* 0x0050 */ unsigned __int64 PebsCounterReset2;
  /* 0x0058 */ unsigned __int64 PebsCounterReset3;
} PEBS_DS_SAVE_AREA, *PPEBS_DS_SAVE_AREA; /* size: 0x0060 */

typedef struct _PROCESSOR_PROFILE_CONTROL_AREA
{
  /* 0x0000 */ struct _PEBS_DS_SAVE_AREA PebsDsSaveArea;
} PROCESSOR_PROFILE_CONTROL_AREA, *PPROCESSOR_PROFILE_CONTROL_AREA; /* size: 0x0060 */

class SpinlockHolder<85,13,1>;

class SQLMemoryReportRowSet
{
}; /* size: 0x0008 */

class SpinlockHolder<229,1,1>;

class XeSqlPkg::fulltext_query_exec_stats
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1910[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int execution_stats_reportOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct DEKInstanceSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<192,3,1>;

struct TmpSessKeySLock
{
}; /* size: 0x0004 */

class XeSqlPkg::metadata_name_lookup_failed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1911[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_nameOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class SpinlockHolder<320,1,1>;

class XeSqlPkg::sp_cache_insert
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,3,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1912[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int cached_textOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int plan_handleOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0270 */

class TypeListSize<TypeListNode<SystemAffinity const &,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<119,8,1>;

class XeSqlPkg::fulltext_semantic_document_language
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1913[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int document_idOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int language_model_foundOffset;
    /* 0x0000 */ const int language_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<16,19,1>;

class XeSqlPkg::index_build_extents_allocation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1914[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int thread_internal_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int extents_numberOffset;
    /* 0x0000 */ const int breaks_numberOffset;
    /* 0x0000 */ const int first_extent_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class Spinlock<163,3,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::glm_release_database_lock_exception
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1915[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_reference_typeOffset;
    /* 0x0000 */ const int lock_modeOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int lock_optionOffset;
    /* 0x0000 */ const int lock_policyOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class CMemPartitioned<CMemThread<CMemDbg<CMemFixed> > >
{
  /* 0x0000 */ long Padding_1916[344];
  /* 0x0560 */ class IMemObj** m_partitionMemObj;
  /* 0x0568 */ int m_numberOfPartitions;
  /* 0x056c */ enum PartitioningType m_partType;
  /* 0x0570 */ enum AllocatorType m_allocatorType;
  /* 0x0574 */ long Padding_1917;
  /* 0x0578 */ __int64 m_cPages;
}; /* size: 0x0580 */

class Spinlock<87,12,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::metadata_ddl_alter_column
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1918[140];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x0029 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int datatypeOffset;
    /* 0x0000 */ const int collationOffset;
    /* 0x0000 */ const int nullableOffset;
    /* 0x0000 */ const int maxlenOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

typedef struct _PDH_STATISTICS
{
  /* 0x0000 */ unsigned long dwFormat;
  /* 0x0004 */ unsigned long count;
  /* 0x0008 */ struct _PDH_FMT_COUNTERVALUE min;
  /* 0x0018 */ struct _PDH_FMT_COUNTERVALUE max;
  /* 0x0028 */ struct _PDH_FMT_COUNTERVALUE mean;
} PDH_STATISTICS, *PPDH_STATISTICS; /* size: 0x0038 */

class Spinlock<126,7,1>
{
}; /* size: 0x0004 */

typedef struct _MSG_INFO_0
{
  /* 0x0000 */ wchar_t* msgi0_name;
} MSG_INFO_0, *PMSG_INFO_0; /* size: 0x0008 */

class SpinlockHolder<287,1,1>;

class MemObjCache<CMemThread<CMemDbg<CMemLargePageObj> > >
{
  /* 0x0000 */ long Padding_1919[392];
  /* 0x0620 */ void* m_cacheEntryDescriptor;
  /* 0x0628 */ class CostInfo m_costInfo;
}; /* size: 0x0670 */

class XeSqlPkg::broker_transmission_object_worktable_load_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1920[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class SpinlockHolder<144,4,1>;

class SpinlockHolder<259,1,1>;

class Spinlock<26,19,1>
{
}; /* size: 0x0004 */

struct SqlNormSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<106,9,1>;

typedef struct _RTL_UNICODE_STRING_BUFFER
{
  /* 0x0000 */ struct _UNICODE_STRING String;
  /* 0x0010 */ struct _RTL_BUFFER ByteBuffer;
  /* 0x0040 */ unsigned char MinimumStaticBufferForTerminalNul[2];
  /* 0x0042 */ char __PADDING__[6];
} RTL_UNICODE_STRING_BUFFER, *PRTL_UNICODE_STRING_BUFFER; /* size: 0x0048 */

class AutoSpinlockHolder<192,3,1>;

class IfNullTypeZeroElseOne<enum Worker::CallbackType>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<111,9,1>;

struct RemoteOpSLock
{
}; /* size: 0x0004 */

struct SOS_DispatcherSLock
{
}; /* size: 0x0004 */

typedef struct _X86_CALL_FRAME
{
  /* 0x0000 */ unsigned long ReturnAddress;
  /* 0x0004 */ unsigned long Param1;
  /* 0x0008 */ unsigned long Param2;
  /* 0x000c */ unsigned long CompatibilityArea;
} X86_CALL_FRAME, *PX86_CALL_FRAME; /* size: 0x0010 */

struct Pow<10,5>
{
}; /* size: 0x0001 */

typedef struct _RTL_QUERY_DEBUG_INFORMATION_INFO
{
  /* 0x0000 */ unsigned long UniqueProcessId;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ unsigned __int64 Buffer;
} RTL_QUERY_DEBUG_INFORMATION_INFO, *PRTL_QUERY_DEBUG_INFORMATION_INFO; /* size: 0x0010 */

class SpinlockHolder<95,11,1>;

struct _TPP_THREAD_DATA_CALLBACK;

class AutoSpinlockHolder<293,1,1>;

class Spinlock<153,3,1>
{
}; /* size: 0x0004 */

typedef struct _ACCESS_INFO_1002
{
  /* 0x0000 */ unsigned long acc1002_attr;
} ACCESS_INFO_1002, *PACCESS_INFO_1002; /* size: 0x0004 */

typedef struct _MODULEINFO
{
  /* 0x0000 */ void* lpBaseOfDll;
  /* 0x0008 */ unsigned long SizeOfImage;
  /* 0x000c */ long Padding_1921;
  /* 0x0010 */ void* EntryPoint;
} MODULEINFO, *PMODULEINFO; /* size: 0x0018 */

class Spinlock<58,16,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<128,7,1>;

typedef struct _PLUGPLAY_CONTROL_USER_RESPONSE_DATA
{
  /* 0x0000 */ unsigned long Response;
  /* 0x0004 */ enum _PNP_VETO_TYPE VetoType;
  /* 0x0008 */ wchar_t* VetoName;
  /* 0x0010 */ unsigned long VetoNameLength;
  /* 0x0014 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_USER_RESPONSE_DATA, *PPLUGPLAY_CONTROL_USER_RESPONSE_DATA; /* size: 0x0018 */

class Spinlock<123,7,1>
{
}; /* size: 0x0004 */

typedef struct _SESSION_INFO_1
{
  /* 0x0000 */ wchar_t* sesi1_cname;
  /* 0x0008 */ wchar_t* sesi1_username;
  /* 0x0010 */ unsigned long sesi1_num_opens;
  /* 0x0014 */ unsigned long sesi1_time;
  /* 0x0018 */ unsigned long sesi1_idle_time;
  /* 0x001c */ unsigned long sesi1_user_flags;
} SESSION_INFO_1, *PSESSION_INFO_1; /* size: 0x0020 */

class Spinlock<299,1,1>
{
}; /* size: 0x0004 */

class Spinlock<134,4,1>
{
}; /* size: 0x0004 */

class Spinlock<63,16,1>
{
}; /* size: 0x0004 */

typedef struct _PERF_OBJECT_TYPE
{
  /* 0x0000 */ unsigned long TotalByteLength;
  /* 0x0004 */ unsigned long DefinitionLength;
  /* 0x0008 */ unsigned long HeaderLength;
  /* 0x000c */ unsigned long ObjectNameTitleIndex;
  /* 0x0010 */ unsigned long ObjectNameTitle;
  /* 0x0014 */ unsigned long ObjectHelpTitleIndex;
  /* 0x0018 */ unsigned long ObjectHelpTitle;
  /* 0x001c */ unsigned long DetailLevel;
  /* 0x0020 */ unsigned long NumCounters;
  /* 0x0024 */ long DefaultCounter;
  /* 0x0028 */ long NumInstances;
  /* 0x002c */ unsigned long CodePage;
  /* 0x0030 */ union _LARGE_INTEGER PerfTime;
  /* 0x0038 */ union _LARGE_INTEGER PerfFreq;
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE; /* size: 0x0040 */

class SpinlockHolder<182,3,1>;

typedef struct _SERVER_INFO_1573
{
  /* 0x0000 */ unsigned long sv1573_restrictnullsessaccess;
} SERVER_INFO_1573, *PSERVER_INFO_1573; /* size: 0x0004 */

class AutoSpinlockHolder<334,0,257>;

typedef struct _RTL_HEAP_PARAMETERS
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_1922;
  /* 0x0008 */ unsigned __int64 SegmentReserve;
  /* 0x0010 */ unsigned __int64 SegmentCommit;
  /* 0x0018 */ unsigned __int64 DeCommitFreeBlockThreshold;
  /* 0x0020 */ unsigned __int64 DeCommitTotalFreeThreshold;
  /* 0x0028 */ unsigned __int64 MaximumAllocationSize;
  /* 0x0030 */ unsigned __int64 VirtualMemoryThreshold;
  /* 0x0038 */ unsigned __int64 InitialCommit;
  /* 0x0040 */ unsigned __int64 InitialReserve;
  /* 0x0048 */ void* CommitRoutine /* function */;
  /* 0x0050 */ unsigned __int64 Reserved[2];
} RTL_HEAP_PARAMETERS, *PRTL_HEAP_PARAMETERS; /* size: 0x0060 */

typedef struct _SERVER_INFO_1583
{
  /* 0x0000 */ unsigned long sv1583_minpagedpoolchunksize;
} SERVER_INFO_1583, *PSERVER_INFO_1583; /* size: 0x0004 */

typedef struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION
{
  /* 0x0000 */ enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS CrashDumpConfigurationClass;
} SYSTEM_CRASH_DUMP_STATE_INFORMATION, *PSYSTEM_CRASH_DUMP_STATE_INFORMATION; /* size: 0x0004 */

class Spinlock<144,4,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_POWER_INFORMATION
{
  /* 0x0000 */ unsigned long MaxIdlenessAllowed;
  /* 0x0004 */ unsigned long Idleness;
  /* 0x0008 */ unsigned long TimeRemaining;
  /* 0x000c */ unsigned char CoolingMode;
  /* 0x000d */ char __PADDING__[3];
} SYSTEM_POWER_INFORMATION, *PSYSTEM_POWER_INFORMATION; /* size: 0x0010 */

class SpinlockHolder<30,19,1>;

class Spinlock<326,1,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<72,16,1>;

typedef struct _WKSTA_INFO_1013
{
  /* 0x0000 */ unsigned long wki1013_keep_conn;
} WKSTA_INFO_1013, *PWKSTA_INFO_1013; /* size: 0x0004 */

typedef struct _MUILANGLIST
{
  /* 0x0000 */ unsigned int TotalSize;
  /* 0x0004 */ unsigned short NumLanguages;
  /* 0x0006 */ unsigned short MaxNumLanguages;
  /* 0x0008 */ unsigned char bUseUseMachineConfigList;
  /* 0x0009 */ char Padding_1923[7];
  /* 0x0010 */ struct _MUIREGISTRYINFO* RegInfo;
  /* 0x0018 */ struct _MUILANGLISTNODE* Languages;
  /* 0x0020 */ unsigned __int64 ullMask;
  /* 0x0028 */ unsigned int uConsoleFlag;
  /* 0x002c */ wchar_t Checksum[10];
} MUILANGLIST, *PMUILANGLIST; /* size: 0x0040 */

class XeSosPkg::idle_server_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1924[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int wake_up_reasonOffset;
    /* 0x0000 */ const int intervalOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSosPkg::scheduler_monitor_stalled_dispatcher_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,15> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1925[140];
      /* 0x0240 */ unsigned char m_buf[86];
    }; /* size: 0x0066 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int yieldsOffset;
    /* 0x0000 */ const int worker_utilizationOffset;
    /* 0x0000 */ const int process_utilizationOffset;
    /* 0x0000 */ const int system_idleOffset;
    /* 0x0000 */ const int user_mode_timeOffset;
    /* 0x0000 */ const int kernel_mode_timeOffset;
    /* 0x0000 */ const int page_faultsOffset;
    /* 0x0000 */ const int working_set_deltaOffset;
    /* 0x0000 */ const int memory_utilizationOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0378 */
}; /* size: 0x0298 */

typedef struct _XSAVE_VENDORS
{
  /* 0x0000 */ unsigned long NumberOfVendors;
  /* 0x0004 */ long Padding_1926;
  /* 0x0008 */ struct _XSAVE_VENDOR Vendor[1];
} XSAVE_VENDORS, *PXSAVE_VENDORS; /* size: 0x0040 */

typedef struct _API_SET_NAMESPACE_ARRAY
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _API_SET_NAMESPACE_ENTRY Array[1];
} API_SET_NAMESPACE_ARRAY, *PAPI_SET_NAMESPACE_ARRAY; /* size: 0x0014 */

class AutoSpinlockHolder<270,1,1>;

class XeSosPkg::scheduler_monitor_deadlock_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1927[140];
      /* 0x0240 */ unsigned char m_buf[66];
    }; /* size: 0x0052 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int process_utilizationOffset;
    /* 0x0000 */ const int system_idleOffset;
    /* 0x0000 */ const int user_mode_timeOffset;
    /* 0x0000 */ const int kernel_mode_timeOffset;
    /* 0x0000 */ const int page_faultsOffset;
    /* 0x0000 */ const int working_set_deltaOffset;
    /* 0x0000 */ const int memory_utilizationOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0300 */
}; /* size: 0x0288 */

class XeSosPkg::wait_info_external
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1928[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int wait_typeOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int durationOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSosPkg::page_heap_memory_allocated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1929[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_typeOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

typedef struct _SERVER_INFO_1560
{
  /* 0x0000 */ unsigned long sv1560_producttype;
} SERVER_INFO_1560, *PSERVER_INFO_1560; /* size: 0x0004 */

class XeSosPkg::non_yielding_iocp_listener_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1930[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int passesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef struct _TP_TASK_CALLBACKS
{
  /* 0x0000 */ void* ExecuteCallback /* function */;
  /* 0x0008 */ void* Unposted /* function */;
} TP_TASK_CALLBACKS, *PTP_TASK_CALLBACKS; /* size: 0x0010 */

class XeSosPkg::stuck_dispatcher_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1931[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int passesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef struct _VM_COUNTERS_EX
{
  /* 0x0000 */ unsigned __int64 PeakVirtualSize;
  /* 0x0008 */ unsigned __int64 VirtualSize;
  /* 0x0010 */ unsigned long PageFaultCount;
  /* 0x0014 */ long Padding_1932;
  /* 0x0018 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x0020 */ unsigned __int64 WorkingSetSize;
  /* 0x0028 */ unsigned __int64 QuotaPeakPagedPoolUsage;
  /* 0x0030 */ unsigned __int64 QuotaPagedPoolUsage;
  /* 0x0038 */ unsigned __int64 QuotaPeakNonPagedPoolUsage;
  /* 0x0040 */ unsigned __int64 QuotaNonPagedPoolUsage;
  /* 0x0048 */ unsigned __int64 PagefileUsage;
  /* 0x0050 */ unsigned __int64 PeakPagefileUsage;
  /* 0x0058 */ unsigned __int64 PrivateUsage;
} VM_COUNTERS_EX, *PVM_COUNTERS_EX; /* size: 0x0060 */

typedef struct _REPARSE_DATA_BUFFER
{
  /* 0x0000 */ unsigned long ReparseTag;
  /* 0x0004 */ unsigned short ReparseDataLength;
  /* 0x0006 */ unsigned short Reserved;
  union
  {
    struct
    {
      /* 0x0008 */ unsigned short SubstituteNameOffset;
      /* 0x000a */ unsigned short SubstituteNameLength;
      /* 0x000c */ unsigned short PrintNameOffset;
      /* 0x000e */ unsigned short PrintNameLength;
      /* 0x0010 */ unsigned long Flags;
      /* 0x0014 */ wchar_t PathBuffer[1];
      /* 0x0016 */ char __PADDING__[2];
    } /* size: 0x0010 */ SymbolicLinkReparseBuffer;
    struct
    {
      /* 0x0008 */ unsigned short SubstituteNameOffset;
      /* 0x000a */ unsigned short SubstituteNameLength;
      /* 0x000c */ unsigned short PrintNameOffset;
      /* 0x000e */ unsigned short PrintNameLength;
      /* 0x0010 */ wchar_t PathBuffer[1];
    } /* size: 0x000a */ MountPointReparseBuffer;
    struct
    {
      struct
      {
        /* 0x0008 */ unsigned char DataBuffer[1];
      } /* size: 0x0001 */ GenericReparseBuffer;
      /* 0x0009 */ char __PADDING__[15];
    }; /* size: 0x0010 */
  }; /* size: 0x0010 */
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER; /* size: 0x0018 */

class XeSosPkg::non_yielding_rm_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1933[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int passesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSosPkg::malloc_spy_memory_freed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1934[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int tagOffset;
    /* 0x0000 */ const int allocation_stampOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_typeOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

typedef struct _FILE_TRACKING_INFORMATION
{
  /* 0x0000 */ void* DestinationFile;
  /* 0x0008 */ unsigned long ObjectInformationLength;
  /* 0x000c */ char ObjectInformation[1];
  /* 0x000d */ char __PADDING__[3];
} FILE_TRACKING_INFORMATION, *PFILE_TRACKING_INFORMATION; /* size: 0x0010 */

class XeSosPkg::spinlock_backoff
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1935[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int spinlock_addressOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int backoffsOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int typeOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSosPkg::page_allocated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1936[140];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int page_sizeOffset;
    /* 0x0000 */ const int page_locationOffset;
    /* 0x0000 */ const int allocator_typeOffset;
    /* 0x0000 */ const int pool_idOffset;
    /* 0x0000 */ const int memory_clerk_addressOffset;
    /* 0x0000 */ const int memory_clerk_nameOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0278 */

typedef struct _SYSTEM_WATCHDOG_TIMER_INFORMATION
{
  /* 0x0000 */ enum _WATCHDOG_INFORMATION_CLASS WdInfoClass;
  /* 0x0004 */ unsigned long DataValue;
} SYSTEM_WATCHDOG_TIMER_INFORMATION, *PSYSTEM_WATCHDOG_TIMER_INFORMATION; /* size: 0x0008 */

class XeSosPkg::non_yielding_scheduler_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1937[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int passesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSosPkg::task_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1938[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int scheduler_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSosPkg::scheduler_created
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1939[140];
      /* 0x0240 */ unsigned char m_buf[27];
    }; /* size: 0x002b */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int worker_typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int affinity_maskOffset;
    /* 0x0000 */ const int ideal_worker_limitOffset;
    /* 0x0000 */ const int is_hiddenOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

typedef struct _LDR_SERVICE_TAG_RECORD
{
  /* 0x0000 */ struct _LDR_SERVICE_TAG_RECORD* Next;
  /* 0x0008 */ unsigned long ServiceTag;
  /* 0x000c */ long __PADDING__[1];
} LDR_SERVICE_TAG_RECORD, *PLDR_SERVICE_TAG_RECORD; /* size: 0x0010 */

typedef struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION
{
  /* 0x0000 */ struct _GUID BootIdentifier;
  /* 0x0010 */ enum _FIRMWARE_TYPE FirmwareType;
  /* 0x0014 */ long Padding_1940;
  /* 0x0018 */ unsigned __int64 BootFlags;
} SYSTEM_BOOT_ENVIRONMENT_INFORMATION, *PSYSTEM_BOOT_ENVIRONMENT_INFORMATION; /* size: 0x0020 */

class XeSosPkg::set_abort_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1941[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int task_addressOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct BOID
{
  /* 0x0000 */ unsigned char rgb[16];
}; /* size: 0x0010 */

class XeSosPkg::spinlock_backoff_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1942[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int spinlock_addressOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int backoffsOffset;
    /* 0x0000 */ const int typeOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class SEListEnum<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class XeSosPkg::exit_routine_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1943[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int exit_codeOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSosPkg::wait_info
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1944[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int wait_typeOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int signal_durationOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

typedef struct _SEC_OBJECT_ELEMENT
{
  /* 0x0000 */ struct _GUID guidObjectType;
  /* 0x0010 */ struct tagDBID ObjectID;
} SEC_OBJECT_ELEMENT, *PSEC_OBJECT_ELEMENT; /* size: 0x0030 */

class XeSosPkg::crt_signal_abort_called
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1945[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int signalOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSosPkg::quantum_thief
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1946[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int quantum_timeOffset;
    /* 0x0000 */ const int kernel_timeOffset;
    /* 0x0000 */ const int user_timeOffset;
    /* 0x0000 */ const int idle_percentageOffset;
    /* 0x0000 */ const int is_pagingOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

struct ISessionProperties
{
}; /* size: 0x0008 */

class XeSosPkg::async_io_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1947[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int completion_routine_pointerOffset;
    /* 0x0000 */ const int user_data_pointerOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSosPkg::scheduler_monitor_system_health_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1948[140];
      /* 0x0240 */ unsigned char m_buf[60];
    }; /* size: 0x004c */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int process_utilizationOffset;
    /* 0x0000 */ const int system_idleOffset;
    /* 0x0000 */ const int user_mode_timeOffset;
    /* 0x0000 */ const int kernel_mode_timeOffset;
    /* 0x0000 */ const int page_faultsOffset;
    /* 0x0000 */ const int working_set_deltaOffset;
    /* 0x0000 */ const int memory_utilizationOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x02b0 */
}; /* size: 0x0280 */

class XeSosPkg::function_hook_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1949[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int unhook_countOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int dll_nameOffset;
    /* 0x0000 */ const int function_nameOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSosPkg::scheduler_monitor_non_yielding_rm_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1950[140];
      /* 0x0240 */ unsigned char m_buf[94];
    }; /* size: 0x006e */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int yieldsOffset;
    /* 0x0000 */ const int worker_utilizationOffset;
    /* 0x0000 */ const int process_utilizationOffset;
    /* 0x0000 */ const int system_idleOffset;
    /* 0x0000 */ const int user_mode_timeOffset;
    /* 0x0000 */ const int kernel_mode_timeOffset;
    /* 0x0000 */ const int page_faultsOffset;
    /* 0x0000 */ const int working_set_deltaOffset;
    /* 0x0000 */ const int memory_utilizationOffset;
    /* 0x0000 */ const int memory_allocatedOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x03a0 */
}; /* size: 0x02a0 */

class AutoSpinlockHolder<229,1,1>;

class XeSosPkg::scheduler_monitor_non_yielding_iocp_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,15> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1951[140];
      /* 0x0240 */ unsigned char m_buf[86];
    }; /* size: 0x0066 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int yieldsOffset;
    /* 0x0000 */ const int worker_utilizationOffset;
    /* 0x0000 */ const int process_utilizationOffset;
    /* 0x0000 */ const int system_idleOffset;
    /* 0x0000 */ const int user_mode_timeOffset;
    /* 0x0000 */ const int kernel_mode_timeOffset;
    /* 0x0000 */ const int page_faultsOffset;
    /* 0x0000 */ const int working_set_deltaOffset;
    /* 0x0000 */ const int memory_utilizationOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0378 */
}; /* size: 0x0298 */

class XeSosPkg::malloc_spy_memory_allocated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1952[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int tagOffset;
    /* 0x0000 */ const int allocation_stampOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_typeOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSosPkg::scheduler_monitor_non_yielding_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1953[140];
      /* 0x0240 */ unsigned char m_buf[90];
    }; /* size: 0x006a */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int schedulerOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int yieldsOffset;
    /* 0x0000 */ const int worker_utilizationOffset;
    /* 0x0000 */ const int process_utilizationOffset;
    /* 0x0000 */ const int system_idleOffset;
    /* 0x0000 */ const int user_mode_timeOffset;
    /* 0x0000 */ const int kernel_mode_timeOffset;
    /* 0x0000 */ const int page_faultsOffset;
    /* 0x0000 */ const int working_set_deltaOffset;
    /* 0x0000 */ const int memory_utilizationOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x03a0 */
}; /* size: 0x02a0 */

class XeSosPkg::memory_utilization_effect_callback_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1954[140];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0032 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int working_setOffset;
    /* 0x0000 */ const int commitedOffset;
    /* 0x0000 */ const int utilizationOffset;
    /* 0x0000 */ const int effectOffset;
    /* 0x0000 */ const int effect_durationOffset;
    /* 0x0000 */ const int effect_stateOffset;
    /* 0x0000 */ const int effect_reversed_indicatorOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0268 */

class XeSosPkg::async_io_requested
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1955[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int completion_routine_pointerOffset;
    /* 0x0000 */ const int user_data_pointerOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSosPkg::allocation_failure
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1956[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int worker_addressOffset;
    /* 0x0000 */ const int failure_typeOffset;
    /* 0x0000 */ const int resource_sizeOffset;
    /* 0x0000 */ const int pool_idOffset;
    /* 0x0000 */ const int factorOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

typedef struct _SYSTEM_INTERRUPT_INFORMATION
{
  /* 0x0000 */ unsigned long ContextSwitches;
  /* 0x0004 */ unsigned long DpcCount;
  /* 0x0008 */ unsigned long DpcRate;
  /* 0x000c */ unsigned long TimeIncrement;
  /* 0x0010 */ unsigned long DpcBypassCount;
  /* 0x0014 */ unsigned long ApcBypassCount;
} SYSTEM_INTERRUPT_INFORMATION, *PSYSTEM_INTERRUPT_INFORMATION; /* size: 0x0018 */

class XeSosPkg::large_cache_sweep
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1957[140];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x0039 */
    /* 0x0000 */ const int cache_addressOffset;
    /* 0x0000 */ const int entries_sweptOffset;
    /* 0x0000 */ const int entries_evictedOffset;
    /* 0x0000 */ const int pages_sweptOffset;
    /* 0x0000 */ const int pages_evictedOffset;
    /* 0x0000 */ const int simulation_sweepOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0270 */

struct CLUSPROP_LARGE_INTEGER
{
  /* 0x0000 */ long Padding_1958[2];
  /* 0x0008 */ union _LARGE_INTEGER li;
}; /* size: 0x0010 */

struct FailPointInfo
{
  /* 0x0000 */ unsigned int m_failPointSignature;
  /* 0x0004 */ int m_major;
  /* 0x0008 */ int m_minor;
  /* 0x000c */ int m_severity;
  /* 0x0010 */ int m_state;
  /* 0x0014 */ unsigned int m_guard;
}; /* size: 0x0018 */

class XeSosPkg::node_affinity_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1959[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int old_affinity_maskOffset;
    /* 0x0000 */ const int new_affinity_maskOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct _PORT_DATA_ENTRY
{
  /* 0x0000 */ void* Base;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long __PADDING__[1];
} PORT_DATA_ENTRY, *PPORT_DATA_ENTRY; /* size: 0x0010 */

class SpinlockHolder<181,3,1>;

struct QueryStoreExecStatsReadSLock
{
}; /* size: 0x0004 */

class Spinlock<147,4,1>
{
}; /* size: 0x0004 */

class Spinlock<335,0,1>
{
}; /* size: 0x0004 */

typedef struct _PLUGPLAY_CONTROL_INSTALL_DATA
{
  /* 0x0000 */ unsigned long BufferLength;
  /* 0x0004 */ long Padding_1960;
  /* 0x0008 */ wchar_t* Buffer;
} PLUGPLAY_CONTROL_INSTALL_DATA, *PPLUGPLAY_CONTROL_INSTALL_DATA; /* size: 0x0010 */

typedef struct _FILE_NAMES_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ unsigned long FileNameLength;
  /* 0x000c */ wchar_t FileName[1];
  /* 0x000e */ char __PADDING__[2];
} FILE_NAMES_INFORMATION, *PFILE_NAMES_INFORMATION; /* size: 0x0010 */

class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType>,TListSLock,SOSCallbackEvent>::Elem>* m_pNext;
}; /* size: 0x0010 */

class IfNullTypeZeroElseOne<enum SOS_Task::TASK_CALLBACK_TYPE>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<163,3,1>;

class SpinlockHolder<136,4,1>;

class AutoSpinlockHolder<152,3,1>;

struct CLUSPROP_RESOURCE_CLASS
{
  /* 0x0000 */ long Padding_1961[2];
  /* 0x0008 */ enum CLUSTER_RESOURCE_CLASS rc;
}; /* size: 0x000c */

class Spinlock<107,9,1>
{
}; /* size: 0x0004 */

typedef struct _USER_INFO_21
{
  /* 0x0000 */ unsigned char usri21_password[16];
} USER_INFO_21, *PUSER_INFO_21; /* size: 0x0010 */

struct FabricObjectRegistrationSLock
{
}; /* size: 0x0004 */

union CLUSPROP_REQUIRED_DEPENDENCY
{
  union
  {
    /* 0x0000 */ struct CLUSPROP_VALUE Value;
    /* 0x0000 */ struct CLUSPROP_RESOURCE_CLASS ResClass;
    /* 0x0000 */ struct CLUSPROP_SZ ResTypeName;
  }; /* size: 0x000c */
}; /* size: 0x000c */

class Spinlock<195,3,1>
{
}; /* size: 0x0004 */

typedef struct _SESSION_INFO_502
{
  /* 0x0000 */ wchar_t* sesi502_cname;
  /* 0x0008 */ wchar_t* sesi502_username;
  /* 0x0010 */ unsigned long sesi502_num_opens;
  /* 0x0014 */ unsigned long sesi502_time;
  /* 0x0018 */ unsigned long sesi502_idle_time;
  /* 0x001c */ unsigned long sesi502_user_flags;
  /* 0x0020 */ wchar_t* sesi502_cltype_name;
  /* 0x0028 */ wchar_t* sesi502_transport;
} SESSION_INFO_502, *PSESSION_INFO_502; /* size: 0x0030 */

class Spinlock<301,1,1>
{
}; /* size: 0x0004 */

typedef struct _USER_MODALS_INFO_1
{
  /* 0x0000 */ unsigned long usrmod1_role;
  /* 0x0004 */ long Padding_1962;
  /* 0x0008 */ wchar_t* usrmod1_primary;
} USER_MODALS_INFO_1, *PUSER_MODALS_INFO_1; /* size: 0x0010 */

class SpinlockHolder<154,3,1>;

typedef struct _SERVER_INFO_1585
{
  /* 0x0000 */ int sv1585_sendsfrompreferredprocessor;
} SERVER_INFO_1585, *PSERVER_INFO_1585; /* size: 0x0004 */

class AutoSpinlockHolder<101,10,1>;

typedef struct _PROCESS_HANDLE_TRACING_ENABLE_EX
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long TotalSlots;
} PROCESS_HANDLE_TRACING_ENABLE_EX, *PPROCESS_HANDLE_TRACING_ENABLE_EX; /* size: 0x0008 */

typedef struct _SERVER_INFO_1592
{
  /* 0x0000 */ unsigned long sv1592_autosharewks;
} SERVER_INFO_1592, *PSERVER_INFO_1592; /* size: 0x0004 */

class SpinlockHolder<214,2,1>;

class AutoSpinlockHolder<300,3,1>;

class Spinlock<244,1,1>
{
}; /* size: 0x0004 */

typedef struct _RTL_BACKOFF
{
  /* 0x0000 */ unsigned long Delay;
} RTL_BACKOFF, *PRTL_BACKOFF; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1056
{
  /* 0x0000 */ int wki1056_use_write_raw_data;
} WKSTA_INFO_1056, *PWKSTA_INFO_1056; /* size: 0x0004 */

class TypeListSize<TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

class Spinlock<10,19,1>
{
}; /* size: 0x0004 */

class Spinlock<141,4,1>
{
}; /* size: 0x0004 */

struct GhostFreeSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<305,1,1>;

typedef struct _MUIREGISTRYINFO
{
  /* 0x0000 */ unsigned int Owned;
  /* 0x0004 */ unsigned short InstallLanguageFallback[4];
  /* 0x000c */ unsigned long Generation;
  /* 0x0010 */ unsigned long ProcessGeneration;
  /* 0x0014 */ long Padding_1963;
  /* 0x0018 */ struct _MUILANGUAGES* Installed;
  /* 0x0020 */ struct _MUISTRINGPOOL* Strings;
  /* 0x0028 */ struct _MUILANGCFGLIST* MachineConfig;
  /* 0x0030 */ struct _MUILANGCFGLIST* UserConfig;
  /* 0x0038 */ struct _MUILANGLIST* MachinePreferred;
  /* 0x0040 */ struct _MUILANGLIST* UserPreferred;
  /* 0x0048 */ struct _MUILANGLIST* ProcessPreferred;
  /* 0x0050 */ struct _MUILANGLIST* MergedUser;
  /* 0x0058 */ struct _MUILANGLIST* MergedMachine;
  /* 0x0060 */ struct _MUILANGLIST* MergedFallback;
  /* 0x0068 */ struct _MUIREGISTRYINFO* PrevRegInfo;
  /* 0x0070 */ unsigned long MUI_Locked;
  /* 0x0074 */ unsigned long MUI_SE;
  /* 0x0078 */ unsigned long MUI_NumberAllowed;
  /* 0x007c */ long Padding_1964;
  /* 0x0080 */ wchar_t* MUI_AllowedLanguage;
  /* 0x0088 */ wchar_t* MUI_InstalledSKU;
  /* 0x0090 */ unsigned long cbInstalledSKU;
  /* 0x0094 */ unsigned long cbAllowedLanguage;
  /* 0x0098 */ wchar_t* MUI_DisallowedLanguage;
  /* 0x00a0 */ unsigned long cbDisallowedLanguage;
  /* 0x00a4 */ long __PADDING__[1];
} MUIREGISTRYINFO, *PMUIREGISTRYINFO; /* size: 0x00a8 */

class AutoSpinlockHolder<40,18,1>;

typedef union _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA
{
  union
  {
    /* 0x0000 */ struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_BEGINNING ResolutionBeginning;
    /* 0x0000 */ struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_GET_ROOT GetRoot;
    /* 0x0000 */ struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_SUCCESSFUL ResolutionSuccessful;
    /* 0x0000 */ struct _ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA_RESOLUTION_ENDING ResolutionEnding;
  }; /* size: 0x0040 */
} ASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA, *PASSEMBLY_STORAGE_MAP_RESOLUTION_CALLBACK_DATA; /* size: 0x0040 */

typedef struct _PERF_COUNTER_BLOCK
{
  /* 0x0000 */ unsigned long ByteLength;
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK; /* size: 0x0004 */

class SpinlockHolder<156,3,1>;

typedef struct _SYSTEM_EXCEPTION_INFORMATION
{
  /* 0x0000 */ unsigned long AlignmentFixupCount;
  /* 0x0004 */ unsigned long ExceptionDispatchCount;
  /* 0x0008 */ unsigned long FloatingEmulationCount;
  /* 0x000c */ unsigned long ByteWordEmulationCount;
} SYSTEM_EXCEPTION_INFORMATION, *PSYSTEM_EXCEPTION_INFORMATION; /* size: 0x0010 */

class AutoSpinlockHolder<239,1,1>;

struct LogConsolidationSLock
{
}; /* size: 0x0004 */

struct TransportStreamSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<117,8,1>;

class SpinlockHolder<318,1,1>;

class SpinlockHolder<146,4,1>;

struct GhostHashSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<305,1,1>;

class AutoSpinlockHolder<311,1,1>;

struct SptProfileSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<219,2,1>;

typedef struct _RTL_RXACT_LOG
{
  /* 0x0000 */ unsigned long OperationCount;
  /* 0x0004 */ unsigned long LogSize;
  /* 0x0008 */ unsigned long LogSizeInUse;
  /* 0x000c */ unsigned long Alignment;
} RTL_RXACT_LOG, *PRTL_RXACT_LOG; /* size: 0x0010 */

struct LiveTargetTvfSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<27,19,1>;

struct BackupCopyCtxSLock
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1555
{
  /* 0x0000 */ unsigned long sv1555_scavqosinfoupdatetime;
} SERVER_INFO_1555, *PSERVER_INFO_1555; /* size: 0x0004 */

class AutoSpinlockHolder<67,16,1>;

class TypeListNode<unsigned long *,TypeListNode<SOS_Scheduler * const,TypeListNode<NullType,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class SpinlockHolder<11,19,1>;

class SpinlockHolder<175,3,1>;

class SpinlockHolder<15,19,1>;

class Spinlock<268,1,1>
{
}; /* size: 0x0004 */

struct XE_TArray<XETarget *,2>
{
  /* 0x0000 */ struct XETarget* m_array[2];
}; /* size: 0x0010 */

struct XE_TObjects<XETarget,2>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XETarget *,2> m_objectPtrs;
}; /* size: 0x0020 */

struct ServerNiceShutdownSLock
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_FLAGS_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
} SYSTEM_FLAGS_INFORMATION, *PSYSTEM_FLAGS_INFORMATION; /* size: 0x0004 */

class SpinlockHolder<315,1,1>;

class AutoSpinlockHolder<22,19,1>;

class SpinlockHolder<296,1,1>;

struct ExtCacheSLock
{
}; /* size: 0x0004 */

typedef struct _USER_INFO_1023
{
  /* 0x0000 */ wchar_t* usri1023_logon_server;
} USER_INFO_1023, *PUSER_INFO_1023; /* size: 0x0008 */

class Spinlock<32,19,1>
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1525
{
  /* 0x0000 */ unsigned long sv1525_maxkeepcomplsearch;
} SERVER_INFO_1525, *PSERVER_INFO_1525; /* size: 0x0004 */

class AutoSpinlockHolder<254,1,1>;

class Spinlock<295,1,1>
{
}; /* size: 0x0004 */

typedef struct _CALL_FRAME
{
  /* 0x0000 */ void* ReturnAddress;
  /* 0x0008 */ void* Param1Home;
  /* 0x0010 */ void* Param2Home;
  /* 0x0018 */ void* Param3Home;
  /* 0x0020 */ void* Param4Home;
} CALL_FRAME, *PCALL_FRAME; /* size: 0x0028 */

class AutoSpinlockHolder<194,3,1>;

struct MissingIndexStatsKeySLock
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1557
{
  /* 0x0000 */ unsigned long sv1557_maxrawworkitems;
} SERVER_INFO_1557, *PSERVER_INFO_1557; /* size: 0x0004 */

class Spinlock<243,1,1>
{
}; /* size: 0x0004 */

class ISOSHost_EventAutoImpl
{
}; /* size: 0x00e0 */

class XeSqlPkg::hadr_capture_log_block
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1965[140];
      /* 0x0240 */ unsigned char m_buf[58];
    }; /* size: 0x004a */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int log_block_sizeOffset;
    /* 0x0000 */ const int log_block_sequenceOffset;
    /* 0x0000 */ const int log_block_acknowledgment_sequenceOffset;
    /* 0x0000 */ const int queue_sizeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
    /* 0x0000 */ const int database_replica_idOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0280 */

struct SEReplPartitionMgrEventListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::syscommittab_cleanup
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1966[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int rows_deletedOffset;
    /* 0x0000 */ const int cleaned_upto_dateOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class Spinlock<9,19,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::query_no_cqscan_cache_due_to_memory_limitation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1967[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int cache_threshold_kbOffset;
    /* 0x0000 */ const int requested_memory_kbOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<3,19,1>;

class XeSqlPkg::hobt_schema_mgr_hobt
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1968[140];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int ddl_operationOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

struct TransmitterDestinationsSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::prepare_sql
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1969[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int statement_handleOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class SpinlockHolder<132,5,1>;

class XeSqlPkg::hadr_filestream_log_interpreter
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1970[140];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int total_recordsOffset;
    /* 0x0000 */ const int filestream_chunk_recordsOffset;
    /* 0x0000 */ const int transaction_abort_recordsOffset;
    /* 0x0000 */ const int log_block_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

struct SqlMgrSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_remote_memory_post_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1971[143];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int lock_resultOffset;
    /* 0x0000 */ const int first_try_successOffset;
    /* 0x0000 */ const int actual_remote_memory_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_target_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_granted_pagesOffset;
  }; /* size: 0x0021 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<94,11,1>;

class XeSqlPkg::additional_memory_grant
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1972[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int requested_memory_kbOffset;
    /* 0x0000 */ const int granted_memory_kbOffset;
    /* 0x0000 */ const int resource_pool_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class Spinlock<44,18,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_BOOT_GRAPHICS_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER FrameBuffer;
  /* 0x0008 */ unsigned long Width;
  /* 0x000c */ unsigned long Height;
  /* 0x0010 */ unsigned long PixelStride;
  /* 0x0014 */ unsigned long Flags;
  /* 0x0018 */ enum _SYSTEM_PIXEL_FORMAT Format;
  /* 0x001c */ long __PADDING__[1];
} SYSTEM_BOOT_GRAPHICS_INFORMATION, *PSYSTEM_BOOT_GRAPHICS_INFORMATION; /* size: 0x0020 */

class Spinlock<191,3,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 AvailablePages;
  /* 0x0008 */ unsigned __int64 CommittedPages;
  /* 0x0010 */ unsigned __int64 CommitLimit;
  /* 0x0018 */ unsigned __int64 PeakCommitment;
} SYSTEM_BASIC_PERFORMANCE_INFORMATION, *PSYSTEM_BASIC_PERFORMANCE_INFORMATION; /* size: 0x0020 */

class TCallbackListBase<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType> >
{
}; /* size: 0x0030 */

typedef struct _SYSTEM_PROCESS_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long NumberOfThreads;
  /* 0x0008 */ union _LARGE_INTEGER WorkingSetPrivateSize;
  /* 0x0010 */ unsigned long HardFaultCount;
  /* 0x0014 */ unsigned long NumberOfThreadsHighWatermark;
  /* 0x0018 */ unsigned __int64 CycleTime;
  /* 0x0020 */ union _LARGE_INTEGER CreateTime;
  /* 0x0028 */ union _LARGE_INTEGER UserTime;
  /* 0x0030 */ union _LARGE_INTEGER KernelTime;
  /* 0x0038 */ struct _UNICODE_STRING ImageName;
  /* 0x0048 */ long BasePriority;
  /* 0x004c */ long Padding_1973;
  /* 0x0050 */ void* UniqueProcessId;
  /* 0x0058 */ void* InheritedFromUniqueProcessId;
  /* 0x0060 */ unsigned long HandleCount;
  /* 0x0064 */ unsigned long SessionId;
  /* 0x0068 */ unsigned __int64 UniqueProcessKey;
  /* 0x0070 */ unsigned __int64 PeakVirtualSize;
  /* 0x0078 */ unsigned __int64 VirtualSize;
  /* 0x0080 */ unsigned long PageFaultCount;
  /* 0x0084 */ long Padding_1974;
  /* 0x0088 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x0090 */ unsigned __int64 WorkingSetSize;
  /* 0x0098 */ unsigned __int64 QuotaPeakPagedPoolUsage;
  /* 0x00a0 */ unsigned __int64 QuotaPagedPoolUsage;
  /* 0x00a8 */ unsigned __int64 QuotaPeakNonPagedPoolUsage;
  /* 0x00b0 */ unsigned __int64 QuotaNonPagedPoolUsage;
  /* 0x00b8 */ unsigned __int64 PagefileUsage;
  /* 0x00c0 */ unsigned __int64 PeakPagefileUsage;
  /* 0x00c8 */ unsigned __int64 PrivatePageCount;
  /* 0x00d0 */ union _LARGE_INTEGER ReadOperationCount;
  /* 0x00d8 */ union _LARGE_INTEGER WriteOperationCount;
  /* 0x00e0 */ union _LARGE_INTEGER OtherOperationCount;
  /* 0x00e8 */ union _LARGE_INTEGER ReadTransferCount;
  /* 0x00f0 */ union _LARGE_INTEGER WriteTransferCount;
  /* 0x00f8 */ union _LARGE_INTEGER OtherTransferCount;
} SYSTEM_PROCESS_INFORMATION, *PSYSTEM_PROCESS_INFORMATION; /* size: 0x0100 */

class SOS_TRingBufferRecordEnum<SOS_ResourceMonitorRingRecord>;

typedef struct _SYSDBG_IO_SPACE
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ void* Buffer;
  /* 0x0010 */ unsigned long Request;
  /* 0x0014 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0018 */ unsigned long BusNumber;
  /* 0x001c */ unsigned long AddressSpace;
} SYSDBG_IO_SPACE, *PSYSDBG_IO_SPACE; /* size: 0x0020 */

class AutoSpinlockHolder<44,18,1>;

class XeSqlPkg::window_spool_ondisk_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1975[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int query_operation_node_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class AutoSpinlockHolder<167,3,1>;

struct _CrtMemBlockHeader;

struct SEReplPartitionSLock
{
}; /* size: 0x0004 */

typedef struct _CrtMemState
{
  /* 0x0000 */ struct _CrtMemBlockHeader* pBlockHeader;
  /* 0x0008 */ unsigned __int64 lCounts[5];
  /* 0x0030 */ unsigned __int64 lSizes[5];
  /* 0x0058 */ unsigned __int64 lHighWaterCount;
  /* 0x0060 */ unsigned __int64 lTotalCount;
} CrtMemState, *PCrtMemState; /* size: 0x0068 */

class XeSqlPkg::unprepare_sql
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1976[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int statement_handleOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct LogFlushQSLock
{
}; /* size: 0x0004 */

struct GroupCommitSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_scan_startup
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1977[143];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0005 */
    /* 0x0000 */ const int plan_typeOffset;
  }; /* size: 0x0005 */
}; /* size: 0x0248 */

class SpinlockHolder<272,3,1>;

class XeSqlPkg::physical_page_read
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1978[140];
      /* 0x0240 */ unsigned char m_buf[6];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::remove_database_cache
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1979[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct QueryStoreAsyncPersistSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<278,1,1>
{
}; /* size: 0x0010 */

struct XE_TArray<XEDataAttribute,28>
{
  /* 0x0000 */ struct XEDataAttribute m_array[28];
}; /* size: 0x0460 */

struct XE_TEvent<4,1,28>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,1> m_customizableAttr;
  /* 0x00d8 */ struct XE_TArray<XEDataAttribute,28> m_dynamicAttr;
  /* 0x0538 */ struct XEEvent m_event;
}; /* size: 0x0580 */

struct XTPRuntimeDataListSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<32,19,1>;

class XeSqlPkg::hadr_wsfc_change_notifier_event_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1980[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int notify_typeOffset;
    /* 0x0000 */ const int notify_keyOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<96,11,1>;

struct Pow<10,3>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<8,19,1>;

struct CLUSPROP_ULARGE_INTEGER
{
  /* 0x0000 */ long Padding_1981[2];
  /* 0x0008 */ union _ULARGE_INTEGER li;
}; /* size: 0x0010 */

class TObjectPool<TMRUContainer<SystemThread,0>,ObjectPoolSLock>;

struct DbtIoListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<270,1,1>;

class XeSqlPkg::query_rx_receive_buffers
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1982[143];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int is_eosOffset;
    /* 0x0000 */ const int rowsOffset;
    /* 0x0000 */ const int eos_countOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0021 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<184,3,1>;

class SpinlockHolder<274,4,1>;

class IndirectType<void>
{
}; /* size: 0x0001 */

class XeSqlPkg::hadr_apply_log_block
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1983[140];
      /* 0x0240 */ unsigned char m_buf[30];
    }; /* size: 0x002e */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int log_block_sizeOffset;
    /* 0x0000 */ const int log_block_acknowledgment_sequenceOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int database_replica_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class Spinlock<320,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::database_mirroring_state_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1984[140];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int new_stateOffset;
    /* 0x0000 */ const int prior_stateOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int state_change_descOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class SpinlockHolder<49,18,1>;

class XeSqlPkg::database_segment_all_files_create
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1985[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::checkpoint_db_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1986[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int message_opcodeOffset;
    /* 0x0000 */ const int time_frameOffset;
    /* 0x0000 */ const int truncate_logOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

class Spinlock<266,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::drop_file_prepared
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1987[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class UnsafeCallbackTraits<TCallback<void,SchedulerMonitor::Track const *,NullType,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

class XeSqlPkg::thread_cache_remote_context_setup
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1988[143];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x000d */
    /* 0x0000 */ const int setup_typeOffset;
    /* 0x0000 */ const int last_session_idOffset;
  }; /* size: 0x000d */
}; /* size: 0x0250 */

class AutoSpinlockHolder<224,2,1>;

struct ReplLogReaderPerDbHistoryCacheSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::commit_tran_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1989[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int new_transaction_startedOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x01c0 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<10,19,1>;

class AutoSpinlockHolder<150,4,1>;

struct _HNODEENUM;

class AutoSpinlockHolder<215,2,1>;

struct IRowsetInfo
{
}; /* size: 0x0008 */

class SpinlockHolder<13,19,1>;

class SpinlockHolder<225,2,1>;

class AutoSpinlockHolder<241,1,1>;

typedef struct _SERVER_INFO_1581
{
  /* 0x0000 */ unsigned long sv1581_maxfreemlcbs;
} SERVER_INFO_1581, *PSERVER_INFO_1581; /* size: 0x0004 */

struct SEReplCSNDBTSSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_partner_set_sync_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1990[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int commit_policyOffset;
    /* 0x0000 */ const int commit_policy_targetOffset;
    /* 0x0000 */ const int sync_stateOffset;
    /* 0x0000 */ const int sync_log_blockOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class TimePriv
{
  union
  {
    /* 0x0000 */ int sm_failureDuringInit;
    /* 0x0000 */ unsigned long sm_TimePeriodMin;
    /* 0x0000 */ int sm_TimePeriodSet;
    /* 0x0000 */ class SOS_Mutex sm_TimePeriodMutex;
  }; /* size: 0x0030 */
}; /* size: 0x0001 */

class AutoSpinlockHolder<2,19,1>;

class Spinlock<225,2,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<21,19,1>;

struct DbSeedingOpSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_db_startdb
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1991[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_acceptOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<256,1,1>;

struct XcbFreelistSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::dq_session_cache_insert
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1992[143];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x003c */
    /* 0x0000 */ const int remote_server_idOffset;
    /* 0x0000 */ const int user_idOffset;
    /* 0x0000 */ const int nt_user_idOffset;
    /* 0x0000 */ const int provider_string_openrowsetOffset;
    /* 0x0000 */ const int datasource_openrowsetOffset;
    /* 0x0000 */ const int location_openrowsetOffset;
    /* 0x0000 */ const int catalog_openrowsetOffset;
  }; /* size: 0x003c */
}; /* size: 0x0278 */

class AutoSpinlockHolder<172,3,1>;

class XeSqlPkg::query_memory_return_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1993[143];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int actual_memory_grantOffset;
    /* 0x0000 */ const int exchange_required_memoryOffset;
    /* 0x0000 */ const int max_query_memory_usedOffset;
    /* 0x0000 */ const int max_exchange_memory_usedOffset;
    /* 0x0000 */ const int max_misc_memory_usedOffset;
    /* 0x0000 */ const int max_misc_grantsOffset;
  }; /* size: 0x0034 */
}; /* size: 0x0270 */

class XeSqlPkg::dbtable_initialize
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1994[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::broker_transmission_object_worktable_save_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_1995[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class AutoSpinlockHolder<268,1,1>;

class SpinlockHolder<327,1,1>;

class XeSqlPkg::column_store_filters_pushdown
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_1996[143];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x000d */
    /* 0x0000 */ const int filter_list_overflowOffset;
    /* 0x0000 */ const int filter_listOffset;
  }; /* size: 0x000d */
}; /* size: 0x0250 */

typedef struct _PDH_LOG_SERVICE_QUERY_INFO_A
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwLogQuota;
  /* 0x000c */ long Padding_1997;
  /* 0x0010 */ char* szLogFileCaption;
  /* 0x0018 */ char* szDefaultDir;
  /* 0x0020 */ char* szBaseFileName;
  /* 0x0028 */ unsigned long dwFileType;
  /* 0x002c */ unsigned long dwReserved;
  union
  {
    struct
    {
      /* 0x0030 */ unsigned long PdlAutoNameInterval;
      /* 0x0034 */ unsigned long PdlAutoNameUnits;
      /* 0x0038 */ char* PdlCommandFilename;
      /* 0x0040 */ char* PdlCounterList;
      /* 0x0048 */ unsigned long PdlAutoNameFormat;
      /* 0x004c */ unsigned long PdlSampleInterval;
      /* 0x0050 */ struct _FILETIME PdlLogStartTime;
      /* 0x0058 */ struct _FILETIME PdlLogEndTime;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x0030 */ unsigned long TlNumberOfBuffers;
      /* 0x0034 */ unsigned long TlMinimumBuffers;
      /* 0x0038 */ unsigned long TlMaximumBuffers;
      /* 0x003c */ unsigned long TlFreeBuffers;
      /* 0x0040 */ unsigned long TlBufferSize;
      /* 0x0044 */ unsigned long TlEventsLost;
      /* 0x0048 */ unsigned long TlLoggerThreadId;
      /* 0x004c */ unsigned long TlBuffersWritten;
      /* 0x0050 */ unsigned long TlLogHandle;
      /* 0x0054 */ long Padding_1998;
      /* 0x0058 */ char* TlLogFileName;
    }; /* size: 0x002c */
  }; /* size: 0x0030 */
} PDH_LOG_SERVICE_QUERY_INFO_A, *PPDH_LOG_SERVICE_QUERY_INFO_A; /* size: 0x0060 */

class SpinlockHolder<149,4,1>;

class Spinlock<75,16,1>
{
}; /* size: 0x0004 */

struct KtmEnlistmentSLock
{
}; /* size: 0x0004 */

class Spinlock<276,1,1>
{
}; /* size: 0x0004 */

typedef struct _RTL_RB_TREE
{
  /* 0x0000 */ struct _RTL_BALANCED_NODE* Root;
  /* 0x0008 */ struct _RTL_BALANCED_NODE* Min;
} RTL_RB_TREE, *PRTL_RB_TREE; /* size: 0x0010 */

typedef struct _FILE_MAILSLOT_SET_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER* ReadTimeout;
} FILE_MAILSLOT_SET_INFORMATION, *PFILE_MAILSLOT_SET_INFORMATION; /* size: 0x0008 */

class SEList<TCallback<void,__int64 const ,ResourceClerk const *,SchedulerMonitor::Track const *,NullType>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

typedef struct _VM_COUNTERS
{
  /* 0x0000 */ unsigned __int64 PeakVirtualSize;
  /* 0x0008 */ unsigned __int64 VirtualSize;
  /* 0x0010 */ unsigned long PageFaultCount;
  /* 0x0014 */ long Padding_1999;
  /* 0x0018 */ unsigned __int64 PeakWorkingSetSize;
  /* 0x0020 */ unsigned __int64 WorkingSetSize;
  /* 0x0028 */ unsigned __int64 QuotaPeakPagedPoolUsage;
  /* 0x0030 */ unsigned __int64 QuotaPagedPoolUsage;
  /* 0x0038 */ unsigned __int64 QuotaPeakNonPagedPoolUsage;
  /* 0x0040 */ unsigned __int64 QuotaNonPagedPoolUsage;
  /* 0x0048 */ unsigned __int64 PagefileUsage;
  /* 0x0050 */ unsigned __int64 PeakPagefileUsage;
} VM_COUNTERS, *PVM_COUNTERS; /* size: 0x0058 */

class AutoSpinlockHolder<146,4,1>;

typedef struct _KEY_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0008 */ unsigned long TitleIndex;
  /* 0x000c */ unsigned long NameLength;
  /* 0x0010 */ wchar_t Name[1];
  /* 0x0012 */ char __PADDING__[6];
} KEY_BASIC_INFORMATION, *PKEY_BASIC_INFORMATION; /* size: 0x0018 */

class AutoSpinlockHolder<255,1,1>;

class AutoSpinlockHolder<12,19,1>;

class SOSHost_CallInternalTraits
{
}; /* size: 0x0001 */

class XeSqlPkg::iterator_hash_actual_memory
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2000[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int inputOffset;
    /* 0x0000 */ const int outputOffset;
    /* 0x0000 */ const int read_aheadOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class Spinlock<27,19,1>
{
}; /* size: 0x0004 */

typedef struct _SYSTEM_VERIFIER_INFORMATION_EX
{
  /* 0x0000 */ unsigned long VerifyMode;
  /* 0x0004 */ unsigned long OptionChanges;
  /* 0x0008 */ struct _UNICODE_STRING PreviousBucketName;
  /* 0x0018 */ unsigned long IrpCancelTimeoutMsec;
  /* 0x001c */ unsigned long VerifierExtensionEnabled;
  /* 0x0020 */ unsigned long Reserved[1];
  /* 0x0024 */ long __PADDING__[1];
} SYSTEM_VERIFIER_INFORMATION_EX, *PSYSTEM_VERIFIER_INFORMATION_EX; /* size: 0x0028 */

class AutoSpinlockHolder<60,16,1>;

typedef struct _REPARSE_INDEX_KEY
{
  /* 0x0000 */ unsigned long FileReparseTag;
  /* 0x0004 */ union _LARGE_INTEGER FileId;
} REPARSE_INDEX_KEY, *PREPARSE_INDEX_KEY; /* size: 0x000c */

class SpinlockHolder<307,1,1>;

class XeSqlPkg::query_optimizer_cardinality_estimation_step
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2001[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int calculatorOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct ISSResSLock
{
}; /* size: 0x0004 */

struct QueryExecStatsSLock
{
}; /* size: 0x0004 */

class Spinlock<125,7,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::recovery_target_reset
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2002[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int new_target_timeOffset;
    /* 0x0000 */ const int dirty_page_read_timeOffset;
    /* 0x0000 */ const int dirty_page_countOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSqlPkg::hadr_cannot_create_listener
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2003[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int dns_nameOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class SpinlockHolder<316,1,1>;

class AutoSpinlockHolder<79,13,1>;

class XeSqlPkg::replica_create_wait_for_peers
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

struct LSSsyncDTCSLock
{
}; /* size: 0x0004 */

typedef struct _SERVER_INFO_1515
{
  /* 0x0000 */ int sv1515_enableforcedlogoff;
} SERVER_INFO_1515, *PSERVER_INFO_1515; /* size: 0x0004 */

class SpinlockHolder<135,4,1>;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class SpinlockHolder<123,7,1>;

class XeSqlPkg::lock_timeout_greater_than_0
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2004[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

class AutoSpinlockHolder<142,4,1>;

class Spinlock<277,1,1>
{
}; /* size: 0x0004 */

typedef struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ unsigned long Format;
  /* 0x000c */ long Padding_2005;
  /* 0x0010 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME Frame;
  /* 0x0028 */ void* Extra1;
  /* 0x0030 */ void* Extra2;
  /* 0x0038 */ void* Extra3;
  /* 0x0040 */ void* Extra4;
} RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED, *PRTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_EXTENDED; /* size: 0x0048 */

typedef struct _SHARE_INFO_1
{
  /* 0x0000 */ wchar_t* shi1_netname;
  /* 0x0008 */ unsigned long shi1_type;
  /* 0x000c */ long Padding_2006;
  /* 0x0010 */ wchar_t* shi1_remark;
} SHARE_INFO_1, *PSHARE_INFO_1; /* size: 0x0018 */

struct Pow<10,1>
{
}; /* size: 0x0001 */

struct DbccInpBuffSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::promote_tran_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2007[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int dtc_trasaction_tokenOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef struct _RC_CONFIG
{
  /* 0x0000 */ unsigned long dwSignature;
  /* 0x0004 */ unsigned long dwLength;
  /* 0x0008 */ unsigned long dwRCConfigVersion;
  /* 0x000c */ unsigned long dwFilePathType;
  /* 0x0010 */ unsigned long dwFileType;
  /* 0x0014 */ unsigned long dwSystemAttributes;
  /* 0x0018 */ unsigned long dwUltimateFallbackLocation;
  /* 0x001c */ unsigned long dwServiceCheckSum[4];
  /* 0x002c */ unsigned long dwChecksum[4];
  /* 0x003c */ unsigned long dwReserved1;
  /* 0x0040 */ unsigned long dwReserved2;
  /* 0x0044 */ unsigned long dwMUIFileNameOffset;
  /* 0x0048 */ unsigned long dwMUIFileNameLength;
  /* 0x004c */ unsigned long dwMUIFilePathOffset;
  /* 0x0050 */ unsigned long dwMUIFilePathLength;
  /* 0x0054 */ unsigned long dwMainResNameTypesOffset;
  /* 0x0058 */ unsigned long dwMainResNameTypesLength;
  /* 0x005c */ unsigned long dwMainResIDTypesOffset;
  /* 0x0060 */ unsigned long dwMainResIDTypesLength;
  /* 0x0064 */ unsigned long dwMUIResNameTypesOffset;
  /* 0x0068 */ unsigned long dwMUIResNameTypesLength;
  /* 0x006c */ unsigned long dwMUIResIDTypesOffset;
  /* 0x0070 */ unsigned long dwMUIResIDTypesLength;
  /* 0x0074 */ unsigned long dwLanguageOffset;
  /* 0x0078 */ unsigned long dwLanguageLength;
  /* 0x007c */ unsigned long dwUltimateFallbackLanguageOffset;
  /* 0x0080 */ unsigned long dwUltimateFallbackLanguageLength;
} RC_CONFIG, *PRC_CONFIG; /* size: 0x0084 */

struct StackHasherSLock
{
}; /* size: 0x0004 */

struct Pow<10,2>
{
}; /* size: 0x0001 */

class SEListEnum<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,unsigned long *,SOS_Scheduler * const,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class XeSqlPkg::query_rpc_switch_partition
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2008[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::fulltext_query_translator
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2009[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int query_textOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::query_driver_received_statistics_profile
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2010[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

struct HeartbeatDispatchSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_prepare_cmd_delete_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class AutoSpinlockHolder<4,19,1>;

class XeSqlPkg::log_buffer_allocated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2011[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int current_countOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::broker_transmission_deliverysm_action_fire
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2012[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType> >,void,unsigned short,unsigned int,SchedulerMonitor::ProcessTrack const *,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class XeGDMPkg::gdma_transaction_local_state_reply_ready
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2013[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int transaction_local_state_descriptor_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class Spinlock<177,3,1>
{
}; /* size: 0x0004 */

class Spinlock<274,4,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_db_manager_db_shutdown
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2014[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int flushed_logOffset;
    /* 0x0000 */ const int end_of_logOffset;
    /* 0x0000 */ const int clean_shutdownOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

class XeSqlPkg::glm_local_brick_acquire_response
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2015[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int lock_resultOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_normal_cycle_early_termination
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2016[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int termination_causeOffset;
    /* 0x0000 */ const int last_completed_stepOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class AutoSpinlockHolder<186,3,1>;

struct FsChunkerSLock
{
}; /* size: 0x0004 */

class Spinlock<227,2,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::delete_or_mark_file
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2017[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::redo_stop_clear
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2018[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class TChildEnumerator<GlobalNodeEnum,SOS_Node,TEnumerator<TList<SOS_Node,SOS_DispatcherPoolBase,8,TListSLock> >,SOS_DispatcherPoolBase>;

class SpinlockHolder<35,19,1>;

class XeSqlPkg::read_only_route_fail
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class SpinlockHolder<313,1,1>;

struct _HNETINTERFACE;

class CAutoRefc<XList<SOS_DispatcherBase> >
{
  /* 0x0000 */ class XList<SOS_DispatcherBase>* m_pt;
}; /* size: 0x0008 */

class AutoSpinlockHolder<92,11,1>;

class XeSqlPkg::query_rpc_process_cmd_set_range
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class AutoSpinlockHolder<126,7,1>;

class AutoSpinlockHolder<149,4,1>;

class SpinlockHolder<162,3,1>;

typedef struct _STRING32
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ unsigned long Buffer;
} STRING32, *PSTRING32; /* size: 0x0008 */

class AutoSpinlockHolder<208,3,1>;

typedef struct _PDH_LOG_SERVICE_QUERY_INFO_W
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwFlags;
  /* 0x0008 */ unsigned long dwLogQuota;
  /* 0x000c */ long Padding_2019;
  /* 0x0010 */ wchar_t* szLogFileCaption;
  /* 0x0018 */ wchar_t* szDefaultDir;
  /* 0x0020 */ wchar_t* szBaseFileName;
  /* 0x0028 */ unsigned long dwFileType;
  /* 0x002c */ unsigned long dwReserved;
  union
  {
    struct
    {
      /* 0x0030 */ unsigned long PdlAutoNameInterval;
      /* 0x0034 */ unsigned long PdlAutoNameUnits;
      /* 0x0038 */ wchar_t* PdlCommandFilename;
      /* 0x0040 */ wchar_t* PdlCounterList;
      /* 0x0048 */ unsigned long PdlAutoNameFormat;
      /* 0x004c */ unsigned long PdlSampleInterval;
      /* 0x0050 */ struct _FILETIME PdlLogStartTime;
      /* 0x0058 */ struct _FILETIME PdlLogEndTime;
    }; /* size: 0x0030 */
    struct
    {
      /* 0x0030 */ unsigned long TlNumberOfBuffers;
      /* 0x0034 */ unsigned long TlMinimumBuffers;
      /* 0x0038 */ unsigned long TlMaximumBuffers;
      /* 0x003c */ unsigned long TlFreeBuffers;
      /* 0x0040 */ unsigned long TlBufferSize;
      /* 0x0044 */ unsigned long TlEventsLost;
      /* 0x0048 */ unsigned long TlLoggerThreadId;
      /* 0x004c */ unsigned long TlBuffersWritten;
      /* 0x0050 */ unsigned long TlLogHandle;
      /* 0x0054 */ long Padding_2020;
      /* 0x0058 */ wchar_t* TlLogFileName;
    }; /* size: 0x002c */
  }; /* size: 0x0030 */
} PDH_LOG_SERVICE_QUERY_INFO_W, *PPDH_LOG_SERVICE_QUERY_INFO_W; /* size: 0x0060 */

class XeSqlPkg::process_killed_by_abort_blockers
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2021[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int killed_process_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

typedef struct _LDR_DATA_TABLE_ENTRY32
{
  /* 0x0000 */ struct LIST_ENTRY32 InLoadOrderLinks;
  /* 0x0008 */ struct LIST_ENTRY32 InMemoryOrderLinks;
  /* 0x0010 */ struct LIST_ENTRY32 InInitializationOrderLinks;
  /* 0x0018 */ unsigned long DllBase;
  /* 0x001c */ unsigned long EntryPoint;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ struct _STRING32 FullDllName;
  /* 0x002c */ struct _STRING32 BaseDllName;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ unsigned short LoadCount;
  /* 0x003a */ unsigned short TlsIndex;
  union
  {
    /* 0x003c */ struct LIST_ENTRY32 HashLinks;
    struct
    {
      /* 0x003c */ unsigned long SectionPointer;
      /* 0x0040 */ unsigned long CheckSum;
    }; /* size: 0x0008 */
  }; /* size: 0x0008 */
  union
  {
    /* 0x0044 */ unsigned long TimeDateStamp;
    /* 0x0044 */ unsigned long LoadedImports;
  }; /* size: 0x0004 */
} LDR_DATA_TABLE_ENTRY32, *PLDR_DATA_TABLE_ENTRY32; /* size: 0x0048 */

class Spinlock<285,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::modify_file_operation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2022[143];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int is_log_fileOffset;
    /* 0x0000 */ const int modification_typeOffset;
    /* 0x0000 */ const int new_valueOffset;
    /* 0x0000 */ const int is_growth_by_percentageOffset;
  }; /* size: 0x001a */
}; /* size: 0x0258 */

class SpinlockHolder<294,1,1>;

class XeSqlPkg::error_reported
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2023[140];
      /* 0x0240 */ unsigned char m_buf[27];
    }; /* size: 0x002b */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int user_definedOffset;
    /* 0x0000 */ const int categoryOffset;
    /* 0x0000 */ const int destinationOffset;
    /* 0x0000 */ const int is_interceptedOffset;
    /* 0x0000 */ const int messageOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0260 */

class Spinlock<33,19,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_process_cmd_prepare_to_delete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2024[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int rowOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::broker_queue_disabled
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2025[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int queue_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0198 */
}; /* size: 0x0250 */

class Spinlock<298,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::sp_server_diagnostics_component_result
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2026[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int componentOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int dataOffset;
  }; /* size: 0x0198 */
}; /* size: 0x0250 */

class Spinlock<258,1,1>
{
}; /* size: 0x0004 */

struct TransportMessageQueueSLock
{
}; /* size: 0x0004 */

class ReduceTypeList<TypeList<ExtIntCodeProtector<1>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType> >
{
}; /* size: 0x0001 */

class XeSqlPkg::mbr_outcome_resolution
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2027[143];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x001d */
    /* 0x0000 */ const int federated_xact_idOffset;
    /* 0x0000 */ const int federated_xact_node_idOffset;
    /* 0x0000 */ const int federated_xact_node_local_idOffset;
    /* 0x0000 */ const int is_committedOffset;
    /* 0x0000 */ const int age_valueOffset;
  }; /* size: 0x001d */
}; /* size: 0x0260 */

class Spinlock<35,19,1>
{
}; /* size: 0x0004 */

typedef struct _SL_KMEM_CACHE
{
  /* 0x0000 */ unsigned long TotalSize;
  /* 0x0004 */ unsigned long SizeOfData;
  /* 0x0008 */ unsigned long SignatureSize;
  /* 0x000c */ unsigned long Flags;
  /* 0x0010 */ unsigned long Version;
  /* 0x0014 */ struct _SL_KMEM_CACHE_VALUE_DESCRIPTOR Descriptors[1];
} SL_KMEM_CACHE, *PSL_KMEM_CACHE; /* size: 0x0028 */

struct OneProcSimReplicaContextSLock
{
}; /* size: 0x0004 */

struct XE_TypeTraits<XEMap>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class XeSqlPkg::metadata_persist_last_value_for_sequence
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2028[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int persisted_valueOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class Spinlock<311,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::dq_session_cache_hit
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2029[143];
      /* 0x0240 */ unsigned char m_buf[72];
    }; /* size: 0x004c */
    /* 0x0000 */ const int remote_server_idOffset;
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int user_idOffset;
    /* 0x0000 */ const int nt_user_idOffset;
    /* 0x0000 */ const int provider_string_openrowsetOffset;
    /* 0x0000 */ const int datasource_openrowsetOffset;
    /* 0x0000 */ const int location_openrowsetOffset;
    /* 0x0000 */ const int catalog_openrowsetOffset;
  }; /* size: 0x004c */
}; /* size: 0x0288 */

class Spinlock<77,14,1>
{
}; /* size: 0x0004 */

class SpinlockHolder<106,9,1>;

class SpinlockHolder<16,19,1>;

class XeSqlPkg::collect_all_ExecUdxDataAccess
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2030[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

class XeSqlPkg::collect_all_GetRow
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2031[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

class SpinlockHolder<172,3,1>;

class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SystemAffinity,SystemAffinity,NullType> >
{
}; /* size: 0x0030 */

class TCallbackListBase<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >
{
}; /* size: 0x0010 */

class XeSqlPkg::rollback_tran_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2032[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int new_transaction_startedOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x01c0 */
}; /* size: 0x0250 */

class SpinlockHolder<298,1,1>;

class XeSqlPkg::parallel_scan_wait_for_work
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2033[143];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int worker_idOffset;
  }; /* size: 0x0034 */
}; /* size: 0x0270 */

class SpinlockHolder<220,2,1>;

class AutoSpinlockHolder<212,2,1>;

class AutoSpinlockHolder<121,8,1>;

class AutoSpinlockHolder<118,8,1>;

class XeSqlPkg::xfcb_write_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2034[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int file_byte_offsetOffset;
    /* 0x0000 */ const int file_byte_countOffset;
    /* 0x0000 */ const int bytes_writtenOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class TypeListNode<__int64 const ,TypeListNode<ResourceClerk const *,TypeListNode<SchedulerMonitor::Track const *,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class SpinlockHolder<40,18,1>;

class IExecSql
{
}; /* size: 0x0008 */

class XeSqlPkg::sp_server_diagnostics_result_set
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2035[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int interval_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct SOS_PhysPageCacheSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::metadata_unlock_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2036[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class SOS_TRingBufferRecordEnum<SOS_GlobalMemoryRecord>;

class SpinlockHolder<69,16,1>;

class XeSqlPkg::dyn_throttle_checkpoint
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2037[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int average_throughputOffset;
    /* 0x0000 */ const int average_writes_per_secondOffset;
    /* 0x0000 */ const int checkpoint_rate_mbOffset;
    /* 0x0000 */ const int checkpoint_rate_iopsOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int checkpoint_durationOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::database_startup_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2038[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,SOS_Task *,NullType,NullType,NullType> >,void,SOS_Task *,NullType,NullType,NullType>::ArgCountDiscriminator<1>::FuncPtr<void,SOS_Task *,NullType,NullType,NullType>
{
}; /* size: 0x0001 */

class AutoSpinlockHolder<41,1,1>;

class AutoSpinlockHolder<183,3,1>;

class XeSqlPkg::bad_memory_detected
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2039[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int bad_page_countOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class SpinlockHolder<199,3,1>;

class XeSqlPkg::metadata_cache_flush
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2040[143];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cache_typeOffset;
    /* 0x0000 */ const int in_cacheOffset;
    /* 0x0000 */ const int aged_outOffset;
  }; /* size: 0x0012 */
}; /* size: 0x0250 */

class SpinlockHolder<51,17,1>;

class AutoSpinlockHolder<272,3,1>;

class XeSqlPkg::progress_report_online_index_operation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2041[140];
      /* 0x0240 */ unsigned char m_buf[73];
    }; /* size: 0x0059 */
    /* 0x0000 */ const int build_stageOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int partition_numberOffset;
    /* 0x0000 */ const int partition_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int rows_insertedOffset;
    /* 0x0000 */ const int parallel_process_thread_idOffset;
    /* 0x0000 */ const int index_nameOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0300 */
}; /* size: 0x0290 */

struct OnDemandTaskSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::metadata_cache_add
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2042[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cache_typeOffset;
    /* 0x0000 */ const int keyOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

struct FileHandleCacheSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::matrix_unsupported_feature
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2043[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int line_noOffset;
    /* 0x0000 */ const int feature_idOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class SpinlockHolder<22,19,1>;

struct Pow<10,0>
{
}; /* size: 0x0001 */

class XeSqlPkg::broker_transmission_object_delete_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2044[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

struct SubpDescListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<286,1,1>;

class XeSqlPkg::recovery_simple_log_truncate
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2045[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class Spinlock<31,19,1>
{
}; /* size: 0x0004 */

struct FreeSpaceCacheEntrySLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<244,1,1>;

class XeSqlPkg::latch_acquired
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2046[143];
      /* 0x0240 */ unsigned char m_buf[49];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0035 */
}; /* size: 0x0278 */

class AutoSpinlockHolder<6,19,1>;

class SpinlockHolder<115,8,1>;

class SpinlockHolder<262,1,1>;

class SpinlockHolder<158,3,1>;

class IndirectType<Worker>
{
}; /* size: 0x0001 */

class XeSqlPkg::query_memory_buffer_pool_reserve
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2047[143];
      /* 0x0240 */ unsigned char m_buf[6];
    }; /* size: 0x000a */
    /* 0x0000 */ const int reserveOffset;
    /* 0x0000 */ const int releaseOffset;
    /* 0x0000 */ const int resultOffset;
  }; /* size: 0x000a */
}; /* size: 0x0248 */

struct DigestCacheSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<190,3,1>;

class XeSqlPkg::query_execution_batch_processing_hash_table_build
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2048[143];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x002d */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int query_thread_idOffset;
    /* 0x0000 */ const int hash_table_slice_countOffset;
    /* 0x0000 */ const int bucket_count_per_hash_table_sliceOffset;
    /* 0x0000 */ const int bucket_size_bytesOffset;
    /* 0x0000 */ const int overflow_pages_countOffset;
    /* 0x0000 */ const int hash_table_slices_builtOffset;
    /* 0x0000 */ const int is_small_hash_tableOffset;
  }; /* size: 0x002d */
}; /* size: 0x0270 */

class XeSqlPkg::glm_local_brick_acquire_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2049[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct MatrixMCISLock
{
}; /* size: 0x0004 */

struct CacheObjDbgSLock
{
}; /* size: 0x0004 */

class EmptyCallTraits
{
}; /* size: 0x0001 */

class SpinlockHolder<306,1,1>;

class Spinlock<0,19,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::cursor_prepare
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2050[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int protocol_execution_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct XactWorkspaceSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::buffer_pool_extension_pages_written
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2051[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int first_page_file_idOffset;
    /* 0x0000 */ const int first_page_idOffset;
    /* 0x0000 */ const int page_file_offsetOffset;
    /* 0x0000 */ const int numa_node_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,TListSLock,SOSCallbackEvent,void *,SOS_Node *,unsigned __int64,unsigned __int64> >
{
}; /* size: 0x0030 */

class SpinlockHolder<333,0,1>;

class AutoSpinlockHolder<231,2,1>;

class XeSqlPkg::file_handle_in_use
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2052[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int win32errorOffset;
    /* 0x0000 */ const int file_nameOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<49,18,1>;

class SpinlockHolder<227,2,1>;

class AutoSpinlockHolder<139,4,1>;

class XeSqlPkg::ghost_cleanup_task_suspend
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2053[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int page_packets_queuedOffset;
    /* 0x0000 */ const int page_packets_processedOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::database_segment_local_creation_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2054[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class SpinlockHolder<230,1,1>;

class AutoSpinlockHolder<144,4,1>;

class XeSqlPkg::availability_replica_automatic_failover_validation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2055[140];
      /* 0x0240 */ unsigned char m_buf[35];
    }; /* size: 0x0033 */
    /* 0x0000 */ const int forced_quorumOffset;
    /* 0x0000 */ const int joined_and_synchronizedOffset;
    /* 0x0000 */ const int previous_primary_or_automatic_failover_targetOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_group_nameOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
    /* 0x0000 */ const int availability_replica_nameOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class AutoSpinlockHolder<250,1,1>;

class XeSqlPkg::metadata_add_segmentid
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2056[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int index_nameOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

struct AbrSLock
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<89,12,1>;

class SpinlockHolder<308,1,1>;

class SpinlockHolder<213,2,1>;

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>
{
  /* 0x0000 */ long Padding_2057[4];
  /* 0x0010 */ void* m_pfn /* function */;
}; /* size: 0x0018 */

class XeSqlPkg::query_rpc_server_recvrequest
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2058[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int source_brick_idOffset;
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int use_cacheOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_send_harden_lsn_message
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2059[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int hardened_lsnOffset;
    /* 0x0000 */ const int hadr_database_idOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class TCallbackBase<UnsafeCallbackTraits<TCallback<void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType> >,void,MemoryUtilizationInfo const * const,enum MemoryUtilizationEffects::Effects,MemoryUtilizationEffects::EffectInfo const * const,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class SpinlockHolder<32,19,1>;

class AutoSpinlockHolder<103,10,1>;

class TCallbackListBase<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >
{
}; /* size: 0x0010 */

class XeSqlPkg::hadr_xrf_deleteRecLsn_beforeEntry
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2060[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int dbIdOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::broker_active_service_broker_addasb
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2061[143];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int new_dbidOffset;
    /* 0x0000 */ const int new_enabledOffset;
    /* 0x0000 */ const int existing_dbidOffset;
    /* 0x0000 */ const int existing_enabledOffset;
    /* 0x0000 */ const int new_dbnameOffset;
    /* 0x0000 */ const int existing_dbnameOffset;
    /* 0x0000 */ const int broker_guidOffset;
  }; /* size: 0x0026 */
}; /* size: 0x0268 */

class XeSqlPkg::query_driver_received_activation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2062[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

struct FIND_BY_SID_DATA
{
  /* 0x0000 */ unsigned long Restart;
  /* 0x0004 */ struct _SID Sid;
}; /* size: 0x0010 */

class XeSqlPkg::hekaton_search_key_event
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2063[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int key_dataOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::file_write_throttled
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2064[140];
      /* 0x0240 */ unsigned char m_buf[53];
    }; /* size: 0x0045 */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int is_volume_limit_hitOffset;
    /* 0x0000 */ const int pathOffset;
    /* 0x0000 */ const int io_dataOffset;
  }; /* size: 0x02e8 */
}; /* size: 0x0278 */

class XeSqlPkg::xfcb_blob_properties_obtained
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2065[140];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0032 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int lease_stateOffset;
    /* 0x0000 */ const int blob_sizeOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
    /* 0x0000 */ const int instance_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class SpinlockHolder<50,17,1>;

class XeSqlPkg::query_execution_spool_open
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2066[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int is_primaryOffset;
    /* 0x0000 */ const int is_hybridOffset;
    /* 0x0000 */ const int is_segmentOffset;
    /* 0x0000 */ const int is_multiparentOffset;
    /* 0x0000 */ const int is_eagerOffset;
    /* 0x0000 */ const int is_stackOffset;
    /* 0x0000 */ const int keep_workfile_aroundOffset;
    /* 0x0000 */ const int is_index_on_the_flyOffset;
    /* 0x0000 */ const int is_index_cacheOffset;
    /* 0x0000 */ const int has_one_row_optimizationOffset;
    /* 0x0000 */ const int support_large_objectsOffset;
    /* 0x0000 */ const int prefetch_large_objectsOffset;
    /* 0x0000 */ const int is_top_oneOffset;
    /* 0x0000 */ const int is_parallelOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

struct LsidSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<180,3,1>;

class SpinlockHolder<164,3,1>;

class XeSqlPkg::broker_transmission_object_worktable_load_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2067[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int resultOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class SpinlockHolder<206,3,1>;

class XeSqlPkg::ghost_cleanup_task_process_pages_for_db_packet
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2068[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int first_ghost_page_file_idOffset;
    /* 0x0000 */ const int first_ghost_page_page_idOffset;
    /* 0x0000 */ const int last_ghost_page_file_idOffset;
    /* 0x0000 */ const int last_ghost_page_page_idOffset;
    /* 0x0000 */ const int ghost_page_countOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0258 */

class AutoSpinlockHolder<218,2,1>;

class XeSqlPkg::login
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2069[140];
      /* 0x0240 */ unsigned char m_buf[35];
    }; /* size: 0x0033 */
    /* 0x0000 */ const int is_cachedOffset;
    /* 0x0000 */ const int is_recoveredOffset;
    /* 0x0000 */ const int is_dacOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int packet_sizeOffset;
    /* 0x0000 */ const int optionsOffset;
    /* 0x0000 */ const int options_textOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0298 */
}; /* size: 0x0268 */

class XeSqlPkg::inaccurate_cardinality_estimate
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2070[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int estimated_rowsOffset;
    /* 0x0000 */ const int actual_rowsOffset;
    /* 0x0000 */ const int fire_countOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

struct TransportWorkerSLock
{
}; /* size: 0x0004 */

class ErrorStringHolder
{
  /* 0x0000 */ wchar_t wszErrorString[2048];
}; /* size: 0x1000 */

class AutoSpinlockHolder<189,3,1>;

class XeSqlPkg::oledb_data_read
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2071[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int linked_server_nameOffset;
    /* 0x0000 */ const int provider_nameOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int parametersOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

class AutoSpinlockHolder<82,13,1>;

struct XE_TypeTraits<XEAction>
{
  /* 0x0000 */ enum XEObjectType sm_type;
  /* 0x0004 */ char __PADDING__[4294967293];
}; /* size: 0x0001 */

class XeSqlPkg::rpc_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,3,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2072[140];
      /* 0x0240 */ unsigned char m_buf[82];
    }; /* size: 0x0062 */
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
    /* 0x0000 */ const int resultOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int connection_reset_optionOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
    /* 0x0000 */ const int data_streamOffset;
    /* 0x0000 */ const int output_parametersOffset;
  }; /* size: 0x0370 */
}; /* size: 0x0298 */

class Spinlock<38,18,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::optimizer_timeout
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2073[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int timeout_typeOffset;
    /* 0x0000 */ const int optimizer_timeout_task_numberOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<141,4,1>;

class AutoSpinlockHolder<159,3,1>;

class SpinlockHolder<12,19,1>;

class TypeListSize<TypeListNode<SOS_DispatcherBase const * const,TypeListNode<NullType,TypeListNode<NullType,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

class XeSqlPkg::queryvm_context_shipping
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2074[143];
      /* 0x0240 */ unsigned char m_buf[196];
    }; /* size: 0x00c8 */
    /* 0x0000 */ const int dump_pointOffset;
    /* 0x0000 */ const int remote_exchange_node_idOffset;
    /* 0x0000 */ const int remote_exchange_thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int context_sessionidOffset;
    /* 0x0000 */ const int context_sessiontokenOffset;
    /* 0x0000 */ const int context_brickgenerationidOffset;
    /* 0x0000 */ const int context_issysadminOffset;
    /* 0x0000 */ const int context_isdacOffset;
    /* 0x0000 */ const int context_dbcompatlevelOffset;
    /* 0x0000 */ const int context_schidprocpcpOffset;
    /* 0x0000 */ const int context_objidprocpcpOffset;
    /* 0x0000 */ const int context_dbidprocpcpOffset;
    /* 0x0000 */ const int context_dbsoOffset;
    /* 0x0000 */ const int context_dbso_useropt1Offset;
    /* 0x0000 */ const int context_dbso_useropt2Offset;
    /* 0x0000 */ const int context_dbso_useropt1setmaskOffset;
    /* 0x0000 */ const int context_dbso_idtinsert_objidOffset;
    /* 0x0000 */ const int context_dbso_idtinsert_stateOffset;
    /* 0x0000 */ const int context_dbso_idtinsert_dbidOffset;
    /* 0x0000 */ const int context_dbso_rowcntOffset;
    /* 0x0000 */ const int context_dbso_statlistOffset;
    /* 0x0000 */ const int context_dbso_textsizeOffset;
    /* 0x0000 */ const int context_dbso_offsetsOffset;
    /* 0x0000 */ const int context_dbso_locktimeoutOffset;
    /* 0x0000 */ const int context_dbso_querygovOffset;
    /* 0x0000 */ const int context_dbso_dtfmtOffset;
    /* 0x0000 */ const int context_dbso_daydatefirstOffset;
    /* 0x0000 */ const int context_dbso_ddlckpriOffset;
    /* 0x0000 */ const int context_dbso_isolvlOffset;
    /* 0x0000 */ const int context_dbso_fipsflagOffset;
    /* 0x0000 */ const int context_dbso_langidOffset;
  }; /* size: 0x00c8 */
}; /* size: 0x0308 */

class AutoSpinlockHolder<292,1,1>;

struct MissingIndexStatsIdSLock
{
}; /* size: 0x0004 */

class UnfairRecursiveMutexInternal<SuspendQueueSLock,1>;

class XeSqlPkg::xtp_offline_checkpoint_scan_stop
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2075[140];
      /* 0x0240 */ unsigned char m_buf[2];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

struct SetRangeSyncSLock
{
}; /* size: 0x0004 */

class SOS_TRingBufferRecordEnum<SOS_SchedulerRingRecord>;

class SpinlockHolder<71,16,1>;

class XeSqlPkg::remote_dmv_stream_runtime_cache_added
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2076[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::glm_primary_brick_acquire_response
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2077[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int lock_resultOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class AutoSpinlockHolder<115,8,1>;

class SpinlockHolder<267,1,1>;

class UnsafeCallbackTraits<TCallback<void,int *,NullType,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

typedef struct _RTC_framedesc
{
  /* 0x0000 */ int varCount;
  /* 0x0004 */ long Padding_2078;
  /* 0x0008 */ struct _RTC_vardesc* variables;
} RTC_framedesc, *PRTC_framedesc; /* size: 0x0010 */

typedef struct _RTC_vardesc
{
  /* 0x0000 */ int addr;
  /* 0x0004 */ int size;
  /* 0x0008 */ char* name;
} RTC_vardesc, *PRTC_vardesc; /* size: 0x0010 */

class SpinlockHolder<304,1,1>;

class SpinlockHolder<209,3,1>;

struct MDChangeNotificationSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_filestream_undo_inplace_update
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2079[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int root_idOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class AutoSpinlockHolder<289,1,1>;

class XeSqlPkg::cursor_close
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2080[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int protocol_execution_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class Spinlock<312,1,1>
{
}; /* size: 0x0004 */

class XeSqlPkg::query_rpc_prepare_cmd_fetch_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2081[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

struct ADBCacheListSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<44,18,1>;

class XeSqlPkg::hadr_filestream_corrupt_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2082[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_messageOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct BufHashSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::hadr_ddl_failover_execution_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2083[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int current_stateOffset;
    /* 0x0000 */ const int ag_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

struct HadrFabricFactorySLock
{
}; /* size: 0x0004 */

struct QueryStorePlanListSLock
{
}; /* size: 0x0004 */

class XeSqlPkg::all_files_created
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2084[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ union _LARGE_INTEGER CreationTime;
  /* 0x0010 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0018 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0020 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0038 */ unsigned long FileAttributes;
  /* 0x003c */ unsigned long FileNameLength;
  /* 0x0040 */ union _LARGE_INTEGER FileId;
  /* 0x0048 */ struct _GUID LockingTransactionId;
  /* 0x0058 */ unsigned long TxInfoFlags;
  /* 0x005c */ wchar_t FileName[1];
  /* 0x005e */ char __PADDING__[2];
} FILE_ID_GLOBAL_TX_DIR_INFORMATION, *PFILE_ID_GLOBAL_TX_DIR_INFORMATION; /* size: 0x0060 */

class Spinlock<162,3,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<160,3,1>;

class SpinlockHolder<43,18,1>;

class Spinlock<180,3,1>
{
}; /* size: 0x0004 */

class AutoSpinlockHolder<43,18,1>;

class ReturnValueHolder<void>
{
}; /* size: 0x0001 */

class Spinlock<66,16,1>
{
}; /* size: 0x0004 */

typedef struct _CM_ROM_BLOCK
{
  /* 0x0000 */ unsigned long Address;
  /* 0x0004 */ unsigned long Size;
} CM_ROM_BLOCK, *PCM_ROM_BLOCK; /* size: 0x0008 */

class UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >
{
}; /* size: 0x0001 */

typedef struct _FILE_ID_BOTH_DIR_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ union _LARGE_INTEGER CreationTime;
  /* 0x0010 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0018 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0020 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0038 */ unsigned long FileAttributes;
  /* 0x003c */ unsigned long FileNameLength;
  /* 0x0040 */ unsigned long EaSize;
  /* 0x0044 */ char ShortNameLength;
  /* 0x0045 */ char Padding_2085;
  /* 0x0046 */ wchar_t ShortName[12];
  /* 0x005e */ char Padding_2086[2];
  /* 0x0060 */ union _LARGE_INTEGER FileId;
  /* 0x0068 */ wchar_t FileName[1];
  /* 0x006a */ char __PADDING__[6];
} FILE_ID_BOTH_DIR_INFORMATION, *PFILE_ID_BOTH_DIR_INFORMATION; /* size: 0x0070 */

class UnsafeCallbackTraits<TCallback<void,SOS_Task *,SchedulerMonitor::Track const *,NullType,NullType> >::Elem
{
}; /* size: 0x0010 */

class SpinlockHolder<234,1,1>;

class AutoSpinlockHolder<303,1,1>;

class SpinlockHolder<188,3,1>;

class SpinlockHolder<269,1,1>;

struct LogPoolSharedCacheBufferSLock
{
}; /* size: 0x0004 */

typedef struct _MUTANT_OWNER_INFORMATION
{
  /* 0x0000 */ struct _CLIENT_ID ClientId;
} MUTANT_OWNER_INFORMATION, *PMUTANT_OWNER_INFORMATION; /* size: 0x0010 */

typedef struct _FILE_PREFETCH
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned __int64 Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH; /* size: 0x0010 */

class SpinlockHolder<148,4,1>;

typedef struct _ALPC_TOKEN_ATTR
{
  /* 0x0000 */ struct _LUID TokenId;
  /* 0x0008 */ struct _LUID AuthenticationId;
  /* 0x0010 */ struct _LUID ModifiedId;
} ALPC_TOKEN_ATTR, *PALPC_TOKEN_ATTR; /* size: 0x0018 */

class AutoSpinlockHolder<15,19,1>;

class SpinlockHolder<226,2,1>;

struct TransportSessionSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<207,3,1>;

struct FabricTvfLoadLibSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<90,12,1>;

typedef struct _SERVER_INFO_1550
{
  /* 0x0000 */ unsigned long sv1550_diskspacethreshold;
} SERVER_INFO_1550, *PSERVER_INFO_1550; /* size: 0x0004 */

class Spinlock<59,16,1>
{
}; /* size: 0x0004 */

typedef struct _JOBOBJECT_WAKE_FILTER
{
  /* 0x0000 */ unsigned long HighEdgeFilter;
  /* 0x0004 */ unsigned long LowEdgeFilter;
} JOBOBJECT_WAKE_FILTER, *PJOBOBJECT_WAKE_FILTER; /* size: 0x0008 */

struct MatrixMCIBatchOrderSLock
{
}; /* size: 0x0004 */

class SpinlockHolder<190,3,1>;

class AutoSpinlockHolder<330,1,1>;

class SEListEnum<TCallback<void,NullType,NullType,NullType,NullType>,0>
{
  /* 0x0000 */ class SEList<TCallback<void,NullType,NullType,NullType,NullType>,0>* m_pList;
  /* 0x0008 */ class TCallback<void,NullType,NullType,NullType,NullType>* m_pNext;
}; /* size: 0x0010 */

class AutoStateProtectors<SOSHost_CallInternalTraits>
{
  /* 0x0000 */ class AutoStateProtectors<SOSHost_CallInternalTraits>::ProtectorInitializer<SOSHost_CallInternalTraits> m_protectors;
  /* 0x0004 */ HRESULT m_hr;
  /* 0x0008 */ class SOS_StateProtectors<ExtIntCodeProtector<0>,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType,NullType>::AutoCallPrePost m_autoCall;
}; /* size: 0x0010 */

struct BitManipTraits<unsigned __int64,8>
{
}; /* size: 0x0001 */

typedef struct _FILE_END_OF_FILE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFORMATION, *PFILE_END_OF_FILE_INFORMATION; /* size: 0x0008 */

class AutoSpinlockHolder<237,1,1>
{
}; /* size: 0x0010 */

class SpinlockHolder<237,1,1>
{
  /* 0x0000 */ class Spinlock<237,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class TEnumerator<TList<SOS_Scheduler,SOS_Task,16,TListSLock> >
{
  /* 0x0000 */ class SOS_Task* m_currentObject;
  /* 0x0008 */ class SOS_Task* m_lastObjectSeen;
  /* 0x0010 */ class TList<SOS_Scheduler,SOS_Task,16,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

struct ITrusteeGroupAdmin
{
}; /* size: 0x0008 */

struct BitManipTraits<unsigned int,0>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_PAGEFILE_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long TotalSize;
  /* 0x0008 */ unsigned long TotalInUse;
  /* 0x000c */ unsigned long PeakUsage;
  /* 0x0010 */ struct _UNICODE_STRING PageFileName;
} SYSTEM_PAGEFILE_INFORMATION, *PSYSTEM_PAGEFILE_INFORMATION; /* size: 0x0020 */

struct TMemoryBlockAllocator<0,16777216,0,2,0>::NodePartitionWithoutActive
{
}; /* size: 0x0040 */

class SEListEnum<SOS_ParentBlockDescriptor,0>;

class AutoSpinlockHolder<243,1,1>
{
}; /* size: 0x0010 */

typedef struct _FILE_RENAME_INFORMATION
{
  /* 0x0000 */ unsigned char ReplaceIfExists;
  /* 0x0001 */ char Padding_2087[7];
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ unsigned long FileNameLength;
  /* 0x0014 */ wchar_t FileName[1];
  /* 0x0016 */ char __PADDING__[2];
} FILE_RENAME_INFORMATION, *PFILE_RENAME_INFORMATION; /* size: 0x0018 */

struct TMemoryBlockAllocator<0,4194304,16777216,4,0>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_2088;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[4];
}; /* size: 0x0048 */

typedef struct _SYSTEM_PROCESSOR_POWER_INFORMATION
{
  /* 0x0000 */ unsigned char CurrentFrequency;
  /* 0x0001 */ unsigned char ThermalLimitFrequency;
  /* 0x0002 */ unsigned char ConstantThrottleFrequency;
  /* 0x0003 */ unsigned char DegradedThrottleFrequency;
  /* 0x0004 */ unsigned char LastBusyFrequency;
  /* 0x0005 */ unsigned char LastC3Frequency;
  /* 0x0006 */ unsigned char LastAdjustedBusyFrequency;
  /* 0x0007 */ unsigned char ProcessorMinThrottle;
  /* 0x0008 */ unsigned char ProcessorMaxThrottle;
  /* 0x0009 */ char Padding_2089[3];
  /* 0x000c */ unsigned long NumberOfFrequencies;
  /* 0x0010 */ unsigned long PromotionCount;
  /* 0x0014 */ unsigned long DemotionCount;
  /* 0x0018 */ unsigned long ErrorCount;
  /* 0x001c */ unsigned long RetryCount;
  /* 0x0020 */ unsigned __int64 CurrentFrequencyTime;
  /* 0x0028 */ unsigned __int64 CurrentProcessorTime;
  /* 0x0030 */ unsigned __int64 CurrentProcessorIdleTime;
  /* 0x0038 */ unsigned __int64 LastProcessorTime;
  /* 0x0040 */ unsigned __int64 LastProcessorIdleTime;
} SYSTEM_PROCESSOR_POWER_INFORMATION, *PSYSTEM_PROCESSOR_POWER_INFORMATION; /* size: 0x0048 */

struct TMemoryBlockAllocator<0,524288,4194304,4,0>::NodePartitionWithoutActive
{
}; /* size: 0x0080 */

typedef struct _WKSTA_INFO_1011
{
  /* 0x0000 */ unsigned long wki1011_collection_time;
} WKSTA_INFO_1011, *PWKSTA_INFO_1011; /* size: 0x0004 */

struct TMemoryBlockAllocator<0,131072,524288,8,1>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_2090;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[8];
}; /* size: 0x0088 */

class TMemoryBlockAllocator<0,65536,524288,8,1>
{
  /* 0x0000 */ class TMemoryBlockAllocator<0,65536,524288,8,1> sm_memoryBlockAllocator;
  /* 0x00c0 */ struct TMemoryBlockAllocator<0,65536,524288,8,1>::NodePartitionWithoutActive m_nodePart[64];
  /* 0x30c0 */ class PerCPUDataMulti<SOS_MemoryBlockAllocator::ActivePartition>::Reservation<TMemoryBlockAllocator<0,65536,524288,8,1> > m_reservationForActiveParts;
}; /* size: 0x3100 */

typedef struct _SYSTEM_VHD_BOOT_INFORMATION
{
  /* 0x0000 */ unsigned char OsDiskIsVhd;
  /* 0x0001 */ char Padding_2091[3];
  /* 0x0004 */ unsigned long OsVhdFilePathOffset;
  /* 0x0008 */ wchar_t OsVhdParentVolume[1];
  /* 0x000a */ char __PADDING__[2];
} SYSTEM_VHD_BOOT_INFORMATION, *PSYSTEM_VHD_BOOT_INFORMATION; /* size: 0x000c */

struct IGetSession
{
}; /* size: 0x0008 */

struct TMemoryBlockAllocator<0,32768,524288,8,1>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_2092;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[8];
}; /* size: 0x0088 */

class XeSqlPkg::remote_dmv_stream_runtime_cache_hit
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2093[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionBase
{
  /* 0x0000 */ struct BlockAllocPartialListSLock m_lock;
  /* 0x0004 */ long Padding_2094;
  /* 0x0008 */ class SEList<SOS_ParentBlockDescriptor,0> m_partiallyFilledParentBlocks[8];
}; /* size: 0x0088 */

struct TMemoryBlockAllocator<0,16384,524288,8,1>::NodePartitionWithActive
{
}; /* size: 0x00c0 */

class XeSqlPkg::execution_warning
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2095[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int warning_typeOffset;
    /* 0x0000 */ const int server_memory_grantsOffset;
  }; /* size: 0x0198 */
}; /* size: 0x0258 */

class XeSqlPkg::broker_transmission_timer_set
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2096[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int timerOffset;
    /* 0x0000 */ const int expiresOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::CpuPartition
{
  /* 0x0000 */ unsigned short m_nodeId;
  /* 0x0002 */ char Padding_2097[6];
  /* 0x0008 */ struct DescriptorAllocator<SOS_TopLevelBlockDescriptor,0>::PageDesc* m_activePage;
}; /* size: 0x0010 */

struct DescriptorAllocator<SOS_ParentBlockDescriptor,0>::AutoReset
{
  /* 0x0000 */ int* m_flag;
}; /* size: 0x0008 */

class SEListEnum<SOS_WaitableAddress,48>;

class XeSqlPkg::xfcb_send_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2098[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int file_byte_offsetOffset;
    /* 0x0000 */ const int file_byte_countOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::collect_all_CSQLSourceExecute
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2099[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

typedef struct _MEMORY_WORKING_SET_EX_INFORMATION
{
  /* 0x0000 */ void* VirtualAddress;
  union
  {
    union
    {
      /* 0x0008 */ struct _MEMORY_WORKING_SET_EX_BLOCK VirtualAttributes;
      /* 0x0008 */ unsigned __int64 Long;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ u1;
} MEMORY_WORKING_SET_EX_INFORMATION, *PMEMORY_WORKING_SET_EX_INFORMATION; /* size: 0x0010 */

class CuzzUtil
{
}; /* size: 0x0001 */

class SynchedTask
{
  /* 0x0000 */ void* m_func /* function */;
  /* 0x0008 */ void* m_param;
  /* 0x0010 */ class SOS_Task** m_ppTask;
  /* 0x0018 */ class EventManualInternal<SuspendQueueSLock> m_syncEvent;
}; /* size: 0x0040 */

class XeSqlPkg::query_rpc_insert_index_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2100[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

struct MemoryObjectFactory::MemObjUsesFree<PageHeapMemObj>
{
}; /* size: 0x0001 */

struct IDBCreateSession
{
}; /* size: 0x0008 */

class XeSqlPkg::iterator_memory_request_calculation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2101[143];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int iterator_typeOffset;
    /* 0x0000 */ const int input_requiredOffset;
    /* 0x0000 */ const int input_additionalOffset;
    /* 0x0000 */ const int output_requiredOffset;
    /* 0x0000 */ const int output_additionalOffset;
    /* 0x0000 */ const int bitmap_preferredOffset;
  }; /* size: 0x0030 */
}; /* size: 0x0270 */

class XeSqlPkg::glm_lock_acquire_begin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2102[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int resource_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int lock_modeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::recovery_catch_checkpoint
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2103[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_ag_config_data_mutex_acquisition_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2104[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int acquisition_stateOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class CMemThread<CMemDbg<CMemFixed> >
{
  /* 0x0000 */ long Padding_2105[304];
  /* 0x04c0 */ class SOS_UnfairMutexPair m_mutexPair;
  /* 0x0538 */ class SOS_WaitInfo m_waitInfoObj;
}; /* size: 0x0560 */

class XeSqlPkg::metadata_manager_catalog_deleted
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2106[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int from_brick_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_online_availability_group_retry_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2107[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int retry_interval_msOffset;
    /* 0x0000 */ const int retry_countOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::broker_activation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2108[140];
      /* 0x0240 */ unsigned char m_buf[57];
    }; /* size: 0x0049 */
    /* 0x0000 */ const int activation_stateOffset;
    /* 0x0000 */ const int active_task_countOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int queue_idOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
    /* 0x0000 */ const int activation_messageOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0280 */

class XeSqlPkg::hadr_db_partner_set_policy
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2109[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int commit_policyOffset;
    /* 0x0000 */ const int commit_policy_targetOffset;
    /* 0x0000 */ const int delayOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class XeSqlPkg::mbr_lmd_read_backup_group_count
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2110[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int field_offsetOffset;
    /* 0x0000 */ const int field_sizeOffset;
    /* 0x0000 */ const int field_valueOffset;
    /* 0x0000 */ const int field_nameOffset;
    /* 0x0000 */ const int archive_file_nameOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

typedef struct _FILE_ID_FULL_DIR_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ union _LARGE_INTEGER CreationTime;
  /* 0x0010 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0018 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0020 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0038 */ unsigned long FileAttributes;
  /* 0x003c */ unsigned long FileNameLength;
  /* 0x0040 */ unsigned long EaSize;
  /* 0x0044 */ long Padding_2111;
  /* 0x0048 */ union _LARGE_INTEGER FileId;
  /* 0x0050 */ wchar_t FileName[1];
  /* 0x0052 */ char __PADDING__[6];
} FILE_ID_FULL_DIR_INFORMATION, *PFILE_ID_FULL_DIR_INFORMATION; /* size: 0x0058 */

class TEnumerator<TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock> >
{
  /* 0x0000 */ class MemoryBrokerClerk* m_currentObject;
  /* 0x0008 */ class MemoryBrokerClerk* m_lastObjectSeen;
  /* 0x0010 */ class TList<MemoryBrokerClerkList,MemoryBrokerClerk,8,TListSLock>* m_list;
  /* 0x0018 */ class SOS_RWLock* m_pLock;
  /* 0x0020 */ enum RWLockMode m_lockMode;
}; /* size: 0x0028 */

class SEListEnum<DynInterval,0>;

class XeSqlPkg::query_rpc_server_runtime_cache_miss
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2112[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class StateProtectorNode<TypeListNode<ExtIntCodeProtector<0>,NullType> >
{
}; /* size: 0x0004 */

class XeSqlPkg::remote_dmv_stream_release_resources_client
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2113[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class AutoCallThis<TypeListNode<ExtIntCodeProtector<0>,NullType> >
{
  /* 0x0000 */ class StateProtectorNode<TypeListNode<ExtIntCodeProtector<0>,NullType> >* m_pState;
}; /* size: 0x0008 */

class MethodCallBinder_2<long,SOSClient_MemoryNotificationCallback,long (__cdecl SOSClient_MemoryNotificationCallback::*)(enum MemoryNotificationType,unsigned __int64),enum MemoryNotificationType,unsigned __int64>
{
  /* 0x0000 */ class SOSClient_MemoryNotificationCallback* const m_pTObj;
  /* 0x0008 */ void* m_f /* function */;
  /* 0x0010 */ enum MemoryNotificationType m_p1;
  /* 0x0014 */ long Padding_2114;
  /* 0x0018 */ unsigned __int64 m_p2;
}; /* size: 0x0020 */

struct XE_TEvent<4,4,7>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,4> m_customizableAttr;
  /* 0x0180 */ struct XE_TArray<XEDataAttribute,7> m_dynamicAttr;
  /* 0x0298 */ struct XEEvent m_event;
}; /* size: 0x02e0 */

class XeSqlPkg::sp_cache_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,4,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2115[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int cached_textOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int plan_handleOffset;
  }; /* size: 0x02e0 */
}; /* size: 0x0270 */

class XeSqlPkg::batch_hash_join_separate_hash_column
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2116[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class SpinlockHolder<278,1,1>
{
  /* 0x0000 */ class Spinlock<278,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class SEListEnum<eXcursionEntry,0>
{
  /* 0x0000 */ class SEList<eXcursionEntry,0>* m_pList;
  /* 0x0008 */ struct eXcursionEntry* m_pNext;
}; /* size: 0x0010 */

class SEListEnum<ArmedWaypoint,0>
{
  /* 0x0000 */ class SEList<ArmedWaypoint,0>* m_pList;
  /* 0x0008 */ struct ArmedWaypoint* m_pNext;
}; /* size: 0x0010 */

class XeSqlPkg::deadlock_monitor_state_transition
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2117[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int count_cyclesOffset;
    /* 0x0000 */ const int prev_stateOffset;
    /* 0x0000 */ const int new_stateOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::mixed_extent_activation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2118[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int extent_idOffset;
    /* 0x0000 */ const int is_loggedOffset;
    /* 0x0000 */ const int rollbackOffset;
    /* 0x0000 */ const int activateOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0250 */

class SEListEnum<XListElem<SOS_DispatcherBase>,0>;

class XeSqlPkg::query_rpc_server_lob_action
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2119[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int lob_actionOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int lengthOffset;
    /* 0x0000 */ const int sizeOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeSqlPkg::glm_local_brick_release_response
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2120[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int lock_resultOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::data_initialize_lock_acquired
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class SOS_AutoUnhookDebugBreak
{
  /* 0x0000 */ enum SOS_DebugBreakHookMgr::HookPoint m_hook;
  /* 0x0004 */ int m_unhooked;
}; /* size: 0x0008 */

class XeSqlPkg::hadr_filestream_file_open
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2121[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int open_modeOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

struct ResQueueWaiter
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class EventAutoInternal<SuspendQueueSLock> m_event;
  /* 0x0038 */ int m_acquireResource;
  /* 0x003c */ long __PADDING__[1];
}; /* size: 0x0040 */

typedef struct _RTL_CRITICAL_SECTION32
{
  /* 0x0000 */ unsigned long DebugInfo;
  /* 0x0004 */ long LockCount;
  /* 0x0008 */ long RecursionCount;
  /* 0x000c */ unsigned long OwningThread;
  /* 0x0010 */ unsigned long LockSemaphore;
  /* 0x0014 */ unsigned long SpinCount;
} RTL_CRITICAL_SECTION32, *PRTL_CRITICAL_SECTION32; /* size: 0x0018 */

class SEListEnum<ResQueueWaiter,0>;

typedef struct _USER_INFO_4
{
  /* 0x0000 */ wchar_t* usri4_name;
  /* 0x0008 */ wchar_t* usri4_password;
  /* 0x0010 */ unsigned long usri4_password_age;
  /* 0x0014 */ unsigned long usri4_priv;
  /* 0x0018 */ wchar_t* usri4_home_dir;
  /* 0x0020 */ wchar_t* usri4_comment;
  /* 0x0028 */ unsigned long usri4_flags;
  /* 0x002c */ long Padding_2122;
  /* 0x0030 */ wchar_t* usri4_script_path;
  /* 0x0038 */ unsigned long usri4_auth_flags;
  /* 0x003c */ long Padding_2123;
  /* 0x0040 */ wchar_t* usri4_full_name;
  /* 0x0048 */ wchar_t* usri4_usr_comment;
  /* 0x0050 */ wchar_t* usri4_parms;
  /* 0x0058 */ wchar_t* usri4_workstations;
  /* 0x0060 */ unsigned long usri4_last_logon;
  /* 0x0064 */ unsigned long usri4_last_logoff;
  /* 0x0068 */ unsigned long usri4_acct_expires;
  /* 0x006c */ unsigned long usri4_max_storage;
  /* 0x0070 */ unsigned long usri4_units_per_week;
  /* 0x0074 */ long Padding_2124;
  /* 0x0078 */ unsigned char* usri4_logon_hours;
  /* 0x0080 */ unsigned long usri4_bad_pw_count;
  /* 0x0084 */ unsigned long usri4_num_logons;
  /* 0x0088 */ wchar_t* usri4_logon_server;
  /* 0x0090 */ unsigned long usri4_country_code;
  /* 0x0094 */ unsigned long usri4_code_page;
  /* 0x0098 */ void* usri4_user_sid;
  /* 0x00a0 */ unsigned long usri4_primary_group_id;
  /* 0x00a4 */ long Padding_2125;
  /* 0x00a8 */ wchar_t* usri4_profile;
  /* 0x00b0 */ wchar_t* usri4_home_dir_drive;
  /* 0x00b8 */ unsigned long usri4_password_expired;
  /* 0x00bc */ long __PADDING__[1];
} USER_INFO_4, *PUSER_INFO_4; /* size: 0x00c0 */

struct XE_TArray<XETarget *,0>
{
  /* 0x0000 */ struct XETarget** m_array;
}; /* size: 0x0008 */

struct XE_TObjects<XETarget,0>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XETarget *,0> m_objectPtrs;
}; /* size: 0x0018 */

typedef struct _USER_INFO_1005
{
  /* 0x0000 */ unsigned long usri1005_priv;
} USER_INFO_1005, *PUSER_INFO_1005; /* size: 0x0004 */

struct IGetSourceRow
{
}; /* size: 0x0008 */

struct XE_TArray<XEEvent *,64>
{
  /* 0x0000 */ struct XEEvent* m_array[64];
}; /* size: 0x0200 */

struct XE_TObjects<XEEvent,64>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEEvent *,64> m_objectPtrs;
}; /* size: 0x0210 */

typedef struct _LINK_TRACKING_INFORMATION
{
  /* 0x0000 */ enum _LINK_TRACKING_INFORMATION_TYPE Type;
  /* 0x0004 */ unsigned char VolumeId[16];
} LINK_TRACKING_INFORMATION, *PLINK_TRACKING_INFORMATION; /* size: 0x0014 */

struct XE_TMap<6>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[6];
  }; /* size: 0x0060 */
  /* 0x0060 */ struct XEMap m_map;
}; /* size: 0x0090 */

struct XE_TMap<931>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[931];
  }; /* size: 0x3a30 */
  /* 0x3a30 */ struct XEMap m_map;
}; /* size: 0x3a60 */

typedef struct _INVERTED_FUNCTION_TABLE
{
  /* 0x0000 */ unsigned long CurrentSize;
  /* 0x0004 */ unsigned long MaximumSize;
  /* 0x0008 */ volatile unsigned long Epoch;
  /* 0x000c */ unsigned char Overflow;
  /* 0x000d */ char Padding_2126[3];
  /* 0x0010 */ struct _INVERTED_FUNCTION_TABLE_ENTRY TableEntry[512];
} INVERTED_FUNCTION_TABLE, *PINVERTED_FUNCTION_TABLE; /* size: 0x3010 */

struct XE_TMap<5>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[5];
  }; /* size: 0x0050 */
  /* 0x0050 */ struct XEMap m_map;
}; /* size: 0x0080 */

struct XE_TMap<2>
{
  union
  {
    /* 0x0000 */ const unsigned int NEntries;
    /* 0x0000 */ struct XEMapEntry m_maps[2];
  }; /* size: 0x0020 */
  /* 0x0020 */ struct XEMap m_map;
}; /* size: 0x0050 */

typedef struct _SERVER_INFO_1521
{
  /* 0x0000 */ unsigned long sv1521_maxcopywritelen;
} SERVER_INFO_1521, *PSERVER_INFO_1521; /* size: 0x0004 */

typedef struct _LOCALGROUP_MEMBERS_INFO_3
{
  /* 0x0000 */ wchar_t* lgrmi3_domainandname;
} LOCALGROUP_MEMBERS_INFO_3, *PLOCALGROUP_MEMBERS_INFO_3; /* size: 0x0008 */

class XeDvmPkg::dvm_state_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2127[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int locationOffset;
    /* 0x0000 */ const int expected_stateOffset;
    /* 0x0000 */ const int current_stateOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class DmpPointer<void * (__cdecl*)(void *)>
{
}; /* size: 0x0008 */

class DmpPointer<void * __cdecl(void *)>
{
  /* 0x0000 */ void* m_pRaw /* function */;
}; /* size: 0x0008 */

class DumpTListIterator<TList<NodeManager,SOS_Node,16,TListSLock>,512>
{
}; /* size: 0x0020 */

typedef struct _FILE_VALID_DATA_LENGTH_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER ValidDataLength;
} FILE_VALID_DATA_LENGTH_INFORMATION, *PFILE_VALID_DATA_LENGTH_INFORMATION; /* size: 0x0008 */

typedef struct _SYSTEM_THREAD_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER KernelTime;
  /* 0x0008 */ union _LARGE_INTEGER UserTime;
  /* 0x0010 */ union _LARGE_INTEGER CreateTime;
  /* 0x0018 */ unsigned long WaitTime;
  /* 0x001c */ long Padding_2128;
  /* 0x0020 */ void* StartAddress;
  /* 0x0028 */ struct _CLIENT_ID ClientId;
  /* 0x0038 */ long Priority;
  /* 0x003c */ long BasePriority;
  /* 0x0040 */ unsigned long ContextSwitches;
  /* 0x0044 */ unsigned long ThreadState;
  /* 0x0048 */ unsigned long WaitReason;
  /* 0x004c */ long __PADDING__[1];
} SYSTEM_THREAD_INFORMATION, *PSYSTEM_THREAD_INFORMATION; /* size: 0x0050 */

typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION
{
  /* 0x0000 */ struct _SYSTEM_THREAD_INFORMATION ThreadInfo;
  /* 0x0050 */ void* StackBase;
  /* 0x0058 */ void* StackLimit;
  /* 0x0060 */ void* Win32StartAddress;
  /* 0x0068 */ void* TebBase;
  /* 0x0070 */ unsigned __int64 Reserved2;
  /* 0x0078 */ unsigned __int64 Reserved3;
  /* 0x0080 */ unsigned __int64 Reserved4;
} SYSTEM_EXTENDED_THREAD_INFORMATION, *PSYSTEM_EXTENDED_THREAD_INFORMATION; /* size: 0x0088 */

class DmpListIterator<SOS_Scheduler,8,8,SEList<SOS_Scheduler,8>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

struct CLUSTER_SET_PASSWORD_STATUS
{
  /* 0x0000 */ unsigned long NodeId;
  /* 0x0004 */ unsigned char SetAttempted;
  /* 0x0005 */ char Padding_2129[3];
  /* 0x0008 */ unsigned long ReturnStatus;
}; /* size: 0x000c */

typedef struct _SERVER_INFO_1518
{
  /* 0x0000 */ int sv1518_lmannounce;
} SERVER_INFO_1518, *PSERVER_INFO_1518; /* size: 0x0004 */

class DumpSEListIterator<SEList<CFixedInfo,16>,512>
{
}; /* size: 0x0020 */

class DmpListIterator<CFixedInfo,8,16,SEList<CFixedInfo,16>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

typedef struct _PROCESS_MITIGATION_POLICY_INFORMATION
{
  /* 0x0000 */ enum _PROCESS_MITIGATION_POLICY Policy;
  union
  {
    /* 0x0004 */ struct _PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;
    /* 0x0004 */ struct _PROCESS_MITIGATION_STACKCHECK_POLICY StackCheckPolicy;
    /* 0x0004 */ struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;
    /* 0x0004 */ struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;
  }; /* size: 0x0004 */
} PROCESS_MITIGATION_POLICY_INFORMATION, *PPROCESS_MITIGATION_POLICY_INFORMATION; /* size: 0x0008 */

typedef struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long DataFormatVersion;
  /* 0x0008 */ void* Data;
  /* 0x0010 */ unsigned long Length;
  /* 0x0014 */ long Padding_2130;
  /* 0x0018 */ void* SectionGlobalData;
  /* 0x0020 */ unsigned long SectionGlobalDataLength;
  /* 0x0024 */ long Padding_2131;
  /* 0x0028 */ void* SectionBase;
  /* 0x0030 */ unsigned long SectionTotalLength;
  /* 0x0034 */ long Padding_2132;
  /* 0x0038 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0040 */ unsigned long AssemblyRosterIndex;
  /* 0x0044 */ unsigned long Flags;
  /* 0x0048 */ struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTIVATION_CONTEXT_SECTION_KEYED_DATA, *PACTIVATION_CONTEXT_SECTION_KEYED_DATA; /* size: 0x0070 */

class DumpTListIterator<TList<SOS_Node,SystemThread,160,TListSLock>,65535>
{
}; /* size: 0x0020 */

typedef struct _KSPIN_LOCK_QUEUE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE* volatile Next;
  /* 0x0008 */ unsigned __int64* volatile Lock;
} KSPIN_LOCK_QUEUE, *PKSPIN_LOCK_QUEUE; /* size: 0x0010 */

class DumpSEListIterator<SEList<SystemThread,160>,65535>
{
}; /* size: 0x0020 */

class DmpPointer<SOS_Ticks<InterruptTicks<unsigned __int64>,-3> >
{
  /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3>* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SEList<SOS_ResourcePool,0> >
{
  /* 0x0000 */ class SEList<SOS_ResourcePool,0>* m_pRaw;
}; /* size: 0x0008 */

class DmpListIterator<SOS_ResourcePool,8,0,SEList<SOS_ResourcePool,0>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

typedef struct _USER_MODALS_INFO_0
{
  /* 0x0000 */ unsigned long usrmod0_min_passwd_len;
  /* 0x0004 */ unsigned long usrmod0_max_passwd_age;
  /* 0x0008 */ unsigned long usrmod0_min_passwd_age;
  /* 0x000c */ unsigned long usrmod0_force_logoff;
  /* 0x0010 */ unsigned long usrmod0_password_hist_len;
} USER_MODALS_INFO_0, *PUSER_MODALS_INFO_0; /* size: 0x0014 */

class DmpListIterator<SOS_ResourceGroup,8,16,SEList<SOS_ResourceGroup,16>,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

typedef struct _SERVER_INFO_1574
{
  /* 0x0000 */ unsigned long sv1574_enablewfw311directipx;
} SERVER_INFO_1574, *PSERVER_INFO_1574; /* size: 0x0004 */

class DmpPointer<SchedulerManager>
{
  /* 0x0000 */ class SchedulerManager* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SEList<Worker,16> >
{
  /* 0x0000 */ class SEList<Worker,16>* m_pRaw;
}; /* size: 0x0008 */

typedef struct _WNF_PUBLISH_DESCRIPTOR
{
  /* 0x0000 */ struct _WNF_STATE_NAME StateName;
  /* 0x0008 */ struct _WNF_TYPE_ID* TypeId;
  /* 0x0010 */ const void* StateData;
  /* 0x0018 */ unsigned long StateDataLength;
  /* 0x001c */ long __PADDING__[1];
} WNF_PUBLISH_DESCRIPTOR, *PWNF_PUBLISH_DESCRIPTOR; /* size: 0x0020 */

typedef struct _EXFAT_STATISTICS
{
  /* 0x0000 */ unsigned long CreateHits;
  /* 0x0004 */ unsigned long SuccessfulCreates;
  /* 0x0008 */ unsigned long FailedCreates;
  /* 0x000c */ unsigned long NonCachedReads;
  /* 0x0010 */ unsigned long NonCachedReadBytes;
  /* 0x0014 */ unsigned long NonCachedWrites;
  /* 0x0018 */ unsigned long NonCachedWriteBytes;
  /* 0x001c */ unsigned long NonCachedDiskReads;
  /* 0x0020 */ unsigned long NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS; /* size: 0x0024 */

typedef struct _SYSTEM_CALL_TIME_INFORMATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long TotalCalls;
  /* 0x0008 */ union _LARGE_INTEGER TimeOfCalls[1];
} SYSTEM_CALL_TIME_INFORMATION, *PSYSTEM_CALL_TIME_INFORMATION; /* size: 0x0010 */

class DumpSEShortStackIterator<SEShortStack<SOS_ExternalAutoWait,6> >
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ class SEShortStack<SOS_ExternalAutoWait,6>* m_pStack;
  /* 0x0010 */ unsigned __int64 m_currentIndex;
}; /* size: 0x0018 */

class DmpPointer<SOS_ExternalAutoWait>
{
  /* 0x0000 */ class SOS_ExternalAutoWait* m_pRaw;
}; /* size: 0x0008 */

struct BitOrdinal<1024>
{
}; /* size: 0x0001 */

class XeCloudMinPkg::request_throttled
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2133[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int reason_codeOffset;
    /* 0x0000 */ const int server_nameOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int incident_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class TTemplateInfo<1253,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

struct BitOrdinal<262144>
{
}; /* size: 0x0001 */

class TTemplateInfo<1332,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

struct TClassName<_GUID,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class TTemplateInfo<1209,1024>
{
  /* 0x0000 */ const class CClassInfo* xsm_rgpClassInfo[1024];
}; /* size: 0x0001 */

struct BitOrdinal<8192>
{
}; /* size: 0x0001 */

class XeCloudMinPkg::async_transport_corrupted_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2134[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int destination_type_groupOffset;
    /* 0x0000 */ const int message_handleOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_flagsOffset;
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int ack_sequence_numberOffset;
    /* 0x0000 */ const int message_countOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_idOffset;
  }; /* size: 0x02a8 */
}; /* size: 0x0278 */

struct TClassName<unsigned __int64,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

struct BitOrdinal<4>
{
}; /* size: 0x0001 */

struct OSFTraceFlagMapping
{
  /* 0x0000 */ unsigned long osf;
  /* 0x0004 */ unsigned long external;
}; /* size: 0x0008 */

struct BitOrdinal<8>
{
}; /* size: 0x0001 */

struct BitOrdinal<64>
{
}; /* size: 0x0001 */

class XeCloudMinPkg::update_appproperties
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2135[140];
      /* 0x0240 */ unsigned char m_buf[57];
    }; /* size: 0x0049 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int linked_partition_clusterOffset;
    /* 0x0000 */ const int linked_partition_app_nameOffset;
    /* 0x0000 */ const int linked_partition_table_groupOffset;
    /* 0x0000 */ const int linked_partition_low_keyOffset;
    /* 0x0000 */ const int linked_partition_high_keyOffset;
    /* 0x0000 */ const int app_propertiesOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0280 */

struct BitOrdinal<256>
{
}; /* size: 0x0001 */

struct BitOrdinal<131072>
{
}; /* size: 0x0001 */

struct TClassName<__int64,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

struct TClassName<bool,1,0>
{
  /* 0x0000 */ const wchar_t* Value;
  /* 0x0008 */ char __PADDING__[4294967289];
}; /* size: 0x0001 */

class XeCloudMinPkg::secondary_commit_log_flush
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2136[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeCloudMinPkg::ping_submit_to_ucs
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2137[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int queue_sizeOffset;
    /* 0x0000 */ const int stream_statusOffset;
    /* 0x0000 */ const int message_idOffset;
    /* 0x0000 */ const int stream_idOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int function_nameOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0270 */

struct XE_TTarget<6>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,6> m_customizableAttr;
  }; /* size: 0x0150 */
  /* 0x0150 */ struct XETarget m_target;
}; /* size: 0x0188 */

struct XE_TObjects<XEAction,10>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEAction *,10> m_objectPtrs;
}; /* size: 0x0060 */

struct XE_TArray<XEMessage *,55>
{
  /* 0x0000 */ struct XEMessage* m_array[55];
}; /* size: 0x01b8 */

struct XE_TObjects<XEMessage,55>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMessage *,55> m_objectPtrs;
}; /* size: 0x01c8 */

class XeCloudMinPkg::secondary_start_replicated_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2138[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
    /* 0x0000 */ const int xact_for_idempotent_flushOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

struct XE_TTarget<5>
{
  union
  {
    /* 0x0000 */ const unsigned int NCustomizable;
    /* 0x0000 */ struct XE_TArray<XECustomizableAttribute,5> m_customizableAttr;
  }; /* size: 0x0118 */
  /* 0x0118 */ struct XETarget m_target;
}; /* size: 0x0150 */

struct XE_TObjects<XEType,28>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEType *,28> m_objectPtrs;
}; /* size: 0x00f0 */

class XeCloudMinPkg::become_nothing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2139[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int replica_subtypeOffset;
    /* 0x0000 */ const int additional_hashOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeCloudMinPkg::serepl_constructor_call
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2140[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int object_addressOffset;
    /* 0x0000 */ const int api_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class CAutoRg<XE_AutoP<XEPackage0::BucketizingTarget::Entry> >
{
}; /* size: 0x0008 */

class CAutoRg<XEPackage0::RingTarget::EventTypeEntry>
{
}; /* size: 0x0008 */

class XeCloudMinPkg::catchup_request_from_secondary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2141[140];
      /* 0x0240 */ unsigned char m_buf[103];
    }; /* size: 0x0077 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int ms_versionOffset;
    /* 0x0000 */ const int catchup_return_codeOffset;
    /* 0x0000 */ const int establish_catchup_return_codeOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int hint_stream_idOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x0398 */
}; /* size: 0x02a8 */

class CAutoP<XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > > >
{
}; /* size: 0x0008 */

typedef struct _RTL_RELATIVE_NAME_U
{
  /* 0x0000 */ struct _UNICODE_STRING RelativeName;
  /* 0x0010 */ void* ContainingDirectory;
  /* 0x0018 */ struct _RTLP_CURDIR_REF* CurDirRef;
} RTL_RELATIVE_NAME_U, *PRTL_RELATIVE_NAME_U; /* size: 0x0020 */

typedef struct _CONTEXT_CHUNK
{
  /* 0x0000 */ long Offset;
  /* 0x0004 */ unsigned long Length;
} CONTEXT_CHUNK, *PCONTEXT_CHUNK; /* size: 0x0008 */

typedef struct _FILE_LINK_INFORMATION
{
  /* 0x0000 */ unsigned char ReplaceIfExists;
  /* 0x0001 */ char Padding_2142[7];
  /* 0x0008 */ void* RootDirectory;
  /* 0x0010 */ unsigned long FileNameLength;
  /* 0x0014 */ wchar_t FileName[1];
  /* 0x0016 */ char __PADDING__[2];
} FILE_LINK_INFORMATION, *PFILE_LINK_INFORMATION; /* size: 0x0018 */

typedef struct _FILE_ALLOCATION_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFORMATION, *PFILE_ALLOCATION_INFORMATION; /* size: 0x0008 */

typedef struct _RTL_PROCESS_LOCKS
{
  /* 0x0000 */ unsigned long NumberOfLocks;
  /* 0x0004 */ long Padding_2143;
  /* 0x0008 */ struct _RTL_PROCESS_LOCK_INFORMATION Locks[1];
} RTL_PROCESS_LOCKS, *PRTL_PROCESS_LOCKS; /* size: 0x0038 */

class CAutoBase<XEPackage0::RingTarget::EventTypeEntry>
{
  /* 0x0000 */ class XEPackage0::RingTarget::EventTypeEntry* m_pt;
}; /* size: 0x0008 */

typedef struct _ACTIVATION_CONTEXT_SECTION_KEYED_DATA_2600
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long DataFormatVersion;
  /* 0x0008 */ void* Data;
  /* 0x0010 */ unsigned long Length;
  /* 0x0014 */ long Padding_2144;
  /* 0x0018 */ void* SectionGlobalData;
  /* 0x0020 */ unsigned long SectionGlobalDataLength;
  /* 0x0024 */ long Padding_2145;
  /* 0x0028 */ void* SectionBase;
  /* 0x0030 */ unsigned long SectionTotalLength;
  /* 0x0034 */ long Padding_2146;
  /* 0x0038 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0040 */ unsigned long AssemblyRosterIndex;
  /* 0x0044 */ unsigned long Flags;
} ACTIVATION_CONTEXT_SECTION_KEYED_DATA_2600, *PACTIVATION_CONTEXT_SECTION_KEYED_DATA_2600; /* size: 0x0048 */

typedef struct _OBJECT_NAME_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, *POBJECT_NAME_INFORMATION; /* size: 0x0010 */

class XE_AutoP<XEPackage0::BucketizingTarget::Entry>
{
}; /* size: 0x0008 */

typedef union _POWER_STATE
{
  union
  {
    /* 0x0000 */ enum _SYSTEM_POWER_STATE SystemState;
    /* 0x0000 */ enum _DEVICE_POWER_STATE DeviceState;
  }; /* size: 0x0004 */
} POWER_STATE, *PPOWER_STATE; /* size: 0x0004 */

struct SortedList<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>::Index
{
  /* 0x0000 */ class XEPackage0::RingTarget::EventEntry* m_pElem;
  /* 0x0008 */ unsigned int m_cElements;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

class CAutoBase<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> >
{
  /* 0x0000 */ class SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator>* m_pt;
}; /* size: 0x0008 */

class SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator>
{
  /* 0x0000 */ class SEList<XE_XMLObjectString,0>* m_buckets;
  /* 0x0008 */ unsigned int m_bucketCount;
  /* 0x000c */ unsigned int m_mask;
  /* 0x0010 */ unsigned int m_entryCount;
  /* 0x0014 */ long Padding_2147;
  /* 0x0018 */ class XE_BaseAllocator m_allocator;
}; /* size: 0x0020 */

typedef struct _IO_SESSION_CONNECT_INFO
{
  /* 0x0000 */ unsigned long SessionId;
  /* 0x0004 */ unsigned char LocalSession;
  /* 0x0005 */ char __PADDING__[3];
} IO_SESSION_CONNECT_INFO, *PIO_SESSION_CONNECT_INFO; /* size: 0x0008 */

class XEPackage0::XE_LiveWriter::MetadataBlockEntry
{
  /* 0x0000 */ volatile long m_PendingCount;
  /* 0x0004 */ long Padding_2148;
  /* 0x0008 */ class XEPackage0::XE_LiveWriter::MetadataBlockEntry* m_pNext;
  /* 0x0010 */ struct XEBufferHeader* m_pBufferHdr;
}; /* size: 0x0018 */

struct IDBBinderProperties
{
}; /* size: 0x0008 */

typedef struct _FILESHARE_CHANGE_LIST
{
  /* 0x0000 */ unsigned long NumEntries;
  /* 0x0004 */ struct _FILESHARE_CHANGE* ChangeEntry /* zero-length array */;
} FILESHARE_CHANGE_LIST, *PFILESHARE_CHANGE_LIST; /* size: 0x0004 */

class TSinglyLinkedList<XE_EngineLocator::EngineModule>
{
}; /* size: 0x0008 */

struct XEPackage0::CollectCurrentThreadIdAction
{
}; /* size: 0x0001 */

typedef struct _CLUS_SHARED_VOLUME_BACKUP_MODE
{
  /* 0x0000 */ enum _CLUSTER_SHARED_VOLUME_BACKUP_STATE BackupState;
  /* 0x0004 */ unsigned long DelayTimerInSecs;
  /* 0x0008 */ wchar_t VolumeName[260];
} CLUS_SHARED_VOLUME_BACKUP_MODE, *PCLUS_SHARED_VOLUME_BACKUP_MODE; /* size: 0x0210 */

struct XEPackage0::CurrentThreadPredicateSource
{
}; /* size: 0x0001 */

struct XE_TObjects<XEMap,6>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,6> m_objectPtrs;
}; /* size: 0x0040 */

class XEPackage0::XE_LiveTarget
{
  /* 0x0000 */ long Padding_2149[4];
  /* 0x0010 */ class XE_LogWriter<XE_MetadataEncoder<XE_CompressionEncoder<XEPackage0::XE_LiveEncoder> > >* m_pLogWriter;
  /* 0x0018 */ unsigned int m_originalFlushDuration;
  /* 0x001c */ long Padding_2150;
  /* 0x0020 */ void* m_hSess;
  /* 0x0028 */ class CAutoRefc<XEPackage0::XE_LiveWriter> m_pLiveWriter;
  /* 0x0030 */ class XE_ErrorContext m_ErrorContext;
}; /* size: 0x0038 */

struct XEPackage0::IsAllOnPredicateComparator
{
}; /* size: 0x0001 */

class XEPackage0::NullEvent
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00d0 */
}; /* size: 0x0240 */

typedef struct _EXPLICIT_ACCESS_W
{
  /* 0x0000 */ unsigned long grfAccessPermissions;
  /* 0x0004 */ enum _ACCESS_MODE grfAccessMode;
  /* 0x0008 */ unsigned long grfInheritance;
  /* 0x000c */ long Padding_2151;
  /* 0x0010 */ struct _TRUSTEE_W Trustee;
} EXPLICIT_ACCESS_W, *PEXPLICIT_ACCESS_W; /* size: 0x0030 */

struct XEPackage0::DebugBreakAction
{
}; /* size: 0x0001 */

struct XACTSTATS
{
  /* 0x0000 */ unsigned long cOpen;
  /* 0x0004 */ unsigned long cCommitting;
  /* 0x0008 */ unsigned long cCommitted;
  /* 0x000c */ unsigned long cAborting;
  /* 0x0010 */ unsigned long cAborted;
  /* 0x0014 */ unsigned long cInDoubt;
  /* 0x0018 */ unsigned long cHeuristicDecision;
  /* 0x001c */ struct _FILETIME timeTransactionsUp;
}; /* size: 0x0024 */

struct XEPackage0::CollectCPUCycleCountAction
{
}; /* size: 0x0001 */

typedef struct _SERVER_INFO_1543
{
  /* 0x0000 */ unsigned long sv1543_initsesstable;
} SERVER_INFO_1543, *PSERVER_INFO_1543; /* size: 0x0004 */

typedef struct _RTL_BITMAP_RUN
{
  /* 0x0000 */ unsigned long StartingIndex;
  /* 0x0004 */ unsigned long NumberOfBits;
} RTL_BITMAP_RUN, *PRTL_BITMAP_RUN; /* size: 0x0008 */

class XEPackage0::StringCompare<unsigned short,1>
{
}; /* size: 0x0001 */

typedef struct _RTL_STACK_CONTEXT_ENTRY
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ unsigned __int64 Data;
} RTL_STACK_CONTEXT_ENTRY, *PRTL_STACK_CONTEXT_ENTRY; /* size: 0x0010 */

struct tagDBPROPIDSET
{
  /* 0x0000 */ unsigned long* rgPropertyIDs;
  /* 0x0008 */ unsigned long cPropertyIDs;
  /* 0x000c */ struct _GUID guidPropertySet;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct _HCHANGE;

struct CLUSPROP_BINARY
{
  /* 0x0000 */ long Padding_2152[2];
  /* 0x0008 */ unsigned char* rgb /* zero-length array */;
}; /* size: 0x0008 */

struct CLUSPROP_SCSI_ADDRESS
{
}; /* size: 0x000c */

class XEPackage0::XE_ETWMofStream
{
  union
  {
    struct
    {
      /* 0x0000 */ class XEPackage0::XE_ETWEventStream& m_eventStream;
      /* 0x0008 */ class XEPackage0::XE_ETWMofEntry m_currentMofEntry;
      /* 0x0030 */ struct XE_ETWMof0 m_mof0;
      /* 0x004c */ unsigned int m_prevOffset;
    }; /* size: 0x0050 */
    /* 0x0000 */ unsigned int sm_FragmentId;
  }; /* size: 0x0050 */
}; /* size: 0x0050 */

class CAutoRg<XEPackage0::EventTraceQueryProperties>
{
}; /* size: 0x0008 */

class MatchedPackage
{
  /* 0x0000 */ class XE_PackageEnumerator m_enum;
}; /* size: 0x0020 */

class SEListEnum<XEPackage0::SourceColumn,0>
{
  /* 0x0000 */ class SEList<XEPackage0::SourceColumn,0>* m_pList;
  /* 0x0008 */ struct XEPackage0::SourceColumn* m_pNext;
}; /* size: 0x0010 */

class SEHashIter<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>
{
  /* 0x0000 */ class SEHashTable<XEPackage0::OrphanEntry,XEPackage0::OrphanKey,0,16,XE_BaseAllocator>* m_table;
  /* 0x0008 */ unsigned int m_currBucket;
  /* 0x000c */ long Padding_2153;
  /* 0x0010 */ class XEPackage0::OrphanEntry* m_currEntry;
}; /* size: 0x0018 */

class SEListEnum<XEPackage0::OrphanEntry,0>;

typedef struct _PLUGPLAY_NOTIFY_HDR
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ struct _GUID Event;
} PLUGPLAY_NOTIFY_HDR, *PPLUGPLAY_NOTIFY_HDR; /* size: 0x0014 */

typedef struct _PLUGPLAY_CUSTOM_NOTIFICATION
{
  /* 0x0000 */ struct _PLUGPLAY_NOTIFY_HDR HeaderInfo;
  /* 0x0014 */ long Padding_2154;
  /* 0x0018 */ void* FileObject;
  /* 0x0020 */ long NameBufferOffset;
  /* 0x0024 */ unsigned char CustomDataBuffer[1];
  /* 0x0025 */ char __PADDING__[3];
} PLUGPLAY_CUSTOM_NOTIFICATION, *PPLUGPLAY_CUSTOM_NOTIFICATION; /* size: 0x0028 */

typedef struct _JOURNAL_CLIENT_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER StartTimeStamp;
  /* 0x0008 */ union _LARGE_INTEGER CurrentTimeStamp;
  /* 0x0010 */ unsigned __int64 RecordsToProcess;
  /* 0x0018 */ unsigned long RelativeFillLevel;
  /* 0x001c */ long __PADDING__[1];
} JOURNAL_CLIENT_INFORMATION, *PJOURNAL_CLIENT_INFORMATION; /* size: 0x0020 */

class SortedListEnum<XEPackage0::RingTarget::EventEntry,XE_BaseAllocator>
{
}; /* size: 0x0010 */

typedef struct _SECTIONBASICINFO
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ unsigned long AllocationAttributes;
  /* 0x000c */ long Padding_2155;
  /* 0x0010 */ union _LARGE_INTEGER MaximumSize;
} SECTIONBASICINFO, *PSECTIONBASICINFO; /* size: 0x0018 */

class CAutoP<XEPackage0::RingTarget>
{
}; /* size: 0x0008 */

typedef struct _SERVER_INFO_1546
{
  /* 0x0000 */ unsigned long sv1546_initsearchtable;
} SERVER_INFO_1546, *PSERVER_INFO_1546; /* size: 0x0004 */

struct tagDBINDEXCOLUMNDESC
{
  /* 0x0000 */ struct tagDBID* pColumnID;
  /* 0x0008 */ unsigned long eIndexColOrder;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

typedef struct _SYSTEM_POOL_INFORMATION
{
  /* 0x0000 */ unsigned __int64 TotalSize;
  /* 0x0008 */ void* FirstEntry;
  /* 0x0010 */ unsigned short EntryOverhead;
  /* 0x0012 */ unsigned char PoolTagPresent;
  /* 0x0013 */ unsigned char Spare0;
  /* 0x0014 */ unsigned long NumberOfEntries;
  /* 0x0018 */ struct _SYSTEM_POOL_ENTRY Entries[1];
} SYSTEM_POOL_INFORMATION, *PSYSTEM_POOL_INFORMATION; /* size: 0x0028 */

struct XE_EngineLocator::EngineModule
{
  /* 0x0000 */ long Padding_2156[2];
  /* 0x0008 */ struct HINSTANCE__* m_moduleHandle;
  /* 0x0010 */ struct XEEngineAPISet m_apis;
  /* 0x0048 */ const struct XEEngineClientAPI* m_clientAPI;
  /* 0x0050 */ const struct XEEngineServicesAPI* m_servicesAPI;
  /* 0x0058 */ const struct XEEngineRegisterAPI* m_registerAPI;
  /* 0x0060 */ unsigned int m_AggVersion;
  /* 0x0064 */ long __PADDING__[1];
}; /* size: 0x0068 */

typedef struct _SYSTEM_PROCESSOR_IDLE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 IdleTime;
  /* 0x0008 */ unsigned __int64 C1Time;
  /* 0x0010 */ unsigned __int64 C2Time;
  /* 0x0018 */ unsigned __int64 C3Time;
  /* 0x0020 */ unsigned long C1Transitions;
  /* 0x0024 */ unsigned long C2Transitions;
  /* 0x0028 */ unsigned long C3Transitions;
  /* 0x002c */ unsigned long Padding;
} SYSTEM_PROCESSOR_IDLE_INFORMATION, *PSYSTEM_PROCESSOR_IDLE_INFORMATION; /* size: 0x0030 */

typedef struct _CM_DISK_GEOMETRY_DEVICE_DATA
{
  /* 0x0000 */ unsigned long BytesPerSector;
  /* 0x0004 */ unsigned long NumberOfCylinders;
  /* 0x0008 */ unsigned long SectorsPerTrack;
  /* 0x000c */ unsigned long NumberOfHeads;
} CM_DISK_GEOMETRY_DEVICE_DATA, *PCM_DISK_GEOMETRY_DEVICE_DATA; /* size: 0x0010 */

typedef struct _FILE_SET_SPARSE_BUFFER
{
  /* 0x0000 */ unsigned char SetSparse;
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER; /* size: 0x0001 */

typedef struct _CM_RESOURCE_LIST
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _CM_FULL_RESOURCE_DESCRIPTOR List[1];
} CM_RESOURCE_LIST, *PCM_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY
{
  /* 0x0000 */ unsigned long DeviceInstance;
  /* 0x0004 */ unsigned long DeviceFlags;
  /* 0x0008 */ unsigned long ResourceType;
  /* 0x000c */ long Padding_2157;
  /* 0x0010 */ unsigned __int64 ResourceStart;
  /* 0x0018 */ unsigned __int64 ResourceEnd;
  /* 0x0020 */ unsigned long ResourceFlags;
  /* 0x0024 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_CONFLICT_ENTRY, *PPLUGPLAY_CONTROL_CONFLICT_ENTRY; /* size: 0x0028 */

typedef struct _PLUGPLAY_CONTROL_CONFLICT_LIST
{
  /* 0x0000 */ unsigned long Reserved1;
  /* 0x0004 */ unsigned long Reserved2;
  /* 0x0008 */ unsigned long ConflictsCounted;
  /* 0x000c */ unsigned long ConflictsListed;
  /* 0x0010 */ unsigned long RequiredBufferSize;
  /* 0x0014 */ long Padding_2158;
  /* 0x0018 */ struct _PLUGPLAY_CONTROL_CONFLICT_ENTRY ConflictEntry[1];
} PLUGPLAY_CONTROL_CONFLICT_LIST, *PPLUGPLAY_CONTROL_CONFLICT_LIST; /* size: 0x0040 */

typedef struct _SERVER_INFO_1537
{
  /* 0x0000 */ int sv1537_enableoplockforceclose;
} SERVER_INFO_1537, *PSERVER_INFO_1537; /* size: 0x0004 */

struct XE_TArray<XEMap *,5>
{
  /* 0x0000 */ struct XEMap* m_array[5];
}; /* size: 0x0028 */

typedef struct _SERVER_INFO_1597
{
  /* 0x0000 */ unsigned long sv1597_IdleThreadTimeOut;
} SERVER_INFO_1597, *PSERVER_INFO_1597; /* size: 0x0004 */

typedef struct _SHARE_INFO_1004
{
  /* 0x0000 */ wchar_t* shi1004_remark;
} SHARE_INFO_1004, *PSHARE_INFO_1004; /* size: 0x0008 */

typedef struct _SERVER_INFO_1593
{
  /* 0x0000 */ unsigned long sv1593_enablesecuritysignature;
} SERVER_INFO_1593, *PSERVER_INFO_1593; /* size: 0x0004 */

struct tagERRORINFO
{
  /* 0x0000 */ HRESULT hrError;
  /* 0x0004 */ unsigned long dwMinor;
  /* 0x0008 */ struct _GUID clsid;
  /* 0x0018 */ struct _GUID iid;
  /* 0x0028 */ long dispid;
}; /* size: 0x002c */

typedef struct _ACTRL_ACCESS_ENTRY_LISTA
{
  /* 0x0000 */ unsigned long cEntries;
  /* 0x0004 */ long Padding_2159;
  /* 0x0008 */ struct _ACTRL_ACCESS_ENTRYA* pAccessList;
} ACTRL_ACCESS_ENTRY_LISTA, *PACTRL_ACCESS_ENTRY_LISTA; /* size: 0x0010 */

typedef struct _FILE_PIPE_EVENT_BUFFER
{
  /* 0x0000 */ unsigned long NamedPipeState;
  /* 0x0004 */ unsigned long EntryType;
  /* 0x0008 */ unsigned long ByteCount;
  /* 0x000c */ unsigned long KeyValue;
  /* 0x0010 */ unsigned long NumberRequests;
} FILE_PIPE_EVENT_BUFFER, *PFILE_PIPE_EVENT_BUFFER; /* size: 0x0014 */

typedef struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION
{
  /* 0x0000 */ struct _DYNAMIC_FUNCTION_TABLE* DynamicFunctionTable;
  /* 0x0008 */ unsigned char Remove;
  /* 0x0009 */ char __PADDING__[7];
} PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION, *PPROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION; /* size: 0x0010 */

typedef struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
  /* 0x0000 */ void* pValue;
  /* 0x0008 */ unsigned long ValueLength;
  /* 0x000c */ long __PADDING__[1];
} TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, *PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE; /* size: 0x0010 */

typedef struct _SYSTEM_PREFETCH_PATCH_INFORMATION
{
  /* 0x0000 */ unsigned long PrefetchPatchCount;
} SYSTEM_PREFETCH_PATCH_INFORMATION, *PSYSTEM_PREFETCH_PATCH_INFORMATION; /* size: 0x0004 */

typedef struct _FILE_FS_VOLUME_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER VolumeCreationTime;
  /* 0x0008 */ unsigned long VolumeSerialNumber;
  /* 0x000c */ unsigned long VolumeLabelLength;
  /* 0x0010 */ unsigned char SupportsObjects;
  /* 0x0011 */ char Padding_2160;
  /* 0x0012 */ wchar_t VolumeLabel[1];
  /* 0x0014 */ long __PADDING__[1];
} FILE_FS_VOLUME_INFORMATION, *PFILE_FS_VOLUME_INFORMATION; /* size: 0x0018 */

typedef struct _GENERATE_NAME_CONTEXT
{
  /* 0x0000 */ unsigned short Checksum;
  /* 0x0002 */ unsigned char ChecksumInserted;
  /* 0x0003 */ unsigned char NameLength;
  /* 0x0004 */ wchar_t NameBuffer[8];
  /* 0x0014 */ unsigned long ExtensionLength;
  /* 0x0018 */ wchar_t ExtensionBuffer[4];
  /* 0x0020 */ unsigned long LastIndexValue;
} GENERATE_NAME_CONTEXT, *PGENERATE_NAME_CONTEXT; /* size: 0x0024 */

typedef struct _ATOM_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned short UsageCount;
  /* 0x0002 */ unsigned short Flags;
  /* 0x0004 */ unsigned short NameLength;
  /* 0x0006 */ wchar_t Name[1];
} ATOM_BASIC_INFORMATION, *PATOM_BASIC_INFORMATION; /* size: 0x0008 */

typedef struct _SE_AUDIT_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ enum _AUDIT_EVENT_TYPE AuditType;
  /* 0x0008 */ enum _SE_AUDIT_OPERATION AuditOperation;
  /* 0x000c */ unsigned long AuditFlags;
  /* 0x0010 */ struct _UNICODE_STRING SubsystemName;
  /* 0x0020 */ struct _UNICODE_STRING ObjectTypeName;
  /* 0x0030 */ struct _UNICODE_STRING ObjectName;
  /* 0x0040 */ void* HandleId;
  /* 0x0048 */ struct _GUID* TransactionId;
  /* 0x0050 */ struct _LUID* OperationId;
  /* 0x0058 */ unsigned char ObjectCreation;
  /* 0x0059 */ unsigned char GenerateOnClose;
  /* 0x005a */ char __PADDING__[6];
} SE_AUDIT_INFO, *PSE_AUDIT_INFO; /* size: 0x0060 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG64
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ long Padding_2161;
  /* 0x0008 */ unsigned __int64 CriticalSection;
  /* 0x0010 */ struct LIST_ENTRY64 ProcessLocksList;
  /* 0x0020 */ unsigned long EntryCount;
  /* 0x0024 */ unsigned long ContentionCount;
  /* 0x0028 */ unsigned long Spare[2];
} RTL_CRITICAL_SECTION_DEBUG64, *PRTL_CRITICAL_SECTION_DEBUG64; /* size: 0x0030 */

typedef struct _SERVER_INFO_1578
{
  /* 0x0000 */ unsigned long sv1578_preferredaffinity;
} SERVER_INFO_1578, *PSERVER_INFO_1578; /* size: 0x0004 */

typedef struct _MUILANGINFO
{
  /* 0x0000 */ unsigned short Flags;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned short LangId;
  /* 0x0006 */ short LangNameIndex;
  /* 0x0008 */ unsigned short FallbackTypes;
  /* 0x000a */ short NeutralLangSpec;
  /* 0x000c */ short FallbackSpecs[4];
  /* 0x0014 */ short AlternateCodePage[4];
} MUILANGINFO, *PMUILANGINFO; /* size: 0x001c */

typedef struct _CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwVersion;
  /* 0x0008 */ enum CLUSTER_RESOURCE_STATE_CHANGE_REASON eReason;
} CLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT, *PCLUSCTL_RESOURCE_STATE_CHANGE_REASON_STRUCT; /* size: 0x000c */

typedef struct _SESSION_INFO_0
{
  /* 0x0000 */ wchar_t* sesi0_cname;
} SESSION_INFO_0, *PSESSION_INFO_0; /* size: 0x0008 */

typedef struct _SYSDBG_CONTROL_SPACE
{
  /* 0x0000 */ unsigned __int64 Address;
  /* 0x0008 */ void* Buffer;
  /* 0x0010 */ unsigned long Request;
  /* 0x0014 */ unsigned long Processor;
} SYSDBG_CONTROL_SPACE, *PSYSDBG_CONTROL_SPACE; /* size: 0x0018 */

typedef struct _FAT_STATISTICS
{
  /* 0x0000 */ unsigned long CreateHits;
  /* 0x0004 */ unsigned long SuccessfulCreates;
  /* 0x0008 */ unsigned long FailedCreates;
  /* 0x000c */ unsigned long NonCachedReads;
  /* 0x0010 */ unsigned long NonCachedReadBytes;
  /* 0x0014 */ unsigned long NonCachedWrites;
  /* 0x0018 */ unsigned long NonCachedWriteBytes;
  /* 0x001c */ unsigned long NonCachedDiskReads;
  /* 0x0020 */ unsigned long NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS; /* size: 0x0024 */

typedef struct _SYSTEM_PROCESS_INFORMATION_EXTENSION
{
  /* 0x0000 */ struct _PROCESS_DISK_COUNTERS DiskCounters;
  union
  {
    /* 0x0028 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0028 */ unsigned long HasStrongId : 1; /* bit position: 0 */
      /* 0x0028 */ unsigned long Spare : 31; /* bit position: 1 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x002c */ long __PADDING__[1];
} SYSTEM_PROCESS_INFORMATION_EXTENSION, *PSYSTEM_PROCESS_INFORMATION_EXTENSION; /* size: 0x0030 */

typedef struct _WKSTA_INFO_1050
{
  /* 0x0000 */ int wki1050_use_close_behind;
} WKSTA_INFO_1050, *PWKSTA_INFO_1050; /* size: 0x0004 */

typedef struct _CPTABLEINFO
{
  /* 0x0000 */ unsigned short CodePage;
  /* 0x0002 */ unsigned short MaximumCharacterSize;
  /* 0x0004 */ unsigned short DefaultChar;
  /* 0x0006 */ unsigned short UniDefaultChar;
  /* 0x0008 */ unsigned short TransDefaultChar;
  /* 0x000a */ unsigned short TransUniDefaultChar;
  /* 0x000c */ unsigned short DBCSCodePage;
  /* 0x000e */ unsigned char LeadByte[12];
  /* 0x001a */ char Padding_2162[6];
  /* 0x0020 */ unsigned short* MultiByteTable;
  /* 0x0028 */ void* WideCharTable;
  /* 0x0030 */ unsigned short* DBCSRanges;
  /* 0x0038 */ unsigned short* DBCSOffsets;
} CPTABLEINFO, *PCPTABLEINFO; /* size: 0x0040 */

struct _HCLUSENUM;

typedef struct _THREAD_BASIC_INFORMATION
{
  /* 0x0000 */ long ExitStatus;
  /* 0x0004 */ long Padding_2163;
  /* 0x0008 */ struct _TEB* TebBaseAddress;
  /* 0x0010 */ struct _CLIENT_ID ClientId;
  /* 0x0020 */ unsigned __int64 AffinityMask;
  /* 0x0028 */ long Priority;
  /* 0x002c */ long BasePriority;
} THREAD_BASIC_INFORMATION, *PTHREAD_BASIC_INFORMATION; /* size: 0x0030 */

typedef struct _USER_MODALS_INFO_3
{
  /* 0x0000 */ unsigned long usrmod3_lockout_duration;
  /* 0x0004 */ unsigned long usrmod3_lockout_observation_window;
  /* 0x0008 */ unsigned long usrmod3_lockout_threshold;
} USER_MODALS_INFO_3, *PUSER_MODALS_INFO_3; /* size: 0x000c */

typedef struct _REPL_IDIR_INFO_0
{
  /* 0x0000 */ wchar_t* rpid0_dirname;
} REPL_IDIR_INFO_0, *PREPL_IDIR_INFO_0; /* size: 0x0008 */

typedef struct _NLSTABLEINFO
{
  /* 0x0000 */ struct _CPTABLEINFO OemTableInfo;
  /* 0x0040 */ struct _CPTABLEINFO AnsiTableInfo;
  /* 0x0080 */ unsigned short* UpperCaseTable;
  /* 0x0088 */ unsigned short* LowerCaseTable;
} NLSTABLEINFO, *PNLSTABLEINFO; /* size: 0x0090 */

typedef struct _ACTRL_CONTROL_INFOA
{
  /* 0x0000 */ char* lpControlId;
  /* 0x0008 */ char* lpControlName;
} ACTRL_CONTROL_INFOA, *PACTRL_CONTROL_INFOA; /* size: 0x0010 */

class IsArray<CSessionTraceFlags>
{
}; /* size: 0x0001 */

typedef struct _USER_INFO_1018
{
  /* 0x0000 */ unsigned long usri1018_max_storage;
} USER_INFO_1018, *PUSER_INFO_1018; /* size: 0x0004 */

typedef struct _RTL_TRACE_BLOCK
{
  /* 0x0000 */ unsigned long Magic;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ long Padding_2164;
  /* 0x0010 */ unsigned __int64 UserCount;
  /* 0x0018 */ unsigned __int64 UserSize;
  /* 0x0020 */ void* UserContext;
  /* 0x0028 */ struct _RTL_TRACE_BLOCK* Next;
  /* 0x0030 */ void** Trace;
} RTL_TRACE_BLOCK, *PRTL_TRACE_BLOCK; /* size: 0x0038 */

struct _HCLUSTER;

union CLUSPROP_BUFFER_HELPER
{
  union
  {
    /* 0x0000 */ unsigned char* pb;
    /* 0x0000 */ unsigned short* pw;
    /* 0x0000 */ unsigned long* pdw;
    /* 0x0000 */ long* pl;
    /* 0x0000 */ wchar_t* psz;
    /* 0x0000 */ struct CLUSPROP_LIST* pList;
    /* 0x0000 */ union CLUSPROP_SYNTAX* pSyntax;
    /* 0x0000 */ struct CLUSPROP_SZ* pName;
    /* 0x0000 */ struct CLUSPROP_VALUE* pValue;
    /* 0x0000 */ struct CLUSPROP_BINARY* pBinaryValue;
    /* 0x0000 */ struct CLUSPROP_WORD* pWordValue;
    /* 0x0000 */ struct CLUSPROP_DWORD* pDwordValue;
    /* 0x0000 */ struct CLUSPROP_LONG* pLongValue;
    /* 0x0000 */ struct CLUSPROP_ULARGE_INTEGER* pULargeIntegerValue;
    /* 0x0000 */ struct CLUSPROP_LARGE_INTEGER* pLargeIntegerValue;
    /* 0x0000 */ struct CLUSPROP_SZ* pStringValue;
    /* 0x0000 */ struct CLUSPROP_SZ* pMultiSzValue;
    /* 0x0000 */ struct CLUSPROP_SECURITY_DESCRIPTOR* pSecurityDescriptor;
    /* 0x0000 */ struct CLUSPROP_RESOURCE_CLASS* pResourceClassValue;
    /* 0x0000 */ struct CLUSPROP_RESOURCE_CLASS_INFO* pResourceClassInfoValue;
    /* 0x0000 */ struct CLUSPROP_DWORD* pDiskSignatureValue;
    /* 0x0000 */ struct CLUSPROP_SCSI_ADDRESS* pScsiAddressValue;
    /* 0x0000 */ struct CLUSPROP_DWORD* pDiskNumberValue;
    /* 0x0000 */ struct CLUSPROP_PARTITION_INFO* pPartitionInfoValue;
    /* 0x0000 */ union CLUSPROP_REQUIRED_DEPENDENCY* pRequiredDependencyValue;
    /* 0x0000 */ struct CLUSPROP_PARTITION_INFO_EX* pPartitionInfoValueEx;
    /* 0x0000 */ struct CLUSPROP_FILETIME* pFileTimeValue;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct CLUSPROP_RESOURCE_CLASS_INFO
{
}; /* size: 0x0010 */

struct XE_TObjects<XEEvent,402>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEEvent *,402> m_objectPtrs;
}; /* size: 0x0ca0 */

typedef struct _FILE_PIPE_ASSIGN_EVENT_BUFFER
{
  /* 0x0000 */ void* EventHandle;
  /* 0x0008 */ unsigned long KeyValue;
  /* 0x000c */ long __PADDING__[1];
} FILE_PIPE_ASSIGN_EVENT_BUFFER, *PFILE_PIPE_ASSIGN_EVENT_BUFFER; /* size: 0x0010 */

struct PROCESSOR_IDLE_TIMES
{
  /* 0x0000 */ unsigned __int64 StartTime;
  /* 0x0008 */ unsigned __int64 EndTime;
  /* 0x0010 */ unsigned long Reserved[4];
}; /* size: 0x0020 */

typedef struct _SESSION_INFO_2
{
  /* 0x0000 */ wchar_t* sesi2_cname;
  /* 0x0008 */ wchar_t* sesi2_username;
  /* 0x0010 */ unsigned long sesi2_num_opens;
  /* 0x0014 */ unsigned long sesi2_time;
  /* 0x0018 */ unsigned long sesi2_idle_time;
  /* 0x001c */ unsigned long sesi2_user_flags;
  /* 0x0020 */ wchar_t* sesi2_cltype_name;
} SESSION_INFO_2, *PSESSION_INFO_2; /* size: 0x0028 */

class SEList<XListElem<XE_EventEntry>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEList<XListEnumerator<XE_EventEntry>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<XE_EventEntry>
{
  /* 0x0000 */ long Padding_2165[2];
  /* 0x0008 */ class SEList<XListElem<XE_EventEntry>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<XE_EventEntry>,0> m_enumerators;
  /* 0x0028 */ struct XE_SessionEventMgrSLock m_lock;
}; /* size: 0x0030 */

typedef struct _FILE_FULL_DIR_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ union _LARGE_INTEGER CreationTime;
  /* 0x0010 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0018 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0020 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0038 */ unsigned long FileAttributes;
  /* 0x003c */ unsigned long FileNameLength;
  /* 0x0040 */ unsigned long EaSize;
  /* 0x0044 */ wchar_t FileName[1];
  /* 0x0046 */ char __PADDING__[2];
} FILE_FULL_DIR_INFORMATION, *PFILE_FULL_DIR_INFORMATION; /* size: 0x0048 */

typedef struct _TRIPLE_LIST_ITERATOR
{
  /* 0x0000 */ struct _TRIPLE_LIST* List;
  /* 0x0008 */ struct _TRIPLE_LIST_ENTRY* NextEntry;
  /* 0x0010 */ unsigned char ActiveList;
  /* 0x0011 */ unsigned char ProbeReads;
  /* 0x0012 */ unsigned char ReturnDataOffset;
  /* 0x0013 */ unsigned char Wow64List;
  /* 0x0014 */ long __PADDING__[1];
} TRIPLE_LIST_ITERATOR, *PTRIPLE_LIST_ITERATOR; /* size: 0x0018 */

typedef struct _TRIPLE_LIST
{
  union
  {
    struct
    {
      struct /* bitfield */
      {
        /* 0x0000 */ volatile unsigned long SwitchSelectorBit0 : 1; /* bit position: 0 */
        /* 0x0000 */ volatile unsigned long ActiveListBit0 : 1; /* bit position: 1 */
        /* 0x0000 */ volatile unsigned long OverflowActiveListBit0 : 1; /* bit position: 2 */
        /* 0x0000 */ volatile unsigned long SwitchSelectorBit1 : 1; /* bit position: 3 */
        /* 0x0000 */ volatile unsigned long ActiveListBit1 : 1; /* bit position: 4 */
        /* 0x0000 */ volatile unsigned long OverflowActiveListBit1 : 1; /* bit position: 5 */
        /* 0x0000 */ volatile unsigned long ReaderDidTheSwitch : 1; /* bit position: 6 */
        /* 0x0000 */ volatile unsigned long Reserved : 22; /* bit position: 7 */
        /* 0x0000 */ volatile unsigned long ReaderBusy : 1; /* bit position: 29 */
        /* 0x0000 */ volatile unsigned long UpdateReady : 1; /* bit position: 30 */
        /* 0x0000 */ volatile unsigned long OverflowUpdateReady : 1; /* bit position: 31 */
      }; /* bitfield */
    } /* size: 0x0004 */ ControlBits;
    /* 0x0000 */ volatile long CombinedControlBits;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_2166;
  /* 0x0008 */ struct _TRIPLE_LIST_ENTRY Head;
  /* 0x0028 */ struct _TRIPLE_LIST_ENTRY* Tail[3];
  /* 0x0040 */ void* RemoveCallback /* function */;
  /* 0x0048 */ void* RemoveContext;
  /* 0x0050 */ struct _TRIPLE_LIST_ENTRY* PendingHead;
  /* 0x0058 */ struct _TRIPLE_LIST_ENTRY** PendingTailPtr;
  /* 0x0060 */ unsigned long PendingListIndex;
  /* 0x0064 */ long __PADDING__[1];
} TRIPLE_LIST, *PTRIPLE_LIST; /* size: 0x0068 */

struct ImgDelayDescrV2
{
  /* 0x0000 */ unsigned long grAttrs;
  /* 0x0004 */ unsigned long rvaDLLName;
  /* 0x0008 */ unsigned long rvaHmod;
  /* 0x000c */ unsigned long rvaIAT;
  /* 0x0010 */ unsigned long rvaINT;
  /* 0x0014 */ unsigned long rvaBoundIAT;
  /* 0x0018 */ unsigned long rvaUnloadIAT;
  /* 0x001c */ unsigned long dwTimeStamp;
}; /* size: 0x0020 */

typedef struct _CM_PNP_BIOS_INSTALLATION_CHECK
{
  /* 0x0000 */ unsigned char Signature[4];
  /* 0x0004 */ unsigned char Revision;
  /* 0x0005 */ unsigned char Length;
  /* 0x0006 */ unsigned short ControlField;
  /* 0x0008 */ unsigned char Checksum;
  /* 0x0009 */ unsigned long EventFlagAddress;
  /* 0x000d */ unsigned short RealModeEntryOffset;
  /* 0x000f */ unsigned short RealModeEntrySegment;
  /* 0x0011 */ unsigned short ProtectedModeEntryOffset;
  /* 0x0013 */ unsigned long ProtectedModeCodeBaseAddress;
  /* 0x0017 */ unsigned long OemDeviceId;
  /* 0x001b */ unsigned short RealModeDataBaseAddress;
  /* 0x001d */ unsigned long ProtectedModeDataBaseAddress;
} CM_PNP_BIOS_INSTALLATION_CHECK, *PCM_PNP_BIOS_INSTALLATION_CHECK; /* size: 0x0021 */

typedef struct _CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS
{
  /* 0x0000 */ unsigned long AvailDrivelettersMask;
} CLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS, *PCLUS_STORAGE_GET_AVAILABLE_DRIVELETTERS; /* size: 0x0004 */

class TypeListSize<TypeListNode<void * const,TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > > > >
{
}; /* size: 0x0001 */

struct _HRESOURCE;

typedef struct _AE_NETLOGON
{
  /* 0x0000 */ unsigned long ae_no_compname;
  /* 0x0004 */ unsigned long ae_no_username;
  /* 0x0008 */ unsigned long ae_no_privilege;
  /* 0x000c */ unsigned long ae_no_authflags;
} AE_NETLOGON, *PAE_NETLOGON; /* size: 0x0010 */

typedef struct _USE_INFO_4
{
  /* 0x0000 */ struct _USE_INFO_3 ui4_ui3;
  /* 0x0040 */ unsigned long ui4_auth_identity_length;
  /* 0x0044 */ long Padding_2167;
  /* 0x0048 */ unsigned char* ui4_auth_identity;
} USE_INFO_4, *PUSE_INFO_4; /* size: 0x0050 */

typedef struct _SERVER_INFO_1568
{
  /* 0x0000 */ unsigned long sv1568_lockviolationoffset;
} SERVER_INFO_1568, *PSERVER_INFO_1568; /* size: 0x0004 */

typedef struct _FILE_FS_CONTROL_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER FreeSpaceStartFiltering;
  /* 0x0008 */ union _LARGE_INTEGER FreeSpaceThreshold;
  /* 0x0010 */ union _LARGE_INTEGER FreeSpaceStopFiltering;
  /* 0x0018 */ union _LARGE_INTEGER DefaultQuotaThreshold;
  /* 0x0020 */ union _LARGE_INTEGER DefaultQuotaLimit;
  /* 0x0028 */ unsigned long FileSystemControlFlags;
  /* 0x002c */ long __PADDING__[1];
} FILE_FS_CONTROL_INFORMATION, *PFILE_FS_CONTROL_INFORMATION; /* size: 0x0030 */

typedef struct _AE_UASMOD
{
  /* 0x0000 */ unsigned long ae_um_compname;
  /* 0x0004 */ unsigned long ae_um_username;
  /* 0x0008 */ unsigned long ae_um_resname;
  /* 0x000c */ unsigned long ae_um_rectype;
  /* 0x0010 */ unsigned long ae_um_action;
  /* 0x0014 */ unsigned long ae_um_datalen;
} AE_UASMOD, *PAE_UASMOD; /* size: 0x0018 */

class XE_Callback
{
  /* 0x0000 */ long Padding_2168[14];
  /* 0x0038 */ unsigned int m_Slot;
  /* 0x0000 */ unsigned int sm_nextSlot;
}; /* size: 0x0040 */

typedef struct _WKSTA_INFO_1041
{
  /* 0x0000 */ unsigned long wki1041_lock_quota;
} WKSTA_INFO_1041, *PWKSTA_INFO_1041; /* size: 0x0004 */

typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT
{
  /* 0x0000 */ void* CompletionKey;
  /* 0x0008 */ void* CompletionPort;
} ALPC_PORT_ASSOCIATE_COMPLETION_PORT, *PALPC_PORT_ASSOCIATE_COMPLETION_PORT; /* size: 0x0010 */

typedef struct _REPL_EDIR_INFO_2
{
  /* 0x0000 */ wchar_t* rped2_dirname;
  /* 0x0008 */ unsigned long rped2_integrity;
  /* 0x000c */ unsigned long rped2_extent;
  /* 0x0010 */ unsigned long rped2_lockcount;
  /* 0x0014 */ unsigned long rped2_locktime;
} REPL_EDIR_INFO_2, *PREPL_EDIR_INFO_2; /* size: 0x0018 */

struct IsElemental<unsigned int>
{
}; /* size: 0x0001 */

typedef struct _RTL_AVL_ENTRY
{
  /* 0x0000 */ struct _RTL_BALANCED_LINKS BalancedLinks;
  /* 0x0020 */ __int64 UserData;
} RTL_AVL_ENTRY, *PRTL_AVL_ENTRY; /* size: 0x0028 */

typedef struct _SERVER_INFO_1602
{
  /* 0x0000 */ int sv_1598_disablestrictnamechecking;
} SERVER_INFO_1602, *PSERVER_INFO_1602; /* size: 0x0004 */

struct XE_TArray<XEMap *,4>
{
  /* 0x0000 */ struct XEMap* m_array[4];
}; /* size: 0x0020 */

struct XE_TObjects<XEMap,4>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,4> m_objectPtrs;
}; /* size: 0x0030 */

typedef struct _SYSTEM_PROCESSOR_INFORMATION
{
  /* 0x0000 */ unsigned short ProcessorArchitecture;
  /* 0x0002 */ unsigned short ProcessorLevel;
  /* 0x0004 */ unsigned short ProcessorRevision;
  /* 0x0006 */ unsigned short MaximumProcessors;
  /* 0x0008 */ unsigned long ProcessorFeatureBits;
} SYSTEM_PROCESSOR_INFORMATION, *PSYSTEM_PROCESSOR_INFORMATION; /* size: 0x000c */

struct SerializeControl<RPCStream,0>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_HANDLE_INFORMATION_EX
{
  /* 0x0000 */ unsigned __int64 NumberOfHandles;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[1];
} SYSTEM_HANDLE_INFORMATION_EX, *PSYSTEM_HANDLE_INFORMATION_EX; /* size: 0x0038 */

typedef struct _SERVER_INFO_1528
{
  /* 0x0000 */ unsigned long sv1528_scavtimeout;
} SERVER_INFO_1528, *PSERVER_INFO_1528; /* size: 0x0004 */

typedef struct _RTL_TRACE_ENUMERATE
{
  /* 0x0000 */ struct _RTL_TRACE_DATABASE* Database;
  /* 0x0008 */ unsigned long Index;
  /* 0x000c */ long Padding_2169;
  /* 0x0010 */ struct _RTL_TRACE_BLOCK* Block;
} RTL_TRACE_ENUMERATE, *PRTL_TRACE_ENUMERATE; /* size: 0x0018 */

typedef struct _ERRLOG_OTHER_INFO
{
  /* 0x0000 */ unsigned long alrter_errcode;
  /* 0x0004 */ unsigned long alrter_offset;
} ERRLOG_OTHER_INFO, *PERRLOG_OTHER_INFO; /* size: 0x0008 */

class DmpSEListIterator<SESListSized<XEPackage0::RingTarget::EventEntry,0>,2000>
{
}; /* size: 0x0020 */

typedef struct _REPL_EDIR_INFO_1
{
  /* 0x0000 */ wchar_t* rped1_dirname;
  /* 0x0008 */ unsigned long rped1_integrity;
  /* 0x000c */ unsigned long rped1_extent;
} REPL_EDIR_INFO_1, *PREPL_EDIR_INFO_1; /* size: 0x0010 */

typedef struct _INITIAL_TEB
{
  struct
  {
    /* 0x0000 */ void* OldStackBase;
    /* 0x0008 */ void* OldStackLimit;
  } /* size: 0x0010 */ OldInitialTeb;
  /* 0x0010 */ void* StackBase;
  /* 0x0018 */ void* StackLimit;
  /* 0x0020 */ void* StackAllocationBase;
} INITIAL_TEB, *PINITIAL_TEB; /* size: 0x0028 */

struct CLUS_NETNAME_IP_INFO_ENTRY
{
  /* 0x0000 */ unsigned long NodeId;
  /* 0x0004 */ unsigned long AddressSize;
  /* 0x0008 */ unsigned char Address[1];
  /* 0x0009 */ char __PADDING__[3];
}; /* size: 0x000c */

typedef struct _IO_ERROR_LOG_MESSAGE
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short Size;
  /* 0x0004 */ unsigned short DriverNameLength;
  /* 0x0006 */ char Padding_2170[2];
  /* 0x0008 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0010 */ unsigned long DriverNameOffset;
  /* 0x0014 */ long Padding_2171;
  /* 0x0018 */ struct _IO_ERROR_LOG_PACKET EntryData;
} IO_ERROR_LOG_MESSAGE, *PIO_ERROR_LOG_MESSAGE; /* size: 0x0048 */

class SEList<XE_TargetEntry,40>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_TargetEntry
{
  /* 0x0000 */ long Padding_2172[10];
  /* 0x0028 */ class SEListElem m_link2;
  /* 0x0000 */ enum XEHandleType HandleType;
  /* 0x0004 */ long Padding_2173[13];
  /* 0x0038 */ class XE_Session* m_pSession;
  /* 0x0040 */ class SEList<XE_TargetEntry,40> m_proxies;
  /* 0x0050 */ enum XE_TargetEntry::Type m_type;
}; /* size: 0x0058 */

typedef struct _OBJECTS_AND_NAME_W
{
  /* 0x0000 */ unsigned long ObjectsPresent;
  /* 0x0004 */ enum _SE_OBJECT_TYPE ObjectType;
  /* 0x0008 */ wchar_t* ObjectTypeName;
  /* 0x0010 */ wchar_t* InheritedObjectTypeName;
  /* 0x0018 */ wchar_t* ptstrName;
} OBJECTS_AND_NAME_W, *POBJECTS_AND_NAME_W; /* size: 0x0020 */

typedef struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE
{
  /* 0x0000 */ unsigned __int64 Version;
  /* 0x0008 */ struct _UNICODE_STRING Name;
} TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE, *PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE; /* size: 0x0018 */

class DmpPointer<XEType>
{
  /* 0x0000 */ struct XEType* m_pRaw;
}; /* size: 0x0008 */

typedef struct _THREAD_PERFORMANCE_DATA
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ struct _PROCESSOR_NUMBER ProcessorNumber;
  /* 0x0008 */ unsigned long ContextSwitches;
  /* 0x000c */ unsigned long HwCountersCount;
  /* 0x0010 */ volatile unsigned __int64 UpdateCount;
  /* 0x0018 */ unsigned __int64 WaitReasonBitMap;
  /* 0x0020 */ unsigned __int64 HardwareCounters;
  /* 0x0028 */ struct _COUNTER_READING CycleTime;
  /* 0x0040 */ struct _COUNTER_READING HwCounters[16];
} THREAD_PERFORMANCE_DATA, *PTHREAD_PERFORMANCE_DATA; /* size: 0x01c0 */

typedef struct _FILESYSTEM_STATISTICS
{
  /* 0x0000 */ unsigned short FileSystemType;
  /* 0x0002 */ unsigned short Version;
  /* 0x0004 */ unsigned long SizeOfCompleteStructure;
  /* 0x0008 */ unsigned long UserFileReads;
  /* 0x000c */ unsigned long UserFileReadBytes;
  /* 0x0010 */ unsigned long UserDiskReads;
  /* 0x0014 */ unsigned long UserFileWrites;
  /* 0x0018 */ unsigned long UserFileWriteBytes;
  /* 0x001c */ unsigned long UserDiskWrites;
  /* 0x0020 */ unsigned long MetaDataReads;
  /* 0x0024 */ unsigned long MetaDataReadBytes;
  /* 0x0028 */ unsigned long MetaDataDiskReads;
  /* 0x002c */ unsigned long MetaDataWrites;
  /* 0x0030 */ unsigned long MetaDataWriteBytes;
  /* 0x0034 */ unsigned long MetaDataDiskWrites;
} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS; /* size: 0x0038 */

typedef struct _EISA_IRQ_CONFIGURATION
{
  /* 0x0000 */ struct _EISA_IRQ_DESCRIPTOR ConfigurationByte;
  /* 0x0001 */ unsigned char Reserved;
} EISA_IRQ_CONFIGURATION, *PEISA_IRQ_CONFIGURATION; /* size: 0x0002 */

typedef struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION
{
  /* 0x0000 */ void* ReflectionProcessHandle;
  /* 0x0008 */ void* ReflectionThreadHandle;
  /* 0x0010 */ struct _CLIENT_ID ReflectionClientId;
} RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION, *PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION; /* size: 0x0020 */

typedef struct _SERVER_INFO_1562
{
  /* 0x0000 */ unsigned long sv1562_connectionlessautodisc;
} SERVER_INFO_1562, *PSERVER_INFO_1562; /* size: 0x0004 */

typedef struct _KEY_VALUE_ENTRY
{
  /* 0x0000 */ struct _UNICODE_STRING* ValueName;
  /* 0x0008 */ unsigned long DataLength;
  /* 0x000c */ unsigned long DataOffset;
  /* 0x0010 */ unsigned long Type;
  /* 0x0014 */ long __PADDING__[1];
} KEY_VALUE_ENTRY, *PKEY_VALUE_ENTRY; /* size: 0x0018 */

struct tagDBPROPINFOSET
{
  /* 0x0000 */ struct tagDBPROPINFO* rgPropertyInfos;
  /* 0x0008 */ unsigned long cPropertyInfos;
  /* 0x000c */ struct _GUID guidPropertySet;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _CONNECTION_INFO_0
{
  /* 0x0000 */ unsigned long coni0_id;
} CONNECTION_INFO_0, *PCONNECTION_INFO_0; /* size: 0x0004 */

typedef struct _SERVER_INFO_598
{
  /* 0x0000 */ unsigned long sv598_maxrawworkitems;
  /* 0x0004 */ unsigned long sv598_maxthreadsperqueue;
  /* 0x0008 */ unsigned long sv598_producttype;
  /* 0x000c */ unsigned long sv598_serversize;
  /* 0x0010 */ unsigned long sv598_connectionlessautodisc;
  /* 0x0014 */ unsigned long sv598_sharingviolationretries;
  /* 0x0018 */ unsigned long sv598_sharingviolationdelay;
  /* 0x001c */ unsigned long sv598_maxglobalopensearch;
  /* 0x0020 */ unsigned long sv598_removeduplicatesearches;
  /* 0x0024 */ unsigned long sv598_lockviolationoffset;
  /* 0x0028 */ unsigned long sv598_lockviolationdelay;
  /* 0x002c */ unsigned long sv598_mdlreadswitchover;
  /* 0x0030 */ unsigned long sv598_cachedopenlimit;
  /* 0x0034 */ unsigned long sv598_otherqueueaffinity;
  /* 0x0038 */ int sv598_restrictnullsessaccess;
  /* 0x003c */ int sv598_enablewfw311directipx;
  /* 0x0040 */ unsigned long sv598_queuesamplesecs;
  /* 0x0044 */ unsigned long sv598_balancecount;
  /* 0x0048 */ unsigned long sv598_preferredaffinity;
  /* 0x004c */ unsigned long sv598_maxfreerfcbs;
  /* 0x0050 */ unsigned long sv598_maxfreemfcbs;
  /* 0x0054 */ unsigned long sv598_maxfreelfcbs;
  /* 0x0058 */ unsigned long sv598_maxfreepagedpoolchunks;
  /* 0x005c */ unsigned long sv598_minpagedpoolchunksize;
  /* 0x0060 */ unsigned long sv598_maxpagedpoolchunksize;
  /* 0x0064 */ int sv598_sendsfrompreferredprocessor;
  /* 0x0068 */ unsigned long sv598_cacheddirectorylimit;
  /* 0x006c */ unsigned long sv598_maxcopylength;
  /* 0x0070 */ int sv598_enablecompression;
  /* 0x0074 */ int sv598_autosharewks;
  /* 0x0078 */ int sv598_autoshareserver;
  /* 0x007c */ int sv598_enablesecuritysignature;
  /* 0x0080 */ int sv598_requiresecuritysignature;
  /* 0x0084 */ unsigned long sv598_minclientbuffersize;
  /* 0x0088 */ struct _GUID sv598_serverguid;
  /* 0x0098 */ unsigned long sv598_ConnectionNoSessionsTimeout;
  /* 0x009c */ unsigned long sv598_IdleThreadTimeOut;
  /* 0x00a0 */ int sv598_enableW9xsecuritysignature;
  /* 0x00a4 */ int sv598_enforcekerberosreauthentication;
  /* 0x00a8 */ int sv598_disabledos;
  /* 0x00ac */ unsigned long sv598_lowdiskspaceminimum;
  /* 0x00b0 */ int sv598_disablestrictnamechecking;
  /* 0x00b4 */ int sv598_enableauthenticateusersharing;
} SERVER_INFO_598, *PSERVER_INFO_598; /* size: 0x00b8 */

typedef struct _PO_WAKE_SOURCE_FIXED
{
  /* 0x0000 */ struct _PO_WAKE_SOURCE_HEADER Header;
  /* 0x0008 */ enum PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType;
} PO_WAKE_SOURCE_FIXED, *PPO_WAKE_SOURCE_FIXED; /* size: 0x000c */

typedef struct _SYSTEM_WORKINGSET_ENTRY
{
  union
  {
    /* 0x0000 */ unsigned long UniqueProcessId;
    /* 0x0000 */ unsigned long SessionId;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_2174;
  /* 0x0008 */ unsigned __int64 WorkingSetPageCount;
  /* 0x0010 */ unsigned __int64 CommitPageCount;
  union
  {
    /* 0x0018 */ unsigned __int64 PagedPoolPageCount;
    /* 0x0018 */ unsigned __int64 VirtualSizeInPages;
  }; /* size: 0x0008 */
  /* 0x0020 */ unsigned __int64 PrivateWorkingSetPageCount;
} SYSTEM_WORKINGSET_ENTRY, *PSYSTEM_WORKINGSET_ENTRY; /* size: 0x0028 */

typedef struct _NET_VALIDATE_OUTPUT_ARG
{
  /* 0x0000 */ struct _NET_VALIDATE_PERSISTED_FIELDS ChangedPersistedFields;
  /* 0x0030 */ unsigned long ValidationStatus;
  /* 0x0034 */ long __PADDING__[1];
} NET_VALIDATE_OUTPUT_ARG, *PNET_VALIDATE_OUTPUT_ARG; /* size: 0x0038 */

class IAutoXactFactory
{
}; /* size: 0x0008 */

struct tagDBVECTOR
{
  /* 0x0000 */ unsigned __int64 size;
  /* 0x0008 */ void* ptr;
}; /* size: 0x0010 */

typedef struct _FILE_FS_FULL_SIZE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER TotalAllocationUnits;
  /* 0x0008 */ union _LARGE_INTEGER CallerAvailableAllocationUnits;
  /* 0x0010 */ union _LARGE_INTEGER ActualAvailableAllocationUnits;
  /* 0x0018 */ unsigned long SectorsPerAllocationUnit;
  /* 0x001c */ unsigned long BytesPerSector;
} FILE_FS_FULL_SIZE_INFORMATION, *PFILE_FS_FULL_SIZE_INFORMATION; /* size: 0x0020 */

typedef struct _USER_INFO_24
{
  /* 0x0000 */ int usri24_internet_identity;
  /* 0x0004 */ unsigned long usri24_flags;
  /* 0x0008 */ wchar_t* usri24_internet_provider_name;
  /* 0x0010 */ wchar_t* usri24_internet_principal_name;
  /* 0x0018 */ void* usri24_user_sid;
} USER_INFO_24, *PUSER_INFO_24; /* size: 0x0020 */

typedef struct _SYSTEM_DEVICE_DATA_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceId;
  /* 0x0010 */ struct _UNICODE_STRING DataName;
  /* 0x0020 */ unsigned long DataType;
  /* 0x0024 */ unsigned long DataBufferLength;
  /* 0x0028 */ void* DataBuffer;
} SYSTEM_DEVICE_DATA_INFORMATION, *PSYSTEM_DEVICE_DATA_INFORMATION; /* size: 0x0030 */

typedef struct _LDR_IMPORT_CALLBACK_INFO
{
  /* 0x0000 */ void* ImportCallbackRoutine /* function */;
  /* 0x0008 */ void* ImportCallbackParameter;
} LDR_IMPORT_CALLBACK_INFO, *PLDR_IMPORT_CALLBACK_INFO; /* size: 0x0010 */

typedef struct _FILE_FS_LABEL_INFORMATION
{
  /* 0x0000 */ unsigned long VolumeLabelLength;
  /* 0x0004 */ wchar_t VolumeLabel[1];
  /* 0x0006 */ char __PADDING__[2];
} FILE_FS_LABEL_INFORMATION, *PFILE_FS_LABEL_INFORMATION; /* size: 0x0008 */

typedef struct _KLOCK_QUEUE_HANDLE
{
  /* 0x0000 */ struct _KSPIN_LOCK_QUEUE LockQueue;
  /* 0x0010 */ unsigned char OldIrql;
  /* 0x0011 */ char __PADDING__[7];
} KLOCK_QUEUE_HANDLE, *PKLOCK_QUEUE_HANDLE; /* size: 0x0018 */

typedef struct _IO_RESOURCE_LIST
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ struct _IO_RESOURCE_DESCRIPTOR Descriptors[1];
} IO_RESOURCE_LIST, *PIO_RESOURCE_LIST; /* size: 0x0028 */

typedef struct _SERVER_INFO_1579
{
  /* 0x0000 */ unsigned long sv1579_maxfreerfcbs;
} SERVER_INFO_1579, *PSERVER_INFO_1579; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1057
{
  /* 0x0000 */ int wki1057_use_encryption;
} WKSTA_INFO_1057, *PWKSTA_INFO_1057; /* size: 0x0004 */

class XESQLFailPointBaseEvent<XeSqlPkg::recovery_redo_failpoint>
{
}; /* size: 0x0240 */

typedef struct _WKSTA_INFO_1046
{
  /* 0x0000 */ unsigned long wki1046_dormant_file_limit;
} WKSTA_INFO_1046, *PWKSTA_INFO_1046; /* size: 0x0004 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<2>
{
}; /* size: 0x0001 */

typedef struct _LOCALGROUP_INFO_1002
{
  /* 0x0000 */ wchar_t* lgrpi1002_comment;
} LOCALGROUP_INFO_1002, *PLOCALGROUP_INFO_1002; /* size: 0x0008 */

typedef struct _USER_MODALS_INFO_1001
{
  /* 0x0000 */ unsigned long usrmod1001_min_passwd_len;
} USER_MODALS_INFO_1001, *PUSER_MODALS_INFO_1001; /* size: 0x0004 */

typedef struct _FILE_PATH
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Type;
  /* 0x000c */ unsigned char FilePath[1];
  /* 0x000d */ char __PADDING__[3];
} FILE_PATH, *PFILE_PATH; /* size: 0x0010 */

struct XE_TObjects<XEEvent,14>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEEvent *,14> m_objectPtrs;
}; /* size: 0x0080 */

typedef struct _PROCESS_CYCLE_TIME_INFORMATION
{
  /* 0x0000 */ unsigned __int64 AccumulatedCycles;
  /* 0x0008 */ unsigned __int64 CurrentCycleCount;
} PROCESS_CYCLE_TIME_INFORMATION, *PPROCESS_CYCLE_TIME_INFORMATION; /* size: 0x0010 */

typedef struct _SERVER_INFO_503
{
  /* 0x0000 */ unsigned long sv503_sessopens;
  /* 0x0004 */ unsigned long sv503_sessvcs;
  /* 0x0008 */ unsigned long sv503_opensearch;
  /* 0x000c */ unsigned long sv503_sizreqbuf;
  /* 0x0010 */ unsigned long sv503_initworkitems;
  /* 0x0014 */ unsigned long sv503_maxworkitems;
  /* 0x0018 */ unsigned long sv503_rawworkitems;
  /* 0x001c */ unsigned long sv503_irpstacksize;
  /* 0x0020 */ unsigned long sv503_maxrawbuflen;
  /* 0x0024 */ unsigned long sv503_sessusers;
  /* 0x0028 */ unsigned long sv503_sessconns;
  /* 0x002c */ unsigned long sv503_maxpagedmemoryusage;
  /* 0x0030 */ unsigned long sv503_maxnonpagedmemoryusage;
  /* 0x0034 */ int sv503_enablesoftcompat;
  /* 0x0038 */ int sv503_enableforcedlogoff;
  /* 0x003c */ int sv503_timesource;
  /* 0x0040 */ int sv503_acceptdownlevelapis;
  /* 0x0044 */ int sv503_lmannounce;
  /* 0x0048 */ wchar_t* sv503_domain;
  /* 0x0050 */ unsigned long sv503_maxcopyreadlen;
  /* 0x0054 */ unsigned long sv503_maxcopywritelen;
  /* 0x0058 */ unsigned long sv503_minkeepsearch;
  /* 0x005c */ unsigned long sv503_maxkeepsearch;
  /* 0x0060 */ unsigned long sv503_minkeepcomplsearch;
  /* 0x0064 */ unsigned long sv503_maxkeepcomplsearch;
  /* 0x0068 */ unsigned long sv503_threadcountadd;
  /* 0x006c */ unsigned long sv503_numblockthreads;
  /* 0x0070 */ unsigned long sv503_scavtimeout;
  /* 0x0074 */ unsigned long sv503_minrcvqueue;
  /* 0x0078 */ unsigned long sv503_minfreeworkitems;
  /* 0x007c */ unsigned long sv503_xactmemsize;
  /* 0x0080 */ unsigned long sv503_threadpriority;
  /* 0x0084 */ unsigned long sv503_maxmpxct;
  /* 0x0088 */ unsigned long sv503_oplockbreakwait;
  /* 0x008c */ unsigned long sv503_oplockbreakresponsewait;
  /* 0x0090 */ int sv503_enableoplocks;
  /* 0x0094 */ int sv503_enableoplockforceclose;
  /* 0x0098 */ int sv503_enablefcbopens;
  /* 0x009c */ int sv503_enableraw;
  /* 0x00a0 */ int sv503_enablesharednetdrives;
  /* 0x00a4 */ unsigned long sv503_minfreeconnections;
  /* 0x00a8 */ unsigned long sv503_maxfreeconnections;
  /* 0x00ac */ long __PADDING__[1];
} SERVER_INFO_503, *PSERVER_INFO_503; /* size: 0x00b0 */

class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>
{
  /* 0x0000 */ long Padding_2175[2];
  /* 0x0008 */ class SEList<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0> m_enumerators;
  /* 0x0028 */ struct XE_NotificationCallbackListSLock m_lock;
}; /* size: 0x0030 */

typedef struct _STD_ALERT
{
  /* 0x0000 */ unsigned long alrt_timestamp;
  /* 0x0004 */ wchar_t alrt_eventname[17];
  /* 0x0026 */ wchar_t alrt_servicename[81];
} STD_ALERT, *PSTD_ALERT; /* size: 0x00c8 */

typedef struct _WKSTA_INFO_1033
{
  /* 0x0000 */ unsigned long wki1033_max_threads;
} WKSTA_INFO_1033, *PWKSTA_INFO_1033; /* size: 0x0004 */

struct $_s__RTTIBaseClassArray$_extraBytes_8
{
  /* 0x0000 */ const struct _s__RTTIBaseClassDescriptor2* arrayOfBaseClassDescriptors[1];
  /* 0x0008 */ long __PADDING__[1];
}; /* size: 0x000c */

typedef struct _FILE_FULL_EA_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned char Flags;
  /* 0x0005 */ unsigned char EaNameLength;
  /* 0x0006 */ unsigned short EaValueLength;
  /* 0x0008 */ char EaName[1];
  /* 0x0009 */ char __PADDING__[3];
} FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION; /* size: 0x000c */

typedef struct _SECTION_IMAGE_INFORMATION64
{
  /* 0x0000 */ unsigned __int64 TransferAddress;
  /* 0x0008 */ unsigned long ZeroBits;
  /* 0x000c */ long Padding_2176;
  /* 0x0010 */ unsigned __int64 MaximumStackSize;
  /* 0x0018 */ unsigned __int64 CommittedStackSize;
  /* 0x0020 */ unsigned long SubSystemType;
  union
  {
    struct
    {
      /* 0x0024 */ unsigned short SubSystemMinorVersion;
      /* 0x0026 */ unsigned short SubSystemMajorVersion;
    }; /* size: 0x0004 */
    /* 0x0024 */ unsigned long SubSystemVersion;
  }; /* size: 0x0004 */
  /* 0x0028 */ unsigned long GpValue;
  /* 0x002c */ unsigned short ImageCharacteristics;
  /* 0x002e */ unsigned short DllCharacteristics;
  /* 0x0030 */ unsigned short Machine;
  /* 0x0032 */ unsigned char ImageContainsCode;
  union
  {
    /* 0x0033 */ unsigned char ImageFlags;
    struct /* bitfield */
    {
      /* 0x0033 */ unsigned char ComPlus : 1; /* bit position: 0 */
      /* 0x0033 */ unsigned char ImageDynamicallyRelocated : 1; /* bit position: 1 */
      /* 0x0033 */ unsigned char Reserved : 6; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0001 */
  /* 0x0034 */ unsigned long LoaderFlags;
  /* 0x0038 */ unsigned long ImageFileSize;
  /* 0x003c */ unsigned long CheckSum;
} SECTION_IMAGE_INFORMATION64, *PSECTION_IMAGE_INFORMATION64; /* size: 0x0040 */

typedef struct _THREAD_PROFILING_INFORMATION
{
  /* 0x0000 */ unsigned __int64 HardwareCounters;
  /* 0x0008 */ unsigned long Flags;
  /* 0x000c */ unsigned long Enable;
  /* 0x0010 */ struct _THREAD_PERFORMANCE_DATA* PerformanceData;
} THREAD_PROFILING_INFORMATION, *PTHREAD_PROFILING_INFORMATION; /* size: 0x0018 */

typedef struct _RTL_HEAP_TAG
{
  /* 0x0000 */ unsigned long NumberOfAllocations;
  /* 0x0004 */ unsigned long NumberOfFrees;
  /* 0x0008 */ unsigned __int64 BytesAllocated;
  /* 0x0010 */ unsigned short TagIndex;
  /* 0x0012 */ unsigned short CreatorBackTraceIndex;
  /* 0x0014 */ wchar_t TagName[24];
  /* 0x0044 */ long __PADDING__[1];
} RTL_HEAP_TAG, *PRTL_HEAP_TAG; /* size: 0x0048 */

typedef struct _AE_RESACCESSREJ
{
  /* 0x0000 */ unsigned long ae_rr_compname;
  /* 0x0004 */ unsigned long ae_rr_username;
  /* 0x0008 */ unsigned long ae_rr_resname;
  /* 0x000c */ unsigned long ae_rr_operation;
} AE_RESACCESSREJ, *PAE_RESACCESSREJ; /* size: 0x0010 */

typedef struct _RTL_ANSI_STRING_BUFFER
{
  /* 0x0000 */ struct _STRING String;
  /* 0x0010 */ struct _RTL_BUFFER ByteBuffer;
  /* 0x0040 */ unsigned char MinimumStaticBufferForTerminalNul[1];
  /* 0x0041 */ char __PADDING__[7];
} RTL_ANSI_STRING_BUFFER, *PRTL_ANSI_STRING_BUFFER; /* size: 0x0048 */

class XeDvmPkg::dvm_work_item_end_execution
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2177[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeDvmPkg::dvm_work_item_start_execution
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2178[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeDvmPkg::dvm_activated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2179[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

typedef struct _CLUS_CSV_SWPRV_RESPONSE
{
  /* 0x0000 */ HRESULT Result;
  /* 0x0004 */ long Padding_2180;
  union
  {
    struct
    {
      /* 0x0008 */ int SnapshotsPresent;
      /* 0x000c */ long SnapshotCompatibility;
    } /* size: 0x0008 */ IVSOut;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotId;
      /* 0x0018 */ struct _GUID SnapshotSetId;
      /* 0x0028 */ long SnapshotCount;
      /* 0x002c */ wchar_t SnapshotDeviceName[50];
      /* 0x0090 */ wchar_t SnapshotPseudoVolume[64];
      /* 0x0110 */ wchar_t OriginalVolumeName[260];
      /* 0x0318 */ wchar_t OriginatingMachine[260];
      /* 0x0520 */ wchar_t ServiceMachine[260];
      /* 0x0728 */ wchar_t ExposedName[260];
      /* 0x0930 */ wchar_t ExposedPath[260];
      /* 0x0b38 */ struct _GUID ProviderId;
      /* 0x0b48 */ long SnapshotAttributes;
      /* 0x0b44 */ long Padding_2181;
      /* 0x0b50 */ __int64 CreationTimestamp;
      /* 0x0b58 */ unsigned long SnapshotState;
      /* 0x0b5c */ long __PADDING__[1];
    } /* size: 0x0b58 */ GSPOut;
    struct
    {
      /* 0x0008 */ wchar_t SnapshotCsvDevice[260];
    } /* size: 0x0208 */ CSCOut;
    struct
    {
      /* 0x0008 */ long DeletedSnapshots;
      /* 0x000c */ struct _GUID NondeletedSnapshotId;
    } /* size: 0x0014 */ DSOut;
    struct
    {
      /* 0x0008 */ unsigned long SnapshotCount;
      /* 0x000c */ struct _GUID SnapshotIds[1];
    } /* size: 0x0014 */ GASOut;
    struct
    {
      /* 0x0008 */ unsigned char VolumeProtectLevel[24];
    } /* size: 0x0018 */ VPLOut;
    struct
    {
      struct
      {
        /* 0x0008 */ unsigned long DiffCount;
        /* 0x0004 */ long Padding_2182;
        /* 0x0010 */ struct _CLUS_SNAPSHOT_DIFF_PROP DiffAreas[1];
      } /* size: 0x0430 */ DAPOut;
      /* 0x0438 */ long __PADDING__[458];
    }; /* size: 0x0b58 */
  }; /* size: 0x0b58 */
} CLUS_CSV_SWPRV_RESPONSE, *PCLUS_CSV_SWPRV_RESPONSE; /* size: 0x0b60 */

struct tagDBFAILUREINFO
{
  /* 0x0000 */ unsigned __int64 hRow;
  /* 0x0008 */ unsigned __int64 iColumn;
  /* 0x0010 */ HRESULT failure;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

typedef struct _SERVER_INFO_1567
{
  /* 0x0000 */ unsigned long sv1567_lockviolationretries;
} SERVER_INFO_1567, *PSERVER_INFO_1567; /* size: 0x0004 */

typedef struct _FN_OBJECT_MGR_FUNCTIONS
{
  /* 0x0000 */ unsigned long Placeholder;
} FN_OBJECT_MGR_FUNCTIONS, *PFN_OBJECT_MGR_FUNCTIONS; /* size: 0x0004 */

typedef struct _KLDR_DATA_TABLE_ENTRY64
{
  /* 0x0000 */ struct LIST_ENTRY64 InLoadOrderLinks;
  /* 0x0010 */ unsigned __int64 __Undefined1;
  /* 0x0018 */ unsigned __int64 __Undefined2;
  /* 0x0020 */ unsigned __int64 __Undefined3;
  /* 0x0028 */ unsigned __int64 NonPagedDebugInfo;
  /* 0x0030 */ unsigned __int64 DllBase;
  /* 0x0038 */ unsigned __int64 EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_2183;
  /* 0x0048 */ struct _STRING64 FullDllName;
  /* 0x0058 */ struct _STRING64 BaseDllName;
  /* 0x0068 */ unsigned long Flags;
  /* 0x006c */ unsigned short LoadCount;
  /* 0x006e */ unsigned short __Undefined5;
  /* 0x0070 */ unsigned __int64 __Undefined6;
  /* 0x0078 */ unsigned long CheckSum;
  /* 0x007c */ unsigned long __padding1;
  /* 0x0080 */ unsigned long TimeDateStamp;
  /* 0x0084 */ unsigned long __padding2;
} KLDR_DATA_TABLE_ENTRY64, *PKLDR_DATA_TABLE_ENTRY64; /* size: 0x0088 */

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT
{
  /* 0x0000 */ unsigned long Hits;
  /* 0x0004 */ unsigned char PercentFrequency;
  /* 0x0005 */ char __PADDING__[3];
} SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT, *PSYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT; /* size: 0x0008 */

struct _HREGBATCHPORT;

struct tagDBPROPSET
{
  /* 0x0000 */ struct tagDBPROP* rgProperties;
  /* 0x0008 */ unsigned long cProperties;
  /* 0x000c */ struct _GUID guidPropertySet;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

typedef struct _SYSTEM_HIBERFILE_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfMcbPairs;
  /* 0x0004 */ long Padding_2184;
  /* 0x0008 */ union _LARGE_INTEGER Mcb[1];
} SYSTEM_HIBERFILE_INFORMATION, *PSYSTEM_HIBERFILE_INFORMATION; /* size: 0x0010 */

typedef struct _RTL_HANDLE_TABLE
{
  /* 0x0000 */ unsigned long MaximumNumberOfHandles;
  /* 0x0004 */ unsigned long SizeOfHandleTableEntry;
  /* 0x0008 */ unsigned long UseHeap;
  /* 0x000c */ unsigned long TableSize;
  /* 0x0010 */ struct _RTL_HANDLE_TABLE_ENTRY* FreeHandles;
  /* 0x0018 */ struct _RTL_HANDLE_TABLE_ENTRY* CommittedHandles;
  /* 0x0020 */ struct _RTL_HANDLE_TABLE_ENTRY* UnCommittedHandles;
  /* 0x0028 */ struct _RTL_HANDLE_TABLE_ENTRY* MaxReservedHandles;
} RTL_HANDLE_TABLE, *PRTL_HANDLE_TABLE; /* size: 0x0030 */

typedef struct _USER_INFO_1024
{
  /* 0x0000 */ unsigned long usri1024_country_code;
} USER_INFO_1024, *PUSER_INFO_1024; /* size: 0x0004 */

typedef struct _USE_INFO_0
{
  /* 0x0000 */ wchar_t* ui0_local;
  /* 0x0008 */ wchar_t* ui0_remote;
} USE_INFO_0, *PUSE_INFO_0; /* size: 0x0010 */

typedef struct _RTL_PROCESS_MODULE_INFORMATION_EX
{
  /* 0x0000 */ unsigned short NextOffset;
  /* 0x0002 */ char Padding_2185[6];
  /* 0x0008 */ struct _RTL_PROCESS_MODULE_INFORMATION BaseInfo;
  /* 0x0130 */ unsigned long ImageChecksum;
  /* 0x0134 */ unsigned long TimeDateStamp;
  /* 0x0138 */ void* DefaultBase;
} RTL_PROCESS_MODULE_INFORMATION_EX, *PRTL_PROCESS_MODULE_INFORMATION_EX; /* size: 0x0140 */

typedef struct _USER_INFO_1052
{
  /* 0x0000 */ wchar_t* usri1052_profile;
} USER_INFO_1052, *PUSER_INFO_1052; /* size: 0x0008 */

typedef struct _RTL_RESOURCE
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION CriticalSection;
  /* 0x0028 */ void* SharedSemaphore;
  /* 0x0030 */ volatile unsigned long NumberOfWaitingShared;
  /* 0x0034 */ long Padding_2186;
  /* 0x0038 */ void* ExclusiveSemaphore;
  /* 0x0040 */ volatile unsigned long NumberOfWaitingExclusive;
  /* 0x0044 */ volatile long NumberOfActive;
  /* 0x0048 */ void* ExclusiveOwnerThread;
  /* 0x0050 */ unsigned long Flags;
  /* 0x0054 */ long Padding_2187;
  /* 0x0058 */ struct _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
} RTL_RESOURCE, *PRTL_RESOURCE; /* size: 0x0060 */

typedef union _PROCESS_AFFINITY_UPDATE_MODE
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long EnableAutoUpdate : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long Permanent : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
} PROCESS_AFFINITY_UPDATE_MODE, *PPROCESS_AFFINITY_UPDATE_MODE; /* size: 0x0004 */

typedef struct _PROCESS_HANDLE_INFORMATION
{
  /* 0x0000 */ unsigned long HandleCount;
  /* 0x0004 */ unsigned long HandleCountHighWatermark;
} PROCESS_HANDLE_INFORMATION, *PPROCESS_HANDLE_INFORMATION; /* size: 0x0008 */

typedef struct _SERVER_INFO_1600
{
  /* 0x0000 */ unsigned char sv1598_disabledos;
} SERVER_INFO_1600, *PSERVER_INFO_1600; /* size: 0x0001 */

typedef struct _USER_MODALS_INFO_2
{
  /* 0x0000 */ wchar_t* usrmod2_domain_name;
  /* 0x0008 */ void* usrmod2_domain_id;
} USER_MODALS_INFO_2, *PUSER_MODALS_INFO_2; /* size: 0x0010 */

typedef struct _WKSTA_USER_INFO_1101
{
  /* 0x0000 */ wchar_t* wkui1101_oth_domains;
} WKSTA_USER_INFO_1101, *PWKSTA_USER_INFO_1101; /* size: 0x0008 */

typedef struct _PAGE_PRIORITY_INFORMATION
{
  /* 0x0000 */ unsigned long PagePriority;
} PAGE_PRIORITY_INFORMATION, *PPAGE_PRIORITY_INFORMATION; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1023
{
  /* 0x0000 */ unsigned long wki1023_siz_char_buf;
} WKSTA_INFO_1023, *PWKSTA_INFO_1023; /* size: 0x0004 */

typedef struct _CLIENT_ID64
{
  /* 0x0000 */ unsigned __int64 UniqueProcess;
  /* 0x0008 */ unsigned __int64 UniqueThread;
} CLIENT_ID64, *PCLIENT_ID64; /* size: 0x0010 */

class DmpPointer<enum XEEngineDiagnosticLevel>
{
  /* 0x0000 */ enum XEEngineDiagnosticLevel* m_pRaw;
}; /* size: 0x0008 */

typedef struct _CLUS_DISK_NUMBER_INFO
{
  /* 0x0000 */ unsigned long DiskNumber;
  /* 0x0004 */ unsigned long BytesPerSector;
} CLUS_DISK_NUMBER_INFO, *PCLUS_DISK_NUMBER_INFO; /* size: 0x0008 */

typedef struct _SHARE_INFO_1503
{
  /* 0x0000 */ struct _GUID shi1503_sharefilter;
} SHARE_INFO_1503, *PSHARE_INFO_1503; /* size: 0x0010 */

class XeCloudMinPkg::add_partition
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2188[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int read_only_databaseOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class CAutoP<IAutoSetXLvlIntCtxt>
{
}; /* size: 0x0008 */

class CAutoSetXLvlIntCtxt
{
  /* 0x0000 */ class CAutoP<IAutoSetXLvlIntCtxt> m_impl;
}; /* size: 0x0008 */

class XeCloudMinPkg::prepare_full_commit_mode
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2189[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::serepl_destructor_call
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2190[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int object_addressOffset;
    /* 0x0000 */ const int api_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeCloudMinPkg::kill_user_transactions
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2191[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int kill_flagsOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class DmpPointer<XEPackageMetadata>
{
  /* 0x0000 */ struct XEPackageMetadata* m_pRaw;
}; /* size: 0x0008 */

class XeCloudMinPkg::async_transport_lost_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2192[140];
      /* 0x0240 */ unsigned char m_buf[46];
    }; /* size: 0x003e */
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int destination_type_groupOffset;
    /* 0x0000 */ const int message_handleOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_flagsOffset;
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int ack_sequence_numberOffset;
    /* 0x0000 */ const int message_countOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_idOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0270 */

class XeCloudMinPkg::perfobject_cloud_partitions
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,56> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2193[140];
      /* 0x0240 */ unsigned char m_buf[430];
    }; /* size: 0x01be */
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int logical_reads_pagesOffset;
    /* 0x0000 */ const int logical_writes_pagesOffset;
    /* 0x0000 */ const int physical_reads_pagesOffset;
    /* 0x0000 */ const int active_worker_countOffset;
    /* 0x0000 */ const int active_session_countOffset;
    /* 0x0000 */ const int blocked_task_countOffset;
    /* 0x0000 */ const int lck_wait_timeOffset;
    /* 0x0000 */ const int page_io_latch_wait_timeOffset;
    /* 0x0000 */ const int async_network_io_wait_timeOffset;
    /* 0x0000 */ const int sos_scheduler_yield_wait_timeOffset;
    /* 0x0000 */ const int writelog_wait_timeOffset;
    /* 0x0000 */ const int repl_slow_secondary_throttle_wait_timeOffset;
    /* 0x0000 */ const int repl_item_completion_wait_timeOffset;
    /* 0x0000 */ const int repl_commit_ack_wait_timeOffset;
    /* 0x0000 */ const int repl_rollback_ack_wait_timeOffset;
    /* 0x0000 */ const int lck_wait_countOffset;
    /* 0x0000 */ const int page_io_latch_wait_countOffset;
    /* 0x0000 */ const int async_network_io_wait_countOffset;
    /* 0x0000 */ const int sos_scheduler_yield_wait_countOffset;
    /* 0x0000 */ const int writelog_wait_countOffset;
    /* 0x0000 */ const int repl_slow_secondary_throttle_wait_countOffset;
    /* 0x0000 */ const int repl_item_completion_wait_countOffset;
    /* 0x0000 */ const int repl_commit_ack_wait_countOffset;
    /* 0x0000 */ const int repl_rollback_ack_wait_countOffset;
    /* 0x0000 */ const int cpu_time_scopedOffset;
    /* 0x0000 */ const int logical_reads_pages_scopedOffset;
    /* 0x0000 */ const int logical_writes_pages_scopedOffset;
    /* 0x0000 */ const int physical_reads_pages_scopedOffset;
    /* 0x0000 */ const int physical_reads_scopedOffset;
    /* 0x0000 */ const int physical_writes_scopedOffset;
    /* 0x0000 */ const int cpu_time_secondaryOffset;
    /* 0x0000 */ const int physical_reads_secondaryOffset;
    /* 0x0000 */ const int physical_writes_secondaryOffset;
    /* 0x0000 */ const int page_io_latch_wait_time_scopedOffset;
    /* 0x0000 */ const int async_network_io_wait_time_scopedOffset;
    /* 0x0000 */ const int sos_scheduler_yield_wait_time_scopedOffset;
    /* 0x0000 */ const int writelog_wait_time_scopedOffset;
    /* 0x0000 */ const int repl_slow_secondary_throttle_wait_time_scopedOffset;
    /* 0x0000 */ const int repl_item_completion_wait_time_scopedOffset;
    /* 0x0000 */ const int repl_commit_ack_wait_time_scopedOffset;
    /* 0x0000 */ const int repl_rollback_ack_wait_time_scopedOffset;
    /* 0x0000 */ const int page_io_latch_wait_count_scopedOffset;
    /* 0x0000 */ const int async_network_io_wait_count_scopedOffset;
    /* 0x0000 */ const int sos_scheduler_yield_wait_count_scopedOffset;
    /* 0x0000 */ const int writelog_wait_count_scopedOffset;
    /* 0x0000 */ const int repl_slow_secondary_throttle_wait_count_scopedOffset;
    /* 0x0000 */ const int repl_item_completion_wait_count_scopedOffset;
    /* 0x0000 */ const int repl_commit_ack_wait_count_scopedOffset;
    /* 0x0000 */ const int repl_rollback_ack_wait_count_scopedOffset;
    /* 0x0000 */ const int resource_pool_idOffset;
    /* 0x0000 */ const int replica_typeOffset;
    /* 0x0000 */ const int app_nameOffset;
    /* 0x0000 */ const int tablegroup_nameOffset;
    /* 0x0000 */ const int low_keyOffset;
    /* 0x0000 */ const int high_keyOffset;
  }; /* size: 0x0988 */
}; /* size: 0x03f0 */

class XeCloudMinPkg::copy_to_secondary_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,18> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2194[140];
      /* 0x0240 */ unsigned char m_buf[131];
    }; /* size: 0x0093 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int copied_rowsOffset;
    /* 0x0000 */ const int copied_bytesOffset;
    /* 0x0000 */ const int batch_countOffset;
    /* 0x0000 */ const int batch_abortsOffset;
    /* 0x0000 */ const int mode_switch_countOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_clusterOffset;
    /* 0x0000 */ const int remote_serverOffset;
    /* 0x0000 */ const int remote_databaseOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_groupOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x03c0 */
}; /* size: 0x02c8 */

class XeCloudMinPkg::physical_seeding_copy_from_primary_complete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2195[140];
      /* 0x0240 */ unsigned char m_buf[90];
    }; /* size: 0x006a */
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int forwarder_epochOffset;
    /* 0x0000 */ const int forwarder_csnOffset;
    /* 0x0000 */ const int copied_bytesOffset;
    /* 0x0000 */ const int remote_versionOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int remote_cluster_nameOffset;
    /* 0x0000 */ const int remote_server_nameOffset;
    /* 0x0000 */ const int remote_app_nameOffset;
    /* 0x0000 */ const int remote_table_group_nameOffset;
    /* 0x0000 */ const int remote_low_keyOffset;
    /* 0x0000 */ const int remote_high_keyOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x02a0 */

class XeCloudMinPkg::secondary_process_rollback_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2196[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
    /* 0x0000 */ const int xact_for_idempotent_flushOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeCloudMinPkg::return_csn
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2197[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int current_epochOffset;
    /* 0x0000 */ const int current_csnOffset;
    /* 0x0000 */ const int truncated_epochOffset;
    /* 0x0000 */ const int truncated_csnOffset;
    /* 0x0000 */ const int inmemory_truncated_epochOffset;
    /* 0x0000 */ const int inmemory_truncated_csnOffset;
    /* 0x0000 */ const int persisted_truncated_epochOffset;
    /* 0x0000 */ const int persisted_truncated_csnOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class XeCloudMinPkg::shared_pool_session_killed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2198[140];
      /* 0x0240 */ unsigned char m_buf[72];
    }; /* size: 0x0058 */
    /* 0x0000 */ const int available_cpu_timeOffset;
    /* 0x0000 */ const int available_logical_readsOffset;
    /* 0x0000 */ const int available_logical_writesOffset;
    /* 0x0000 */ const int batch_cpu_timeOffset;
    /* 0x0000 */ const int batch_logical_readsOffset;
    /* 0x0000 */ const int batch_logical_writesOffset;
    /* 0x0000 */ const int cpu_time_refill_rateOffset;
    /* 0x0000 */ const int logical_reads_refill_rateOffset;
    /* 0x0000 */ const int logical_writes_refill_rateOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0288 */

class XeCloudMinPkg::secondary_commit_wait
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2199[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeCloudMinPkg::async_transport_send_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2200[140];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x002a */
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int message_handleOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeCloudMinPkg::create_queue_snapshot
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2201[140];
      /* 0x0240 */ unsigned char m_buf[31];
    }; /* size: 0x002f */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cloud_partition_idOffset;
    /* 0x0000 */ const int is_extendOffset;
    /* 0x0000 */ const int update_reasonOffset;
    /* 0x0000 */ const int xact_csnOffset;
    /* 0x0000 */ const int xact_epochOffset;
    /* 0x0000 */ const int xact_lsn_fseqnoOffset;
    /* 0x0000 */ const int xact_lsn_offsetOffset;
    /* 0x0000 */ const int xact_lsn_slotidOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0260 */

class CAutoBase<XE_Timer>
{
  /* 0x0000 */ class XE_Timer* m_pt;
}; /* size: 0x0008 */

class XeCloudMinPkg::prepare_shutdown
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeCloudMinPkg::async_transport_disconnect
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2202[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int destination_descriptionOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::remove_partition
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2203[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int durationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeCloudMinPkg::primary_commit_wait
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2204[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int epochOffset;
    /* 0x0000 */ const int csnOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeCloudMinPkg::primary_send_rollback_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2205[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int xact_idOffset;
    /* 0x0000 */ const int transaction_time_stampOffset;
    /* 0x0000 */ const int xact_for_idempotent_flushOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

typedef struct _EXCEPTION_LOG
{
  /* 0x0000 */ struct _EXCEPTION_RECORD ExceptionRecord;
  /* 0x0098 */ long Padding_2206[2];
  /* 0x00a0 */ struct _CONTEXT ContextRecord;
  /* 0x0570 */ enum _EXCEPTION_LOG_TYPE Type;
  /* 0x0574 */ long Disposition;
  /* 0x0578 */ unsigned __int64 Thread;
  /* 0x0580 */ unsigned __int64 ControlPc;
  /* 0x0588 */ void* Handler;
} EXCEPTION_LOG, *PEXCEPTION_LOG; /* size: 0x0590 */

typedef struct _SYSTEM_MEMORY_CHANNEL_INFORMATION
{
  /* 0x0000 */ unsigned long ChannelNumber;
  /* 0x0004 */ unsigned long ChannelHeatIndex;
  /* 0x0008 */ unsigned __int64 TotalPageCount;
  /* 0x0010 */ unsigned __int64 ZeroPageCount;
  /* 0x0018 */ unsigned __int64 FreePageCount;
  /* 0x0020 */ unsigned __int64 StandbyPageCount;
} SYSTEM_MEMORY_CHANNEL_INFORMATION, *PSYSTEM_MEMORY_CHANNEL_INFORMATION; /* size: 0x0028 */

typedef struct _COVERAGE_SECTION_HEADER
{
  /* 0x0000 */ unsigned long Signature;
  /* 0x0004 */ unsigned long CoverageType;
  /* 0x0008 */ unsigned char MD5Hash[16];
  /* 0x0018 */ unsigned long CoverageSectionSize;
  /* 0x001c */ unsigned long CoverageVectorSize;
  /* 0x0020 */ unsigned long CoverageVectorOffset;
  /* 0x0024 */ unsigned long ExtraDataOffset;
} COVERAGE_SECTION_HEADER, *PCOVERAGE_SECTION_HEADER; /* size: 0x0028 */

typedef struct _PROCESS_HANDLE_TABLE_ENTRY_INFO
{
  /* 0x0000 */ void* HandleValue;
  /* 0x0008 */ unsigned __int64 HandleCount;
  /* 0x0010 */ unsigned __int64 PointerCount;
  /* 0x0018 */ unsigned long GrantedAccess;
  /* 0x001c */ unsigned long ObjectTypeIndex;
  /* 0x0020 */ unsigned long HandleAttributes;
  /* 0x0024 */ unsigned long Reserved;
} PROCESS_HANDLE_TABLE_ENTRY_INFO, *PPROCESS_HANDLE_TABLE_ENTRY_INFO; /* size: 0x0028 */

typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long DataLength;
  /* 0x0008 */ unsigned char Data[1];
  /* 0x0009 */ char __PADDING__[3];
} KEY_VALUE_PARTIAL_INFORMATION_ALIGN64, *PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64; /* size: 0x000c */

typedef struct _KEY_VALUE_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned long TitleIndex;
  /* 0x0004 */ unsigned long Type;
  /* 0x0008 */ unsigned long NameLength;
  /* 0x000c */ wchar_t Name[1];
  /* 0x000e */ char __PADDING__[2];
} KEY_VALUE_BASIC_INFORMATION, *PKEY_VALUE_BASIC_INFORMATION; /* size: 0x0010 */

typedef struct _SERVER_INFO_1548
{
  /* 0x0000 */ unsigned long sv1548_errorthreshold;
} SERVER_INFO_1548, *PSERVER_INFO_1548; /* size: 0x0004 */

typedef struct _MSA_INFO_0
{
  /* 0x0000 */ enum _MSA_INFO_STATE State;
} MSA_INFO_0, *PMSA_INFO_0; /* size: 0x0004 */

typedef struct _NET_VALIDATE_PASSWORD_RESET_INPUT_ARG
{
  /* 0x0000 */ struct _NET_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
  /* 0x0030 */ wchar_t* ClearPassword;
  /* 0x0038 */ wchar_t* UserAccountName;
  /* 0x0040 */ struct _NET_VALIDATE_PASSWORD_HASH HashedPassword;
  /* 0x0050 */ unsigned char PasswordMustChangeAtNextLogon;
  /* 0x0051 */ unsigned char ClearLockout;
  /* 0x0052 */ char __PADDING__[6];
} NET_VALIDATE_PASSWORD_RESET_INPUT_ARG, *PNET_VALIDATE_PASSWORD_RESET_INPUT_ARG; /* size: 0x0058 */

typedef struct _AE_RESACCESS
{
  /* 0x0000 */ unsigned long ae_ra_compname;
  /* 0x0004 */ unsigned long ae_ra_username;
  /* 0x0008 */ unsigned long ae_ra_resname;
  /* 0x000c */ unsigned long ae_ra_operation;
  /* 0x0010 */ unsigned long ae_ra_returncode;
  /* 0x0014 */ unsigned long ae_ra_restype;
  /* 0x0018 */ unsigned long ae_ra_fileid;
} AE_RESACCESS, *PAE_RESACCESS; /* size: 0x001c */

typedef struct _EISA_PORT_DESCRIPTOR
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned char NumberPorts : 5; /* bit position: 0 */
    /* 0x0000 */ unsigned char Reserved : 1; /* bit position: 5 */
    /* 0x0000 */ unsigned char Shared : 1; /* bit position: 6 */
    /* 0x0000 */ unsigned char MoreEntries : 1; /* bit position: 7 */
  }; /* bitfield */
} EISA_PORT_DESCRIPTOR, *PEISA_PORT_DESCRIPTOR; /* size: 0x0001 */

typedef struct _CM_FLOPPY_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ char Size[8];
  /* 0x000c */ unsigned long MaxDensity;
  /* 0x0010 */ unsigned long MountDensity;
  /* 0x0014 */ unsigned char StepRateHeadUnloadTime;
  /* 0x0015 */ unsigned char HeadLoadTime;
  /* 0x0016 */ unsigned char MotorOffTime;
  /* 0x0017 */ unsigned char SectorLengthCode;
  /* 0x0018 */ unsigned char SectorPerTrack;
  /* 0x0019 */ unsigned char ReadWriteGapLength;
  /* 0x001a */ unsigned char DataTransferLength;
  /* 0x001b */ unsigned char FormatGapLength;
  /* 0x001c */ unsigned char FormatFillCharacter;
  /* 0x001d */ unsigned char HeadSettleTime;
  /* 0x001e */ unsigned char MotorSettleTime;
  /* 0x001f */ unsigned char MaximumTrackValue;
  /* 0x0020 */ unsigned char DataTransferRate;
  /* 0x0021 */ char __PADDING__[3];
} CM_FLOPPY_DEVICE_DATA, *PCM_FLOPPY_DEVICE_DATA; /* size: 0x0024 */

typedef struct _ACTRL_ALISTW
{
  /* 0x0000 */ unsigned long cEntries;
  /* 0x0004 */ long Padding_2207;
  /* 0x0008 */ struct _ACTRL_PROPERTY_ENTRYW* pPropertyAccessList;
} ACTRL_ALISTW, *PACTRL_ALISTW; /* size: 0x0010 */

typedef struct _LEARNING_MODE_OBJECT_INFORMATION
{
  /* 0x0000 */ struct _SINGLE_LIST_ENTRY ListEntry;
  /* 0x0008 */ enum _LEARNING_MODE_LOG_LEVEL LogLevel;
  /* 0x000c */ long Padding_2208;
  /* 0x0010 */ struct _UNICODE_STRING* ObjectType;
  /* 0x0018 */ struct _UNICODE_STRING* ObjectName;
  /* 0x0020 */ void* RootDirectory;
  /* 0x0028 */ struct _UNICODE_STRING FullObjectName;
} LEARNING_MODE_OBJECT_INFORMATION, *PLEARNING_MODE_OBJECT_INFORMATION; /* size: 0x0038 */

typedef struct _LOCALGROUP_MEMBERS_INFO_2
{
  /* 0x0000 */ void* lgrmi2_sid;
  /* 0x0008 */ enum _SID_NAME_USE lgrmi2_sidusage;
  /* 0x000c */ long Padding_2209;
  /* 0x0010 */ wchar_t* lgrmi2_domainandname;
} LOCALGROUP_MEMBERS_INFO_2, *PLOCALGROUP_MEMBERS_INFO_2; /* size: 0x0018 */

class XeCMPkg::cma_enlistment_no_reply_recieved
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2210[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

typedef struct _SYSTEM_CODEINTEGRITY_INFORMATION
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ unsigned long CodeIntegrityOptions;
} SYSTEM_CODEINTEGRITY_INFORMATION, *PSYSTEM_CODEINTEGRITY_INFORMATION; /* size: 0x0008 */

typedef struct _USER_INFO_1006
{
  /* 0x0000 */ wchar_t* usri1006_home_dir;
} USER_INFO_1006, *PUSER_INFO_1006; /* size: 0x0008 */

typedef struct _SERVER_INFO_1516
{
  /* 0x0000 */ int sv1516_timesource;
} SERVER_INFO_1516, *PSERVER_INFO_1516; /* size: 0x0004 */

struct IDBInfo
{
}; /* size: 0x0008 */

struct tagDBCOLUMNINFO
{
  /* 0x0000 */ wchar_t* pwszName;
  /* 0x0008 */ struct ITypeInfo* pTypeInfo;
  /* 0x0010 */ unsigned __int64 iOrdinal;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ long Padding_2211;
  /* 0x0020 */ unsigned __int64 ulColumnSize;
  /* 0x0028 */ unsigned short wType;
  /* 0x002a */ unsigned char bPrecision;
  /* 0x002b */ unsigned char bScale;
  /* 0x002c */ long Padding_2212;
  /* 0x0030 */ struct tagDBID columnid;
}; /* size: 0x0050 */

typedef struct _LDR_FAILURE_DATA
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ wchar_t ImageName[32];
  /* 0x0044 */ wchar_t AdditionalInfo[32];
} LDR_FAILURE_DATA, *PLDR_FAILURE_DATA; /* size: 0x0084 */

typedef struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfLogicalProcessors;
  /* 0x0004 */ unsigned long NumberOfCores;
} SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION, *PSYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION; /* size: 0x0008 */

class XeCMPkg::cm_enlistment_close_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2213[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

typedef struct _SERVER_INFO_101
{
  /* 0x0000 */ unsigned long sv101_platform_id;
  /* 0x0004 */ long Padding_2214;
  /* 0x0008 */ wchar_t* sv101_name;
  /* 0x0010 */ unsigned long sv101_version_major;
  /* 0x0014 */ unsigned long sv101_version_minor;
  /* 0x0018 */ unsigned long sv101_type;
  /* 0x001c */ long Padding_2215;
  /* 0x0020 */ wchar_t* sv101_comment;
} SERVER_INFO_101, *PSERVER_INFO_101; /* size: 0x0028 */

typedef struct _JOURNAL_ABSOLUTE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER StartTimeStamp;
  /* 0x0008 */ union _LARGE_INTEGER EndTimeStamp;
  /* 0x0010 */ unsigned __int64 NumberOfRecords;
  /* 0x0018 */ unsigned long FillLevel;
  /* 0x001c */ long __PADDING__[1];
} JOURNAL_ABSOLUTE_INFORMATION, *PJOURNAL_ABSOLUTE_INFORMATION; /* size: 0x0020 */

struct tagDB_NUMERIC
{
  /* 0x0000 */ unsigned char precision;
  /* 0x0001 */ unsigned char scale;
  /* 0x0002 */ unsigned char sign;
  /* 0x0003 */ unsigned char val[16];
}; /* size: 0x0013 */

typedef struct _CLUSTER_BATCH_COMMAND
{
  /* 0x0000 */ enum _CLUSTER_REG_COMMAND Command;
  /* 0x0004 */ unsigned long dwOptions;
  /* 0x0008 */ const wchar_t* wzName;
  /* 0x0010 */ const unsigned char* lpData;
  /* 0x0018 */ unsigned long cbData;
  /* 0x001c */ long __PADDING__[1];
} CLUSTER_BATCH_COMMAND, *PCLUSTER_BATCH_COMMAND; /* size: 0x0020 */

typedef struct _PLEX_READ_DATA_REQUEST
{
  /* 0x0000 */ union _LARGE_INTEGER ByteOffset;
  /* 0x0008 */ unsigned long ByteLength;
  /* 0x000c */ unsigned long PlexNumber;
} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST; /* size: 0x0010 */

typedef struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION
{
  /* 0x0000 */ unsigned long TimeAdjustment;
  /* 0x0004 */ unsigned long TimeIncrement;
  /* 0x0008 */ unsigned char Enable;
  /* 0x0009 */ char __PADDING__[3];
} SYSTEM_QUERY_TIME_ADJUST_INFORMATION, *PSYSTEM_QUERY_TIME_ADJUST_INFORMATION; /* size: 0x000c */

struct XE_TArray<XEMap *,126>
{
  /* 0x0000 */ struct XEMap* m_array[126];
}; /* size: 0x03f0 */

typedef struct _SERVICE_INFO_0
{
  /* 0x0000 */ wchar_t* svci0_name;
} SERVICE_INFO_0, *PSERVICE_INFO_0; /* size: 0x0008 */

typedef struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS
{
  /* 0x0000 */ void* KeyHandle;
  /* 0x0008 */ struct _UNICODE_STRING* ValueNamePointer;
  /* 0x0010 */ unsigned long* RequiredLengthPointer;
  /* 0x0018 */ unsigned char* Buffer;
  /* 0x0020 */ unsigned long BufferLength;
  /* 0x0024 */ unsigned long Type;
  /* 0x0028 */ unsigned char* AppendBuffer;
  /* 0x0030 */ unsigned long AppendBufferLength;
  /* 0x0034 */ unsigned char CreateIfDoesntExist;
  /* 0x0035 */ unsigned char TruncateExistingValue;
  /* 0x0036 */ char __PADDING__[2];
} SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS, *PSYSTEM_REGISTRY_APPEND_STRING_PARAMETERS; /* size: 0x0038 */

typedef struct _PROCESS_WINDOW_INFORMATION
{
  /* 0x0000 */ unsigned long WindowFlags;
  /* 0x0004 */ unsigned short WindowTitleLength;
  /* 0x0006 */ wchar_t WindowTitle[1];
} PROCESS_WINDOW_INFORMATION, *PPROCESS_WINDOW_INFORMATION; /* size: 0x0008 */

typedef struct _THREAD_TEB_INFORMATION
{
  /* 0x0000 */ void* TebInformation;
  /* 0x0008 */ unsigned long TebOffset;
  /* 0x000c */ unsigned long BytesToRead;
} THREAD_TEB_INFORMATION, *PTHREAD_TEB_INFORMATION; /* size: 0x0010 */

typedef struct _USER_INFO_1007
{
  /* 0x0000 */ wchar_t* usri1007_comment;
} USER_INFO_1007, *PUSER_INFO_1007; /* size: 0x0008 */

typedef struct _POOLED_USAGE_AND_LIMITS
{
  /* 0x0000 */ unsigned __int64 PeakPagedPoolUsage;
  /* 0x0008 */ unsigned __int64 PagedPoolUsage;
  /* 0x0010 */ unsigned __int64 PagedPoolLimit;
  /* 0x0018 */ unsigned __int64 PeakNonPagedPoolUsage;
  /* 0x0020 */ unsigned __int64 NonPagedPoolUsage;
  /* 0x0028 */ unsigned __int64 NonPagedPoolLimit;
  /* 0x0030 */ unsigned __int64 PeakPagefileUsage;
  /* 0x0038 */ unsigned __int64 PagefileUsage;
  /* 0x0040 */ unsigned __int64 PagefileLimit;
} POOLED_USAGE_AND_LIMITS, *PPOOLED_USAGE_AND_LIMITS; /* size: 0x0048 */

class XeSqlPkg::redo_stop_set
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2216[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int stop_markOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::glm_primary_brick_release_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2217[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::query_rpc_prepare_cmd_set_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2218[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::parallel_producer_open
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::parallel_scan_range_created
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2219[143];
      /* 0x0240 */ unsigned char m_buf[100];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int worker_idOffset;
    /* 0x0000 */ const int range_idOffset;
    /* 0x0000 */ const int original_worker_idOffset;
    /* 0x0000 */ const int pages_in_rangeOffset;
    /* 0x0000 */ const int pages_in_queueOffset;
    /* 0x0000 */ const int outstanding_pagesOffset;
    /* 0x0000 */ const int ranges_in_queueOffset;
    /* 0x0000 */ const int start_keyOffset;
    /* 0x0000 */ const int end_keyOffset;
  }; /* size: 0x0068 */
}; /* size: 0x02a8 */

class XeSqlPkg::hadr_db_manager_backup_sync_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2220[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int message_sub_typeOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::parallel_scan_readahead_fixup
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2221[143];
      /* 0x0240 */ unsigned char m_buf[80];
    }; /* size: 0x0054 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_in_queueOffset;
    /* 0x0000 */ const int pages_in_queueOffset;
    /* 0x0000 */ const int read_ahead_distanceOffset;
    /* 0x0000 */ const int fixup_range_idOffset;
    /* 0x0000 */ const int fixup_base_posOffset;
    /* 0x0000 */ const int range_idOffset;
    /* 0x0000 */ const int range_worker_idOffset;
    /* 0x0000 */ const int range_base_posOffset;
    /* 0x0000 */ const int adjusted_read_ahead_distanceOffset;
  }; /* size: 0x0054 */
}; /* size: 0x0290 */

class XeSqlPkg::page_compression_tracing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2222[140];
      /* 0x0240 */ unsigned char m_buf[30];
    }; /* size: 0x002e */
    /* 0x0000 */ const int opcodeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int call_durationOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class XeSqlPkg::column_store_rowgroup_readahead_issued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2223[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int rowgroup_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int accessor_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::fulltext_reorganize_progress
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2224[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int percent_completeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::index_description_unpin
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2225[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::query_remote_memory_pre_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2226[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int required_remote_memory_pagesOffset;
    /* 0x0000 */ const int additional_remote_memory_pages_preferredOffset;
    /* 0x0000 */ const int additional_remote_memory_pages_actualOffset;
    /* 0x0000 */ const int granted_local_memory_pagesOffset;
    /* 0x0000 */ const int max_memory_pages_for_one_query_fragmentOffset;
    /* 0x0000 */ const int max_total_wait_timeoutOffset;
    /* 0x0000 */ const int local_waited_durationOffset;
    /* 0x0000 */ const int remote_wait_time_limitOffset;
    /* 0x0000 */ const int total_remote_memory_target_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_granted_pagesOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

class XeSqlPkg::mbr_redo_target_age
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2227[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int backup_worker_idOffset;
    /* 0x0000 */ const int target_ageOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::broker_transmission_deliverysm_event_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2228[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class XeSqlPkg::begin_tran_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2229[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0148 */
}; /* size: 0x0248 */

class XeSqlPkg::drop_file_rollback
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2230[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeUcsPkg::ucs_transmitter_reclassify
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2231[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int phaseOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::bitmap_data_finalize
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2232[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int pagesOffset;
    /* 0x0000 */ const int rowsOffset;
    /* 0x0000 */ const int bitsOffset;
    /* 0x0000 */ const int numa_node_idOffset;
    /* 0x0000 */ const int actual_densityOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeSqlPkg::full_text_crawl_stopped
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2233[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0198 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_apply_vlfheader
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2234[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int hadr_database_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::log_cache_write_block
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

struct tagDBPARAMBINDINFO
{
  /* 0x0000 */ wchar_t* pwszDataSourceType;
  /* 0x0008 */ wchar_t* pwszName;
  /* 0x0010 */ unsigned __int64 ulParamSize;
  /* 0x0018 */ unsigned long dwFlags;
  /* 0x001c */ unsigned char bPrecision;
  /* 0x001d */ unsigned char bScale;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

class XeSqlPkg::hekaton_api_failure_injection
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2235[143];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x000d */
    /* 0x0000 */ const int api_idOffset;
    /* 0x0000 */ const int resultOffset;
  }; /* size: 0x000d */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_transport_flow_control_action
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2236[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int control_actionOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int target_availability_replica_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::metadata_version_update
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2237[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cache_typeOffset;
    /* 0x0000 */ const int versionOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::broker_dialog_transmission_queue_dequeue
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2238[140];
      /* 0x0240 */ unsigned char m_buf[69];
    }; /* size: 0x0055 */
    /* 0x0000 */ const int message_sequence_numberOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int message_referenceOffset;
    /* 0x0000 */ const int from_service_nameOffset;
    /* 0x0000 */ const int to_service_nameOffset;
    /* 0x0000 */ const int from_broker_instanceOffset;
    /* 0x0000 */ const int to_broker_instanceOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0288 */

class XeSqlPkg::long_io_detected
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2239[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int occurrencesOffset;
    /* 0x0000 */ const int longer_than_secOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int last_long_io_offsetOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

typedef struct _AE_CLOSEFILE
{
  /* 0x0000 */ unsigned long ae_cf_compname;
  /* 0x0004 */ unsigned long ae_cf_username;
  /* 0x0008 */ unsigned long ae_cf_resname;
  /* 0x000c */ unsigned long ae_cf_fileid;
  /* 0x0010 */ unsigned long ae_cf_duration;
  /* 0x0014 */ unsigned long ae_cf_reason;
} AE_CLOSEFILE, *PAE_CLOSEFILE; /* size: 0x0018 */

class XeSqlPkg::thread_cache_context_shipping
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2240[143];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x000d */
    /* 0x0000 */ const int shipped_typeOffset;
    /* 0x0000 */ const int last_session_idOffset;
  }; /* size: 0x000d */
}; /* size: 0x0250 */

class XeSqlPkg::log_cache_buffer_refcounter_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2241[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int start_log_block_idOffset;
    /* 0x0000 */ const int last_log_block_idOffset;
    /* 0x0000 */ const int private_consumer_idOffset;
    /* 0x0000 */ const int change_typeOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::cpu_threshold_exceeded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2242[140];
      /* 0x0240 */ unsigned char m_buf[14];
    }; /* size: 0x001e */
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int group_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::query_rpc_prepare_cmd_goto_marker
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeSqlPkg::broker_corrupted_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2243[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int corruption_descriptionOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::dq_session_cache_remove
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2244[143];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x003c */
    /* 0x0000 */ const int remote_server_idOffset;
    /* 0x0000 */ const int user_idOffset;
    /* 0x0000 */ const int nt_user_idOffset;
    /* 0x0000 */ const int provider_string_openrowsetOffset;
    /* 0x0000 */ const int datasource_openrowsetOffset;
    /* 0x0000 */ const int location_openrowsetOffset;
    /* 0x0000 */ const int catalog_openrowsetOffset;
  }; /* size: 0x003c */
}; /* size: 0x0278 */

class XeSqlPkg::query_execution_batch_hash_aggregation_finished
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2245[140];
      /* 0x0240 */ unsigned char m_buf[74];
    }; /* size: 0x005a */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int pure_group_by_columns_rows_numberOffset;
    /* 0x0000 */ const int max_allocated_deep_data_sizeOffset;
    /* 0x0000 */ const int garbage_collected_deep_data_sizeOffset;
    /* 0x0000 */ const int max_allocated_hash_table_data_sizeOffset;
    /* 0x0000 */ const int cpu_cycles_per_rowOffset;
    /* 0x0000 */ const int local_aggregation_usedOffset;
    /* 0x0000 */ const int spilled_data_sizeOffset;
    /* 0x0000 */ const int spilled_hard_partitions_numberOffset;
    /* 0x0000 */ const int spilled_rows_numberOffset;
    /* 0x0000 */ const int soft_partitions_numberOffset;
    /* 0x0000 */ const int fast_comparison_usedOffset;
    /* 0x0000 */ const int fast_aggregation_columns_numberOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0290 */

class XeSqlPkg::module_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2246[140];
      /* 0x0240 */ unsigned char m_buf[60];
    }; /* size: 0x004c */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x02b0 */
}; /* size: 0x0280 */

class XeSqlPkg::connectivity_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,28> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2247[140];
      /* 0x0240 */ unsigned char m_buf[124];
    }; /* size: 0x008c */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int sourceOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int os_errorOffset;
    /* 0x0000 */ const int sni_errorOffset;
    /* 0x0000 */ const int sni_consumer_errorOffset;
    /* 0x0000 */ const int sni_providerOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int local_portOffset;
    /* 0x0000 */ const int remote_portOffset;
    /* 0x0000 */ const int tds_input_buffer_errorOffset;
    /* 0x0000 */ const int tds_output_buffer_errorOffset;
    /* 0x0000 */ const int tds_input_buffer_bytesOffset;
    /* 0x0000 */ const int tds_flagsOffset;
    /* 0x0000 */ const int total_login_time_msOffset;
    /* 0x0000 */ const int login_task_enqueued_msOffset;
    /* 0x0000 */ const int network_writes_msOffset;
    /* 0x0000 */ const int network_reads_msOffset;
    /* 0x0000 */ const int ssl_processing_msOffset;
    /* 0x0000 */ const int sspi_processing_msOffset;
    /* 0x0000 */ const int login_trigger_and_resource_governor_processing_msOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int connection_peer_idOffset;
    /* 0x0000 */ const int local_hostOffset;
    /* 0x0000 */ const int remote_hostOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0580 */
}; /* size: 0x02c0 */

class XeSqlPkg::dq_session_cache_flush
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::missing_join_predicate
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeSqlPkg::query_post_execution_showplan
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,11> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2248[140];
      /* 0x0240 */ unsigned char m_buf[60];
    }; /* size: 0x004c */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int nest_levelOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int estimated_rowsOffset;
    /* 0x0000 */ const int estimated_costOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int showplan_xmlOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x02d8 */
}; /* size: 0x0280 */

class XeSqlPkg::sort_state_change_tracing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2249[140];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x002a */
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int allocation_unit_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int event_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::metadata_cache_hit
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2250[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int cache_typeOffset;
    /* 0x0000 */ const int keyOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::minlog_doubleflush_failpoint
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2251[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int fail_locationOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::metadata_delete_local_temp_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2252[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::hadr_tds_synchronizer_payload_skip
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2253[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int listener_idOffset;
    /* 0x0000 */ const int dns_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::redo_worker_exit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2254[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::file_recreate_failure
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2255[143];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x000e */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_nameOffset;
  }; /* size: 0x000e */
}; /* size: 0x0250 */

class XeSqlPkg::query_compile_prepared
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::hadr_filestream_processed_block
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2256[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::lock_cancel
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2257[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

class XeSqlPkg::query_rpc_process_cmd_delete_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2258[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int rowOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::query_rpc_prepare_cmd_set_range_with_cached_keys
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2259[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int one_rowOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rpc_go_dormant
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2260[140];
      /* 0x0240 */ unsigned char m_buf[2];
    }; /* size: 0x0012 */
    /* 0x0000 */ const int in_clone_loopOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::query_rpc_insert_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2261[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::hadr_transport_route_message
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2262[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int target_availability_replica_idOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class XeSqlPkg::broker_transmission_object_delete_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2263[140];
      /* 0x0240 */ unsigned char m_buf[30];
    }; /* size: 0x002e */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int removed_from_worktableOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class XeSqlPkg::columnstore_tuple_mover_end_compress
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2264[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int delta_store_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::security_cache_database_object_insert
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2265[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int securable_classOffset;
    /* 0x0000 */ const int securable_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::mbr_protocol
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2266[143];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x000f */
    /* 0x0000 */ const int backup_worker_idOffset;
    /* 0x0000 */ const int is_sendOffset;
    /* 0x0000 */ const int is_pre_eventOffset;
    /* 0x0000 */ const int is_requestOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000f */
}; /* size: 0x0250 */

class XeSqlPkg::query_driver_received_activation_not_fully_populated
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::background_job_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2267[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int job_failure_typeOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int job_idOffset;
    /* 0x0000 */ const int job_typeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int retriesOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0300 */
}; /* size: 0x0270 */

class XeSqlPkg::hadr_filestream_directory_create
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2268[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int directory_pathOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::profile_compile_time
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2269[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int elapsed_since_start_msOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::host_task_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2270[140];
      /* 0x0240 */ unsigned char m_buf[64];
    }; /* size: 0x0050 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int host_task_addressOffset;
    /* 0x0000 */ const int thread_affinity_countOffset;
    /* 0x0000 */ const int leave_runtime_countOffset;
    /* 0x0000 */ const int non_yielding_countOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int abort_stateOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x02b0 */
}; /* size: 0x0280 */

class XeSqlPkg::bad_memory_fixed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2271[140];
      /* 0x0240 */ unsigned char m_buf[39];
    }; /* size: 0x0037 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int page_addressOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int dirty_pageOffset;
    /* 0x0000 */ const int database_nameOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class XeSqlPkg::attention
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2272[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int request_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::oiblob_cleanup_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2273[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int owner_rowsetOffset;
    /* 0x0000 */ const int tracking_table_rowsetOffset;
    /* 0x0000 */ const int secondary_rowsetOffset;
    /* 0x0000 */ const int cleanup_resultOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::unmatched_filtered_indexes
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2274[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int compile_timeOffset;
    /* 0x0000 */ const int unmatched_database_nameOffset;
    /* 0x0000 */ const int unmatched_schema_nameOffset;
    /* 0x0000 */ const int unmatched_table_nameOffset;
    /* 0x0000 */ const int unmatched_index_nameOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::security_error_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2275[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int error_codeOffset;
    /* 0x0000 */ const int api_nameOffset;
    /* 0x0000 */ const int calling_api_nameOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0238 */
}; /* size: 0x0270 */

class XeSqlPkg::hadr_online_availability_group_first_attempt_failure
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2276[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int retry_interval_msOffset;
    /* 0x0000 */ const int max_retry_countOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeCMPkg::cma_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2277[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::query_rpc_prepare_cmd_set_marker
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeSqlPkg::ioaff_node_summary
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2278[140];
      /* 0x0240 */ unsigned char m_buf[132];
    }; /* size: 0x0094 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int total_pages_readOffset;
    /* 0x0000 */ const int total_pages_processedOffset;
    /* 0x0000 */ const int total_ranges_processedOffset;
    /* 0x0000 */ const int total_ranges_generated_for_localOffset;
    /* 0x0000 */ const int total_ranges_generated_for_remoteOffset;
    /* 0x0000 */ const int total_ranges_local_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_ranges_remote_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_pages_local_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_pages_remote_rebalanced_to_thisOffset;
    /* 0x0000 */ const int total_ranges_local_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_ranges_remote_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_pages_local_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_pages_remote_rebalanced_from_thisOffset;
    /* 0x0000 */ const int total_time_msOffset;
  }; /* size: 0x0398 */
}; /* size: 0x02c8 */

class XeSqlPkg::alter_table_update_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2279[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int reasonOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

struct XBitmap<StaticStorage<402> >
{
  /* 0x0000 */ struct StaticStorage<402> m_storage;
}; /* size: 0x0034 */

class XeSqlPkg::broker_transmission_timer_fire
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2280[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int timerOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::latch_acquire_time
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2281[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int latch_addressOffset;
    /* 0x0000 */ const int duration_cyclesOffset;
    /* 0x0000 */ const int sample_countOffset;
    /* 0x0000 */ const int reference_countOffset;
    /* 0x0000 */ const int total_duration_cyclesOffset;
    /* 0x0000 */ const int promotion_threshold_cyclesOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int statusOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0278 */

class XeSqlPkg::query_rpc_prepare_cmd_prepare_to_delete
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeSqlPkg::logconsolidation_sectors_moved_to_data
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2282[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int sectors_movedOffset;
    /* 0x0000 */ const int sectors_clearedOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::file_read_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2283[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
  }; /* size: 0x0260 */
}; /* size: 0x0270 */

class XeSqlPkg::xtp_db_page_allocation_disallowed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2284[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int resource_pool_idOffset;
    /* 0x0000 */ const int xtp_memory_broker_target_allocationsOffset;
    /* 0x0000 */ const int xtp_memory_broker_allocationsOffset;
    /* 0x0000 */ const int xtp_memory_broker_overall_memoryOffset;
    /* 0x0000 */ const int system_physical_memory_highOffset;
    /* 0x0000 */ const int system_virtual_memory_lowOffset;
    /* 0x0000 */ const int process_physical_memory_lowOffset;
    /* 0x0000 */ const int process_virtual_memory_lowOffset;
    /* 0x0000 */ const int grace_periodOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0268 */

class SQLMemoryReportText
{
}; /* size: 0x0008 */

class XeSqlPkg::trace_print
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2285[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int messageOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::sort_memory_grant_adjustment
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2286[140];
      /* 0x0240 */ unsigned char m_buf[38];
    }; /* size: 0x0036 */
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int allocation_unit_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int previous_grant_in_pagesOffset;
    /* 0x0000 */ const int requested_grant_in_pagesOffset;
    /* 0x0000 */ const int grant_delta_in_pagesOffset;
    /* 0x0000 */ const int new_grant_in_pagesOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0268 */

class XeSqlPkg::query_rpc_release_accessor
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2287[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::database_migrate_to_matrix
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2288[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int recovery_unit_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

struct XACTOPT
{
  /* 0x0000 */ unsigned long ulTimeout;
  /* 0x0004 */ char szDescription[40];
}; /* size: 0x002c */

class XeSqlPkg::filestream_file_io_failure
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,6,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2289[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int locationOffset;
    /* 0x0000 */ const int descriptionOffset;
    /* 0x0000 */ const int messageOffset;
    /* 0x0000 */ const int workitem_descriptionOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int correlation_idsOffset;
    /* 0x0000 */ const int logical_pathOffset;
    /* 0x0000 */ const int physical_pathOffset;
    /* 0x0000 */ const int original_pathOffset;
  }; /* size: 0x03c8 */
}; /* size: 0x0290 */

class XeSqlPkg::deprecation_final_support
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2290[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int feature_idOffset;
    /* 0x0000 */ const int featureOffset;
    /* 0x0000 */ const int messageOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::broker_transmission_object_get
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2291[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int is_from_worktableOffset;
    /* 0x0000 */ const int is_new_objectOffset;
    /* 0x0000 */ const int is_get_onlyOffset;
    /* 0x0000 */ const int exception_occurredOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0268 */

class XeSqlPkg::query_rpc_set_cardinality
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2292[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::log_block_persistence_reset
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2293[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int consumer_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::packet_enqueued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2294[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int resultOffset;
    /* 0x0000 */ const int source_ip_addressOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::recovery_target_miss
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2295[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int target_timeOffset;
    /* 0x0000 */ const int dirty_page_read_timeOffset;
    /* 0x0000 */ const int dirty_page_countOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSqlPkg::database_agent_local_operation_end
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2296[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int local_brick_idOffset;
    /* 0x0000 */ const int local_operation_typeOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::security_cache_database_object_removal
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2297[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int securable_classOffset;
    /* 0x0000 */ const int securable_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::disk_log_read
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2298[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int start_log_block_idOffset;
    /* 0x0000 */ const int is_read_aheadOffset;
    /* 0x0000 */ const int private_consumer_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::bitmap_memory_preferred
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2299[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int build_rowsOffset;
    /* 0x0000 */ const int probe_rowsOffset;
    /* 0x0000 */ const int replicated_bitmapsOffset;
    /* 0x0000 */ const int preferred_memoryOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::metadata_ddl_drop_column
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2300[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int column_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_backup_on_sec_test_point
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2301[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int test_pointOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::query_rpc_process_cmd_goto_marker
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

struct IRowsetFind
{
}; /* size: 0x0008 */

class XeSqlPkg::deadlock_monitor_perf_stats
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,14> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2302[140];
      /* 0x0240 */ unsigned char m_buf[94];
    }; /* size: 0x006e */
    /* 0x0000 */ const int count_cyclesOffset;
    /* 0x0000 */ const int prev_cycle_start_timeOffset;
    /* 0x0000 */ const int prev_cycle_duration_msOffset;
    /* 0x0000 */ const int curr_cycle_end_causeOffset;
    /* 0x0000 */ const int prev_cycle_deadlock_participant_countOffset;
    /* 0x0000 */ const int count_cycles_with_deadlockOffset;
    /* 0x0000 */ const int count_cycles_with_deadlock_ended_normallyOffset;
    /* 0x0000 */ const int count_cycles_with_deadlock_failed_deadlock_resolution_prepOffset;
    /* 0x0000 */ const int count_cycles_with_deadlock_out_of_memoryOffset;
    /* 0x0000 */ const int count_cycles_with_deadlock_timeoutOffset;
    /* 0x0000 */ const int avg_cycle_duration_msOffset;
    /* 0x0000 */ const int max_cycle_duration_msOffset;
    /* 0x0000 */ const int avg_deadlock_participant_countOffset;
    /* 0x0000 */ const int max_deadlock_participant_countOffset;
  }; /* size: 0x0320 */
}; /* size: 0x02a0 */

class XeSqlPkg::sql_transaction
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2303[140];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0032 */
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int transaction_stateOffset;
    /* 0x0000 */ const int transaction_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int savepoint_nameOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::recovery_redo_failpoint
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2304[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::exec_prepared_sql
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2305[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int statement_handleOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::metadata_database_mdversion_updated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2306[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int new_versionOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::check_thread_page_latch_statistics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2307[140];
      /* 0x0240 */ unsigned char m_buf[35];
    }; /* size: 0x0033 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int is_remoteOffset;
    /* 0x0000 */ const int total_page_io_latch_waitsOffset;
    /* 0x0000 */ const int page_io_latch_wait_time_in_msOffset;
    /* 0x0000 */ const int total_page_latch_waitsOffset;
    /* 0x0000 */ const int page_latch_wait_time_in_msOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::metadata_create_local_temp_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2308[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int object_nameOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::cdc_session
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,20> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2309[140];
      /* 0x0240 */ unsigned char m_buf[148];
    }; /* size: 0x00a4 */
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int error_countOffset;
    /* 0x0000 */ const int tran_countOffset;
    /* 0x0000 */ const int log_record_countOffset;
    /* 0x0000 */ const int schema_change_countOffset;
    /* 0x0000 */ const int command_countOffset;
    /* 0x0000 */ const int latencyOffset;
    /* 0x0000 */ const int empty_scan_countOffset;
    /* 0x0000 */ const int failed_sessions_countOffset;
    /* 0x0000 */ const int start_timeOffset;
    /* 0x0000 */ const int end_timeOffset;
    /* 0x0000 */ const int last_commit_timeOffset;
    /* 0x0000 */ const int last_commit_cdc_timeOffset;
    /* 0x0000 */ const int start_lsnOffset;
    /* 0x0000 */ const int current_lsnOffset;
    /* 0x0000 */ const int end_lsnOffset;
    /* 0x0000 */ const int last_commit_lsnOffset;
    /* 0x0000 */ const int first_begin_cdc_lsnOffset;
    /* 0x0000 */ const int last_commit_cdc_lsnOffset;
  }; /* size: 0x0410 */
}; /* size: 0x02d8 */

class XeSqlPkg::parallel_scan_resume_range_generation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2310[143];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int worker_idOffset;
  }; /* size: 0x0034 */
}; /* size: 0x0270 */

class XeSqlPkg::xtp_db_page_allocation_allowed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2311[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int resource_pool_idOffset;
    /* 0x0000 */ const int xtp_memory_broker_target_allocationsOffset;
    /* 0x0000 */ const int xtp_memory_broker_allocationsOffset;
    /* 0x0000 */ const int xtp_memory_broker_overall_memoryOffset;
    /* 0x0000 */ const int system_physical_memory_highOffset;
    /* 0x0000 */ const int system_virtual_memory_lowOffset;
    /* 0x0000 */ const int process_physical_memory_lowOffset;
    /* 0x0000 */ const int process_virtual_memory_lowOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0268 */

class XeSqlPkg::log_flush_retry
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2312[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int write_sizeOffset;
    /* 0x0000 */ const int errorOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class XeSqlPkg::new_log_interest_flip
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2313[140];
      /* 0x0240 */ unsigned char m_buf[5];
    }; /* size: 0x0015 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int interestOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::perfobject_process
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2314[140];
      /* 0x0240 */ unsigned char m_buf[72];
    }; /* size: 0x0058 */
    /* 0x0000 */ const int percent_privileged_timeOffset;
    /* 0x0000 */ const int percent_processor_timeOffset;
    /* 0x0000 */ const int percent_user_timeOffset;
    /* 0x0000 */ const int virtual_bytesOffset;
    /* 0x0000 */ const int virtual_bytes_peakOffset;
    /* 0x0000 */ const int working_setOffset;
    /* 0x0000 */ const int working_set_privateOffset;
    /* 0x0000 */ const int working_set_peakOffset;
    /* 0x0000 */ const int instance_nameOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0288 */

class XeSqlPkg::fulltext_reorganize_phase1_destination_fragment
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2315[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int fragment_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::ual_instrument_called
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2316[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int role_guidOffset;
    /* 0x0000 */ const int ip_addressOffset;
    /* 0x0000 */ const int user_nameOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSqlPkg::hadr_wsfc_change_notifier_start_ag_specific_notifications
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2317[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int notification_keyOffset;
    /* 0x0000 */ const int availability_group_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::remote_dmv_stream_get_rows_server
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2318[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::logreader_process_text_info
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2319[140];
      /* 0x0240 */ unsigned char m_buf[76];
    }; /* size: 0x005c */
    /* 0x0000 */ const int log_operationOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int text_pointer_timestampOffset;
    /* 0x0000 */ const int text_pointer_file_idOffset;
    /* 0x0000 */ const int text_pointer_page_idOffset;
    /* 0x0000 */ const int text_pointer_slot_idOffset;
    /* 0x0000 */ const int coloffsetOffset;
    /* 0x0000 */ const int text_info_flagsOffset;
    /* 0x0000 */ const int text_sizeOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int old_sizeOffset;
    /* 0x0000 */ const int new_sizeOffset;
    /* 0x0000 */ const int current_lsnOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0290 */

class XeSqlPkg::glm_acquire_table_lock_exception
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2320[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int lock_modeOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int lock_policyOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class XeSqlPkg::security_cache_database_cleanup
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2321[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x00f0 */
}; /* size: 0x0248 */

class XeSqlPkg::log_block_consume
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2322[140];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x0026 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int consumer_idOffset;
    /* 0x0000 */ const int log_block_sizeOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::hadr_ar_manager_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2323[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int is_enteringOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::lock_deadlock
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2324[140];
      /* 0x0240 */ unsigned char m_buf[92];
    }; /* size: 0x006c */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int deadlock_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0400 */
}; /* size: 0x02a0 */

class XeSqlPkg::xml_deadlock_report
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2325[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int xml_reportOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION
{
  /* 0x0000 */ unsigned long ProcessorNumber;
  /* 0x0004 */ unsigned long StateCount;
  /* 0x0008 */ struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT States[1];
} SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION, *PSYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION; /* size: 0x0010 */

class XeSqlPkg::query_optimizer_estimate_cardinality
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2326[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int stats_collection_idOffset;
    /* 0x0000 */ const int query_hashOffset;
    /* 0x0000 */ const int creation_timeOffset;
    /* 0x0000 */ const int input_relationOffset;
    /* 0x0000 */ const int calculatorOffset;
    /* 0x0000 */ const int stats_collectionOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0270 */

class XeSqlPkg::hadr_transport_ucs_connection_info
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2327[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int target_availability_replica_idOffset;
    /* 0x0000 */ const int ucs_connection_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSqlPkg::parallel_scan_readahead_advance
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2328[143];
      /* 0x0240 */ unsigned char m_buf[72];
    }; /* size: 0x004c */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_in_queueOffset;
    /* 0x0000 */ const int pages_in_queueOffset;
    /* 0x0000 */ const int read_ahead_distanceOffset;
    /* 0x0000 */ const int fixup_range_idOffset;
    /* 0x0000 */ const int fixup_base_posOffset;
    /* 0x0000 */ const int range_idOffset;
    /* 0x0000 */ const int start_file_idOffset;
    /* 0x0000 */ const int end_file_idOffset;
    /* 0x0000 */ const int start_page_idOffset;
    /* 0x0000 */ const int end_page_idOffset;
  }; /* size: 0x004c */
}; /* size: 0x0288 */

class XeSqlPkg::hadr_ar_manager_mutex_acquisition_state
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2329[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int acquisition_stateOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::query_rpc_process_cmd_set_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2330[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int rowOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::glm_lock_release_end
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2331[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int resource_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int lock_modeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::scan_stopped
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2332[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0238 */
}; /* size: 0x0270 */

class XeSqlPkg::all_database_segments_create
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2333[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_countOffset;
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::begin_tran_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2334[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0198 */
}; /* size: 0x0250 */

class XeSqlPkg::query_rpc_process_cmd_get_data
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2335[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int accessorOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::glm_primary_brick_acquire_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2336[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::query_rpc_server_collection_cache_hit_no_key
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2337[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int cache_descriptorOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class XeSqlPkg::plan_guide_successful
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2338[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int plan_guide_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::file_write_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2339[140];
      /* 0x0240 */ unsigned char m_buf[52];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int pathOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0278 */

class XeSqlPkg::log_block_cache
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2340[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int log_block_sizeOffset;
    /* 0x0000 */ const int from_diskOffset;
    /* 0x0000 */ const int incompleteOffset;
    /* 0x0000 */ const int is_read_aheadOffset;
    /* 0x0000 */ const int private_consumer_idOffset;
    /* 0x0000 */ const int cache_buffer_pointerOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0268 */

typedef struct _FILE_STREAM_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long StreamNameLength;
  /* 0x0008 */ union _LARGE_INTEGER StreamSize;
  /* 0x0010 */ union _LARGE_INTEGER StreamAllocationSize;
  /* 0x0018 */ wchar_t StreamName[1];
  /* 0x001a */ char __PADDING__[6];
} FILE_STREAM_INFORMATION, *PFILE_STREAM_INFORMATION; /* size: 0x0020 */

class XeSqlPkg::metadata_manager_catalog_inserted
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2341[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int from_brick_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeSqlPkg::degree_of_parallelism
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2342[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int dopOffset;
    /* 0x0000 */ const int statement_typeOffset;
    /* 0x0000 */ const int workspace_memory_grant_kbOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::assembly_load
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2343[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int assembly_idOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int assembly_nameOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::parallel_scan_upper_level_readahead
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2344[143];
      /* 0x0240 */ unsigned char m_buf[64];
    }; /* size: 0x0044 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int start_file_idOffset;
    /* 0x0000 */ const int end_file_idOffset;
    /* 0x0000 */ const int start_page_idOffset;
    /* 0x0000 */ const int end_page_idOffset;
    /* 0x0000 */ const int page_countOffset;
  }; /* size: 0x0044 */
}; /* size: 0x0280 */

class XeSqlPkg::hadr_transport_replica_send_primary_info_cancelled
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2345[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int work_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::hadr_transport_dump_config_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2346[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int min_versionOffset;
    /* 0x0000 */ const int max_versionOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0260 */

class XeSqlPkg::query_rpc_locate_or_insert_row
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2347[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rx_send_activation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2348[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::transaction_log
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2349[140];
      /* 0x0240 */ unsigned char m_buf[49];
    }; /* size: 0x0041 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int log_record_sizeOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int contextOffset;
    /* 0x0000 */ const int replication_commandOffset;
    /* 0x0000 */ const int transaction_start_timeOffset;
    /* 0x0000 */ const int alloc_unit_idOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0288 */
}; /* size: 0x0278 */

class XeSqlPkg::xtp_deploy_done
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2350[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::database_ddl_stmt_start
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2351[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int statement_typeOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

class XeSqlPkg::drop_database_metadata_remove
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2352[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::check_thread_message_statistics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2353[140];
      /* 0x0240 */ unsigned char m_buf[11];
    }; /* size: 0x001b */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int is_remoteOffset;
    /* 0x0000 */ const int messages_sentOffset;
    /* 0x0000 */ const int messages_receivedOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class XeSqlPkg::constant_page_corruption_detected
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2354[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::broker_dialog_transmission_body_enqueue
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2355[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int message_referenceOffset;
    /* 0x0000 */ const int message_reference_countOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

typedef struct _PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ enum _PNP_VETO_TYPE VetoType;
  /* 0x0018 */ wchar_t* VetoName;
  /* 0x0020 */ unsigned long VetoNameLength;
  /* 0x0024 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA, *PPLUGPLAY_CONTROL_QUERY_AND_REMOVE_DATA; /* size: 0x0028 */

class XeSqlPkg::sec_ekm_provider_called
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2356[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int cred_prov_resultOffset;
    /* 0x0000 */ const int cred_prov_nameOffset;
    /* 0x0000 */ const int cred_prov_apiOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::logical_filegroup_create
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2357[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int data_space_idOffset;
    /* 0x0000 */ const int filegroup_typeOffset;
    /* 0x0000 */ const int guidOffset;
    /* 0x0000 */ const int filegroup_nameOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::repl_event
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2358[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int event_idOffset;
    /* 0x0000 */ const int user_infoOffset;
    /* 0x0000 */ const int user_dataOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rpc_create_accessor
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2359[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::bitmap_runtime_trace
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2360[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int query_operation_node_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::qn_parameter_table
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2361[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int activityOffset;
    /* 0x0000 */ const int query_notification_xml_informationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::replica_create_start
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2362[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::query_scan_shutdown
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2363[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::log_consumer_read_ahead
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2364[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int consumer_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::recovery_unit_metadata_create
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2365[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int recovery_unit_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::query_rx_sending_buffers
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2366[143];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x001d */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int is_eosOffset;
    /* 0x0000 */ const int rowsOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x001d */
}; /* size: 0x0260 */

class XeSqlPkg::metadata_initiate_lock_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2367[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int modeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeSqlPkg::query_memory_post_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2368[143];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x002e */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int is_first_acquireOffset;
    /* 0x0000 */ const int final_dopOffset;
    /* 0x0000 */ const int actual_memory_grantOffset;
    /* 0x0000 */ const int extra_memory_grantOffset;
    /* 0x0000 */ const int total_required_memoryOffset;
    /* 0x0000 */ const int exchange_required_memoryOffset;
    /* 0x0000 */ const int is_small_queryOffset;
  }; /* size: 0x002e */
}; /* size: 0x0270 */

class XeSqlPkg::log_io_complete
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2369[143];
      /* 0x0240 */ unsigned char m_buf[61];
    }; /* size: 0x0041 */
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int is_readOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int file_handleOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int sizeOffset;
    /* 0x0000 */ const int error_code_pointerOffset;
    /* 0x0000 */ const int pathOffset;
  }; /* size: 0x0041 */
}; /* size: 0x0280 */

class XeSqlPkg::query_rpc_server_runtime_cache_insert
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2370[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int db_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int insertedOffset;
    /* 0x0000 */ const int cache_unique_idOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0260 */

class XeSqlPkg::replica_destroy_start
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2371[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::hadr_auto_page_repair_test_point
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2372[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int test_pointOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::metadata_lock_object
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2373[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int modeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeSqlPkg::brick_files_metadata_remap
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2374[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::broker_forwarded_message_sent
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2375[140];
      /* 0x0240 */ unsigned char m_buf[78];
    }; /* size: 0x005e */
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int fragment_numberOffset;
    /* 0x0000 */ const int message_sequenceOffset;
    /* 0x0000 */ const int remaining_hop_countOffset;
    /* 0x0000 */ const int time_to_live_secOffset;
    /* 0x0000 */ const int live_time_secOffset;
    /* 0x0000 */ const int conversation_idOffset;
    /* 0x0000 */ const int message_type_nameOffset;
    /* 0x0000 */ const int from_service_nameOffset;
    /* 0x0000 */ const int from_broker_nameOffset;
    /* 0x0000 */ const int to_service_nameOffset;
    /* 0x0000 */ const int to_broker_nameOffset;
    /* 0x0000 */ const int service_contract_nameOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0290 */

struct XE_TEvent<3,0,17>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,17> m_dynamicAttr;
  /* 0x0328 */ struct XEEvent m_event;
}; /* size: 0x0370 */

class XeSqlPkg::perfobject_system
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2376[140];
      /* 0x0240 */ unsigned char m_buf[136];
    }; /* size: 0x0098 */
    /* 0x0000 */ const int percent_registry_quota_in_useOffset;
    /* 0x0000 */ const int alignment_fixups_per_secondOffset;
    /* 0x0000 */ const int context_switches_per_secondOffset;
    /* 0x0000 */ const int exception_dispatches_per_secondOffset;
    /* 0x0000 */ const int file_control_bytes_per_secondOffset;
    /* 0x0000 */ const int file_control_operations_per_secondOffset;
    /* 0x0000 */ const int file_data_operations_per_secondOffset;
    /* 0x0000 */ const int file_read_bytes_per_secondOffset;
    /* 0x0000 */ const int file_read_operations_per_secondOffset;
    /* 0x0000 */ const int file_write_bytes_per_secondOffset;
    /* 0x0000 */ const int file_write_operations_per_secondOffset;
    /* 0x0000 */ const int floating_emulations_per_secondOffset;
    /* 0x0000 */ const int processesOffset;
    /* 0x0000 */ const int processor_queue_lengthOffset;
    /* 0x0000 */ const int system_calls_per_secondOffset;
    /* 0x0000 */ const int system_up_timeOffset;
    /* 0x0000 */ const int threadsOffset;
  }; /* size: 0x0370 */
}; /* size: 0x02c8 */

struct XE_TEvent<3,0,24>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,3> m_staticAttr;
  /* 0x0078 */ struct XE_TArray<XECustomizableAttribute,0> m_customizableAttr;
  /* 0x0080 */ struct XE_TArray<XEDataAttribute,24> m_dynamicAttr;
  /* 0x0440 */ struct XEEvent m_event;
}; /* size: 0x0488 */

class XeSqlPkg::perfobject_logicaldisk
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,24> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2377[140];
      /* 0x0240 */ unsigned char m_buf[192];
    }; /* size: 0x00d0 */
    /* 0x0000 */ const int percent_disk_read_timeOffset;
    /* 0x0000 */ const int percent_disk_timeOffset;
    /* 0x0000 */ const int percent_disk_write_timeOffset;
    /* 0x0000 */ const int percent_free_spaceOffset;
    /* 0x0000 */ const int percent_idle_timeOffset;
    /* 0x0000 */ const int average_disk_bytes_per_readOffset;
    /* 0x0000 */ const int average_disk_bytes_per_transferOffset;
    /* 0x0000 */ const int average_disk_bytes_per_writeOffset;
    /* 0x0000 */ const int average_disk_queue_lengthOffset;
    /* 0x0000 */ const int average_disk_read_queue_lengthOffset;
    /* 0x0000 */ const int average_disk_seconds_per_readOffset;
    /* 0x0000 */ const int average_disk_seconds_per_transferOffset;
    /* 0x0000 */ const int average_disk_seconds_per_writeOffset;
    /* 0x0000 */ const int average_disk_write_queue_lengthOffset;
    /* 0x0000 */ const int current_disk_queue_lengthOffset;
    /* 0x0000 */ const int disk_bytes_per_secondOffset;
    /* 0x0000 */ const int disk_read_bytes_per_secondOffset;
    /* 0x0000 */ const int disk_reads_per_secondOffset;
    /* 0x0000 */ const int disk_transfers_per_secondOffset;
    /* 0x0000 */ const int disk_write_bytes_per_secondOffset;
    /* 0x0000 */ const int disk_writes_per_secondOffset;
    /* 0x0000 */ const int free_megabytesOffset;
    /* 0x0000 */ const int split_io_per_secondOffset;
    /* 0x0000 */ const int instance_nameOffset;
  }; /* size: 0x0488 */
}; /* size: 0x0300 */

class XeSqlPkg::queryvm_context_access_cdbandsetopts
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2378[143];
      /* 0x0240 */ unsigned char m_buf[144];
    }; /* size: 0x0094 */
    /* 0x0000 */ const int remote_exchange_node_idOffset;
    /* 0x0000 */ const int remote_exchange_thread_idOffset;
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int context_accessed_nameOffset;
    /* 0x0000 */ const int context_dbsoOffset;
    /* 0x0000 */ const int context_dbso_useropt1Offset;
    /* 0x0000 */ const int context_dbso_useropt2Offset;
    /* 0x0000 */ const int context_dbso_useropt1setmaskOffset;
    /* 0x0000 */ const int context_dbso_idtinsert_objidOffset;
    /* 0x0000 */ const int context_dbso_idtinsert_stateOffset;
    /* 0x0000 */ const int context_dbso_idtinsert_dbidOffset;
    /* 0x0000 */ const int context_dbso_rowcntOffset;
    /* 0x0000 */ const int context_dbso_statlistOffset;
    /* 0x0000 */ const int context_dbso_textsizeOffset;
    /* 0x0000 */ const int context_dbso_offsetsOffset;
    /* 0x0000 */ const int context_dbso_locktimeoutOffset;
    /* 0x0000 */ const int context_dbso_querygovOffset;
    /* 0x0000 */ const int context_dbso_dtfmtOffset;
    /* 0x0000 */ const int context_dbso_daydatefirstOffset;
    /* 0x0000 */ const int context_dbso_ddlckpriOffset;
    /* 0x0000 */ const int context_dbso_isolvlOffset;
    /* 0x0000 */ const int context_dbso_fipsflagOffset;
    /* 0x0000 */ const int context_dbso_langidOffset;
  }; /* size: 0x0094 */
}; /* size: 0x02d0 */

class XeSqlPkg::cursor_implicit_conversion
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2379[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int final_cursor_typeOffset;
    /* 0x0000 */ const int protocol_execution_idOffset;
    /* 0x0000 */ const int initial_cursor_typeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::database_segment_creation_end
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2380[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int local_brick_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeSqlPkg::selective_xml_index_no_compatible_sql_type
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2381[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int xml_pathOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::hadr_db_manager_filemetadata_request
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2382[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int file_typeOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int file_countOffset;
    /* 0x0000 */ const int message_log_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class XeSqlPkg::hadr_evaluate_readonly_routing_info
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2383[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int is_emptyOffset;
    /* 0x0000 */ const int is_primaryOffset;
    /* 0x0000 */ const int is_routing_replica_not_foundOffset;
    /* 0x0000 */ const int portOffset;
    /* 0x0000 */ const int host_nameOffset;
    /* 0x0000 */ const int ag_database_idOffset;
    /* 0x0000 */ const int ag_primary_replica_idOffset;
    /* 0x0000 */ const int ag_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0268 */

class XeSqlPkg::query_driver_received_rows_affected
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2384[143];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x001e */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int thread_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int rows_affectedOffset;
  }; /* size: 0x001e */
}; /* size: 0x0260 */

class XeSqlPkg::query_instance_cache_remote_insert
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::metadata_agent_catalog_updated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2385[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int update_typeOffset;
    /* 0x0000 */ const int from_brick_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::cursor_execute
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2386[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int cursor_typeOffset;
    /* 0x0000 */ const int protocol_execution_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::hadr_sql_instance_to_node_map_entry_deleted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2387[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int sql_instance_nameOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::diag_quantum_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2388[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int logical_writesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::redo_target_set
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2389[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::modify_file_name
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2390[143];
      /* 0x0240 */ unsigned char m_buf[22];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int is_log_fileOffset;
    /* 0x0000 */ const int is_physical_nameOffset;
    /* 0x0000 */ const int new_nameOffset;
  }; /* size: 0x001a */
}; /* size: 0x0258 */

class XeSqlPkg::query_compile_initialized
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::hadr_transport_replica_after_sending_build_replica_message_on_primary
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2391[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int partition_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int db_guidOffset;
    /* 0x0000 */ const int db_nameOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeSqlPkg::collect_all_HkProcFExecute
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2392[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

class XeSqlPkg::cdc_error
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2393[140];
      /* 0x0240 */ unsigned char m_buf[60];
    }; /* size: 0x004c */
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int phase_numberOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int entry_timeOffset;
    /* 0x0000 */ const int error_messageOffset;
    /* 0x0000 */ const int start_lsnOffset;
    /* 0x0000 */ const int begin_lsnOffset;
    /* 0x0000 */ const int sequence_valueOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0280 */

class XeSqlPkg::query_driver_cache_remove
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2394[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int connect_brick_idOffset;
    /* 0x0000 */ const int query_idOffset;
    /* 0x0000 */ const int topologyOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class XeSqlPkg::query_remote_memory_skip_small_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2395[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int required_remote_memory_pagesOffset;
    /* 0x0000 */ const int additional_remote_memory_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_target_pagesOffset;
    /* 0x0000 */ const int total_remote_memory_granted_pagesOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeSqlPkg::session_mgr_work_item_start_execution
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2396[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_capture_compressed_log_cache
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2397[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int hitsOffset;
    /* 0x0000 */ const int missesOffset;
    /* 0x0000 */ const int insert_missesOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class XeSqlPkg::query_memory_pre_grant
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2398[143];
      /* 0x0240 */ unsigned char m_buf[65];
    }; /* size: 0x0045 */
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int first_acquireOffset;
    /* 0x0000 */ const int max_dopOffset;
    /* 0x0000 */ const int required_memory_serialOffset;
    /* 0x0000 */ const int exchange_memoryOffset;
    /* 0x0000 */ const int memory_max_useful_serialOffset;
    /* 0x0000 */ const int desired_memoryOffset;
    /* 0x0000 */ const int max_memoryOffset;
    /* 0x0000 */ const int available_memoryOffset;
    /* 0x0000 */ const int timeoutOffset;
  }; /* size: 0x0045 */
}; /* size: 0x0288 */

class XeSqlPkg::hadr_db_manager_api
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2399[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int entry_exitOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
    /* 0x0000 */ const int api_functionOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class XeSqlPkg::glm_primary_brick_undo_exception
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2400[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::app_domain_ring_buffer_recorded
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2401[140];
      /* 0x0240 */ unsigned char m_buf[80];
    }; /* size: 0x0060 */
    /* 0x0000 */ const int idOffset;
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int app_domain_addressOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int owner_idOffset;
    /* 0x0000 */ const int generationOffset;
    /* 0x0000 */ const int referencesOffset;
    /* 0x0000 */ const int weak_referencesOffset;
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int call_stackOffset;
  }; /* size: 0x0328 */
}; /* size: 0x0290 */

class XeSqlPkg::selective_xml_index_path_not_indexed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2402[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int table_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int method_nameOffset;
    /* 0x0000 */ const int xml_pathOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::parallel_scan_range_returned
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2403[143];
      /* 0x0240 */ unsigned char m_buf[100];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int worker_idOffset;
    /* 0x0000 */ const int range_idOffset;
    /* 0x0000 */ const int original_worker_idOffset;
    /* 0x0000 */ const int pages_in_rangeOffset;
    /* 0x0000 */ const int pages_in_queueOffset;
    /* 0x0000 */ const int outstanding_pagesOffset;
    /* 0x0000 */ const int ranges_in_queueOffset;
    /* 0x0000 */ const int start_keyOffset;
    /* 0x0000 */ const int end_keyOffset;
  }; /* size: 0x0068 */
}; /* size: 0x02a8 */

class XeSqlPkg::module_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2404[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int source_database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int object_nameOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x0260 */
}; /* size: 0x0270 */

class XeSqlPkg::page_reference_tracker
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2405[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int partition_idOffset;
    /* 0x0000 */ const int caller_partition_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
    /* 0x0000 */ const int allocation_unit_idOffset;
    /* 0x0000 */ const int buffer_idOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int access_modeOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int locationOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0268 */

class XeSqlPkg::backup_restore_startlsn_recorded
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2406[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int startlsnOffset;
    /* 0x0000 */ const int serepllsnOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeSqlPkg::broker_message_classify
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2407[140];
      /* 0x0240 */ unsigned char m_buf[55];
    }; /* size: 0x0047 */
    /* 0x0000 */ const int delayed_error_numberOffset;
    /* 0x0000 */ const int message_sourceOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int route_typeOffset;
    /* 0x0000 */ const int conversation_idOffset;
    /* 0x0000 */ const int delayed_errorOffset;
    /* 0x0000 */ const int next_hop_broker_instanceOffset;
    /* 0x0000 */ const int next_hop_addressOffset;
    /* 0x0000 */ const int to_broker_instanceOffset;
    /* 0x0000 */ const int to_service_nameOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0278 */

class XeSqlPkg::column_store_segment_eliminate
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2408[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int transaction_id_highOffset;
    /* 0x0000 */ const int transaction_id_lowOffset;
    /* 0x0000 */ const int rowset_idOffset;
    /* 0x0000 */ const int rowgroup_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rpc_sendrequest
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2409[143];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int destination_brick_idOffset;
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int hash_valueOffset;
    /* 0x0000 */ const int use_cacheOffset;
  }; /* size: 0x0011 */
}; /* size: 0x0250 */

class XeSqlPkg::prelogin_traceid
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2410[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int client_sequenceOffset;
    /* 0x0000 */ const int client_connection_idOffset;
    /* 0x0000 */ const int client_activity_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::qn_template
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2411[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int activityOffset;
    /* 0x0000 */ const int query_notification_xml_informationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::query_rpc_fetch_row_by_key_value
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2412[140];
      /* 0x0240 */ unsigned char m_buf[42];
    }; /* size: 0x003a */
    /* 0x0000 */ const int key_accessorOffset;
    /* 0x0000 */ const int key_accessor_bindingsOffset;
    /* 0x0000 */ const int key_accessor_buffer_sizeOffset;
    /* 0x0000 */ const int data_accessorOffset;
    /* 0x0000 */ const int data_accessor_bindingsOffset;
    /* 0x0000 */ const int data_accessor_buffer_sizeOffset;
    /* 0x0000 */ const int cache_keysOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class XeSqlPkg::hadr_filestream_message_file_write
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2413[140];
      /* 0x0240 */ unsigned char m_buf[58];
    }; /* size: 0x004a */
    /* 0x0000 */ const int sequence_numberOffset;
    /* 0x0000 */ const int scan_generationOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int root_idOffset;
    /* 0x0000 */ const int data_offsetOffset;
    /* 0x0000 */ const int data_sizeOffset;
    /* 0x0000 */ const int data_flagsOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0280 */

struct XE_TEvent<4,2,12>
{
  /* 0x0000 */ struct XE_TArray<XEStaticAttribute,4> m_staticAttr;
  /* 0x00a0 */ struct XE_TArray<XECustomizableAttribute,2> m_customizableAttr;
  /* 0x0110 */ struct XE_TArray<XEDataAttribute,12> m_dynamicAttr;
  /* 0x02f0 */ struct XEEvent m_event;
}; /* size: 0x0338 */

class XeSqlPkg::sql_statement_completed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2414[140];
      /* 0x0240 */ unsigned char m_buf[84];
    }; /* size: 0x0064 */
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int cpu_timeOffset;
    /* 0x0000 */ const int physical_readsOffset;
    /* 0x0000 */ const int logical_readsOffset;
    /* 0x0000 */ const int writesOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int last_row_countOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int statementOffset;
    /* 0x0000 */ const int parameterized_plan_handleOffset;
  }; /* size: 0x0338 */
}; /* size: 0x0298 */

class XeSqlPkg::ioaff_scan_end
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2415[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int upper_level_pages_totalOffset;
    /* 0x0000 */ const int total_time_msOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0270 */

class XeSqlPkg::broker_transmission_lazyflusher_submit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2416[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::missing_column_statistics
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2417[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int column_listOffset;
  }; /* size: 0x0148 */
}; /* size: 0x0248 */

class XeSqlPkg::data_initialize_object_return
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeSqlPkg::hadr_ar_api_call
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2418[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int is_enteringOffset;
    /* 0x0000 */ const int api_nameOffset;
    /* 0x0000 */ const int id_or_nameOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::log_generate_stall
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2419[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int pending_writesOffset;
    /* 0x0000 */ const int pending_bytesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::query_execution_generic_trace
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2420[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int bufferOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::qn_subscription
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2421[140];
      /* 0x0240 */ unsigned char m_buf[9];
    }; /* size: 0x0019 */
    /* 0x0000 */ const int activityOffset;
    /* 0x0000 */ const int query_notification_xml_informationOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::mixed_extent_allocation
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2422[140];
      /* 0x0240 */ unsigned char m_buf[19];
    }; /* size: 0x0023 */
    /* 0x0000 */ const int last_mixed_extent_file_idOffset;
    /* 0x0000 */ const int last_mixed_extent_extent_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int extent_idOffset;
    /* 0x0000 */ const int is_loggedOffset;
    /* 0x0000 */ const int rollbackOffset;
    /* 0x0000 */ const int successOffset;
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0258 */

class XeSqlPkg::query_execution_batch_hash_children_reversed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2423[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int spilling_levelOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeSqlPkg::remote_dmv_stream_blob_fetch_server
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2424[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int internal_stvf_idOffset;
    /* 0x0000 */ const int client_brick_idOffset;
    /* 0x0000 */ const int client_stream_idOffset;
    /* 0x0000 */ const int server_brick_idOffset;
    /* 0x0000 */ const int server_session_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rpc_end_update
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2425[140];
      /* 0x0240 */ unsigned char m_buf[1];
    }; /* size: 0x0011 */
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::expression_compile_stop_batch_processing
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,0> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    /* 0x0000 */ const struct _GUID sm_guid;
  }; /* size: 0x00f8 */
}; /* size: 0x0240 */

class XeSqlPkg::mbr_tmd_read_common_restore_age
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2426[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int field_offsetOffset;
    /* 0x0000 */ const int field_sizeOffset;
    /* 0x0000 */ const int field_valueOffset;
    /* 0x0000 */ const int field_nameOffset;
    /* 0x0000 */ const int archive_file_nameOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class XeSqlPkg::filestream_file_write_completion
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2427[140];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0022 */
    /* 0x0000 */ const int completion_countOffset;
    /* 0x0000 */ const int offsetsOffset;
    /* 0x0000 */ const int sizesOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::broker_transmission_lazyflusher_remove
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2428[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int asb_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int initiator_flagOffset;
    /* 0x0000 */ const int unique_idOffset;
    /* 0x0000 */ const int dialog_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::full_text_crawl_started
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2429[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int crawl_operationOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x01c0 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rpc_set_range
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2430[140];
      /* 0x0240 */ unsigned char m_buf[29];
    }; /* size: 0x002d */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
    /* 0x0000 */ const int range_optionsOffset;
    /* 0x0000 */ const int use_local_rowsetOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeSqlPkg::session_recoverable_state_change
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2431[140];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeSqlPkg::broker_mirrored_route_state_changed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2432[140];
      /* 0x0240 */ unsigned char m_buf[49];
    }; /* size: 0x0041 */
    /* 0x0000 */ const int mirrored_route_stateOffset;
    /* 0x0000 */ const int address_mirrorOffset;
    /* 0x0000 */ const int address_principalOffset;
    /* 0x0000 */ const int error_message_mirrorOffset;
    /* 0x0000 */ const int error_message_prinicipalOffset;
    /* 0x0000 */ const int mirroring_role_mirrorOffset;
    /* 0x0000 */ const int mirroring_role_principalOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0278 */

class XeSqlPkg::hobt_schema_mgr_hobt_attributes
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,13> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2433[140];
      /* 0x0240 */ unsigned char m_buf[41];
    }; /* size: 0x0039 */
    /* 0x0000 */ const int schema_mgr_database_idOffset;
    /* 0x0000 */ const int versionOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int row_countOffset;
    /* 0x0000 */ const int file_stream_file_group_idOffset;
    /* 0x0000 */ const int compress_levelOffset;
    /* 0x0000 */ const int lob_statusOffset;
    /* 0x0000 */ const int uniqueOffset;
    /* 0x0000 */ const int replicatedOffset;
    /* 0x0000 */ const int log_off_rows_for_replicationOffset;
    /* 0x0000 */ const int column_storeOffset;
    /* 0x0000 */ const int se_replicatedOffset;
  }; /* size: 0x02f8 */
}; /* size: 0x0270 */

class XeSqlPkg::blocked_process_report
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,9> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2434[140];
      /* 0x0240 */ unsigned char m_buf[50];
    }; /* size: 0x0042 */
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int index_idOffset;
    /* 0x0000 */ const int lock_modeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int resource_owner_typeOffset;
    /* 0x0000 */ const int blocked_processOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x0258 */
}; /* size: 0x0278 */

class XeSqlPkg::latch_released
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2435[143];
      /* 0x0240 */ unsigned char m_buf[49];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0035 */
}; /* size: 0x0278 */

class XeSqlPkg::hadr_db_manager_user_control
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2436[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int users_statusOffset;
    /* 0x0000 */ const int shutdown_typeOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::hadr_modify_listener_port
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2437[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int old_port_numberOffset;
    /* 0x0000 */ const int new_port_numberOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int listener_idOffset;
    /* 0x0000 */ const int dns_nameOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeSqlPkg::ioaff_scan_worker_start
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2438[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int worker_idOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int node_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::database_creation_dbid_reserve
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2439[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int database_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeSqlPkg::mbr_resolution_counts
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2440[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int resolved_commit_countOffset;
    /* 0x0000 */ const int resolved_rollback_countOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeSqlPkg::like_unittest
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2441[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int text_wOffset;
    /* 0x0000 */ const int text_w_stOffset;
    /* 0x0000 */ const int text_aOffset;
    /* 0x0000 */ const int text_a_stOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeSqlPkg::filestream_file_io_dump
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2442[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int descriptionOffset;
    /* 0x0000 */ const int dataOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::recovery_force_oldest_page
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2443[140];
      /* 0x0240 */ unsigned char m_buf[10];
    }; /* size: 0x001a */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::hadr_filestream_file_flush
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2444[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int open_modeOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0250 */

class XeSqlPkg::file_added_in_database
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2445[143];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int database_segment_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int filegroup_idOffset;
    /* 0x0000 */ const int is_log_fileOffset;
    /* 0x0000 */ const int file_logical_nameOffset;
    /* 0x0000 */ const int file_physical_nameOffset;
  }; /* size: 0x0025 */
}; /* size: 0x0268 */

class XeSqlPkg::lock_released
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,2,16> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2446[140];
      /* 0x0240 */ unsigned char m_buf[88];
    }; /* size: 0x0068 */
    /* 0x0000 */ const int resource_typeOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int owner_typeOffset;
    /* 0x0000 */ const int transaction_idOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int lockspace_workspace_idOffset;
    /* 0x0000 */ const int lockspace_sub_idOffset;
    /* 0x0000 */ const int lockspace_nest_idOffset;
    /* 0x0000 */ const int resource_0Offset;
    /* 0x0000 */ const int resource_1Offset;
    /* 0x0000 */ const int resource_2Offset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int associated_object_idOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int resource_descriptionOffset;
    /* 0x0000 */ const int database_nameOffset;
  }; /* size: 0x03d8 */
}; /* size: 0x0298 */

class XeSqlPkg::buffer_pool_extension_pages_evicted
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2447[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int number_pagesOffset;
    /* 0x0000 */ const int first_page_file_idOffset;
    /* 0x0000 */ const int first_page_idOffset;
    /* 0x0000 */ const int page_file_offsetOffset;
    /* 0x0000 */ const int numa_node_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class XeSqlPkg::xtp_offline_checkpoint_before_harden_complete
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2448[143];
      /* 0x0240 */ unsigned char m_buf[27];
    }; /* size: 0x001f */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int is_passive_stateOffset;
    /* 0x0000 */ const int error_code_pointerOffset;
    /* 0x0000 */ const int checkpoint_tsOffset;
    /* 0x0000 */ const int recovery_lsnOffset;
  }; /* size: 0x001f */
}; /* size: 0x0260 */

class XeSqlPkg::broker_forwarded_message_dropped
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,17> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2449[140];
      /* 0x0240 */ unsigned char m_buf[98];
    }; /* size: 0x0072 */
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int error_severityOffset;
    /* 0x0000 */ const int error_stateOffset;
    /* 0x0000 */ const int is_initiatorOffset;
    /* 0x0000 */ const int message_sequenceOffset;
    /* 0x0000 */ const int fragment_numberOffset;
    /* 0x0000 */ const int remaining_hop_countOffset;
    /* 0x0000 */ const int time_to_live_secOffset;
    /* 0x0000 */ const int live_time_secOffset;
    /* 0x0000 */ const int conversation_idOffset;
    /* 0x0000 */ const int dropped_reasonOffset;
    /* 0x0000 */ const int from_service_nameOffset;
    /* 0x0000 */ const int from_broker_nameOffset;
    /* 0x0000 */ const int to_service_nameOffset;
    /* 0x0000 */ const int to_broker_nameOffset;
    /* 0x0000 */ const int message_type_nameOffset;
    /* 0x0000 */ const int service_contract_nameOffset;
  }; /* size: 0x0398 */
}; /* size: 0x02a8 */

class XeSqlPkg::latch_suspend_begin
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,15> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2450[140];
      /* 0x0240 */ unsigned char m_buf[53];
    }; /* size: 0x0045 */
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int classOffset;
    /* 0x0000 */ const int keep_countOffset;
    /* 0x0000 */ const int shared_countOffset;
    /* 0x0000 */ const int update_countOffset;
    /* 0x0000 */ const int exclusive_countOffset;
    /* 0x0000 */ const int destroy_countOffset;
    /* 0x0000 */ const int has_waitersOffset;
    /* 0x0000 */ const int is_superlatchOffset;
    /* 0x0000 */ const int is_poisonedOffset;
    /* 0x0000 */ const int timeoutOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int page_idOffset;
  }; /* size: 0x0348 */
}; /* size: 0x0278 */

class XeSqlPkg::mbr_lmd_read_group_backupset_guid
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2451[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int field_offsetOffset;
    /* 0x0000 */ const int field_sizeOffset;
    /* 0x0000 */ const int field_valueOffset;
    /* 0x0000 */ const int field_nameOffset;
    /* 0x0000 */ const int archive_file_nameOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class XeSqlPkg::sql_statement_starting
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2452[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int line_numberOffset;
    /* 0x0000 */ const int offsetOffset;
    /* 0x0000 */ const int offset_endOffset;
    /* 0x0000 */ const int statementOffset;
  }; /* size: 0x01e8 */
}; /* size: 0x0258 */

class XeSqlPkg::failed_hresult_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2453[140];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x001c */
    /* 0x0000 */ const int hresultOffset;
    /* 0x0000 */ const int descriptionOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0250 */

class XeSqlPkg::buffer_pool_eviction_thresholds_recalculated
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,14> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2454[140];
      /* 0x0240 */ unsigned char m_buf[60];
    }; /* size: 0x004c */
    /* 0x0000 */ const int numa_node_idOffset;
    /* 0x0000 */ const int warm_thresholdOffset;
    /* 0x0000 */ const int cold_thresholdOffset;
    /* 0x0000 */ const int number_evictions_to_bpool_extensionOffset;
    /* 0x0000 */ const int number_evictions_from_bpoolOffset;
    /* 0x0000 */ const int PagesUnassignedOffset;
    /* 0x0000 */ const int PagesStolenOrFreeOffset;
    /* 0x0000 */ const int PagesHotOffset;
    /* 0x0000 */ const int PagesNotOnLRUOffset;
    /* 0x0000 */ const int PagesUsedOnceOffset;
    /* 0x0000 */ const int PagesSpilledOffset;
    /* 0x0000 */ const int PagesBusyIoOffset;
    /* 0x0000 */ const int PagesAllocationRequestOffset;
    /* 0x0000 */ const int PagesSimulatedOffset;
  }; /* size: 0x0320 */
}; /* size: 0x0280 */

class XeSqlPkg::lock_request_priority
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2455[143];
      /* 0x0240 */ unsigned char m_buf[18];
    }; /* size: 0x0016 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int object_idOffset;
    /* 0x0000 */ const int modeOffset;
    /* 0x0000 */ const int is_kill_requestOffset;
    /* 0x0000 */ const int is_low_priority_requestOffset;
    /* 0x0000 */ const int request_timeoutOffset;
  }; /* size: 0x0016 */
}; /* size: 0x0258 */

class XeSqlPkg::glm_primary_brick_undo_response
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2456[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int request_sourceOffset;
    /* 0x0000 */ const int undo_responses_receivedOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::column_store_object_pool_hit
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2457[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int object_typeOffset;
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int hobt_idOffset;
    /* 0x0000 */ const int column_idOffset;
    /* 0x0000 */ const int object_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::sql_statement_plan_shipped
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2458[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int target_brick_idOffset;
    /* 0x0000 */ const int statement_start_offsetOffset;
    /* 0x0000 */ const int statement_end_offsetOffset;
    /* 0x0000 */ const int parent_plan_handleOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeSqlPkg::query_rpc_create_col_accessor
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2459[140];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int accessorOffset;
    /* 0x0000 */ const int accessor_bindingsOffset;
    /* 0x0000 */ const int accessor_buffer_sizeOffset;
  }; /* size: 0x0168 */
}; /* size: 0x0258 */

class XeSqlPkg::hadr_db_commit_mgr_set_policy
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2460[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int commit_policyOffset;
    /* 0x0000 */ const int delayOffset;
    /* 0x0000 */ const int group_idOffset;
    /* 0x0000 */ const int replica_idOffset;
    /* 0x0000 */ const int ag_database_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::log_block_move
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2461[140];
      /* 0x0240 */ unsigned char m_buf[17];
    }; /* size: 0x0021 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int old_weightOffset;
    /* 0x0000 */ const int new_weightOffset;
    /* 0x0000 */ const int new_positionOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0258 */

class XeSqlPkg::all_database_segments_drop
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2462[143];
      /* 0x0240 */ unsigned char m_buf[5];
    }; /* size: 0x0009 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int files_deletedOffset;
  }; /* size: 0x0009 */
}; /* size: 0x0248 */

class XeSqlPkg::replica_create_local_complete
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2463[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int phase_idOffset;
    /* 0x0000 */ const int split_ageOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeSqlPkg::query_rx_send_buffers
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2464[143];
      /* 0x0240 */ unsigned char m_buf[25];
    }; /* size: 0x001d */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int query_operation_node_idOffset;
    /* 0x0000 */ const int is_eosOffset;
    /* 0x0000 */ const int rowsOffset;
    /* 0x0000 */ const int query_idOffset;
  }; /* size: 0x001d */
}; /* size: 0x0260 */

class XeSqlPkg::parallel_scan_pause_range_generation
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2465[143];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int timestampOffset;
    /* 0x0000 */ const int range_generatorOffset;
    /* 0x0000 */ const int scheduler_idOffset;
    /* 0x0000 */ const int workerOffset;
    /* 0x0000 */ const int node_idOffset;
    /* 0x0000 */ const int ranges_totalOffset;
    /* 0x0000 */ const int pages_totalOffset;
    /* 0x0000 */ const int worker_idOffset;
  }; /* size: 0x0034 */
}; /* size: 0x0270 */

class XeSqlPkg::session_mgr_work_item_dequeued
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<3,0,3> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2466[140];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int typeOffset;
    /* 0x0000 */ const int priorityOffset;
    /* 0x0000 */ const int creation_timeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0250 */

class XeSqlPkg::xfcb_request_opened
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2467[140];
      /* 0x0240 */ unsigned char m_buf[37];
    }; /* size: 0x0035 */
    /* 0x0000 */ const int request_typeOffset;
    /* 0x0000 */ const int file_byte_offsetOffset;
    /* 0x0000 */ const int file_byte_countOffset;
    /* 0x0000 */ const int retry_countOffset;
    /* 0x0000 */ const int request_idOffset;
    /* 0x0000 */ const int file_pathOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeSqlPkg::hadr_database_flow_control_action
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2468[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int control_actionOffset;
    /* 0x0000 */ const int durationOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int local_availability_replica_idOffset;
    /* 0x0000 */ const int database_replica_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::hadr_capture_vlfheader
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2469[140];
      /* 0x0240 */ unsigned char m_buf[34];
    }; /* size: 0x0032 */
    /* 0x0000 */ const int log_block_idOffset;
    /* 0x0000 */ const int file_idOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_replica_idOffset;
    /* 0x0000 */ const int database_replica_idOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0268 */

class XeSqlPkg::alwayson_ddl_executed
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,1,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2470[140];
      /* 0x0240 */ unsigned char m_buf[26];
    }; /* size: 0x002a */
    /* 0x0000 */ const int ddl_actionOffset;
    /* 0x0000 */ const int ddl_phaseOffset;
    /* 0x0000 */ const int statementOffset;
    /* 0x0000 */ const int availability_group_idOffset;
    /* 0x0000 */ const int availability_group_nameOffset;
  }; /* size: 0x01e8 */
}; /* size: 0x0260 */

class XeSqlPkg::disk_log_read_ignore
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2471[140];
      /* 0x0240 */ unsigned char m_buf[21];
    }; /* size: 0x0025 */
    /* 0x0000 */ const int database_idOffset;
    /* 0x0000 */ const int start_log_block_idOffset;
    /* 0x0000 */ const int is_read_aheadOffset;
    /* 0x0000 */ const int private_consumer_idOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeSqlPkg::query_execution_switch_partition
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2472[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int query_operator_node_idOffset;
    /* 0x0000 */ const int query_thread_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

typedef class _RTL_CONSTANT_STRING_remove_const_template_class<1>
{
} RTL_CONSTANT_STRING_remove_const_template_class<1>, *PRTL_CONSTANT_STRING_remove_const_template_class<1>; /* size: 0x0001 */

typedef struct _SYSDBG_BUS_DATA
{
  /* 0x0000 */ unsigned long Address;
  /* 0x0004 */ long Padding_2473;
  /* 0x0008 */ void* Buffer;
  /* 0x0010 */ unsigned long Request;
  /* 0x0014 */ enum _BUS_DATA_TYPE BusDataType;
  /* 0x0018 */ unsigned long BusNumber;
  /* 0x001c */ unsigned long SlotNumber;
} SYSDBG_BUS_DATA, *PSYSDBG_BUS_DATA; /* size: 0x0020 */

struct ITransactionOptions
{
}; /* size: 0x0008 */

typedef struct _NET_DISPLAY_GROUP
{
  /* 0x0000 */ wchar_t* grpi3_name;
  /* 0x0008 */ wchar_t* grpi3_comment;
  /* 0x0010 */ unsigned long grpi3_group_id;
  /* 0x0014 */ unsigned long grpi3_attributes;
  /* 0x0018 */ unsigned long grpi3_next_index;
  /* 0x001c */ long __PADDING__[1];
} NET_DISPLAY_GROUP, *PNET_DISPLAY_GROUP; /* size: 0x0020 */

typedef struct _PREFIX_TABLE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NameLength;
  /* 0x0004 */ long Padding_2474;
  /* 0x0008 */ struct _PREFIX_TABLE_ENTRY* NextPrefixTree;
} PREFIX_TABLE, *PPREFIX_TABLE; /* size: 0x0010 */

typedef struct _PREFIX_TABLE_ENTRY
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NameLength;
  /* 0x0004 */ long Padding_2475;
  /* 0x0008 */ struct _PREFIX_TABLE_ENTRY* NextPrefixTree;
  /* 0x0010 */ struct _RTL_SPLAY_LINKS Links;
  /* 0x0028 */ struct _STRING* Prefix;
} PREFIX_TABLE_ENTRY, *PPREFIX_TABLE_ENTRY; /* size: 0x0030 */

typedef struct _GROUP_INFO_1002
{
  /* 0x0000 */ wchar_t* grpi1002_comment;
} GROUP_INFO_1002, *PGROUP_INFO_1002; /* size: 0x0008 */

typedef struct _REQUEST_RAW_ENCRYPTED_DATA
{
  /* 0x0000 */ __int64 FileOffset;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ long __PADDING__[1];
} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA; /* size: 0x0010 */

typedef struct _ACCESS_INFO_0
{
  /* 0x0000 */ wchar_t* acc0_resource_name;
} ACCESS_INFO_0, *PACCESS_INFO_0; /* size: 0x0008 */

typedef struct _RTL_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ long Bias;
  /* 0x0004 */ wchar_t StandardName[32];
  /* 0x0044 */ struct _TIME_FIELDS StandardStart;
  /* 0x0054 */ long StandardBias;
  /* 0x0058 */ wchar_t DaylightName[32];
  /* 0x0098 */ struct _TIME_FIELDS DaylightStart;
  /* 0x00a8 */ long DaylightBias;
} RTL_TIME_ZONE_INFORMATION, *PRTL_TIME_ZONE_INFORMATION; /* size: 0x00ac */

struct If<1,CSerializeContext<RPCStream>::ElementalSerializer,CSerializeContext<RPCStream>::ClassSerializer>
{
}; /* size: 0x0001 */

typedef struct _USER_INFO_23
{
  /* 0x0000 */ wchar_t* usri23_name;
  /* 0x0008 */ wchar_t* usri23_full_name;
  /* 0x0010 */ wchar_t* usri23_comment;
  /* 0x0018 */ unsigned long usri23_flags;
  /* 0x001c */ long Padding_2476;
  /* 0x0020 */ void* usri23_user_sid;
} USER_INFO_23, *PUSER_INFO_23; /* size: 0x0028 */

typedef struct _WKSTA_INFO_502
{
  /* 0x0000 */ unsigned long wki502_char_wait;
  /* 0x0004 */ unsigned long wki502_collection_time;
  /* 0x0008 */ unsigned long wki502_maximum_collection_count;
  /* 0x000c */ unsigned long wki502_keep_conn;
  /* 0x0010 */ unsigned long wki502_max_cmds;
  /* 0x0014 */ unsigned long wki502_sess_timeout;
  /* 0x0018 */ unsigned long wki502_siz_char_buf;
  /* 0x001c */ unsigned long wki502_max_threads;
  /* 0x0020 */ unsigned long wki502_lock_quota;
  /* 0x0024 */ unsigned long wki502_lock_increment;
  /* 0x0028 */ unsigned long wki502_lock_maximum;
  /* 0x002c */ unsigned long wki502_pipe_increment;
  /* 0x0030 */ unsigned long wki502_pipe_maximum;
  /* 0x0034 */ unsigned long wki502_cache_file_timeout;
  /* 0x0038 */ unsigned long wki502_dormant_file_limit;
  /* 0x003c */ unsigned long wki502_read_ahead_throughput;
  /* 0x0040 */ unsigned long wki502_num_mailslot_buffers;
  /* 0x0044 */ unsigned long wki502_num_srv_announce_buffers;
  /* 0x0048 */ unsigned long wki502_max_illegal_datagram_events;
  /* 0x004c */ unsigned long wki502_illegal_datagram_event_reset_frequency;
  /* 0x0050 */ int wki502_log_election_packets;
  /* 0x0054 */ int wki502_use_opportunistic_locking;
  /* 0x0058 */ int wki502_use_unlock_behind;
  /* 0x005c */ int wki502_use_close_behind;
  /* 0x0060 */ int wki502_buf_named_pipes;
  /* 0x0064 */ int wki502_use_lock_read_unlock;
  /* 0x0068 */ int wki502_utilize_nt_caching;
  /* 0x006c */ int wki502_use_raw_read;
  /* 0x0070 */ int wki502_use_raw_write;
  /* 0x0074 */ int wki502_use_write_raw_data;
  /* 0x0078 */ int wki502_use_encryption;
  /* 0x007c */ int wki502_buf_files_deny_write;
  /* 0x0080 */ int wki502_buf_read_only_files;
  /* 0x0084 */ int wki502_force_core_create_mode;
  /* 0x0088 */ int wki502_use_512_byte_max_transfer;
} WKSTA_INFO_502, *PWKSTA_INFO_502; /* size: 0x008c */

typedef struct _ALPC_PORT_CALLBACK_INFORMATION
{
  /* 0x0000 */ void* CallbackObject;
  /* 0x0008 */ void* Context;
} ALPC_PORT_CALLBACK_INFORMATION, *PALPC_PORT_CALLBACK_INFORMATION; /* size: 0x0010 */

typedef struct _USER_INFO_0
{
  /* 0x0000 */ wchar_t* usri0_name;
} USER_INFO_0, *PUSER_INFO_0; /* size: 0x0008 */

typedef struct _ACTRL_PROPERTY_ENTRYA
{
  /* 0x0000 */ char* lpProperty;
  /* 0x0008 */ struct _ACTRL_ACCESS_ENTRY_LISTA* pAccessEntryList;
  /* 0x0010 */ unsigned long fListFlags;
  /* 0x0014 */ long __PADDING__[1];
} ACTRL_PROPERTY_ENTRYA, *PACTRL_PROPERTY_ENTRYA; /* size: 0x0018 */

typedef struct _SYSTEM_OBJECT_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ long Padding_2477;
  /* 0x0008 */ void* Object;
  /* 0x0010 */ void* CreatorUniqueProcess;
  /* 0x0018 */ unsigned short CreatorBackTraceIndex;
  /* 0x001a */ unsigned short Flags;
  /* 0x001c */ long PointerCount;
  /* 0x0020 */ long HandleCount;
  /* 0x0024 */ unsigned long PagedPoolCharge;
  /* 0x0028 */ unsigned long NonPagedPoolCharge;
  /* 0x002c */ long Padding_2478;
  /* 0x0030 */ void* ExclusiveProcessId;
  /* 0x0038 */ void* SecurityDescriptor;
  /* 0x0040 */ struct _OBJECT_NAME_INFORMATION NameInfo;
} SYSTEM_OBJECT_INFORMATION, *PSYSTEM_OBJECT_INFORMATION; /* size: 0x0050 */

typedef struct _FILE_FS_SIZE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER TotalAllocationUnits;
  /* 0x0008 */ union _LARGE_INTEGER AvailableAllocationUnits;
  /* 0x0010 */ unsigned long SectorsPerAllocationUnit;
  /* 0x0014 */ unsigned long BytesPerSector;
} FILE_FS_SIZE_INFORMATION, *PFILE_FS_SIZE_INFORMATION; /* size: 0x0018 */

typedef struct _PO_WAKE_SOURCE_DEVICE
{
  /* 0x0000 */ struct _PO_WAKE_SOURCE_HEADER Header;
  /* 0x0008 */ wchar_t InstancePath[1];
  /* 0x000a */ char __PADDING__[2];
} PO_WAKE_SOURCE_DEVICE, *PPO_WAKE_SOURCE_DEVICE; /* size: 0x000c */

typedef struct _KEY_CONTROL_FLAGS_INFORMATION
{
  /* 0x0000 */ unsigned long ControlFlags;
} KEY_CONTROL_FLAGS_INFORMATION, *PKEY_CONTROL_FLAGS_INFORMATION; /* size: 0x0004 */

struct CLUSPROP_FTSET_INFO
{
}; /* size: 0x0010 */

typedef struct _USE_INFO_1
{
  /* 0x0000 */ wchar_t* ui1_local;
  /* 0x0008 */ wchar_t* ui1_remote;
  /* 0x0010 */ wchar_t* ui1_password;
  /* 0x0018 */ unsigned long ui1_status;
  /* 0x001c */ unsigned long ui1_asg_type;
  /* 0x0020 */ unsigned long ui1_refcount;
  /* 0x0024 */ unsigned long ui1_usecount;
} USE_INFO_1, *PUSE_INFO_1; /* size: 0x0028 */

typedef struct _AE_ACLMOD
{
  /* 0x0000 */ unsigned long ae_am_compname;
  /* 0x0004 */ unsigned long ae_am_username;
  /* 0x0008 */ unsigned long ae_am_resname;
  /* 0x000c */ unsigned long ae_am_action;
  /* 0x0010 */ unsigned long ae_am_datalen;
} AE_ACLMOD, *PAE_ACLMOD; /* size: 0x0014 */

typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX
{
  /* 0x0000 */ void* ClientSession;
  /* 0x0008 */ void* ClientProcess;
  /* 0x0010 */ unsigned short ClientComputerNameLength;
  /* 0x0012 */ wchar_t ClientComputerBuffer[16];
  /* 0x0032 */ char __PADDING__[6];
} FILE_PIPE_CLIENT_PROCESS_BUFFER_EX, *PFILE_PIPE_CLIENT_PROCESS_BUFFER_EX; /* size: 0x0038 */

typedef struct _USER_INFO_1013
{
  /* 0x0000 */ wchar_t* usri1013_parms;
} USER_INFO_1013, *PUSER_INFO_1013; /* size: 0x0008 */

typedef struct _RTL_CRITICAL_SECTION_DEBUG32
{
  /* 0x0000 */ unsigned short Type;
  /* 0x0002 */ unsigned short CreatorBackTraceIndex;
  /* 0x0004 */ unsigned long CriticalSection;
  /* 0x0008 */ struct LIST_ENTRY32 ProcessLocksList;
  /* 0x0010 */ unsigned long EntryCount;
  /* 0x0014 */ unsigned long ContentionCount;
  /* 0x0018 */ unsigned long Spare[2];
} RTL_CRITICAL_SECTION_DEBUG32, *PRTL_CRITICAL_SECTION_DEBUG32; /* size: 0x0020 */

typedef struct _FILE_INFO_2
{
  /* 0x0000 */ unsigned long fi2_id;
} FILE_INFO_2, *PFILE_INFO_2; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1018
{
  /* 0x0000 */ unsigned long wki1018_sess_timeout;
} WKSTA_INFO_1018, *PWKSTA_INFO_1018; /* size: 0x0004 */

struct IsElemental<CSessionTraceFlags>
{
}; /* size: 0x0001 */

typedef struct _WKSTA_INFO_302
{
  /* 0x0000 */ unsigned long wki302_char_wait;
  /* 0x0004 */ unsigned long wki302_collection_time;
  /* 0x0008 */ unsigned long wki302_maximum_collection_count;
  /* 0x000c */ unsigned long wki302_keep_conn;
  /* 0x0010 */ unsigned long wki302_keep_search;
  /* 0x0014 */ unsigned long wki302_max_cmds;
  /* 0x0018 */ unsigned long wki302_num_work_buf;
  /* 0x001c */ unsigned long wki302_siz_work_buf;
  /* 0x0020 */ unsigned long wki302_max_wrk_cache;
  /* 0x0024 */ unsigned long wki302_sess_timeout;
  /* 0x0028 */ unsigned long wki302_siz_error;
  /* 0x002c */ unsigned long wki302_num_alerts;
  /* 0x0030 */ unsigned long wki302_num_services;
  /* 0x0034 */ unsigned long wki302_errlog_sz;
  /* 0x0038 */ unsigned long wki302_print_buf_time;
  /* 0x003c */ unsigned long wki302_num_char_buf;
  /* 0x0040 */ unsigned long wki302_siz_char_buf;
  /* 0x0044 */ long Padding_2479;
  /* 0x0048 */ wchar_t* wki302_wrk_heuristics;
  /* 0x0050 */ unsigned long wki302_mailslots;
  /* 0x0054 */ unsigned long wki302_num_dgram_buf;
} WKSTA_INFO_302, *PWKSTA_INFO_302; /* size: 0x0058 */

typedef struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long AttributeCount;
  union
  {
    /* 0x0008 */ struct _TOKEN_SECURITY_ATTRIBUTE_V1* pAttributeV1;
  } /* size: 0x0008 */ Attribute;
} TOKEN_SECURITY_ATTRIBUTES_INFORMATION, *PTOKEN_SECURITY_ATTRIBUTES_INFORMATION; /* size: 0x0010 */

typedef struct _TOKEN_SECURITY_ATTRIBUTE_V1
{
  /* 0x0000 */ struct _UNICODE_STRING Name;
  /* 0x0010 */ unsigned short ValueType;
  /* 0x0012 */ unsigned short Reserved;
  /* 0x0014 */ unsigned long Flags;
  /* 0x0018 */ unsigned long ValueCount;
  /* 0x001c */ long Padding_2480;
  union
  {
    union
    {
      /* 0x0020 */ __int64* pInt64;
      /* 0x0020 */ unsigned __int64* pUint64;
      /* 0x0020 */ struct _UNICODE_STRING* pString;
      /* 0x0020 */ struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE* pFqbn;
      /* 0x0020 */ struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* pOctetString;
    }; /* size: 0x0008 */
  } /* size: 0x0008 */ Values;
} TOKEN_SECURITY_ATTRIBUTE_V1, *PTOKEN_SECURITY_ATTRIBUTE_V1; /* size: 0x0028 */

struct CLUS_RESOURCE_CLASS_INFO
{
  union
  {
    /* 0x0000 */ unsigned long dw;
    struct
    {
      /* 0x0000 */ enum CLUSTER_RESOURCE_CLASS rc;
      /* 0x0004 */ unsigned long SubClass;
    }; /* size: 0x0008 */
    /* 0x0000 */ union _ULARGE_INTEGER li;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _FILE_PIPE_REMOTE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CollectDataTime;
  /* 0x0008 */ unsigned long MaximumCollectionCount;
  /* 0x000c */ long __PADDING__[1];
} FILE_PIPE_REMOTE_INFORMATION, *PFILE_PIPE_REMOTE_INFORMATION; /* size: 0x0010 */

struct IRowsetIndex
{
}; /* size: 0x0008 */

typedef struct _FILE_FS_SECTOR_SIZE_INFORMATION
{
  /* 0x0000 */ unsigned long LogicalBytesPerSector;
  /* 0x0004 */ unsigned long PhysicalBytesPerSectorForAtomicity;
  /* 0x0008 */ unsigned long PhysicalBytesPerSectorForPerformance;
  /* 0x000c */ unsigned long FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
  /* 0x0010 */ unsigned long Flags;
  /* 0x0014 */ unsigned long ByteOffsetForSectorAlignment;
  /* 0x0018 */ unsigned long ByteOffsetForPartitionAlignment;
} FILE_FS_SECTOR_SIZE_INFORMATION, *PFILE_FS_SECTOR_SIZE_INFORMATION; /* size: 0x001c */

typedef struct _USER_INFO_1011
{
  /* 0x0000 */ wchar_t* usri1011_full_name;
} USER_INFO_1011, *PUSER_INFO_1011; /* size: 0x0008 */

struct ICommandPrepare
{
}; /* size: 0x0008 */

typedef struct _ALPC_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long SequenceNo;
  /* 0x0008 */ void* PortContext;
} ALPC_BASIC_INFORMATION, *PALPC_BASIC_INFORMATION; /* size: 0x0010 */

typedef struct _SERVER_INFO_1561
{
  /* 0x0000 */ unsigned long sv1561_serversize;
} SERVER_INFO_1561, *PSERVER_INFO_1561; /* size: 0x0004 */

struct IRowChange
{
}; /* size: 0x0008 */

typedef struct _CREATE_CLUSTER_CONFIG
{
  /* 0x0000 */ unsigned long dwVersion;
  /* 0x0004 */ long Padding_2481;
  /* 0x0008 */ const wchar_t* lpszClusterName;
  /* 0x0010 */ unsigned long cNodes;
  /* 0x0014 */ long Padding_2482;
  /* 0x0018 */ const wchar_t** ppszNodeNames;
  /* 0x0020 */ unsigned long cIpEntries;
  /* 0x0024 */ long Padding_2483;
  /* 0x0028 */ struct _CLUSTER_IP_ENTRY* pIpEntries;
  /* 0x0030 */ unsigned char fEmptyCluster;
  /* 0x0031 */ char __PADDING__[7];
} CREATE_CLUSTER_CONFIG, *PCREATE_CLUSTER_CONFIG; /* size: 0x0038 */

typedef struct _SERVER_INFO_1582
{
  /* 0x0000 */ unsigned long sv1582_maxfreepagedpoolchunks;
} SERVER_INFO_1582, *PSERVER_INFO_1582; /* size: 0x0004 */

typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION
{
  /* 0x0000 */ unsigned long RegistryQuotaAllowed;
  /* 0x0004 */ unsigned long RegistryQuotaUsed;
  /* 0x0008 */ unsigned __int64 PagedPoolSize;
} SYSTEM_REGISTRY_QUOTA_INFORMATION, *PSYSTEM_REGISTRY_QUOTA_INFORMATION; /* size: 0x0010 */

typedef struct _AE_SESSPWERR
{
  /* 0x0000 */ unsigned long ae_sp_compname;
  /* 0x0004 */ unsigned long ae_sp_username;
} AE_SESSPWERR, *PAE_SESSPWERR; /* size: 0x0008 */

typedef struct _DISPATCHER_CONTEXT
{
  /* 0x0000 */ unsigned __int64 ControlPc;
  /* 0x0008 */ unsigned __int64 ImageBase;
  /* 0x0010 */ struct _RUNTIME_FUNCTION* FunctionEntry;
  /* 0x0018 */ unsigned __int64 EstablisherFrame;
  /* 0x0020 */ unsigned __int64 TargetIp;
  /* 0x0028 */ struct _CONTEXT* ContextRecord;
  /* 0x0030 */ void* LanguageHandler /* function */;
  /* 0x0038 */ void* HandlerData;
  /* 0x0040 */ struct _UNWIND_HISTORY_TABLE* HistoryTable;
  /* 0x0048 */ unsigned long ScopeIndex;
  /* 0x004c */ unsigned long Fill0;
} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT; /* size: 0x0050 */

struct IRegisterProvider
{
}; /* size: 0x0008 */

typedef struct _PROCESSOR_POWER_INFORMATION
{
  /* 0x0000 */ unsigned long Number;
  /* 0x0004 */ unsigned long MaxMhz;
  /* 0x0008 */ unsigned long CurrentMhz;
  /* 0x000c */ unsigned long MhzLimit;
  /* 0x0010 */ unsigned long MaxIdleState;
  /* 0x0014 */ unsigned long CurrentIdleState;
} PROCESSOR_POWER_INFORMATION, *PPROCESSOR_POWER_INFORMATION; /* size: 0x0018 */

typedef struct _LDR_SECTION_INFO
{
  /* 0x0000 */ void* SectionHandle;
  /* 0x0008 */ unsigned long DesiredAccess;
  /* 0x000c */ long Padding_2484;
  /* 0x0010 */ struct _OBJECT_ATTRIBUTES* ObjA;
  /* 0x0018 */ unsigned long SectionPageProtection;
  /* 0x001c */ unsigned long AllocationAttributes;
} LDR_SECTION_INFO, *PLDR_SECTION_INFO; /* size: 0x0020 */

typedef struct _GROUP_INFO_1005
{
  /* 0x0000 */ unsigned long grpi1005_attributes;
} GROUP_INFO_1005, *PGROUP_INFO_1005; /* size: 0x0004 */

typedef struct _FILE_ALLOCATED_RANGE_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER FileOffset;
  /* 0x0008 */ union _LARGE_INTEGER Length;
} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER; /* size: 0x0010 */

struct ITransactionOutcomeEvents
{
}; /* size: 0x0008 */

typedef struct _FILE_DIRECTORY_INFORMATION
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ union _LARGE_INTEGER CreationTime;
  /* 0x0010 */ union _LARGE_INTEGER LastAccessTime;
  /* 0x0018 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0020 */ union _LARGE_INTEGER ChangeTime;
  /* 0x0028 */ union _LARGE_INTEGER EndOfFile;
  /* 0x0030 */ union _LARGE_INTEGER AllocationSize;
  /* 0x0038 */ unsigned long FileAttributes;
  /* 0x003c */ unsigned long FileNameLength;
  /* 0x0040 */ wchar_t FileName[1];
  /* 0x0042 */ char __PADDING__[6];
} FILE_DIRECTORY_INFORMATION, *PFILE_DIRECTORY_INFORMATION; /* size: 0x0048 */

struct _EX_WNF_SUBSCRIPTION;

typedef struct _SYSTEM_BOOT_LOGO_INFORMATION
{
  /* 0x0000 */ unsigned char Bitmap[1];
} SYSTEM_BOOT_LOGO_INFORMATION, *PSYSTEM_BOOT_LOGO_INFORMATION; /* size: 0x0001 */

typedef struct _USER_INFO_20
{
  /* 0x0000 */ wchar_t* usri20_name;
  /* 0x0008 */ wchar_t* usri20_full_name;
  /* 0x0010 */ wchar_t* usri20_comment;
  /* 0x0018 */ unsigned long usri20_flags;
  /* 0x001c */ unsigned long usri20_user_id;
} USER_INFO_20, *PUSER_INFO_20; /* size: 0x0020 */

struct tagDBTIME
{
  /* 0x0000 */ unsigned short hour;
  /* 0x0002 */ unsigned short minute;
  /* 0x0004 */ unsigned short second;
}; /* size: 0x0006 */

typedef struct _NETLOGON_INFO_1
{
  /* 0x0000 */ unsigned long netlog1_flags;
  /* 0x0004 */ unsigned long netlog1_pdc_connection_status;
} NETLOGON_INFO_1, *PNETLOGON_INFO_1; /* size: 0x0008 */

typedef struct _SHARE_INFO_502
{
  /* 0x0000 */ wchar_t* shi502_netname;
  /* 0x0008 */ unsigned long shi502_type;
  /* 0x000c */ long Padding_2485;
  /* 0x0010 */ wchar_t* shi502_remark;
  /* 0x0018 */ unsigned long shi502_permissions;
  /* 0x001c */ unsigned long shi502_max_uses;
  /* 0x0020 */ unsigned long shi502_current_uses;
  /* 0x0024 */ long Padding_2486;
  /* 0x0028 */ wchar_t* shi502_path;
  /* 0x0030 */ wchar_t* shi502_passwd;
  /* 0x0038 */ unsigned long shi502_reserved;
  /* 0x003c */ long Padding_2487;
  /* 0x0040 */ void* shi502_security_descriptor;
} SHARE_INFO_502, *PSHARE_INFO_502; /* size: 0x0048 */

typedef struct _USER_MODALS_INFO_1003
{
  /* 0x0000 */ unsigned long usrmod1003_min_passwd_age;
} USER_MODALS_INFO_1003, *PUSER_MODALS_INFO_1003; /* size: 0x0004 */

typedef struct _SERVER_INFO_1529
{
  /* 0x0000 */ unsigned long sv1529_minrcvqueue;
} SERVER_INFO_1529, *PSERVER_INFO_1529; /* size: 0x0004 */

struct IAlterIndex
{
}; /* size: 0x0008 */

typedef struct _SYSTEM_NUMA_PROXIMITY_MAP
{
  /* 0x0000 */ unsigned long NodeProximityId;
  /* 0x0004 */ unsigned short NodeNumber;
  /* 0x0006 */ char __PADDING__[2];
} SYSTEM_NUMA_PROXIMITY_MAP, *PSYSTEM_NUMA_PROXIMITY_MAP; /* size: 0x0008 */

typedef struct _JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_2488;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _UNICODE_STRING KeyPathName;
  /* 0x0028 */ union _LARGE_INTEGER OldLastWriteTime;
  /* 0x0030 */ union _LARGE_INTEGER NewLastWriteTime;
} JOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION, *PJOURNAL_SET_KEY_LAST_WRITE_TIME_INFORMATION; /* size: 0x0038 */

struct XBitmap<StaticStorage<83> >
{
  /* 0x0000 */ struct StaticStorage<83> m_storage;
}; /* size: 0x000c */

typedef struct _CM_PCCARD_DEVICE_DATA
{
  /* 0x0000 */ unsigned char Flags;
  /* 0x0001 */ unsigned char ErrorCode;
  /* 0x0002 */ unsigned short Reserved;
  /* 0x0004 */ unsigned long BusData;
  /* 0x0008 */ unsigned long DeviceId;
  /* 0x000c */ unsigned long LegacyBaseAddress;
  /* 0x0010 */ unsigned char IRQMap[16];
} CM_PCCARD_DEVICE_DATA, *PCM_PCCARD_DEVICE_DATA; /* size: 0x0020 */

typedef struct _USER_INFO_1014
{
  /* 0x0000 */ wchar_t* usri1014_workstations;
} USER_INFO_1014, *PUSER_INFO_1014; /* size: 0x0008 */

typedef struct _SERVER_INFO_1591
{
  /* 0x0000 */ unsigned long sv1591_autosharewks;
} SERVER_INFO_1591, *PSERVER_INFO_1591; /* size: 0x0004 */

struct IBindResource
{
}; /* size: 0x0008 */

typedef struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION
{
  /* 0x0000 */ struct _UNICODE_STRING TargetDevicePath;
} PROCESS_REVOKE_FILE_HANDLES_INFORMATION, *PPROCESS_REVOKE_FILE_HANDLES_INFORMATION; /* size: 0x0010 */

typedef struct _REPL_EDIR_INFO_1000
{
  /* 0x0000 */ unsigned long rped1000_integrity;
} REPL_EDIR_INFO_1000, *PREPL_EDIR_INFO_1000; /* size: 0x0004 */

typedef struct _finddata32i64_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long time_create;
  /* 0x0008 */ long time_access;
  /* 0x000c */ long time_write;
  /* 0x0010 */ __int64 size;
  /* 0x0018 */ char name[260];
  /* 0x011c */ long __PADDING__[1];
} finddata32i64_t, *Pfinddata32i64_t; /* size: 0x0120 */

typedef struct _SERVER_INFO_1522
{
  /* 0x0000 */ unsigned long sv1522_minkeepsearch;
} SERVER_INFO_1522, *PSERVER_INFO_1522; /* size: 0x0004 */

typedef struct _AE_GENERIC
{
  /* 0x0000 */ unsigned long ae_ge_msgfile;
  /* 0x0004 */ unsigned long ae_ge_msgnum;
  /* 0x0008 */ unsigned long ae_ge_params;
  /* 0x000c */ unsigned long ae_ge_param1;
  /* 0x0010 */ unsigned long ae_ge_param2;
  /* 0x0014 */ unsigned long ae_ge_param3;
  /* 0x0018 */ unsigned long ae_ge_param4;
  /* 0x001c */ unsigned long ae_ge_param5;
  /* 0x0020 */ unsigned long ae_ge_param6;
  /* 0x0024 */ unsigned long ae_ge_param7;
  /* 0x0028 */ unsigned long ae_ge_param8;
  /* 0x002c */ unsigned long ae_ge_param9;
} AE_GENERIC, *PAE_GENERIC; /* size: 0x0030 */

typedef struct _RTL_UNLOAD_EVENT_TRACE
{
  /* 0x0000 */ void* BaseAddress;
  /* 0x0008 */ unsigned __int64 SizeOfImage;
  /* 0x0010 */ unsigned long Sequence;
  /* 0x0014 */ unsigned long TimeDateStamp;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ wchar_t ImageName[32];
  /* 0x005c */ unsigned long Version[2];
  /* 0x0064 */ long __PADDING__[1];
} RTL_UNLOAD_EVENT_TRACE, *PRTL_UNLOAD_EVENT_TRACE; /* size: 0x0068 */

typedef struct _ATOM_TABLE_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfAtoms;
  /* 0x0004 */ unsigned short Atoms[1];
  /* 0x0006 */ char __PADDING__[2];
} ATOM_TABLE_INFORMATION, *PATOM_TABLE_INFORMATION; /* size: 0x0008 */

typedef struct _SERVER_INFO_1577
{
  /* 0x0000 */ unsigned long sv1577_balancecount;
} SERVER_INFO_1577, *PSERVER_INFO_1577; /* size: 0x0004 */

typedef struct _BOOT_ENTROPY_NT_RESULT
{
  /* 0x0000 */ unsigned long maxEntropySources;
  /* 0x0004 */ long Padding_2489;
  /* 0x0008 */ struct _BOOT_ENTROPY_SOURCE_NT_RESULT EntropySourceResult[7];
  /* 0x02e0 */ unsigned char SeedBytesForCng[48];
} BOOT_ENTROPY_NT_RESULT, *PBOOT_ENTROPY_NT_RESULT; /* size: 0x0310 */

typedef struct _EISA_MEMORY_CONFIGURATION
{
  /* 0x0000 */ struct _EISA_MEMORY_TYPE ConfigurationByte;
  /* 0x0001 */ unsigned char DataSize;
  /* 0x0002 */ unsigned short AddressLowWord;
  /* 0x0004 */ unsigned char AddressHighByte;
  /* 0x0005 */ unsigned short MemorySize;
} EISA_MEMORY_CONFIGURATION, *PEISA_MEMORY_CONFIGURATION; /* size: 0x0007 */

typedef struct _PROCESS_BASIC_INFORMATION64
{
  /* 0x0000 */ long ExitStatus;
  /* 0x0004 */ unsigned int Pad1;
  /* 0x0008 */ unsigned __int64 PebBaseAddress;
  /* 0x0010 */ unsigned __int64 AffinityMask;
  /* 0x0018 */ long BasePriority;
  /* 0x001c */ unsigned int Pad2;
  /* 0x0020 */ unsigned __int64 UniqueProcessId;
  /* 0x0028 */ unsigned __int64 InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION64, *PPROCESS_BASIC_INFORMATION64; /* size: 0x0030 */

typedef struct _FILE_REMOTE_PROTOCOL_INFORMATION
{
  /* 0x0000 */ unsigned short StructureVersion;
  /* 0x0002 */ unsigned short StructureSize;
  /* 0x0004 */ unsigned long Protocol;
  /* 0x0008 */ unsigned short ProtocolMajorVersion;
  /* 0x000a */ unsigned short ProtocolMinorVersion;
  /* 0x000c */ unsigned short ProtocolRevision;
  /* 0x000e */ unsigned short Reserved;
  /* 0x0010 */ unsigned long Flags;
  struct
  {
    /* 0x0014 */ unsigned long Reserved[8];
  } /* size: 0x0020 */ GenericReserved;
  struct
  {
    /* 0x0034 */ unsigned long Reserved[16];
  } /* size: 0x0040 */ ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFORMATION, *PFILE_REMOTE_PROTOCOL_INFORMATION; /* size: 0x0074 */

typedef struct _SERVER_INFO_1501
{
  /* 0x0000 */ unsigned long sv1501_sessopens;
} SERVER_INFO_1501, *PSERVER_INFO_1501; /* size: 0x0004 */

typedef struct _UNICODE_PREFIX_TABLE
{
  /* 0x0000 */ short NodeTypeCode;
  /* 0x0002 */ short NameLength;
  /* 0x0004 */ long Padding_2490;
  /* 0x0008 */ struct _UNICODE_PREFIX_TABLE_ENTRY* NextPrefixTree;
  /* 0x0010 */ struct _UNICODE_PREFIX_TABLE_ENTRY* LastNextEntry;
} UNICODE_PREFIX_TABLE, *PUNICODE_PREFIX_TABLE; /* size: 0x0018 */

typedef struct _PROCESS_SESSION_INFORMATION
{
  /* 0x0000 */ unsigned long SessionId;
} PROCESS_SESSION_INFORMATION, *PPROCESS_SESSION_INFORMATION; /* size: 0x0004 */

struct IDBAsynchStatus
{
}; /* size: 0x0008 */

typedef struct _USER_INFO_22
{
  /* 0x0000 */ wchar_t* usri22_name;
  /* 0x0008 */ unsigned char usri22_password[16];
  /* 0x0018 */ unsigned long usri22_password_age;
  /* 0x001c */ unsigned long usri22_priv;
  /* 0x0020 */ wchar_t* usri22_home_dir;
  /* 0x0028 */ wchar_t* usri22_comment;
  /* 0x0030 */ unsigned long usri22_flags;
  /* 0x0034 */ long Padding_2491;
  /* 0x0038 */ wchar_t* usri22_script_path;
  /* 0x0040 */ unsigned long usri22_auth_flags;
  /* 0x0044 */ long Padding_2492;
  /* 0x0048 */ wchar_t* usri22_full_name;
  /* 0x0050 */ wchar_t* usri22_usr_comment;
  /* 0x0058 */ wchar_t* usri22_parms;
  /* 0x0060 */ wchar_t* usri22_workstations;
  /* 0x0068 */ unsigned long usri22_last_logon;
  /* 0x006c */ unsigned long usri22_last_logoff;
  /* 0x0070 */ unsigned long usri22_acct_expires;
  /* 0x0074 */ unsigned long usri22_max_storage;
  /* 0x0078 */ unsigned long usri22_units_per_week;
  /* 0x007c */ long Padding_2493;
  /* 0x0080 */ unsigned char* usri22_logon_hours;
  /* 0x0088 */ unsigned long usri22_bad_pw_count;
  /* 0x008c */ unsigned long usri22_num_logons;
  /* 0x0090 */ wchar_t* usri22_logon_server;
  /* 0x0098 */ unsigned long usri22_country_code;
  /* 0x009c */ unsigned long usri22_code_page;
} USER_INFO_22, *PUSER_INFO_22; /* size: 0x00a0 */

typedef struct _WKSTA_INFO_100
{
  /* 0x0000 */ unsigned long wki100_platform_id;
  /* 0x0004 */ long Padding_2494;
  /* 0x0008 */ wchar_t* wki100_computername;
  /* 0x0010 */ wchar_t* wki100_langroup;
  /* 0x0018 */ unsigned long wki100_ver_major;
  /* 0x001c */ unsigned long wki100_ver_minor;
} WKSTA_INFO_100, *PWKSTA_INFO_100; /* size: 0x0020 */

typedef struct _SYSTEM_CONTEXT_SWITCH_INFORMATION
{
  /* 0x0000 */ unsigned long ContextSwitches;
  /* 0x0004 */ unsigned long FindAny;
  /* 0x0008 */ unsigned long FindLast;
  /* 0x000c */ unsigned long FindIdeal;
  /* 0x0010 */ unsigned long IdleAny;
  /* 0x0014 */ unsigned long IdleCurrent;
  /* 0x0018 */ unsigned long IdleLast;
  /* 0x001c */ unsigned long IdleIdeal;
  /* 0x0020 */ unsigned long PreemptAny;
  /* 0x0024 */ unsigned long PreemptCurrent;
  /* 0x0028 */ unsigned long PreemptLast;
  /* 0x002c */ unsigned long SwitchToIdle;
} SYSTEM_CONTEXT_SWITCH_INFORMATION, *PSYSTEM_CONTEXT_SWITCH_INFORMATION; /* size: 0x0030 */

typedef struct _CONTEXT_EX
{
  /* 0x0000 */ struct _CONTEXT_CHUNK All;
  /* 0x0008 */ struct _CONTEXT_CHUNK Legacy;
  /* 0x0010 */ struct _CONTEXT_CHUNK XState;
} CONTEXT_EX, *PCONTEXT_EX; /* size: 0x0018 */

typedef struct _SYSTEM_DEVICE_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfDisks;
  /* 0x0004 */ unsigned long NumberOfFloppies;
  /* 0x0008 */ unsigned long NumberOfCdRoms;
  /* 0x000c */ unsigned long NumberOfTapes;
  /* 0x0010 */ unsigned long NumberOfSerialPorts;
  /* 0x0014 */ unsigned long NumberOfParallelPorts;
} SYSTEM_DEVICE_INFORMATION, *PSYSTEM_DEVICE_INFORMATION; /* size: 0x0018 */

typedef struct _FLS_DATA
{
  /* 0x0000 */ struct _LIST_ENTRY Entry;
  /* 0x0010 */ void* Slots[128];
} FLS_DATA, *PFLS_DATA; /* size: 0x0410 */

typedef struct _GROUP_INFO_2
{
  /* 0x0000 */ wchar_t* grpi2_name;
  /* 0x0008 */ wchar_t* grpi2_comment;
  /* 0x0010 */ unsigned long grpi2_group_id;
  /* 0x0014 */ unsigned long grpi2_attributes;
} GROUP_INFO_2, *PGROUP_INFO_2; /* size: 0x0018 */

typedef struct _TRUSTEE_ACCESSA
{
  /* 0x0000 */ char* lpProperty;
  /* 0x0008 */ unsigned long Access;
  /* 0x000c */ unsigned long fAccessFlags;
  /* 0x0010 */ unsigned long fReturnedAccess;
  /* 0x0014 */ long __PADDING__[1];
} TRUSTEE_ACCESSA, *PTRUSTEE_ACCESSA; /* size: 0x0018 */

typedef struct _GROUP_USERS_INFO_1
{
  /* 0x0000 */ wchar_t* grui1_name;
  /* 0x0008 */ unsigned long grui1_attributes;
  /* 0x000c */ long __PADDING__[1];
} GROUP_USERS_INFO_1, *PGROUP_USERS_INFO_1; /* size: 0x0010 */

typedef struct _SERVER_INFO_1514
{
  /* 0x0000 */ int sv1514_enablesoftcompat;
} SERVER_INFO_1514, *PSERVER_INFO_1514; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1052
{
  /* 0x0000 */ int wki1052_use_lock_read_unlock;
} WKSTA_INFO_1052, *PWKSTA_INFO_1052; /* size: 0x0004 */

typedef struct _MEMORY_COMBINE_INFORMATION
{
  /* 0x0000 */ void* Handle;
  /* 0x0008 */ unsigned __int64 PagesCombined;
} MEMORY_COMBINE_INFORMATION, *PMEMORY_COMBINE_INFORMATION; /* size: 0x0010 */

typedef struct _WKSTA_USER_INFO_0
{
  /* 0x0000 */ wchar_t* wkui0_username;
} WKSTA_USER_INFO_0, *PWKSTA_USER_INFO_0; /* size: 0x0008 */

typedef struct _CLUS_PROVIDER_STATE_CHANGE_INFO
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ enum CLUSTER_RESOURCE_STATE resourceState;
  /* 0x0008 */ wchar_t szProviderId[1];
  /* 0x000a */ char __PADDING__[2];
} CLUS_PROVIDER_STATE_CHANGE_INFO, *PCLUS_PROVIDER_STATE_CHANGE_INFO; /* size: 0x000c */

struct IsElemental<int>
{
}; /* size: 0x0001 */

typedef struct _FILE_COMPRESSION_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER CompressedFileSize;
  /* 0x0008 */ unsigned short CompressionFormat;
  /* 0x000a */ unsigned char CompressionUnitShift;
  /* 0x000b */ unsigned char ChunkShift;
  /* 0x000c */ unsigned char ClusterShift;
  /* 0x000d */ unsigned char Reserved[3];
} FILE_COMPRESSION_INFORMATION, *PFILE_COMPRESSION_INFORMATION; /* size: 0x0010 */

typedef struct _MSG_INFO_1
{
  /* 0x0000 */ wchar_t* msgi1_name;
  /* 0x0008 */ unsigned long msgi1_forward_flag;
  /* 0x000c */ long Padding_2495;
  /* 0x0010 */ wchar_t* msgi1_forward;
} MSG_INFO_1, *PMSG_INFO_1; /* size: 0x0018 */

typedef struct _OBJECTS_AND_NAME_A
{
  /* 0x0000 */ unsigned long ObjectsPresent;
  /* 0x0004 */ enum _SE_OBJECT_TYPE ObjectType;
  /* 0x0008 */ char* ObjectTypeName;
  /* 0x0010 */ char* InheritedObjectTypeName;
  /* 0x0018 */ char* ptstrName;
} OBJECTS_AND_NAME_A, *POBJECTS_AND_NAME_A; /* size: 0x0020 */

typedef struct _SERVER_INFO_1510
{
  /* 0x0000 */ unsigned long sv1510_sessusers;
} SERVER_INFO_1510, *PSERVER_INFO_1510; /* size: 0x0004 */

typedef struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION
{
  /* 0x0000 */ struct _CLIENT_ID ClientId;
  /* 0x0010 */ long Priority;
  /* 0x0014 */ long __PADDING__[1];
} SYSTEM_THREAD_CID_PRIORITY_INFORMATION, *PSYSTEM_THREAD_CID_PRIORITY_INFORMATION; /* size: 0x0018 */

typedef struct _JOURNAL_CREATE_DELETE_KEY_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_2496;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _UNICODE_STRING KeyPathName;
  /* 0x0028 */ unsigned long SecurityDescriptorLength;
  /* 0x002c */ long Padding_2497;
  /* 0x0030 */ void* SecurityDescriptor;
  /* 0x0038 */ unsigned short ClassLength;
  /* 0x003a */ char Padding_2498[6];
  /* 0x0040 */ void* ClassData;
  /* 0x0048 */ unsigned char SymbolicLink;
  /* 0x0049 */ char __PADDING__[7];
} JOURNAL_CREATE_DELETE_KEY_INFORMATION, *PJOURNAL_CREATE_DELETE_KEY_INFORMATION; /* size: 0x0050 */

struct IRowsetNotify
{
}; /* size: 0x0008 */

typedef struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION
{
  /* 0x0000 */ unsigned char* IoStatusBlockRange;
  /* 0x0008 */ unsigned long Length;
  /* 0x000c */ long __PADDING__[1];
} FILE_IOSTATUSBLOCK_RANGE_INFORMATION, *PFILE_IOSTATUSBLOCK_RANGE_INFORMATION; /* size: 0x0010 */

typedef struct _KEY_WRITE_TIME_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER LastWriteTime;
} KEY_WRITE_TIME_INFORMATION, *PKEY_WRITE_TIME_INFORMATION; /* size: 0x0008 */

typedef struct _FILE_OBJECTID_INFORMATION
{
  /* 0x0000 */ __int64 FileReference;
  /* 0x0008 */ unsigned char ObjectId[16];
  union
  {
    struct
    {
      /* 0x0018 */ unsigned char BirthVolumeId[16];
      /* 0x0028 */ unsigned char BirthObjectId[16];
      /* 0x0038 */ unsigned char DomainId[16];
    }; /* size: 0x0030 */
    /* 0x0018 */ unsigned char ExtendedInfo[48];
  }; /* size: 0x0030 */
} FILE_OBJECTID_INFORMATION, *PFILE_OBJECTID_INFORMATION; /* size: 0x0048 */

typedef struct _RTL_USER_PROCESS_INFORMATION64
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_2499;
  /* 0x0008 */ __int64 Process;
  /* 0x0010 */ __int64 Thread;
  /* 0x0018 */ struct _CLIENT_ID64 ClientId;
  /* 0x0028 */ struct _SECTION_IMAGE_INFORMATION64 ImageInformation;
} RTL_USER_PROCESS_INFORMATION64, *PRTL_USER_PROCESS_INFORMATION64; /* size: 0x0068 */

typedef struct _PROCESS_HANDLE_TRACING_ENTRY
{
  /* 0x0000 */ void* Handle;
  /* 0x0008 */ struct _CLIENT_ID ClientId;
  /* 0x0018 */ unsigned long Type;
  /* 0x001c */ long Padding_2500;
  /* 0x0020 */ void* Stacks[16];
} PROCESS_HANDLE_TRACING_ENTRY, *PPROCESS_HANDLE_TRACING_ENTRY; /* size: 0x00a0 */

typedef struct _PROCESS_HANDLE_TRACING_QUERY
{
  /* 0x0000 */ void* Handle;
  /* 0x0008 */ unsigned long TotalTraces;
  /* 0x000c */ long Padding_2501;
  /* 0x0010 */ struct _PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
} PROCESS_HANDLE_TRACING_QUERY, *PPROCESS_HANDLE_TRACING_QUERY; /* size: 0x00b0 */

typedef struct _REPL_INFO_1003
{
  /* 0x0000 */ unsigned long rp1003_random;
} REPL_INFO_1003, *PREPL_INFO_1003; /* size: 0x0004 */

typedef struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA
{
  /* 0x0000 */ struct _PROCESSOR_PROFILE_CONTROL_AREA* ProcessorProfileControlArea;
  /* 0x0008 */ unsigned char Allocate;
  /* 0x0009 */ char __PADDING__[7];
} SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA, *PSYSTEM_PROCESSOR_PROFILE_CONTROL_AREA; /* size: 0x0010 */

struct CLUS_NETNAME_IP_INFO_FOR_MULTICHANNEL
{
  /* 0x0000 */ wchar_t szName[64];
  /* 0x0080 */ unsigned long NumEntries;
  /* 0x0084 */ struct CLUS_NETNAME_IP_INFO_ENTRY IpInfo[1];
}; /* size: 0x0090 */

typedef struct _AE_ACCLIM
{
  /* 0x0000 */ unsigned long ae_al_compname;
  /* 0x0004 */ unsigned long ae_al_username;
  /* 0x0008 */ unsigned long ae_al_resname;
  /* 0x000c */ unsigned long ae_al_limit;
} AE_ACCLIM, *PAE_ACCLIM; /* size: 0x0010 */

typedef struct _SERVER_INFO_1506
{
  /* 0x0000 */ unsigned long sv1506_maxworkitems;
} SERVER_INFO_1506, *PSERVER_INFO_1506; /* size: 0x0004 */

typedef struct _JOBOBJECT_WAKE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NotificationChannel;
  /* 0x0008 */ unsigned __int64 WakeCounters[4];
} JOBOBJECT_WAKE_INFORMATION, *PJOBOBJECT_WAKE_INFORMATION; /* size: 0x0028 */

struct KEY_PID_ARRAY
{
  /* 0x0000 */ void* PID;
  /* 0x0008 */ struct _UNICODE_STRING KeyName;
}; /* size: 0x0018 */

typedef struct _KEY_OPEN_SUBKEYS_INFORMATION
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ long Padding_2502;
  /* 0x0008 */ struct KEY_PID_ARRAY KeyArray[1];
} KEY_OPEN_SUBKEYS_INFORMATION, *PKEY_OPEN_SUBKEYS_INFORMATION; /* size: 0x0020 */

struct IMultipleResults
{
}; /* size: 0x0008 */

typedef struct _LOCALGROUP_INFO_1
{
  /* 0x0000 */ wchar_t* lgrpi1_name;
  /* 0x0008 */ wchar_t* lgrpi1_comment;
} LOCALGROUP_INFO_1, *PLOCALGROUP_INFO_1; /* size: 0x0010 */

struct IRowsetUpdate
{
}; /* size: 0x0008 */

typedef struct _LOCALGROUP_USERS_INFO_0
{
  /* 0x0000 */ wchar_t* lgrui0_name;
} LOCALGROUP_USERS_INFO_0, *PLOCALGROUP_USERS_INFO_0; /* size: 0x0008 */

struct IColumnsInfo2
{
}; /* size: 0x0008 */

struct IErrorRecords
{
}; /* size: 0x0008 */

typedef struct _SYSTEM_VERIFIER_FAULTS_INFORMATION
{
  /* 0x0000 */ unsigned long Probability;
  /* 0x0004 */ unsigned long MaxProbability;
  /* 0x0008 */ struct _UNICODE_STRING PoolTags;
  /* 0x0018 */ struct _UNICODE_STRING Applications;
} SYSTEM_VERIFIER_FAULTS_INFORMATION, *PSYSTEM_VERIFIER_FAULTS_INFORMATION; /* size: 0x0028 */

typedef struct _ALPC_DATA_VIEW_ATTR
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_2503;
  /* 0x0008 */ void* SectionHandle;
  /* 0x0010 */ void* ViewBase;
  /* 0x0018 */ unsigned __int64 ViewSize;
} ALPC_DATA_VIEW_ATTR, *PALPC_DATA_VIEW_ATTR; /* size: 0x0020 */

typedef struct _CM_PNP_BIOS_DEVICE_NODE
{
  /* 0x0000 */ unsigned short Size;
  /* 0x0002 */ unsigned char Node;
  /* 0x0003 */ unsigned long ProductId;
  /* 0x0007 */ unsigned char DeviceType[3];
  /* 0x000a */ unsigned short DeviceAttributes;
} CM_PNP_BIOS_DEVICE_NODE, *PCM_PNP_BIOS_DEVICE_NODE; /* size: 0x000c */

typedef struct _PLUGPLAY_CONTROL_TARGET_RELATION_DATA
{
  /* 0x0000 */ void* UserFileHandle;
  /* 0x0008 */ long Status;
  /* 0x000c */ unsigned long DeviceInstanceLen;
  /* 0x0010 */ wchar_t* DeviceInstance;
} PLUGPLAY_CONTROL_TARGET_RELATION_DATA, *PPLUGPLAY_CONTROL_TARGET_RELATION_DATA; /* size: 0x0018 */

typedef struct _REPL_EDIR_INFO_0
{
  /* 0x0000 */ wchar_t* rped0_dirname;
} REPL_EDIR_INFO_0, *PREPL_EDIR_INFO_0; /* size: 0x0008 */

typedef struct _PO_WAKE_SOURCE_HISTORY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ unsigned long Offsets[1];
} PO_WAKE_SOURCE_HISTORY, *PPO_WAKE_SOURCE_HISTORY; /* size: 0x0008 */

typedef struct _FILE_NUMA_NODE_INFORMATION
{
  /* 0x0000 */ unsigned short NodeNumber;
} FILE_NUMA_NODE_INFORMATION, *PFILE_NUMA_NODE_INFORMATION; /* size: 0x0002 */

struct IRowsetResynch
{
}; /* size: 0x0008 */

typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
  /* 0x0000 */ struct _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
  /* 0x0018 */ struct _LIST_ENTRY* ChainHead;
  /* 0x0020 */ unsigned long BucketIndex;
  /* 0x0024 */ long __PADDING__[1];
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, *PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR; /* size: 0x0028 */

typedef struct _CSTRING
{
  /* 0x0000 */ unsigned short Length;
  /* 0x0002 */ unsigned short MaximumLength;
  /* 0x0004 */ long Padding_2504;
  /* 0x0008 */ const char* Buffer;
} CSTRING, *PCSTRING; /* size: 0x0010 */

typedef struct _PROCESS_DEVICEMAP_INFORMATION
{
  union
  {
    struct
    {
      /* 0x0000 */ void* DirectoryHandle;
    } /* size: 0x0008 */ Set;
    struct
    {
      /* 0x0000 */ unsigned long DriveMap;
      /* 0x0004 */ unsigned char DriveType[32];
    } /* size: 0x0024 */ Query;
  }; /* size: 0x0024 */
  /* 0x0024 */ long __PADDING__[1];
} PROCESS_DEVICEMAP_INFORMATION, *PPROCESS_DEVICEMAP_INFORMATION; /* size: 0x0028 */

typedef struct _RTL_PROCESS_BACKTRACES_CONTROL
{
  /* 0x0000 */ unsigned long ControlCode;
  /* 0x0004 */ unsigned long ControlSize;
  union
  {
    /* 0x0008 */ unsigned char ControlData[1];
    /* 0x0008 */ struct _RTL_STACK_TRACE_DATABASE_CREATE DatabaseCreate;
  }; /* size: 0x0018 */
} RTL_PROCESS_BACKTRACES_CONTROL, *PRTL_PROCESS_BACKTRACES_CONTROL; /* size: 0x0020 */

typedef struct _USER_MODALS_INFO_1007
{
  /* 0x0000 */ wchar_t* usrmod1007_primary;
} USER_MODALS_INFO_1007, *PUSER_MODALS_INFO_1007; /* size: 0x0008 */

struct ITransactionJoin
{
}; /* size: 0x0008 */

typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX
{
  union
  {
    struct
    {
      /* 0x0000 */ void* DirectoryHandle;
    } /* size: 0x0008 */ Set;
    struct
    {
      /* 0x0000 */ unsigned long DriveMap;
      /* 0x0004 */ unsigned char DriveType[32];
    } /* size: 0x0024 */ Query;
  }; /* size: 0x0024 */
  /* 0x0024 */ long Padding_2505;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long __PADDING__[1];
} PROCESS_DEVICEMAP_INFORMATION_EX, *PPROCESS_DEVICEMAP_INFORMATION_EX; /* size: 0x0030 */

struct _CLUSTER_DISKID;

typedef struct _SERVER_INFO_1566
{
  /* 0x0000 */ int sv1566_removeduplicatesearches;
} SERVER_INFO_1566, *PSERVER_INFO_1566; /* size: 0x0004 */

class XESQLFailPointBaseEvent<XeSqlPkg::user_event>
{
}; /* size: 0x0240 */

typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
  /* 0x0000 */ unsigned long AllocatedAttributes;
  /* 0x0004 */ unsigned long ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, *PALPC_MESSAGE_ATTRIBUTES; /* size: 0x0008 */

typedef struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfProcessIdsInList;
  /* 0x0004 */ long Padding_2506;
  /* 0x0008 */ unsigned __int64 ProcessIdList[1];
} FILE_PROCESS_IDS_USING_FILE_INFORMATION, *PFILE_PROCESS_IDS_USING_FILE_INFORMATION; /* size: 0x0010 */

typedef struct _CM_MONITOR_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned short HorizontalScreenSize;
  /* 0x0006 */ unsigned short VerticalScreenSize;
  /* 0x0008 */ unsigned short HorizontalResolution;
  /* 0x000a */ unsigned short VerticalResolution;
  /* 0x000c */ unsigned short HorizontalDisplayTimeLow;
  /* 0x000e */ unsigned short HorizontalDisplayTime;
  /* 0x0010 */ unsigned short HorizontalDisplayTimeHigh;
  /* 0x0012 */ unsigned short HorizontalBackPorchLow;
  /* 0x0014 */ unsigned short HorizontalBackPorch;
  /* 0x0016 */ unsigned short HorizontalBackPorchHigh;
  /* 0x0018 */ unsigned short HorizontalFrontPorchLow;
  /* 0x001a */ unsigned short HorizontalFrontPorch;
  /* 0x001c */ unsigned short HorizontalFrontPorchHigh;
  /* 0x001e */ unsigned short HorizontalSyncLow;
  /* 0x0020 */ unsigned short HorizontalSync;
  /* 0x0022 */ unsigned short HorizontalSyncHigh;
  /* 0x0024 */ unsigned short VerticalBackPorchLow;
  /* 0x0026 */ unsigned short VerticalBackPorch;
  /* 0x0028 */ unsigned short VerticalBackPorchHigh;
  /* 0x002a */ unsigned short VerticalFrontPorchLow;
  /* 0x002c */ unsigned short VerticalFrontPorch;
  /* 0x002e */ unsigned short VerticalFrontPorchHigh;
  /* 0x0030 */ unsigned short VerticalSyncLow;
  /* 0x0032 */ unsigned short VerticalSync;
  /* 0x0034 */ unsigned short VerticalSyncHigh;
} CM_MONITOR_DEVICE_DATA, *PCM_MONITOR_DEVICE_DATA; /* size: 0x0036 */

typedef struct _PORT_DATA_INFORMATION
{
  /* 0x0000 */ unsigned long CountDataEntries;
  /* 0x0004 */ long Padding_2507;
  /* 0x0008 */ struct _PORT_DATA_ENTRY DataEntries[1];
} PORT_DATA_INFORMATION, *PPORT_DATA_INFORMATION; /* size: 0x0018 */

struct ITableDefinition
{
}; /* size: 0x0008 */

typedef struct _ALPC_HANDLE_ATTR
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ long Padding_2508;
  /* 0x0008 */ void* Handle;
  /* 0x0010 */ unsigned long ObjectType;
  /* 0x0014 */ unsigned long DesiredAccess;
} ALPC_HANDLE_ATTR, *PALPC_HANDLE_ATTR; /* size: 0x0018 */

typedef struct _USER_INFO_3
{
  /* 0x0000 */ wchar_t* usri3_name;
  /* 0x0008 */ wchar_t* usri3_password;
  /* 0x0010 */ unsigned long usri3_password_age;
  /* 0x0014 */ unsigned long usri3_priv;
  /* 0x0018 */ wchar_t* usri3_home_dir;
  /* 0x0020 */ wchar_t* usri3_comment;
  /* 0x0028 */ unsigned long usri3_flags;
  /* 0x002c */ long Padding_2509;
  /* 0x0030 */ wchar_t* usri3_script_path;
  /* 0x0038 */ unsigned long usri3_auth_flags;
  /* 0x003c */ long Padding_2510;
  /* 0x0040 */ wchar_t* usri3_full_name;
  /* 0x0048 */ wchar_t* usri3_usr_comment;
  /* 0x0050 */ wchar_t* usri3_parms;
  /* 0x0058 */ wchar_t* usri3_workstations;
  /* 0x0060 */ unsigned long usri3_last_logon;
  /* 0x0064 */ unsigned long usri3_last_logoff;
  /* 0x0068 */ unsigned long usri3_acct_expires;
  /* 0x006c */ unsigned long usri3_max_storage;
  /* 0x0070 */ unsigned long usri3_units_per_week;
  /* 0x0074 */ long Padding_2511;
  /* 0x0078 */ unsigned char* usri3_logon_hours;
  /* 0x0080 */ unsigned long usri3_bad_pw_count;
  /* 0x0084 */ unsigned long usri3_num_logons;
  /* 0x0088 */ wchar_t* usri3_logon_server;
  /* 0x0090 */ unsigned long usri3_country_code;
  /* 0x0094 */ unsigned long usri3_code_page;
  /* 0x0098 */ unsigned long usri3_user_id;
  /* 0x009c */ unsigned long usri3_primary_group_id;
  /* 0x00a0 */ wchar_t* usri3_profile;
  /* 0x00a8 */ wchar_t* usri3_home_dir_drive;
  /* 0x00b0 */ unsigned long usri3_password_expired;
  /* 0x00b4 */ long __PADDING__[1];
} USER_INFO_3, *PUSER_INFO_3; /* size: 0x00b8 */

typedef struct _ACCESS_LIST
{
  /* 0x0000 */ wchar_t* acl_ugname;
  /* 0x0008 */ unsigned long acl_access;
  /* 0x000c */ long __PADDING__[1];
} ACCESS_LIST, *PACCESS_LIST; /* size: 0x0010 */

typedef struct _COVERAGE_UNLOADED_MODULE_ENTRY
{
  /* 0x0000 */ struct _LIST_ENTRY NextEntry;
  /* 0x0010 */ struct _UNICODE_STRING BaseDllName;
  /* 0x0020 */ struct _UNICODE_STRING FullDllName;
  /* 0x0030 */ unsigned long CoverageSectionSize;
  /* 0x0034 */ long Padding_2512;
  /* 0x0038 */ void* CoverageSection;
} COVERAGE_UNLOADED_MODULE_ENTRY, *PCOVERAGE_UNLOADED_MODULE_ENTRY; /* size: 0x0040 */

struct tagDBDATE
{
  /* 0x0000 */ short year;
  /* 0x0002 */ unsigned short month;
  /* 0x0004 */ unsigned short day;
}; /* size: 0x0006 */

typedef struct _RTLP_PROCESS_REFLECTION_CONTEXT
{
  /* 0x0000 */ unsigned __int64 ReflectionContextSize;
  /* 0x0008 */ unsigned long ReflectionFlags;
  /* 0x000c */ long Padding_2513;
  /* 0x0010 */ void* ReflectionRoutine /* function */;
  /* 0x0018 */ void* ReflectionParameter;
  /* 0x0020 */ void* ReflectedProcessCreatedEvent;
  /* 0x0028 */ void* ReflectedProcessHandlesDuplicatedEvent;
  /* 0x0030 */ void* ReflectionStartEvent;
  /* 0x0038 */ struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation;
} RTLP_PROCESS_REFLECTION_CONTEXT, *PRTLP_PROCESS_REFLECTION_CONTEXT; /* size: 0x0058 */

typedef struct _SERVER_INFO_1016
{
  /* 0x0000 */ int sv1016_hidden;
} SERVER_INFO_1016, *PSERVER_INFO_1016; /* size: 0x0004 */

typedef struct _AE_SRVSTATUS
{
  /* 0x0000 */ unsigned long ae_sv_status;
} AE_SRVSTATUS, *PAE_SRVSTATUS; /* size: 0x0004 */

struct IDBCreateCommand
{
}; /* size: 0x0008 */

typedef struct _KEY_FULL_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0008 */ unsigned long TitleIndex;
  /* 0x000c */ unsigned long ClassOffset;
  /* 0x0010 */ unsigned long ClassLength;
  /* 0x0014 */ unsigned long SubKeys;
  /* 0x0018 */ unsigned long MaxNameLen;
  /* 0x001c */ unsigned long MaxClassLen;
  /* 0x0020 */ unsigned long Values;
  /* 0x0024 */ unsigned long MaxValueNameLen;
  /* 0x0028 */ unsigned long MaxValueDataLen;
  /* 0x002c */ wchar_t Class[1];
  /* 0x002e */ char __PADDING__[2];
} KEY_FULL_INFORMATION, *PKEY_FULL_INFORMATION; /* size: 0x0030 */

typedef struct _SYSTEM_BASIC_INFORMATION
{
  /* 0x0000 */ unsigned long Reserved;
  /* 0x0004 */ unsigned long TimerResolution;
  /* 0x0008 */ unsigned long PageSize;
  /* 0x000c */ unsigned long NumberOfPhysicalPages;
  /* 0x0010 */ unsigned long LowestPhysicalPageNumber;
  /* 0x0014 */ unsigned long HighestPhysicalPageNumber;
  /* 0x0018 */ unsigned long AllocationGranularity;
  /* 0x001c */ long Padding_2514;
  /* 0x0020 */ unsigned __int64 MinimumUserModeAddress;
  /* 0x0028 */ unsigned __int64 MaximumUserModeAddress;
  /* 0x0030 */ unsigned __int64 ActiveProcessorsAffinityMask;
  /* 0x0038 */ char NumberOfProcessors;
  /* 0x0039 */ char __PADDING__[7];
} SYSTEM_BASIC_INFORMATION, *PSYSTEM_BASIC_INFORMATION; /* size: 0x0040 */

typedef struct _FILE_SFIO_VOLUME_INFORMATION
{
  /* 0x0000 */ unsigned long MaximumRequestsPerPeriod;
  /* 0x0004 */ unsigned long MinimumPeriod;
  /* 0x0008 */ unsigned long MinimumTransferSize;
} FILE_SFIO_VOLUME_INFORMATION, *PFILE_SFIO_VOLUME_INFORMATION; /* size: 0x000c */

typedef struct _HEAP_BLOCK_SETTABLE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 Settable;
  /* 0x0008 */ unsigned short TagIndex;
  /* 0x000a */ unsigned short AllocatorBackTraceIndex;
  /* 0x000c */ long __PADDING__[1];
} HEAP_BLOCK_SETTABLE_INFORMATION, *PHEAP_BLOCK_SETTABLE_INFORMATION; /* size: 0x0010 */

typedef struct _KLDR_DATA_TABLE_ENTRY32
{
  /* 0x0000 */ struct LIST_ENTRY32 InLoadOrderLinks;
  /* 0x0008 */ unsigned long __Undefined1;
  /* 0x000c */ unsigned long __Undefined2;
  /* 0x0010 */ unsigned long __Undefined3;
  /* 0x0014 */ unsigned long NonPagedDebugInfo;
  /* 0x0018 */ unsigned long DllBase;
  /* 0x001c */ unsigned long EntryPoint;
  /* 0x0020 */ unsigned long SizeOfImage;
  /* 0x0024 */ struct _STRING32 FullDllName;
  /* 0x002c */ struct _STRING32 BaseDllName;
  /* 0x0034 */ unsigned long Flags;
  /* 0x0038 */ unsigned short LoadCount;
  /* 0x003a */ unsigned short __Undefined5;
  /* 0x003c */ unsigned long __Undefined6;
  /* 0x0040 */ unsigned long CheckSum;
  /* 0x0044 */ unsigned long TimeDateStamp;
} KLDR_DATA_TABLE_ENTRY32, *PKLDR_DATA_TABLE_ENTRY32; /* size: 0x0048 */

typedef struct _WKSTA_INFO_1061
{
  /* 0x0000 */ int wki1061_use_512_byte_max_transfer;
} WKSTA_INFO_1061, *PWKSTA_INFO_1061; /* size: 0x0004 */

typedef struct _FILE_PIPE_PEEK_BUFFER
{
  /* 0x0000 */ unsigned long NamedPipeState;
  /* 0x0004 */ unsigned long ReadDataAvailable;
  /* 0x0008 */ unsigned long NumberOfMessages;
  /* 0x000c */ unsigned long MessageLength;
  /* 0x0010 */ char Data[1];
  /* 0x0011 */ char __PADDING__[3];
} FILE_PIPE_PEEK_BUFFER, *PFILE_PIPE_PEEK_BUFFER; /* size: 0x0014 */

class XeCMPkg::cm_activate_manager_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2515[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_update_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2516[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_change_matrix_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2517[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int old_stateOffset;
    /* 0x0000 */ const int new_stateOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_quiesce_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2518[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_enlistment_sent_reply
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2519[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int reply_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_release_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2520[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_msg_handler_invoked
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2521[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int cma_addressOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cma_agent_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2522[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_brick_no_valid_reply_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2523[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_matrix_error_reported
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2524[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int reporter_brick_idOffset;
    /* 0x0000 */ const int reporter_componentOffset;
    /* 0x0000 */ const int target_brick_idOffset;
    /* 0x0000 */ const int target_componentOffset;
    /* 0x0000 */ const int flagsOffset;
    /* 0x0000 */ const int errorOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int message_textOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class XeCMPkg::cm_enlistment_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2525[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_notify_manager_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2526[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int notification_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_stopped
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2527[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_reconfig_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2528[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cluster_incarnationOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_local_force_close
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2529[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_quiesce_agent_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2530[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int agent_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_notify_manager_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2531[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int notification_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_enable_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2532[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int channel_map_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_initialize_manager
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2533[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int manager_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cma_shutdown_invoked
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2534[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_release_agent_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2535[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int agent_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_thread_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2536[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_placement_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2537[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_initialize_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2538[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_notify_brick_up
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2539[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_activate_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2540[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_main_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2541[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_enlistment_stopped
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2542[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_initialize_agent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2543[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int agent_idOffset;
    /* 0x0000 */ const int agent_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cma_quiesce_agent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2544[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int agent_idOffset;
    /* 0x0000 */ const int agent_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cma_evict_mci_sessions
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2545[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_reconfig_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2546[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cluster_incarnationOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_initialize_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2547[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_roster_brick_info
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2548[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int brick_stateOffset;
    /* 0x0000 */ const int brick_startup_timeOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeCMPkg::cma_retire_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2549[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int channel_map_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_add_brick_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2550[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_activate_manager
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2551[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int manager_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cm_quiesce_agent_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2552[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int agent_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_enlistment_created
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2553[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2554[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_quiesce_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2555[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_transition_online_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2556[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_invalid_configuration
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2557[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int resource_brick_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_created
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2558[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int cma_addressOffset;
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cma_enlistment_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2559[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_state_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2560[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_quiesce_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2561[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_activate_agent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2562[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int agent_idOffset;
    /* 0x0000 */ const int agent_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cma_main_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2563[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_initialize_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2564[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_enlistment_stopped
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2565[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_brick_shutdown_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2566[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int channel_map_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_evict_brick
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2567[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_announce_roster_info
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2568[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int roster_sizeOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_activate_agent_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2569[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int agent_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_activate_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2570[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_release_wait_for_enlistment
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2571[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_quiesce_manager
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2572[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int manager_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cm_online_event
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2573[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int cm_addressOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int operation_typeOffset;
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class XeCMPkg::cma_matrix_reconfig_msg_processed
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeCMPkg::cma_roster_info
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2574[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int roster_sizeOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_announce_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2575[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int channel_map_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_enable_msg_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2576[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_quiesce_manager_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2577[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_enlistment_join_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2578[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_change_agent_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2579[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int old_stateOffset;
    /* 0x0000 */ const int new_stateOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_matrix_error_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2580[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int reporter_brick_idOffset;
    /* 0x0000 */ const int reporter_componentOffset;
    /* 0x0000 */ const int target_brick_idOffset;
    /* 0x0000 */ const int target_componentOffset;
    /* 0x0000 */ const int flagsOffset;
    /* 0x0000 */ const int errorOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int message_textOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class XeCMPkg::cma_time_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2581[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_create_brick_error
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2582[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_enlistment_brick_evicted
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2583[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_shutdown_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2584[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int channel_map_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_activate_manager_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2585[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_release_agent_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2586[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int agent_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_stopped
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2587[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_shutdown_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2588[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_initialize_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2589[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_new_failure_request
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2590[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int errorOffset;
    /* 0x0000 */ const int severityOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int message_textOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class XeCMPkg::cm_enlistment_created
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2591[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_activate_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2592[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_channel_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2593[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_new_enlistment_request_processed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2594[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_master_boot_page_updated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2595[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_matrix_reconfig_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2596[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_release_agent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2597[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int agent_idOffset;
    /* 0x0000 */ const int agent_addressOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeCMPkg::cm_main_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2598[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_exit_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2599[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_activate_agent_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2600[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int agent_idOffset;
    /* 0x0000 */ const int agent_addressOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cm_release_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2601[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_release_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2602[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_quiesce_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2603[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_enlistment_brick_joined
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2604[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_activate_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2605[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_initial_enlistment_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2606[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_release_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2607[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_manager_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2608[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_release_manager_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2609[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_main_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2610[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_enlistment_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2611[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_reconfig_failed
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeCMPkg::cm_announce_msg_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2612[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int roster_sizeOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_retire_msg_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2613[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int channel_map_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_quiesce_manager_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2614[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_add_brick_reservation_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2615[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_enlistment_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2616[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_release_manager_started
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2617[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int manager_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_change_manager_state
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2618[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int manager_idOffset;
    /* 0x0000 */ const int old_stateOffset;
    /* 0x0000 */ const int new_stateOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeCMPkg::cm_matrix_reconfig_notification_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2619[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cma_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_enlistment_request_send
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2620[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cm_transition_online_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2621[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int cm_addressOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cm_activate_agent_completed
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2622[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int agent_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

class XeCMPkg::cma_manager_notify_msg_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2623[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeCMPkg::cma_enlistment_initialized
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2624[143];
      /* 0x0240 */ unsigned char m_buf[4];
    }; /* size: 0x0008 */
    /* 0x0000 */ const int brick_idOffset;
  }; /* size: 0x0008 */
}; /* size: 0x0248 */

struct XE_TObjects<XEEvent,83>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEEvent *,83> m_objectPtrs;
}; /* size: 0x02a8 */

typedef struct _PLUGPLAY_CONTROL_CONFLICT_STRINGS
{
  /* 0x0000 */ unsigned long NullDeviceInstance;
  /* 0x0004 */ wchar_t DeviceInstanceStrings[1];
  /* 0x0006 */ char __PADDING__[2];
} PLUGPLAY_CONTROL_CONFLICT_STRINGS, *PPLUGPLAY_CONTROL_CONFLICT_STRINGS; /* size: 0x0008 */

typedef struct _SHARE_INFO_1006
{
  /* 0x0000 */ unsigned long shi1006_max_uses;
} SHARE_INFO_1006, *PSHARE_INFO_1006; /* size: 0x0004 */

typedef struct _SERVER_INFO_1554
{
  /* 0x0000 */ unsigned long sv1554_linkinfovalidtime;
} SERVER_INFO_1554, *PSERVER_INFO_1554; /* size: 0x0004 */

typedef struct _LOCALGROUP_MEMBERS_INFO_1
{
  /* 0x0000 */ void* lgrmi1_sid;
  /* 0x0008 */ enum _SID_NAME_USE lgrmi1_sidusage;
  /* 0x000c */ long Padding_2625;
  /* 0x0010 */ wchar_t* lgrmi1_name;
} LOCALGROUP_MEMBERS_INFO_1, *PLOCALGROUP_MEMBERS_INFO_1; /* size: 0x0018 */

typedef struct _SERVER_INFO_1553
{
  /* 0x0000 */ unsigned long sv1553_minlinkthroughput;
} SERVER_INFO_1553, *PSERVER_INFO_1553; /* size: 0x0004 */

struct IAccessor
{
}; /* size: 0x0008 */

struct _HREGREADBATCH;

typedef struct _FILE_PREFETCH_EX
{
  /* 0x0000 */ unsigned long Type;
  /* 0x0004 */ unsigned long Count;
  /* 0x0008 */ void* Context;
  /* 0x0010 */ unsigned __int64 Prefetch[1];
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX; /* size: 0x0018 */

typedef struct _finddata32_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long time_create;
  /* 0x0008 */ long time_access;
  /* 0x000c */ long time_write;
  /* 0x0010 */ unsigned long size;
  /* 0x0014 */ char name[260];
} finddata32_t, *Pfinddata32_t; /* size: 0x0118 */

struct CLUS_NETNAME_PWD_INFO
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ wchar_t Password[16];
  /* 0x0024 */ wchar_t CreatingDC[258];
  /* 0x0228 */ wchar_t ObjectGuid[64];
}; /* size: 0x02a8 */

struct ISecurityInfo
{
}; /* size: 0x0008 */

struct ITmNodeName
{
}; /* size: 0x0008 */

typedef struct _FILE_FS_ATTRIBUTE_INFORMATION
{
  /* 0x0000 */ unsigned long FileSystemAttributes;
  /* 0x0004 */ long MaximumComponentNameLength;
  /* 0x0008 */ unsigned long FileSystemNameLength;
  /* 0x000c */ wchar_t FileSystemName[1];
  /* 0x000e */ char __PADDING__[2];
} FILE_FS_ATTRIBUTE_INFORMATION, *PFILE_FS_ATTRIBUTE_INFORMATION; /* size: 0x0010 */

typedef struct _SERVICE_INFO_2
{
  /* 0x0000 */ wchar_t* svci2_name;
  /* 0x0008 */ unsigned long svci2_status;
  /* 0x000c */ unsigned long svci2_code;
  /* 0x0010 */ unsigned long svci2_pid;
  /* 0x0014 */ long Padding_2626;
  /* 0x0018 */ wchar_t* svci2_text;
  /* 0x0020 */ unsigned long svci2_specific_error;
  /* 0x0024 */ long Padding_2627;
  /* 0x0028 */ wchar_t* svci2_display_name;
} SERVICE_INFO_2, *PSERVICE_INFO_2; /* size: 0x0030 */

typedef struct _MUICCHEADER
{
  /* 0x0000 */ unsigned int ulMaxStringsSize;
  /* 0x0004 */ unsigned int ulSizeStrings;
  /* 0x0008 */ unsigned int ulMaxNumInstalledCultures;
  /* 0x000c */ unsigned int ulNumInstalledCultures;
  /* 0x0010 */ unsigned int ulMaxNumUnverifiedCultures;
  /* 0x0014 */ unsigned int ulNumUnverifiedCultures;
} MUICCHEADER, *PMUICCHEADER; /* size: 0x0018 */

typedef struct _SYSTEM_VDM_INSTEMUL_INFO
{
  /* 0x0000 */ unsigned long SegmentNotPresent;
  /* 0x0004 */ unsigned long VdmOpcode0F;
  /* 0x0008 */ unsigned long OpcodeESPrefix;
  /* 0x000c */ unsigned long OpcodeCSPrefix;
  /* 0x0010 */ unsigned long OpcodeSSPrefix;
  /* 0x0014 */ unsigned long OpcodeDSPrefix;
  /* 0x0018 */ unsigned long OpcodeFSPrefix;
  /* 0x001c */ unsigned long OpcodeGSPrefix;
  /* 0x0020 */ unsigned long OpcodeOPER32Prefix;
  /* 0x0024 */ unsigned long OpcodeADDR32Prefix;
  /* 0x0028 */ unsigned long OpcodeINSB;
  /* 0x002c */ unsigned long OpcodeINSW;
  /* 0x0030 */ unsigned long OpcodeOUTSB;
  /* 0x0034 */ unsigned long OpcodeOUTSW;
  /* 0x0038 */ unsigned long OpcodePUSHF;
  /* 0x003c */ unsigned long OpcodePOPF;
  /* 0x0040 */ unsigned long OpcodeINTnn;
  /* 0x0044 */ unsigned long OpcodeINTO;
  /* 0x0048 */ unsigned long OpcodeIRET;
  /* 0x004c */ unsigned long OpcodeINBimm;
  /* 0x0050 */ unsigned long OpcodeINWimm;
  /* 0x0054 */ unsigned long OpcodeOUTBimm;
  /* 0x0058 */ unsigned long OpcodeOUTWimm;
  /* 0x005c */ unsigned long OpcodeINB;
  /* 0x0060 */ unsigned long OpcodeINW;
  /* 0x0064 */ unsigned long OpcodeOUTB;
  /* 0x0068 */ unsigned long OpcodeOUTW;
  /* 0x006c */ unsigned long OpcodeLOCKPrefix;
  /* 0x0070 */ unsigned long OpcodeREPNEPrefix;
  /* 0x0074 */ unsigned long OpcodeREPPrefix;
  /* 0x0078 */ unsigned long OpcodeHLT;
  /* 0x007c */ unsigned long OpcodeCLI;
  /* 0x0080 */ unsigned long OpcodeSTI;
  /* 0x0084 */ unsigned long BopCount;
} SYSTEM_VDM_INSTEMUL_INFO, *PSYSTEM_VDM_INSTEMUL_INFO; /* size: 0x0088 */

typedef struct _SERVER_INFO_100
{
  /* 0x0000 */ unsigned long sv100_platform_id;
  /* 0x0004 */ long Padding_2628;
  /* 0x0008 */ wchar_t* sv100_name;
} SERVER_INFO_100, *PSERVER_INFO_100; /* size: 0x0010 */

typedef struct _SERVER_INFO_1535
{
  /* 0x0000 */ unsigned long sv1535_oplockbreakresponsewait;
} SERVER_INFO_1535, *PSERVER_INFO_1535; /* size: 0x0004 */

struct IRowsetRefresh
{
}; /* size: 0x0008 */

struct ICreateRow
{
}; /* size: 0x0008 */

struct IChapteredRowset
{
}; /* size: 0x0008 */

struct CLUS_MAINTENANCE_MODE_INFO
{
  /* 0x0000 */ int InMaintenance;
}; /* size: 0x0004 */

typedef struct _PATHNAME_BUFFER
{
  /* 0x0000 */ unsigned long PathNameLength;
  /* 0x0004 */ wchar_t Name[1];
  /* 0x0006 */ char __PADDING__[2];
} PATHNAME_BUFFER, *PPATHNAME_BUFFER; /* size: 0x0008 */

typedef struct _ALPC_SERVER_INFORMATION
{
  union
  {
    struct
    {
      /* 0x0000 */ void* ThreadHandle;
    } /* size: 0x0008 */ In;
    struct
    {
      /* 0x0000 */ unsigned char ThreadBlocked;
      /* 0x0001 */ char Padding_2629[7];
      /* 0x0008 */ void* ConnectedProcessId;
      /* 0x0010 */ struct _UNICODE_STRING ConnectionPortName;
    } /* size: 0x0020 */ Out;
  }; /* size: 0x0020 */
} ALPC_SERVER_INFORMATION, *PALPC_SERVER_INFORMATION; /* size: 0x0020 */

typedef struct _SYSTEM_DPC_BEHAVIOR_INFORMATION
{
  /* 0x0000 */ unsigned long Spare;
  /* 0x0004 */ unsigned long DpcQueueDepth;
  /* 0x0008 */ unsigned long MinimumDpcRate;
  /* 0x000c */ unsigned long AdjustDpcThreshold;
  /* 0x0010 */ unsigned long IdealDpcRate;
} SYSTEM_DPC_BEHAVIOR_INFORMATION, *PSYSTEM_DPC_BEHAVIOR_INFORMATION; /* size: 0x0014 */

struct CLUSTER_SHARED_VOLUME_STATE_INFO
{
  /* 0x0000 */ wchar_t szVolumeName[260];
  /* 0x0208 */ wchar_t szNodeName[260];
  /* 0x0410 */ enum CLUSTER_SHARED_VOLUME_STATE VolumeState;
}; /* size: 0x0414 */

typedef struct _EISA_DMA_CONFIGURATION
{
  /* 0x0000 */ struct _DMA_CONFIGURATION_BYTE0 ConfigurationByte0;
  /* 0x0001 */ struct _DMA_CONFIGURATION_BYTE1 ConfigurationByte1;
} EISA_DMA_CONFIGURATION, *PEISA_DMA_CONFIGURATION; /* size: 0x0002 */

typedef struct _RTL_GENERIC_TABLE
{
  /* 0x0000 */ struct _RTL_SPLAY_LINKS* TableRoot;
  /* 0x0008 */ struct _LIST_ENTRY InsertOrderList;
  /* 0x0018 */ struct _LIST_ENTRY* OrderedPointer;
  /* 0x0020 */ unsigned long WhichOrderedElement;
  /* 0x0024 */ unsigned long NumberGenericTableElements;
  /* 0x0028 */ void* CompareRoutine /* function */;
  /* 0x0030 */ void* AllocateRoutine /* function */;
  /* 0x0038 */ void* FreeRoutine /* function */;
  /* 0x0040 */ void* TableContext;
} RTL_GENERIC_TABLE, *PRTL_GENERIC_TABLE; /* size: 0x0048 */

typedef struct _CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_3_INPUT
{
  /* 0x0000 */ unsigned long dwFlags;
} CLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_3_INPUT, *PCLUSCTL_RESOURCE_TYPE_STORAGE_GET_AVAILABLE_DISKS_3_INPUT; /* size: 0x0004 */

struct CLUSTERVERSIONINFO
{
  /* 0x0000 */ unsigned long dwVersionInfoSize;
  /* 0x0004 */ unsigned short MajorVersion;
  /* 0x0006 */ unsigned short MinorVersion;
  /* 0x0008 */ unsigned short BuildNumber;
  /* 0x000a */ wchar_t szVendorId[64];
  /* 0x008a */ wchar_t szCSDVersion[64];
  /* 0x010a */ char Padding_2630[2];
  /* 0x010c */ unsigned long dwClusterHighestVersion;
  /* 0x0110 */ unsigned long dwClusterLowestVersion;
  /* 0x0114 */ unsigned long dwFlags;
  /* 0x0118 */ unsigned long dwReserved;
}; /* size: 0x011c */

struct CLUS_DNN_SODAFS_CLONE_STATUS
{
  /* 0x0000 */ unsigned long NodeId;
  /* 0x0004 */ enum CLUSTER_RESOURCE_STATE Status;
}; /* size: 0x0008 */

typedef struct _SYSTEM_LOOKASIDE_INFORMATION
{
  /* 0x0000 */ unsigned short CurrentDepth;
  /* 0x0002 */ unsigned short MaximumDepth;
  /* 0x0004 */ unsigned long TotalAllocates;
  /* 0x0008 */ unsigned long AllocateMisses;
  /* 0x000c */ unsigned long TotalFrees;
  /* 0x0010 */ unsigned long FreeMisses;
  /* 0x0014 */ unsigned long Type;
  /* 0x0018 */ unsigned long Tag;
  /* 0x001c */ unsigned long Size;
} SYSTEM_LOOKASIDE_INFORMATION, *PSYSTEM_LOOKASIDE_INFORMATION; /* size: 0x0020 */

typedef struct _SERVER_INFO_402
{
  /* 0x0000 */ unsigned long sv402_ulist_mtime;
  /* 0x0004 */ unsigned long sv402_glist_mtime;
  /* 0x0008 */ unsigned long sv402_alist_mtime;
  /* 0x000c */ long Padding_2631;
  /* 0x0010 */ wchar_t* sv402_alerts;
  /* 0x0018 */ unsigned long sv402_security;
  /* 0x001c */ unsigned long sv402_numadmin;
  /* 0x0020 */ unsigned long sv402_lanmask;
  /* 0x0024 */ long Padding_2632;
  /* 0x0028 */ wchar_t* sv402_guestacct;
  /* 0x0030 */ unsigned long sv402_chdevs;
  /* 0x0034 */ unsigned long sv402_chdevq;
  /* 0x0038 */ unsigned long sv402_chdevjobs;
  /* 0x003c */ unsigned long sv402_connections;
  /* 0x0040 */ unsigned long sv402_shares;
  /* 0x0044 */ unsigned long sv402_openfiles;
  /* 0x0048 */ unsigned long sv402_sessopens;
  /* 0x004c */ unsigned long sv402_sessvcs;
  /* 0x0050 */ unsigned long sv402_sessreqs;
  /* 0x0054 */ unsigned long sv402_opensearch;
  /* 0x0058 */ unsigned long sv402_activelocks;
  /* 0x005c */ unsigned long sv402_numreqbuf;
  /* 0x0060 */ unsigned long sv402_sizreqbuf;
  /* 0x0064 */ unsigned long sv402_numbigbuf;
  /* 0x0068 */ unsigned long sv402_numfiletasks;
  /* 0x006c */ unsigned long sv402_alertsched;
  /* 0x0070 */ unsigned long sv402_erroralert;
  /* 0x0074 */ unsigned long sv402_logonalert;
  /* 0x0078 */ unsigned long sv402_accessalert;
  /* 0x007c */ unsigned long sv402_diskalert;
  /* 0x0080 */ unsigned long sv402_netioalert;
  /* 0x0084 */ unsigned long sv402_maxauditsz;
  /* 0x0088 */ wchar_t* sv402_srvheuristics;
} SERVER_INFO_402, *PSERVER_INFO_402; /* size: 0x0090 */

typedef struct _SERVER_INFO_1010
{
  /* 0x0000 */ long sv1010_disc;
} SERVER_INFO_1010, *PSERVER_INFO_1010; /* size: 0x0004 */

typedef struct _MUTANT_BASIC_INFORMATION
{
  /* 0x0000 */ long CurrentCount;
  /* 0x0004 */ unsigned char OwnedByCaller;
  /* 0x0005 */ unsigned char AbandonedState;
  /* 0x0006 */ char __PADDING__[2];
} MUTANT_BASIC_INFORMATION, *PMUTANT_BASIC_INFORMATION; /* size: 0x0008 */

typedef struct _SYSTEM_FILECACHE_INFORMATION
{
  /* 0x0000 */ unsigned __int64 CurrentSize;
  /* 0x0008 */ unsigned __int64 PeakSize;
  /* 0x0010 */ unsigned long PageFaultCount;
  /* 0x0014 */ long Padding_2633;
  /* 0x0018 */ unsigned __int64 MinimumWorkingSet;
  /* 0x0020 */ unsigned __int64 MaximumWorkingSet;
  /* 0x0028 */ unsigned __int64 CurrentSizeIncludingTransitionInPages;
  /* 0x0030 */ unsigned __int64 PeakSizeIncludingTransitionInPages;
  /* 0x0038 */ unsigned long TransitionRePurposeCount;
  /* 0x003c */ unsigned long Flags;
} SYSTEM_FILECACHE_INFORMATION, *PSYSTEM_FILECACHE_INFORMATION; /* size: 0x0040 */

typedef struct _SERVER_INFO_1534
{
  /* 0x0000 */ unsigned long sv1534_oplockbreakwait;
} SERVER_INFO_1534, *PSERVER_INFO_1534; /* size: 0x0004 */

struct tagDBTIMESTAMP
{
  /* 0x0000 */ short year;
  /* 0x0002 */ unsigned short month;
  /* 0x0004 */ unsigned short day;
  /* 0x0006 */ unsigned short hour;
  /* 0x0008 */ unsigned short minute;
  /* 0x000a */ unsigned short second;
  /* 0x000c */ unsigned long fraction;
}; /* size: 0x0010 */

typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long VirtualTarget : 1; /* bit position: 0 */
    /* 0x0000 */ unsigned long VirtualStore : 1; /* bit position: 1 */
    /* 0x0000 */ unsigned long VirtualSource : 1; /* bit position: 2 */
    /* 0x0000 */ unsigned long Reserved : 29; /* bit position: 3 */
  }; /* bitfield */
} KEY_SET_VIRTUALIZATION_INFORMATION, *PKEY_SET_VIRTUALIZATION_INFORMATION; /* size: 0x0004 */

typedef struct _FILE_FS_DEVICE_INFORMATION
{
  /* 0x0000 */ unsigned long DeviceType;
  /* 0x0004 */ unsigned long Characteristics;
} FILE_FS_DEVICE_INFORMATION, *PFILE_FS_DEVICE_INFORMATION; /* size: 0x0008 */

typedef struct _PS_CREATE_INFO
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ enum PS_CREATE_STATE State;
  /* 0x000c */ long Padding_2634;
  union
  {
    struct
    {
      union
      {
        /* 0x0010 */ unsigned long InitFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0010 */ unsigned char WriteOutputOnExit : 1; /* bit position: 0 */
            /* 0x0010 */ unsigned char DetectManifest : 1; /* bit position: 1 */
            /* 0x0010 */ unsigned char IFEOSkipDebugger : 1; /* bit position: 2 */
            /* 0x0010 */ unsigned char IFEODoNotPropagateKeyState : 1; /* bit position: 3 */
            /* 0x0010 */ unsigned char SpareBits1 : 4; /* bit position: 4 */
          }; /* bitfield */
          /* 0x0011 */ unsigned char SpareBits2 : 8; /* bit position: 0 */
          /* 0x0012 */ unsigned short ProhibitedImageCharacteristics : 16; /* bit position: 0 */
        }; /* size: 0x0004 */
      }; /* size: 0x0004 */
      /* 0x0014 */ unsigned long AdditionalFileAccess;
    } /* size: 0x0008 */ InitState;
    struct
    {
      /* 0x0010 */ void* FileHandle;
    } /* size: 0x0008 */ FailSection;
    struct
    {
      /* 0x0010 */ unsigned short DllCharacteristics;
    } /* size: 0x0002 */ ExeFormat;
    struct
    {
      /* 0x0010 */ void* IFEOKey;
    } /* size: 0x0008 */ ExeName;
    struct
    {
      union
      {
        /* 0x0010 */ unsigned long OutputFlags;
        struct
        {
          struct /* bitfield */
          {
            /* 0x0010 */ unsigned char ProtectedProcess : 1; /* bit position: 0 */
            /* 0x0010 */ unsigned char AddressSpaceOverride : 1; /* bit position: 1 */
            /* 0x0010 */ unsigned char DevOverrideEnabled : 1; /* bit position: 2 */
            /* 0x0010 */ unsigned char ManifestDetected : 1; /* bit position: 3 */
            /* 0x0010 */ unsigned char SpareBits1 : 4; /* bit position: 4 */
          }; /* bitfield */
          /* 0x0011 */ unsigned char SpareBits2 : 8; /* bit position: 0 */
          /* 0x0012 */ unsigned short SpareBits3 : 16; /* bit position: 0 */
        }; /* size: 0x0004 */
      }; /* size: 0x0004 */
      /* 0x0004 */ long Padding_2635;
      /* 0x0018 */ void* FileHandle;
      /* 0x0020 */ void* SectionHandle;
      /* 0x0028 */ unsigned __int64 UserProcessParametersNative;
      /* 0x0030 */ unsigned long UserProcessParametersWow64;
      /* 0x0034 */ unsigned long CurrentParameterFlags;
      /* 0x0038 */ unsigned __int64 PebAddressNative;
      /* 0x0040 */ unsigned long PebAddressWow64;
      /* 0x0034 */ long Padding_2636;
      /* 0x0048 */ unsigned __int64 ManifestAddress;
      /* 0x0050 */ unsigned long ManifestSize;
      /* 0x0054 */ long __PADDING__[1];
    } /* size: 0x0048 */ SuccessState;
  }; /* size: 0x0048 */
} PS_CREATE_INFO, *PPS_CREATE_INFO; /* size: 0x0058 */

typedef struct _ALPC_CONTEXT_ATTR
{
  /* 0x0000 */ void* PortContext;
  /* 0x0008 */ void* MessageContext;
  /* 0x0010 */ unsigned long Sequence;
  /* 0x0014 */ unsigned long MessageId;
  /* 0x0018 */ unsigned long CallbackId;
  /* 0x001c */ long __PADDING__[1];
} ALPC_CONTEXT_ATTR, *PALPC_CONTEXT_ATTR; /* size: 0x0020 */

typedef struct _API_SET_VALUE_ARRAY
{
  /* 0x0000 */ unsigned long Count;
  /* 0x0004 */ struct _API_SET_VALUE_ENTRY Array[1];
} API_SET_VALUE_ARRAY, *PAPI_SET_VALUE_ARRAY; /* size: 0x0014 */

typedef struct _CLUS_CSV_VOLUME_NAME
{
  /* 0x0000 */ union _LARGE_INTEGER VolumeOffset;
  /* 0x0008 */ wchar_t szVolumeName[260];
  /* 0x0210 */ wchar_t szRootPath[263];
  /* 0x041e */ char __PADDING__[2];
} CLUS_CSV_VOLUME_NAME, *PCLUS_CSV_VOLUME_NAME; /* size: 0x0420 */

typedef struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION
{
  /* 0x0000 */ unsigned long CancelProbability;
  /* 0x0004 */ unsigned long CancelThreshold;
  /* 0x0008 */ unsigned long CompletionThreshold;
  /* 0x000c */ unsigned long CancellationVerifierDisabled;
  /* 0x0010 */ unsigned long AvailableIssues;
  /* 0x0014 */ long Padding_2637;
  /* 0x0018 */ struct _SYSTEM_VERIFIER_ISSUE Issues[128];
} SYSTEM_VERIFIER_CANCELLATION_INFORMATION, *PSYSTEM_VERIFIER_CANCELLATION_INFORMATION; /* size: 0x1018 */

struct XE_TArray<XEMap *,1>
{
  /* 0x0000 */ struct XEMap* m_array[1];
}; /* size: 0x0008 */

struct XE_TObjects<XEMap,1>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,1> m_objectPtrs;
}; /* size: 0x0018 */

typedef struct _WKSTA_INFO_1059
{
  /* 0x0000 */ int wki1059_buf_read_only_files;
} WKSTA_INFO_1059, *PWKSTA_INFO_1059; /* size: 0x0004 */

typedef struct _MEMORY_REGION_INFORMATION
{
  /* 0x0000 */ void* AllocationBase;
  /* 0x0008 */ unsigned long AllocationProtect;
  /* 0x000c */ unsigned long RegionType;
  /* 0x0010 */ unsigned __int64 RegionSize;
  /* 0x0018 */ unsigned __int64 CommitSize;
} MEMORY_REGION_INFORMATION, *PMEMORY_REGION_INFORMATION; /* size: 0x0020 */

struct If<1,CSerializeContext<CMemBufFormatter>::ElementalSerializer,CSerializeContext<CMemBufFormatter>::ClassSerializer>
{
}; /* size: 0x0001 */

typedef struct _SYSTEM_NUMA_INFORMATION
{
  /* 0x0000 */ unsigned long HighestNodeNumber;
  /* 0x0004 */ unsigned long Reserved;
  union
  {
    /* 0x0008 */ struct _GROUP_AFFINITY ActiveProcessorsGroupAffinity[64];
    /* 0x0008 */ unsigned __int64 AvailableMemory[64];
    /* 0x0008 */ unsigned __int64 Pad[128];
  }; /* size: 0x0400 */
} SYSTEM_NUMA_INFORMATION, *PSYSTEM_NUMA_INFORMATION; /* size: 0x0408 */

typedef struct _RTL_UNLOAD_EVENT_TRACE64
{
  /* 0x0000 */ unsigned __int64 BaseAddress;
  /* 0x0008 */ unsigned __int64 SizeOfImage;
  /* 0x0010 */ unsigned long Sequence;
  /* 0x0014 */ unsigned long TimeDateStamp;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ wchar_t ImageName[32];
  /* 0x005c */ unsigned long Version[2];
  /* 0x0064 */ long __PADDING__[1];
} RTL_UNLOAD_EVENT_TRACE64, *PRTL_UNLOAD_EVENT_TRACE64; /* size: 0x0068 */

typedef struct _KEY_NODE_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER LastWriteTime;
  /* 0x0008 */ unsigned long TitleIndex;
  /* 0x000c */ unsigned long ClassOffset;
  /* 0x0010 */ unsigned long ClassLength;
  /* 0x0014 */ unsigned long NameLength;
  /* 0x0018 */ wchar_t Name[1];
  /* 0x001a */ char __PADDING__[6];
} KEY_NODE_INFORMATION, *PKEY_NODE_INFORMATION; /* size: 0x0020 */

struct IConvertType
{
}; /* size: 0x0008 */

typedef struct _SERVER_INFO_1005
{
  /* 0x0000 */ wchar_t* sv1005_comment;
} SERVER_INFO_1005, *PSERVER_INFO_1005; /* size: 0x0008 */

typedef struct _RTL_HEAP_TAG_INFO
{
  /* 0x0000 */ unsigned long NumberOfAllocations;
  /* 0x0004 */ unsigned long NumberOfFrees;
  /* 0x0008 */ unsigned __int64 BytesAllocated;
} RTL_HEAP_TAG_INFO, *PRTL_HEAP_TAG_INFO; /* size: 0x0010 */

typedef struct _USER_INFO_11
{
  /* 0x0000 */ wchar_t* usri11_name;
  /* 0x0008 */ wchar_t* usri11_comment;
  /* 0x0010 */ wchar_t* usri11_usr_comment;
  /* 0x0018 */ wchar_t* usri11_full_name;
  /* 0x0020 */ unsigned long usri11_priv;
  /* 0x0024 */ unsigned long usri11_auth_flags;
  /* 0x0028 */ unsigned long usri11_password_age;
  /* 0x002c */ long Padding_2638;
  /* 0x0030 */ wchar_t* usri11_home_dir;
  /* 0x0038 */ wchar_t* usri11_parms;
  /* 0x0040 */ unsigned long usri11_last_logon;
  /* 0x0044 */ unsigned long usri11_last_logoff;
  /* 0x0048 */ unsigned long usri11_bad_pw_count;
  /* 0x004c */ unsigned long usri11_num_logons;
  /* 0x0050 */ wchar_t* usri11_logon_server;
  /* 0x0058 */ unsigned long usri11_country_code;
  /* 0x005c */ long Padding_2639;
  /* 0x0060 */ wchar_t* usri11_workstations;
  /* 0x0068 */ unsigned long usri11_max_storage;
  /* 0x006c */ unsigned long usri11_units_per_week;
  /* 0x0070 */ unsigned char* usri11_logon_hours;
  /* 0x0078 */ unsigned long usri11_code_page;
  /* 0x007c */ long __PADDING__[1];
} USER_INFO_11, *PUSER_INFO_11; /* size: 0x0080 */

typedef struct _HLOG
{
  /* 0x0000 */ unsigned long time;
  /* 0x0004 */ unsigned long last_flags;
  /* 0x0008 */ unsigned long offset;
  /* 0x000c */ unsigned long rec_offset;
} HLOG, *PHLOG; /* size: 0x0010 */

typedef struct _WNF_UPDATE_DESCRIPTOR
{
  /* 0x0000 */ const struct _WNF_STATE_NAME* StateName;
  /* 0x0008 */ const struct _WNF_TYPE_ID* TypeId;
  /* 0x0010 */ const void* StateData;
  /* 0x0018 */ unsigned long Length;
  /* 0x001c */ long Padding_2640;
  /* 0x0020 */ void* ExplicitScope;
} WNF_UPDATE_DESCRIPTOR, *PWNF_UPDATE_DESCRIPTOR; /* size: 0x0028 */

struct SerializeControl<RPCStream,1>
{
}; /* size: 0x0001 */

struct IViewFilter
{
}; /* size: 0x0008 */

struct IRowsetScroll
{
}; /* size: 0x0008 */

typedef struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION
{
  /* 0x0000 */ struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION* Attributes;
  /* 0x0008 */ enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION* Operations;
} TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION, *PTOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION; /* size: 0x0010 */

typedef struct _FILE_FS_OBJECTID_INFORMATION
{
  /* 0x0000 */ unsigned char ObjectId[16];
  /* 0x0010 */ unsigned char ExtendedInfo[48];
} FILE_FS_OBJECTID_INFORMATION, *PFILE_FS_OBJECTID_INFORMATION; /* size: 0x0040 */

typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER
{
  /* 0x0000 */ unsigned long ProviderSignature;
  /* 0x0004 */ unsigned char Register;
  /* 0x0005 */ char Padding_2641[3];
  /* 0x0008 */ void* FirmwareTableHandler /* function */;
  /* 0x0010 */ void* DriverObject;
} SYSTEM_FIRMWARE_TABLE_HANDLER, *PSYSTEM_FIRMWARE_TABLE_HANDLER; /* size: 0x0018 */

typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION
{
  /* 0x0000 */ unsigned long ProviderSignature;
  /* 0x0004 */ enum _SYSTEM_FIRMWARE_TABLE_ACTION Action;
  /* 0x0008 */ unsigned long TableID;
  /* 0x000c */ unsigned long TableBufferLength;
  /* 0x0010 */ unsigned char TableBuffer[1];
  /* 0x0011 */ char __PADDING__[3];
} SYSTEM_FIRMWARE_TABLE_INFORMATION, *PSYSTEM_FIRMWARE_TABLE_INFORMATION; /* size: 0x0014 */

typedef struct _WKSTA_INFO_1010
{
  /* 0x0000 */ unsigned long wki1010_char_wait;
} WKSTA_INFO_1010, *PWKSTA_INFO_1010; /* size: 0x0004 */

typedef struct _AE_CONNSTART
{
  /* 0x0000 */ unsigned long ae_ct_compname;
  /* 0x0004 */ unsigned long ae_ct_username;
  /* 0x0008 */ unsigned long ae_ct_netname;
  /* 0x000c */ unsigned long ae_ct_connid;
} AE_CONNSTART, *PAE_CONNSTART; /* size: 0x0010 */

typedef struct _TP_DEBUG_FREE_INFO
{
  /* 0x0000 */ unsigned long FreeListSize;
} TP_DEBUG_FREE_INFO, *PTP_DEBUG_FREE_INFO; /* size: 0x0004 */

typedef struct _SYSDBG_PHYSICAL
{
  /* 0x0000 */ union _LARGE_INTEGER Address;
  /* 0x0008 */ void* Buffer;
  /* 0x0010 */ unsigned long Request;
  /* 0x0014 */ long __PADDING__[1];
} SYSDBG_PHYSICAL, *PSYSDBG_PHYSICAL; /* size: 0x0018 */

typedef struct _SERVER_INFO_1523
{
  /* 0x0000 */ unsigned long sv1523_maxkeepsearch;
} SERVER_INFO_1523, *PSERVER_INFO_1523; /* size: 0x0004 */

typedef struct _SYSTEM_MEMORY_LIST_INFORMATION
{
  /* 0x0000 */ unsigned __int64 ZeroPageCount;
  /* 0x0008 */ unsigned __int64 FreePageCount;
  /* 0x0010 */ unsigned __int64 ModifiedPageCount;
  /* 0x0018 */ unsigned __int64 ModifiedNoWritePageCount;
  /* 0x0020 */ unsigned __int64 BadPageCount;
  /* 0x0028 */ unsigned __int64 PageCountByPriority[8];
  /* 0x0068 */ unsigned __int64 RepurposedPagesByPriority[8];
  /* 0x00a8 */ unsigned __int64 ModifiedPageCountPageFile;
} SYSTEM_MEMORY_LIST_INFORMATION, *PSYSTEM_MEMORY_LIST_INFORMATION; /* size: 0x00b0 */

struct TClassId<CSessionTraceFlags>
{
}; /* size: 0x0001 */

typedef struct _ACTRL_ALISTA
{
  /* 0x0000 */ unsigned long cEntries;
  /* 0x0004 */ long Padding_2642;
  /* 0x0008 */ struct _ACTRL_PROPERTY_ENTRYA* pPropertyAccessList;
} ACTRL_ALISTA, *PACTRL_ALISTA; /* size: 0x0010 */

typedef struct _TIMER_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER RemainingTime;
  /* 0x0008 */ unsigned char TimerState;
  /* 0x0009 */ char __PADDING__[7];
} TIMER_BASIC_INFORMATION, *PTIMER_BASIC_INFORMATION; /* size: 0x0010 */

typedef struct _SERVER_INFO_1541
{
  /* 0x0000 */ int sv1541_minfreeconnections;
} SERVER_INFO_1541, *PSERVER_INFO_1541; /* size: 0x0004 */

typedef struct _SERVER_INFO_1576
{
  /* 0x0000 */ unsigned long sv1576_queuesamplesecs;
} SERVER_INFO_1576, *PSERVER_INFO_1576; /* size: 0x0004 */

typedef struct _SERVER_INFO_1587
{
  /* 0x0000 */ unsigned long sv1587_cacheddirectorylimit;
} SERVER_INFO_1587, *PSERVER_INFO_1587; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1047
{
  /* 0x0000 */ unsigned long wki1047_cache_file_timeout;
} WKSTA_INFO_1047, *PWKSTA_INFO_1047; /* size: 0x0004 */

class IsArray<unsigned int>
{
}; /* size: 0x0001 */

typedef struct _WORKER_FACTORY_BASIC_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER Timeout;
  /* 0x0008 */ union _LARGE_INTEGER RetryTimeout;
  /* 0x0010 */ union _LARGE_INTEGER IdleTimeout;
  /* 0x0018 */ unsigned char Paused;
  /* 0x0019 */ unsigned char TimerSet;
  /* 0x001a */ unsigned char QueuedToExWorker;
  /* 0x001b */ unsigned char MayCreate;
  /* 0x001c */ unsigned char CreateInProgress;
  /* 0x001d */ unsigned char InsertedIntoQueue;
  /* 0x001e */ unsigned char Shutdown;
  /* 0x001f */ char Padding_2643;
  /* 0x0020 */ unsigned long BindingCount;
  /* 0x0024 */ unsigned long ThreadMinimum;
  /* 0x0028 */ unsigned long ThreadMaximum;
  /* 0x002c */ unsigned long PendingWorkerCount;
  /* 0x0030 */ unsigned long WaitingWorkerCount;
  /* 0x0034 */ unsigned long TotalWorkerCount;
  /* 0x0038 */ unsigned long ReleaseCount;
  /* 0x003c */ long Padding_2644;
  /* 0x0040 */ __int64 InfiniteWaitGoal;
  /* 0x0048 */ void* StartRoutine /* function */;
  /* 0x0050 */ void* StartParameter;
  /* 0x0058 */ void* ProcessId;
  /* 0x0060 */ unsigned __int64 StackReserve;
  /* 0x0068 */ unsigned __int64 StackCommit;
  /* 0x0070 */ long LastThreadCreationStatus;
  /* 0x0074 */ long __PADDING__[1];
} WORKER_FACTORY_BASIC_INFORMATION, *PWORKER_FACTORY_BASIC_INFORMATION; /* size: 0x0078 */

class CFormatSpec
{
  union
  {
    /* 0x0000 */ const int x_cwchMaxFormatSpecLen;
    /* 0x0000 */ const unsigned short FS_FLAG_MINUS;
    /* 0x0000 */ const unsigned short FS_FLAG_PLUS;
    /* 0x0000 */ const unsigned short FS_FLAG_ZERO;
    /* 0x0000 */ const unsigned short FS_FLAG_POUND;
    /* 0x0000 */ const unsigned short FS_FLAG_BLANK;
    /* 0x0000 */ const unsigned short FS_DYN_WIDTH;
    /* 0x0000 */ const unsigned short FS_DYN_PREC;
    /* 0x0000 */ const unsigned short FS_TYPE_H;
    /* 0x0000 */ const unsigned short FS_TYPE_L;
    /* 0x0000 */ const unsigned short FS_TYPE_I64;
    /* 0x0000 */ const long L_UNLIMITED_NUMBER;
    struct
    {
      /* 0x0000 */ wchar_t m_wchType;
      /* 0x0002 */ unsigned short m_status;
    }; /* size: 0x0004 */
  }; /* size: 0x0004 */
  /* 0x0004 */ long m_lWidth;
  /* 0x0008 */ long m_lPrecision;
  /* 0x000c */ enum EFormatType m_ft;
}; /* size: 0x0010 */

struct IColumnsRowset
{
}; /* size: 0x0008 */

typedef struct _SERVER_INFO_1545
{
  /* 0x0000 */ unsigned long sv1545_initfiletable;
} SERVER_INFO_1545, *PSERVER_INFO_1545; /* size: 0x0004 */

struct IRowSchemaChange
{
}; /* size: 0x0008 */

typedef struct _CLUSTER_VALIDATE_PATH
{
  union
  {
    /* 0x0000 */ wchar_t* szPath /* zero-length array */;
    /* 0x0000 */ char __PADDING__[2];
  }; /* size: 0x0002 */
} CLUSTER_VALIDATE_PATH, *PCLUSTER_VALIDATE_PATH; /* size: 0x0002 */

typedef struct _PLUGPLAY_CONTROL_PROPERTY_DATA
{
  /* 0x0000 */ struct _UNICODE_STRING DeviceInstance;
  /* 0x0010 */ unsigned long PropertyType;
  /* 0x0014 */ long Padding_2645;
  /* 0x0018 */ void* Buffer;
  /* 0x0020 */ unsigned long BufferSize;
  /* 0x0024 */ long __PADDING__[1];
} PLUGPLAY_CONTROL_PROPERTY_DATA, *PPLUGPLAY_CONTROL_PROPERTY_DATA; /* size: 0x0028 */

typedef struct _SERVER_INFO_1596
{
  /* 0x0000 */ unsigned long sv1596_ConnectionNoSessionsTimeout;
} SERVER_INFO_1596, *PSERVER_INFO_1596; /* size: 0x0004 */

typedef struct _HARDWARE_COUNTER
{
  /* 0x0000 */ enum _HARDWARE_COUNTER_TYPE Type;
  /* 0x0004 */ unsigned long Reserved;
  /* 0x0008 */ unsigned __int64 Index;
} HARDWARE_COUNTER, *PHARDWARE_COUNTER; /* size: 0x0010 */

class XeUcsPkg::ucs_connection_rejected_by_proxy_whitelist
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,1> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2646[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int peer_addressOffset;
  }; /* size: 0x0118 */
}; /* size: 0x0248 */

class XeUcsPkg::ucs_change_notification
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2647[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int change_typeOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeUcsPkg::ucs_connection_corrupt_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2648[140];
      /* 0x0240 */ unsigned char m_buf[44];
    }; /* size: 0x003c */
    /* 0x0000 */ const int message_classOffset;
    /* 0x0000 */ const int message_protocolOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int encrypted_offsetOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int message_corruptionOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class XeUcsPkg::ucs_connection_flow_control
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2649[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int flow_control_eventOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int pending_send_boxcarsOffset;
    /* 0x0000 */ const int pending_recv_messagesOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0260 */

class XeUcsPkg::ucs_transmitter_service_reclassify
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2650[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int num_sessionsOffset;
    /* 0x0000 */ const int service_idOffset;
    /* 0x0000 */ const int local_keyOffset;
    /* 0x0000 */ const int service_addressOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int service_nameOffset;
    /* 0x0000 */ const int service_instanceOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0270 */

class XeUcsPkg::ucs_transmitter_service_session
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,12> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2651[140];
      /* 0x0240 */ unsigned char m_buf[73];
    }; /* size: 0x0059 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int service_addressOffset;
    /* 0x0000 */ const int service_idOffset;
    /* 0x0000 */ const int local_keyOffset;
    /* 0x0000 */ const int session_addressOffset;
    /* 0x0000 */ const int session_initiatorOffset;
    /* 0x0000 */ const int num_messagesOffset;
    /* 0x0000 */ const int num_sessionsOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int session_idOffset;
    /* 0x0000 */ const int service_nameOffset;
    /* 0x0000 */ const int service_instanceOffset;
  }; /* size: 0x02d0 */
}; /* size: 0x0290 */

class XeUcsPkg::ucs_connection_recv_io
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2652[140];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int control_block_addressOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int receives_postedOffset;
    /* 0x0000 */ const int bytes_receivedOffset;
    /* 0x0000 */ const int bytes_remainingOffset;
    /* 0x0000 */ const int error_codeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int error_messageOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0278 */

class XeUcsPkg::ucs_proxy_route_add
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2653[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int portOffset;
    /* 0x0000 */ const int clusterOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeUcsPkg::ucs_proxy_send_proxy_connect_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2654[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int proxied_endpoint_typeOffset;
    /* 0x0000 */ const int hop_countOffset;
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int correlator_idOffset;
    /* 0x0000 */ const int connection_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeUcsPkg::ucs_proxy_route_disable
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2655[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int portOffset;
    /* 0x0000 */ const int clusterOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeUcsPkg::ucs_task_periodic_work
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2656[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int num_handlers_startedOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeUcsPkg::ucs_proxy_route_refresh
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2657[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int portOffset;
    /* 0x0000 */ const int clusterOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeUcsPkg::ucs_transmitter_stream_update
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2658[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int stream_updateOffset;
    /* 0x0000 */ const int stream_statusOffset;
    /* 0x0000 */ const int status_versionOffset;
    /* 0x0000 */ const int error_codeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int error_messageOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeUcsPkg::ucs_connection_send_io
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2659[140];
      /* 0x0240 */ unsigned char m_buf[53];
    }; /* size: 0x0045 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int boxcar_addressOffset;
    /* 0x0000 */ const int bytes_sentOffset;
    /* 0x0000 */ const int message_countOffset;
    /* 0x0000 */ const int zero_copyOffset;
    /* 0x0000 */ const int error_codeOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int error_messageOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0278 */

class XeUcsPkg::ucs_connection_send_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2660[140];
      /* 0x0240 */ unsigned char m_buf[56];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int message_classOffset;
    /* 0x0000 */ const int message_protocolOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int encrypted_offsetOffset;
    /* 0x0000 */ const int boxcar_addressOffset;
    /* 0x0000 */ const int message_ref_addressOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0278 */

class XeUcsPkg::ucs_transport_periodic_work
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,2> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2661[140];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int num_connections_closedOffset;
  }; /* size: 0x0140 */
}; /* size: 0x0248 */

class XeUcsPkg::ucs_transmitter_destination_event
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2662[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int state_oldOffset;
    /* 0x0000 */ const int state_newOffset;
    /* 0x0000 */ const int stream_statusOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int target_addressOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class XeUcsPkg::ucs_connection_state_machine
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,7> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2663[140];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0034 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int eventOffset;
    /* 0x0000 */ const int stateOffset;
    /* 0x0000 */ const int actionOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0208 */
}; /* size: 0x0268 */

class XeUcsPkg::ucs_proxy_receive_proxy_connect_message
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2664[140];
      /* 0x0240 */ unsigned char m_buf[33];
    }; /* size: 0x0031 */
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int proxied_endpoint_typeOffset;
    /* 0x0000 */ const int hop_countOffset;
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int correlator_idOffset;
    /* 0x0000 */ const int connection_idOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeUcsPkg::ucs_connection_recv_msg
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2665[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int message_classOffset;
    /* 0x0000 */ const int message_protocolOffset;
    /* 0x0000 */ const int message_sizeOffset;
    /* 0x0000 */ const int encrypted_offsetOffset;
    /* 0x0000 */ const int global_pending_messagesOffset;
    /* 0x0000 */ const int connection_pending_messagesOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int addressOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0270 */

class XeUcsPkg::ucs_connection_setup
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,8> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2666[140];
      /* 0x0240 */ unsigned char m_buf[48];
    }; /* size: 0x0040 */
    /* 0x0000 */ const int setup_eventOffset;
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int stream_statusOffset;
    /* 0x0000 */ const int error_numberOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int error_messageOffset;
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int circuit_idOffset;
  }; /* size: 0x0230 */
}; /* size: 0x0270 */

class XeUcsPkg::ucs_transmitter_destination_connect
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,6> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2667[140];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x0038 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stream_statusOffset;
    /* 0x0000 */ const int error_codeOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int target_addressOffset;
    /* 0x0000 */ const int error_messageOffset;
  }; /* size: 0x01e0 */
}; /* size: 0x0268 */

class XeUcsPkg::ucs_transmitter_destination_process
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2668[140];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int num_messagesOffset;
    /* 0x0000 */ const int target_addressOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0258 */

class XeUcsPkg::ucs_transmitter_periodic_work
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,4> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2669[140];
      /* 0x0240 */ unsigned char m_buf[13];
    }; /* size: 0x001d */
    /* 0x0000 */ const int stageOffset;
    /* 0x0000 */ const int num_destinations_unsuppressedOffset;
    /* 0x0000 */ const int num_services_deletedOffset;
    /* 0x0000 */ const int did_reclassifyOffset;
  }; /* size: 0x0190 */
}; /* size: 0x0250 */

class XeUcsPkg::ucs_task_idempotent
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2670[140];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x002c */
    /* 0x0000 */ const int task_addressOffset;
    /* 0x0000 */ const int task_typeOffset;
    /* 0x0000 */ const int task_eventOffset;
    /* 0x0000 */ const int task_state_oldOffset;
    /* 0x0000 */ const int task_descriptionOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeUcsPkg::ucs_transmitter_destination_service
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,5> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2671[140];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0030 */
    /* 0x0000 */ const int operationOffset;
    /* 0x0000 */ const int destination_idOffset;
    /* 0x0000 */ const int service_addressOffset;
    /* 0x0000 */ const int num_messagesOffset;
    /* 0x0000 */ const int target_addressOffset;
  }; /* size: 0x01b8 */
}; /* size: 0x0260 */

class XeUcsPkg::ucs_proxy_connect_next_hop
{
  union
  {
    /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
    /* 0x0000 */ struct XE_TEvent<4,0,10> sm_metadata;
    /* 0x0000 */ struct XE_SessionContextList sm_contexts;
    struct
    {
      /* 0x0000 */ const struct _GUID sm_guid;
      /* 0x0010 */ long Padding_2672[140];
      /* 0x0240 */ unsigned char m_buf[57];
    }; /* size: 0x0049 */
    /* 0x0000 */ const int endpoint_typeOffset;
    /* 0x0000 */ const int parent_endpoint_typeOffset;
    /* 0x0000 */ const int proxied_endpoint_typeOffset;
    /* 0x0000 */ const int hop_countOffset;
    /* 0x0000 */ const int statusOffset;
    /* 0x0000 */ const int addressOffset;
    /* 0x0000 */ const int correlator_idOffset;
    /* 0x0000 */ const int connection_idOffset;
    /* 0x0000 */ const int parent_connection_idOffset;
    /* 0x0000 */ const int parent_connect_stringOffset;
  }; /* size: 0x0280 */
}; /* size: 0x0280 */

typedef struct _REMOTE_PORT_VIEW
{
  /* 0x0000 */ unsigned long Length;
  /* 0x0004 */ long Padding_2673;
  /* 0x0008 */ unsigned __int64 ViewSize;
  /* 0x0010 */ void* ViewBase;
} REMOTE_PORT_VIEW, *PREMOTE_PORT_VIEW; /* size: 0x0018 */

typedef struct _CLUS_CSV_SWPRV_INFO
{
  /* 0x0000 */ enum _CLUSTER_CSV_SWPRV_EVENT Event;
  /* 0x0004 */ long Padding_2674;
  union
  {
    struct
    {
      /* 0x0008 */ wchar_t VolumeName[260];
    } /* size: 0x0208 */ IVSIn;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotId;
    } /* size: 0x0010 */ GSPIn;
    struct
    {
      union
      {
        /* 0x0008 */ struct _GUID SnapshotSetId;
        /* 0x0008 */ struct _GUID PseudoVolumeId;
      }; /* size: 0x0010 */
      union
      {
        /* 0x0018 */ int ExposeSnapshot;
        /* 0x0018 */ long SnapshotCount;
      }; /* size: 0x0004 */
    } /* size: 0x0014 */ CSSIn;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotSetId;
      /* 0x0018 */ struct _GUID SnapshotId;
      /* 0x0028 */ wchar_t VolumeName[260];
      /* 0x0230 */ long SnapshotContext;
      /* 0x0234 */ unsigned long RequesterId;
    } /* size: 0x0230 */ BPSIn;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotId;
    } /* size: 0x0010 */ ESSIn;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotId;
      /* 0x0018 */ int ReadOnly;
      /* 0x001c */ wchar_t DeviceName[260];
      /* 0x0224 */ wchar_t ServiceHost[260];
      /* 0x042c */ wchar_t SnapshotCsvDevice[260];
      /* 0x0634 */ wchar_t VolumeName[260];
    } /* size: 0x0834 */ CSCIn;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotId;
      /* 0x0018 */ int IsPermanent;
      /* 0x001c */ wchar_t DeviceName[260];
    } /* size: 0x021c */ DSCIn;
    struct
    {
      /* 0x0008 */ struct _GUID ObjectId;
      /* 0x0018 */ long ObjectType;
      /* 0x001c */ int Force;
    } /* size: 0x0018 */ DSIn;
    struct
    {
      /* 0x0008 */ struct _GUID SnapshotSetId;
      /* 0x0018 */ struct _GUID PseudoVolumeId;
      /* 0x0028 */ unsigned long RequesterId;
    } /* size: 0x0024 */ HWSIn;
    struct
    {
      /* 0x0008 */ unsigned long SnapshotCount;
    } /* size: 0x0004 */ GASIn;
    struct
    {
      /* 0x0008 */ wchar_t VolumeName[260];
      /* 0x0210 */ wchar_t DiffAreaVolumeName[260];
      /* 0x0418 */ __int64 MaxDiffAreaSize;
    } /* size: 0x0418 */ ADAIn;
    struct
    {
      /* 0x0008 */ wchar_t VolumeName[260];
      /* 0x0210 */ wchar_t DiffAreaVolumeName[260];
      /* 0x0418 */ __int64 MaxDiffAreaSize;
      /* 0x0420 */ int Volatile;
      /* 0x0424 */ long __PADDING__[1];
    } /* size: 0x0420 */ CDASIn;
    struct
    {
      struct
      {
        /* 0x0008 */ wchar_t VolumeName[260];
        /* 0x0210 */ unsigned long ProtectionLevel;
      } /* size: 0x020c */ SVPLIn;
      /* 0x0214 */ long __PADDING__[395];
    }; /* size: 0x0838 */
  }; /* size: 0x0838 */
} CLUS_CSV_SWPRV_INFO, *PCLUS_CSV_SWPRV_INFO; /* size: 0x0840 */

typedef struct _SECURITY_SEED_AND_LENGTH
{
  /* 0x0000 */ unsigned char Length;
  /* 0x0001 */ unsigned char Seed;
} SECURITY_SEED_AND_LENGTH, *PSECURITY_SEED_AND_LENGTH; /* size: 0x0002 */

typedef struct _SERVER_INFO_1502
{
  /* 0x0000 */ unsigned long sv1502_sessvcs;
} SERVER_INFO_1502, *PSERVER_INFO_1502; /* size: 0x0004 */

struct XACTTRANSINFO
{
  /* 0x0000 */ struct BOID uow;
  /* 0x0010 */ long isoLevel;
  /* 0x0014 */ unsigned long isoFlags;
  /* 0x0018 */ unsigned long grfTCSupported;
  /* 0x001c */ unsigned long grfRMSupported;
  /* 0x0020 */ unsigned long grfTCSupportedRetaining;
  /* 0x0024 */ unsigned long grfRMSupportedRetaining;
}; /* size: 0x0028 */

typedef struct _SERVER_INFO_1533
{
  /* 0x0000 */ unsigned long sv1533_maxmpxct;
} SERVER_INFO_1533, *PSERVER_INFO_1533; /* size: 0x0004 */

typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION64
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ struct _PROCESS_BASIC_INFORMATION64 BasicInfo;
  union
  {
    /* 0x0038 */ unsigned int Flags;
    struct /* bitfield */
    {
      /* 0x0038 */ unsigned int IsProtectedProcess : 1; /* bit position: 0 */
      /* 0x0038 */ unsigned int IsWow64Process : 1; /* bit position: 1 */
      /* 0x0038 */ unsigned int IsProcessDeleting : 1; /* bit position: 2 */
      /* 0x0038 */ unsigned int IsCrossSessionCreate : 1; /* bit position: 3 */
      /* 0x0038 */ unsigned int SpareBits : 28; /* bit position: 4 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x003c */ long __PADDING__[1];
} PROCESS_EXTENDED_BASIC_INFORMATION64, *PPROCESS_EXTENDED_BASIC_INFORMATION64; /* size: 0x0040 */

struct ICommandText
{
}; /* size: 0x0008 */

typedef struct _RTL_DYNAMIC_TIME_ZONE_INFORMATION
{
  /* 0x0000 */ struct _RTL_TIME_ZONE_INFORMATION tzi;
  /* 0x00ac */ wchar_t TimeZoneKeyName[128];
  /* 0x01ac */ unsigned char DynamicDaylightTimeDisabled;
  /* 0x01ad */ char __PADDING__[3];
} RTL_DYNAMIC_TIME_ZONE_INFORMATION, *PRTL_DYNAMIC_TIME_ZONE_INFORMATION; /* size: 0x01b0 */

struct _RTL_UMS_COMPLETION_LIST;

struct _RTL_UMS_CONTEXT;

typedef struct _THREAD_UMS_INFORMATION
{
  /* 0x0000 */ enum _THREAD_UMS_INFORMATION_COMMAND Command;
  /* 0x0004 */ long Padding_2675;
  /* 0x0008 */ struct _RTL_UMS_COMPLETION_LIST* CompletionList;
  /* 0x0010 */ struct _RTL_UMS_CONTEXT* UmsContext;
} THREAD_UMS_INFORMATION, *PTHREAD_UMS_INFORMATION; /* size: 0x0018 */

typedef struct _USER_INFO_1009
{
  /* 0x0000 */ wchar_t* usri1009_script_path;
} USER_INFO_1009, *PUSER_INFO_1009; /* size: 0x0008 */

typedef struct _PS_STD_HANDLE_INFO
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long StdHandleState : 2; /* bit position: 0 */
      /* 0x0000 */ unsigned long PseudoHandleMask : 3; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned long StdHandleSubsystemType;
} PS_STD_HANDLE_INFO, *PPS_STD_HANDLE_INFO; /* size: 0x0008 */

typedef struct _RTL_BITMAP_EX
{
  /* 0x0000 */ unsigned __int64 SizeOfBitMap;
  /* 0x0008 */ unsigned __int64* Buffer;
} RTL_BITMAP_EX, *PRTL_BITMAP_EX; /* size: 0x0010 */

typedef struct _USER_INFO_1012
{
  /* 0x0000 */ wchar_t* usri1012_usr_comment;
} USER_INFO_1012, *PUSER_INFO_1012; /* size: 0x0008 */

typedef struct _PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA
{
  /* 0x0000 */ unsigned long DeviceInstanceLength;
  /* 0x0004 */ long Padding_2676;
  /* 0x0008 */ wchar_t* DeviceInstance;
} PLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA, *PPLUGPLAY_CONTROL_RETRIEVE_DOCK_DATA; /* size: 0x0010 */

typedef struct _WKSTA_INFO_1028
{
  /* 0x0000 */ unsigned long wki1028_print_buf_time;
} WKSTA_INFO_1028, *PWKSTA_INFO_1028; /* size: 0x0004 */

typedef struct _WKSTA_INFO_1042
{
  /* 0x0000 */ unsigned long wki1042_lock_increment;
} WKSTA_INFO_1042, *PWKSTA_INFO_1042; /* size: 0x0004 */

typedef struct _CLUSTER_TASK_INFO
{
  /* 0x0000 */ struct _CLUSTER_TASK_INFO* Next;
  /* 0x0008 */ wchar_t* TaskName;
  /* 0x0010 */ enum CLUSTER_TASK_TYPE TaskType;
  /* 0x0014 */ long Padding_2677;
  /* 0x0018 */ wchar_t* XMLText;
  /* 0x0020 */ wchar_t* ResourceId;
} CLUSTER_TASK_INFO, *PCLUSTER_TASK_INFO; /* size: 0x0028 */

typedef struct _FILE_DISPOSITION_INFORMATION
{
  /* 0x0000 */ unsigned char DeleteFile;
} FILE_DISPOSITION_INFORMATION, *PFILE_DISPOSITION_INFORMATION; /* size: 0x0001 */

typedef struct _FILE_PIPE_WAIT_FOR_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER Timeout;
  /* 0x0008 */ unsigned long NameLength;
  /* 0x000c */ unsigned char TimeoutSpecified;
  /* 0x000d */ char Padding_2678;
  /* 0x000e */ wchar_t Name[1];
} FILE_PIPE_WAIT_FOR_BUFFER, *PFILE_PIPE_WAIT_FOR_BUFFER; /* size: 0x0010 */

typedef struct _CLUS_STORAGE_REMAP_DRIVELETTER
{
  /* 0x0000 */ unsigned long CurrentDriveLetterMask;
  /* 0x0004 */ unsigned long TargetDriveLetterMask;
} CLUS_STORAGE_REMAP_DRIVELETTER, *PCLUS_STORAGE_REMAP_DRIVELETTER; /* size: 0x0008 */

class XESQLFailPointBaseEvent<XeSqlPkg::minlog_doubleflush_failpoint>
{
}; /* size: 0x0240 */

typedef struct _SERVER_INFO_1588
{
  /* 0x0000 */ unsigned long sv1588_maxcopylength;
} SERVER_INFO_1588, *PSERVER_INFO_1588; /* size: 0x0004 */

typedef struct _IO_STATUS_BLOCK32
{
  /* 0x0000 */ long Status;
  /* 0x0004 */ unsigned long Information;
} IO_STATUS_BLOCK32, *PIO_STATUS_BLOCK32; /* size: 0x0008 */

typedef struct _AE_LOCKOUT
{
  /* 0x0000 */ unsigned long ae_lk_compname;
  /* 0x0004 */ unsigned long ae_lk_username;
  /* 0x0008 */ unsigned long ae_lk_action;
  /* 0x000c */ unsigned long ae_lk_bad_pw_count;
} AE_LOCKOUT, *PAE_LOCKOUT; /* size: 0x0010 */

typedef struct _CM_KEYBOARD_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned char Type;
  /* 0x0005 */ unsigned char Subtype;
  /* 0x0006 */ unsigned short KeyboardFlags;
} CM_KEYBOARD_DEVICE_DATA, *PCM_KEYBOARD_DEVICE_DATA; /* size: 0x0008 */

typedef struct _SYSTEM_ERROR_PORT_TIMEOUTS
{
  /* 0x0000 */ unsigned long StartTimeout;
  /* 0x0004 */ unsigned long CommTimeout;
} SYSTEM_ERROR_PORT_TIMEOUTS, *PSYSTEM_ERROR_PORT_TIMEOUTS; /* size: 0x0008 */

struct XE_TObjects<XEMap,126>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,126> m_objectPtrs;
}; /* size: 0x0400 */

typedef struct _JOURNAL_TRANSACTION_BOUNDARY_INFORMATION
{
  /* 0x0000 */ enum _JOURNAL_CHANGE_INFORMATION_CLASS Action;
  /* 0x0004 */ long Padding_2679;
  /* 0x0008 */ unsigned __int64 RecordNumber;
  /* 0x0010 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0018 */ struct _GUID TransactionID;
} JOURNAL_TRANSACTION_BOUNDARY_INFORMATION, *PJOURNAL_TRANSACTION_BOUNDARY_INFORMATION; /* size: 0x0028 */

struct IsElementalHelper<unsigned long>
{
}; /* size: 0x0001 */

typedef struct _WKSTA_INFO_101
{
  /* 0x0000 */ unsigned long wki101_platform_id;
  /* 0x0004 */ long Padding_2680;
  /* 0x0008 */ wchar_t* wki101_computername;
  /* 0x0010 */ wchar_t* wki101_langroup;
  /* 0x0018 */ unsigned long wki101_ver_major;
  /* 0x001c */ unsigned long wki101_ver_minor;
  /* 0x0020 */ wchar_t* wki101_lanroot;
} WKSTA_INFO_101, *PWKSTA_INFO_101; /* size: 0x0028 */

typedef struct _JOBOBJECT_FREEZE_INFORMATION
{
  union
  {
    /* 0x0000 */ unsigned long Flags;
    struct /* bitfield */
    {
      /* 0x0000 */ unsigned long FreezeOperation : 1; /* bit position: 0 */
      /* 0x0000 */ unsigned long FilterOperation : 1; /* bit position: 1 */
      /* 0x0000 */ unsigned long Reserved : 30; /* bit position: 2 */
    }; /* bitfield */
  }; /* size: 0x0004 */
  /* 0x0004 */ unsigned char Freeze;
  /* 0x0005 */ unsigned char Reserved0[3];
  /* 0x0008 */ struct _JOBOBJECT_WAKE_FILTER WakeFilter;
} JOBOBJECT_FREEZE_INFORMATION, *PJOBOBJECT_FREEZE_INFORMATION; /* size: 0x0010 */

typedef struct _SERVER_INFO_1552
{
  /* 0x0000 */ unsigned long sv1552_maxlinkdelay;
} SERVER_INFO_1552, *PSERVER_INFO_1552; /* size: 0x0004 */

typedef struct _CM_SONIC_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned short DataConfigurationRegister;
  /* 0x0006 */ unsigned char EthernetAddress[8];
} CM_SONIC_DEVICE_DATA, *PCM_SONIC_DEVICE_DATA; /* size: 0x000e */

struct IGetDataSource
{
}; /* size: 0x0008 */

typedef struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION
{
  /* 0x0000 */ unsigned __int64 NumberOfHandles;
  /* 0x0008 */ unsigned __int64 Reserved;
  /* 0x0010 */ struct _PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[1];
} PROCESS_HANDLE_SNAPSHOT_INFORMATION, *PPROCESS_HANDLE_SNAPSHOT_INFORMATION; /* size: 0x0038 */

struct NTFS_EXTENDED_VOLUME_DATA
{
  /* 0x0000 */ unsigned long ByteCount;
  /* 0x0004 */ unsigned short MajorVersion;
  /* 0x0006 */ unsigned short MinorVersion;
  /* 0x0008 */ unsigned long BytesPerPhysicalSector;
}; /* size: 0x000c */

struct STARTING_LCN_INPUT_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER StartingLcn;
}; /* size: 0x0008 */

struct VOLUME_BITMAP_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER StartingLcn;
  /* 0x0008 */ union _LARGE_INTEGER BitmapSize;
  /* 0x0010 */ unsigned char Buffer[1];
  /* 0x0011 */ char __PADDING__[7];
}; /* size: 0x0018 */

struct STARTING_VCN_INPUT_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER StartingVcn;
}; /* size: 0x0008 */

struct NTFS_FILE_RECORD_OUTPUT_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER FileReferenceNumber;
  /* 0x0008 */ unsigned long FileRecordLength;
  /* 0x000c */ unsigned char FileRecordBuffer[1];
  /* 0x000d */ char __PADDING__[3];
}; /* size: 0x0010 */

struct FIND_BY_SID_OUTPUT
{
  /* 0x0000 */ unsigned long NextEntryOffset;
  /* 0x0004 */ unsigned long FileIndex;
  /* 0x0008 */ unsigned long FileNameLength;
  /* 0x000c */ wchar_t FileName[1];
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

struct CREATE_USN_JOURNAL_DATA
{
  /* 0x0000 */ unsigned __int64 MaximumSize;
  /* 0x0008 */ unsigned __int64 AllocationDelta;
}; /* size: 0x0010 */

struct READ_USN_JOURNAL_DATA
{
  /* 0x0000 */ __int64 StartUsn;
  /* 0x0008 */ unsigned long ReasonMask;
  /* 0x000c */ unsigned long ReturnOnlyOnClose;
  /* 0x0010 */ unsigned __int64 Timeout;
  /* 0x0018 */ unsigned __int64 BytesToWaitFor;
  /* 0x0020 */ unsigned __int64 UsnJournalID;
}; /* size: 0x0028 */

struct USN_RECORD
{
  /* 0x0000 */ unsigned long RecordLength;
  /* 0x0004 */ unsigned short MajorVersion;
  /* 0x0006 */ unsigned short MinorVersion;
  /* 0x0008 */ unsigned __int64 FileReferenceNumber;
  /* 0x0010 */ unsigned __int64 ParentFileReferenceNumber;
  /* 0x0018 */ __int64 Usn;
  /* 0x0020 */ union _LARGE_INTEGER TimeStamp;
  /* 0x0028 */ unsigned long Reason;
  /* 0x002c */ unsigned long SourceInfo;
  /* 0x0030 */ unsigned long SecurityId;
  /* 0x0034 */ unsigned long FileAttributes;
  /* 0x0038 */ unsigned short FileNameLength;
  /* 0x003a */ unsigned short FileNameOffset;
  /* 0x003c */ wchar_t FileName[1];
  /* 0x003e */ char __PADDING__[2];
}; /* size: 0x0040 */

struct USN_JOURNAL_DATA
{
  /* 0x0000 */ unsigned __int64 UsnJournalID;
  /* 0x0008 */ __int64 FirstUsn;
  /* 0x0010 */ __int64 NextUsn;
  /* 0x0018 */ __int64 LowestValidUsn;
  /* 0x0020 */ __int64 MaxUsn;
  /* 0x0028 */ unsigned __int64 MaximumSize;
  /* 0x0030 */ unsigned __int64 AllocationDelta;
}; /* size: 0x0038 */

struct DELETE_USN_JOURNAL_DATA
{
  /* 0x0000 */ unsigned __int64 UsnJournalID;
  /* 0x0008 */ unsigned long DeleteFlags;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct MARK_HANDLE_INFO
{
  /* 0x0000 */ unsigned long UsnSourceInfo;
  /* 0x0004 */ long Padding_2681;
  /* 0x0008 */ void* VolumeHandle;
  /* 0x0010 */ unsigned long HandleInfo;
  /* 0x0014 */ long __PADDING__[1];
}; /* size: 0x0018 */

struct MARK_HANDLE_INFO32
{
  /* 0x0000 */ unsigned long UsnSourceInfo;
  /* 0x0004 */ unsigned int VolumeHandle;
  /* 0x0008 */ unsigned long HandleInfo;
}; /* size: 0x000c */

struct BULK_SECURITY_TEST_DATA
{
  /* 0x0000 */ unsigned long DesiredAccess;
  /* 0x0004 */ unsigned long SecurityIds[1];
}; /* size: 0x0008 */

struct POWER_STATE_NOTIFY_HANDLER
{
  /* 0x0000 */ void* Handler /* function */;
  /* 0x0008 */ void* Context;
}; /* size: 0x0010 */

struct RTL_ACE_DATA
{
  /* 0x0000 */ unsigned char AceType;
  /* 0x0001 */ unsigned char InheritFlags;
  /* 0x0002 */ unsigned char AceFlags;
  /* 0x0003 */ char Padding_2682;
  /* 0x0004 */ unsigned long Mask;
  /* 0x0008 */ void** Sid;
}; /* size: 0x0010 */

struct CLUSTER_TASK_ENUM
{
  /* 0x0000 */ unsigned long TaskCount;
  /* 0x0004 */ long Padding_2683;
  /* 0x0008 */ struct _CLUSTER_TASK_INFO* TaskInfoList;
}; /* size: 0x0010 */

typedef class _RTL_CONSTANT_STRING_remove_const_template_class<2>
{
} RTL_CONSTANT_STRING_remove_const_template_class<2>, *PRTL_CONSTANT_STRING_remove_const_template_class<2>; /* size: 0x0001 */

typedef struct _SERVER_INFO_1512
{
  /* 0x0000 */ unsigned long sv1512_maxnonpagedmemoryusage;
} SERVER_INFO_1512, *PSERVER_INFO_1512; /* size: 0x0004 */

struct If<1,CSerializeContext<RPCStream>::NativeTypeFormatter,CSerializeContext<RPCStream>::CharTypeFormatter>
{
}; /* size: 0x0001 */

typedef struct _LDR_VERIFY_IMAGE_INFO
{
  /* 0x0000 */ unsigned long Size;
  /* 0x0004 */ unsigned long Flags;
  /* 0x0008 */ struct _LDR_IMPORT_CALLBACK_INFO CallbackInfo;
  /* 0x0018 */ struct _LDR_SECTION_INFO SectionInfo;
  /* 0x0038 */ unsigned short ImageCharacteristics;
  /* 0x003a */ char __PADDING__[6];
} LDR_VERIFY_IMAGE_INFO, *PLDR_VERIFY_IMAGE_INFO; /* size: 0x0040 */

typedef struct _SERVER_INFO_1539
{
  /* 0x0000 */ int sv1539_enableraw;
} SERVER_INFO_1539, *PSERVER_INFO_1539; /* size: 0x0004 */

class XESQLFailPointBaseEvent<XeSqlPkg::hadr_auto_page_repair_test_point>
{
}; /* size: 0x0240 */

struct IScopedOperations
{
}; /* size: 0x0008 */

typedef struct _IO_RESOURCE_REQUIREMENTS_LIST
{
  /* 0x0000 */ unsigned long ListSize;
  /* 0x0004 */ enum _INTERFACE_TYPE InterfaceType;
  /* 0x0008 */ unsigned long BusNumber;
  /* 0x000c */ unsigned long SlotNumber;
  /* 0x0010 */ unsigned long Reserved[3];
  /* 0x001c */ unsigned long AlternativeLists;
  /* 0x0020 */ struct _IO_RESOURCE_LIST List[1];
} IO_RESOURCE_REQUIREMENTS_LIST, *PIO_RESOURCE_REQUIREMENTS_LIST; /* size: 0x0048 */

typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION
{
  /* 0x0000 */ void* Buffer;
  /* 0x0008 */ unsigned long Size;
  /* 0x000c */ unsigned long ConcurrencyCount;
  /* 0x0010 */ unsigned long AttributeFlags;
  /* 0x0014 */ long __PADDING__[1];
} ALPC_PORT_COMPLETION_LIST_INFORMATION, *PALPC_PORT_COMPLETION_LIST_INFORMATION; /* size: 0x0018 */

typedef struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION
{
  /* 0x0000 */ unsigned long LowPriReadOperations;
  /* 0x0004 */ unsigned long LowPriWriteOperations;
  /* 0x0008 */ unsigned long KernelBumpedToNormalOperations;
  /* 0x000c */ unsigned long LowPriPagingReadOperations;
  /* 0x0010 */ unsigned long KernelPagingReadsBumpedToNormal;
  /* 0x0014 */ unsigned long LowPriPagingWriteOperations;
  /* 0x0018 */ unsigned long KernelPagingWritesBumpedToNormal;
  /* 0x001c */ unsigned long BoostedIrpCount;
  /* 0x0020 */ unsigned long BoostedPagingIrpCount;
  /* 0x0024 */ unsigned long BlanketBoostCount;
} SYSTEM_LOW_PRIORITY_IO_INFORMATION, *PSYSTEM_LOW_PRIORITY_IO_INFORMATION; /* size: 0x0028 */

typedef struct _SERVER_INFO_1590
{
  /* 0x0000 */ unsigned long sv1590_enablecompression;
} SERVER_INFO_1590, *PSERVER_INFO_1590; /* size: 0x0004 */

struct StaticStorage<28>
{
  /* 0x0000 */ unsigned int m_buf[1];
}; /* size: 0x0004 */

struct ICommandWithParameters
{
}; /* size: 0x0008 */

typedef struct _TEB_ACTIVE_FRAME_EX
{
  /* 0x0000 */ struct _TEB_ACTIVE_FRAME BasicFrame;
  /* 0x0018 */ void* ExtensionIdentifier;
} TEB_ACTIVE_FRAME_EX, *PTEB_ACTIVE_FRAME_EX; /* size: 0x0020 */

typedef struct _SERVER_INFO_403
{
  /* 0x0000 */ unsigned long sv403_ulist_mtime;
  /* 0x0004 */ unsigned long sv403_glist_mtime;
  /* 0x0008 */ unsigned long sv403_alist_mtime;
  /* 0x000c */ long Padding_2684;
  /* 0x0010 */ wchar_t* sv403_alerts;
  /* 0x0018 */ unsigned long sv403_security;
  /* 0x001c */ unsigned long sv403_numadmin;
  /* 0x0020 */ unsigned long sv403_lanmask;
  /* 0x0024 */ long Padding_2685;
  /* 0x0028 */ wchar_t* sv403_guestacct;
  /* 0x0030 */ unsigned long sv403_chdevs;
  /* 0x0034 */ unsigned long sv403_chdevq;
  /* 0x0038 */ unsigned long sv403_chdevjobs;
  /* 0x003c */ unsigned long sv403_connections;
  /* 0x0040 */ unsigned long sv403_shares;
  /* 0x0044 */ unsigned long sv403_openfiles;
  /* 0x0048 */ unsigned long sv403_sessopens;
  /* 0x004c */ unsigned long sv403_sessvcs;
  /* 0x0050 */ unsigned long sv403_sessreqs;
  /* 0x0054 */ unsigned long sv403_opensearch;
  /* 0x0058 */ unsigned long sv403_activelocks;
  /* 0x005c */ unsigned long sv403_numreqbuf;
  /* 0x0060 */ unsigned long sv403_sizreqbuf;
  /* 0x0064 */ unsigned long sv403_numbigbuf;
  /* 0x0068 */ unsigned long sv403_numfiletasks;
  /* 0x006c */ unsigned long sv403_alertsched;
  /* 0x0070 */ unsigned long sv403_erroralert;
  /* 0x0074 */ unsigned long sv403_logonalert;
  /* 0x0078 */ unsigned long sv403_accessalert;
  /* 0x007c */ unsigned long sv403_diskalert;
  /* 0x0080 */ unsigned long sv403_netioalert;
  /* 0x0084 */ unsigned long sv403_maxauditsz;
  /* 0x0088 */ wchar_t* sv403_srvheuristics;
  /* 0x0090 */ unsigned long sv403_auditedevents;
  /* 0x0094 */ unsigned long sv403_autoprofile;
  /* 0x0098 */ wchar_t* sv403_autopath;
} SERVER_INFO_403, *PSERVER_INFO_403; /* size: 0x00a0 */

struct MOVE_FILE_RECORD_DATA
{
  /* 0x0000 */ void* FileHandle;
  /* 0x0008 */ union _LARGE_INTEGER SourceFileRecord;
  /* 0x0010 */ union _LARGE_INTEGER TargetFileRecord;
}; /* size: 0x0018 */

class XeGDMPkg::gdm_message_enqueued
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2686[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_edge_released
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2687[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int edge_pool_sizeOffset;
    /* 0x0000 */ const int edge_pool_utilizationOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdma_workloop_entered
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2688[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_serialized_gwfg
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2689[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int gdm_cycle_progressOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdm_normal_cycle_progress
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2690[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int progressOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeGDMPkg::gdma_gwfg_fragment_reply_ready
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2691[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int transaction_id_countOffset;
    /* 0x0000 */ const int edge_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class XeGDMPkg::gdm_resources_released
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2692[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int general_pmo_addressOffset;
    /* 0x0000 */ const int general_pmo_utilizationOffset;
    /* 0x0000 */ const int gwfg_pmo_addressOffset;
    /* 0x0000 */ const int gwfg_pmo_utilizationOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class XeGDMPkg::gdm_transaction_id_list_message_ready
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2693[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int transaction_id_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeGDMPkg::gdm_deadlock_resolution_request_ready
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2694[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int victim_transaction_id_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeGDMPkg::gdm_request_ready
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2695[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeGDMPkg::gdma_initialized
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2696[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdm_message_wait_ended
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2697[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_initialized
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2698[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
    /* 0x0000 */ const int vertex_pool_sizeOffset;
    /* 0x0000 */ const int edge_pool_sizeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeGDMPkg::gdm_quiesced
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2699[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_normal_cycle_began
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2700[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_vertex_allocated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2701[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int vertex_pool_sizeOffset;
    /* 0x0000 */ const int vertex_pool_utilizationOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdm_reply_wait_ended
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2702[143];
      /* 0x0240 */ unsigned char m_buf[36];
    }; /* size: 0x0028 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int expected_reply_typeOffset;
    /* 0x0000 */ const int expected_reply_countOffset;
    /* 0x0000 */ const int reply_timeoutOffset;
    /* 0x0000 */ const int received_reply_countOffset;
    /* 0x0000 */ const int resultOffset;
  }; /* size: 0x0028 */
}; /* size: 0x0268 */

class XeGDMPkg::gdma_message_wait_began
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2703[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_transaction_local_state_information
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2704[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int transaction_local_state_descriptor_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdma_lwfg_vertex_to_xact_proxy_map
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2705[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int map_entry_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdm_message_wait_began
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2706[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_workloop_entered
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2707[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_transaction_local_stability_reply_ready
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2708[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
    /* 0x0000 */ const int transaction_local_stability_descriptor_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeGDMPkg::gdm_workloop_exited
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2709[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_reset
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2710[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_edge_pool_expanded
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2711[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int previous_edge_pool_sizeOffset;
    /* 0x0000 */ const int current_edge_pool_sizeOffset;
    /* 0x0000 */ const int edge_pool_utilizationOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_vertex_released
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2712[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int vertex_pool_sizeOffset;
    /* 0x0000 */ const int vertex_pool_utilizationOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdm_initialized
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2713[143];
      /* 0x0240 */ unsigned char m_buf[40];
    }; /* size: 0x002c */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int general_pmo_addressOffset;
    /* 0x0000 */ const int general_pmo_utilizationOffset;
    /* 0x0000 */ const int gwfg_pmo_addressOffset;
    /* 0x0000 */ const int gwfg_pmo_utilizationOffset;
  }; /* size: 0x002c */
}; /* size: 0x0268 */

class XeGDMPkg::gdm_activated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2714[143];
      /* 0x0240 */ unsigned char m_buf[32];
    }; /* size: 0x0024 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int gdm_addressOffset;
    /* 0x0000 */ const int gdm_task_addressOffset;
  }; /* size: 0x0024 */
}; /* size: 0x0260 */

class XeGDMPkg::gdma_message_wait_ended
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2715[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_normal_cycle_ended
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2716[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_reply_wait_began
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2717[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int expected_reply_typeOffset;
    /* 0x0000 */ const int expected_reply_countOffset;
    /* 0x0000 */ const int reply_timeoutOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdma_resources_released
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2718[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdma_lwfg_buffer_get_lwfg
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2719[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int lwfg_sequence_idOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdma_workloop_exited
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2720[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_state_transition
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2721[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int previous_stateOffset;
    /* 0x0000 */ const int current_stateOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdma_lwfg_buffer_initialized
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2722[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
    /* 0x0000 */ const int buffer_stateOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdm_message_dequeued
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2723[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeGDMPkg::gdma_lwfg_buffer_reset
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2724[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int pmo_addressOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
    /* 0x0000 */ const int current_stateOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_task_to_transaction_id_map
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2725[143];
      /* 0x0240 */ unsigned char m_buf[28];
    }; /* size: 0x0020 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int map_entry_countOffset;
    /* 0x0000 */ const int encoded_dataOffset;
  }; /* size: 0x0020 */
}; /* size: 0x0260 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_vertex_pool_expanded
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2726[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int previous_vertex_pool_sizeOffset;
    /* 0x0000 */ const int current_vertex_pool_sizeOffset;
    /* 0x0000 */ const int vertex_pool_utilizationOffset;
    /* 0x0000 */ const int pmo_utilizationOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_message_enqueued
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2727[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeGDMPkg::gdma_quiesced
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2728[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeGDMPkg::gdma_lwfg_buffer_object_allocator_edge_allocated
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2729[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int edge_pool_sizeOffset;
    /* 0x0000 */ const int edge_pool_utilizationOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeGDMPkg::gdma_message_dequeued
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2730[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int generation_idOffset;
    /* 0x0000 */ const int sequence_idOffset;
    /* 0x0000 */ const int message_typeOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

typedef struct _PS_CPU_QUOTA_SET_INFORMATION
{
  /* 0x0000 */ __int64 SessionHandle;
  /* 0x0008 */ unsigned long Weight;
  /* 0x000c */ long __PADDING__[1];
} PS_CPU_QUOTA_SET_INFORMATION, *PPS_CPU_QUOTA_SET_INFORMATION; /* size: 0x0010 */

struct NTFS_VOLUME_DATA_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER VolumeSerialNumber;
  /* 0x0008 */ union _LARGE_INTEGER NumberSectors;
  /* 0x0010 */ union _LARGE_INTEGER TotalClusters;
  /* 0x0018 */ union _LARGE_INTEGER FreeClusters;
  /* 0x0020 */ union _LARGE_INTEGER TotalReserved;
  /* 0x0028 */ unsigned long BytesPerSector;
  /* 0x002c */ unsigned long BytesPerCluster;
  /* 0x0030 */ unsigned long BytesPerFileRecordSegment;
  /* 0x0034 */ unsigned long ClustersPerFileRecordSegment;
  /* 0x0038 */ union _LARGE_INTEGER MftValidDataLength;
  /* 0x0040 */ union _LARGE_INTEGER MftStartLcn;
  /* 0x0048 */ union _LARGE_INTEGER Mft2StartLcn;
  /* 0x0050 */ union _LARGE_INTEGER MftZoneStart;
  /* 0x0058 */ union _LARGE_INTEGER MftZoneEnd;
}; /* size: 0x0060 */

typedef struct _SYSTEM_MEMORY_INFORMATION
{
  /* 0x0000 */ unsigned __int64 PagedPoolCommitPageCount;
  /* 0x0008 */ unsigned __int64 NonPagedPoolPageCount;
  /* 0x0010 */ unsigned __int64 MdlPageCount;
  /* 0x0018 */ unsigned __int64 CommitPageCount;
} SYSTEM_MEMORY_INFORMATION, *PSYSTEM_MEMORY_INFORMATION; /* size: 0x0020 */

struct IMDDataset
{
}; /* size: 0x0008 */

typedef struct _GROUP_INFO_1
{
  /* 0x0000 */ wchar_t* grpi1_name;
  /* 0x0008 */ wchar_t* grpi1_comment;
} GROUP_INFO_1, *PGROUP_INFO_1; /* size: 0x0010 */

struct CLUS_PARTITION_INFO
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ wchar_t szDeviceName[260];
  /* 0x020c */ wchar_t szVolumeLabel[260];
  /* 0x0414 */ unsigned long dwSerialNumber;
  /* 0x0418 */ unsigned long rgdwMaximumComponentLength;
  /* 0x041c */ unsigned long dwFileSystemFlags;
  /* 0x0420 */ wchar_t szFileSystem[32];
}; /* size: 0x0460 */

struct CLUS_PARTITION_INFO_EX
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ wchar_t szDeviceName[260];
  /* 0x020c */ wchar_t szVolumeLabel[260];
  /* 0x0414 */ unsigned long dwSerialNumber;
  /* 0x0418 */ unsigned long rgdwMaximumComponentLength;
  /* 0x041c */ unsigned long dwFileSystemFlags;
  /* 0x0420 */ wchar_t szFileSystem[32];
  /* 0x0460 */ union _ULARGE_INTEGER TotalSizeInBytes;
  /* 0x0468 */ union _ULARGE_INTEGER FreeSizeInBytes;
  /* 0x0470 */ unsigned long DeviceNumber;
  /* 0x0474 */ unsigned long PartitionNumber;
  /* 0x0478 */ struct _GUID VolumeGuid;
}; /* size: 0x0488 */

struct IRowPosition
{
}; /* size: 0x0008 */

struct IObjectAccessControl
{
}; /* size: 0x0008 */

struct SUcsEndpointInfo
{
  /* 0x0000 */ enum ESbEndpointType eetType;
  /* 0x0004 */ long Padding_2731;
  /* 0x0008 */ wchar_t* pwchDesciption;
  /* 0x0010 */ int iPhrase;
  /* 0x0014 */ BOOL fArbitrate;
  /* 0x0015 */ char Padding_2732[3];
  /* 0x0018 */ enum ETaskSpecialization eTaskSpecialization;
  /* 0x0018 */ long Padding_2733;
  /* 0x001c */ BOOL fSuppress;
  /* 0x001d */ BOOL fCritical;
  /* 0x001e */ char __PADDING__[2];
}; /* size: 0x0020 */

typedef struct _SHARE_INFO_501
{
  /* 0x0000 */ wchar_t* shi501_netname;
  /* 0x0008 */ unsigned long shi501_type;
  /* 0x000c */ long Padding_2734;
  /* 0x0010 */ wchar_t* shi501_remark;
  /* 0x0018 */ unsigned long shi501_flags;
  /* 0x001c */ long __PADDING__[1];
} SHARE_INFO_501, *PSHARE_INFO_501; /* size: 0x0020 */

struct If<1,CSerializeContext<RPCStream>::ElementalSerializer,CSerializeContext<RPCStream>::GenericSerializer>
{
}; /* size: 0x0001 */

struct MFT_ENUM_DATA
{
  /* 0x0000 */ unsigned __int64 StartFileReferenceNumber;
  /* 0x0008 */ __int64 LowUsn;
  /* 0x0010 */ __int64 HighUsn;
}; /* size: 0x0018 */

struct IsElementalHelper<unsigned int>
{
}; /* size: 0x0001 */

typedef struct _ACTRL_OVERLAPPED
{
  union
  {
    /* 0x0000 */ void* Provider;
    /* 0x0000 */ unsigned long Reserved1;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned long Reserved2;
  /* 0x000c */ long Padding_2735;
  /* 0x0010 */ void* hEvent;
} ACTRL_OVERLAPPED, *PACTRL_OVERLAPPED; /* size: 0x0018 */

typedef struct _OBJECT_TYPES_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfTypes;
} OBJECT_TYPES_INFORMATION, *POBJECT_TYPES_INFORMATION; /* size: 0x0004 */

typedef struct _WKSTA_USER_INFO_1
{
  /* 0x0000 */ wchar_t* wkui1_username;
  /* 0x0008 */ wchar_t* wkui1_logon_domain;
  /* 0x0010 */ wchar_t* wkui1_oth_domains;
  /* 0x0018 */ wchar_t* wkui1_logon_server;
} WKSTA_USER_INFO_1, *PWKSTA_USER_INFO_1; /* size: 0x0020 */

typedef struct _SEC_OBJECT
{
  /* 0x0000 */ unsigned long cObjects;
  /* 0x0004 */ long Padding_2736;
  /* 0x0008 */ struct _SEC_OBJECT_ELEMENT* prgObjects;
} SEC_OBJECT, *PSEC_OBJECT; /* size: 0x0010 */

class CSqlProfSupport
{
  /* 0x0000 */ void* m_pv;
}; /* size: 0x0008 */

struct IRowsetLocate
{
}; /* size: 0x0008 */

typedef struct _MOVE_FILE_DATA32
{
  /* 0x0000 */ unsigned int FileHandle;
  /* 0x0004 */ long Padding_2737;
  /* 0x0008 */ union _LARGE_INTEGER StartingVcn;
  /* 0x0010 */ union _LARGE_INTEGER StartingLcn;
  /* 0x0018 */ unsigned long ClusterCount;
  /* 0x001c */ long __PADDING__[1];
} MOVE_FILE_DATA32, *PMOVE_FILE_DATA32; /* size: 0x0020 */

typedef struct _SYSTEM_REF_TRACE_INFORMATION
{
  /* 0x0000 */ unsigned char TraceEnable;
  /* 0x0001 */ unsigned char TracePermanent;
  /* 0x0002 */ char Padding_2738[6];
  /* 0x0008 */ struct _UNICODE_STRING TraceProcessName;
  /* 0x0018 */ struct _UNICODE_STRING TracePoolTags;
} SYSTEM_REF_TRACE_INFORMATION, *PSYSTEM_REF_TRACE_INFORMATION; /* size: 0x0028 */

typedef struct __finddata64_t
{
  /* 0x0000 */ unsigned int attrib;
  /* 0x0004 */ long Padding_2739;
  /* 0x0008 */ __int64 time_create;
  /* 0x0010 */ __int64 time_access;
  /* 0x0018 */ __int64 time_write;
  /* 0x0020 */ __int64 size;
  /* 0x0028 */ char name[260];
  /* 0x012c */ long __PADDING__[1];
} _finddata64_t, *P_finddata64_t; /* size: 0x0130 */

typedef struct _RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_BASIC
{
  /* 0x0000 */ unsigned __int64 Size;
  /* 0x0008 */ unsigned long Format;
  /* 0x000c */ long Padding_2740;
  /* 0x0010 */ struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME Frame;
} RTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_BASIC, *PRTL_CALLER_ALLOCATED_ACTIVATION_CONTEXT_STACK_FRAME_BASIC; /* size: 0x0028 */

typedef struct _SERVER_INFO_1595
{
  /* 0x0000 */ unsigned long sv1595_minclientbuffersize;
} SERVER_INFO_1595, *PSERVER_INFO_1595; /* size: 0x0004 */

struct TClassIdHelper<CSessionTraceFlags,0>
{
}; /* size: 0x0001 */

struct NTFS_FILE_RECORD_INPUT_BUFFER
{
  /* 0x0000 */ union _LARGE_INTEGER FileReferenceNumber;
}; /* size: 0x0008 */

struct ITransactionCloner
{
}; /* size: 0x0008 */

class XePerfPkg::collect_cycles_fetchnextcolumnbatch
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2741[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XePerfPkg::collect_all_fetchnextcolumnbatch
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2742[143];
      /* 0x0240 */ unsigned char m_buf[68];
    }; /* size: 0x0048 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int f0Offset;
    /* 0x0000 */ const int f1Offset;
    /* 0x0000 */ const int f2Offset;
    /* 0x0000 */ const int g0Offset;
    /* 0x0000 */ const int g1Offset;
    /* 0x0000 */ const int g2Offset;
    /* 0x0000 */ const int g3Offset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0048 */
}; /* size: 0x0288 */

class XePerfPkg::collect_insts_fetchnextcolumnbatch
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2743[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int cpu_ticksOffset;
    /* 0x0000 */ const int inst_retiredOffset;
    /* 0x0000 */ const int thread_idOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

struct IViewChapter
{
}; /* size: 0x0008 */

typedef struct _SERVER_INFO_1569
{
  /* 0x0000 */ unsigned long sv1569_lockviolationdelay;
} SERVER_INFO_1569, *PSERVER_INFO_1569; /* size: 0x0004 */

typedef struct _SYSDBG_TRIAGE_DUMP
{
  /* 0x0000 */ unsigned long Flags;
  /* 0x0004 */ unsigned long BugCheckCode;
  /* 0x0008 */ unsigned __int64 BugCheckParam1;
  /* 0x0010 */ unsigned __int64 BugCheckParam2;
  /* 0x0018 */ unsigned __int64 BugCheckParam3;
  /* 0x0020 */ unsigned __int64 BugCheckParam4;
  /* 0x0028 */ unsigned long ProcessHandles;
  /* 0x002c */ unsigned long ThreadHandles;
  /* 0x0030 */ void** Handles;
} SYSDBG_TRIAGE_DUMP, *PSYSDBG_TRIAGE_DUMP; /* size: 0x0038 */

typedef struct _SYSTEM_PLATFORM_BINARY_INFORMATION
{
  /* 0x0000 */ void* HandoffBuffer;
  /* 0x0008 */ void* CommandLineBuffer;
  /* 0x0010 */ unsigned long HandoffBufferSize;
  /* 0x0014 */ unsigned long CommandLineBufferSize;
} SYSTEM_PLATFORM_BINARY_INFORMATION, *PSYSTEM_PLATFORM_BINARY_INFORMATION; /* size: 0x0018 */

struct IMDRangeRowset
{
}; /* size: 0x0008 */

struct ITransactionObject
{
}; /* size: 0x0008 */

struct IsElementalHelper<int>
{
}; /* size: 0x0001 */

typedef struct _FILE_STANDARD_LINK_INFORMATION
{
  /* 0x0000 */ unsigned long NumberOfAccessibleLinks;
  /* 0x0004 */ unsigned long TotalNumberOfLinks;
  /* 0x0008 */ unsigned char DeletePending;
  /* 0x0009 */ unsigned char Directory;
  /* 0x000a */ char __PADDING__[2];
} FILE_STANDARD_LINK_INFORMATION, *PFILE_STANDARD_LINK_INFORMATION; /* size: 0x000c */

class XeTCMPkg::tcm_xact_background_end_xact_thread_commit_order_recd
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2744[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int federated_xact_idOffset;
    /* 0x0000 */ const int federated_xact_node_idOffset;
    /* 0x0000 */ const int federated_xact_node_local_idOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeTCMPkg::tcm_mgr_age_forget_end
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeTCMPkg::tcm_agent_commit_order_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2745[143];
      /* 0x0240 */ unsigned char m_buf[16];
    }; /* size: 0x0014 */
    /* 0x0000 */ const int age_replying_toOffset;
    /* 0x0000 */ const int tosnOffset;
  }; /* size: 0x0014 */
}; /* size: 0x0250 */

class XeTCMPkg::tcm_mgr_age_forget_begin
{
  /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
}; /* size: 0x0240 */

class XeTCMPkg::tcm_mgr_age_hardened
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2746[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int age_valueOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeTCMPkg::tcm_mgr_age_broadcast
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2747[143];
      /* 0x0240 */ unsigned char m_buf[8];
    }; /* size: 0x000c */
    /* 0x0000 */ const int age_valueOffset;
  }; /* size: 0x000c */
}; /* size: 0x0248 */

class XeTCMPkg::tcm_xact_root_state_transition
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2748[143];
      /* 0x0240 */ unsigned char m_buf[20];
    }; /* size: 0x0018 */
    /* 0x0000 */ const int federated_xact_idOffset;
    /* 0x0000 */ const int federated_xact_node_idOffset;
    /* 0x0000 */ const int federated_xact_node_local_idOffset;
    /* 0x0000 */ const int stateOffset;
  }; /* size: 0x0018 */
}; /* size: 0x0258 */

class XeTCMPkg::tcm_mgr_commit_order_received
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2749[143];
      /* 0x0240 */ unsigned char m_buf[12];
    }; /* size: 0x0010 */
    /* 0x0000 */ const int brick_idOffset;
    /* 0x0000 */ const int tosnOffset;
  }; /* size: 0x0010 */
}; /* size: 0x0250 */

class XeTCMPkg::tcm_xact_commit_order_to_be_sent
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2750[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int federated_xact_idOffset;
    /* 0x0000 */ const int federated_xact_node_idOffset;
    /* 0x0000 */ const int federated_xact_node_local_idOffset;
    /* 0x0000 */ const int ageOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

class XeTCMPkg::tcm_agent_xact_root_commit
{
  union
  {
    struct
    {
      /* 0x0000 */ const unsigned int sm_internalBitmapOffset;
      /* 0x0004 */ long Padding_2751[143];
      /* 0x0240 */ unsigned char m_buf[24];
    }; /* size: 0x001c */
    /* 0x0000 */ const int federated_xact_idOffset;
    /* 0x0000 */ const int federated_xact_node_idOffset;
    /* 0x0000 */ const int federated_xact_node_local_idOffset;
    /* 0x0000 */ const int end_ageOffset;
  }; /* size: 0x001c */
}; /* size: 0x0258 */

typedef struct _BOOT_OPTIONS
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ unsigned long Length;
  /* 0x0008 */ unsigned long Timeout;
  /* 0x000c */ unsigned long CurrentBootEntryId;
  /* 0x0010 */ unsigned long NextBootEntryId;
  /* 0x0014 */ wchar_t HeadlessRedirection[1];
  /* 0x0016 */ char __PADDING__[2];
} BOOT_OPTIONS, *PBOOT_OPTIONS; /* size: 0x0018 */

struct MOVE_FILE_DATA
{
  /* 0x0000 */ void* FileHandle;
  /* 0x0008 */ union _LARGE_INTEGER StartingVcn;
  /* 0x0010 */ union _LARGE_INTEGER StartingLcn;
  /* 0x0018 */ unsigned long ClusterCount;
  /* 0x001c */ long __PADDING__[1];
}; /* size: 0x0020 */

struct CLUS_CSV_PARTITION_INFO_EX
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ wchar_t szDeviceName[260];
  /* 0x020c */ wchar_t unused_szVolumeLabel[260];
  /* 0x0414 */ unsigned long unused_dwSerialNumber;
  /* 0x0418 */ unsigned long unused_rgdwMaximumComponentLength;
  /* 0x041c */ unsigned long unused_dwFileSystemFlags;
  /* 0x0420 */ wchar_t szFileSystem[32];
  /* 0x0460 */ union _ULARGE_INTEGER PartitionLength;
  /* 0x0468 */ union _ULARGE_INTEGER PartitionStartingOffset;
  /* 0x0470 */ unsigned long DeviceNumber;
  /* 0x0474 */ unsigned long PartitionNumber;
  /* 0x0478 */ struct _GUID unused_VolumeGuid;
}; /* size: 0x0488 */

typedef struct _WKSTA_INFO_1060
{
  /* 0x0000 */ int wki1060_force_core_create_mode;
} WKSTA_INFO_1060, *PWKSTA_INFO_1060; /* size: 0x0004 */

struct SerializeControl<CMemBufFormatter,0>
{
}; /* size: 0x0001 */

typedef struct _COMPRESSED_DATA_INFO
{
  /* 0x0000 */ unsigned short CompressionFormatAndEngine;
  /* 0x0002 */ unsigned char CompressionUnitShift;
  /* 0x0003 */ unsigned char ChunkShift;
  /* 0x0004 */ unsigned char ClusterShift;
  /* 0x0005 */ unsigned char Reserved;
  /* 0x0006 */ unsigned short NumberOfChunks;
  /* 0x0008 */ unsigned long CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, *PCOMPRESSED_DATA_INFO; /* size: 0x000c */

typedef struct _SYSTEM_TIMEOFDAY_INFORMATION
{
  /* 0x0000 */ union _LARGE_INTEGER BootTime;
  /* 0x0008 */ union _LARGE_INTEGER CurrentTime;
  /* 0x0010 */ union _LARGE_INTEGER TimeZoneBias;
  /* 0x0018 */ unsigned long TimeZoneId;
  /* 0x001c */ unsigned long Reserved;
  /* 0x0020 */ unsigned __int64 BootTimeBias;
  /* 0x0028 */ unsigned __int64 SleepTimeBias;
} SYSTEM_TIMEOFDAY_INFORMATION, *PSYSTEM_TIMEOFDAY_INFORMATION; /* size: 0x0030 */

typedef struct _EISA_PORT_CONFIGURATION
{
  /* 0x0000 */ struct _EISA_PORT_DESCRIPTOR Configuration;
  /* 0x0001 */ unsigned short PortAddress;
} EISA_PORT_CONFIGURATION, *PEISA_PORT_CONFIGURATION; /* size: 0x0003 */

typedef struct _CM_EISA_FUNCTION_INFORMATION
{
  /* 0x0000 */ unsigned long CompressedId;
  /* 0x0004 */ unsigned char IdSlotFlags1;
  /* 0x0005 */ unsigned char IdSlotFlags2;
  /* 0x0006 */ unsigned char MinorRevision;
  /* 0x0007 */ unsigned char MajorRevision;
  /* 0x0008 */ unsigned char Selections[26];
  /* 0x0022 */ unsigned char FunctionFlags;
  /* 0x0023 */ unsigned char TypeString[80];
  /* 0x0073 */ struct _EISA_MEMORY_CONFIGURATION EisaMemory[9];
  /* 0x00b2 */ struct _EISA_IRQ_CONFIGURATION EisaIrq[7];
  /* 0x00c0 */ struct _EISA_DMA_CONFIGURATION EisaDma[4];
  /* 0x00c8 */ struct _EISA_PORT_CONFIGURATION EisaPort[20];
  /* 0x0104 */ unsigned char InitializationData[60];
} CM_EISA_FUNCTION_INFORMATION, *PCM_EISA_FUNCTION_INFORMATION; /* size: 0x0140 */

struct UcsTraceFlagMapping
{
  /* 0x0000 */ unsigned long external;
  /* 0x0004 */ unsigned long ucs;
}; /* size: 0x0008 */

typedef struct _PRINT_OTHER_INFO
{
  /* 0x0000 */ unsigned long alrtpr_jobid;
  /* 0x0004 */ unsigned long alrtpr_status;
  /* 0x0008 */ unsigned long alrtpr_submitted;
  /* 0x000c */ unsigned long alrtpr_size;
} PRINT_OTHER_INFO, *PPRINT_OTHER_INFO; /* size: 0x0010 */

class XESQLFailPointBaseEvent<XeSqlPkg::progress_report_online_index_operation>
{
}; /* size: 0x0240 */

typedef struct _SYSTEM_HOTPATCH_MODULE_QUERY_PARAMETERS
{
  /* 0x0000 */ unsigned long QueryFlags;
  /* 0x0004 */ long Padding_2752;
  /* 0x0008 */ void* ProcessHandle;
} SYSTEM_HOTPATCH_MODULE_QUERY_PARAMETERS, *PSYSTEM_HOTPATCH_MODULE_QUERY_PARAMETERS; /* size: 0x0010 */

typedef struct _SL_HWID_DEVICE_INFO
{
  /* 0x0000 */ unsigned long SizeBytes;
  /* 0x0004 */ unsigned char Type;
  /* 0x0005 */ unsigned char DeviceRemovalPolicy;
  /* 0x0006 */ unsigned char AuthenticationStatus;
  /* 0x0007 */ unsigned char Disposition;
  /* 0x0008 */ unsigned long DeviceNodeLevel;
  /* 0x000c */ struct _GUID Guid;
  /* 0x001c */ unsigned char Data[1];
  /* 0x001d */ char __PADDING__[3];
} SL_HWID_DEVICE_INFO, *PSL_HWID_DEVICE_INFO; /* size: 0x0020 */

struct CLUS_FORCE_QUORUM_INFO
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ unsigned long dwNodeBitMask;
  /* 0x0008 */ unsigned long dwMaxNumberofNodes;
  /* 0x000c */ wchar_t multiszNodeList[1];
  /* 0x000e */ char __PADDING__[2];
}; /* size: 0x0010 */

typedef struct _SERVER_INFO_1565
{
  /* 0x0000 */ unsigned long sv1565_maxglobalopensearch;
} SERVER_INFO_1565, *PSERVER_INFO_1565; /* size: 0x0004 */

struct IDBInitialize
{
}; /* size: 0x0008 */

struct IRowPositionChange
{
}; /* size: 0x0008 */

struct ICommandPersist
{
}; /* size: 0x0008 */

struct IsElemental<unsigned long>
{
}; /* size: 0x0001 */

struct If<0,CSerializeContext<CMemBufFormatter>::ElementalSerializer,CSerializeContext<CMemBufFormatter>::ClassSerializer>
{
}; /* size: 0x0001 */

struct XBitmap<StaticStorage<28> >
{
  /* 0x0000 */ struct StaticStorage<28> m_storage;
}; /* size: 0x0004 */

class CAutoMalloc<unsigned char>
{
}; /* size: 0x0008 */

typedef struct _RTL_STACK_CONTEXT
{
  /* 0x0000 */ unsigned long NumberOfEntries;
  /* 0x0004 */ long Padding_2753;
  /* 0x0008 */ struct _RTL_STACK_CONTEXT_ENTRY Entry[1];
} RTL_STACK_CONTEXT, *PRTL_STACK_CONTEXT; /* size: 0x0018 */

typedef struct _SERVER_TRANSPORT_INFO_0
{
  /* 0x0000 */ unsigned long svti0_numberofvcs;
  /* 0x0004 */ long Padding_2754;
  /* 0x0008 */ wchar_t* svti0_transportname;
  /* 0x0010 */ unsigned char* svti0_transportaddress;
  /* 0x0018 */ unsigned long svti0_transportaddresslength;
  /* 0x001c */ long Padding_2755;
  /* 0x0020 */ wchar_t* svti0_networkaddress;
} SERVER_TRANSPORT_INFO_0, *PSERVER_TRANSPORT_INFO_0; /* size: 0x0028 */

struct IIndexDefinition
{
}; /* size: 0x0008 */

class IErrorReportingManager
{
}; /* size: 0x0008 */

class CFormattedParams
{
  union
  {
    /* 0x0000 */ const int x_cwchBufferSize;
    /* 0x0000 */ wchar_t m_rgwchParams[2098];
  }; /* size: 0x1064 */
  /* 0x1064 */ long Padding_2756;
  /* 0x1068 */ wchar_t* m_pwchFirstFree;
  /* 0x1070 */ int m_cParams;
  /* 0x1074 */ long Padding_2757;
  /* 0x1078 */ wchar_t* m_rgpwchParamPtrs[50];
  /* 0x1208 */ int m_fOverFlow;
  /* 0x120c */ int m_fHideParam;
  /* 0x1210 */ char m_rgchArgPos[50];
}; /* size: 0x1248 */

struct POWER_STATE_HANDLER
{
  /* 0x0000 */ enum POWER_STATE_HANDLER_TYPE Type;
  /* 0x0004 */ unsigned char RtcWake;
  /* 0x0005 */ unsigned char Spare[3];
  /* 0x0008 */ void* Handler /* function */;
  /* 0x0010 */ void* Context;
}; /* size: 0x0018 */

typedef struct _REPL_INFO_1001
{
  /* 0x0000 */ unsigned long rp1001_pulse;
} REPL_INFO_1001, *PREPL_INFO_1001; /* size: 0x0004 */

typedef struct _KEY_FLAGS_INFORMATION
{
  /* 0x0000 */ unsigned long Wow64Flags;
  /* 0x0004 */ unsigned long KeyFlags;
  /* 0x0008 */ unsigned long ControlFlags;
} KEY_FLAGS_INFORMATION, *PKEY_FLAGS_INFORMATION; /* size: 0x000c */

struct CLUS_FTSET_INFO
{
  /* 0x0000 */ unsigned long dwRootSignature;
  /* 0x0004 */ unsigned long dwFtType;
}; /* size: 0x0008 */

struct tagDBPARAMINFO
{
  /* 0x0000 */ unsigned long dwFlags;
  /* 0x0004 */ long Padding_2758;
  /* 0x0008 */ unsigned __int64 iOrdinal;
  /* 0x0010 */ wchar_t* pwszName;
  /* 0x0018 */ struct ITypeInfo* pTypeInfo;
  /* 0x0020 */ unsigned __int64 ulParamSize;
  /* 0x0028 */ unsigned short wType;
  /* 0x002a */ unsigned char bPrecision;
  /* 0x002b */ unsigned char bScale;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

class SQLMemoryReport
{
  union
  {
    /* 0x0000 */ const unsigned long REPORT_MEM_GRANULARITY;
    /* 0x0000 */ struct XBitmap<StaticStorage<64> > sm_onlineNodes;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

typedef struct _CM_VIDEO_DEVICE_DATA
{
  /* 0x0000 */ unsigned short Version;
  /* 0x0002 */ unsigned short Revision;
  /* 0x0004 */ unsigned long VideoClock;
} CM_VIDEO_DEVICE_DATA, *PCM_VIDEO_DEVICE_DATA; /* size: 0x0008 */

typedef struct _OBJECT_HANDLE_FLAG_INFORMATION
{
  /* 0x0000 */ unsigned char Inherit;
  /* 0x0001 */ unsigned char ProtectFromClose;
} OBJECT_HANDLE_FLAG_INFORMATION, *POBJECT_HANDLE_FLAG_INFORMATION; /* size: 0x0002 */

typedef struct _LDR_DATA_TABLE_ENTRY64
{
  /* 0x0000 */ struct LIST_ENTRY64 InLoadOrderLinks;
  /* 0x0010 */ struct LIST_ENTRY64 InMemoryOrderLinks;
  /* 0x0020 */ struct LIST_ENTRY64 InInitializationOrderLinks;
  /* 0x0030 */ unsigned __int64 DllBase;
  /* 0x0038 */ unsigned __int64 EntryPoint;
  /* 0x0040 */ unsigned long SizeOfImage;
  /* 0x0044 */ long Padding_2759;
  /* 0x0048 */ struct _STRING64 FullDllName;
  /* 0x0058 */ struct _STRING64 BaseDllName;
  /* 0x0068 */ unsigned long Flags;
  /* 0x006c */ unsigned short LoadCount;
  /* 0x006e */ unsigned short TlsIndex;
  union
  {
    /* 0x0070 */ struct LIST_ENTRY64 HashLinks;
    struct
    {
      /* 0x0070 */ unsigned __int64 SectionPointer;
      /* 0x0078 */ unsigned long CheckSum;
    }; /* size: 0x000c */
  }; /* size: 0x0010 */
  union
  {
    /* 0x0080 */ unsigned long TimeDateStamp;
    /* 0x0080 */ unsigned __int64 LoadedImports;
  }; /* size: 0x0008 */
} LDR_DATA_TABLE_ENTRY64, *PLDR_DATA_TABLE_ENTRY64; /* size: 0x0088 */

struct IErrorLookup
{
}; /* size: 0x0008 */

struct ITableDefinitionWithConstraints
{
}; /* size: 0x0008 */

struct IDBAsynchNotify
{
}; /* size: 0x0008 */

struct RETRIEVAL_POINTERS_BUFFER
{
  /* 0x0000 */ unsigned long ExtentCount;
  /* 0x0004 */ long Padding_2760;
  /* 0x0008 */ union _LARGE_INTEGER StartingVcn;
  /* 0x0010 */ struct
  {
    /* 0x0010 */ union _LARGE_INTEGER NextVcn;
    /* 0x0018 */ union _LARGE_INTEGER Lcn;
  } /* size: 0x0010 */ Extents[1];
}; /* size: 0x0020 */

struct CLUS_STARTING_PARAMS
{
  /* 0x0000 */ unsigned long dwSize;
  /* 0x0004 */ int bForm;
  /* 0x0008 */ int bFirst;
}; /* size: 0x000c */

struct IDBProperties
{
}; /* size: 0x0008 */

struct XE_TObjects<XEMap,5>
{
  /* 0x0000 */ struct XEObjectCollection m_collection;
  /* 0x0010 */ struct XE_TArray<XEMap *,5> m_objectPtrs;
}; /* size: 0x0038 */

struct CSessionTraceFlags::SerializableVersionInternal<CSessionTraceFlags>
{
}; /* size: 0x0001 */

class TClassInfo<CSessionTraceFlags>
{
  /* 0x0000 */ const class TClassInfo<CSessionTraceFlags> xsm_classInfo;
}; /* size: 0x0080 */

struct TClassInfo<CSessionTraceFlags>::NoopSetter
{
}; /* size: 0x0001 */

struct TClassFactory<CSessionTraceFlags,0>
{
}; /* size: 0x0001 */

class DS_CONFIG;

class IServerConfiguration
{
  /* 0x0000 */ long Padding_2761[2];
  /* 0x0008 */ class DS_CONFIG* m_rconfig;
  /* 0x0010 */ unsigned long m_dwEngineSKU;
  /* 0x0014 */ unsigned long m_dwGlobalSKU;
  /* 0x0018 */ BOOL m_fIsSUMEnabled;
  /* 0x0019 */ BOOL m_fIsHekatonEnabled;
}; /* size: 0x0020 */

struct _INST_ID;

class ICallerParse;

class COptExpr;

class CAutoClearXVariant;

class CXVariant;

class CTypeInfo;

class DBTABLE;

class BaseXact;

struct DBTableFactory
{
  /* 0x0000 */ void* m_getMetadataVersionFn /* function */;
  /* 0x0008 */ void* m_createDatabaseMetadataFn /* function */;
  /* 0x0010 */ void* m_getDatabaseNameFn /* function */;
  /* 0x0018 */ void* m_dbtblfindFn /* function */;
  /* 0x0020 */ void* m_usedbFn /* function */;
  /* 0x0028 */ void* m_closedbFn /* function */;
}; /* size: 0x0030 */

struct GlobalDbId::SerializableVersionInternal<GlobalDbId>;

class GlobalDbId
{
  /* 0x0000 */ unsigned long m_dbid;
}; /* size: 0x0004 */

struct GlobalDbId::ClassName
{
}; /* size: 0x0001 */

class IMetadataAccess;

struct MetadataFactory
{
  /* 0x0000 */ void* m_IMedAccessGet /* function */;
  /* 0x0008 */ void* m_IMedAccessGetSize /* function */;
  /* 0x0010 */ void* m_IMedAccessGetInto /* function */;
}; /* size: 0x0018 */

class CImageHelper;

class DefaultAutoXactFactory
{
}; /* size: 0x0008 */

class XDES;

class RecoveryUnit;

class SimpleXact;

class IFederatedXact;

class IAutoReadOnlyXact
{
}; /* size: 0x0008 */

class CAutoP<IAutoReadOnlyXact>
{
}; /* size: 0x0008 */

class AutoReadOnlyXact
{
  /* 0x0000 */ class CAutoP<IAutoReadOnlyXact> m_pimpl;
}; /* size: 0x0008 */

class FederatedXactId;

class CAutoBase<IAutoSimpleXact>
{
  /* 0x0000 */ class IAutoSimpleXact* m_pt;
}; /* size: 0x0008 */

class DefaultAutoReadOnlyXact
{
  /* 0x0000 */ long Padding_2762[2];
  /* 0x0008 */ BOOL m_fIsActive;
}; /* size: 0x0010 */

class DefaultAutoSimpleXact
{
  /* 0x0000 */ long Padding_2763[2];
  /* 0x0008 */ BOOL m_fIsActive;
}; /* size: 0x0010 */

class CSession;

class CBatch;

class ITaskProxy
{
  /* 0x0000 */ long Padding_2764[2];
  /* 0x0008 */ unsigned int m_state;
  /* 0x000c */ long Padding_2765;
  /* 0x0010 */ class GDMDeadlockParticipant* m_CurrentDeadlockParticipant;
  /* 0x0018 */ class SEListElem m_link;
}; /* size: 0x0028 */

class GDMDeadlockParticipant;

class CDiagThreadSafe;

class CAutoRestoreTaskProxy
{
  /* 0x0000 */ class ITaskProxy* m_pTaskProxy;
}; /* size: 0x0008 */

class XactWorkspace;

class IAutoSetupExecContextsForInternalTasksImpl
{
}; /* size: 0x0008 */

class IAutoSetXLvlIntCtxt
{
}; /* size: 0x0008 */

class CAutoInstallTaskProxy
{
  /* 0x0000 */ int m_fUninstallAtEnd;
}; /* size: 0x0004 */

class CAutoP<IAutoSetupExecContextsForInternalTasksImpl>
{
}; /* size: 0x0008 */

class CAutoSetupExecContextsForInternalTasks
{
  /* 0x0000 */ class CAutoP<IAutoSetupExecContextsForInternalTasksImpl> m_apimpl;
  /* 0x0008 */ enum thread_type m_taskType;
  /* 0x000c */ short m_ssystemTaskToken;
  /* 0x000e */ char Padding_2766[2];
  /* 0x0010 */ const wchar_t* m_pcwstrSysTaskName;
}; /* size: 0x0018 */

class CAutoBase<IAutoSetupExecContextsForInternalTasksImpl>
{
  /* 0x0000 */ class IAutoSetupExecContextsForInternalTasksImpl* m_pt;
}; /* size: 0x0008 */

class CAutoBase<IAutoSetXLvlIntCtxt>
{
  /* 0x0000 */ class IAutoSetXLvlIntCtxt* m_pt;
}; /* size: 0x0008 */

class SOS_CacheUserExtensionBase
{
}; /* size: 0x0008 */

struct SOS_CacheUserExtensionBase::ClassName
{
}; /* size: 0x0001 */

struct SOS_CacheUserExtensionBase::SerializableVersionInternal<SOS_CacheUserExtensionBase>
{
}; /* size: 0x0001 */

class TClassInfo<SOS_CacheUserExtensionBase>
{
  /* 0x0000 */ const class TClassInfo<SOS_CacheUserExtensionBase> xsm_classInfo;
}; /* size: 0x0080 */

struct TClassInfo<SOS_CacheUserExtensionBase>::NoopSetter
{
}; /* size: 0x0001 */

struct TClassFactory<SOS_CacheUserExtensionBase,1>
{
}; /* size: 0x0001 */

class SqlDkHost_IStartupShutdown
{
}; /* size: 0x0008 */

class CFeatureSwitchesBitArray<82>
{
  union
  {
    /* 0x0000 */ const unsigned short m_usBitsPerByte;
    /* 0x0000 */ unsigned char m_rgBits[11];
  }; /* size: 0x000b */
}; /* size: 0x000b */

struct FeatureSwitchesMessage
{
  union
  {
    /* 0x0000 */ const int x_iUnknownSwitchesMessageId;
    /* 0x0000 */ const int x_iMissingSwitchesMessageId;
    /* 0x0000 */ const int x_iUpdatedSuccessfullyMessageId;
    /* 0x0000 */ const int x_iUpdatedConfigurationMessageId;
    /* 0x0000 */ const int x_iExceptionOccurredMessageId;
    /* 0x0000 */ const int x_iUpdateSkippedSuccessfullyMessageId;
    /* 0x0000 */ const int x_iUpdatedWithWarningsMessageId;
    /* 0x0000 */ const int x_iUpdateSkippedWithWarningsMessageId;
    /* 0x0000 */ const unsigned long x_ulFeatureMessagesCount;
    /* 0x0000 */ int m_iMessageId;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_2767;
  /* 0x0008 */ const wchar_t* m_wszMessageText;
}; /* size: 0x0010 */

class CFeatureSwitches::CFeatureSwitchesNotifications
{
  union
  {
    /* 0x0000 */ void* s_rgpfnCallback[82] /* function */;
    /* 0x0000 */ void* s_pfnGlobalCallback /* function */;
  }; /* size: 0x0290 */
}; /* size: 0x0001 */

struct CFeatureSwitches::FeatureDetails
{
  /* 0x0000 */ const wchar_t* m_wszFeatureName;
  /* 0x0008 */ enum EFeatureSwitches m_FeatureEnum;
  /* 0x000c */ BOOL m_fBoxOnly;
  /* 0x000d */ BOOL m_fAzureProdReady;
  /* 0x000e */ BOOL m_fAllowedInGoldenBits;
  /* 0x000f */ char __PADDING__[1];
}; /* size: 0x0010 */

class CFeatureSwitches
{
  union
  {
    /* 0x0000 */ const unsigned long x_ulFeaturesCount;
    /* 0x0000 */ const struct CFeatureSwitches::FeatureDetails s_rgFeaturesMapping[82];
    /* 0x0000 */ wchar_t* s_rgwchFeatureMessageText /* zero-length array */;
    /* 0x0000 */ class CFeatureSwitchesBitArray<82> m_FeaturesBitArray;
    /* 0x0000 */ class CFeatureSwitches::CFeatureSwitchesNotifications s_Notifications;
    /* 0x0000 */ const class CFeatureSwitches* s_pSingleton;
    /* 0x0000 */ const unsigned __int64 s_cwchMaxFeatureMessageTextLength;
  }; /* size: 0x0520 */
}; /* size: 0x000b */

struct CFeatureSwitches::FeatureInfo
{
  /* 0x0000 */ const wchar_t* m_wszFeatureName;
  /* 0x0008 */ BOOL m_fEnabled;
  /* 0x0009 */ char Padding_2768[7];
  /* 0x0010 */ struct CFeatureSwitches::FeatureInfo* m_pNext;
}; /* size: 0x0018 */

class CFeatureSwitches_Iterator
{
  union
  {
    struct
    {
      /* 0x0000 */ const class CFeatureSwitches* m_pFeatureSwitches;
      /* 0x0008 */ int m_iFeatureDetails;
    }; /* size: 0x000c */
    /* 0x0000 */ const struct CFeatureSwitches::FeatureDetails s_EmptyFeatureDetails;
  }; /* size: 0x0010 */
}; /* size: 0x0010 */

struct SpecialFormatSpecs
{
  /* 0x0000 */ wchar_t* pwchName;
  /* 0x0008 */ int cwchLen;
  /* 0x000c */ enum EFormatType ft;
}; /* size: 0x0010 */

class CRawLogDumper
{
}; /* size: 0x0001 */

class tracestreambuf
{
  /* 0x0000 */ long Padding_2769[28];
  /* 0x0070 */ char m_Buffer[2048];
}; /* size: 0x0870 */

class TypeListSize<TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class CAutoRefc<XE_PackageEntry>
{
  /* 0x0000 */ class XE_PackageEntry* m_pt;
}; /* size: 0x0008 */

class XE_ActualTargetEntry
{
  /* 0x0000 */ long Padding_2770[22];
  /* 0x0058 */ void* m_hTarget;
  /* 0x0060 */ class CAutoRefc<XE_PackageEntry> m_package;
  /* 0x0068 */ const struct XETarget* m_target;
  /* 0x0070 */ class CAutoRg<XECustomizableAttribute> m_attrs;
  /* 0x0078 */ unsigned int m_stMask;
  /* 0x007c */ long Padding_2771;
  /* 0x0080 */ struct XETargetStatus m_status;
}; /* size: 0x0090 */

class CAutoRefc<XE_ModuleEntry>
{
  /* 0x0000 */ class XE_ModuleEntry* m_pt;
}; /* size: 0x0008 */

class XE_ObjectLocalStorage
{
  union
  {
    /* 0x0000 */ void* const INVALID_SLOT;
    /* 0x0000 */ class SOSHost_MemObj* m_pmo;
  }; /* size: 0x0008 */
  /* 0x0008 */ class SOSHost_RecursiveMutex m_lock;
  /* 0x00f0 */ void** m_slots;
  /* 0x00f8 */ unsigned int m_capacity;
}; /* size: 0x0100 */

class XE_PackageEntry
{
  union
  {
    /* 0x0000 */ enum XEHandleType HandleType;
    /* 0x0000 */ unsigned short m_PackageId;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_2772;
  /* 0x0008 */ void* m_PackageHandle;
  /* 0x0010 */ const struct XEPackageAPI* m_PackageInterface;
  /* 0x0018 */ const struct XETargetAPI* m_TargetInterface;
  /* 0x0020 */ const struct XEPackageMetadata* m_Metadata;
  /* 0x0028 */ unsigned int m_refCount;
  /* 0x002c */ long Padding_2773;
  /* 0x0030 */ class CAutoRefc<XE_ModuleEntry> m_pModuleEntry;
  /* 0x0038 */ struct _GUID m_packageGUID;
  /* 0x0048 */ class XE_ObjectLocalStorage m_ls;
}; /* size: 0x0148 */

class XE_ModuleEntry
{
  /* 0x0000 */ long Padding_2774;
  /* 0x0004 */ struct _GUID m_Guid;
  /* 0x0014 */ long Padding_2775;
  /* 0x0018 */ struct HINSTANCE__* m_ModuleHandle;
}; /* size: 0x0020 */

struct XE_ActualTargetEntry::FailureCallbackContext
{
  /* 0x0000 */ const struct XETarget* const m_target;
  /* 0x0008 */ struct XEErrorContext* m_pError;
}; /* size: 0x0010 */

class XE_PredicateValue
{
  /* 0x0000 */ struct XEPredicateValue m_Value;
  /* 0x0010 */ class CAutoRg<unsigned char> m_storage;
}; /* size: 0x0018 */

class SEListEnum<XListEnumerator<XE_TargetEntry>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<XE_TargetEntry>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<XE_TargetEntry>* m_pNext;
}; /* size: 0x0010 */

class SEList<XListEnumerator<XE_TargetEntry>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XListEnumerator<XE_TargetEntry>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class XE_TargetEntry* m_currentObject;
  /* 0x0018 */ class XE_TargetEntry* m_baseObject;
  /* 0x0020 */ class XList<XE_TargetEntry>* m_pList;
}; /* size: 0x0028 */

class CAutoRefc<XList<XE_TargetEntry> >
{
  /* 0x0000 */ class XList<XE_TargetEntry>* m_pt;
}; /* size: 0x0008 */

class CAutoRg<CAutoRefc<XList<XE_TargetEntry> > >
{
}; /* size: 0x0008 */

class CAutoRefc<XList<XE_EventEntry> >
{
  /* 0x0000 */ class XList<XE_EventEntry>* m_pt;
}; /* size: 0x0008 */

class CAutoRefc<XE_PackagesHolder>
{
  /* 0x0000 */ class XE_PackagesHolder* m_pt;
}; /* size: 0x0008 */

class SEList<XE_EventEntry,32>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_SessionTimerEntry
{
  /* 0x0000 */ long Padding_2776[8];
  /* 0x0020 */ class XE_Session* m_pSession;
  /* 0x0028 */ class XE_Timer* m_pTimer;
}; /* size: 0x0030 */

class SEList<XE_AssocMemory::Entry,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_AssocMemory
{
  /* 0x0000 */ class SEList<XE_AssocMemory::Entry,0> m_entries;
}; /* size: 0x0010 */

class XE_Session
{
  /* 0x0000 */ enum XEHandleType HandleType;
  /* 0x0004 */ long Padding_2777[9];
  /* 0x0028 */ class XE_BufferMgr* m_pBufMgr;
  /* 0x0030 */ class XE_BufferMgr* m_pLbaBufMgr;
  /* 0x0038 */ class SOSHost_MemObj* m_pmo;
  /* 0x0040 */ struct XESessionProperties m_properties;
  /* 0x0290 */ class CAutoRefc<XList<XE_TargetEntry> > m_targets;
  /* 0x0298 */ class CAutoRefc<XList<XE_TargetEntry> > m_deadTargets;
  /* 0x02a0 */ class CAutoRg<CAutoRefc<XList<XE_TargetEntry> > > m_enumTargets;
  /* 0x02a8 */ class CAutoRefc<XList<XE_EventEntry> > m_events;
  /* 0x02b0 */ class CAutoRefc<XE_PackagesHolder> m_boundEventPackages;
  /* 0x02b8 */ struct XESessionStats m_stats;
  /* 0x0318 */ unsigned int m_synchronousTargetCount;
  /* 0x031c */ unsigned int m_asynchronousTargetCount;
  /* 0x0320 */ class SOSHost_RecursiveMutex m_flushLock;
  /* 0x0408 */ class SOSHost_RecursiveMutex m_lock;
  /* 0x04f0 */ class SEList<XE_TargetEntry,40> m_targetsToAdd;
  /* 0x0500 */ class SEList<XE_TargetEntry,40> m_targetsToRemove;
  /* 0x0510 */ class SEList<XE_EventEntry,32> m_eventsToEnable;
  /* 0x0520 */ class SEList<XE_EventEntry,32> m_eventsToDisable;
  /* 0x0530 */ int m_openForEdit;
  /* 0x0534 */ unsigned int m_stMask;
  /* 0x0538 */ class XE_SessionTimerEntry m_timerEntry;
  /* 0x0568 */ class XE_AssocMemory m_storage;
}; /* size: 0x0578 */

struct XE_AlignedArray<XE_Buffer *>::Element
{
  /* 0x0000 */ class XE_Buffer* m_t;
  /* 0x0008 */ long __PADDING__[14];
}; /* size: 0x0040 */

union XE_Buffer::BufferControl
{
  union
  {
    struct
    {
      /* 0x0000 */ unsigned int m_index;
      /* 0x0004 */ unsigned short m_pendingReservationCount;
      /* 0x0006 */ unsigned short m_state;
    }; /* size: 0x0008 */
    /* 0x0000 */ unsigned __int64 m_all;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

struct XE_Buffer::SpinStatistics
{
  /* 0x0000 */ unsigned __int64 m_stateSpins;
  /* 0x0008 */ unsigned __int64 m_reserveSpins;
  /* 0x0010 */ unsigned __int64 m_submitSpins;
}; /* size: 0x0018 */

class XE_Buffer
{
  /* 0x0000 */ long Padding_2778[2];
  /* 0x0008 */ class SEListElem m_link;
  /* 0x0018 */ class XE_Buffer* m_link2;
  /* 0x0000 */ const unsigned int BUFFER_END_DATA_SIZE;
  /* 0x0004 */ long Padding_2779[7];
  /* 0x0020 */ union XE_Buffer::BufferControl m_control;
  /* 0x0028 */ struct XE_Buffer::SpinStatistics m_stats;
  /* 0x0040 */ unsigned int m_payloadLength;
  /* 0x0044 */ long Padding_2780;
  /* 0x0048 */ unsigned char* m_pData;
  /* 0x0050 */ struct XEBufferHeader* m_pBufferHeader;
  /* 0x0058 */ unsigned char* m_pGuardByte;
  /* 0x0060 */ unsigned short m_nodeId;
  /* 0x0062 */ char Padding_2781[6];
  /* 0x0068 */ class XE_BufferMgr* m_pBufferMgr;
}; /* size: 0x0070 */

class SEList<XListElem<XE_TargetEntry>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<XE_TargetEntry>
{
  /* 0x0000 */ long Padding_2782[2];
  /* 0x0008 */ class SEList<XListElem<XE_TargetEntry>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<XE_TargetEntry>,0> m_enumerators;
  /* 0x0028 */ struct XE_SessionTargetMgrSLock m_lock;
}; /* size: 0x0030 */

class XE_PackagesHolder
{
  /* 0x0000 */ enum XEHandleType HandleType;
  /* 0x0004 */ struct XBitmap<StaticStorage<1024> > m_referencedPackages;
}; /* size: 0x0088 */

class SEList<XE_ITimerEntry,16>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class CAutoRefc<SOSHost_Task>
{
  /* 0x0000 */ class SOSHost_Task* m_pt;
}; /* size: 0x0008 */

class XE_Timer
{
  /* 0x0000 */ class SEList<XE_ITimerEntry,16> m_entries;
  /* 0x0010 */ class SOSHost_RecursiveMutex m_lock;
  /* 0x00f8 */ class SOSHost_EventAuto m_waitEvent;
  /* 0x01d0 */ class CAutoRefc<SOSHost_Task> m_pTask;
  /* 0x01d8 */ volatile int m_closing;
}; /* size: 0x01e0 */

class TypeListSize<TypeListNode<void const * const,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XE_BufferSrv
{
}; /* size: 0x0070 */

class XE_EngineStreamReader
{
  /* 0x0000 */ unsigned short m_packageId;
  /* 0x0002 */ char Padding_2783[6];
  /* 0x0008 */ void* m_hStream;
}; /* size: 0x0010 */

class XE_AndExpr
{
  /* 0x0000 */ long Padding_2784[4];
  /* 0x0010 */ class CAutoRefc<XE_PredicateExpr> m_left;
  /* 0x0018 */ class CAutoRefc<XE_PredicateExpr> m_right;
}; /* size: 0x0020 */

class XE_PredicateExpr
{
  /* 0x0000 */ enum XEHandleType HandleType;
}; /* size: 0x0010 */

class XE_SerializedEvent<XE_Metadata,XE_VersionConfig>
{
  /* 0x0000 */ long Padding_2785[2];
  /* 0x0008 */ const class XE_Metadata* m_metadata;
  /* 0x0010 */ const struct XEEventBufferHeader* m_pSerializedEvent;
  /* 0x0018 */ const struct XEEvent* m_event;
  /* 0x0020 */ unsigned short m_index;
  /* 0x0022 */ char Padding_2786[6];
  /* 0x0028 */ const unsigned char* m_pBuf;
}; /* size: 0x0030 */

class XE_ParserFactory<XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >
{
  /* 0x0000 */ class XE_SerializedEvent<XE_Metadata,XE_VersionConfig> m_parser;
}; /* size: 0x0030 */

class XE_Xml<XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >
{
  union
  {
    /* 0x0000 */ const unsigned int STACK_STREAM_BUFFER;
    /* 0x0000 */ const unsigned int MIN_CDATA_INVALID_STRING;
    /* 0x0000 */ const class XE_Metadata* m_metadata;
  }; /* size: 0x0008 */
  /* 0x0008 */ enum XE_XmlOptions m_opts;
  /* 0x000c */ long Padding_2787;
  /* 0x0010 */ const class XE_StandardFormatter m_formatter;
  /* 0x01d0 */ class XE_ParserFactory<XE_SerializedEvent<XE_Metadata,XE_VersionConfig> > m_parserFactory;
  /* 0x0200 */ void* m_pfnSymbolizeCallstack /* function */;
  /* 0x0208 */ struct _TIME_ZONE_INFORMATION* m_timeZoneInfo;
  /* 0x0210 */ class XE_AutoP<SEHashTable<XE_XMLObjectString,XE_XMLObjectString,0,0,XE_BaseAllocator> > m_objectCache;
}; /* size: 0x0218 */

class XE_AutoDisallowEventFire
{
  /* 0x0000 */ struct XE_Tls::Record* m_pRecord;
}; /* size: 0x0008 */

struct XE_Tls::Record
{
  /* 0x0000 */ struct XEActivityId m_currentActivityID;
  struct /* bitfield */
  {
    /* 0x0014 */ unsigned int m_hasDeferredParent : 1; /* bit position: 0 */
    /* 0x0014 */ unsigned int m_fireDisabled : 31; /* bit position: 1 */
  }; /* bitfield */
  /* 0x0018 */ unsigned __int64 m_newestEventTime;
  /* 0x0020 */ struct XESessionContextRecord m_sessionCtxtRecord;
  /* 0x0038 */ struct XE_Tls::ColdRecord* m_coldRecord;
}; /* size: 0x0040 */

struct XE_Tls::ColdRecord
{
  /* 0x0000 */ struct XEError m_error;
  /* 0x0018 */ struct XELogMessage m_errContext;
  /* 0x0098 */ struct XEActivityId m_parentActivityID;
  /* 0x00ac */ long Padding_2788;
  /* 0x00b0 */ class XE_TlsRecordBlock* m_pBlock;
}; /* size: 0x00b8 */

class XE_TlsRecordBlock
{
  union
  {
    /* 0x0000 */ const unsigned int RECORDS_PER_BLOCK;
    /* 0x0000 */ struct XBitmap<StaticStorage<1024> > m_allocatedRecords;
  }; /* size: 0x0080 */
  /* 0x0080 */ struct XE_Tls::ColdRecord m_coldRecords[1024];
  /* 0x2e080 */ struct XE_Tls::Record m_records[1024];
}; /* size: 0x3e080 */

class CAutoRefc<XE_TargetEntry>
{
  /* 0x0000 */ class XE_TargetEntry* m_pt;
}; /* size: 0x0008 */

class XE_ProxyTargetEntry
{
  /* 0x0000 */ long Padding_2789[22];
  /* 0x0058 */ class CAutoRefc<XE_TargetEntry> m_proxy;
}; /* size: 0x0060 */

class XE_EngineLocator
{
}; /* size: 0x0001 */

class XE_EngineLocator::AutoEngineModuleLock
{
  /* 0x0000 */ class TSinglyLinkedList<XE_EngineLocator::EngineModule>* m_pList;
}; /* size: 0x0008 */

class XE_ITimerEntry
{
  /* 0x0000 */ long Padding_2790[2];
  /* 0x0008 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_LastTimeExecuted;
  /* 0x0010 */ class SEListElem m_link;
}; /* size: 0x0020 */

class XE_FlushRequest
{
  /* 0x0000 */ class CAutoRg<unsigned int> m_bits;
  /* 0x0008 */ struct XBitmap<ExternalStorage> m_bitmap;
  /* 0x0018 */ unsigned int m_nBuffersToWaitFor;
  /* 0x001c */ long Padding_2791;
  /* 0x0020 */ class SOSHost_EventManual m_signal;
  /* 0x00f8 */ int m_flushing;
}; /* size: 0x0100 */

class SESListEnum<XE_Buffer,24>;

class IfNullTypeZeroElseOne<void const * const>
{
}; /* size: 0x0001 */

class TypeListNode<void const * const,TypeListNode<NullType,NullType> >
{
}; /* size: 0x0001 */

class XE_DispatcherQueue
{
  /* 0x0000 */ struct XE_DispQueueSLock m_lock;
  /* 0x0004 */ long Padding_2792;
  /* 0x0008 */ class SEListSized<XE_Buffer,8> m_buffers;
  /* 0x0020 */ class CAutoHandleInternal<0,&CloseHandle> m_hCloseEvent;
  /* 0x0028 */ class CAutoHandleInternal<0,&CloseHandle> m_hSemaphore;
  /* 0x0030 */ class CAutoHandleInternal<0,&CloseHandle> m_hAbortEvent;
  /* 0x0038 */ class SystemAffinity m_abortMask;
}; /* size: 0x00b8 */

class SEList<XE_SessionSrv,1400>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_DispatcherPoolConfig
{
  union
  {
    /* 0x0000 */ const int IsCpuBound;
    /* 0x0000 */ const unsigned int CACHE_INVALIDATION_TIME_MS;
    /* 0x0000 */ const unsigned int THREAD_TERMINATION_TIMEOUT_MS;
    /* 0x0000 */ const unsigned int THREAD_RECONFIGURE_CAP;
    /* 0x0000 */ class SEList<XE_SessionSrv,1400> m_sessions;
  }; /* size: 0x0010 */
  /* 0x0010 */ class SOS_Mutex m_sessionListLock;
  /* 0x0040 */ unsigned int m_lastCalculationResult;
  /* 0x0044 */ long Padding_2793;
  /* 0x0048 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_lastCalculationTimeMs;
  /* 0x0050 */ int m_isDedicatedDispatcher;
}; /* size: 0x0058 */

class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>
{
  /* 0x0000 */ long Padding_2794[12];
  /* 0x0030 */ enum DispatcherConfigPoint m_DispatcherConfigPoint;
  /* 0x0034 */ enum DISPATCHERPOOL_TYPE m_Id;
  /* 0x0038 */ void* m_DispatcherEntryPoint /* function */;
  /* 0x0040 */ class XE_DispatcherQueue m_queue;
  /* 0x0000 */ const unsigned int MAX_RECONFIGURE_CAP;
  /* 0x0004 */ long Padding_2795[61];
  /* 0x00f8 */ class XE_DispatcherPoolConfig m_DispatcherConfig;
  /* 0x0150 */ class CAutoRefc<XList<SOS_DispatcherBase> > m_pDispatchers;
  /* 0x0158 */ class SystemAffinity m_currentAffinity;
  /* 0x01d8 */ unsigned int m_currentDispatchers;
  /* 0x01dc */ unsigned int m_fadingDispatchers;
  /* 0x01e0 */ class SOS_Mutex m_lock;
  /* 0x0210 */ int m_isReconfiguring;
  /* 0x0214 */ int m_closed;
  /* 0x0218 */ wchar_t m_name[255];
  /* 0x0416 */ char Padding_2796[2];
  /* 0x0418 */ class SOS_ResourceGroup* m_ResourceGroup;
}; /* size: 0x0420 */

class Dispatcher<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>
{
  /* 0x0000 */ long Padding_2797[122];
  /* 0x01e8 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> m_WaitStartTime;
  /* 0x01f0 */ unsigned int m_FadeEndTime;
  /* 0x01f4 */ long Padding_2798;
  /* 0x01f8 */ class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>* m_pPool;
  /* 0x0200 */ struct SOS_DispatcherSLock m_lock;
  /* 0x0204 */ int m_isInternalAbort;
}; /* size: 0x0208 */

class RefCountImpl<XE_ModuleEntry>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>
{
}; /* size: 0x0020 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem
{
  /* 0x0000 */ long Padding_2799[8];
  /* 0x0020 */ class XE_CallbackEvent* volatile m_pNoUsersEvent;
}; /* size: 0x0028 */

class XE_CallbackEvent
{
  /* 0x0000 */ class SOSHost_EventManual m_event;
}; /* size: 0x00d8 */

struct XE_BufferMgrStats
{
  /* 0x0000 */ unsigned int m_pending;
  /* 0x0004 */ unsigned int m_waitingAndProcessing;
  /* 0x0008 */ unsigned int m_total;
  /* 0x000c */ long Padding_2800;
  /* 0x0010 */ unsigned __int64 m_singleBufferSize;
  /* 0x0018 */ unsigned __int64 m_totalBufferSize;
  /* 0x0020 */ unsigned __int64 m_singleBufferAllocSize;
  /* 0x0028 */ unsigned __int64 m_totalBufferAllocSize;
}; /* size: 0x0030 */

struct XE_DispatcherPoolConfig::LoadResult
{
  /* 0x0000 */ unsigned int m_dispatchers;
  /* 0x0004 */ int m_capped;
  /* 0x0008 */ unsigned int m_load;
  /* 0x000c */ unsigned int m_ideal;
}; /* size: 0x0010 */

class AutoSpinlockHolder<202,3,1>
{
}; /* size: 0x0010 */

class CAutoRefc<SOS_RingBuffer>
{
  /* 0x0000 */ class SOS_RingBuffer* m_pt;
}; /* size: 0x0008 */

class SEList<XE_Buffer,8>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XE_Tls
{
  union
  {
    /* 0x0000 */ const unsigned int BLOCKS_COUNT;
    /* 0x0000 */ class XE_TlsRecordBlock* sm_pBlocks[256];
    /* 0x0000 */ void* sm_XlsGetValue /* function */;
    /* 0x0000 */ void* sm_XlsSetValue /* function */;
    /* 0x0000 */ unsigned int sm_tlsSlot;
    /* 0x0000 */ class SOSHost_OSThreadCreateDestroyCallback* sm_cbo;
    /* 0x0000 */ int sm_useFibers;
  }; /* size: 0x0800 */
}; /* size: 0x0001 */

struct XE_AssocMemory::Entry
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ struct XEStorageId m_id;
  /* 0x0018 */ struct XEObjectStorageDescriptor m_descriptor;
  /* 0x0028 */ class CAutoRg<unsigned char> m_buffer;
}; /* size: 0x0030 */

class XE_OrExpr
{
  /* 0x0000 */ long Padding_2801[4];
  /* 0x0010 */ class CAutoRefc<XE_PredicateExpr> m_left;
  /* 0x0018 */ class CAutoRefc<XE_PredicateExpr> m_right;
}; /* size: 0x0020 */

class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >;

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >;

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_2802;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent> >* m_pList;
}; /* size: 0x0020 */

class IfNullTypeZeroElseOne<enum XEEngineNotification>
{
}; /* size: 0x0001 */

class XListElem<XE_TargetEntry>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_2803;
  /* 0x0018 */ class XList<XE_TargetEntry>* m_pList;
}; /* size: 0x0020 */

class SEListEnum<XListElem<XE_TargetEntry>,0>;

class CAutoBase<XE_PackageEntry>
{
  /* 0x0000 */ class XE_PackageEntry* m_pt;
}; /* size: 0x0008 */

class XE_NotificationManager
{
  /* 0x0000 */ long Padding_2804[4];
  /* 0x0010 */ class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType> >* m_callback;
}; /* size: 0x0018 */

class TBaseSafeCallbackList<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType> >
{
}; /* size: 0x0030 */

class RefCountImpl<XE_NotificationManager>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class XE_FunctionExpr
{
  /* 0x0000 */ long Padding_2805[4];
  /* 0x0010 */ unsigned int m_instanceId;
  /* 0x0014 */ long Padding_2806;
  /* 0x0018 */ const struct XEPredicateSource* const m_source;
  /* 0x0020 */ const struct XEPredicateCompare* const m_comparator;
  /* 0x0028 */ class XE_PredicateValue m_value;
}; /* size: 0x0040 */

class TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>
{
}; /* size: 0x0038 */

class XE_PackageEnum
{
  union
  {
    /* 0x0000 */ enum XEHandleType HandleType;
    /* 0x0000 */ unsigned short m_nextPackageId;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_2807;
  /* 0x0008 */ class XE_PackageEntry* m_currentEntry;
  /* 0x0010 */ class XE_ModuleManager* const m_table;
}; /* size: 0x0018 */

class CAutoRg<XE_PackageEntry>
{
}; /* size: 0x0008 */

class XE_ModuleManager
{
  /* 0x0000 */ class SOSHost_RecursiveMutex m_lock;
  /* 0x00e8 */ class CAutoRg<XE_PackageEntry> m_table;
  /* 0x00f0 */ unsigned int m_nAbsent;
  /* 0x00f4 */ long Padding_2808;
  /* 0x00f8 */ class SOSHost_MemObj* m_pmo;
}; /* size: 0x0100 */

class XE_DAttrExpr
{
  /* 0x0000 */ long Padding_2809[4];
  /* 0x0010 */ unsigned short m_eddIndex;
  /* 0x0012 */ char Padding_2810[6];
  /* 0x0018 */ const struct XEDataAttribute* const m_attribute;
  /* 0x0020 */ const struct XEType* const m_type;
  /* 0x0028 */ const struct XEPredicateCompare* const m_comparator;
  /* 0x0030 */ class XE_PredicateValue m_value;
  /* 0x0048 */ unsigned int m_instanceId;
  /* 0x004c */ long Padding_2811;
  /* 0x0050 */ const struct XEEvent* const m_event;
}; /* size: 0x0058 */

class XE_DumpCallbacksSrv
{
}; /* size: 0x0010 */

class XE_EngineObjectFactorySrv
{
}; /* size: 0x0008 */

class TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > >
{
}; /* size: 0x0001 */

class XE_Session::BufferWalker
{
}; /* size: 0x0001 */

class XE_OS
{
  union
  {
    /* 0x0000 */ void* sm_hostCreator /* function */;
    /* 0x0000 */ void* sm_pfnCreateEngineObjectFactory /* function */;
  }; /* size: 0x0008 */
}; /* size: 0x0001 */

class XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_2812;
  /* 0x0018 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>* m_pList;
}; /* size: 0x0020 */

class RefCountImpl<XE_PackagesHolder>
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class XE_NotExpr
{
  /* 0x0000 */ long Padding_2813[4];
  /* 0x0010 */ class CAutoRefc<XE_PredicateExpr> m_child;
}; /* size: 0x0018 */

class XE_SessionEnum
{
  /* 0x0000 */ enum XEHandleType HandleType;
}; /* size: 0x0028 */

class XE_EventEnum
{
  /* 0x0000 */ enum XEHandleType HandleType;
}; /* size: 0x0028 */

class TSList<XE_EngineLocator::EngineModule>
{
}; /* size: 0x0008 */

class XE_DumpCallbacks
{
  union
  {
    /* 0x0000 */ const unsigned int XE_MAX_DUMP_SIZE;
    /* 0x0000 */ class XE_DumpCallbacks* sm_pInstance;
    /* 0x0000 */ struct IDmpClient* sm_pDumpClient;
    /* 0x0000 */ struct DMP_CLIENT_CALLBACK_COOKIE__* sm_dumpCallbackCookie;
  }; /* size: 0x0008 */
  /* 0x0008 */ unsigned int m_totalSize;
  /* 0x000c */ int m_isFullData;
}; /* size: 0x0010 */

class XE_SessionSrv
{
  /* 0x0000 */ long Padding_2814[350];
  /* 0x0578 */ class SEListElem m_link2;
  /* 0x0588 */ class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>* m_pDispatcherPool;
  /* 0x0590 */ class CAutoRefc<SOS_RingBuffer> m_pBufferStateRing;
  /* 0x0000 */ class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>* sm_pDispatcherPool;
}; /* size: 0x0598 */

class XListEnumerator<XE_EventEntry>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class XE_EventEntry* m_currentObject;
  /* 0x0018 */ class XE_EventEntry* m_baseObject;
  /* 0x0020 */ class XList<XE_EventEntry>* m_pList;
}; /* size: 0x0028 */

class XE_EventEntry
{
  /* 0x0000 */ long Padding_2815[8];
  /* 0x0020 */ class SEListElem m_link2;
  /* 0x0000 */ enum XEHandleType HandleType;
  /* 0x0004 */ long Padding_2816[11];
  /* 0x0030 */ struct XESessionContext m_ctx;
  /* 0x0070 */ class CAutoRefc<XE_PackageEntry> m_package;
  /* 0x0078 */ class XE_AssocMemory m_storage;
}; /* size: 0x0088 */

class CAutoRefc<SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *> >
{
  /* 0x0000 */ class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>* m_pt;
}; /* size: 0x0008 */

class XListElem<XE_Session>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_2817;
  /* 0x0018 */ class XList<XE_Session>* m_pList;
}; /* size: 0x0020 */

class SEList<XListElem<XE_Session>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class SEList<XListEnumerator<XE_Session>,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

class XList<XE_Session>
{
  /* 0x0000 */ long Padding_2818[2];
  /* 0x0008 */ class SEList<XListElem<XE_Session>,0> m_elements;
  /* 0x0018 */ class SEList<XListEnumerator<XE_Session>,0> m_enumerators;
  /* 0x0028 */ struct XE_SessionMgrSLock m_lock;
}; /* size: 0x0030 */

class XE_SingletonTargetManager::TargetIdentifier
{
  /* 0x0000 */ struct _GUID m_moduleGUID;
  /* 0x0010 */ struct _GUID m_packageGUID;
  /* 0x0020 */ wchar_t m_targetName[128];
}; /* size: 0x0120 */

class XE_SingletonTargetManager
{
  /* 0x0000 */ class CAutoRefc<XList<XE_TargetEntry> > m_targets;
  /* 0x0008 */ class XE_SingletonTargetManager::TargetIdentifier m_placement[32];
  /* 0x2408 */ class SOSHost_RecursiveMutex m_creationLock;
}; /* size: 0x24f0 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>
{
  /* 0x0000 */ long Padding_2819[10];
  /* 0x0028 */ void* m_pfn /* function */;
}; /* size: 0x0030 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<4>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<3>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<3>::FuncPtr<void,void * const,enum XEEngineNotification,void const * const,NullType>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<1>
{
}; /* size: 0x0001 */

class TCallbackBase<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>::ArgCountDiscriminator<0>
{
}; /* size: 0x0001 */

class RefCountImpl<XList<XE_TargetEntry> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class XListElem<XE_EventEntry>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ long m_refCount;
  /* 0x0014 */ long Padding_2820;
  /* 0x0018 */ class XList<XE_EventEntry>* m_pList;
}; /* size: 0x0020 */

class DmpFakeType
{
}; /* size: 0x0001 */

class XE_EngineSearchLock
{
  /* 0x0000 */ struct _RTL_CRITICAL_SECTION m_cs;
}; /* size: 0x0028 */

class XListEnumerator<XE_Session>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class XE_Session* m_currentObject;
  /* 0x0018 */ class XE_Session* m_baseObject;
  /* 0x0020 */ class XList<XE_Session>* m_pList;
}; /* size: 0x0028 */

class XE_TargetEnum
{
  /* 0x0000 */ enum XEHandleType HandleType;
}; /* size: 0x0028 */

class XE_EngineTimerEntry
{
  /* 0x0000 */ long Padding_2821[8];
  /* 0x0020 */ int m_isAdded;
}; /* size: 0x0028 */

class XE_Engine
{
  union
  {
    /* 0x0000 */ class XE_OneTimeInit sm_initializer;
    /* 0x0000 */ class SOSHost* sm_pHost;
    /* 0x0000 */ struct SOSHost_VersionInfo sm_hostVersion;
    /* 0x0000 */ class SOSHost_MemoryClerk* sm_memClerk;
    /* 0x0000 */ class SOSHost_MemObj* sm_pmo;
    /* 0x0000 */ class SOSHost_MemObj* sm_alignedPmo;
    /* 0x0000 */ class XList<XE_Session>* sm_sessionMgr;
    /* 0x0000 */ class SOSHost_RecursiveMutex* sm_sessionCreateLock;
    /* 0x0000 */ class XE_ModuleManager* sm_pTable;
    /* 0x0000 */ class XE_SingletonTargetManager* sm_singletonTargetMgr;
    /* 0x0000 */ enum XEEngineDiagnosticLevel sm_diagLevel;
    /* 0x0000 */ enum XEEngineCustomizationFlags sm_customizationFlags;
    /* 0x0000 */ class XE_Timer* sm_pTimer;
    /* 0x0000 */ struct XEHostProperties sm_hostProperties;
    /* 0x0000 */ class XE_NotificationManager* sm_pMemoryNotification;
    /* 0x0000 */ struct XETicksConfig sm_ticksConfig;
    /* 0x0000 */ struct XEError sm_noTlsRecordError;
    /* 0x0000 */ int sm_pendingInitialize;
    /* 0x0000 */ class XE_EngineSearchLock sm_searchLock;
    /* 0x0000 */ class XE_EngineTimerEntry sm_timerEntry;
    /* 0x0000 */ class XE_EngineObjectFactory* sm_pObjectFactory;
    /* 0x0000 */ class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sm_nextTimeSync;
    /* 0x0000 */ const class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sm_timeChangeThreshold;
    /* 0x0000 */ const class SOS_Ticks<InterruptTicks<unsigned __int64>,-3> sm_nextTimeSyncIncrement;
    /* 0x0000 */ __int64 sm_ticksDrift;
  }; /* size: 0x0038 */
}; /* size: 0x0001 */

class XE_BufferStateRecord
{
  union
  {
    /* 0x0000 */ const unsigned int sm_NumberOfRecords;
    /* 0x0000 */ const wchar_t** sm_stateNames /* zero-length array */;
  }; /* size: 0x0004 */
  /* 0x0004 */ long Padding_2822[3];
  /* 0x0010 */ const class XE_Buffer* m_pBuffer;
  /* 0x0018 */ unsigned int m_id;
  /* 0x001c */ long Padding_2823;
  /* 0x0020 */ const class XE_BufferMgr* m_pBufferMgr;
  /* 0x0028 */ const class XE_Session* m_pSession;
  /* 0x0030 */ enum XE_Buffer::State m_oldState;
  /* 0x0034 */ enum XE_Buffer::State m_newState;
}; /* size: 0x0038 */

class TCallbackBaseWithParam<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>,void,void * const,enum XEEngineNotification,void const * const,NullType>
{
  /* 0x0000 */ long Padding_2824[12];
  /* 0x0030 */ void* const m_pv;
}; /* size: 0x0038 */

class DmpPointer<SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *> *>
{
  /* 0x0000 */ class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>** m_pRaw;
}; /* size: 0x0008 */

class TypeListNode<void * const,TypeListNode<enum XEEngineNotification,TypeListNode<void const * const,TypeListNode<NullType,NullType> > > >
{
}; /* size: 0x0001 */

class IfNullTypeZeroElseOne<void * const>
{
}; /* size: 0x0001 */

class CAutoBase<XE_FlushRequest>
{
  /* 0x0000 */ class XE_FlushRequest* m_pt;
}; /* size: 0x0008 */

class DmpPointer<SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *> >
{
  /* 0x0000 */ class SOS_DispatcherPool<XE_Buffer,XE_BufferMgr,XE_DispatcherQueue,XE_DispatcherPoolConfig,void *>* m_pRaw;
}; /* size: 0x0008 */

class SEListEnum<XE_Buffer,8>
{
  /* 0x0000 */ class SEList<XE_Buffer,8>* m_pList;
  /* 0x0008 */ class XE_Buffer* m_pNext;
}; /* size: 0x0010 */

class AutoSpinlockHolder<285,1,1>
{
}; /* size: 0x0010 */

class SpinlockHolder<285,1,1>
{
  /* 0x0000 */ class Spinlock<285,1,1>* m_pSpinlock;
  /* 0x0008 */ int m_isLocked;
}; /* size: 0x0010 */

class CAutoBase<SOSHost_OSThreadCreateDestroyCallback>
{
  /* 0x0000 */ class SOSHost_OSThreadCreateDestroyCallback* m_pt;
}; /* size: 0x0008 */

class CAutoRefc<XE_NotificationManager>
{
  /* 0x0000 */ class XE_NotificationManager* m_pt;
}; /* size: 0x0008 */

class SEListEnum<XListElem<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>;

class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>
{
  /* 0x0000 */ class SEListElem m_link;
  /* 0x0010 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem* m_currentObject;
  /* 0x0018 */ class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem* m_baseObject;
  /* 0x0020 */ class XList<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>* m_pList;
}; /* size: 0x0028 */

class Parts<3>
{
  /* 0x0000 */ wchar_t m_names[128][3];
  /* 0x0300 */ unsigned int m_nElems;
}; /* size: 0x0304 */

class CAutoRefc<XE_Session>
{
  /* 0x0000 */ class XE_Session* m_pt;
}; /* size: 0x0008 */

class RefCountImpl<XList<XE_Session> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class SEListEnum<XListElem<XE_Session>,0>;

class CAutoRefc<XE_Callback>
{
  /* 0x0000 */ class XE_Callback* m_pt;
}; /* size: 0x0008 */

class SEListEnum<XListEnumerator<XE_Session>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<XE_Session>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<XE_Session>* m_pNext;
}; /* size: 0x0010 */

class CAutoP<_GUID>
{
}; /* size: 0x0008 */

class CAutoBase<_GUID>
{
  /* 0x0000 */ struct _GUID* m_pt;
}; /* size: 0x0008 */

class BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::List
{
}; /* size: 0x0030 */

class RefCountImpl<XList<XE_EventEntry> >
{
  /* 0x0000 */ long m_crefs;
}; /* size: 0x0004 */

class SEListEnum<XListElem<XE_EventEntry>,0>;

class XE_ISerializedEvent<XE_Metadata>
{
}; /* size: 0x0008 */

class SEListEnum<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<BaseSafeCallbackTraits<TBaseSafeCallbackWithParam<void,XE_NotificationCallbackListSLock,XE_CallbackEvent,void * const,enum XEEngineNotification,void const * const,NullType>,XE_NotificationCallbackListSLock,XE_CallbackEvent>::Elem>* m_pNext;
}; /* size: 0x0010 */

class SEListEnum<XListEnumerator<XE_EventEntry>,0>
{
  /* 0x0000 */ class SEList<XListEnumerator<XE_EventEntry>,0>* m_pList;
  /* 0x0008 */ class XListEnumerator<XE_EventEntry>* m_pNext;
}; /* size: 0x0010 */

class CAutoRefc<XE_EventEntry>
{
  /* 0x0000 */ class XE_EventEntry* m_pt;
}; /* size: 0x0008 */

class SEListEnum<XE_TargetEntry,40>
{
  /* 0x0000 */ class SEList<XE_TargetEntry,40>* m_pList;
  /* 0x0008 */ class XE_TargetEntry* m_pNext;
}; /* size: 0x0010 */

class XE_BufferWalker<XE_Session::BufferWalker>
{
  /* 0x0000 */ const struct XEEventBufferHeader* m_EventHeader;
  /* 0x0008 */ const struct XEEvent* m_EventMd;
  /* 0x0010 */ const class XE_Session::BufferWalker* m_metadata;
  /* 0x0018 */ const struct XEBuffer* m_pBuffer;
  /* 0x0020 */ const unsigned char* m_bufferEnd;
}; /* size: 0x0028 */

class SEListEnum<XE_EventEntry,32>
{
  /* 0x0000 */ class SEList<XE_EventEntry,32>* m_pList;
  /* 0x0008 */ class XE_EventEntry* m_pNext;
}; /* size: 0x0010 */

class XE_ResolvedObject<XEMessage>
{
  /* 0x0000 */ const struct XEPackageMetadata* m_PackageMetadata;
  /* 0x0008 */ const struct XEMessage* m_Obj;
  /* 0x0010 */ class XE_Auto m_package;
  /* 0x0018 */ const struct XEMessage* m_Object;
}; /* size: 0x0020 */

class CAutoP<XE_ModuleManager>
{
}; /* size: 0x0008 */

class CAutoBase<XE_ModuleManager>
{
  /* 0x0000 */ class XE_ModuleManager* m_pt;
}; /* size: 0x0008 */

class SEHashTable<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,WCharKey,0,16,XE_BaseAllocator>
{
  /* 0x0000 */ class SEList<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,0>* m_buckets;
  /* 0x0008 */ unsigned int m_bucketCount;
  /* 0x000c */ unsigned int m_mask;
  /* 0x0010 */ unsigned int m_entryCount;
  /* 0x0014 */ long Padding_2825;
  /* 0x0018 */ class XE_BaseAllocator m_allocator;
}; /* size: 0x0020 */

class SEList<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,0>
{
  /* 0x0000 */ class ListBase m_list;
}; /* size: 0x0010 */

struct XE_TCollection<0,0>::IsValid::__l78::TObjectEntry;

class SEListEnum<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry,0>;

class XE_AutoRg<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry>
{
}; /* size: 0x0008 */

class CAutoRg<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry>
{
}; /* size: 0x0008 */

class CAutoBase<`XE_TCollection<0,0>::IsValid'::`78'::TObjectEntry>
{
  /* 0x0000 */ struct XE_TCollection<0,0>::IsValid::__l78::TObjectEntry* m_pt;
}; /* size: 0x0008 */

class SEListEnum<XE_AssocMemory::Entry,0>
{
  /* 0x0000 */ class SEList<XE_AssocMemory::Entry,0>* m_pList;
  /* 0x0008 */ struct XE_AssocMemory::Entry* m_pNext;
}; /* size: 0x0010 */

class CAutoP<XE_AssocMemory::Entry>
{
}; /* size: 0x0008 */

class CAutoBase<XE_AssocMemory::Entry>
{
  /* 0x0000 */ struct XE_AssocMemory::Entry* m_pt;
}; /* size: 0x0008 */

class CAutoRefc<XE_ActualTargetEntry>
{
  /* 0x0000 */ class XE_ActualTargetEntry* m_pt;
}; /* size: 0x0008 */

class CAutoRefc<XE_ProxyTargetEntry>
{
  /* 0x0000 */ class XE_ProxyTargetEntry* m_pt;
}; /* size: 0x0008 */

class CAutoP<XE_SingletonTargetManager>
{
}; /* size: 0x0008 */

class CAutoBase<XE_SingletonTargetManager>
{
  /* 0x0000 */ class XE_SingletonTargetManager* m_pt;
}; /* size: 0x0008 */

class AutoSpinlockHolder<284,1,1>
{
}; /* size: 0x0010 */

class StreamCDATAReader<unsigned short,XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >
{
  /* 0x0000 */ const class XE_Xml<XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >* m_pXml;
  /* 0x0008 */ class XStringXmlBuilder& m_sbuf;
  /* 0x0010 */ unsigned char m_buffer[5120];
  /* 0x1410 */ int m_firstRead;
}; /* size: 0x1418 */

class StreamCDATAReader<char,XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >
{
  /* 0x0000 */ const class XE_Xml<XE_Metadata,XE_StandardFormatter,XE_SerializedEvent<XE_Metadata,XE_VersionConfig> >* m_pXml;
  /* 0x0008 */ class XStringXmlBuilder& m_sbuf;
  /* 0x0010 */ unsigned char m_buffer[5120];
  /* 0x1410 */ int m_firstRead;
}; /* size: 0x1418 */

class CAutoP<XE_Timer>
{
}; /* size: 0x0008 */

class SEListEnum<XE_ITimerEntry,16>
{
  /* 0x0000 */ class SEList<XE_ITimerEntry,16>* m_pList;
  /* 0x0008 */ class XE_ITimerEntry* m_pNext;
}; /* size: 0x0010 */

class DmpPointer<XEEvent>
{
  /* 0x0000 */ struct XEEvent* m_pRaw;
}; /* size: 0x0008 */

class DmpValidated<unsigned __int64>
{
  /* 0x0000 */ unsigned __int64 m_value;
}; /* size: 0x0008 */

class DmpPointer<XEDataAttribute>
{
  /* 0x0000 */ struct XEDataAttribute* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEObject>
{
  /* 0x0000 */ struct XEObject* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEAction>
{
  /* 0x0000 */ struct XEAction* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XETarget>
{
  /* 0x0000 */ struct XETarget* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEMap>
{
  /* 0x0000 */ struct XEMap* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEPredicateSource>
{
  /* 0x0000 */ struct XEPredicateSource* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEPredicateCompare>
{
  /* 0x0000 */ struct XEPredicateCompare* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEPackage>
{
  /* 0x0000 */ struct XEPackage* m_pRaw;
}; /* size: 0x0008 */

class CAutoRefc<IDmpClient>
{
  /* 0x0000 */ struct IDmpClient* m_pt;
}; /* size: 0x0008 */

class DmpPointer<XE_ModuleManager>
{
  /* 0x0000 */ class XE_ModuleManager* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_PackageEntry>
{
  /* 0x0000 */ class XE_PackageEntry* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XList<XE_Session> >
{
  /* 0x0000 */ class XList<XE_Session>* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_Session>
{
  /* 0x0000 */ class XE_Session* m_pRaw;
}; /* size: 0x0008 */

class DmpXListIterator<XList<XE_Session>,512>
{
}; /* size: 0x0020 */

class DmpPointer<SEListElem>
{
  /* 0x0000 */ class SEListElem* m_pRaw;
}; /* size: 0x0008 */

class DmpListIterator<XE_Session,8,8,SEListElem,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class DmpPointer<XE_SingletonTargetManager>
{
  /* 0x0000 */ class XE_SingletonTargetManager* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XList<XE_TargetEntry> >
{
  /* 0x0000 */ class XList<XE_TargetEntry>* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEObjectCollection>
{
  /* 0x0000 */ struct XEObjectCollection* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEObject *>
{
  /* 0x0000 */ struct XEObject** m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_BufferMgr>
{
  /* 0x0000 */ class XE_BufferMgr* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XList<XE_EventEntry> >
{
  /* 0x0000 */ class XList<XE_EventEntry>* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_EventEntry>
{
  /* 0x0000 */ class XE_EventEntry* m_pRaw;
}; /* size: 0x0008 */

class DmpXListIterator<XList<XE_EventEntry>,512>
{
}; /* size: 0x0020 */

class DmpListIterator<XE_EventEntry,8,0,SEListElem,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class DmpPointer<XE_TargetEntry>
{
  /* 0x0000 */ class XE_TargetEntry* m_pRaw;
}; /* size: 0x0008 */

class DmpXListIterator<XList<XE_TargetEntry>,512>
{
}; /* size: 0x0020 */

class DmpListIterator<XE_TargetEntry,8,8,SEListElem,8,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class DmpPointer<XE_ActualTargetEntry>
{
  /* 0x0000 */ class XE_ActualTargetEntry* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_ProxyTargetEntry>
{
  /* 0x0000 */ class XE_ProxyTargetEntry* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEPackage0::RingTarget>
{
  /* 0x0000 */ class XEPackage0::RingTarget* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SESListSized<XEPackage0::RingTarget::EventEntry,0> >
{
  /* 0x0000 */ class SESListSized<XEPackage0::RingTarget::EventEntry,0>* m_pRaw;
}; /* size: 0x0008 */

class DmpListIterator<XEPackage0::RingTarget::EventEntry,0,0,SESListSized<XEPackage0::RingTarget::EventEntry,0>,0,2000>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class DmpPointer<XEPackage0::RingTarget::EventEntry>
{
  /* 0x0000 */ class XEPackage0::RingTarget::EventEntry* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SESList<XE_Buffer,24> >
{
  /* 0x0000 */ struct SESList<XE_Buffer,24>* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_Buffer>
{
  /* 0x0000 */ class XE_Buffer* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEBufferHeader>
{
  /* 0x0000 */ struct XEBufferHeader* m_pRaw;
}; /* size: 0x0008 */

class DmpSEListIterator<SESList<XE_Buffer,24>,512>
{
}; /* size: 0x0020 */

class DmpListIterator<XE_Buffer,0,24,SESList<XE_Buffer,24>,0,512>
{
  /* 0x0000 */ struct IDmpDump* m_pDump;
  /* 0x0008 */ const void* m_pAnchor;
  /* 0x0010 */ const void* m_pNextPtrToRead;
  /* 0x0018 */ unsigned __int64 m_numElementsRead;
}; /* size: 0x0020 */

class DmpPointer<XE_OneTimeInit>
{
  /* 0x0000 */ class XE_OneTimeInit* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<enum XEEngineCustomizationFlags>
{
  /* 0x0000 */ enum XEEngineCustomizationFlags* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XEHostProperties>
{
  /* 0x0000 */ struct XEHostProperties* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XETicksConfig>
{
  /* 0x0000 */ struct XETicksConfig* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOSHost_MemoryClerk *>
{
  /* 0x0000 */ class SOSHost_MemoryClerk** m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOSHost_MemoryClerk>
{
  /* 0x0000 */ class SOSHost_MemoryClerk* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOSHost_RecursiveMutex *>
{
  /* 0x0000 */ class SOSHost_RecursiveMutex** m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOSHost_RecursiveMutex>
{
  /* 0x0000 */ class SOSHost_RecursiveMutex* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_Timer *>
{
  /* 0x0000 */ class XE_Timer** m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_Timer>
{
  /* 0x0000 */ class XE_Timer* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_NotificationManager *>
{
  /* 0x0000 */ class XE_NotificationManager** m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XE_NotificationManager>
{
  /* 0x0000 */ class XE_NotificationManager* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOSHost_MemObj *>
{
  /* 0x0000 */ class SOSHost_MemObj** m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<SOSHost_MemObj>
{
  /* 0x0000 */ class SOSHost_MemObj* m_pRaw;
}; /* size: 0x0008 */

class DmpPointer<XList<XE_Session> *>
{
  /* 0x0000 */ class XList<XE_Session>** m_pRaw;
}; /* size: 0x0008 */

struct XListDmpOffsets<XE_Session>
{
}; /* size: 0x0001 */

struct XListDmpOffsets<XE_EventEntry>
{
}; /* size: 0x0001 */

typedef struct _DETOUR_CLR_HEADER
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned short MajorRuntimeVersion;
  /* 0x0006 */ unsigned short MinorRuntimeVersion;
  /* 0x0008 */ struct _IMAGE_DATA_DIRECTORY MetaData;
  /* 0x0010 */ unsigned long Flags;
} DETOUR_CLR_HEADER, *PDETOUR_CLR_HEADER; /* size: 0x0014 */

typedef struct _DETOUR_EXE_RESTORE
{
  /* 0x0000 */ unsigned long cb;
  /* 0x0004 */ unsigned long cbidh;
  /* 0x0008 */ unsigned long cbinh;
  /* 0x000c */ unsigned long cbclr;
  /* 0x0010 */ unsigned char* pidh;
  /* 0x0018 */ unsigned char* pinh;
  /* 0x0020 */ unsigned char* pclr;
  /* 0x0028 */ struct _IMAGE_DOS_HEADER idh;
  union
  {
    /* 0x0068 */ struct _IMAGE_NT_HEADERS64 inh;
    /* 0x0068 */ struct _IMAGE_NT_HEADERS inh32;
    /* 0x0068 */ struct _IMAGE_NT_HEADERS64 inh64;
    /* 0x0068 */ unsigned char raw[1544];
  }; /* size: 0x0608 */
  /* 0x0670 */ struct _DETOUR_CLR_HEADER clr;
  /* 0x0684 */ long __PADDING__[1];
} DETOUR_EXE_RESTORE, *PDETOUR_EXE_RESTORE; /* size: 0x0688 */

typedef struct _DETOUR_SECTION_RECORD
{
  /* 0x0000 */ unsigned long cbBytes;
  /* 0x0004 */ unsigned long nReserved;
  /* 0x0008 */ struct _GUID guid;
} DETOUR_SECTION_RECORD, *PDETOUR_SECTION_RECORD; /* size: 0x0018 */

typedef struct _SYMBOL_INFO
{
  /* 0x0000 */ unsigned long SizeOfStruct;
  /* 0x0004 */ unsigned long TypeIndex;
  /* 0x0008 */ unsigned __int64 Reserved[2];
  /* 0x0018 */ unsigned long Index;
  /* 0x001c */ unsigned long Size;
  /* 0x0020 */ unsigned __int64 ModBase;
  /* 0x0028 */ unsigned long Flags;
  /* 0x002c */ long Padding_2826;
  /* 0x0030 */ unsigned __int64 Value;
  /* 0x0038 */ unsigned __int64 Address;
  /* 0x0040 */ unsigned long Register;
  /* 0x0044 */ unsigned long Scope;
  /* 0x0048 */ unsigned long Tag;
  /* 0x004c */ unsigned long NameLen;
  /* 0x0050 */ unsigned long MaxNameLen;
  /* 0x0054 */ char Name[1];
  /* 0x0055 */ char __PADDING__[3];
} SYMBOL_INFO, *PSYMBOL_INFO; /* size: 0x0058 */

typedef struct _DETOUR_SYM_INFO
{
  /* 0x0000 */ void* hProcess;
  /* 0x0008 */ struct HINSTANCE__* hDbgHelp;
  /* 0x0010 */ void* pfImagehlpApiVersionEx /* function */;
  /* 0x0018 */ void* pfSymInitialize /* function */;
  /* 0x0020 */ void* pfSymSetOptions /* function */;
  /* 0x0028 */ void* pfSymGetOptions /* function */;
  /* 0x0030 */ void* pfSymLoadModule64 /* function */;
  /* 0x0038 */ void* pfSymGetModuleInfo64 /* function */;
  /* 0x0040 */ void* pfSymFromName /* function */;
} DETOUR_SYM_INFO, *PDETOUR_SYM_INFO; /* size: 0x0048 */

struct API_VERSION
{
  /* 0x0000 */ unsigned short MajorVersion;
  /* 0x0002 */ unsigned short MinorVersion;
  /* 0x0004 */ unsigned short Revision;
  /* 0x0006 */ unsigned short Reserved;
}; /* size: 0x0008 */

typedef struct _IMAGEHLP_MODULE64
{
  /* 0x0000 */ unsigned long SizeOfStruct;
  /* 0x0004 */ long Padding_2827;
  /* 0x0008 */ unsigned __int64 BaseOfImage;
  /* 0x0010 */ unsigned long ImageSize;
  /* 0x0014 */ unsigned long TimeDateStamp;
  /* 0x0018 */ unsigned long CheckSum;
  /* 0x001c */ unsigned long NumSyms;
  /* 0x0020 */ enum SYM_TYPE SymType;
  /* 0x0024 */ char ModuleName[32];
  /* 0x0044 */ char ImageName[256];
  /* 0x0144 */ char LoadedImageName[256];
  /* 0x0244 */ char LoadedPdbName[256];
  /* 0x0344 */ unsigned long CVSig;
  /* 0x0348 */ char CVData[780];
  /* 0x0654 */ unsigned long PdbSig;
  /* 0x0658 */ struct _GUID PdbSig70;
  /* 0x0668 */ unsigned long PdbAge;
  /* 0x066c */ int PdbUnmatched;
  /* 0x0670 */ int DbgUnmatched;
  /* 0x0674 */ int LineNumbers;
  /* 0x0678 */ int GlobalSymbols;
  /* 0x067c */ int TypeInfo;
  /* 0x0680 */ int SourceIndexed;
  /* 0x0684 */ int Publics;
  /* 0x0688 */ unsigned long MachineType;
  /* 0x068c */ unsigned long Reserved;
} IMAGEHLP_MODULE64, *PIMAGEHLP_MODULE64; /* size: 0x0690 */

struct DetourOperation
{
  /* 0x0000 */ struct DetourOperation* pNext;
  /* 0x0008 */ int fIsRemove;
  /* 0x000c */ long Padding_2828;
  /* 0x0010 */ unsigned char** ppbPointer;
  /* 0x0018 */ unsigned char* pbTarget;
  /* 0x0020 */ struct _DETOUR_TRAMPOLINE* pTrampoline;
  /* 0x0028 */ unsigned long dwPerm;
  /* 0x002c */ long __PADDING__[1];
}; /* size: 0x0030 */

typedef struct _DETOUR_TRAMPOLINE
{
  /* 0x0000 */ unsigned char rbCode[31];
  /* 0x001f */ unsigned char cbTarget;
  /* 0x0020 */ unsigned char* pbRemain;
  /* 0x0028 */ unsigned char* pbDetour;
  /* 0x0030 */ unsigned char rbCodeIn[8];
} DETOUR_TRAMPOLINE, *PDETOUR_TRAMPOLINE; /* size: 0x0038 */

struct DetourThread
{
  /* 0x0000 */ struct DetourThread* pNext;
  /* 0x0008 */ void* hThread;
}; /* size: 0x0010 */

struct DETOUR_REGION
{
  /* 0x0000 */ unsigned long dwSignature;
  /* 0x0004 */ long Padding_2829;
  /* 0x0008 */ struct DETOUR_REGION* pNext;
  /* 0x0010 */ struct _DETOUR_TRAMPOLINE* pFree;
}; /* size: 0x0018 */

struct CDetourDis::COPYENTRY
{
  struct /* bitfield */
  {
    /* 0x0000 */ unsigned long nOpcode : 8; /* bit position: 0 */
    /* 0x0000 */ unsigned long nFixedSize : 4; /* bit position: 8 */
    /* 0x0000 */ unsigned long nFixedSize16 : 4; /* bit position: 12 */
    /* 0x0000 */ unsigned long nModOffset : 4; /* bit position: 16 */
    /* 0x0000 */ long nRelOffset : 4; /* bit position: 20 */
    /* 0x0000 */ long nTargetBack : 4; /* bit position: 24 */
    /* 0x0000 */ unsigned long nFlagBits : 4; /* bit position: 28 */
  }; /* bitfield */
  /* 0x0004 */ long Padding_2830;
  /* 0x0008 */ void* pfCopy /* function */;
}; /* size: 0x0010 */

class CDetourDis
{
  union
  {
    /* 0x0000 */ const struct CDetourDis::COPYENTRY s_rceCopyTable[257];
    /* 0x0000 */ const struct CDetourDis::COPYENTRY s_rceCopyTable0F[257];
    /* 0x0000 */ const unsigned char s_rbModRm[256];
    struct
    {
      /* 0x0000 */ int m_bOperandOverride;
      /* 0x0004 */ int m_bAddressOverride;
      /* 0x0008 */ int m_bRaxOverride;
      /* 0x000c */ long Padding_2831;
      /* 0x0010 */ unsigned char** m_ppbTarget;
      /* 0x0018 */ long* m_plExtra;
      /* 0x0020 */ long m_lScratchExtra;
      /* 0x0024 */ long Padding_2832;
      /* 0x0028 */ unsigned char* m_pbScratchTarget;
      /* 0x0030 */ unsigned char m_rbScratchDst[64];
    }; /* size: 0x0068 */
  }; /* size: 0x1010 */
}; /* size: 0x0070 */

class Detour::CImageChars
{
  /* 0x0000 */ class Detour::CImage* m_pImage;
  /* 0x0008 */ char* m_pChars;
  /* 0x0010 */ unsigned long m_nChars;
  /* 0x0014 */ unsigned long m_nCharsMax;
  /* 0x0018 */ unsigned long m_nCharVirtAddr;
}; /* size: 0x0020 */

class Detour::CImage
{
  /* 0x0000 */ unsigned long m_dwValidSignature;
  /* 0x0004 */ long Padding_2833;
  /* 0x0008 */ class Detour::CImageData* m_pImageData;
  /* 0x0010 */ void* m_hMap;
  /* 0x0018 */ unsigned char* m_pMap;
  /* 0x0020 */ unsigned long m_nNextFileAddr;
  /* 0x0024 */ unsigned long m_nNextVirtAddr;
  /* 0x0028 */ struct _IMAGE_DOS_HEADER m_DosHeader;
  /* 0x0068 */ struct _IMAGE_NT_HEADERS64 m_NtHeader;
  /* 0x0170 */ struct _IMAGE_SECTION_HEADER m_SectionHeaders[16];
  /* 0x03f0 */ unsigned long m_nPrePE;
  /* 0x03f4 */ unsigned long m_cbPrePE;
  /* 0x03f8 */ unsigned long m_cbPostPE;
  /* 0x03fc */ unsigned long m_nPeOffset;
  /* 0x0400 */ unsigned long m_nSectionsOffset;
  /* 0x0404 */ unsigned long m_nExtraOffset;
  /* 0x0408 */ unsigned long m_nFileSize;
  /* 0x040c */ unsigned long m_nOutputVirtAddr;
  /* 0x0410 */ unsigned long m_nOutputVirtSize;
  /* 0x0414 */ unsigned long m_nOutputFileAddr;
  /* 0x0418 */ unsigned char* m_pbOutputBuffer;
  /* 0x0420 */ unsigned long m_cbOutputBuffer;
  /* 0x0424 */ long Padding_2834;
  /* 0x0428 */ class Detour::CImageImportFile* m_pImportFiles;
  /* 0x0430 */ unsigned long m_nImportFiles;
  /* 0x0434 */ int m_fHadDetourSection;
}; /* size: 0x0438 */

class Detour::CImageData
{
  /* 0x0000 */ unsigned char* m_pbData;
  /* 0x0008 */ unsigned long m_cbData;
  /* 0x000c */ unsigned long m_cbAlloc;
}; /* size: 0x0010 */

class Detour::CImageImportFile
{
  /* 0x0000 */ class Detour::CImageImportFile* m_pNextFile;
  /* 0x0008 */ int m_fByway;
  /* 0x000c */ long Padding_2835;
  /* 0x0010 */ class Detour::CImageImportName* m_pImportNames;
  /* 0x0018 */ unsigned long m_nImportNames;
  /* 0x001c */ unsigned long m_rvaOriginalFirstThunk;
  /* 0x0020 */ unsigned long m_rvaFirstThunk;
  /* 0x0024 */ unsigned long m_nForwarderChain;
  /* 0x0028 */ char* m_pszOrig;
  /* 0x0030 */ char* m_pszName;
}; /* size: 0x0038 */

class Detour::CImageImportName
{
  /* 0x0000 */ unsigned short m_nHint;
  /* 0x0002 */ char Padding_2836[2];
  /* 0x0004 */ unsigned long m_nOrig;
  /* 0x0008 */ unsigned long m_nOrdinal;
  /* 0x000c */ long Padding_2837;
  /* 0x0010 */ char* m_pszOrig;
  /* 0x0018 */ char* m_pszName;
}; /* size: 0x0020 */

class Detour::CImageThunks
{
  /* 0x0000 */ class Detour::CImage* m_pImage;
  /* 0x0008 */ struct _IMAGE_THUNK_DATA64* m_pThunks;
  /* 0x0010 */ unsigned long m_nThunks;
  /* 0x0014 */ unsigned long m_nThunksMax;
  /* 0x0018 */ unsigned long m_nThunkVirtAddr;
}; /* size: 0x0020 */

struct HUFFMAN_DECODE_NODE_T
{
  /* 0x0000 */ struct HUFFMAN_DECODE_NODE_T* m_pNext;
  /* 0x0008 */ unsigned short m_uSymbol;
  /* 0x000a */ unsigned short m_uBits;
  /* 0x000c */ long __PADDING__[1];
}; /* size: 0x0010 */

struct LZ77_STAT_T
{
  /* 0x0000 */ unsigned __int64 m_uCount;
  /* 0x0008 */ unsigned __int64 m_uOrigSize;
  /* 0x0010 */ unsigned __int64 m_uCompSize;
}; /* size: 0x0018 */

struct LZ77_DECODER_T
{
  /* 0x0000 */ unsigned __int64 m_uMagic;
  /* 0x0008 */ unsigned __int64 m_uState;
  /* 0x0010 */ unsigned char* m_pAllocatedMemory;
  /* 0x0018 */ unsigned __int64 m_uMaxWindowSizeLog2;
  /* 0x0020 */ unsigned __int64 m_uRuntimeFlags;
  struct
  {
    /* 0x0028 */ unsigned __int64 m_uBufferOffset;
    /* 0x0030 */ unsigned __int64 m_uDecodePosition;
    /* 0x0038 */ unsigned __int64 m_uStopPosition;
    /* 0x0040 */ unsigned __int64 m_uEndOfBuffer;
    /* 0x0048 */ unsigned __int64 m_uCopyPosition;
    /* 0x0050 */ unsigned __int64 m_uDecodedSizeBits;
    /* 0x0058 */ unsigned __int64 m_uEncodedSizeBits;
    /* 0x0060 */ unsigned __int64 m_uBlockDecodedBytes;
    /* 0x0068 */ unsigned __int64 m_uBlockCopiedBytes;
    /* 0x0070 */ unsigned __int64 m_uScratchBytesStored;
    /* 0x0078 */ unsigned __int64 m_uScratchBytesProcessed;
    /* 0x0080 */ unsigned __int64 m_uWindowSizeLog2;
    /* 0x0088 */ unsigned __int64 m_uHuffmanTableBits;
    /* 0x0090 */ unsigned __int64 m_uMtfEntryCount;
    /* 0x0098 */ unsigned __int64 m_uPtrMinMatchLength;
    /* 0x00a0 */ unsigned __int64 m_uMtfMinMatchLength;
    /* 0x00a8 */ void* m_pLz77DecProc /* function */;
    /* 0x00b0 */ short* m_piShortSymbolRoot;
    /* 0x00b8 */ short* m_piLongLengthRoot;
    /* 0x00c0 */ struct BIO_STATE_T m_BioState;
    /* 0x00d8 */ struct LZ77_MTF_STATE_T m_Mtf;
    struct
    {
      /* 0x0100 */ unsigned __int64 m_uLength;
      /* 0x0108 */ __int64 m_iOffset;
    } /* size: 0x0010 */ m_Tail;
  } /* size: 0x00e8 */ m_DecodeData;
  struct
  {
    /* 0x0110 */ unsigned char* m_pBufferData;
    /* 0x0118 */ unsigned __int64 m_uBufferDataSize;
  } /* size: 0x0010 */ m_BufferData;
  struct
  {
    /* 0x0120 */ const unsigned char* m_pUserData;
    /* 0x0128 */ unsigned __int64 m_uUserDataSize;
    /* 0x0130 */ unsigned __int64 m_uUserDataRead;
  } /* size: 0x0018 */ m_UserData;
  struct
  {
    /* 0x0138 */ struct LZ77_STAT_T m_Encoder;
    /* 0x0150 */ struct LZ77_STAT_T m_Session;
    /* 0x0168 */ struct LZ77_STAT_T m_Block;
    /* 0x0180 */ unsigned int m_uSessionSignature;
    /* 0x0184 */ unsigned int m_uBlockIndex;
  } /* size: 0x0050 */ m_Stat;
  struct
  {
    /* 0x0188 */ short m_iShortSymbolDecodeTable[8192];
    /* 0x4188 */ short m_iLongLengthDecodeTable[8192];
  } /* size: 0x8000 */ m_Huffman;
  struct
  {
    /* 0x8188 */ unsigned char m_uScratchArea[8448];
    /* 0xa288 */ struct HUFFMAN_DECODE_NODE_T m_HuffmanNodeTemp[768];
  } /* size: 0x5100 */ m_Scratch;
}; /* size: 0xd288 */

struct HUFFMAN_RADIX_SORT_CHAIN_T
{
  /* 0x0000 */ struct HUFFMAN_NODE_T* m_pHead;
  /* 0x0008 */ struct HUFFMAN_NODE_T** m_ppLast;
}; /* size: 0x0010 */

struct LZ77_PASS1_STATE_T
{
  /* 0x0000 */ unsigned int m_uNext[8];
  struct
  {
    /* 0x0020 */ struct HUFFMAN_NODE_T m_HuffmanNodeTemp[1408];
    /* 0xb020 */ unsigned char* m_pScratchArea;
    /* 0xb028 */ unsigned __int64 m_uScratchAreaSize;
  } /* size: 0xb010 */ m_Scratch;
  /* 0xb030 */ struct LZ77_PASS2_STATE_T m_Pass2;
  struct
  {
    /* 0xbfb0 */ unsigned int* m_pHashTable;
    /* 0xbfb8 */ unsigned __int64 m_uHashTableSizeMax;
    /* 0xbfc0 */ unsigned __int64 m_uHashTableSizeCurrent;
  } /* size: 0x0018 */ m_HashTable;
  /* 0xbfc8 */ unsigned char* m_pAllocatedMemory;
  /* 0xbfd0 */ unsigned __int64 m_uMagic;
  /* 0xbfd8 */ unsigned __int64 m_uState;
  /* 0xbfe0 */ unsigned __int64 m_uMaxWindowSizeLog2;
  /* 0xbfe8 */ unsigned __int64 m_uRuntimeFlags;
  struct
  {
    /* 0xbff0 */ unsigned char* m_pBufferData;
    /* 0xbff8 */ unsigned __int64 m_uBufferDataSize;
  } /* size: 0x0010 */ m_BufferData;
  struct
  {
    /* 0xc000 */ const unsigned char* m_pUserData;
    /* 0xc008 */ unsigned __int64 m_uUserDataSize;
    /* 0xc010 */ unsigned __int64 m_uUserDataProcessed;
    /* 0xc018 */ unsigned __int64 m_fFlush;
  } /* size: 0x0020 */ m_UserData;
  struct
  {
    /* 0xc020 */ unsigned char* m_pData;
    /* 0xc028 */ unsigned __int64 m_uDataSize;
    /* 0xc030 */ unsigned __int64 m_uWindowSize;
    /* 0xc038 */ unsigned __int64 m_uEncodePosition;
    /* 0xc040 */ unsigned __int64 m_uHashInsertPosition;
    /* 0xc048 */ struct LZ77_MTF_STATE_T m_Mtf;
  } /* size: 0x0050 */ m_EncodeData;
  struct
  {
    /* 0xc070 */ void* m_pLz77EncPass1 /* function */;
    /* 0xc078 */ void* m_pLz77EncPass2 /* function */;
    /* 0xc080 */ void* m_pLz77EncInsert /* function */;
    /* 0xc088 */ unsigned __int64 m_fDirty;
    /* 0xc090 */ struct XPRESS9_ENCODER_PARAMS_T m_Delayed;
    /* 0xc0b0 */ struct XPRESS9_ENCODER_PARAMS_T m_Current;
  } /* size: 0x0060 */ m_Params;
  struct
  {
    /* 0xc0d0 */ struct LZ77_STAT_T m_Encoder;
    /* 0xc0e8 */ struct LZ77_STAT_T m_Session;
    /* 0xc100 */ struct LZ77_STAT_T m_Block;
    /* 0xc118 */ unsigned int m_uSessionSignature;
    /* 0xc11c */ unsigned int m_uBlockIndex;
  } /* size: 0x0050 */ m_Stat;
  struct
  {
    /* 0xc120 */ unsigned int m_uLongLengthCount[256];
    /* 0xc520 */ unsigned int m_uShortSymbolCount[704];
    /* 0xd020 */ unsigned long m_uStoredBitCount;
  } /* size: 0x0f04 */ m_HuffmanStat;
  /* 0xd024 */ long __PADDING__[1];
}; /* size: 0xd028 */

struct $_s__CatchableTypeArray$_extraBytes_8
{
  /* 0x0000 */ int nCatchableTypes;
  /* 0x0004 */ const struct _s__CatchableType* arrayOfCatchableTypes[1];
}; /* size: 0x000c */

typedef class _com_error
{
  /* 0x0000 */ long Padding_2838[2];
  /* 0x0008 */ const HRESULT m_hresult;
  /* 0x000c */ long Padding_2839;
  /* 0x0010 */ struct IErrorInfo* m_perrinfo;
  /* 0x0018 */ char* m_pszMsg;
} com_error, *Pcom_error; /* size: 0x0020 */

struct DOUBLE_ARG
{
  /* 0x0000 */ unsigned char doubleBits[8];
}; /* size: 0x0008 */

struct UnloadInfo
{
  /* 0x0000 */ struct UnloadInfo* puiNext;
  /* 0x0008 */ const struct ImgDelayDescrV2* pidd;
}; /* size: 0x0010 */

typedef struct _TP_CALLBACK_ENVIRON_V3
{
  /* 0x0000 */ unsigned long Version;
  /* 0x0004 */ long Padding_2840;
  /* 0x0008 */ struct _TP_POOL* Pool;
  /* 0x0010 */ struct _TP_CLEANUP_GROUP* CleanupGroup;
  /* 0x0018 */ void* CleanupGroupCancelCallback /* function */;
  /* 0x0020 */ void* RaceDll;
  /* 0x0028 */ struct _ACTIVATION_CONTEXT* ActivationContext;
  /* 0x0030 */ void* FinalizationCallback /* function */;
  union
  {
    union
    {
      /* 0x0038 */ unsigned long Flags;
      struct
      {
        struct /* bitfield */
        {
          /* 0x0038 */ unsigned long LongFunction : 1; /* bit position: 0 */
          /* 0x0038 */ unsigned long Persistent : 1; /* bit position: 1 */
          /* 0x0038 */ unsigned long Private : 30; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ s;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x003c */ enum _TP_CALLBACK_PRIORITY CallbackPriority;
  /* 0x0040 */ unsigned long Size;
  /* 0x0044 */ long __PADDING__[1];
} TP_CALLBACK_ENVIRON_V3, *PTP_CALLBACK_ENVIRON_V3; /* size: 0x0048 */

struct InternalImgDelayDescr
{
  /* 0x0000 */ unsigned long grAttrs;
  /* 0x0004 */ long Padding_2841;
  /* 0x0008 */ const char* szName;
  /* 0x0010 */ struct HINSTANCE__** phmod;
  /* 0x0018 */ struct _IMAGE_THUNK_DATA64* pIAT;
  /* 0x0020 */ const struct _IMAGE_THUNK_DATA64* pINT;
  /* 0x0028 */ const struct _IMAGE_THUNK_DATA64* pBoundIAT;
  /* 0x0030 */ const struct _IMAGE_THUNK_DATA64* pUnloadIAT;
  /* 0x0038 */ unsigned long dwTimeStamp;
  /* 0x003c */ long __PADDING__[1];
}; /* size: 0x0040 */

typedef struct _s_ThrowInfo
{
  /* 0x0000 */ unsigned int attributes;
  /* 0x0004 */ int pmfnUnwind;
  /* 0x0008 */ int pForwardCompat;
  /* 0x000c */ int pCatchableTypeArray;
} s_ThrowInfo, *Ps_ThrowInfo; /* size: 0x0010 */

struct EHExceptionRecord::EHParameters
{
  /* 0x0000 */ unsigned long magicNumber;
  /* 0x0004 */ long Padding_2842;
  /* 0x0008 */ void* pExceptionObject;
  /* 0x0010 */ const struct _s_ThrowInfo* pThrowInfo;
  /* 0x0018 */ void* pThrowImageBase;
}; /* size: 0x0020 */

struct EHExceptionRecord
{
  /* 0x0000 */ unsigned long ExceptionCode;
  /* 0x0004 */ unsigned long ExceptionFlags;
  /* 0x0008 */ struct _EXCEPTION_RECORD* ExceptionRecord;
  /* 0x0010 */ void* ExceptionAddress;
  /* 0x0018 */ unsigned long NumberParameters;
  /* 0x001c */ long Padding_2843;
  /* 0x0020 */ struct EHExceptionRecord::EHParameters params;
}; /* size: 0x0040 */

class <CrtImplementationDetails>::NativeDll
{
  union
  {
    /* 0x0000 */ const unsigned int ProcessDetach;
    /* 0x0000 */ const unsigned int ProcessAttach;
    /* 0x0000 */ const unsigned int ThreadAttach;
    /* 0x0000 */ const unsigned int ThreadDetach;
    /* 0x0000 */ const unsigned int ProcessVerifier;
  }; /* size: 0x0004 */
}; /* size: 0x0001 */

union FT
{
  union
  {
    /* 0x0000 */ unsigned __int64 ft_scalar;
    /* 0x0000 */ struct _FILETIME ft_struct;
  }; /* size: 0x0008 */
}; /* size: 0x0008 */

typedef struct _GS_HANDLER_DATA
{
  union
  {
    union
    {
      struct
      {
        struct /* bitfield */
        {
          /* 0x0000 */ unsigned long EHandler : 1; /* bit position: 0 */
          /* 0x0000 */ unsigned long UHandler : 1; /* bit position: 1 */
          /* 0x0000 */ unsigned long HasAlignment : 1; /* bit position: 2 */
        }; /* bitfield */
      } /* size: 0x0004 */ Bits;
      /* 0x0000 */ long CookieOffset;
    }; /* size: 0x0004 */
  } /* size: 0x0004 */ u;
  /* 0x0004 */ long AlignedBaseOffset;
  /* 0x0008 */ long Alignment;
} GS_HANDLER_DATA, *PGS_HANDLER_DATA; /* size: 0x000c */

struct CsFrame
{
  /* 0x0000 */ unsigned __int64 SavedR10;
  /* 0x0008 */ unsigned __int64 SavedR11;
}; /* size: 0x0010 */

#include <poppack.h>
